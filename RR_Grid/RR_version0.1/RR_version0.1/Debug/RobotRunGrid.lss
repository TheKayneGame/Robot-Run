
RobotRunGrid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007c  00800100  00003678  0000370c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003678  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e9  0080017c  0080017c  00003788  2**0
                  ALLOC
  3 .stab         0000759c  00000000  00000000  00003788  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000a086  00000000  00000000  0000ad24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  00014daa  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00014dec  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000100  00000000  00000000  00014e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000027e5  00000000  00000000  00014f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000ddc  00000000  00000000  00017711  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001aa5  00000000  00000000  000184ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000354  00000000  00000000  00019f94  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000917  00000000  00000000  0001a2e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000157d  00000000  00000000  0001abff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000c0  00000000  00000000  0001c17c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__dtors_end>
       4:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
       8:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
       c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      10:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      14:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      18:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      1c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      20:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      24:	0c 94 f1 10 	jmp	0x21e2	; 0x21e2 <__vector_9>
      28:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      2c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      30:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      34:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__vector_13>
      38:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      3c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      40:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      44:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      48:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <__vector_18>
      4c:	0c 94 cc 10 	jmp	0x2198	; 0x2198 <__vector_19>
      50:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      54:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      58:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      5c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      60:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      64:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      68:	05 a8       	ldd	r0, Z+53	; 0x35
      6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
      6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <__stack+0xd3>
      6e:	4e b9       	out	0x0e, r20	; 14
      70:	38 36       	cpi	r19, 0x68	; 104
      72:	a9 02       	muls	r26, r25
      74:	0c 50       	subi	r16, 0x0C	; 12
      76:	b9 91       	ld	r27, Y+
      78:	86 88       	ldd	r8, Z+22	; 0x16
      7a:	08 3c       	cpi	r16, 0xC8	; 200
      7c:	a6 aa       	std	Z+54, r10	; 0x36
      7e:	aa 2a       	or	r10, r26
      80:	be 00       	.word	0x00be	; ????
      82:	00 00       	nop
      84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__trampolines_end>:
      86:	3e 66       	ori	r19, 0x6E	; 110
      88:	33 32       	cpi	r19, 0x23	; 35
      8a:	3e 3e       	cpi	r19, 0xEE	; 238
      8c:	61 33       	cpi	r22, 0x31	; 49
      8e:	32 00       	.word	0x0032	; ????

00000090 <__c.2263>:
      90:	3e 66 33 32 3e 3e 61 33 32 00                       >f32>>a32.

0000009a <__c.2259>:
      9a:	3e 66 33 32 3e 3e 61 33 32 00                       >f32>>a32.

000000a4 <__c.2255>:
      a4:	3e 66 33 32 3e 3e 61 33 32 00                       >f32>>a32.

000000ae <__c.2473>:
      ae:	3e 66 33 32 3e 3e 61 33 32 00                       >f32>>a32.

000000b8 <__c.2471>:
      b8:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

000000c2 <__ctors_end>:
      c2:	d2 11       	cpse	r29, r2

000000c4 <__dtors_end>:
      c4:	11 24       	eor	r1, r1
      c6:	1f be       	out	0x3f, r1	; 63
      c8:	cf ef       	ldi	r28, 0xFF	; 255
      ca:	d8 e0       	ldi	r29, 0x08	; 8
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
      d0:	11 e0       	ldi	r17, 0x01	; 1
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	e8 e7       	ldi	r30, 0x78	; 120
      d8:	f6 e3       	ldi	r31, 0x36	; 54
      da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
      dc:	05 90       	lpm	r0, Z+
      de:	0d 92       	st	X+, r0
      e0:	ac 37       	cpi	r26, 0x7C	; 124
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
      e6:	22 e0       	ldi	r18, 0x02	; 2
      e8:	ac e7       	ldi	r26, 0x7C	; 124
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	a5 36       	cpi	r26, 0x65	; 101
      f2:	b2 07       	cpc	r27, r18
      f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>
      f6:	0e 94 2c 01 	call	0x258	; 0x258 <main>
      fa:	0c 94 2f 1b 	jmp	0x365e	; 0x365e <__do_global_dtors>

000000fe <__bad_interrupt>:
      fe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000102 <readGrid>:
		set_motors(60,60);
		play_from_program_space(PSTR(">f32>>a32"));
		delay_ms(170);
		set_motors(0,0);      //moet korte stoot geven zodat de robot over kruispunt heen komt, nog kijken hoe hard / lang
	}
}
     102:	fc 01       	movw	r30, r24
     104:	62 e0       	ldi	r22, 0x02	; 2
     106:	70 e0       	ldi	r23, 0x00	; 0
     108:	71 83       	std	Z+1, r23	; 0x01
     10a:	60 83       	st	Z, r22
     10c:	21 e0       	ldi	r18, 0x01	; 1
     10e:	30 e0       	ldi	r19, 0x00	; 0
     110:	33 83       	std	Z+3, r19	; 0x03
     112:	22 83       	std	Z+2, r18	; 0x02
     114:	75 83       	std	Z+5, r23	; 0x05
     116:	64 83       	std	Z+4, r22	; 0x04
     118:	37 83       	std	Z+7, r19	; 0x07
     11a:	26 83       	std	Z+6, r18	; 0x06
     11c:	31 87       	std	Z+9, r19	; 0x09
     11e:	20 87       	std	Z+8, r18	; 0x08
     120:	83 e0       	ldi	r24, 0x03	; 3
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	93 87       	std	Z+11, r25	; 0x0b
     126:	82 87       	std	Z+10, r24	; 0x0a
     128:	75 87       	std	Z+13, r23	; 0x0d
     12a:	64 87       	std	Z+12, r22	; 0x0c
     12c:	45 e0       	ldi	r20, 0x05	; 5
     12e:	50 e0       	ldi	r21, 0x00	; 0
     130:	57 87       	std	Z+15, r21	; 0x0f
     132:	46 87       	std	Z+14, r20	; 0x0e
     134:	31 8b       	std	Z+17, r19	; 0x11
     136:	20 8b       	std	Z+16, r18	; 0x10
     138:	33 8b       	std	Z+19, r19	; 0x13
     13a:	22 8b       	std	Z+18, r18	; 0x12
     13c:	55 8b       	std	Z+21, r21	; 0x15
     13e:	44 8b       	std	Z+20, r20	; 0x14
     140:	91 a3       	std	Z+33, r25	; 0x21
     142:	80 a3       	std	Z+32, r24	; 0x20
     144:	93 a3       	std	Z+35, r25	; 0x23
     146:	82 a3       	std	Z+34, r24	; 0x22
     148:	55 a3       	std	Z+37, r21	; 0x25
     14a:	44 a3       	std	Z+36, r20	; 0x24
     14c:	91 ab       	std	Z+49, r25	; 0x31
     14e:	80 ab       	std	Z+48, r24	; 0x30
     150:	33 ab       	std	Z+51, r19	; 0x33
     152:	22 ab       	std	Z+50, r18	; 0x32
     154:	75 ab       	std	Z+53, r23	; 0x35
     156:	64 ab       	std	Z+52, r22	; 0x34
     158:	57 ab       	std	Z+55, r21	; 0x37
     15a:	46 ab       	std	Z+54, r20	; 0x36
     15c:	e0 5c       	subi	r30, 0xC0	; 192
     15e:	ff 4f       	sbci	r31, 0xFF	; 255
     160:	91 83       	std	Z+1, r25	; 0x01
     162:	80 83       	st	Z, r24
     164:	73 83       	std	Z+3, r23	; 0x03
     166:	62 83       	std	Z+2, r22	; 0x02
     168:	95 83       	std	Z+5, r25	; 0x05
     16a:	84 83       	std	Z+4, r24	; 0x04
     16c:	57 83       	std	Z+7, r21	; 0x07
     16e:	46 83       	std	Z+6, r20	; 0x06
     170:	08 95       	ret

00000172 <setDirection>:
// 	else{
// 		setDirection(S, directionCurrent);
// 	}
// }

void setDirection(direction directionDesired, direction *directionCurrent){
     172:	ef 92       	push	r14
     174:	ff 92       	push	r15
     176:	1f 93       	push	r17
     178:	cf 93       	push	r28
     17a:	df 93       	push	r29
     17c:	cd b7       	in	r28, 0x3d	; 61
     17e:	de b7       	in	r29, 0x3e	; 62
     180:	60 97       	sbiw	r28, 0x10	; 16
     182:	0f b6       	in	r0, 0x3f	; 63
     184:	f8 94       	cli
     186:	de bf       	out	0x3e, r29	; 62
     188:	0f be       	out	0x3f, r0	; 63
     18a:	cd bf       	out	0x3d, r28	; 61
	rotation orientation[4][4] ={{X, R, T, L},
     18c:	90 e1       	ldi	r25, 0x10	; 16
     18e:	e4 e1       	ldi	r30, 0x14	; 20
     190:	f1 e0       	ldi	r31, 0x01	; 1
     192:	de 01       	movw	r26, r28
     194:	11 96       	adiw	r26, 0x01	; 1
     196:	01 90       	ld	r0, Z+
     198:	0d 92       	st	X+, r0
     19a:	9a 95       	dec	r25
     19c:	e1 f7       	brne	.-8      	; 0x196 <setDirection+0x24>
	{L, X, R, T},
	{T, L, X, R},
	{R, T, L, X}};
	
	if(*directionCurrent != directionDesired){
     19e:	fb 01       	movw	r30, r22
     1a0:	90 81       	ld	r25, Z
     1a2:	98 17       	cp	r25, r24
     1a4:	09 f4       	brne	.+2      	; 0x1a8 <setDirection+0x36>
     1a6:	4c c0       	rjmp	.+152    	; 0x240 <setDirection+0xce>
     1a8:	7b 01       	movw	r14, r22
     1aa:	18 2f       	mov	r17, r24
		switch(orientation[directionDesired][*directionCurrent]){
     1ac:	e1 e0       	ldi	r30, 0x01	; 1
     1ae:	f0 e0       	ldi	r31, 0x00	; 0
     1b0:	ec 0f       	add	r30, r28
     1b2:	fd 1f       	adc	r31, r29
     1b4:	84 e0       	ldi	r24, 0x04	; 4
     1b6:	18 9f       	mul	r17, r24
     1b8:	e0 0d       	add	r30, r0
     1ba:	f1 1d       	adc	r31, r1
     1bc:	11 24       	eor	r1, r1
     1be:	e9 0f       	add	r30, r25
     1c0:	f1 1d       	adc	r31, r1
     1c2:	80 81       	ld	r24, Z
     1c4:	81 30       	cpi	r24, 0x01	; 1
     1c6:	21 f0       	breq	.+8      	; 0x1d0 <setDirection+0x5e>
     1c8:	48 f1       	brcs	.+82     	; 0x21c <setDirection+0xaa>
     1ca:	82 30       	cpi	r24, 0x02	; 2
     1cc:	a1 f0       	breq	.+40     	; 0x1f6 <setDirection+0x84>
     1ce:	38 c0       	rjmp	.+112    	; 0x240 <setDirection+0xce>
			case R:
			set_motors(60,-60);
     1d0:	64 ec       	ldi	r22, 0xC4	; 196
     1d2:	7f ef       	ldi	r23, 0xFF	; 255
     1d4:	8c e3       	ldi	r24, 0x3C	; 60
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <set_motors>
			delay_ms(270);
     1dc:	8e e0       	ldi	r24, 0x0E	; 14
     1de:	91 e0       	ldi	r25, 0x01	; 1
     1e0:	0e 94 39 11 	call	0x2272	; 0x2272 <delay_ms>
			set_motors(0,0);
     1e4:	60 e0       	ldi	r22, 0x00	; 0
     1e6:	70 e0       	ldi	r23, 0x00	; 0
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <set_motors>
			
			//motorControl(60, 'R', 0.25);
			//clear();
			//print("Right!");
			*directionCurrent = directionDesired;
     1f0:	f7 01       	movw	r30, r14
     1f2:	10 83       	st	Z, r17
			break;
     1f4:	25 c0       	rjmp	.+74     	; 0x240 <setDirection+0xce>
			case L:
			set_motors(-60,60);
     1f6:	6c e3       	ldi	r22, 0x3C	; 60
     1f8:	70 e0       	ldi	r23, 0x00	; 0
     1fa:	84 ec       	ldi	r24, 0xC4	; 196
     1fc:	9f ef       	ldi	r25, 0xFF	; 255
     1fe:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <set_motors>
			delay_ms(270);
     202:	8e e0       	ldi	r24, 0x0E	; 14
     204:	91 e0       	ldi	r25, 0x01	; 1
     206:	0e 94 39 11 	call	0x2272	; 0x2272 <delay_ms>
			set_motors(0,0);
     20a:	60 e0       	ldi	r22, 0x00	; 0
     20c:	70 e0       	ldi	r23, 0x00	; 0
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <set_motors>
			
			//motorControl(60, 'L', 0.25);
			//clear();
			//print("Left!");
			*directionCurrent = directionDesired;
     216:	f7 01       	movw	r30, r14
     218:	10 83       	st	Z, r17
			break;
     21a:	12 c0       	rjmp	.+36     	; 0x240 <setDirection+0xce>
			case T:
			set_motors(60,-60);
     21c:	64 ec       	ldi	r22, 0xC4	; 196
     21e:	7f ef       	ldi	r23, 0xFF	; 255
     220:	8c e3       	ldi	r24, 0x3C	; 60
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <set_motors>
			delay_ms(540);
     228:	8c e1       	ldi	r24, 0x1C	; 28
     22a:	92 e0       	ldi	r25, 0x02	; 2
     22c:	0e 94 39 11 	call	0x2272	; 0x2272 <delay_ms>
			set_motors(0,0);
     230:	60 e0       	ldi	r22, 0x00	; 0
     232:	70 e0       	ldi	r23, 0x00	; 0
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <set_motors>
			//motorControl(60, 'R', 0.25);
			//delay_ms(2000);
			//motorControl(60, 'R', 0.25);
			//clear();
			//print("Turn!");
			*directionCurrent = directionDesired;
     23c:	f7 01       	movw	r30, r14
     23e:	10 83       	st	Z, r17
			break;
			clear();
		}
	}
	
}
     240:	60 96       	adiw	r28, 0x10	; 16
     242:	0f b6       	in	r0, 0x3f	; 63
     244:	f8 94       	cli
     246:	de bf       	out	0x3e, r29	; 62
     248:	0f be       	out	0x3f, r0	; 63
     24a:	cd bf       	out	0x3d, r28	; 61
     24c:	df 91       	pop	r29
     24e:	cf 91       	pop	r28
     250:	1f 91       	pop	r17
     252:	ff 90       	pop	r15
     254:	ef 90       	pop	r14
     256:	08 95       	ret

00000258 <main>:
#include <pololu/3pi.h>
#include <avr/pgmspace.h>
#include <avr/io.h>
#include <avr/interrupt.h>

int main(){
     258:	2f 92       	push	r2
     25a:	3f 92       	push	r3
     25c:	4f 92       	push	r4
     25e:	5f 92       	push	r5
     260:	6f 92       	push	r6
     262:	7f 92       	push	r7
     264:	8f 92       	push	r8
     266:	9f 92       	push	r9
     268:	af 92       	push	r10
     26a:	bf 92       	push	r11
     26c:	cf 92       	push	r12
     26e:	df 92       	push	r13
     270:	ef 92       	push	r14
     272:	ff 92       	push	r15
     274:	0f 93       	push	r16
     276:	1f 93       	push	r17
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
     27c:	cd b7       	in	r28, 0x3d	; 61
     27e:	de b7       	in	r29, 0x3e	; 62
     280:	c7 56       	subi	r28, 0x67	; 103
     282:	d1 09       	sbc	r29, r1
     284:	0f b6       	in	r0, 0x3f	; 63
     286:	f8 94       	cli
     288:	de bf       	out	0x3e, r29	; 62
     28a:	0f be       	out	0x3f, r0	; 63
     28c:	cd bf       	out	0x3d, r28	; 61
	initialize();
     28e:	0e 94 70 08 	call	0x10e0	; 0x10e0 <initialize>
	
	int orderX[sizeOfOrder] ={4, 1, 4, 2};
     292:	88 e0       	ldi	r24, 0x08	; 8
     294:	e4 e2       	ldi	r30, 0x24	; 36
     296:	f1 e0       	ldi	r31, 0x01	; 1
     298:	de 01       	movw	r26, r28
     29a:	11 96       	adiw	r26, 0x01	; 1
     29c:	01 90       	ld	r0, Z+
     29e:	0d 92       	st	X+, r0
     2a0:	8a 95       	dec	r24
     2a2:	e1 f7       	brne	.-8      	; 0x29c <main+0x44>
	int orderY[sizeOfOrder] ={4, 3, 1, 1};
     2a4:	88 e0       	ldi	r24, 0x08	; 8
     2a6:	ec e2       	ldi	r30, 0x2C	; 44
     2a8:	f1 e0       	ldi	r31, 0x01	; 1
     2aa:	de 01       	movw	r26, r28
     2ac:	19 96       	adiw	r26, 0x09	; 9
     2ae:	01 90       	ld	r0, Z+
     2b0:	0d 92       	st	X+, r0
     2b2:	8a 95       	dec	r24
     2b4:	e1 f7       	brne	.-8      	; 0x2ae <main+0x56>
	//wirMain(orderX, orderY);
	//sortOrder(orderX, orderY);
	
	int routes[5][8];
	readGrid(routes);
     2b6:	ce 01       	movw	r24, r28
     2b8:	41 96       	adiw	r24, 0x11	; 17
     2ba:	0e 94 81 00 	call	0x102	; 0x102 <readGrid>
	
	int intersectnum = 0, endOfRoute = 0, orderNum = 0, xCoordinate = 0, yCoordinate = 0, x = 0;
	direction directionCurrent = N;
     2be:	a2 96       	adiw	r28, 0x22	; 34
     2c0:	1f ae       	std	Y+63, r1	; 0x3f
     2c2:	a2 97       	sbiw	r28, 0x22	; 34
	
	int followLineFlag = 0;
	int productCollectedFlag = 0;
     2c4:	e1 2c       	mov	r14, r1
     2c6:	f1 2c       	mov	r15, r1
	readGrid(routes);
	
	int intersectnum = 0, endOfRoute = 0, orderNum = 0, xCoordinate = 0, yCoordinate = 0, x = 0;
	direction directionCurrent = N;
	
	int followLineFlag = 0;
     2c8:	a4 96       	adiw	r28, 0x24	; 36
     2ca:	1f ae       	std	Y+63, r1	; 0x3f
     2cc:	1e ae       	std	Y+62, r1	; 0x3e
     2ce:	a4 97       	sbiw	r28, 0x24	; 36
	//sortOrder(orderX, orderY);
	
	int routes[5][8];
	readGrid(routes);
	
	int intersectnum = 0, endOfRoute = 0, orderNum = 0, xCoordinate = 0, yCoordinate = 0, x = 0;
     2d0:	a6 96       	adiw	r28, 0x26	; 38
     2d2:	1f ae       	std	Y+63, r1	; 0x3f
     2d4:	1e ae       	std	Y+62, r1	; 0x3e
     2d6:	a6 97       	sbiw	r28, 0x26	; 38
     2d8:	21 2c       	mov	r2, r1
     2da:	31 2c       	mov	r3, r1
     2dc:	a1 2c       	mov	r10, r1
     2de:	b1 2c       	mov	r11, r1
     2e0:	c1 2c       	mov	r12, r1
     2e2:	d1 2c       	mov	r13, r1
     2e4:	00 e0       	ldi	r16, 0x00	; 0
     2e6:	10 e0       	ldi	r17, 0x00	; 0
     2e8:	a8 96       	adiw	r28, 0x28	; 40
     2ea:	1f ae       	std	Y+63, r1	; 0x3f
     2ec:	1e ae       	std	Y+62, r1	; 0x3e
     2ee:	a8 97       	sbiw	r28, 0x28	; 40
	}*/
	
	
	while (orderNum != sizeOfOrder)
	{
		checkDistance();
     2f0:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <checkDistance>
		
		read_line_sensors(sensors,IR_EMITTERS_ON);
     2f4:	61 e0       	ldi	r22, 0x01	; 1
     2f6:	8f e4       	ldi	r24, 0x4F	; 79
     2f8:	92 e0       	ldi	r25, 0x02	; 2
     2fa:	0e 94 8b 11 	call	0x2316	; 0x2316 <read_line_sensors>
		if (checkAfslag() != 1 && productCollectedFlag == 0){
     2fe:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <checkAfslag>
     302:	01 97       	sbiw	r24, 0x01	; 1
     304:	91 f0       	breq	.+36     	; 0x32a <main+0xd2>
     306:	e1 14       	cp	r14, r1
     308:	f1 04       	cpc	r15, r1
     30a:	79 f4       	brne	.+30     	; 0x32a <main+0xd2>
			clear();
     30c:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <clear>
			print("Line!");
     310:	81 e5       	ldi	r24, 0x51	; 81
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <print>
			followLine();
     318:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <followLine>
			followLineFlag = 1;
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	a3 96       	adiw	r28, 0x23	; 35
     320:	8f af       	std	Y+63, r24	; 0x3f
     322:	a3 97       	sbiw	r28, 0x23	; 35
     324:	a4 96       	adiw	r28, 0x24	; 36
     326:	1f ae       	std	Y+63, r1	; 0x3f
     328:	a4 97       	sbiw	r28, 0x24	; 36
		}
		
		if (endOfRoute == 0 && checkAfslag() == 1){
     32a:	01 15       	cp	r16, r1
     32c:	11 05       	cpc	r17, r1
     32e:	09 f0       	breq	.+2      	; 0x332 <main+0xda>
     330:	a2 c0       	rjmp	.+324    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     332:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <checkAfslag>
     336:	01 97       	sbiw	r24, 0x01	; 1
     338:	09 f0       	breq	.+2      	; 0x33c <main+0xe4>
     33a:	a6 c0       	rjmp	.+332    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>

			
			switch(routes[0][intersectnum]){
     33c:	a8 96       	adiw	r28, 0x28	; 40
     33e:	ee ad       	ldd	r30, Y+62	; 0x3e
     340:	ff ad       	ldd	r31, Y+63	; 0x3f
     342:	a8 97       	sbiw	r28, 0x28	; 40
     344:	ee 0f       	add	r30, r30
     346:	ff 1f       	adc	r31, r31
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	8c 0f       	add	r24, r28
     34e:	9d 1f       	adc	r25, r29
     350:	e8 0f       	add	r30, r24
     352:	f9 1f       	adc	r31, r25
     354:	80 89       	ldd	r24, Z+16	; 0x10
     356:	91 89       	ldd	r25, Z+17	; 0x11
     358:	82 30       	cpi	r24, 0x02	; 2
     35a:	91 05       	cpc	r25, r1
     35c:	d1 f1       	breq	.+116    	; 0x3d2 <main+0x17a>
     35e:	1c f4       	brge	.+6      	; 0x366 <main+0x10e>
     360:	01 97       	sbiw	r24, 0x01	; 1
     362:	49 f0       	breq	.+18     	; 0x376 <main+0x11e>
     364:	88 c0       	rjmp	.+272    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     366:	83 30       	cpi	r24, 0x03	; 3
     368:	91 05       	cpc	r25, r1
     36a:	09 f4       	brne	.+2      	; 0x36e <main+0x116>
     36c:	60 c0       	rjmp	.+192    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     36e:	05 97       	sbiw	r24, 0x05	; 5
     370:	09 f4       	brne	.+2      	; 0x374 <main+0x11c>
     372:	70 c0       	rjmp	.+224    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     374:	80 c0       	rjmp	.+256    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
				case 1:
				set_motors(60,60);
     376:	6c e3       	ldi	r22, 0x3C	; 60
     378:	70 e0       	ldi	r23, 0x00	; 0
     37a:	8c e3       	ldi	r24, 0x3C	; 60
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <set_motors>
				play_from_program_space(PSTR(">f32>>a32"));
     382:	84 ea       	ldi	r24, 0xA4	; 164
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <play_from_program_space>
				delay_ms(170);
     38a:	8a ea       	ldi	r24, 0xAA	; 170
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	0e 94 39 11 	call	0x2272	; 0x2272 <delay_ms>
				set_motors(0,0);
     392:	60 e0       	ldi	r22, 0x00	; 0
     394:	70 e0       	ldi	r23, 0x00	; 0
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <set_motors>
				//motorControl(60, 'R', 0.25);
				
				set_motors(60,-60);
     39e:	64 ec       	ldi	r22, 0xC4	; 196
     3a0:	7f ef       	ldi	r23, 0xFF	; 255
     3a2:	8c e3       	ldi	r24, 0x3C	; 60
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <set_motors>
				delay_ms(270);
     3aa:	8e e0       	ldi	r24, 0x0E	; 14
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	0e 94 39 11 	call	0x2272	; 0x2272 <delay_ms>
				set_motors(0,0);
     3b2:	60 e0       	ldi	r22, 0x00	; 0
     3b4:	70 e0       	ldi	r23, 0x00	; 0
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <set_motors>
				
				intersectnum++;
     3be:	a8 96       	adiw	r28, 0x28	; 40
     3c0:	8e ad       	ldd	r24, Y+62	; 0x3e
     3c2:	9f ad       	ldd	r25, Y+63	; 0x3f
     3c4:	a8 97       	sbiw	r28, 0x28	; 40
     3c6:	01 96       	adiw	r24, 0x01	; 1
     3c8:	a8 96       	adiw	r28, 0x28	; 40
     3ca:	9f af       	std	Y+63, r25	; 0x3f
     3cc:	8e af       	std	Y+62, r24	; 0x3e
     3ce:	a8 97       	sbiw	r28, 0x28	; 40
				break;
     3d0:	5b c0       	rjmp	.+182    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
				case 2:
				set_motors(60,60);
     3d2:	6c e3       	ldi	r22, 0x3C	; 60
     3d4:	70 e0       	ldi	r23, 0x00	; 0
     3d6:	8c e3       	ldi	r24, 0x3C	; 60
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <set_motors>
				play_from_program_space(PSTR(">f32>>a32"));
     3de:	8a e9       	ldi	r24, 0x9A	; 154
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <play_from_program_space>
				delay_ms(170);
     3e6:	8a ea       	ldi	r24, 0xAA	; 170
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	0e 94 39 11 	call	0x2272	; 0x2272 <delay_ms>
				set_motors(0,0);
     3ee:	60 e0       	ldi	r22, 0x00	; 0
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <set_motors>
				//motorControl(60, 'L', 0.25);
				
				set_motors(-60,60);
     3fa:	6c e3       	ldi	r22, 0x3C	; 60
     3fc:	70 e0       	ldi	r23, 0x00	; 0
     3fe:	84 ec       	ldi	r24, 0xC4	; 196
     400:	9f ef       	ldi	r25, 0xFF	; 255
     402:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <set_motors>
				delay_ms(270);
     406:	8e e0       	ldi	r24, 0x0E	; 14
     408:	91 e0       	ldi	r25, 0x01	; 1
     40a:	0e 94 39 11 	call	0x2272	; 0x2272 <delay_ms>
				set_motors(0,0);
     40e:	60 e0       	ldi	r22, 0x00	; 0
     410:	70 e0       	ldi	r23, 0x00	; 0
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <set_motors>
				
				intersectnum++;
     41a:	a8 96       	adiw	r28, 0x28	; 40
     41c:	8e ad       	ldd	r24, Y+62	; 0x3e
     41e:	9f ad       	ldd	r25, Y+63	; 0x3f
     420:	a8 97       	sbiw	r28, 0x28	; 40
     422:	01 96       	adiw	r24, 0x01	; 1
     424:	a8 96       	adiw	r28, 0x28	; 40
     426:	9f af       	std	Y+63, r25	; 0x3f
     428:	8e af       	std	Y+62, r24	; 0x3e
     42a:	a8 97       	sbiw	r28, 0x28	; 40
				break;
     42c:	2d c0       	rjmp	.+90     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
				case 3:
				motorControl(60, 'F', 0.89);
     42e:	2a e0       	ldi	r18, 0x0A	; 10
     430:	37 ed       	ldi	r19, 0xD7	; 215
     432:	43 e6       	ldi	r20, 0x63	; 99
     434:	5f e3       	ldi	r21, 0x3F	; 63
     436:	66 e4       	ldi	r22, 0x46	; 70
     438:	8c e3       	ldi	r24, 0x3C	; 60
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	0e 94 23 04 	call	0x846	; 0x846 <motorControl>
				intersectnum++;
     440:	a8 96       	adiw	r28, 0x28	; 40
     442:	8e ad       	ldd	r24, Y+62	; 0x3e
     444:	9f ad       	ldd	r25, Y+63	; 0x3f
     446:	a8 97       	sbiw	r28, 0x28	; 40
     448:	01 96       	adiw	r24, 0x01	; 1
     44a:	a8 96       	adiw	r28, 0x28	; 40
     44c:	9f af       	std	Y+63, r25	; 0x3f
     44e:	8e af       	std	Y+62, r24	; 0x3e
     450:	a8 97       	sbiw	r28, 0x28	; 40
				break;
     452:	1a c0       	rjmp	.+52     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
     454:	5f 9a       	sbi	0x0b, 7	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     456:	57 9a       	sbi	0x0a, 7	; 10
				case 5:
				//motorControl(0, 'F', 0.40);
				green_led(1);                            //Robot has reached destination
				//play_from_program_space(PSTR(">f32>>a32"));
				set_motors(0,0);
     458:	60 e0       	ldi	r22, 0x00	; 0
     45a:	70 e0       	ldi	r23, 0x00	; 0
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <set_motors>
				delay_ms(1000);
     464:	88 ee       	ldi	r24, 0xE8	; 232
     466:	93 e0       	ldi	r25, 0x03	; 3
     468:	0e 94 39 11 	call	0x2272	; 0x2272 <delay_ms>
				endOfRoute = 1;
				followLineFlag = 0;
     46c:	a4 96       	adiw	r28, 0x24	; 36
     46e:	1f ae       	std	Y+63, r1	; 0x3f
     470:	1e ae       	std	Y+62, r1	; 0x3e
     472:	a4 97       	sbiw	r28, 0x24	; 36
     474:	03 c0       	rjmp	.+6      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
				break;
			}
		}
		
		if ((endOfRoute == 1 && checkAfslag() == 1) || productCollectedFlag == 1){
     476:	01 30       	cpi	r16, 0x01	; 1
     478:	11 05       	cpc	r17, r1
     47a:	31 f4       	brne	.+12     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     47c:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <checkAfslag>
     480:	01 97       	sbiw	r24, 0x01	; 1
     482:	41 f0       	breq	.+16     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     484:	01 e0       	ldi	r16, 0x01	; 1
     486:	10 e0       	ldi	r17, 0x00	; 0
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	e9 16       	cp	r14, r25
     48c:	f1 04       	cpc	r15, r1
     48e:	09 f0       	breq	.+2      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     490:	4d c1       	rjmp	.+666    	; 0x72c <__LOCK_REGION_LENGTH__+0x32c>
     492:	52 c1       	rjmp	.+676    	; 0x738 <__LOCK_REGION_LENGTH__+0x338>

			clear();
     494:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <clear>
			lcd_goto_xy(0,0);
     498:	60 e0       	ldi	r22, 0x00	; 0
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <lcd_goto_xy>
			print_long(xCoordinate);
     4a0:	b5 01       	movw	r22, r10
     4a2:	0b 2c       	mov	r0, r11
     4a4:	00 0c       	add	r0, r0
     4a6:	88 0b       	sbc	r24, r24
     4a8:	99 0b       	sbc	r25, r25
     4aa:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <print_long>
			lcd_goto_xy(0,1);
     4ae:	61 e0       	ldi	r22, 0x01	; 1
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <lcd_goto_xy>
			print_long(yCoordinate);
     4b6:	21 01       	movw	r4, r2
     4b8:	03 2c       	mov	r0, r3
     4ba:	00 0c       	add	r0, r0
     4bc:	66 08       	sbc	r6, r6
     4be:	77 08       	sbc	r7, r7
     4c0:	c3 01       	movw	r24, r6
     4c2:	b2 01       	movw	r22, r4
     4c4:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <print_long>
			
			if (productCollectedFlag == 0){
     4c8:	e1 14       	cp	r14, r1
     4ca:	f1 04       	cpc	r15, r1
     4cc:	b9 f4       	brne	.+46     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
				set_motors(60,60);
     4ce:	6c e3       	ldi	r22, 0x3C	; 60
     4d0:	70 e0       	ldi	r23, 0x00	; 0
     4d2:	8c e3       	ldi	r24, 0x3C	; 60
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <set_motors>
				play_from_program_space(PSTR(">f32>>a32"));
     4da:	80 e9       	ldi	r24, 0x90	; 144
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <play_from_program_space>
				delay_ms(170);
     4e2:	8a ea       	ldi	r24, 0xAA	; 170
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	0e 94 39 11 	call	0x2272	; 0x2272 <delay_ms>
				set_motors(0,0);
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <set_motors>
     4f6:	01 e0       	ldi	r16, 0x01	; 1
     4f8:	10 e0       	ldi	r17, 0x00	; 0
     4fa:	0b c0       	rjmp	.+22     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
			}

			
			if (productCollectedFlag == 1){
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	e8 16       	cp	r14, r24
     500:	f1 04       	cpc	r15, r1
     502:	29 f4       	brne	.+10     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
     504:	01 e0       	ldi	r16, 0x01	; 1
     506:	10 e0       	ldi	r17, 0x00	; 0
				productCollectedFlag = 0;
     508:	e1 2c       	mov	r14, r1
     50a:	f1 2c       	mov	r15, r1
     50c:	02 c0       	rjmp	.+4      	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
     50e:	01 e0       	ldi	r16, 0x01	; 1
     510:	10 e0       	ldi	r17, 0x00	; 0
			}
			
			//delay_ms(2000);
			
			if((orderX[orderNum] != xCoordinate) && (x == 0)){
     512:	f6 01       	movw	r30, r12
     514:	ee 0f       	add	r30, r30
     516:	ff 1f       	adc	r31, r31
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	8c 0f       	add	r24, r28
     51e:	9d 1f       	adc	r25, r29
     520:	e8 0f       	add	r30, r24
     522:	f9 1f       	adc	r31, r25
     524:	80 80       	ld	r8, Z
     526:	91 80       	ldd	r9, Z+1	; 0x01
     528:	8a 14       	cp	r8, r10
     52a:	9b 04       	cpc	r9, r11
     52c:	09 f4       	brne	.+2      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
     52e:	58 c1       	rjmp	.+688    	; 0x7e0 <__LOCK_REGION_LENGTH__+0x3e0>
     530:	a6 96       	adiw	r28, 0x26	; 38
     532:	8e ad       	ldd	r24, Y+62	; 0x3e
     534:	9f ad       	ldd	r25, Y+63	; 0x3f
     536:	a6 97       	sbiw	r28, 0x26	; 38
     538:	89 2b       	or	r24, r25
     53a:	09 f0       	breq	.+2      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
     53c:	2f c1       	rjmp	.+606    	; 0x79c <__LOCK_REGION_LENGTH__+0x39c>
				if(orderX[orderNum] > xCoordinate){
     53e:	a8 14       	cp	r10, r8
     540:	b9 04       	cpc	r11, r9
     542:	44 f5       	brge	.+80     	; 0x594 <__LOCK_REGION_LENGTH__+0x194>

					setDirection(W, &directionCurrent);
     544:	be 01       	movw	r22, r28
     546:	6f 59       	subi	r22, 0x9F	; 159
     548:	7f 4f       	sbci	r23, 0xFF	; 255
     54a:	83 e0       	ldi	r24, 0x03	; 3
     54c:	0e 94 b9 00 	call	0x172	; 0x172 <setDirection>

					if (followLineFlag == 1){
     550:	a4 96       	adiw	r28, 0x24	; 36
     552:	8e ad       	ldd	r24, Y+62	; 0x3e
     554:	9f ad       	ldd	r25, Y+63	; 0x3f
     556:	a4 97       	sbiw	r28, 0x24	; 36
     558:	01 97       	sbiw	r24, 0x01	; 1
     55a:	39 f4       	brne	.+14     	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
						xCoordinate++;
     55c:	9f ef       	ldi	r25, 0xFF	; 255
     55e:	a9 1a       	sub	r10, r25
     560:	b9 0a       	sbc	r11, r25
						followLineFlag = 0;
     562:	a4 96       	adiw	r28, 0x24	; 36
     564:	1f ae       	std	Y+63, r1	; 0x3f
     566:	1e ae       	std	Y+62, r1	; 0x3e
     568:	a4 97       	sbiw	r28, 0x24	; 36
					}
					
					clear();
     56a:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <clear>
					lcd_goto_xy(0,0);
     56e:	60 e0       	ldi	r22, 0x00	; 0
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <lcd_goto_xy>
					print_long(xCoordinate);
     576:	b5 01       	movw	r22, r10
     578:	0b 2c       	mov	r0, r11
     57a:	00 0c       	add	r0, r0
     57c:	88 0b       	sbc	r24, r24
     57e:	99 0b       	sbc	r25, r25
     580:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <print_long>
					lcd_goto_xy(0,1);
     584:	61 e0       	ldi	r22, 0x01	; 1
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <lcd_goto_xy>
					print_long(yCoordinate);
     58c:	c3 01       	movw	r24, r6
     58e:	b2 01       	movw	r22, r4
     590:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <print_long>
					//delay_ms(1000);


				}
				if(orderX[orderNum] < xCoordinate){
     594:	8a 14       	cp	r8, r10
     596:	9b 04       	cpc	r9, r11
     598:	44 f5       	brge	.+80     	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>

					setDirection(E, &directionCurrent);
     59a:	be 01       	movw	r22, r28
     59c:	6f 59       	subi	r22, 0x9F	; 159
     59e:	7f 4f       	sbci	r23, 0xFF	; 255
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	0e 94 b9 00 	call	0x172	; 0x172 <setDirection>
					
					if (followLineFlag == 1){
     5a6:	a4 96       	adiw	r28, 0x24	; 36
     5a8:	8e ad       	ldd	r24, Y+62	; 0x3e
     5aa:	9f ad       	ldd	r25, Y+63	; 0x3f
     5ac:	a4 97       	sbiw	r28, 0x24	; 36
     5ae:	01 97       	sbiw	r24, 0x01	; 1
     5b0:	39 f4       	brne	.+14     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
						xCoordinate--;
     5b2:	91 e0       	ldi	r25, 0x01	; 1
     5b4:	a9 1a       	sub	r10, r25
     5b6:	b1 08       	sbc	r11, r1
						followLineFlag = 0;
     5b8:	a4 96       	adiw	r28, 0x24	; 36
     5ba:	1f ae       	std	Y+63, r1	; 0x3f
     5bc:	1e ae       	std	Y+62, r1	; 0x3e
     5be:	a4 97       	sbiw	r28, 0x24	; 36
					}
					clear();
     5c0:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <clear>
					lcd_goto_xy(0,0);
     5c4:	60 e0       	ldi	r22, 0x00	; 0
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <lcd_goto_xy>
					print_long(xCoordinate);
     5cc:	b5 01       	movw	r22, r10
     5ce:	0b 2c       	mov	r0, r11
     5d0:	00 0c       	add	r0, r0
     5d2:	88 0b       	sbc	r24, r24
     5d4:	99 0b       	sbc	r25, r25
     5d6:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <print_long>
					lcd_goto_xy(0,1);
     5da:	61 e0       	ldi	r22, 0x01	; 1
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <lcd_goto_xy>
					print_long(yCoordinate);
     5e2:	c3 01       	movw	r24, r6
     5e4:	b2 01       	movw	r22, r4
     5e6:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <print_long>


				}
				//followStraightLine(&xCoordinate, orderX[orderNum]);
			}
			if(orderX[orderNum] == xCoordinate){
     5ea:	a8 14       	cp	r10, r8
     5ec:	b9 04       	cpc	r11, r9
     5ee:	09 f0       	breq	.+2      	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
     5f0:	e6 c0       	rjmp	.+460    	; 0x7be <__LOCK_REGION_LENGTH__+0x3be>
     5f2:	bf c0       	rjmp	.+382    	; 0x772 <__LOCK_REGION_LENGTH__+0x372>
				x = 1;
			}
			if((orderY[orderNum] != yCoordinate) && (x == 1)){
     5f4:	a6 96       	adiw	r28, 0x26	; 38
     5f6:	8e ad       	ldd	r24, Y+62	; 0x3e
     5f8:	9f ad       	ldd	r25, Y+63	; 0x3f
     5fa:	a6 97       	sbiw	r28, 0x26	; 38
     5fc:	01 97       	sbiw	r24, 0x01	; 1
     5fe:	09 f0       	breq	.+2      	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
     600:	95 c0       	rjmp	.+298    	; 0x72c <__LOCK_REGION_LENGTH__+0x32c>
				if(orderY[orderNum] > yCoordinate){
     602:	26 14       	cp	r2, r6
     604:	37 04       	cpc	r3, r7
     606:	5c f5       	brge	.+86     	; 0x65e <__LOCK_REGION_LENGTH__+0x25e>

					setDirection(N, &directionCurrent);
     608:	be 01       	movw	r22, r28
     60a:	6f 59       	subi	r22, 0x9F	; 159
     60c:	7f 4f       	sbci	r23, 0xFF	; 255
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	0e 94 b9 00 	call	0x172	; 0x172 <setDirection>
					
					if (followLineFlag == 1){
     614:	a4 96       	adiw	r28, 0x24	; 36
     616:	8e ad       	ldd	r24, Y+62	; 0x3e
     618:	9f ad       	ldd	r25, Y+63	; 0x3f
     61a:	a4 97       	sbiw	r28, 0x24	; 36
     61c:	01 97       	sbiw	r24, 0x01	; 1
     61e:	39 f4       	brne	.+14     	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
						yCoordinate++;
     620:	9f ef       	ldi	r25, 0xFF	; 255
     622:	29 1a       	sub	r2, r25
     624:	39 0a       	sbc	r3, r25
						followLineFlag = 0;
     626:	a4 96       	adiw	r28, 0x24	; 36
     628:	1f ae       	std	Y+63, r1	; 0x3f
     62a:	1e ae       	std	Y+62, r1	; 0x3e
     62c:	a4 97       	sbiw	r28, 0x24	; 36
					}
					clear();
     62e:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <clear>
					lcd_goto_xy(0,0);
     632:	60 e0       	ldi	r22, 0x00	; 0
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <lcd_goto_xy>
					print_long(xCoordinate);
     63a:	b5 01       	movw	r22, r10
     63c:	0b 2c       	mov	r0, r11
     63e:	00 0c       	add	r0, r0
     640:	88 0b       	sbc	r24, r24
     642:	99 0b       	sbc	r25, r25
     644:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <print_long>
					lcd_goto_xy(0,1);
     648:	61 e0       	ldi	r22, 0x01	; 1
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <lcd_goto_xy>
					print_long(yCoordinate);
     650:	b1 01       	movw	r22, r2
     652:	03 2c       	mov	r0, r3
     654:	00 0c       	add	r0, r0
     656:	88 0b       	sbc	r24, r24
     658:	99 0b       	sbc	r25, r25
     65a:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <print_long>
					//delay_ms(1000);


				}
				if(orderY[orderNum] < yCoordinate){
     65e:	62 14       	cp	r6, r2
     660:	73 04       	cpc	r7, r3
     662:	5c f5       	brge	.+86     	; 0x6ba <__LOCK_REGION_LENGTH__+0x2ba>

					setDirection(S, &directionCurrent);
     664:	be 01       	movw	r22, r28
     666:	6f 59       	subi	r22, 0x9F	; 159
     668:	7f 4f       	sbci	r23, 0xFF	; 255
     66a:	82 e0       	ldi	r24, 0x02	; 2
     66c:	0e 94 b9 00 	call	0x172	; 0x172 <setDirection>
					
					if (followLineFlag == 1){
     670:	a4 96       	adiw	r28, 0x24	; 36
     672:	8e ad       	ldd	r24, Y+62	; 0x3e
     674:	9f ad       	ldd	r25, Y+63	; 0x3f
     676:	a4 97       	sbiw	r28, 0x24	; 36
     678:	01 97       	sbiw	r24, 0x01	; 1
     67a:	39 f4       	brne	.+14     	; 0x68a <__LOCK_REGION_LENGTH__+0x28a>
						yCoordinate--;
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	29 1a       	sub	r2, r25
     680:	31 08       	sbc	r3, r1
						followLineFlag = 0;
     682:	a4 96       	adiw	r28, 0x24	; 36
     684:	1f ae       	std	Y+63, r1	; 0x3f
     686:	1e ae       	std	Y+62, r1	; 0x3e
     688:	a4 97       	sbiw	r28, 0x24	; 36
					}
					clear();
     68a:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <clear>
					lcd_goto_xy(0,0);
     68e:	60 e0       	ldi	r22, 0x00	; 0
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <lcd_goto_xy>
					print_long(xCoordinate);
     696:	b5 01       	movw	r22, r10
     698:	0b 2c       	mov	r0, r11
     69a:	00 0c       	add	r0, r0
     69c:	88 0b       	sbc	r24, r24
     69e:	99 0b       	sbc	r25, r25
     6a0:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <print_long>
					lcd_goto_xy(0,1);
     6a4:	61 e0       	ldi	r22, 0x01	; 1
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <lcd_goto_xy>
					print_long(yCoordinate);
     6ac:	b1 01       	movw	r22, r2
     6ae:	03 2c       	mov	r0, r3
     6b0:	00 0c       	add	r0, r0
     6b2:	88 0b       	sbc	r24, r24
     6b4:	99 0b       	sbc	r25, r25
     6b6:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <print_long>


				}
				//followStraightLine(&yCoordinate, orderY[orderNum]);
			}
			if((orderX[orderNum] == xCoordinate) && (orderY[orderNum] == yCoordinate)){
     6ba:	8a 14       	cp	r8, r10
     6bc:	9b 04       	cpc	r9, r11
     6be:	31 f5       	brne	.+76     	; 0x70c <__LOCK_REGION_LENGTH__+0x30c>
     6c0:	26 14       	cp	r2, r6
     6c2:	37 04       	cpc	r3, r7
     6c4:	59 f5       	brne	.+86     	; 0x71c <__LOCK_REGION_LENGTH__+0x31c>
     6c6:	13 01       	movw	r2, r6
     6c8:	01 c0       	rjmp	.+2      	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
     6ca:	45 01       	movw	r8, r10
				set_motors(0,0);               //moeten we nog even naar kijken, hij moet gelijk stilstaan
     6cc:	60 e0       	ldi	r22, 0x00	; 0
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <set_motors>
				clear();
     6d8:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <clear>
				print("Product");
     6dc:	87 e5       	ldi	r24, 0x57	; 87
     6de:	91 e0       	ldi	r25, 0x01	; 1
     6e0:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <print>
				orderNum++;
     6e4:	8f ef       	ldi	r24, 0xFF	; 255
     6e6:	c8 1a       	sub	r12, r24
     6e8:	d8 0a       	sbc	r13, r24
				play_from_program_space(PSTR(">f32>>a32"));
     6ea:	86 e8       	ldi	r24, 0x86	; 134
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <play_from_program_space>
		    : "0" ( microseconds )
		    );  
}

// These are alternative aliases:
static inline void delay(unsigned int milliseconds) { delay_ms(milliseconds); }
     6f2:	88 eb       	ldi	r24, 0xB8	; 184
     6f4:	9b e0       	ldi	r25, 0x0B	; 11
     6f6:	0e 94 39 11 	call	0x2272	; 0x2272 <delay_ms>
     6fa:	54 01       	movw	r10, r8
				delay(3000);
				x = 0;
				productCollectedFlag = 1;
     6fc:	ee 24       	eor	r14, r14
     6fe:	e3 94       	inc	r14
     700:	f1 2c       	mov	r15, r1
				clear();
				print("Product");
				orderNum++;
				play_from_program_space(PSTR(">f32>>a32"));
				delay(3000);
				x = 0;
     702:	a6 96       	adiw	r28, 0x26	; 38
     704:	1f ae       	std	Y+63, r1	; 0x3f
     706:	1e ae       	std	Y+62, r1	; 0x3e
     708:	a6 97       	sbiw	r28, 0x26	; 38
     70a:	10 c0       	rjmp	.+32     	; 0x72c <__LOCK_REGION_LENGTH__+0x32c>
     70c:	91 e0       	ldi	r25, 0x01	; 1
     70e:	a5 96       	adiw	r28, 0x25	; 37
     710:	9f af       	std	Y+63, r25	; 0x3f
     712:	a5 97       	sbiw	r28, 0x25	; 37
     714:	a6 96       	adiw	r28, 0x26	; 38
     716:	1f ae       	std	Y+63, r1	; 0x3f
     718:	a6 97       	sbiw	r28, 0x26	; 38
     71a:	08 c0       	rjmp	.+16     	; 0x72c <__LOCK_REGION_LENGTH__+0x32c>
     71c:	54 01       	movw	r10, r8
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	a5 96       	adiw	r28, 0x25	; 37
     722:	8f af       	std	Y+63, r24	; 0x3f
     724:	a5 97       	sbiw	r28, 0x25	; 37
     726:	a6 96       	adiw	r28, 0x26	; 38
     728:	1f ae       	std	Y+63, r1	; 0x3f
     72a:	a6 97       	sbiw	r28, 0x26	; 38
	delay_ms(1000);
	clear();
	}*/
	
	
	while (orderNum != sizeOfOrder)
     72c:	94 e0       	ldi	r25, 0x04	; 4
     72e:	c9 16       	cp	r12, r25
     730:	d1 04       	cpc	r13, r1
     732:	09 f0       	breq	.+2      	; 0x736 <__LOCK_REGION_LENGTH__+0x336>
     734:	dd cd       	rjmp	.-1094   	; 0x2f0 <main+0x98>
     736:	6b c0       	rjmp	.+214    	; 0x80e <__LOCK_REGION_LENGTH__+0x40e>
			}
		}
		
		if ((endOfRoute == 1 && checkAfslag() == 1) || productCollectedFlag == 1){

			clear();
     738:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <clear>
			lcd_goto_xy(0,0);
     73c:	60 e0       	ldi	r22, 0x00	; 0
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <lcd_goto_xy>
			print_long(xCoordinate);
     744:	b5 01       	movw	r22, r10
     746:	0b 2c       	mov	r0, r11
     748:	00 0c       	add	r0, r0
     74a:	88 0b       	sbc	r24, r24
     74c:	99 0b       	sbc	r25, r25
     74e:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <print_long>
			lcd_goto_xy(0,1);
     752:	61 e0       	ldi	r22, 0x01	; 1
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <lcd_goto_xy>
			print_long(yCoordinate);
     75a:	21 01       	movw	r4, r2
     75c:	03 2c       	mov	r0, r3
     75e:	00 0c       	add	r0, r0
     760:	66 08       	sbc	r6, r6
     762:	77 08       	sbc	r7, r7
     764:	c3 01       	movw	r24, r6
     766:	b2 01       	movw	r22, r4
     768:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <print_long>
				set_motors(0,0);
			}

			
			if (productCollectedFlag == 1){
				productCollectedFlag = 0;
     76c:	e1 2c       	mov	r14, r1
     76e:	f1 2c       	mov	r15, r1
     770:	d0 ce       	rjmp	.-608    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
				//followStraightLine(&xCoordinate, orderX[orderNum]);
			}
			if(orderX[orderNum] == xCoordinate){
				x = 1;
			}
			if((orderY[orderNum] != yCoordinate) && (x == 1)){
     772:	f6 01       	movw	r30, r12
     774:	ee 0f       	add	r30, r30
     776:	ff 1f       	adc	r31, r31
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	8c 0f       	add	r24, r28
     77e:	9d 1f       	adc	r25, r29
     780:	e8 0f       	add	r30, r24
     782:	f9 1f       	adc	r31, r25
     784:	60 84       	ldd	r6, Z+8	; 0x08
     786:	71 84       	ldd	r7, Z+9	; 0x09
     788:	26 14       	cp	r2, r6
     78a:	37 04       	cpc	r3, r7
     78c:	09 f0       	breq	.+2      	; 0x790 <__LOCK_REGION_LENGTH__+0x390>
     78e:	39 cf       	rjmp	.-398    	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
     790:	13 01       	movw	r2, r6
     792:	9c cf       	rjmp	.-200    	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>


				}
				//followStraightLine(&yCoordinate, orderY[orderNum]);
			}
			if((orderX[orderNum] == xCoordinate) && (orderY[orderNum] == yCoordinate)){
     794:	8a 14       	cp	r8, r10
     796:	9b 04       	cpc	r9, r11
     798:	49 f6       	brne	.-110    	; 0x72c <__LOCK_REGION_LENGTH__+0x32c>
     79a:	97 cf       	rjmp	.-210    	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
				//followStraightLine(&xCoordinate, orderX[orderNum]);
			}
			if(orderX[orderNum] == xCoordinate){
				x = 1;
			}
			if((orderY[orderNum] != yCoordinate) && (x == 1)){
     79c:	f6 01       	movw	r30, r12
     79e:	ee 0f       	add	r30, r30
     7a0:	ff 1f       	adc	r31, r31
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	8c 0f       	add	r24, r28
     7a8:	9d 1f       	adc	r25, r29
     7aa:	e8 0f       	add	r30, r24
     7ac:	f9 1f       	adc	r31, r25
     7ae:	60 84       	ldd	r6, Z+8	; 0x08
     7b0:	71 84       	ldd	r7, Z+9	; 0x09
     7b2:	62 14       	cp	r6, r2
     7b4:	73 04       	cpc	r7, r3
     7b6:	09 f0       	breq	.+2      	; 0x7ba <__LOCK_REGION_LENGTH__+0x3ba>
     7b8:	1d cf       	rjmp	.-454    	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
     7ba:	13 01       	movw	r2, r6
     7bc:	b7 cf       	rjmp	.-146    	; 0x72c <__LOCK_REGION_LENGTH__+0x32c>
     7be:	f6 01       	movw	r30, r12
     7c0:	ee 0f       	add	r30, r30
     7c2:	ff 1f       	adc	r31, r31
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	8c 0f       	add	r24, r28
     7ca:	9d 1f       	adc	r25, r29
     7cc:	e8 0f       	add	r30, r24
     7ce:	f9 1f       	adc	r31, r25
     7d0:	80 85       	ldd	r24, Z+8	; 0x08
     7d2:	91 85       	ldd	r25, Z+9	; 0x09
     7d4:	82 15       	cp	r24, r2
     7d6:	93 05       	cpc	r25, r3
     7d8:	09 f0       	breq	.+2      	; 0x7dc <__LOCK_REGION_LENGTH__+0x3dc>
     7da:	a8 cf       	rjmp	.-176    	; 0x72c <__LOCK_REGION_LENGTH__+0x32c>
     7dc:	1c 01       	movw	r2, r24
     7de:	da cf       	rjmp	.-76     	; 0x794 <__LOCK_REGION_LENGTH__+0x394>
     7e0:	f6 01       	movw	r30, r12
     7e2:	ee 0f       	add	r30, r30
     7e4:	ff 1f       	adc	r31, r31
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	8c 0f       	add	r24, r28
     7ec:	9d 1f       	adc	r25, r29
     7ee:	e8 0f       	add	r30, r24
     7f0:	f9 1f       	adc	r31, r25
     7f2:	60 84       	ldd	r6, Z+8	; 0x08
     7f4:	71 84       	ldd	r7, Z+9	; 0x09
     7f6:	26 14       	cp	r2, r6
     7f8:	37 04       	cpc	r3, r7
     7fa:	09 f0       	breq	.+2      	; 0x7fe <__LOCK_REGION_LENGTH__+0x3fe>
     7fc:	02 cf       	rjmp	.-508    	; 0x602 <__LOCK_REGION_LENGTH__+0x202>

				}
				//followStraightLine(&xCoordinate, orderX[orderNum]);
			}
			if(orderX[orderNum] == xCoordinate){
				x = 1;
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	a5 96       	adiw	r28, 0x25	; 37
     802:	9f af       	std	Y+63, r25	; 0x3f
     804:	a5 97       	sbiw	r28, 0x25	; 37
     806:	a6 96       	adiw	r28, 0x26	; 38
     808:	1f ae       	std	Y+63, r1	; 0x3f
     80a:	a6 97       	sbiw	r28, 0x26	; 38
     80c:	c3 cf       	rjmp	.-122    	; 0x794 <__LOCK_REGION_LENGTH__+0x394>
				x = 0;
				productCollectedFlag = 1;
			}
		}
	}
}
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	c9 59       	subi	r28, 0x99	; 153
     814:	df 4f       	sbci	r29, 0xFF	; 255
     816:	0f b6       	in	r0, 0x3f	; 63
     818:	f8 94       	cli
     81a:	de bf       	out	0x3e, r29	; 62
     81c:	0f be       	out	0x3f, r0	; 63
     81e:	cd bf       	out	0x3d, r28	; 61
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	ff 90       	pop	r15
     82a:	ef 90       	pop	r14
     82c:	df 90       	pop	r13
     82e:	cf 90       	pop	r12
     830:	bf 90       	pop	r11
     832:	af 90       	pop	r10
     834:	9f 90       	pop	r9
     836:	8f 90       	pop	r8
     838:	7f 90       	pop	r7
     83a:	6f 90       	pop	r6
     83c:	5f 90       	pop	r5
     83e:	4f 90       	pop	r4
     840:	3f 90       	pop	r3
     842:	2f 90       	pop	r2
     844:	08 95       	ret

00000846 <motorControl>:

int speedCurrent = 0;			//Defining the current speeds.
int speedCurrentRight = 0;
int speedCurrentLeft = 0;

void motorControl(int speed, char direction, float aggressionFactor){		//This function is an upgrade over the existing motor control function written by Pololu. This function moves the robot with an entered speed and acceleration time in a desired direction.
     846:	2f 92       	push	r2
     848:	3f 92       	push	r3
     84a:	4f 92       	push	r4
     84c:	5f 92       	push	r5
     84e:	6f 92       	push	r6
     850:	7f 92       	push	r7
     852:	8f 92       	push	r8
     854:	9f 92       	push	r9
     856:	af 92       	push	r10
     858:	bf 92       	push	r11
     85a:	cf 92       	push	r12
     85c:	df 92       	push	r13
     85e:	ef 92       	push	r14
     860:	ff 92       	push	r15
     862:	0f 93       	push	r16
     864:	1f 93       	push	r17
     866:	cf 93       	push	r28
     868:	df 93       	push	r29
     86a:	cd b7       	in	r28, 0x3d	; 61
     86c:	de b7       	in	r29, 0x3e	; 62
     86e:	66 97       	sbiw	r28, 0x16	; 22
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	f8 94       	cli
     874:	de bf       	out	0x3e, r29	; 62
     876:	0f be       	out	0x3f, r0	; 63
     878:	cd bf       	out	0x3d, r28	; 61
     87a:	1c 01       	movw	r2, r24
     87c:	29 83       	std	Y+1, r18	; 0x01
     87e:	3a 83       	std	Y+2, r19	; 0x02
     880:	4b 83       	std	Y+3, r20	; 0x03
     882:	5c 83       	std	Y+4, r21	; 0x04
	int setSpeedRight = 0;
	int setSpeedLeft = 0;
	
	//directions direction;

	switch (direction){														//This switch case switches between the directions based on the user input.
     884:	66 34       	cpi	r22, 0x46	; 70
     886:	61 f0       	breq	.+24     	; 0x8a0 <motorControl+0x5a>
     888:	20 f4       	brcc	.+8      	; 0x892 <motorControl+0x4c>
     88a:	62 34       	cpi	r22, 0x42	; 66
     88c:	09 f4       	brne	.+2      	; 0x890 <motorControl+0x4a>
     88e:	95 c0       	rjmp	.+298    	; 0x9ba <__stack+0xbb>
     890:	08 c4       	rjmp	.+2064   	; 0x10a2 <__stack+0x7a3>
     892:	6c 34       	cpi	r22, 0x4C	; 76
     894:	09 f4       	brne	.+2      	; 0x898 <motorControl+0x52>
     896:	a9 c2       	rjmp	.+1362   	; 0xdea <__stack+0x4eb>
     898:	62 35       	cpi	r22, 0x52	; 82
     89a:	09 f4       	brne	.+2      	; 0x89e <motorControl+0x58>
     89c:	1b c1       	rjmp	.+566    	; 0xad4 <__stack+0x1d5>
     89e:	01 c4       	rjmp	.+2050   	; 0x10a2 <__stack+0x7a3>
		case 'F':															//This case handles the forward movement of the 3PI robot.
		
		setSpeed = speed - speedCurrent;
     8a0:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <speedCurrent>
     8a4:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <speedCurrent+0x1>
     8a8:	91 01       	movw	r18, r2
     8aa:	28 1b       	sub	r18, r24
     8ac:	39 0b       	sbc	r19, r25
     8ae:	45 e6       	ldi	r20, 0x65	; 101
     8b0:	50 e0       	ldi	r21, 0x00	; 0
     8b2:	5a 87       	std	Y+10, r21	; 0x0a
     8b4:	49 87       	std	Y+9, r20	; 0x09
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){	//This for loop increases the speed of the current speed to the desired speed with a total of a 100 increments.
     8b6:	41 2c       	mov	r4, r1
     8b8:	51 2c       	mov	r5, r1
     8ba:	32 01       	movw	r6, r4
			timerStart = get_ms();
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2*M_PI ) ) * sin ( 2* M_PI * accelerationCounter ) ) );		//This function transfers the input speed to a segmented speed increase based on the swept sinusoidal curve.
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     8bc:	03 2e       	mov	r0, r19
     8be:	00 0c       	add	r0, r0
     8c0:	44 0b       	sbc	r20, r20
     8c2:	55 0b       	sbc	r21, r21
     8c4:	2d 83       	std	Y+5, r18	; 0x05
     8c6:	3e 83       	std	Y+6, r19	; 0x06
     8c8:	4f 83       	std	Y+7, r20	; 0x07
     8ca:	58 87       	std	Y+8, r21	; 0x08
		case 'F':															//This case handles the forward movement of the 3PI robot.
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){	//This for loop increases the speed of the current speed to the desired speed with a total of a 100 increments.
			timerStart = get_ms();
     8cc:	0e 94 71 11 	call	0x22e2	; 0x22e2 <get_ms>
     8d0:	8b 01       	movw	r16, r22
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2*M_PI ) ) * sin ( 2* M_PI * accelerationCounter ) ) );		//This function transfers the input speed to a segmented speed increase based on the swept sinusoidal curve.
     8d2:	2b ed       	ldi	r18, 0xDB	; 219
     8d4:	3f e0       	ldi	r19, 0x0F	; 15
     8d6:	49 ec       	ldi	r20, 0xC9	; 201
     8d8:	50 e4       	ldi	r21, 0x40	; 64
     8da:	c3 01       	movw	r24, r6
     8dc:	b2 01       	movw	r22, r4
     8de:	0e 94 11 19 	call	0x3222	; 0x3222 <__mulsf3>
     8e2:	0e 94 7e 19 	call	0x32fc	; 0x32fc <sin>
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     8e6:	23 e8       	ldi	r18, 0x83	; 131
     8e8:	39 ef       	ldi	r19, 0xF9	; 249
     8ea:	42 e2       	ldi	r20, 0x22	; 34
     8ec:	5e e3       	ldi	r21, 0x3E	; 62
     8ee:	0e 94 11 19 	call	0x3222	; 0x3222 <__mulsf3>
     8f2:	9b 01       	movw	r18, r22
     8f4:	ac 01       	movw	r20, r24
     8f6:	c3 01       	movw	r24, r6
     8f8:	b2 01       	movw	r22, r4
     8fa:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <__subsf3>
     8fe:	4b 01       	movw	r8, r22
     900:	5c 01       	movw	r10, r24
     902:	6d 81       	ldd	r22, Y+5	; 0x05
     904:	7e 81       	ldd	r23, Y+6	; 0x06
     906:	8f 81       	ldd	r24, Y+7	; 0x07
     908:	98 85       	ldd	r25, Y+8	; 0x08
     90a:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <__floatsisf>
     90e:	9b 01       	movw	r18, r22
     910:	ac 01       	movw	r20, r24
     912:	c5 01       	movw	r24, r10
     914:	b4 01       	movw	r22, r8
     916:	0e 94 11 19 	call	0x3222	; 0x3222 <__mulsf3>
     91a:	4b 01       	movw	r8, r22
     91c:	5c 01       	movw	r10, r24
     91e:	60 91 ed 01 	lds	r22, 0x01ED	; 0x8001ed <speedCurrent>
     922:	70 91 ee 01 	lds	r23, 0x01EE	; 0x8001ee <speedCurrent+0x1>
     926:	07 2e       	mov	r0, r23
     928:	00 0c       	add	r0, r0
     92a:	88 0b       	sbc	r24, r24
     92c:	99 0b       	sbc	r25, r25
     92e:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <__floatsisf>
     932:	9b 01       	movw	r18, r22
     934:	ac 01       	movw	r20, r24
     936:	c5 01       	movw	r24, r10
     938:	b4 01       	movw	r22, r8
     93a:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__addsf3>
     93e:	0e 94 24 18 	call	0x3048	; 0x3048 <__fixsfsi>
     942:	dc 01       	movw	r26, r24
     944:	cb 01       	movw	r24, r22
     946:	bc 01       	movw	r22, r24
     948:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {											//This while loop temporarily freezes the system to make sure that the increments are spaced properly to facilitate a fluent and consequent increase in speed.
     94c:	48 01       	movw	r8, r16
     94e:	11 0f       	add	r17, r17
     950:	aa 08       	sbc	r10, r10
     952:	bb 08       	sbc	r11, r11
     954:	0e 94 71 11 	call	0x22e2	; 0x22e2 <get_ms>
     958:	68 19       	sub	r22, r8
     95a:	79 09       	sbc	r23, r9
     95c:	8a 09       	sbc	r24, r10
     95e:	9b 09       	sbc	r25, r11
     960:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <__floatunsisf>
     964:	6b 01       	movw	r12, r22
     966:	7c 01       	movw	r14, r24
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	40 e2       	ldi	r20, 0x20	; 32
     96e:	51 e4       	ldi	r21, 0x41	; 65
     970:	69 81       	ldd	r22, Y+1	; 0x01
     972:	7a 81       	ldd	r23, Y+2	; 0x02
     974:	8b 81       	ldd	r24, Y+3	; 0x03
     976:	9c 81       	ldd	r25, Y+4	; 0x04
     978:	0e 94 11 19 	call	0x3222	; 0x3222 <__mulsf3>
     97c:	9b 01       	movw	r18, r22
     97e:	ac 01       	movw	r20, r24
     980:	c7 01       	movw	r24, r14
     982:	b6 01       	movw	r22, r12
     984:	0e 94 1f 18 	call	0x303e	; 0x303e <__cmpsf2>
     988:	88 23       	and	r24, r24
     98a:	24 f3       	brlt	.-56     	; 0x954 <__stack+0x55>
	switch (direction){														//This switch case switches between the directions based on the user input.
		case 'F':															//This case handles the forward movement of the 3PI robot.
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){	//This for loop increases the speed of the current speed to the desired speed with a total of a 100 increments.
     98c:	2a e0       	ldi	r18, 0x0A	; 10
     98e:	37 ed       	ldi	r19, 0xD7	; 215
     990:	43 e2       	ldi	r20, 0x23	; 35
     992:	5c e3       	ldi	r21, 0x3C	; 60
     994:	c3 01       	movw	r24, r6
     996:	b2 01       	movw	r22, r4
     998:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__addsf3>
     99c:	2b 01       	movw	r4, r22
     99e:	3c 01       	movw	r6, r24
     9a0:	a9 85       	ldd	r26, Y+9	; 0x09
     9a2:	ba 85       	ldd	r27, Y+10	; 0x0a
     9a4:	11 97       	sbiw	r26, 0x01	; 1
     9a6:	ba 87       	std	Y+10, r27	; 0x0a
     9a8:	a9 87       	std	Y+9, r26	; 0x09
     9aa:	ab 2b       	or	r26, r27
     9ac:	09 f0       	breq	.+2      	; 0x9b0 <__stack+0xb1>
     9ae:	8e cf       	rjmp	.-228    	; 0x8cc <motorControl+0x86>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {											//This while loop temporarily freezes the system to make sure that the increments are spaced properly to facilitate a fluent and consequent increase in speed.
				//Change the aggression factor to manipulate the acceleration time. A shorter time increases the overall jerk of the acceleration.
			}
		}
		speedCurrent = speed;
     9b0:	30 92 ee 01 	sts	0x01EE, r3	; 0x8001ee <speedCurrent+0x1>
     9b4:	20 92 ed 01 	sts	0x01ED, r2	; 0x8001ed <speedCurrent>
		break;
     9b8:	7a c3       	rjmp	.+1780   	; 0x10ae <__stack+0x7af>
		
		case 'B':		//This case handles the backward movement of the robot. While the robot does not require this function in the standard routine, it is desired when operating the robot in manual mode.
		
		setSpeed = speed - speedCurrent;
     9ba:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <speedCurrent>
     9be:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <speedCurrent+0x1>
     9c2:	91 01       	movw	r18, r2
     9c4:	28 1b       	sub	r18, r24
     9c6:	39 0b       	sbc	r19, r25
     9c8:	45 e6       	ldi	r20, 0x65	; 101
     9ca:	50 e0       	ldi	r21, 0x00	; 0
     9cc:	5a 87       	std	Y+10, r21	; 0x0a
     9ce:	49 87       	std	Y+9, r20	; 0x09
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     9d0:	41 2c       	mov	r4, r1
     9d2:	51 2c       	mov	r5, r1
     9d4:	32 01       	movw	r6, r4
			timerStart = get_ms();
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     9d6:	03 2e       	mov	r0, r19
     9d8:	00 0c       	add	r0, r0
     9da:	44 0b       	sbc	r20, r20
     9dc:	55 0b       	sbc	r21, r21
     9de:	2d 83       	std	Y+5, r18	; 0x05
     9e0:	3e 83       	std	Y+6, r19	; 0x06
     9e2:	4f 83       	std	Y+7, r20	; 0x07
     9e4:	58 87       	std	Y+8, r21	; 0x08
		case 'B':		//This case handles the backward movement of the robot. While the robot does not require this function in the standard routine, it is desired when operating the robot in manual mode.
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     9e6:	0e 94 71 11 	call	0x22e2	; 0x22e2 <get_ms>
     9ea:	8b 01       	movw	r16, r22
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) );
     9ec:	2b ed       	ldi	r18, 0xDB	; 219
     9ee:	3f e0       	ldi	r19, 0x0F	; 15
     9f0:	49 ec       	ldi	r20, 0xC9	; 201
     9f2:	50 e4       	ldi	r21, 0x40	; 64
     9f4:	c3 01       	movw	r24, r6
     9f6:	b2 01       	movw	r22, r4
     9f8:	0e 94 11 19 	call	0x3222	; 0x3222 <__mulsf3>
     9fc:	0e 94 7e 19 	call	0x32fc	; 0x32fc <sin>
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     a00:	23 e8       	ldi	r18, 0x83	; 131
     a02:	39 ef       	ldi	r19, 0xF9	; 249
     a04:	42 e2       	ldi	r20, 0x22	; 34
     a06:	5e e3       	ldi	r21, 0x3E	; 62
     a08:	0e 94 11 19 	call	0x3222	; 0x3222 <__mulsf3>
     a0c:	9b 01       	movw	r18, r22
     a0e:	ac 01       	movw	r20, r24
     a10:	c3 01       	movw	r24, r6
     a12:	b2 01       	movw	r22, r4
     a14:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <__subsf3>
     a18:	4b 01       	movw	r8, r22
     a1a:	5c 01       	movw	r10, r24
     a1c:	6d 81       	ldd	r22, Y+5	; 0x05
     a1e:	7e 81       	ldd	r23, Y+6	; 0x06
     a20:	8f 81       	ldd	r24, Y+7	; 0x07
     a22:	98 85       	ldd	r25, Y+8	; 0x08
     a24:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <__floatsisf>
     a28:	9b 01       	movw	r18, r22
     a2a:	ac 01       	movw	r20, r24
     a2c:	c5 01       	movw	r24, r10
     a2e:	b4 01       	movw	r22, r8
     a30:	0e 94 11 19 	call	0x3222	; 0x3222 <__mulsf3>
     a34:	4b 01       	movw	r8, r22
     a36:	5c 01       	movw	r10, r24
     a38:	60 91 ed 01 	lds	r22, 0x01ED	; 0x8001ed <speedCurrent>
     a3c:	70 91 ee 01 	lds	r23, 0x01EE	; 0x8001ee <speedCurrent+0x1>
     a40:	07 2e       	mov	r0, r23
     a42:	00 0c       	add	r0, r0
     a44:	88 0b       	sbc	r24, r24
     a46:	99 0b       	sbc	r25, r25
     a48:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <__floatsisf>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	c5 01       	movw	r24, r10
     a52:	b4 01       	movw	r22, r8
     a54:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__addsf3>
     a58:	0e 94 24 18 	call	0x3048	; 0x3048 <__fixsfsi>
     a5c:	dc 01       	movw	r26, r24
     a5e:	cb 01       	movw	r24, r22
     a60:	bc 01       	movw	r22, r24
     a62:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     a66:	48 01       	movw	r8, r16
     a68:	11 0f       	add	r17, r17
     a6a:	aa 08       	sbc	r10, r10
     a6c:	bb 08       	sbc	r11, r11
     a6e:	0e 94 71 11 	call	0x22e2	; 0x22e2 <get_ms>
     a72:	68 19       	sub	r22, r8
     a74:	79 09       	sbc	r23, r9
     a76:	8a 09       	sbc	r24, r10
     a78:	9b 09       	sbc	r25, r11
     a7a:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <__floatunsisf>
     a7e:	6b 01       	movw	r12, r22
     a80:	7c 01       	movw	r14, r24
     a82:	20 e0       	ldi	r18, 0x00	; 0
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	40 e2       	ldi	r20, 0x20	; 32
     a88:	51 e4       	ldi	r21, 0x41	; 65
     a8a:	69 81       	ldd	r22, Y+1	; 0x01
     a8c:	7a 81       	ldd	r23, Y+2	; 0x02
     a8e:	8b 81       	ldd	r24, Y+3	; 0x03
     a90:	9c 81       	ldd	r25, Y+4	; 0x04
     a92:	0e 94 11 19 	call	0x3222	; 0x3222 <__mulsf3>
     a96:	9b 01       	movw	r18, r22
     a98:	ac 01       	movw	r20, r24
     a9a:	c7 01       	movw	r24, r14
     a9c:	b6 01       	movw	r22, r12
     a9e:	0e 94 1f 18 	call	0x303e	; 0x303e <__cmpsf2>
     aa2:	88 23       	and	r24, r24
     aa4:	24 f3       	brlt	.-56     	; 0xa6e <__stack+0x16f>
		
		case 'B':		//This case handles the backward movement of the robot. While the robot does not require this function in the standard routine, it is desired when operating the robot in manual mode.
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     aa6:	2a e0       	ldi	r18, 0x0A	; 10
     aa8:	37 ed       	ldi	r19, 0xD7	; 215
     aaa:	43 e2       	ldi	r20, 0x23	; 35
     aac:	5c e3       	ldi	r21, 0x3C	; 60
     aae:	c3 01       	movw	r24, r6
     ab0:	b2 01       	movw	r22, r4
     ab2:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__addsf3>
     ab6:	2b 01       	movw	r4, r22
     ab8:	3c 01       	movw	r6, r24
     aba:	a9 85       	ldd	r26, Y+9	; 0x09
     abc:	ba 85       	ldd	r27, Y+10	; 0x0a
     abe:	11 97       	sbiw	r26, 0x01	; 1
     ac0:	ba 87       	std	Y+10, r27	; 0x0a
     ac2:	a9 87       	std	Y+9, r26	; 0x09
     ac4:	ab 2b       	or	r26, r27
     ac6:	09 f0       	breq	.+2      	; 0xaca <__stack+0x1cb>
     ac8:	8e cf       	rjmp	.-228    	; 0x9e6 <__stack+0xe7>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrent = speed;
     aca:	30 92 ee 01 	sts	0x01EE, r3	; 0x8001ee <speedCurrent+0x1>
     ace:	20 92 ed 01 	sts	0x01ED, r2	; 0x8001ed <speedCurrent>
		break;
     ad2:	ed c2       	rjmp	.+1498   	; 0x10ae <__stack+0x7af>

		case 'R':		//This case handles the rotation of the robot 90 degrees to the right. The robot accelerates and decelerates with the same method used with forward and backward movement.
		
		setSpeedRight = speed + speedCurrentRight;
     ad4:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <speedCurrentRight>
     ad8:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <speedCurrentRight+0x1>
     adc:	82 0d       	add	r24, r2
     ade:	93 1d       	adc	r25, r3
		setSpeedLeft = speed - speedCurrentLeft;
     ae0:	20 91 e9 01 	lds	r18, 0x01E9	; 0x8001e9 <speedCurrentLeft>
     ae4:	30 91 ea 01 	lds	r19, 0x01EA	; 0x8001ea <speedCurrentLeft+0x1>
     ae8:	a1 01       	movw	r20, r2
     aea:	42 1b       	sub	r20, r18
     aec:	53 0b       	sbc	r21, r19
     aee:	9a 01       	movw	r18, r20
     af0:	05 e6       	ldi	r16, 0x65	; 101
     af2:	10 e0       	ldi	r17, 0x00	; 0
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     af4:	1d 82       	std	Y+5, r1	; 0x05
     af6:	1e 82       	std	Y+6, r1	; 0x06
     af8:	1f 82       	std	Y+7, r1	; 0x07
     afa:	18 86       	std	Y+8, r1	; 0x08
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			motorLeftSpeed = speedCurrent + (speedCurrentLeft + (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     afc:	ac 01       	movw	r20, r24
     afe:	99 0f       	add	r25, r25
     b00:	66 0b       	sbc	r22, r22
     b02:	77 0b       	sbc	r23, r23
     b04:	4d 87       	std	Y+13, r20	; 0x0d
     b06:	5e 87       	std	Y+14, r21	; 0x0e
     b08:	6f 87       	std	Y+15, r22	; 0x0f
     b0a:	78 8b       	std	Y+16, r23	; 0x10
     b0c:	b9 01       	movw	r22, r18
     b0e:	33 0f       	add	r19, r19
     b10:	88 0b       	sbc	r24, r24
     b12:	99 0b       	sbc	r25, r25
     b14:	69 8b       	std	Y+17, r22	; 0x11
     b16:	7a 8b       	std	Y+18, r23	; 0x12
     b18:	8b 8b       	std	Y+19, r24	; 0x13
     b1a:	9c 8b       	std	Y+20, r25	; 0x14
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     b1c:	0e 94 71 11 	call	0x22e2	; 0x22e2 <get_ms>
     b20:	7e 8b       	std	Y+22, r23	; 0x16
     b22:	6d 8b       	std	Y+21, r22	; 0x15
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
     b24:	60 91 ed 01 	lds	r22, 0x01ED	; 0x8001ed <speedCurrent>
     b28:	70 91 ee 01 	lds	r23, 0x01EE	; 0x8001ee <speedCurrent+0x1>
     b2c:	07 2e       	mov	r0, r23
     b2e:	00 0c       	add	r0, r0
     b30:	88 0b       	sbc	r24, r24
     b32:	99 0b       	sbc	r25, r25
     b34:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <__floatsisf>
     b38:	69 87       	std	Y+9, r22	; 0x09
     b3a:	7a 87       	std	Y+10, r23	; 0x0a
     b3c:	8b 87       	std	Y+11, r24	; 0x0b
     b3e:	9c 87       	std	Y+12, r25	; 0x0c
     b40:	2b ed       	ldi	r18, 0xDB	; 219
     b42:	3f e0       	ldi	r19, 0x0F	; 15
     b44:	49 ec       	ldi	r20, 0xC9	; 201
     b46:	50 e4       	ldi	r21, 0x40	; 64
     b48:	6d 81       	ldd	r22, Y+5	; 0x05
     b4a:	7e 81       	ldd	r23, Y+6	; 0x06
     b4c:	8f 81       	ldd	r24, Y+7	; 0x07
     b4e:	98 85       	ldd	r25, Y+8	; 0x08
     b50:	0e 94 11 19 	call	0x3222	; 0x3222 <__mulsf3>
     b54:	0e 94 7e 19 	call	0x32fc	; 0x32fc <sin>
     b58:	23 e8       	ldi	r18, 0x83	; 131
     b5a:	39 ef       	ldi	r19, 0xF9	; 249
     b5c:	42 e2       	ldi	r20, 0x22	; 34
     b5e:	5e e3       	ldi	r21, 0x3E	; 62
     b60:	0e 94 11 19 	call	0x3222	; 0x3222 <__mulsf3>
     b64:	2d 81       	ldd	r18, Y+5	; 0x05
     b66:	3e 81       	ldd	r19, Y+6	; 0x06
     b68:	4f 81       	ldd	r20, Y+7	; 0x07
     b6a:	58 85       	ldd	r21, Y+8	; 0x08
     b6c:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__addsf3>
     b70:	4b 01       	movw	r8, r22
     b72:	5c 01       	movw	r10, r24
			
			motorLeftSpeed = speedCurrent + (speedCurrentLeft + (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     b74:	60 91 eb 01 	lds	r22, 0x01EB	; 0x8001eb <speedCurrentRight>
     b78:	70 91 ec 01 	lds	r23, 0x01EC	; 0x8001ec <speedCurrentRight+0x1>
     b7c:	07 2e       	mov	r0, r23
     b7e:	00 0c       	add	r0, r0
     b80:	88 0b       	sbc	r24, r24
     b82:	99 0b       	sbc	r25, r25
     b84:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <__floatsisf>
     b88:	2b 01       	movw	r4, r22
     b8a:	3c 01       	movw	r6, r24
     b8c:	6d 85       	ldd	r22, Y+13	; 0x0d
     b8e:	7e 85       	ldd	r23, Y+14	; 0x0e
     b90:	8f 85       	ldd	r24, Y+15	; 0x0f
     b92:	98 89       	ldd	r25, Y+16	; 0x10
     b94:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <__floatsisf>
     b98:	a5 01       	movw	r20, r10
     b9a:	94 01       	movw	r18, r8
     b9c:	0e 94 11 19 	call	0x3222	; 0x3222 <__mulsf3>
     ba0:	9b 01       	movw	r18, r22
     ba2:	ac 01       	movw	r20, r24
     ba4:	c3 01       	movw	r24, r6
     ba6:	b2 01       	movw	r22, r4
     ba8:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <__subsf3>
     bac:	29 85       	ldd	r18, Y+9	; 0x09
     bae:	3a 85       	ldd	r19, Y+10	; 0x0a
     bb0:	4b 85       	ldd	r20, Y+11	; 0x0b
     bb2:	5c 85       	ldd	r21, Y+12	; 0x0c
     bb4:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__addsf3>
     bb8:	0e 94 24 18 	call	0x3048	; 0x3048 <__fixsfsi>
     bbc:	2b 01       	movw	r4, r22
     bbe:	3c 01       	movw	r6, r24
     bc0:	60 91 e9 01 	lds	r22, 0x01E9	; 0x8001e9 <speedCurrentLeft>
     bc4:	70 91 ea 01 	lds	r23, 0x01EA	; 0x8001ea <speedCurrentLeft+0x1>
     bc8:	07 2e       	mov	r0, r23
     bca:	00 0c       	add	r0, r0
     bcc:	88 0b       	sbc	r24, r24
     bce:	99 0b       	sbc	r25, r25
     bd0:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <__floatsisf>
     bd4:	6b 01       	movw	r12, r22
     bd6:	7c 01       	movw	r14, r24
     bd8:	69 89       	ldd	r22, Y+17	; 0x11
     bda:	7a 89       	ldd	r23, Y+18	; 0x12
     bdc:	8b 89       	ldd	r24, Y+19	; 0x13
     bde:	9c 89       	ldd	r25, Y+20	; 0x14
     be0:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <__floatsisf>
     be4:	a5 01       	movw	r20, r10
     be6:	94 01       	movw	r18, r8
     be8:	0e 94 11 19 	call	0x3222	; 0x3222 <__mulsf3>
     bec:	9b 01       	movw	r18, r22
     bee:	ac 01       	movw	r20, r24
     bf0:	c7 01       	movw	r24, r14
     bf2:	b6 01       	movw	r22, r12
     bf4:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__addsf3>
     bf8:	29 85       	ldd	r18, Y+9	; 0x09
     bfa:	3a 85       	ldd	r19, Y+10	; 0x0a
     bfc:	4b 85       	ldd	r20, Y+11	; 0x0b
     bfe:	5c 85       	ldd	r21, Y+12	; 0x0c
     c00:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__addsf3>
     c04:	0e 94 24 18 	call	0x3048	; 0x3048 <__fixsfsi>
     c08:	dc 01       	movw	r26, r24
     c0a:	cb 01       	movw	r24, r22
     c0c:	b2 01       	movw	r22, r4
     c0e:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     c12:	8d 89       	ldd	r24, Y+21	; 0x15
     c14:	9e 89       	ldd	r25, Y+22	; 0x16
     c16:	4c 01       	movw	r8, r24
     c18:	99 0f       	add	r25, r25
     c1a:	aa 08       	sbc	r10, r10
     c1c:	bb 08       	sbc	r11, r11
     c1e:	0e 94 71 11 	call	0x22e2	; 0x22e2 <get_ms>
     c22:	6b 01       	movw	r12, r22
     c24:	7c 01       	movw	r14, r24
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	40 e2       	ldi	r20, 0x20	; 32
     c2c:	51 e4       	ldi	r21, 0x41	; 65
     c2e:	69 81       	ldd	r22, Y+1	; 0x01
     c30:	7a 81       	ldd	r23, Y+2	; 0x02
     c32:	8b 81       	ldd	r24, Y+3	; 0x03
     c34:	9c 81       	ldd	r25, Y+4	; 0x04
     c36:	0e 94 11 19 	call	0x3222	; 0x3222 <__mulsf3>
     c3a:	2b 01       	movw	r4, r22
     c3c:	3c 01       	movw	r6, r24
     c3e:	c7 01       	movw	r24, r14
     c40:	b6 01       	movw	r22, r12
     c42:	68 19       	sub	r22, r8
     c44:	79 09       	sbc	r23, r9
     c46:	8a 09       	sbc	r24, r10
     c48:	9b 09       	sbc	r25, r11
     c4a:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <__floatunsisf>
     c4e:	a3 01       	movw	r20, r6
     c50:	92 01       	movw	r18, r4
     c52:	0e 94 1f 18 	call	0x303e	; 0x303e <__cmpsf2>
     c56:	88 23       	and	r24, r24
     c58:	14 f3       	brlt	.-60     	; 0xc1e <__stack+0x31f>
		case 'R':		//This case handles the rotation of the robot 90 degrees to the right. The robot accelerates and decelerates with the same method used with forward and backward movement.
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     c5a:	2a e0       	ldi	r18, 0x0A	; 10
     c5c:	37 ed       	ldi	r19, 0xD7	; 215
     c5e:	43 e2       	ldi	r20, 0x23	; 35
     c60:	5c e3       	ldi	r21, 0x3C	; 60
     c62:	6d 81       	ldd	r22, Y+5	; 0x05
     c64:	7e 81       	ldd	r23, Y+6	; 0x06
     c66:	8f 81       	ldd	r24, Y+7	; 0x07
     c68:	98 85       	ldd	r25, Y+8	; 0x08
     c6a:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__addsf3>
     c6e:	6d 83       	std	Y+5, r22	; 0x05
     c70:	7e 83       	std	Y+6, r23	; 0x06
     c72:	8f 83       	std	Y+7, r24	; 0x07
     c74:	98 87       	std	Y+8, r25	; 0x08
     c76:	01 50       	subi	r16, 0x01	; 1
     c78:	11 09       	sbc	r17, r1
     c7a:	09 f0       	breq	.+2      	; 0xc7e <__stack+0x37f>
     c7c:	4f cf       	rjmp	.-354    	; 0xb1c <__stack+0x21d>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = -speed;
     c7e:	88 27       	eor	r24, r24
     c80:	99 27       	eor	r25, r25
     c82:	82 19       	sub	r24, r2
     c84:	93 09       	sbc	r25, r3
     c86:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <speedCurrentRight+0x1>
     c8a:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <speedCurrentRight>
		speedCurrentLeft = speed;
     c8e:	30 92 ea 01 	sts	0x01EA, r3	; 0x8001ea <speedCurrentLeft+0x1>
     c92:	20 92 e9 01 	sts	0x01E9, r2	; 0x8001e9 <speedCurrentLeft>
     c96:	05 e6       	ldi	r16, 0x65	; 101
     c98:	10 e0       	ldi	r17, 0x00	; 0
		speed = 0;
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     c9a:	19 82       	std	Y+1, r1	; 0x01
     c9c:	1a 82       	std	Y+2, r1	; 0x02
     c9e:	1b 82       	std	Y+3, r1	; 0x03
     ca0:	1c 82       	std	Y+4, r1	; 0x04
			timerStart = get_ms();
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
     ca2:	9c 01       	movw	r18, r24
     ca4:	99 0f       	add	r25, r25
     ca6:	44 0b       	sbc	r20, r20
     ca8:	55 0b       	sbc	r21, r21
     caa:	29 87       	std	Y+9, r18	; 0x09
     cac:	3a 87       	std	Y+10, r19	; 0x0a
     cae:	4b 87       	std	Y+11, r20	; 0x0b
     cb0:	5c 87       	std	Y+12, r21	; 0x0c
     cb2:	c1 2c       	mov	r12, r1
     cb4:	d1 2c       	mov	r13, r1
     cb6:	76 01       	movw	r14, r12
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     cb8:	0e 94 71 11 	call	0x22e2	; 0x22e2 <get_ms>
     cbc:	7e 87       	std	Y+14, r23	; 0x0e
     cbe:	6d 87       	std	Y+13, r22	; 0x0d
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
     cc0:	60 91 ed 01 	lds	r22, 0x01ED	; 0x8001ed <speedCurrent>
     cc4:	70 91 ee 01 	lds	r23, 0x01EE	; 0x8001ee <speedCurrent+0x1>
     cc8:	07 2e       	mov	r0, r23
     cca:	00 0c       	add	r0, r0
     ccc:	88 0b       	sbc	r24, r24
     cce:	99 0b       	sbc	r25, r25
     cd0:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <__floatsisf>
     cd4:	69 83       	std	Y+1, r22	; 0x01
     cd6:	7a 83       	std	Y+2, r23	; 0x02
     cd8:	8b 83       	std	Y+3, r24	; 0x03
     cda:	9c 83       	std	Y+4, r25	; 0x04
     cdc:	2b ed       	ldi	r18, 0xDB	; 219
     cde:	3f e0       	ldi	r19, 0x0F	; 15
     ce0:	49 ec       	ldi	r20, 0xC9	; 201
     ce2:	50 e4       	ldi	r21, 0x40	; 64
     ce4:	c7 01       	movw	r24, r14
     ce6:	b6 01       	movw	r22, r12
     ce8:	0e 94 11 19 	call	0x3222	; 0x3222 <__mulsf3>
     cec:	0e 94 7e 19 	call	0x32fc	; 0x32fc <sin>
     cf0:	23 e8       	ldi	r18, 0x83	; 131
     cf2:	39 ef       	ldi	r19, 0xF9	; 249
     cf4:	42 e2       	ldi	r20, 0x22	; 34
     cf6:	5e e3       	ldi	r21, 0x3E	; 62
     cf8:	0e 94 11 19 	call	0x3222	; 0x3222 <__mulsf3>
     cfc:	a7 01       	movw	r20, r14
     cfe:	96 01       	movw	r18, r12
     d00:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__addsf3>
     d04:	4b 01       	movw	r8, r22
     d06:	5c 01       	movw	r10, r24
     d08:	69 85       	ldd	r22, Y+9	; 0x09
     d0a:	7a 85       	ldd	r23, Y+10	; 0x0a
     d0c:	8b 85       	ldd	r24, Y+11	; 0x0b
     d0e:	9c 85       	ldd	r25, Y+12	; 0x0c
     d10:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <__floatsisf>
     d14:	9b 01       	movw	r18, r22
     d16:	ac 01       	movw	r20, r24
     d18:	c5 01       	movw	r24, r10
     d1a:	b4 01       	movw	r22, r8
     d1c:	0e 94 11 19 	call	0x3222	; 0x3222 <__mulsf3>
     d20:	4b 01       	movw	r8, r22
     d22:	5c 01       	movw	r10, r24
			
			motorLeftSpeed = speedCurrent + (speedCurrentLeft + (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     d24:	60 91 eb 01 	lds	r22, 0x01EB	; 0x8001eb <speedCurrentRight>
     d28:	70 91 ec 01 	lds	r23, 0x01EC	; 0x8001ec <speedCurrentRight+0x1>
     d2c:	07 2e       	mov	r0, r23
     d2e:	00 0c       	add	r0, r0
     d30:	88 0b       	sbc	r24, r24
     d32:	99 0b       	sbc	r25, r25
     d34:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <__floatsisf>
     d38:	a5 01       	movw	r20, r10
     d3a:	94 01       	movw	r18, r8
     d3c:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <__subsf3>
     d40:	29 81       	ldd	r18, Y+1	; 0x01
     d42:	3a 81       	ldd	r19, Y+2	; 0x02
     d44:	4b 81       	ldd	r20, Y+3	; 0x03
     d46:	5c 81       	ldd	r21, Y+4	; 0x04
     d48:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__addsf3>
     d4c:	0e 94 24 18 	call	0x3048	; 0x3048 <__fixsfsi>
     d50:	6d 83       	std	Y+5, r22	; 0x05
     d52:	7e 83       	std	Y+6, r23	; 0x06
     d54:	8f 83       	std	Y+7, r24	; 0x07
     d56:	98 87       	std	Y+8, r25	; 0x08
     d58:	60 91 e9 01 	lds	r22, 0x01E9	; 0x8001e9 <speedCurrentLeft>
     d5c:	70 91 ea 01 	lds	r23, 0x01EA	; 0x8001ea <speedCurrentLeft+0x1>
     d60:	07 2e       	mov	r0, r23
     d62:	00 0c       	add	r0, r0
     d64:	88 0b       	sbc	r24, r24
     d66:	99 0b       	sbc	r25, r25
     d68:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <__floatsisf>
     d6c:	a5 01       	movw	r20, r10
     d6e:	94 01       	movw	r18, r8
     d70:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__addsf3>
     d74:	29 81       	ldd	r18, Y+1	; 0x01
     d76:	3a 81       	ldd	r19, Y+2	; 0x02
     d78:	4b 81       	ldd	r20, Y+3	; 0x03
     d7a:	5c 81       	ldd	r21, Y+4	; 0x04
     d7c:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__addsf3>
     d80:	0e 94 24 18 	call	0x3048	; 0x3048 <__fixsfsi>
     d84:	dc 01       	movw	r26, r24
     d86:	cb 01       	movw	r24, r22
     d88:	6d 81       	ldd	r22, Y+5	; 0x05
     d8a:	7e 81       	ldd	r23, Y+6	; 0x06
     d8c:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     d90:	4d 85       	ldd	r20, Y+13	; 0x0d
     d92:	5e 85       	ldd	r21, Y+14	; 0x0e
     d94:	4a 01       	movw	r8, r20
     d96:	55 0f       	add	r21, r21
     d98:	aa 08       	sbc	r10, r10
     d9a:	bb 08       	sbc	r11, r11
     d9c:	0e 94 71 11 	call	0x22e2	; 0x22e2 <get_ms>
     da0:	68 19       	sub	r22, r8
     da2:	79 09       	sbc	r23, r9
     da4:	8a 09       	sbc	r24, r10
     da6:	9b 09       	sbc	r25, r11
     da8:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <__floatunsisf>
     dac:	9b 01       	movw	r18, r22
     dae:	ac 01       	movw	r20, r24
     db0:	c3 01       	movw	r24, r6
     db2:	b2 01       	movw	r22, r4
     db4:	0e 94 0c 19 	call	0x3218	; 0x3218 <__gesf2>
     db8:	18 16       	cp	r1, r24
     dba:	84 f3       	brlt	.-32     	; 0xd9c <__stack+0x49d>
		speed = 0;
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     dbc:	2a e0       	ldi	r18, 0x0A	; 10
     dbe:	37 ed       	ldi	r19, 0xD7	; 215
     dc0:	43 e2       	ldi	r20, 0x23	; 35
     dc2:	5c e3       	ldi	r21, 0x3C	; 60
     dc4:	c7 01       	movw	r24, r14
     dc6:	b6 01       	movw	r22, r12
     dc8:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__addsf3>
     dcc:	6b 01       	movw	r12, r22
     dce:	7c 01       	movw	r14, r24
     dd0:	01 50       	subi	r16, 0x01	; 1
     dd2:	11 09       	sbc	r17, r1
     dd4:	09 f0       	breq	.+2      	; 0xdd8 <__stack+0x4d9>
     dd6:	70 cf       	rjmp	.-288    	; 0xcb8 <__stack+0x3b9>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = -speed;
     dd8:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <speedCurrentRight+0x1>
     ddc:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <speedCurrentRight>
		speedCurrentLeft = speed;
     de0:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <speedCurrentLeft+0x1>
     de4:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <speedCurrentLeft>
		
		break;
     de8:	62 c1       	rjmp	.+708    	; 0x10ae <__stack+0x7af>

		case 'L': //This case handles the rotation of the robot 90 degrees to the left. The robot accelerates and decelerates with the same method used with forward and backward movement.
		
		setSpeedRight = speed - speedCurrentRight;
     dea:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <speedCurrentRight>
     dee:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <speedCurrentRight+0x1>
     df2:	91 01       	movw	r18, r2
     df4:	28 1b       	sub	r18, r24
     df6:	39 0b       	sbc	r19, r25
		setSpeedLeft = speed + speedCurrentLeft;
     df8:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <speedCurrentLeft>
     dfc:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <speedCurrentLeft+0x1>
     e00:	82 0d       	add	r24, r2
     e02:	93 1d       	adc	r25, r3
     e04:	65 e6       	ldi	r22, 0x65	; 101
     e06:	70 e0       	ldi	r23, 0x00	; 0
     e08:	7a 8b       	std	Y+18, r23	; 0x12
     e0a:	69 8b       	std	Y+17, r22	; 0x11
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     e0c:	1d 82       	std	Y+5, r1	; 0x05
     e0e:	1e 82       	std	Y+6, r1	; 0x06
     e10:	1f 82       	std	Y+7, r1	; 0x07
     e12:	18 86       	std	Y+8, r1	; 0x08
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
			
			motorLeftSpeed = speedCurrentLeft - (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ));
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     e14:	a9 01       	movw	r20, r18
     e16:	33 0f       	add	r19, r19
     e18:	66 0b       	sbc	r22, r22
     e1a:	77 0b       	sbc	r23, r23
     e1c:	49 87       	std	Y+9, r20	; 0x09
     e1e:	5a 87       	std	Y+10, r21	; 0x0a
     e20:	6b 87       	std	Y+11, r22	; 0x0b
     e22:	7c 87       	std	Y+12, r23	; 0x0c
     e24:	9c 01       	movw	r18, r24
     e26:	99 0f       	add	r25, r25
     e28:	44 0b       	sbc	r20, r20
     e2a:	55 0b       	sbc	r21, r21
     e2c:	2d 87       	std	Y+13, r18	; 0x0d
     e2e:	3e 87       	std	Y+14, r19	; 0x0e
     e30:	4f 87       	std	Y+15, r20	; 0x0f
     e32:	58 8b       	std	Y+16, r21	; 0x10
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     e34:	0e 94 71 11 	call	0x22e2	; 0x22e2 <get_ms>
     e38:	8b 01       	movw	r16, r22
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
     e3a:	2b ed       	ldi	r18, 0xDB	; 219
     e3c:	3f e0       	ldi	r19, 0x0F	; 15
     e3e:	49 ec       	ldi	r20, 0xC9	; 201
     e40:	50 e4       	ldi	r21, 0x40	; 64
     e42:	6d 81       	ldd	r22, Y+5	; 0x05
     e44:	7e 81       	ldd	r23, Y+6	; 0x06
     e46:	8f 81       	ldd	r24, Y+7	; 0x07
     e48:	98 85       	ldd	r25, Y+8	; 0x08
     e4a:	0e 94 11 19 	call	0x3222	; 0x3222 <__mulsf3>
     e4e:	0e 94 7e 19 	call	0x32fc	; 0x32fc <sin>
     e52:	23 e8       	ldi	r18, 0x83	; 131
     e54:	39 ef       	ldi	r19, 0xF9	; 249
     e56:	42 e2       	ldi	r20, 0x22	; 34
     e58:	5e e3       	ldi	r21, 0x3E	; 62
     e5a:	0e 94 11 19 	call	0x3222	; 0x3222 <__mulsf3>
     e5e:	2d 81       	ldd	r18, Y+5	; 0x05
     e60:	3e 81       	ldd	r19, Y+6	; 0x06
     e62:	4f 81       	ldd	r20, Y+7	; 0x07
     e64:	58 85       	ldd	r21, Y+8	; 0x08
     e66:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__addsf3>
     e6a:	6b 01       	movw	r12, r22
     e6c:	7c 01       	movw	r14, r24
			
			motorLeftSpeed = speedCurrentLeft - (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ));
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     e6e:	60 91 eb 01 	lds	r22, 0x01EB	; 0x8001eb <speedCurrentRight>
     e72:	70 91 ec 01 	lds	r23, 0x01EC	; 0x8001ec <speedCurrentRight+0x1>
     e76:	07 2e       	mov	r0, r23
     e78:	00 0c       	add	r0, r0
     e7a:	88 0b       	sbc	r24, r24
     e7c:	99 0b       	sbc	r25, r25
     e7e:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <__floatsisf>
     e82:	4b 01       	movw	r8, r22
     e84:	5c 01       	movw	r10, r24
     e86:	69 85       	ldd	r22, Y+9	; 0x09
     e88:	7a 85       	ldd	r23, Y+10	; 0x0a
     e8a:	8b 85       	ldd	r24, Y+11	; 0x0b
     e8c:	9c 85       	ldd	r25, Y+12	; 0x0c
     e8e:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <__floatsisf>
     e92:	a7 01       	movw	r20, r14
     e94:	96 01       	movw	r18, r12
     e96:	0e 94 11 19 	call	0x3222	; 0x3222 <__mulsf3>
     e9a:	9b 01       	movw	r18, r22
     e9c:	ac 01       	movw	r20, r24
     e9e:	c5 01       	movw	r24, r10
     ea0:	b4 01       	movw	r22, r8
     ea2:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__addsf3>
     ea6:	0e 94 24 18 	call	0x3048	; 0x3048 <__fixsfsi>
     eaa:	4b 01       	movw	r8, r22
     eac:	5c 01       	movw	r10, r24
     eae:	60 91 e9 01 	lds	r22, 0x01E9	; 0x8001e9 <speedCurrentLeft>
     eb2:	70 91 ea 01 	lds	r23, 0x01EA	; 0x8001ea <speedCurrentLeft+0x1>
     eb6:	07 2e       	mov	r0, r23
     eb8:	00 0c       	add	r0, r0
     eba:	88 0b       	sbc	r24, r24
     ebc:	99 0b       	sbc	r25, r25
     ebe:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <__floatsisf>
     ec2:	2b 01       	movw	r4, r22
     ec4:	3c 01       	movw	r6, r24
     ec6:	6d 85       	ldd	r22, Y+13	; 0x0d
     ec8:	7e 85       	ldd	r23, Y+14	; 0x0e
     eca:	8f 85       	ldd	r24, Y+15	; 0x0f
     ecc:	98 89       	ldd	r25, Y+16	; 0x10
     ece:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <__floatsisf>
     ed2:	a7 01       	movw	r20, r14
     ed4:	96 01       	movw	r18, r12
     ed6:	0e 94 11 19 	call	0x3222	; 0x3222 <__mulsf3>
     eda:	9b 01       	movw	r18, r22
     edc:	ac 01       	movw	r20, r24
     ede:	c3 01       	movw	r24, r6
     ee0:	b2 01       	movw	r22, r4
     ee2:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <__subsf3>
     ee6:	0e 94 24 18 	call	0x3048	; 0x3048 <__fixsfsi>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	b4 01       	movw	r22, r8
     ef0:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     ef4:	48 01       	movw	r8, r16
     ef6:	11 0f       	add	r17, r17
     ef8:	aa 08       	sbc	r10, r10
     efa:	bb 08       	sbc	r11, r11
     efc:	0e 94 71 11 	call	0x22e2	; 0x22e2 <get_ms>
     f00:	2b 01       	movw	r4, r22
     f02:	3c 01       	movw	r6, r24
     f04:	20 e0       	ldi	r18, 0x00	; 0
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	40 e2       	ldi	r20, 0x20	; 32
     f0a:	51 e4       	ldi	r21, 0x41	; 65
     f0c:	69 81       	ldd	r22, Y+1	; 0x01
     f0e:	7a 81       	ldd	r23, Y+2	; 0x02
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	9c 81       	ldd	r25, Y+4	; 0x04
     f14:	0e 94 11 19 	call	0x3222	; 0x3222 <__mulsf3>
     f18:	6b 01       	movw	r12, r22
     f1a:	7c 01       	movw	r14, r24
     f1c:	c3 01       	movw	r24, r6
     f1e:	b2 01       	movw	r22, r4
     f20:	68 19       	sub	r22, r8
     f22:	79 09       	sbc	r23, r9
     f24:	8a 09       	sbc	r24, r10
     f26:	9b 09       	sbc	r25, r11
     f28:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <__floatunsisf>
     f2c:	a7 01       	movw	r20, r14
     f2e:	96 01       	movw	r18, r12
     f30:	0e 94 1f 18 	call	0x303e	; 0x303e <__cmpsf2>
     f34:	88 23       	and	r24, r24
     f36:	14 f3       	brlt	.-60     	; 0xefc <__stack+0x5fd>
		case 'L': //This case handles the rotation of the robot 90 degrees to the left. The robot accelerates and decelerates with the same method used with forward and backward movement.
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     f38:	2a e0       	ldi	r18, 0x0A	; 10
     f3a:	37 ed       	ldi	r19, 0xD7	; 215
     f3c:	43 e2       	ldi	r20, 0x23	; 35
     f3e:	5c e3       	ldi	r21, 0x3C	; 60
     f40:	6d 81       	ldd	r22, Y+5	; 0x05
     f42:	7e 81       	ldd	r23, Y+6	; 0x06
     f44:	8f 81       	ldd	r24, Y+7	; 0x07
     f46:	98 85       	ldd	r25, Y+8	; 0x08
     f48:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__addsf3>
     f4c:	6d 83       	std	Y+5, r22	; 0x05
     f4e:	7e 83       	std	Y+6, r23	; 0x06
     f50:	8f 83       	std	Y+7, r24	; 0x07
     f52:	98 87       	std	Y+8, r25	; 0x08
     f54:	a9 89       	ldd	r26, Y+17	; 0x11
     f56:	ba 89       	ldd	r27, Y+18	; 0x12
     f58:	11 97       	sbiw	r26, 0x01	; 1
     f5a:	ba 8b       	std	Y+18, r27	; 0x12
     f5c:	a9 8b       	std	Y+17, r26	; 0x11
     f5e:	ab 2b       	or	r26, r27
     f60:	09 f0       	breq	.+2      	; 0xf64 <__stack+0x665>
     f62:	68 cf       	rjmp	.-304    	; 0xe34 <__stack+0x535>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = speed;
     f64:	30 92 ec 01 	sts	0x01EC, r3	; 0x8001ec <speedCurrentRight+0x1>
     f68:	20 92 eb 01 	sts	0x01EB, r2	; 0x8001eb <speedCurrentRight>
		speedCurrentLeft = -speed;
     f6c:	31 94       	neg	r3
     f6e:	21 94       	neg	r2
     f70:	31 08       	sbc	r3, r1
     f72:	30 92 ea 01 	sts	0x01EA, r3	; 0x8001ea <speedCurrentLeft+0x1>
     f76:	20 92 e9 01 	sts	0x01E9, r2	; 0x8001e9 <speedCurrentLeft>
     f7a:	25 e6       	ldi	r18, 0x65	; 101
     f7c:	30 e0       	ldi	r19, 0x00	; 0
		speed = 0;
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     f7e:	19 82       	std	Y+1, r1	; 0x01
     f80:	1a 82       	std	Y+2, r1	; 0x02
     f82:	1b 82       	std	Y+3, r1	; 0x03
     f84:	1c 82       	std	Y+4, r1	; 0x04
			timerStart = get_ms();
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
     f86:	a1 01       	movw	r20, r2
     f88:	33 0c       	add	r3, r3
     f8a:	66 0b       	sbc	r22, r22
     f8c:	77 0b       	sbc	r23, r23
     f8e:	4d 83       	std	Y+5, r20	; 0x05
     f90:	5e 83       	std	Y+6, r21	; 0x06
     f92:	6f 83       	std	Y+7, r22	; 0x07
     f94:	78 87       	std	Y+8, r23	; 0x08
     f96:	3a 87       	std	Y+10, r19	; 0x0a
     f98:	29 87       	std	Y+9, r18	; 0x09
     f9a:	81 2c       	mov	r8, r1
     f9c:	91 2c       	mov	r9, r1
     f9e:	54 01       	movw	r10, r8
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     fa0:	0e 94 71 11 	call	0x22e2	; 0x22e2 <get_ms>
     fa4:	8b 01       	movw	r16, r22
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
     fa6:	2b ed       	ldi	r18, 0xDB	; 219
     fa8:	3f e0       	ldi	r19, 0x0F	; 15
     faa:	49 ec       	ldi	r20, 0xC9	; 201
     fac:	50 e4       	ldi	r21, 0x40	; 64
     fae:	c5 01       	movw	r24, r10
     fb0:	b4 01       	movw	r22, r8
     fb2:	0e 94 11 19 	call	0x3222	; 0x3222 <__mulsf3>
     fb6:	0e 94 7e 19 	call	0x32fc	; 0x32fc <sin>
     fba:	23 e8       	ldi	r18, 0x83	; 131
     fbc:	39 ef       	ldi	r19, 0xF9	; 249
     fbe:	42 e2       	ldi	r20, 0x22	; 34
     fc0:	5e e3       	ldi	r21, 0x3E	; 62
     fc2:	0e 94 11 19 	call	0x3222	; 0x3222 <__mulsf3>
     fc6:	a5 01       	movw	r20, r10
     fc8:	94 01       	movw	r18, r8
     fca:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__addsf3>
     fce:	2b 01       	movw	r4, r22
     fd0:	3c 01       	movw	r6, r24
     fd2:	6d 81       	ldd	r22, Y+5	; 0x05
     fd4:	7e 81       	ldd	r23, Y+6	; 0x06
     fd6:	8f 81       	ldd	r24, Y+7	; 0x07
     fd8:	98 85       	ldd	r25, Y+8	; 0x08
     fda:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <__floatsisf>
     fde:	9b 01       	movw	r18, r22
     fe0:	ac 01       	movw	r20, r24
     fe2:	c3 01       	movw	r24, r6
     fe4:	b2 01       	movw	r22, r4
     fe6:	0e 94 11 19 	call	0x3222	; 0x3222 <__mulsf3>
     fea:	2b 01       	movw	r4, r22
     fec:	3c 01       	movw	r6, r24
			
			motorLeftSpeed = speedCurrentLeft - (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ));
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     fee:	60 91 eb 01 	lds	r22, 0x01EB	; 0x8001eb <speedCurrentRight>
     ff2:	70 91 ec 01 	lds	r23, 0x01EC	; 0x8001ec <speedCurrentRight+0x1>
     ff6:	07 2e       	mov	r0, r23
     ff8:	00 0c       	add	r0, r0
     ffa:	88 0b       	sbc	r24, r24
     ffc:	99 0b       	sbc	r25, r25
     ffe:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <__floatsisf>
    1002:	a3 01       	movw	r20, r6
    1004:	92 01       	movw	r18, r4
    1006:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__addsf3>
    100a:	0e 94 24 18 	call	0x3048	; 0x3048 <__fixsfsi>
    100e:	69 83       	std	Y+1, r22	; 0x01
    1010:	7a 83       	std	Y+2, r23	; 0x02
    1012:	8b 83       	std	Y+3, r24	; 0x03
    1014:	9c 83       	std	Y+4, r25	; 0x04
    1016:	60 91 e9 01 	lds	r22, 0x01E9	; 0x8001e9 <speedCurrentLeft>
    101a:	70 91 ea 01 	lds	r23, 0x01EA	; 0x8001ea <speedCurrentLeft+0x1>
    101e:	07 2e       	mov	r0, r23
    1020:	00 0c       	add	r0, r0
    1022:	88 0b       	sbc	r24, r24
    1024:	99 0b       	sbc	r25, r25
    1026:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <__floatsisf>
    102a:	a3 01       	movw	r20, r6
    102c:	92 01       	movw	r18, r4
    102e:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <__subsf3>
    1032:	0e 94 24 18 	call	0x3048	; 0x3048 <__fixsfsi>
    1036:	dc 01       	movw	r26, r24
    1038:	cb 01       	movw	r24, r22
    103a:	69 81       	ldd	r22, Y+1	; 0x01
    103c:	7a 81       	ldd	r23, Y+2	; 0x02
    103e:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
    1042:	28 01       	movw	r4, r16
    1044:	11 0f       	add	r17, r17
    1046:	66 08       	sbc	r6, r6
    1048:	77 08       	sbc	r7, r7
    104a:	0e 94 71 11 	call	0x22e2	; 0x22e2 <get_ms>
    104e:	64 19       	sub	r22, r4
    1050:	75 09       	sbc	r23, r5
    1052:	86 09       	sbc	r24, r6
    1054:	97 09       	sbc	r25, r7
    1056:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <__floatunsisf>
    105a:	9b 01       	movw	r18, r22
    105c:	ac 01       	movw	r20, r24
    105e:	c7 01       	movw	r24, r14
    1060:	b6 01       	movw	r22, r12
    1062:	0e 94 0c 19 	call	0x3218	; 0x3218 <__gesf2>
    1066:	18 16       	cp	r1, r24
    1068:	84 f3       	brlt	.-32     	; 0x104a <__stack+0x74b>
		speed = 0;
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
    106a:	2a e0       	ldi	r18, 0x0A	; 10
    106c:	37 ed       	ldi	r19, 0xD7	; 215
    106e:	43 e2       	ldi	r20, 0x23	; 35
    1070:	5c e3       	ldi	r21, 0x3C	; 60
    1072:	c5 01       	movw	r24, r10
    1074:	b4 01       	movw	r22, r8
    1076:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <__addsf3>
    107a:	4b 01       	movw	r8, r22
    107c:	5c 01       	movw	r10, r24
    107e:	69 85       	ldd	r22, Y+9	; 0x09
    1080:	7a 85       	ldd	r23, Y+10	; 0x0a
    1082:	61 50       	subi	r22, 0x01	; 1
    1084:	71 09       	sbc	r23, r1
    1086:	7a 87       	std	Y+10, r23	; 0x0a
    1088:	69 87       	std	Y+9, r22	; 0x09
    108a:	67 2b       	or	r22, r23
    108c:	09 f0       	breq	.+2      	; 0x1090 <__stack+0x791>
    108e:	88 cf       	rjmp	.-240    	; 0xfa0 <__stack+0x6a1>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = speed;
    1090:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <speedCurrentRight+0x1>
    1094:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <speedCurrentRight>
		speedCurrentLeft = -speed;
    1098:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <speedCurrentLeft+0x1>
    109c:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <speedCurrentLeft>
		break;
    10a0:	06 c0       	rjmp	.+12     	; 0x10ae <__stack+0x7af>
		
		default:		//The default case puts the robot into a full stop and is only used in emergency situations. Using this case is not recommended as it applies the brakes instantaneously and therefore creates an extreme jerk in the acceleration curve.
		set_motors(0,0);
    10a2:	60 e0       	ldi	r22, 0x00	; 0
    10a4:	70 e0       	ldi	r23, 0x00	; 0
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <set_motors>
		break;
	}
}
    10ae:	66 96       	adiw	r28, 0x16	; 22
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	f8 94       	cli
    10b4:	de bf       	out	0x3e, r29	; 62
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	cd bf       	out	0x3d, r28	; 61
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	1f 91       	pop	r17
    10c0:	0f 91       	pop	r16
    10c2:	ff 90       	pop	r15
    10c4:	ef 90       	pop	r14
    10c6:	df 90       	pop	r13
    10c8:	cf 90       	pop	r12
    10ca:	bf 90       	pop	r11
    10cc:	af 90       	pop	r10
    10ce:	9f 90       	pop	r9
    10d0:	8f 90       	pop	r8
    10d2:	7f 90       	pop	r7
    10d4:	6f 90       	pop	r6
    10d6:	5f 90       	pop	r5
    10d8:	4f 90       	pop	r4
    10da:	3f 90       	pop	r3
    10dc:	2f 90       	pop	r2
    10de:	08 95       	ret

000010e0 <initialize>:
	if(resultTemp > 1){
		decision = HIGH;
	}
	delay(100);
	return decision;
}
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	80 ed       	ldi	r24, 0xD0	; 208
    10e6:	97 e0       	ldi	r25, 0x07	; 7
    10e8:	0e 94 ce 11 	call	0x239c	; 0x239c <pololu_3pi_init>
    10ec:	1b c0       	rjmp	.+54     	; 0x1124 <initialize+0x44>
    10ee:	0e 94 99 0a 	call	0x1532	; 0x1532 <read_battery_millivolts_3pi>
    10f2:	ec 01       	movw	r28, r24
    10f4:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <clear>
    10f8:	be 01       	movw	r22, r28
    10fa:	dd 0f       	add	r29, r29
    10fc:	88 0b       	sbc	r24, r24
    10fe:	99 0b       	sbc	r25, r25
    1100:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <print_long>
    1104:	8f e5       	ldi	r24, 0x5F	; 95
    1106:	91 e0       	ldi	r25, 0x01	; 1
    1108:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <print>
    110c:	61 e0       	ldi	r22, 0x01	; 1
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <lcd_goto_xy>
    1114:	82 e6       	ldi	r24, 0x62	; 98
    1116:	91 e0       	ldi	r25, 0x01	; 1
    1118:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <print>
    111c:	84 e6       	ldi	r24, 0x64	; 100
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	0e 94 39 11 	call	0x2272	; 0x2272 <delay_ms>
    1124:	80 e1       	ldi	r24, 0x10	; 16
    1126:	0e 94 3b 10 	call	0x2076	; 0x2076 <button_is_pressed>
    112a:	88 23       	and	r24, r24
    112c:	01 f3       	breq	.-64     	; 0x10ee <initialize+0xe>
    112e:	80 e1       	ldi	r24, 0x10	; 16
    1130:	0e 94 27 10 	call	0x204e	; 0x204e <wait_for_button_release>
    1134:	88 ee       	ldi	r24, 0xE8	; 232
    1136:	93 e0       	ldi	r25, 0x03	; 3
    1138:	0e 94 39 11 	call	0x2272	; 0x2272 <delay_ms>
    113c:	cc ee       	ldi	r28, 0xEC	; 236
    113e:	df ef       	ldi	r29, 0xFF	; 255
    1140:	c8 32       	cpi	r28, 0x28	; 40
    1142:	d1 05       	cpc	r29, r1
    1144:	38 f0       	brcs	.+14     	; 0x1154 <initialize+0x74>
    1146:	68 ed       	ldi	r22, 0xD8	; 216
    1148:	7f ef       	ldi	r23, 0xFF	; 255
    114a:	88 e2       	ldi	r24, 0x28	; 40
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <set_motors>
    1152:	06 c0       	rjmp	.+12     	; 0x1160 <initialize+0x80>
    1154:	68 e2       	ldi	r22, 0x28	; 40
    1156:	70 e0       	ldi	r23, 0x00	; 0
    1158:	88 ed       	ldi	r24, 0xD8	; 216
    115a:	9f ef       	ldi	r25, 0xFF	; 255
    115c:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <set_motors>
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	0e 94 92 11 	call	0x2324	; 0x2324 <calibrate_line_sensors>
    1166:	84 e1       	ldi	r24, 0x14	; 20
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	0e 94 39 11 	call	0x2272	; 0x2272 <delay_ms>
    116e:	21 96       	adiw	r28, 0x01	; 1
    1170:	cc 33       	cpi	r28, 0x3C	; 60
    1172:	d1 05       	cpc	r29, r1
    1174:	29 f7       	brne	.-54     	; 0x1140 <initialize+0x60>
    1176:	60 e0       	ldi	r22, 0x00	; 0
    1178:	70 e0       	ldi	r23, 0x00	; 0
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <set_motors>
    1182:	15 c0       	rjmp	.+42     	; 0x11ae <initialize+0xce>
    1184:	61 e0       	ldi	r22, 0x01	; 1
    1186:	8f e4       	ldi	r24, 0x4F	; 79
    1188:	92 e0       	ldi	r25, 0x02	; 2
    118a:	0e 94 98 11 	call	0x2330	; 0x2330 <read_line>
    118e:	ec 01       	movw	r28, r24
    1190:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <clear>
    1194:	89 e6       	ldi	r24, 0x69	; 105
    1196:	91 e0       	ldi	r25, 0x01	; 1
    1198:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <print>
    119c:	be 01       	movw	r22, r28
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <print_long>
    11a6:	84 e6       	ldi	r24, 0x64	; 100
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	0e 94 39 11 	call	0x2272	; 0x2272 <delay_ms>
    11ae:	80 e1       	ldi	r24, 0x10	; 16
    11b0:	0e 94 3b 10 	call	0x2076	; 0x2076 <button_is_pressed>
    11b4:	88 23       	and	r24, r24
    11b6:	31 f3       	breq	.-52     	; 0x1184 <initialize+0xa4>
    11b8:	80 e1       	ldi	r24, 0x10	; 16
    11ba:	0e 94 27 10 	call	0x204e	; 0x204e <wait_for_button_release>
    11be:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <clear>
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	08 95       	ret

000011c8 <checkAfslag>:
    11c8:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <sensors>
    11cc:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <sensors+0x1>
    11d0:	80 32       	cpi	r24, 0x20	; 32
    11d2:	93 40       	sbci	r25, 0x03	; 3
    11d4:	58 f4       	brcc	.+22     	; 0x11ec <checkAfslag+0x24>
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <sensors+0x8>
    11de:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <sensors+0x9>
    11e2:	20 32       	cpi	r18, 0x20	; 32
    11e4:	33 40       	sbci	r19, 0x03	; 3
    11e6:	20 f4       	brcc	.+8      	; 0x11f0 <checkAfslag+0x28>
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	08 95       	ret
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	08 95       	ret

000011f2 <followLine>:
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	61 e0       	ldi	r22, 0x01	; 1
    11f8:	8f e4       	ldi	r24, 0x4F	; 79
    11fa:	92 e0       	ldi	r25, 0x02	; 2
    11fc:	0e 94 98 11 	call	0x2330	; 0x2330 <read_line>
    1200:	80 5d       	subi	r24, 0xD0	; 208
    1202:	97 40       	sbci	r25, 0x07	; 7
    1204:	20 91 5b 02 	lds	r18, 0x025B	; 0x80025b <last_proportional>
    1208:	30 91 5c 02 	lds	r19, 0x025C	; 0x80025c <last_proportional+0x1>
    120c:	ac 01       	movw	r20, r24
    120e:	42 1b       	sub	r20, r18
    1210:	53 0b       	sbc	r21, r19
    1212:	9a 01       	movw	r18, r20
    1214:	e0 91 5f 02 	lds	r30, 0x025F	; 0x80025f <integral>
    1218:	f0 91 60 02 	lds	r31, 0x0260	; 0x800260 <integral+0x1>
    121c:	e8 0f       	add	r30, r24
    121e:	f9 1f       	adc	r31, r25
    1220:	f0 93 60 02 	sts	0x0260, r31	; 0x800260 <integral+0x1>
    1224:	e0 93 5f 02 	sts	0x025F, r30	; 0x80025f <integral>
    1228:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <last_proportional+0x1>
    122c:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <last_proportional>
    1230:	64 e1       	ldi	r22, 0x14	; 20
    1232:	70 e0       	ldi	r23, 0x00	; 0
    1234:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <__divmodhi4>
    1238:	eb 01       	movw	r28, r22
    123a:	cf 01       	movw	r24, r30
    123c:	60 e1       	ldi	r22, 0x10	; 16
    123e:	77 e2       	ldi	r23, 0x27	; 39
    1240:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <__divmodhi4>
    1244:	ce 01       	movw	r24, r28
    1246:	86 0f       	add	r24, r22
    1248:	97 1f       	adc	r25, r23
    124a:	b9 01       	movw	r22, r18
    124c:	66 0f       	add	r22, r22
    124e:	77 1f       	adc	r23, r23
    1250:	26 0f       	add	r18, r22
    1252:	37 1f       	adc	r19, r23
    1254:	33 23       	and	r19, r19
    1256:	14 f4       	brge	.+4      	; 0x125c <followLine+0x6a>
    1258:	2f 5f       	subi	r18, 0xFF	; 255
    125a:	3f 4f       	sbci	r19, 0xFF	; 255
    125c:	35 95       	asr	r19
    125e:	27 95       	ror	r18
    1260:	82 0f       	add	r24, r18
    1262:	93 1f       	adc	r25, r19
    1264:	8d 33       	cpi	r24, 0x3D	; 61
    1266:	91 05       	cpc	r25, r1
    1268:	14 f0       	brlt	.+4      	; 0x126e <followLine+0x7c>
    126a:	8c e3       	ldi	r24, 0x3C	; 60
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	84 3c       	cpi	r24, 0xC4	; 196
    1270:	5f ef       	ldi	r21, 0xFF	; 255
    1272:	95 07       	cpc	r25, r21
    1274:	14 f4       	brge	.+4      	; 0x127a <followLine+0x88>
    1276:	84 ec       	ldi	r24, 0xC4	; 196
    1278:	9f ef       	ldi	r25, 0xFF	; 255
    127a:	99 23       	and	r25, r25
    127c:	34 f4       	brge	.+12     	; 0x128a <followLine+0x98>
    127e:	6c e3       	ldi	r22, 0x3C	; 60
    1280:	70 e0       	ldi	r23, 0x00	; 0
    1282:	cc 96       	adiw	r24, 0x3c	; 60
    1284:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <set_motors>
    1288:	08 c0       	rjmp	.+16     	; 0x129a <followLine+0xa8>
    128a:	6c e3       	ldi	r22, 0x3C	; 60
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	68 1b       	sub	r22, r24
    1290:	79 0b       	sbc	r23, r25
    1292:	8c e3       	ldi	r24, 0x3C	; 60
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <set_motors>
    129a:	df 91       	pop	r29
    129c:	cf 91       	pop	r28
    129e:	08 95       	ret

000012a0 <moveObject>:
}


void moveObject()
{
	while(!button_is_pressed(BUTTON_B))
    12a0:	12 c0       	rjmp	.+36     	; 0x12c6 <moveObject+0x26>
	{
		clear();
    12a2:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <clear>
		print("druk op");													//print instruction to LCD
    12a6:	8c e6       	ldi	r24, 0x6C	; 108
    12a8:	91 e0       	ldi	r25, 0x01	; 1
    12aa:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <print>
		lcd_goto_xy(0,1);
    12ae:	61 e0       	ldi	r22, 0x01	; 1
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <lcd_goto_xy>
		print("B knop");
    12b6:	84 e7       	ldi	r24, 0x74	; 116
    12b8:	91 e0       	ldi	r25, 0x01	; 1
    12ba:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <print>
		delay_ms(100);
    12be:	84 e6       	ldi	r24, 0x64	; 100
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	0e 94 39 11 	call	0x2272	; 0x2272 <delay_ms>
}


void moveObject()
{
	while(!button_is_pressed(BUTTON_B))
    12c6:	80 e1       	ldi	r24, 0x10	; 16
    12c8:	0e 94 3b 10 	call	0x2076	; 0x2076 <button_is_pressed>
    12cc:	88 23       	and	r24, r24
    12ce:	49 f3       	breq	.-46     	; 0x12a2 <moveObject+0x2>
		print("druk op");													//print instruction to LCD
		lcd_goto_xy(0,1);
		print("B knop");
		delay_ms(100);
	}
	wait_for_button_release(BUTTON_B);										//when button is released the robot will continue driving
    12d0:	80 e1       	ldi	r24, 0x10	; 16
    12d2:	0e 94 27 10 	call	0x204e	; 0x204e <wait_for_button_release>
    12d6:	08 95       	ret

000012d8 <checkDistance>:
}

int checkDistance()
{
	
	sensorDistance = analog_read(ADCH5);									//write sensor data to sensorDistance
    12d8:	85 e0       	ldi	r24, 0x05	; 5
    12da:	0e 94 00 0a 	call	0x1400	; 0x1400 <analog_read>
    12de:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <sensorDistance+0x1>
    12e2:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <sensorDistance>
	sensorDistance2 = analog_read(ADCH7);									//write sensor data to sensorDistance2
    12e6:	87 e0       	ldi	r24, 0x07	; 7
    12e8:	0e 94 00 0a 	call	0x1400	; 0x1400 <analog_read>
    12ec:	9c 01       	movw	r18, r24
    12ee:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <sensorDistance2+0x1>
    12f2:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <sensorDistance2>
	
	distance = (2076/(sensorDistance - 11));								//convert sensor data to distance in cm
    12f6:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <sensorDistance>
    12fa:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <sensorDistance+0x1>
    12fe:	6b 50       	subi	r22, 0x0B	; 11
    1300:	71 09       	sbc	r23, r1
    1302:	ec e1       	ldi	r30, 0x1C	; 28
    1304:	f8 e0       	ldi	r31, 0x08	; 8
    1306:	cf 01       	movw	r24, r30
    1308:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <__divmodhi4>
    130c:	70 93 f6 01 	sts	0x01F6, r23	; 0x8001f6 <distance+0x1>
    1310:	60 93 f5 01 	sts	0x01F5, r22	; 0x8001f5 <distance>
	distance2 = (2076/(sensorDistance2 - 11));								//convert sensor data to distance in cm
    1314:	b9 01       	movw	r22, r18
    1316:	6b 50       	subi	r22, 0x0B	; 11
    1318:	71 09       	sbc	r23, r1
    131a:	cf 01       	movw	r24, r30
    131c:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <__divmodhi4>
    1320:	70 93 fa 01 	sts	0x01FA, r23	; 0x8001fa <distance2+0x1>
    1324:	60 93 f9 01 	sts	0x01F9, r22	; 0x8001f9 <distance2>
	
	clear();																//clear LCD
    1328:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <clear>
	
	if(distance < close && distance > veryClose)						    //compares if distance is less than 20 cm & bigger than 10 cm
    132c:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <distance>
    1330:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <distance+0x1>
    1334:	9c 01       	movw	r18, r24
    1336:	2b 50       	subi	r18, 0x0B	; 11
    1338:	31 09       	sbc	r19, r1
    133a:	29 30       	cpi	r18, 0x09	; 9
    133c:	31 05       	cpc	r19, r1
    133e:	38 f4       	brcc	.+14     	; 0x134e <checkDistance+0x76>
	{
		clear();
    1340:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <clear>
		play_from_program_space(PSTR(">g32>>c32"));							//sound warning
    1344:	88 eb       	ldi	r24, 0xB8	; 184
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <play_from_program_space>
    134c:	11 c0       	rjmp	.+34     	; 0x1370 <checkDistance+0x98>

	}
	else if(distance < veryClose && distance > 0)						    //compares if distance is less than 10 cm
    134e:	01 97       	sbiw	r24, 0x01	; 1
    1350:	09 97       	sbiw	r24, 0x09	; 9
    1352:	70 f4       	brcc	.+28     	; 0x1370 <checkDistance+0x98>
	{
		clear();
    1354:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <clear>
		play_from_program_space(PSTR(">f32>>a32"));							//sound warning
    1358:	8e ea       	ldi	r24, 0xAE	; 174
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <play_from_program_space>
		
		set_motors(0,0);
    1360:	60 e0       	ldi	r22, 0x00	; 0
    1362:	70 e0       	ldi	r23, 0x00	; 0
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <set_motors>
											//robot brakes
		moveObject();														//function that waits until the oject is removed
    136c:	0e 94 50 09 	call	0x12a0	; 0x12a0 <moveObject>
	}

	return 0;

}
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	08 95       	ret

00001376 <_ZN15OrangutanAnalog7setModeEh.part.0>:
    1376:	ec e7       	ldi	r30, 0x7C	; 124
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	8f 7d       	andi	r24, 0xDF	; 223
    137e:	80 83       	st	Z, r24
    1380:	08 95       	ret

00001382 <_ZN15OrangutanAnalog7setModeEh>:
    1382:	81 11       	cpse	r24, r1
    1384:	03 c0       	rjmp	.+6      	; 0x138c <_ZN15OrangutanAnalog7setModeEh+0xa>
    1386:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN15OrangutanAnalog7setModeEh.part.0>
    138a:	08 95       	ret
    138c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1390:	80 62       	ori	r24, 0x20	; 32
    1392:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1396:	08 95       	ret

00001398 <_ZN15OrangutanAnalog7getModeEv>:
    1398:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    139c:	85 fb       	bst	r24, 5
    139e:	88 27       	eor	r24, r24
    13a0:	80 f9       	bld	r24, 0
    13a2:	08 95       	ret

000013a4 <_ZN15OrangutanAnalog16conversionResultEv>:
    13a4:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN15OrangutanAnalog7getModeEv>
    13a8:	88 23       	and	r24, r24
    13aa:	21 f0       	breq	.+8      	; 0x13b4 <_ZN15OrangutanAnalog16conversionResultEv+0x10>
    13ac:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	08 95       	ret
    13b4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    13b8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    13bc:	08 95       	ret

000013be <_ZN15OrangutanAnalog15startConversionEhh>:
    13be:	80 32       	cpi	r24, 0x20	; 32
    13c0:	a0 f4       	brcc	.+40     	; 0x13ea <_ZN15OrangutanAnalog15startConversionEhh+0x2c>
    13c2:	97 e8       	ldi	r25, 0x87	; 135
    13c4:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    13c8:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    13cc:	66 23       	and	r22, r22
    13ce:	11 f0       	breq	.+4      	; 0x13d4 <_ZN15OrangutanAnalog15startConversionEhh+0x16>
    13d0:	90 6c       	ori	r25, 0xC0	; 192
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
    13d4:	9f 77       	andi	r25, 0x7F	; 127
    13d6:	90 64       	ori	r25, 0x40	; 64
    13d8:	90 7e       	andi	r25, 0xE0	; 224
    13da:	98 2b       	or	r25, r24
    13dc:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    13e0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    13e4:	80 64       	ori	r24, 0x40	; 64
    13e6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    13ea:	08 95       	ret

000013ec <_ZN15OrangutanAnalog4readEh>:
    13ec:	60 e0       	ldi	r22, 0x00	; 0
    13ee:	0e 94 df 09 	call	0x13be	; 0x13be <_ZN15OrangutanAnalog15startConversionEhh>
    13f2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    13f6:	86 fd       	sbrc	r24, 6
    13f8:	fc cf       	rjmp	.-8      	; 0x13f2 <_ZN15OrangutanAnalog4readEh+0x6>
    13fa:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <_ZN15OrangutanAnalog16conversionResultEv>
    13fe:	08 95       	ret

00001400 <analog_read>:
    1400:	0e 94 f6 09 	call	0x13ec	; 0x13ec <_ZN15OrangutanAnalog4readEh>
    1404:	08 95       	ret

00001406 <_ZN15OrangutanAnalog11readAverageEhj>:
    1406:	a0 e0       	ldi	r26, 0x00	; 0
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e9 e0       	ldi	r30, 0x09	; 9
    140c:	fa e0       	ldi	r31, 0x0A	; 10
    140e:	0c 94 85 17 	jmp	0x2f0a	; 0x2f0a <__prologue_saves__+0x14>
    1412:	eb 01       	movw	r28, r22
    1414:	60 e0       	ldi	r22, 0x00	; 0
    1416:	0e 94 df 09 	call	0x13be	; 0x13be <_ZN15OrangutanAnalog15startConversionEhh>
    141a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    141e:	86 fd       	sbrc	r24, 6
    1420:	fc cf       	rjmp	.-8      	; 0x141a <_ZN15OrangutanAnalog11readAverageEhj+0x14>
    1422:	8e 01       	movw	r16, r28
    1424:	c1 2c       	mov	r12, r1
    1426:	d1 2c       	mov	r13, r1
    1428:	76 01       	movw	r14, r12
    142a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    142e:	80 64       	ori	r24, 0x40	; 64
    1430:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1434:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1438:	86 fd       	sbrc	r24, 6
    143a:	fc cf       	rjmp	.-8      	; 0x1434 <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
    143c:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <_ZN15OrangutanAnalog16conversionResultEv>
    1440:	c8 0e       	add	r12, r24
    1442:	d9 1e       	adc	r13, r25
    1444:	e1 1c       	adc	r14, r1
    1446:	f1 1c       	adc	r15, r1
    1448:	01 50       	subi	r16, 0x01	; 1
    144a:	11 09       	sbc	r17, r1
    144c:	01 15       	cp	r16, r1
    144e:	11 05       	cpc	r17, r1
    1450:	61 f7       	brne	.-40     	; 0x142a <_ZN15OrangutanAnalog11readAverageEhj+0x24>
    1452:	ce 01       	movw	r24, r28
    1454:	96 95       	lsr	r25
    1456:	87 95       	ror	r24
    1458:	c0 34       	cpi	r28, 0x40	; 64
    145a:	d1 05       	cpc	r29, r1
    145c:	38 f4       	brcc	.+14     	; 0x146c <_ZN15OrangutanAnalog11readAverageEhj+0x66>
    145e:	8c 0d       	add	r24, r12
    1460:	9d 1d       	adc	r25, r13
    1462:	be 01       	movw	r22, r28
    1464:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <__udivmodhi4>
    1468:	cb 01       	movw	r24, r22
    146a:	0e c0       	rjmp	.+28     	; 0x1488 <_ZN15OrangutanAnalog11readAverageEhj+0x82>
    146c:	a7 01       	movw	r20, r14
    146e:	96 01       	movw	r18, r12
    1470:	28 0f       	add	r18, r24
    1472:	39 1f       	adc	r19, r25
    1474:	41 1d       	adc	r20, r1
    1476:	51 1d       	adc	r21, r1
    1478:	ca 01       	movw	r24, r20
    147a:	b9 01       	movw	r22, r18
    147c:	9e 01       	movw	r18, r28
    147e:	40 e0       	ldi	r20, 0x00	; 0
    1480:	50 e0       	ldi	r21, 0x00	; 0
    1482:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__udivmodsi4>
    1486:	c9 01       	movw	r24, r18
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	e8 e0       	ldi	r30, 0x08	; 8
    148e:	0c 94 a1 17 	jmp	0x2f42	; 0x2f42 <__epilogue_restores__+0x14>

00001492 <_ZN15OrangutanAnalog12toMillivoltsEj>:
    1492:	cf 92       	push	r12
    1494:	df 92       	push	r13
    1496:	ef 92       	push	r14
    1498:	ff 92       	push	r15
    149a:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
    149e:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
    14a2:	9c 01       	movw	r18, r24
    14a4:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <__umulhisi3>
    14a8:	6b 01       	movw	r12, r22
    14aa:	7c 01       	movw	r14, r24
    14ac:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN15OrangutanAnalog7getModeEv>
    14b0:	88 23       	and	r24, r24
    14b2:	59 f0       	breq	.+22     	; 0x14ca <_ZN15OrangutanAnalog12toMillivoltsEj+0x38>
    14b4:	c7 01       	movw	r24, r14
    14b6:	b6 01       	movw	r22, r12
    14b8:	61 58       	subi	r22, 0x81	; 129
    14ba:	7f 4f       	sbci	r23, 0xFF	; 255
    14bc:	8f 4f       	sbci	r24, 0xFF	; 255
    14be:	9f 4f       	sbci	r25, 0xFF	; 255
    14c0:	2f ef       	ldi	r18, 0xFF	; 255
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	40 e0       	ldi	r20, 0x00	; 0
    14c6:	50 e0       	ldi	r21, 0x00	; 0
    14c8:	0a c0       	rjmp	.+20     	; 0x14de <_ZN15OrangutanAnalog12toMillivoltsEj+0x4c>
    14ca:	c7 01       	movw	r24, r14
    14cc:	b6 01       	movw	r22, r12
    14ce:	61 50       	subi	r22, 0x01	; 1
    14d0:	7e 4f       	sbci	r23, 0xFE	; 254
    14d2:	8f 4f       	sbci	r24, 0xFF	; 255
    14d4:	9f 4f       	sbci	r25, 0xFF	; 255
    14d6:	2f ef       	ldi	r18, 0xFF	; 255
    14d8:	33 e0       	ldi	r19, 0x03	; 3
    14da:	40 e0       	ldi	r20, 0x00	; 0
    14dc:	50 e0       	ldi	r21, 0x00	; 0
    14de:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__udivmodsi4>
    14e2:	c9 01       	movw	r24, r18
    14e4:	ff 90       	pop	r15
    14e6:	ef 90       	pop	r14
    14e8:	df 90       	pop	r13
    14ea:	cf 90       	pop	r12
    14ec:	08 95       	ret

000014ee <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
    14ee:	0e 94 03 0a 	call	0x1406	; 0x1406 <_ZN15OrangutanAnalog11readAverageEhj>
    14f2:	0e 94 49 0a 	call	0x1492	; 0x1492 <_ZN15OrangutanAnalog12toMillivoltsEj>
    14f6:	08 95       	ret

000014f8 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
    14f8:	1f 93       	push	r17
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
    14fe:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN15OrangutanAnalog7getModeEv>
    1502:	18 2f       	mov	r17, r24
    1504:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN15OrangutanAnalog7setModeEh.part.0>
    1508:	6a e0       	ldi	r22, 0x0A	; 10
    150a:	70 e0       	ldi	r23, 0x00	; 0
    150c:	86 e0       	ldi	r24, 0x06	; 6
    150e:	0e 94 77 0a 	call	0x14ee	; 0x14ee <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
    1512:	ec 01       	movw	r28, r24
    1514:	81 2f       	mov	r24, r17
    1516:	0e 94 c1 09 	call	0x1382	; 0x1382 <_ZN15OrangutanAnalog7setModeEh>
    151a:	ce 01       	movw	r24, r28
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	8c 0f       	add	r24, r28
    1522:	9d 1f       	adc	r25, r29
    1524:	01 96       	adiw	r24, 0x01	; 1
    1526:	96 95       	lsr	r25
    1528:	87 95       	ror	r24
    152a:	df 91       	pop	r29
    152c:	cf 91       	pop	r28
    152e:	1f 91       	pop	r17
    1530:	08 95       	ret

00001532 <read_battery_millivolts_3pi>:
    1532:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
    1536:	08 95       	ret

00001538 <_ZL16currentCharacterv>:
    1538:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <_ZL17use_program_space>
    153c:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <__data_end>
    1540:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <__data_end+0x1>
    1544:	99 23       	and	r25, r25
    1546:	11 f0       	breq	.+4      	; 0x154c <_ZL16currentCharacterv+0x14>
    1548:	84 91       	lpm	r24, Z
    154a:	01 c0       	rjmp	.+2      	; 0x154e <_ZL16currentCharacterv+0x16>
    154c:	80 81       	ld	r24, Z
    154e:	2f eb       	ldi	r18, 0xBF	; 191
    1550:	28 0f       	add	r18, r24
    1552:	2a 31       	cpi	r18, 0x1A	; 26
    1554:	10 f4       	brcc	.+4      	; 0x155a <_ZL16currentCharacterv+0x22>
    1556:	80 5e       	subi	r24, 0xE0	; 224
    1558:	08 95       	ret
    155a:	80 32       	cpi	r24, 0x20	; 32
    155c:	49 f4       	brne	.+18     	; 0x1570 <_ZL16currentCharacterv+0x38>
    155e:	9f 01       	movw	r18, r30
    1560:	2f 5f       	subi	r18, 0xFF	; 255
    1562:	3f 4f       	sbci	r19, 0xFF	; 255
    1564:	30 93 7d 01 	sts	0x017D, r19	; 0x80017d <__data_end+0x1>
    1568:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <__data_end>
    156c:	ef 2b       	or	r30, r31
    156e:	31 f7       	brne	.-52     	; 0x153c <_ZL16currentCharacterv+0x4>
    1570:	08 95       	ret

00001572 <_ZL9getNumberv>:
    1572:	1f 93       	push	r17
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	0e 94 9c 0a 	call	0x1538	; 0x1538 <_ZL16currentCharacterv>
    157c:	c0 e0       	ldi	r28, 0x00	; 0
    157e:	d0 e0       	ldi	r29, 0x00	; 0
    1580:	1a e0       	ldi	r17, 0x0A	; 10
    1582:	90 ed       	ldi	r25, 0xD0	; 208
    1584:	98 0f       	add	r25, r24
    1586:	9a 30       	cpi	r25, 0x0A	; 10
    1588:	b8 f4       	brcc	.+46     	; 0x15b8 <_ZL9getNumberv+0x46>
    158a:	9e 01       	movw	r18, r28
    158c:	12 9f       	mul	r17, r18
    158e:	e0 01       	movw	r28, r0
    1590:	13 9f       	mul	r17, r19
    1592:	d0 0d       	add	r29, r0
    1594:	11 24       	eor	r1, r1
    1596:	c8 0f       	add	r28, r24
    1598:	d1 1d       	adc	r29, r1
    159a:	87 fd       	sbrc	r24, 7
    159c:	da 95       	dec	r29
    159e:	e0 97       	sbiw	r28, 0x30	; 48
    15a0:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
    15a4:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <__data_end+0x1>
    15a8:	01 96       	adiw	r24, 0x01	; 1
    15aa:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <__data_end+0x1>
    15ae:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
    15b2:	0e 94 9c 0a 	call	0x1538	; 0x1538 <_ZL16currentCharacterv>
    15b6:	e5 cf       	rjmp	.-54     	; 0x1582 <_ZL9getNumberv+0x10>
    15b8:	ce 01       	movw	r24, r28
    15ba:	df 91       	pop	r29
    15bc:	cf 91       	pop	r28
    15be:	1f 91       	pop	r17
    15c0:	08 95       	ret

000015c2 <_ZN15OrangutanBuzzer5init2Ev>:
    15c2:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    15c6:	83 e2       	ldi	r24, 0x23	; 35
    15c8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    15cc:	81 e1       	ldi	r24, 0x11	; 17
    15ce:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    15d2:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    15d6:	80 e1       	ldi	r24, 0x10	; 16
    15d8:	97 e2       	ldi	r25, 0x27	; 39
    15da:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    15de:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    15e2:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    15e6:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    15ea:	22 9a       	sbi	0x04, 2	; 4
    15ec:	78 94       	sei
    15ee:	08 95       	ret

000015f0 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
    15f0:	8f 92       	push	r8
    15f2:	9f 92       	push	r9
    15f4:	af 92       	push	r10
    15f6:	bf 92       	push	r11
    15f8:	df 92       	push	r13
    15fa:	ef 92       	push	r14
    15fc:	ff 92       	push	r15
    15fe:	0f 93       	push	r16
    1600:	1f 93       	push	r17
    1602:	cf 93       	push	r28
    1604:	df 93       	push	r29
    1606:	5c 01       	movw	r10, r24
    1608:	8b 01       	movw	r16, r22
    160a:	d4 2e       	mov	r13, r20
    160c:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <buzzerInitialized>
    1610:	81 11       	cpse	r24, r1
    1612:	05 c0       	rjmp	.+10     	; 0x161e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <buzzerInitialized>
    161a:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <_ZN15OrangutanBuzzer5init2Ev>
    161e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <buzzerFinished>
    1622:	b7 fe       	sbrs	r11, 7
    1624:	05 c0       	rjmp	.+10     	; 0x1630 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
    1626:	e8 94       	clt
    1628:	b7 f8       	bld	r11, 7
    162a:	2a e0       	ldi	r18, 0x0A	; 10
    162c:	f2 2e       	mov	r15, r18
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
    1630:	ff 24       	eor	r15, r15
    1632:	f3 94       	inc	r15
    1634:	e0 90 81 00 	lds	r14, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1638:	2e 2d       	mov	r18, r14
    163a:	28 7f       	andi	r18, 0xF8	; 248
    163c:	e2 2e       	mov	r14, r18
    163e:	48 ec       	ldi	r20, 0xC8	; 200
    1640:	f4 9e       	mul	r15, r20
    1642:	c0 01       	movw	r24, r0
    1644:	11 24       	eor	r1, r1
    1646:	8a 15       	cp	r24, r10
    1648:	9b 05       	cpc	r25, r11
    164a:	e0 f4       	brcc	.+56     	; 0x1684 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
    164c:	e5 01       	movw	r28, r10
    164e:	51 e1       	ldi	r21, 0x11	; 17
    1650:	a5 16       	cp	r10, r21
    1652:	57 e2       	ldi	r21, 0x27	; 39
    1654:	b5 06       	cpc	r11, r21
    1656:	10 f0       	brcs	.+4      	; 0x165c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
    1658:	c0 e1       	ldi	r28, 0x10	; 16
    165a:	d7 e2       	ldi	r29, 0x27	; 39
    165c:	be 01       	movw	r22, r28
    165e:	76 95       	lsr	r23
    1660:	67 95       	ror	r22
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	60 58       	subi	r22, 0x80	; 128
    1668:	79 46       	sbci	r23, 0x69	; 105
    166a:	87 46       	sbci	r24, 0x67	; 103
    166c:	9f 4f       	sbci	r25, 0xFF	; 255
    166e:	4e 01       	movw	r8, r28
    1670:	a1 2c       	mov	r10, r1
    1672:	b1 2c       	mov	r11, r1
    1674:	a5 01       	movw	r20, r10
    1676:	94 01       	movw	r18, r8
    1678:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__udivmodsi4>
    167c:	59 01       	movw	r10, r18
    167e:	8e 2d       	mov	r24, r14
    1680:	81 60       	ori	r24, 0x01	; 1
    1682:	24 c0       	rjmp	.+72     	; 0x16cc <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
    1684:	c8 e2       	ldi	r28, 0x28	; 40
    1686:	fc 9e       	mul	r15, r28
    1688:	c0 2d       	mov	r28, r0
    168a:	11 24       	eor	r1, r1
    168c:	d0 e0       	ldi	r29, 0x00	; 0
    168e:	ca 15       	cp	r28, r10
    1690:	db 05       	cpc	r29, r11
    1692:	08 f4       	brcc	.+2      	; 0x1696 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
    1694:	e5 01       	movw	r28, r10
    1696:	be 01       	movw	r22, r28
    1698:	76 95       	lsr	r23
    169a:	67 95       	ror	r22
    169c:	9e 01       	movw	r18, r28
    169e:	40 e0       	ldi	r20, 0x00	; 0
    16a0:	50 e0       	ldi	r21, 0x00	; 0
    16a2:	8a e0       	ldi	r24, 0x0A	; 10
    16a4:	f8 12       	cpse	r15, r24
    16a6:	07 c0       	rjmp	.+14     	; 0x16b6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	60 5e       	subi	r22, 0xE0	; 224
    16ae:	73 44       	sbci	r23, 0x43	; 67
    16b0:	81 44       	sbci	r24, 0x41	; 65
    16b2:	9f 4f       	sbci	r25, 0xFF	; 255
    16b4:	06 c0       	rjmp	.+12     	; 0x16c2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	60 53       	subi	r22, 0x30	; 48
    16bc:	7d 4e       	sbci	r23, 0xED	; 237
    16be:	8c 4e       	sbci	r24, 0xEC	; 236
    16c0:	9f 4f       	sbci	r25, 0xFF	; 255
    16c2:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__udivmodsi4>
    16c6:	59 01       	movw	r10, r18
    16c8:	8e 2d       	mov	r24, r14
    16ca:	82 60       	ori	r24, 0x02	; 2
    16cc:	88 2e       	mov	r8, r24
    16ce:	2a e0       	ldi	r18, 0x0A	; 10
    16d0:	f2 12       	cpse	r15, r18
    16d2:	07 c0       	rjmp	.+14     	; 0x16e2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
    16d4:	ce 01       	movw	r24, r28
    16d6:	05 96       	adiw	r24, 0x05	; 5
    16d8:	6a e0       	ldi	r22, 0x0A	; 10
    16da:	70 e0       	ldi	r23, 0x00	; 0
    16dc:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <__udivmodhi4>
    16e0:	eb 01       	movw	r28, r22
    16e2:	c8 3e       	cpi	r28, 0xE8	; 232
    16e4:	43 e0       	ldi	r20, 0x03	; 3
    16e6:	d4 07       	cpc	r29, r20
    16e8:	59 f0       	breq	.+22     	; 0x1700 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    16ea:	98 01       	movw	r18, r16
    16ec:	de 01       	movw	r26, r28
    16ee:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <__umulhisi3>
    16f2:	28 ee       	ldi	r18, 0xE8	; 232
    16f4:	33 e0       	ldi	r19, 0x03	; 3
    16f6:	40 e0       	ldi	r20, 0x00	; 0
    16f8:	50 e0       	ldi	r21, 0x00	; 0
    16fa:	0e 94 34 17 	call	0x2e68	; 0x2e68 <__divmodsi4>
    16fe:	89 01       	movw	r16, r18
    1700:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1704:	80 92 81 00 	sts	0x0081, r8	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1708:	b0 92 89 00 	sts	0x0089, r11	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    170c:	a0 92 88 00 	sts	0x0088, r10	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1710:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1714:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1718:	4d 2d       	mov	r20, r13
    171a:	40 31       	cpi	r20, 0x10	; 16
    171c:	08 f0       	brcs	.+2      	; 0x1720 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    171e:	4f e0       	ldi	r20, 0x0F	; 15
    1720:	80 e1       	ldi	r24, 0x10	; 16
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	84 1b       	sub	r24, r20
    1726:	91 09       	sbc	r25, r1
    1728:	a9 01       	movw	r20, r18
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    172c:	56 95       	lsr	r21
    172e:	47 95       	ror	r20
    1730:	8a 95       	dec	r24
    1732:	e2 f7       	brpl	.-8      	; 0x172c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    1734:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1738:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    173c:	10 93 84 01 	sts	0x0184, r17	; 0x800184 <_ZL13buzzerTimeout+0x1>
    1740:	00 93 83 01 	sts	0x0183, r16	; 0x800183 <_ZL13buzzerTimeout>
    1744:	86 b3       	in	r24, 0x16	; 22
    1746:	8f ef       	ldi	r24, 0xFF	; 255
    1748:	86 bb       	out	0x16, r24	; 22
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1750:	df 91       	pop	r29
    1752:	cf 91       	pop	r28
    1754:	1f 91       	pop	r17
    1756:	0f 91       	pop	r16
    1758:	ff 90       	pop	r15
    175a:	ef 90       	pop	r14
    175c:	df 90       	pop	r13
    175e:	bf 90       	pop	r11
    1760:	af 90       	pop	r10
    1762:	9f 90       	pop	r9
    1764:	8f 90       	pop	r8
    1766:	08 95       	ret

00001768 <_ZN15OrangutanBuzzer8playNoteEhjh>:
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
    176c:	eb 01       	movw	r28, r22
    176e:	8f 3f       	cpi	r24, 0xFF	; 255
    1770:	11 f0       	breq	.+4      	; 0x1776 <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
    1772:	41 11       	cpse	r20, r1
    1774:	05 c0       	rjmp	.+10     	; 0x1780 <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
    1776:	40 e0       	ldi	r20, 0x00	; 0
    1778:	be 01       	movw	r22, r28
    177a:	88 ee       	ldi	r24, 0xE8	; 232
    177c:	93 e0       	ldi	r25, 0x03	; 3
    177e:	43 c0       	rjmp	.+134    	; 0x1806 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
    1780:	81 31       	cpi	r24, 0x11	; 17
    1782:	30 f0       	brcs	.+12     	; 0x1790 <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
    1784:	50 ef       	ldi	r21, 0xF0	; 240
    1786:	58 0f       	add	r21, r24
    1788:	50 36       	cpi	r21, 0x60	; 96
    178a:	18 f0       	brcs	.+6      	; 0x1792 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    178c:	5f e5       	ldi	r21, 0x5F	; 95
    178e:	01 c0       	rjmp	.+2      	; 0x1792 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1790:	50 e0       	ldi	r21, 0x00	; 0
    1792:	85 2f       	mov	r24, r21
    1794:	6c e0       	ldi	r22, 0x0C	; 12
    1796:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <__udivmodqi4>
    179a:	68 2f       	mov	r22, r24
    179c:	74 ef       	ldi	r23, 0xF4	; 244
    179e:	76 03       	mulsu	r23, r22
    17a0:	90 01       	movw	r18, r0
    17a2:	11 24       	eor	r1, r1
    17a4:	25 0f       	add	r18, r21
    17a6:	31 1d       	adc	r19, r1
    17a8:	2c 30       	cpi	r18, 0x0C	; 12
    17aa:	31 05       	cpc	r19, r1
    17ac:	40 f4       	brcc	.+16     	; 0x17be <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
    17ae:	f9 01       	movw	r30, r18
    17b0:	ee 0f       	add	r30, r30
    17b2:	ff 1f       	adc	r31, r31
    17b4:	ec 5c       	subi	r30, 0xCC	; 204
    17b6:	fe 4f       	sbci	r31, 0xFE	; 254
    17b8:	20 81       	ld	r18, Z
    17ba:	31 81       	ldd	r19, Z+1	; 0x01
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	87 30       	cpi	r24, 0x07	; 7
    17c4:	81 f0       	breq	.+32     	; 0x17e6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
    17c6:	08 2e       	mov	r0, r24
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
    17ca:	22 0f       	add	r18, r18
    17cc:	33 1f       	adc	r19, r19
    17ce:	0a 94       	dec	r0
    17d0:	e2 f7       	brpl	.-8      	; 0x17ca <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    17d2:	82 30       	cpi	r24, 0x02	; 2
    17d4:	28 f0       	brcs	.+10     	; 0x17e0 <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
    17d6:	c9 01       	movw	r24, r18
    17d8:	05 96       	adiw	r24, 0x05	; 5
    17da:	6a e0       	ldi	r22, 0x0A	; 10
    17dc:	70 e0       	ldi	r23, 0x00	; 0
    17de:	0c c0       	rjmp	.+24     	; 0x17f8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
    17e0:	c9 01       	movw	r24, r18
    17e2:	90 58       	subi	r25, 0x80	; 128
    17e4:	0c c0       	rjmp	.+24     	; 0x17fe <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
    17e6:	c9 01       	movw	r24, r18
    17e8:	36 e0       	ldi	r19, 0x06	; 6
    17ea:	88 0f       	add	r24, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	3a 95       	dec	r19
    17f0:	e1 f7       	brne	.-8      	; 0x17ea <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
    17f2:	02 96       	adiw	r24, 0x02	; 2
    17f4:	65 e0       	ldi	r22, 0x05	; 5
    17f6:	70 e0       	ldi	r23, 0x00	; 0
    17f8:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <__udivmodhi4>
    17fc:	cb 01       	movw	r24, r22
    17fe:	40 31       	cpi	r20, 0x10	; 16
    1800:	08 f0       	brcs	.+2      	; 0x1804 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    1802:	4f e0       	ldi	r20, 0x0F	; 15
    1804:	be 01       	movw	r22, r28
    1806:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	08 95       	ret

00001810 <_ZL8nextNotev>:
    1810:	a2 e0       	ldi	r26, 0x02	; 2
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	ee e0       	ldi	r30, 0x0E	; 14
    1816:	fc e0       	ldi	r31, 0x0C	; 12
    1818:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__prologue_saves__+0x4>
    181c:	90 90 0a 01 	lds	r9, 0x010A	; 0x80010a <_ZL6octave>
    1820:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <_ZL8staccato>
    1824:	88 23       	and	r24, r24
    1826:	21 f0       	breq	.+8      	; 0x1830 <_ZL8nextNotev+0x20>
    1828:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <_ZL22staccato_rest_duration>
    182c:	61 11       	cpse	r22, r1
    182e:	17 c0       	rjmp	.+46     	; 0x185e <_ZL8nextNotev+0x4e>
    1830:	77 24       	eor	r7, r7
    1832:	73 94       	inc	r7
    1834:	b0 ec       	ldi	r27, 0xC0	; 192
    1836:	ab 2e       	mov	r10, r27
    1838:	bd e5       	ldi	r27, 0x5D	; 93
    183a:	bb 2e       	mov	r11, r27
    183c:	1a e0       	ldi	r17, 0x0A	; 10
    183e:	61 2e       	mov	r6, r17
    1840:	04 e0       	ldi	r16, 0x04	; 4
    1842:	80 2e       	mov	r8, r16
    1844:	80 ed       	ldi	r24, 0xD0	; 208
    1846:	c8 2e       	mov	r12, r24
    1848:	87 e0       	ldi	r24, 0x07	; 7
    184a:	d8 2e       	mov	r13, r24
    184c:	94 e0       	ldi	r25, 0x04	; 4
    184e:	e9 2e       	mov	r14, r25
    1850:	f1 2c       	mov	r15, r1
    1852:	04 ef       	ldi	r16, 0xF4	; 244
    1854:	11 e0       	ldi	r17, 0x01	; 1
    1856:	2f e0       	ldi	r18, 0x0F	; 15
    1858:	42 2e       	mov	r4, r18
    185a:	51 2c       	mov	r5, r1
    185c:	15 c0       	rjmp	.+42     	; 0x1888 <_ZL8nextNotev+0x78>
    185e:	70 e0       	ldi	r23, 0x00	; 0
    1860:	40 e0       	ldi	r20, 0x00	; 0
    1862:	88 ee       	ldi	r24, 0xE8	; 232
    1864:	93 e0       	ldi	r25, 0x03	; 3
    1866:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    186a:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <_ZL22staccato_rest_duration>
    186e:	17 c1       	rjmp	.+558    	; 0x1a9e <_ZL8nextNotev+0x28e>
    1870:	86 36       	cpi	r24, 0x66	; 102
    1872:	d4 f5       	brge	.+116    	; 0x18e8 <_ZL8nextNotev+0xd8>
    1874:	81 36       	cpi	r24, 0x61	; 97
    1876:	09 f4       	brne	.+2      	; 0x187a <_ZL8nextNotev+0x6a>
    1878:	a9 c0       	rjmp	.+338    	; 0x19cc <_ZL8nextNotev+0x1bc>
    187a:	7c f5       	brge	.+94     	; 0x18da <_ZL8nextNotev+0xca>
    187c:	8c 33       	cpi	r24, 0x3C	; 60
    187e:	09 f4       	brne	.+2      	; 0x1882 <_ZL8nextNotev+0x72>
    1880:	60 c0       	rjmp	.+192    	; 0x1942 <_ZL8nextNotev+0x132>
    1882:	8e 33       	cpi	r24, 0x3E	; 62
    1884:	81 f4       	brne	.+32     	; 0x18a6 <_ZL8nextNotev+0x96>
    1886:	93 94       	inc	r9
    1888:	0e 94 9c 0a 	call	0x1538	; 0x1538 <_ZL16currentCharacterv>
    188c:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <__data_end>
    1890:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <__data_end+0x1>
    1894:	2f 5f       	subi	r18, 0xFF	; 255
    1896:	3f 4f       	sbci	r19, 0xFF	; 255
    1898:	30 93 7d 01 	sts	0x017D, r19	; 0x80017d <__data_end+0x1>
    189c:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <__data_end>
    18a0:	85 36       	cpi	r24, 0x65	; 101
    18a2:	31 f7       	brne	.-52     	; 0x1870 <_ZL8nextNotev+0x60>
    18a4:	52 c0       	rjmp	.+164    	; 0x194a <_ZL8nextNotev+0x13a>
    18a6:	81 32       	cpi	r24, 0x21	; 33
    18a8:	09 f0       	breq	.+2      	; 0x18ac <_ZL8nextNotev+0x9c>
    18aa:	8b c0       	rjmp	.+278    	; 0x19c2 <_ZL8nextNotev+0x1b2>
    18ac:	80 92 0a 01 	sts	0x010A, r8	; 0x80010a <_ZL6octave>
    18b0:	d0 92 09 01 	sts	0x0109, r13	; 0x800109 <_ZL19whole_note_duration+0x1>
    18b4:	c0 92 08 01 	sts	0x0108, r12	; 0x800108 <_ZL19whole_note_duration>
    18b8:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <_ZL9note_type+0x1>
    18bc:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <_ZL9note_type>
    18c0:	10 93 05 01 	sts	0x0105, r17	; 0x800105 <_ZL8duration+0x1>
    18c4:	00 93 04 01 	sts	0x0104, r16	; 0x800104 <_ZL8duration>
    18c8:	50 92 03 01 	sts	0x0103, r5	; 0x800103 <_ZL6volume+0x1>
    18cc:	40 92 02 01 	sts	0x0102, r4	; 0x800102 <_ZL6volume>
    18d0:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <_ZL8staccato>
    18d4:	a4 e0       	ldi	r26, 0x04	; 4
    18d6:	9a 2e       	mov	r9, r26
    18d8:	d7 cf       	rjmp	.-82     	; 0x1888 <_ZL8nextNotev+0x78>
    18da:	83 36       	cpi	r24, 0x63	; 99
    18dc:	a1 f1       	breq	.+104    	; 0x1946 <_ZL8nextNotev+0x136>
    18de:	0c f4       	brge	.+2      	; 0x18e2 <_ZL8nextNotev+0xd2>
    18e0:	78 c0       	rjmp	.+240    	; 0x19d2 <_ZL8nextNotev+0x1c2>
    18e2:	10 e0       	ldi	r17, 0x00	; 0
    18e4:	82 e0       	ldi	r24, 0x02	; 2
    18e6:	77 c0       	rjmp	.+238    	; 0x19d6 <_ZL8nextNotev+0x1c6>
    18e8:	8d 36       	cpi	r24, 0x6D	; 109
    18ea:	c1 f1       	breq	.+112    	; 0x195c <_ZL8nextNotev+0x14c>
    18ec:	94 f4       	brge	.+36     	; 0x1912 <_ZL8nextNotev+0x102>
    18ee:	87 36       	cpi	r24, 0x67	; 103
    18f0:	91 f1       	breq	.+100    	; 0x1956 <_ZL8nextNotev+0x146>
    18f2:	74 f1       	brlt	.+92     	; 0x1950 <_ZL8nextNotev+0x140>
    18f4:	8c 36       	cpi	r24, 0x6C	; 108
    18f6:	09 f0       	breq	.+2      	; 0x18fa <_ZL8nextNotev+0xea>
    18f8:	64 c0       	rjmp	.+200    	; 0x19c2 <_ZL8nextNotev+0x1b2>
    18fa:	0e 94 b9 0a 	call	0x1572	; 0x1572 <_ZL9getNumberv>
    18fe:	bc 01       	movw	r22, r24
    1900:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL9note_type+0x1>
    1904:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL9note_type>
    1908:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    190c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    1910:	51 c0       	rjmp	.+162    	; 0x19b4 <_ZL8nextNotev+0x1a4>
    1912:	82 37       	cpi	r24, 0x72	; 114
    1914:	c9 f1       	breq	.+114    	; 0x1988 <_ZL8nextNotev+0x178>
    1916:	4c f4       	brge	.+18     	; 0x192a <_ZL8nextNotev+0x11a>
    1918:	8f 36       	cpi	r24, 0x6F	; 111
    191a:	09 f0       	breq	.+2      	; 0x191e <_ZL8nextNotev+0x10e>
    191c:	52 c0       	rjmp	.+164    	; 0x19c2 <_ZL8nextNotev+0x1b2>
    191e:	0e 94 b9 0a 	call	0x1572	; 0x1572 <_ZL9getNumberv>
    1922:	98 2e       	mov	r9, r24
    1924:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZL6octave>
    1928:	af cf       	rjmp	.-162    	; 0x1888 <_ZL8nextNotev+0x78>
    192a:	84 37       	cpi	r24, 0x74	; 116
    192c:	81 f1       	breq	.+96     	; 0x198e <_ZL8nextNotev+0x17e>
    192e:	86 37       	cpi	r24, 0x76	; 118
    1930:	09 f0       	breq	.+2      	; 0x1934 <_ZL8nextNotev+0x124>
    1932:	47 c0       	rjmp	.+142    	; 0x19c2 <_ZL8nextNotev+0x1b2>
    1934:	0e 94 b9 0a 	call	0x1572	; 0x1572 <_ZL9getNumberv>
    1938:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_ZL6volume+0x1>
    193c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_ZL6volume>
    1940:	a3 cf       	rjmp	.-186    	; 0x1888 <_ZL8nextNotev+0x78>
    1942:	9a 94       	dec	r9
    1944:	a1 cf       	rjmp	.-190    	; 0x1888 <_ZL8nextNotev+0x78>
    1946:	10 e0       	ldi	r17, 0x00	; 0
    1948:	20 c0       	rjmp	.+64     	; 0x198a <_ZL8nextNotev+0x17a>
    194a:	10 e0       	ldi	r17, 0x00	; 0
    194c:	84 e0       	ldi	r24, 0x04	; 4
    194e:	43 c0       	rjmp	.+134    	; 0x19d6 <_ZL8nextNotev+0x1c6>
    1950:	10 e0       	ldi	r17, 0x00	; 0
    1952:	85 e0       	ldi	r24, 0x05	; 5
    1954:	40 c0       	rjmp	.+128    	; 0x19d6 <_ZL8nextNotev+0x1c6>
    1956:	10 e0       	ldi	r17, 0x00	; 0
    1958:	87 e0       	ldi	r24, 0x07	; 7
    195a:	3d c0       	rjmp	.+122    	; 0x19d6 <_ZL8nextNotev+0x1c6>
    195c:	0e 94 9c 0a 	call	0x1538	; 0x1538 <_ZL16currentCharacterv>
    1960:	8c 36       	cpi	r24, 0x6C	; 108
    1962:	19 f4       	brne	.+6      	; 0x196a <_ZL8nextNotev+0x15a>
    1964:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <_ZL8staccato>
    1968:	04 c0       	rjmp	.+8      	; 0x1972 <_ZL8nextNotev+0x162>
    196a:	70 92 80 01 	sts	0x0180, r7	; 0x800180 <_ZL8staccato>
    196e:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <_ZL22staccato_rest_duration>
    1972:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <__data_end>
    1976:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <__data_end+0x1>
    197a:	2f 5f       	subi	r18, 0xFF	; 255
    197c:	3f 4f       	sbci	r19, 0xFF	; 255
    197e:	30 93 7d 01 	sts	0x017D, r19	; 0x80017d <__data_end+0x1>
    1982:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <__data_end>
    1986:	80 cf       	rjmp	.-256    	; 0x1888 <_ZL8nextNotev+0x78>
    1988:	11 e0       	ldi	r17, 0x01	; 1
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	24 c0       	rjmp	.+72     	; 0x19d6 <_ZL8nextNotev+0x1c6>
    198e:	0e 94 b9 0a 	call	0x1572	; 0x1572 <_ZL9getNumberv>
    1992:	bc 01       	movw	r22, r24
    1994:	c5 01       	movw	r24, r10
    1996:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <__udivmodhi4>
    199a:	66 9e       	mul	r6, r22
    199c:	c0 01       	movw	r24, r0
    199e:	67 9e       	mul	r6, r23
    19a0:	90 0d       	add	r25, r0
    19a2:	11 24       	eor	r1, r1
    19a4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZL19whole_note_duration+0x1>
    19a8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL19whole_note_duration>
    19ac:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <_ZL9note_type>
    19b0:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <_ZL9note_type+0x1>
    19b4:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <__udivmodhi4>
    19b8:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_ZL8duration+0x1>
    19bc:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_ZL8duration>
    19c0:	63 cf       	rjmp	.-314    	; 0x1888 <_ZL8nextNotev+0x78>
    19c2:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <__data_end+0x1>
    19c6:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <__data_end>
    19ca:	69 c0       	rjmp	.+210    	; 0x1a9e <_ZL8nextNotev+0x28e>
    19cc:	10 e0       	ldi	r17, 0x00	; 0
    19ce:	89 e0       	ldi	r24, 0x09	; 9
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <_ZL8nextNotev+0x1c6>
    19d2:	10 e0       	ldi	r17, 0x00	; 0
    19d4:	8b e0       	ldi	r24, 0x0B	; 11
    19d6:	08 2f       	mov	r16, r24
    19d8:	9c e0       	ldi	r25, 0x0C	; 12
    19da:	99 9e       	mul	r9, r25
    19dc:	00 0d       	add	r16, r0
    19de:	11 24       	eor	r1, r1
    19e0:	0e 94 9c 0a 	call	0x1538	; 0x1538 <_ZL16currentCharacterv>
    19e4:	98 2f       	mov	r25, r24
    19e6:	97 7f       	andi	r25, 0xF7	; 247
    19e8:	93 32       	cpi	r25, 0x23	; 35
    19ea:	61 f4       	brne	.+24     	; 0x1a04 <_ZL8nextNotev+0x1f4>
    19ec:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <__data_end>
    19f0:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <__data_end+0x1>
    19f4:	2f 5f       	subi	r18, 0xFF	; 255
    19f6:	3f 4f       	sbci	r19, 0xFF	; 255
    19f8:	30 93 7d 01 	sts	0x017D, r19	; 0x80017d <__data_end+0x1>
    19fc:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <__data_end>
    1a00:	0f 5f       	subi	r16, 0xFF	; 255
    1a02:	ee cf       	rjmp	.-36     	; 0x19e0 <_ZL8nextNotev+0x1d0>
    1a04:	8d 32       	cpi	r24, 0x2D	; 45
    1a06:	71 f4       	brne	.+28     	; 0x1a24 <_ZL8nextNotev+0x214>
    1a08:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <__data_end>
    1a0c:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <__data_end+0x1>
    1a10:	2f 5f       	subi	r18, 0xFF	; 255
    1a12:	3f 4f       	sbci	r19, 0xFF	; 255
    1a14:	30 93 7d 01 	sts	0x017D, r19	; 0x80017d <__data_end+0x1>
    1a18:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <__data_end>
    1a1c:	01 50       	subi	r16, 0x01	; 1
    1a1e:	0e 94 9c 0a 	call	0x1538	; 0x1538 <_ZL16currentCharacterv>
    1a22:	f0 cf       	rjmp	.-32     	; 0x1a04 <_ZL8nextNotev+0x1f4>
    1a24:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_ZL8duration>
    1a28:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_ZL8duration+0x1>
    1a2c:	81 53       	subi	r24, 0x31	; 49
    1a2e:	88 30       	cpi	r24, 0x08	; 8
    1a30:	50 f4       	brcc	.+20     	; 0x1a46 <_ZL8nextNotev+0x236>
    1a32:	e0 90 08 01 	lds	r14, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    1a36:	f0 90 09 01 	lds	r15, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    1a3a:	0e 94 b9 0a 	call	0x1572	; 0x1572 <_ZL9getNumberv>
    1a3e:	bc 01       	movw	r22, r24
    1a40:	c7 01       	movw	r24, r14
    1a42:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <__udivmodhi4>
    1a46:	7b 01       	movw	r14, r22
    1a48:	f6 94       	lsr	r15
    1a4a:	e7 94       	ror	r14
    1a4c:	69 83       	std	Y+1, r22	; 0x01
    1a4e:	7a 83       	std	Y+2, r23	; 0x02
    1a50:	0e 94 9c 0a 	call	0x1538	; 0x1538 <_ZL16currentCharacterv>
    1a54:	69 81       	ldd	r22, Y+1	; 0x01
    1a56:	7a 81       	ldd	r23, Y+2	; 0x02
    1a58:	8e 32       	cpi	r24, 0x2E	; 46
    1a5a:	69 f4       	brne	.+26     	; 0x1a76 <_ZL8nextNotev+0x266>
    1a5c:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <__data_end>
    1a60:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <__data_end+0x1>
    1a64:	2f 5f       	subi	r18, 0xFF	; 255
    1a66:	3f 4f       	sbci	r19, 0xFF	; 255
    1a68:	30 93 7d 01 	sts	0x017D, r19	; 0x80017d <__data_end+0x1>
    1a6c:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <__data_end>
    1a70:	6e 0d       	add	r22, r14
    1a72:	7f 1d       	adc	r23, r15
    1a74:	e9 cf       	rjmp	.-46     	; 0x1a48 <_ZL8nextNotev+0x238>
    1a76:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <_ZL8staccato>
    1a7a:	88 23       	and	r24, r24
    1a7c:	39 f0       	breq	.+14     	; 0x1a8c <_ZL8nextNotev+0x27c>
    1a7e:	9b 01       	movw	r18, r22
    1a80:	36 95       	lsr	r19
    1a82:	27 95       	ror	r18
    1a84:	20 93 7f 01 	sts	0x017F, r18	; 0x80017f <_ZL22staccato_rest_duration>
    1a88:	62 1b       	sub	r22, r18
    1a8a:	71 09       	sbc	r23, r1
    1a8c:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <_ZL6volume>
    1a90:	11 23       	and	r17, r17
    1a92:	11 f0       	breq	.+4      	; 0x1a98 <_ZL8nextNotev+0x288>
    1a94:	8f ef       	ldi	r24, 0xFF	; 255
    1a96:	01 c0       	rjmp	.+2      	; 0x1a9a <_ZL8nextNotev+0x28a>
    1a98:	80 2f       	mov	r24, r16
    1a9a:	0e 94 b4 0b 	call	0x1768	; 0x1768 <_ZN15OrangutanBuzzer8playNoteEhjh>
    1a9e:	22 96       	adiw	r28, 0x02	; 2
    1aa0:	e0 e1       	ldi	r30, 0x10	; 16
    1aa2:	0c 94 99 17 	jmp	0x2f32	; 0x2f32 <__epilogue_restores__+0x4>

00001aa6 <__vector_13>:
    1aa6:	1f 92       	push	r1
    1aa8:	0f 92       	push	r0
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	0f 92       	push	r0
    1aae:	11 24       	eor	r1, r1
    1ab0:	2f 93       	push	r18
    1ab2:	3f 93       	push	r19
    1ab4:	4f 93       	push	r20
    1ab6:	5f 93       	push	r21
    1ab8:	6f 93       	push	r22
    1aba:	7f 93       	push	r23
    1abc:	8f 93       	push	r24
    1abe:	9f 93       	push	r25
    1ac0:	af 93       	push	r26
    1ac2:	bf 93       	push	r27
    1ac4:	ef 93       	push	r30
    1ac6:	ff 93       	push	r31
    1ac8:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <_ZL13buzzerTimeout>
    1acc:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <_ZL13buzzerTimeout+0x1>
    1ad0:	9c 01       	movw	r18, r24
    1ad2:	21 50       	subi	r18, 0x01	; 1
    1ad4:	31 09       	sbc	r19, r1
    1ad6:	30 93 84 01 	sts	0x0184, r19	; 0x800184 <_ZL13buzzerTimeout+0x1>
    1ada:	20 93 83 01 	sts	0x0183, r18	; 0x800183 <_ZL13buzzerTimeout>
    1ade:	89 2b       	or	r24, r25
    1ae0:	11 f5       	brne	.+68     	; 0x1b26 <__vector_13+0x80>
    1ae2:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1ae6:	78 94       	sei
    1ae8:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1aec:	88 7f       	andi	r24, 0xF8	; 248
    1aee:	81 60       	ori	r24, 0x01	; 1
    1af0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1af4:	80 e1       	ldi	r24, 0x10	; 16
    1af6:	97 e2       	ldi	r25, 0x27	; 39
    1af8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1afc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1b00:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1b04:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <buzzerFinished>
    1b0e:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
    1b12:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <__data_end+0x1>
    1b16:	89 2b       	or	r24, r25
    1b18:	31 f0       	breq	.+12     	; 0x1b26 <__vector_13+0x80>
    1b1a:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <_ZL17play_mode_setting>
    1b1e:	81 11       	cpse	r24, r1
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <__vector_13+0x80>
    1b22:	0e 94 08 0c 	call	0x1810	; 0x1810 <_ZL8nextNotev>
    1b26:	ff 91       	pop	r31
    1b28:	ef 91       	pop	r30
    1b2a:	bf 91       	pop	r27
    1b2c:	af 91       	pop	r26
    1b2e:	9f 91       	pop	r25
    1b30:	8f 91       	pop	r24
    1b32:	7f 91       	pop	r23
    1b34:	6f 91       	pop	r22
    1b36:	5f 91       	pop	r21
    1b38:	4f 91       	pop	r20
    1b3a:	3f 91       	pop	r19
    1b3c:	2f 91       	pop	r18
    1b3e:	0f 90       	pop	r0
    1b40:	0f be       	out	0x3f, r0	; 63
    1b42:	0f 90       	pop	r0
    1b44:	1f 90       	pop	r1
    1b46:	18 95       	reti

00001b48 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    1b48:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1b4c:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <__data_end+0x1>
    1b50:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <_ZL17use_program_space>
    1b5a:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <_ZL22staccato_rest_duration>
    1b5e:	0e 94 08 0c 	call	0x1810	; 0x1810 <_ZL8nextNotev>
    1b62:	08 95       	ret

00001b64 <play_from_program_space>:
    1b64:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    1b68:	08 95       	ret

00001b6a <delay_us.constprop.0>:
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	6f 93       	push	r22
    1b70:	64 e0       	ldi	r22, 0x04	; 4
    1b72:	6a 95       	dec	r22
    1b74:	f1 f7       	brne	.-4      	; 0x1b72 <delay_us.constprop.0+0x8>
    1b76:	6f 91       	pop	r22
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	c9 f7       	brne	.-14     	; 0x1b6e <delay_us.constprop.0+0x4>
    1b7c:	08 95       	ret

00001b7e <_ZN12OrangutanLCD8busyWaitEv>:
    1b7e:	0f 93       	push	r16
    1b80:	1f 93       	push	r17
    1b82:	cf 93       	push	r28
    1b84:	df 93       	push	r29
    1b86:	1a b1       	in	r17, 0x0a	; 10
    1b88:	57 98       	cbi	0x0a, 7	; 10
    1b8a:	5a 98       	cbi	0x0b, 2	; 11
    1b8c:	28 9a       	sbi	0x05, 0	; 5
    1b8e:	c0 e0       	ldi	r28, 0x00	; 0
    1b90:	d0 e0       	ldi	r29, 0x00	; 0
    1b92:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <delay_us.constprop.0>
    1b96:	5c 9a       	sbi	0x0b, 4	; 11
    1b98:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <delay_us.constprop.0>
    1b9c:	09 b1       	in	r16, 0x09	; 9
    1b9e:	5c 98       	cbi	0x0b, 4	; 11
    1ba0:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <delay_us.constprop.0>
    1ba4:	5c 9a       	sbi	0x0b, 4	; 11
    1ba6:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <delay_us.constprop.0>
    1baa:	5c 98       	cbi	0x0b, 4	; 11
    1bac:	24 96       	adiw	r28, 0x04	; 4
    1bae:	07 ff       	sbrs	r16, 7
    1bb0:	10 c0       	rjmp	.+32     	; 0x1bd2 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    1bb2:	ae 01       	movw	r20, r28
    1bb4:	60 e0       	ldi	r22, 0x00	; 0
    1bb6:	70 e0       	ldi	r23, 0x00	; 0
    1bb8:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <lcdTimeout>
    1bbc:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <lcdTimeout+0x1>
    1bc0:	a0 91 87 01 	lds	r26, 0x0187	; 0x800187 <lcdTimeout+0x2>
    1bc4:	b0 91 88 01 	lds	r27, 0x0188	; 0x800188 <lcdTimeout+0x3>
    1bc8:	48 17       	cp	r20, r24
    1bca:	59 07       	cpc	r21, r25
    1bcc:	6a 07       	cpc	r22, r26
    1bce:	7b 07       	cpc	r23, r27
    1bd0:	00 f3       	brcs	.-64     	; 0x1b92 <_ZN12OrangutanLCD8busyWaitEv+0x14>
    1bd2:	1a b9       	out	0x0a, r17	; 10
    1bd4:	df 91       	pop	r29
    1bd6:	cf 91       	pop	r28
    1bd8:	1f 91       	pop	r17
    1bda:	0f 91       	pop	r16
    1bdc:	08 95       	ret

00001bde <_ZN12OrangutanLCD8sendDataEh>:
    1bde:	95 b1       	in	r25, 0x05	; 5
    1be0:	28 2f       	mov	r18, r24
    1be2:	21 70       	andi	r18, 0x01	; 1
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	22 0f       	add	r18, r18
    1be8:	33 1f       	adc	r19, r19
    1bea:	48 2f       	mov	r20, r24
    1bec:	46 70       	andi	r20, 0x06	; 6
    1bee:	68 e0       	ldi	r22, 0x08	; 8
    1bf0:	46 9f       	mul	r20, r22
    1bf2:	a0 01       	movw	r20, r0
    1bf4:	11 24       	eor	r1, r1
    1bf6:	24 2b       	or	r18, r20
    1bf8:	9d 7c       	andi	r25, 0xCD	; 205
    1bfa:	29 2b       	or	r18, r25
    1bfc:	25 b9       	out	0x05, r18	; 5
    1bfe:	9b b1       	in	r25, 0x0b	; 11
    1c00:	88 70       	andi	r24, 0x08	; 8
    1c02:	82 95       	swap	r24
    1c04:	80 7f       	andi	r24, 0xF0	; 240
    1c06:	9f 77       	andi	r25, 0x7F	; 127
    1c08:	89 2b       	or	r24, r25
    1c0a:	8b b9       	out	0x0b, r24	; 11
    1c0c:	5c 9a       	sbi	0x0b, 4	; 11
    1c0e:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <delay_us.constprop.0>
    1c12:	5c 98       	cbi	0x0b, 4	; 11
    1c14:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <delay_us.constprop.0>
    1c18:	08 95       	ret

00001c1a <_ZN12OrangutanLCD4sendEhhh>:
    1c1a:	a0 e0       	ldi	r26, 0x00	; 0
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e3 e1       	ldi	r30, 0x13	; 19
    1c20:	fe e0       	ldi	r31, 0x0E	; 14
    1c22:	0c 94 86 17 	jmp	0x2f0c	; 0x2f0c <__prologue_saves__+0x16>
    1c26:	c8 2f       	mov	r28, r24
    1c28:	d6 2e       	mov	r13, r22
    1c2a:	e4 2e       	mov	r14, r20
    1c2c:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <_ZZN12OrangutanLCD4initEvE11initialized>
    1c30:	81 11       	cpse	r24, r1
    1c32:	05 c0       	rjmp	.+10     	; 0x1c3e <_ZN12OrangutanLCD4sendEhhh+0x24>
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <_ZZN12OrangutanLCD4initEvE11initialized>
    1c3a:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <_ZN12OrangutanLCD5init2Ev>
    1c3e:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <_ZN12OrangutanLCD8busyWaitEv>
    1c42:	14 b1       	in	r17, 0x04	; 4
    1c44:	d5 b1       	in	r29, 0x05	; 5
    1c46:	fa b0       	in	r15, 0x0a	; 10
    1c48:	0b b1       	in	r16, 0x0b	; 11
    1c4a:	28 98       	cbi	0x05, 0	; 5
    1c4c:	dd 20       	and	r13, r13
    1c4e:	11 f0       	breq	.+4      	; 0x1c54 <_ZN12OrangutanLCD4sendEhhh+0x3a>
    1c50:	5a 9a       	sbi	0x0b, 2	; 11
    1c52:	01 c0       	rjmp	.+2      	; 0x1c56 <_ZN12OrangutanLCD4sendEhhh+0x3c>
    1c54:	5a 98       	cbi	0x0b, 2	; 11
    1c56:	94 b1       	in	r25, 0x04	; 4
    1c58:	92 63       	ori	r25, 0x32	; 50
    1c5a:	94 b9       	out	0x04, r25	; 4
    1c5c:	57 9a       	sbi	0x0a, 7	; 10
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	e8 16       	cp	r14, r24
    1c62:	29 f0       	breq	.+10     	; 0x1c6e <_ZN12OrangutanLCD4sendEhhh+0x54>
    1c64:	8c 2f       	mov	r24, r28
    1c66:	82 95       	swap	r24
    1c68:	8f 70       	andi	r24, 0x0F	; 15
    1c6a:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <_ZN12OrangutanLCD8sendDataEh>
    1c6e:	8c 2f       	mov	r24, r28
    1c70:	8f 70       	andi	r24, 0x0F	; 15
    1c72:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <_ZN12OrangutanLCD8sendDataEh>
    1c76:	fa b8       	out	0x0a, r15	; 10
    1c78:	0b b9       	out	0x0b, r16	; 11
    1c7a:	14 b9       	out	0x04, r17	; 4
    1c7c:	d5 b9       	out	0x05, r29	; 5
    1c7e:	cd b7       	in	r28, 0x3d	; 61
    1c80:	de b7       	in	r29, 0x3e	; 62
    1c82:	e7 e0       	ldi	r30, 0x07	; 7
    1c84:	0c 94 a2 17 	jmp	0x2f44	; 0x2f44 <__epilogue_restores__+0x16>

00001c88 <_ZN12OrangutanLCD8send_cmdEh>:
    1c88:	42 e0       	ldi	r20, 0x02	; 2
    1c8a:	60 e0       	ldi	r22, 0x00	; 0
    1c8c:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <_ZN12OrangutanLCD4sendEhhh>
    1c90:	08 95       	ret

00001c92 <_ZN12OrangutanLCD9send_dataEh>:
    1c92:	42 e0       	ldi	r20, 0x02	; 2
    1c94:	61 e0       	ldi	r22, 0x01	; 1
    1c96:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <_ZN12OrangutanLCD4sendEhhh>
    1c9a:	08 95       	ret

00001c9c <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    1c9c:	41 e0       	ldi	r20, 0x01	; 1
    1c9e:	60 e0       	ldi	r22, 0x00	; 0
    1ca0:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <_ZN12OrangutanLCD4sendEhhh>
    1ca4:	08 95       	ret

00001ca6 <_ZN12OrangutanLCD5init2Ev>:
    1ca6:	80 e1       	ldi	r24, 0x10	; 16
    1ca8:	97 e2       	ldi	r25, 0x27	; 39
    1caa:	a0 e0       	ldi	r26, 0x00	; 0
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <lcdTimeout>
    1cb2:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <lcdTimeout+0x1>
    1cb6:	a0 93 87 01 	sts	0x0187, r26	; 0x800187 <lcdTimeout+0x2>
    1cba:	b0 93 88 01 	sts	0x0188, r27	; 0x800188 <lcdTimeout+0x3>
    1cbe:	52 9a       	sbi	0x0a, 2	; 10
    1cc0:	20 9a       	sbi	0x04, 0	; 4
    1cc2:	54 9a       	sbi	0x0a, 4	; 10
    1cc4:	8e e1       	ldi	r24, 0x1E	; 30
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	0e 94 39 11 	call	0x2272	; 0x2272 <delay_ms>
    1ccc:	83 e0       	ldi	r24, 0x03	; 3
    1cce:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1cd2:	86 e0       	ldi	r24, 0x06	; 6
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	0e 94 39 11 	call	0x2272	; 0x2272 <delay_ms>
    1cda:	83 e0       	ldi	r24, 0x03	; 3
    1cdc:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1ce0:	82 e0       	ldi	r24, 0x02	; 2
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	0e 94 39 11 	call	0x2272	; 0x2272 <delay_ms>
    1ce8:	83 e0       	ldi	r24, 0x03	; 3
    1cea:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1cee:	82 e0       	ldi	r24, 0x02	; 2
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	0e 94 39 11 	call	0x2272	; 0x2272 <delay_ms>
    1cf6:	82 e0       	ldi	r24, 0x02	; 2
    1cf8:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1cfc:	82 e0       	ldi	r24, 0x02	; 2
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	0e 94 39 11 	call	0x2272	; 0x2272 <delay_ms>
    1d04:	88 e2       	ldi	r24, 0x28	; 40
    1d06:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <_ZN12OrangutanLCD8send_cmdEh>
    1d0a:	88 e0       	ldi	r24, 0x08	; 8
    1d0c:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <_ZN12OrangutanLCD8send_cmdEh>
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <_ZN12OrangutanLCD8send_cmdEh>
    1d16:	86 e0       	ldi	r24, 0x06	; 6
    1d18:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <_ZN12OrangutanLCD8send_cmdEh>
    1d1c:	8c e0       	ldi	r24, 0x0C	; 12
    1d1e:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <_ZN12OrangutanLCD8send_cmdEh>
    1d22:	08 95       	ret

00001d24 <_ZN12OrangutanLCD5clearEv>:
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <_ZN12OrangutanLCD8send_cmdEh>
    1d2a:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <printf_chars>
    1d2e:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <printf_chars+0x1>
    1d32:	89 2b       	or	r24, r25
    1d34:	f9 f0       	breq	.+62     	; 0x1d74 <_ZN12OrangutanLCD5clearEv+0x50>
    1d36:	60 e0       	ldi	r22, 0x00	; 0
    1d38:	a0 e2       	ldi	r26, 0x20	; 32
    1d3a:	26 2f       	mov	r18, r22
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <numLCDCols>
    1d42:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <numLCDRows>
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	01 97       	sbiw	r24, 0x01	; 1
    1d4a:	78 9f       	mul	r23, r24
    1d4c:	a0 01       	movw	r20, r0
    1d4e:	79 9f       	mul	r23, r25
    1d50:	50 0d       	add	r21, r0
    1d52:	11 24       	eor	r1, r1
    1d54:	24 17       	cp	r18, r20
    1d56:	35 07       	cpc	r19, r21
    1d58:	4c f4       	brge	.+18     	; 0x1d6c <_ZN12OrangutanLCD5clearEv+0x48>
    1d5a:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <printf_chars>
    1d5e:	f0 91 8c 01 	lds	r31, 0x018C	; 0x80018c <printf_chars+0x1>
    1d62:	e2 0f       	add	r30, r18
    1d64:	f3 1f       	adc	r31, r19
    1d66:	a0 83       	st	Z, r26
    1d68:	6f 5f       	subi	r22, 0xFF	; 255
    1d6a:	e7 cf       	rjmp	.-50     	; 0x1d3a <_ZN12OrangutanLCD5clearEv+0x16>
    1d6c:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <col>
    1d70:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <row>
    1d74:	08 95       	ret

00001d76 <clear>:
    1d76:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <_ZN12OrangutanLCD5clearEv>
    1d7a:	08 95       	ret

00001d7c <_ZN12OrangutanLCD5printEPKc>:
    1d7c:	cf 93       	push	r28
    1d7e:	df 93       	push	r29
    1d80:	ec 01       	movw	r28, r24
    1d82:	89 91       	ld	r24, Y+
    1d84:	88 23       	and	r24, r24
    1d86:	19 f0       	breq	.+6      	; 0x1d8e <_ZN12OrangutanLCD5printEPKc+0x12>
    1d88:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <_ZN12OrangutanLCD9send_dataEh>
    1d8c:	fa cf       	rjmp	.-12     	; 0x1d82 <_ZN12OrangutanLCD5printEPKc+0x6>
    1d8e:	df 91       	pop	r29
    1d90:	cf 91       	pop	r28
    1d92:	08 95       	ret

00001d94 <print>:
    1d94:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <_ZN12OrangutanLCD5printEPKc>
    1d98:	08 95       	ret

00001d9a <_ZN12OrangutanLCD5printEm>:
    1d9a:	aa e0       	ldi	r26, 0x0A	; 10
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	e3 ed       	ldi	r30, 0xD3	; 211
    1da0:	fe e0       	ldi	r31, 0x0E	; 14
    1da2:	0c 94 85 17 	jmp	0x2f0a	; 0x2f0a <__prologue_saves__+0x14>
    1da6:	1a e0       	ldi	r17, 0x0A	; 10
    1da8:	5a e0       	ldi	r21, 0x0A	; 10
    1daa:	c5 2e       	mov	r12, r21
    1dac:	d1 2c       	mov	r13, r1
    1dae:	e1 2c       	mov	r14, r1
    1db0:	f1 2c       	mov	r15, r1
    1db2:	06 2f       	mov	r16, r22
    1db4:	a7 01       	movw	r20, r14
    1db6:	96 01       	movw	r18, r12
    1db8:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__udivmodsi4>
    1dbc:	ca 01       	movw	r24, r20
    1dbe:	b9 01       	movw	r22, r18
    1dc0:	11 50       	subi	r17, 0x01	; 1
    1dc2:	e1 e0       	ldi	r30, 0x01	; 1
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	ec 0f       	add	r30, r28
    1dc8:	fd 1f       	adc	r31, r29
    1dca:	e1 0f       	add	r30, r17
    1dcc:	f1 1d       	adc	r31, r1
    1dce:	00 5d       	subi	r16, 0xD0	; 208
    1dd0:	2a e0       	ldi	r18, 0x0A	; 10
    1dd2:	62 9f       	mul	r22, r18
    1dd4:	00 19       	sub	r16, r0
    1dd6:	11 24       	eor	r1, r1
    1dd8:	00 83       	st	Z, r16
    1dda:	61 15       	cp	r22, r1
    1ddc:	71 05       	cpc	r23, r1
    1dde:	81 05       	cpc	r24, r1
    1de0:	91 05       	cpc	r25, r1
    1de2:	39 f7       	brne	.-50     	; 0x1db2 <_ZN12OrangutanLCD5printEm+0x18>
    1de4:	1a 30       	cpi	r17, 0x0A	; 10
    1de6:	58 f4       	brcc	.+22     	; 0x1dfe <_ZN12OrangutanLCD5printEm+0x64>
    1de8:	e1 e0       	ldi	r30, 0x01	; 1
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	ec 0f       	add	r30, r28
    1dee:	fd 1f       	adc	r31, r29
    1df0:	e1 0f       	add	r30, r17
    1df2:	f1 1d       	adc	r31, r1
    1df4:	80 81       	ld	r24, Z
    1df6:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <_ZN12OrangutanLCD9send_dataEh>
    1dfa:	1f 5f       	subi	r17, 0xFF	; 255
    1dfc:	f3 cf       	rjmp	.-26     	; 0x1de4 <_ZN12OrangutanLCD5printEm+0x4a>
    1dfe:	2a 96       	adiw	r28, 0x0a	; 10
    1e00:	e8 e0       	ldi	r30, 0x08	; 8
    1e02:	0c 94 a1 17 	jmp	0x2f42	; 0x2f42 <__epilogue_restores__+0x14>

00001e06 <_ZN12OrangutanLCD5printEl>:
    1e06:	cf 92       	push	r12
    1e08:	df 92       	push	r13
    1e0a:	ef 92       	push	r14
    1e0c:	ff 92       	push	r15
    1e0e:	6b 01       	movw	r12, r22
    1e10:	7c 01       	movw	r14, r24
    1e12:	97 ff       	sbrs	r25, 7
    1e14:	0b c0       	rjmp	.+22     	; 0x1e2c <_ZN12OrangutanLCD5printEl+0x26>
    1e16:	f0 94       	com	r15
    1e18:	e0 94       	com	r14
    1e1a:	d0 94       	com	r13
    1e1c:	c0 94       	com	r12
    1e1e:	c1 1c       	adc	r12, r1
    1e20:	d1 1c       	adc	r13, r1
    1e22:	e1 1c       	adc	r14, r1
    1e24:	f1 1c       	adc	r15, r1
    1e26:	8d e2       	ldi	r24, 0x2D	; 45
    1e28:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <_ZN12OrangutanLCD9send_dataEh>
    1e2c:	c7 01       	movw	r24, r14
    1e2e:	b6 01       	movw	r22, r12
    1e30:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <_ZN12OrangutanLCD5printEm>
    1e34:	ff 90       	pop	r15
    1e36:	ef 90       	pop	r14
    1e38:	df 90       	pop	r13
    1e3a:	cf 90       	pop	r12
    1e3c:	08 95       	ret

00001e3e <print_long>:
    1e3e:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <_ZN12OrangutanLCD5printEl>
    1e42:	08 95       	ret

00001e44 <_ZN12OrangutanLCD6gotoXYEhh>:
    1e44:	a5 e0       	ldi	r26, 0x05	; 5
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	e8 e2       	ldi	r30, 0x28	; 40
    1e4a:	ff e0       	ldi	r31, 0x0F	; 15
    1e4c:	0c 94 8a 17 	jmp	0x2f14	; 0x2f14 <__prologue_saves__+0x1e>
    1e50:	18 2f       	mov	r17, r24
    1e52:	80 e8       	ldi	r24, 0x80	; 128
    1e54:	89 83       	std	Y+1, r24	; 0x01
    1e56:	80 ec       	ldi	r24, 0xC0	; 192
    1e58:	8a 83       	std	Y+2, r24	; 0x02
    1e5a:	84 e9       	ldi	r24, 0x94	; 148
    1e5c:	8b 83       	std	Y+3, r24	; 0x03
    1e5e:	84 ed       	ldi	r24, 0xD4	; 212
    1e60:	8c 83       	std	Y+4, r24	; 0x04
    1e62:	fe 01       	movw	r30, r28
    1e64:	e6 0f       	add	r30, r22
    1e66:	f1 1d       	adc	r31, r1
    1e68:	81 81       	ldd	r24, Z+1	; 0x01
    1e6a:	81 0f       	add	r24, r17
    1e6c:	6d 83       	std	Y+5, r22	; 0x05
    1e6e:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <_ZN12OrangutanLCD8send_cmdEh>
    1e72:	10 93 89 01 	sts	0x0189, r17	; 0x800189 <col>
    1e76:	6d 81       	ldd	r22, Y+5	; 0x05
    1e78:	60 93 8a 01 	sts	0x018A, r22	; 0x80018a <row>
    1e7c:	25 96       	adiw	r28, 0x05	; 5
    1e7e:	e3 e0       	ldi	r30, 0x03	; 3
    1e80:	0c 94 a6 17 	jmp	0x2f4c	; 0x2f4c <__epilogue_restores__+0x1e>

00001e84 <lcd_goto_xy>:
    1e84:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <_ZN12OrangutanLCD6gotoXYEhh>
    1e88:	08 95       	ret

00001e8a <_ZN16OrangutanDigital9setOutputEhh>:
    1e8a:	88 30       	cpi	r24, 0x08	; 8
    1e8c:	58 f4       	brcc	.+22     	; 0x1ea4 <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    1e8e:	91 e0       	ldi	r25, 0x01	; 1
    1e90:	01 c0       	rjmp	.+2      	; 0x1e94 <_ZN16OrangutanDigital9setOutputEhh+0xa>
    1e92:	99 0f       	add	r25, r25
    1e94:	8a 95       	dec	r24
    1e96:	ea f7       	brpl	.-6      	; 0x1e92 <_ZN16OrangutanDigital9setOutputEhh+0x8>
    1e98:	89 2f       	mov	r24, r25
    1e9a:	aa e2       	ldi	r26, 0x2A	; 42
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	eb e2       	ldi	r30, 0x2B	; 43
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	21 c0       	rjmp	.+66     	; 0x1ee6 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    1ea4:	8e 30       	cpi	r24, 0x0E	; 14
    1ea6:	60 f4       	brcc	.+24     	; 0x1ec0 <_ZN16OrangutanDigital9setOutputEhh+0x36>
    1ea8:	98 ef       	ldi	r25, 0xF8	; 248
    1eaa:	98 0f       	add	r25, r24
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	01 c0       	rjmp	.+2      	; 0x1eb2 <_ZN16OrangutanDigital9setOutputEhh+0x28>
    1eb0:	88 0f       	add	r24, r24
    1eb2:	9a 95       	dec	r25
    1eb4:	ea f7       	brpl	.-6      	; 0x1eb0 <_ZN16OrangutanDigital9setOutputEhh+0x26>
    1eb6:	a4 e2       	ldi	r26, 0x24	; 36
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	e5 e2       	ldi	r30, 0x25	; 37
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	13 c0       	rjmp	.+38     	; 0x1ee6 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    1ec0:	85 31       	cpi	r24, 0x15	; 21
    1ec2:	60 f4       	brcc	.+24     	; 0x1edc <_ZN16OrangutanDigital9setOutputEhh+0x52>
    1ec4:	92 ef       	ldi	r25, 0xF2	; 242
    1ec6:	98 0f       	add	r25, r24
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	01 c0       	rjmp	.+2      	; 0x1ece <_ZN16OrangutanDigital9setOutputEhh+0x44>
    1ecc:	88 0f       	add	r24, r24
    1ece:	9a 95       	dec	r25
    1ed0:	ea f7       	brpl	.-6      	; 0x1ecc <_ZN16OrangutanDigital9setOutputEhh+0x42>
    1ed2:	a7 e2       	ldi	r26, 0x27	; 39
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	e8 e2       	ldi	r30, 0x28	; 40
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	05 c0       	rjmp	.+10     	; 0x1ee6 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	a0 e0       	ldi	r26, 0x00	; 0
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	e0 e0       	ldi	r30, 0x00	; 0
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	6f 3f       	cpi	r22, 0xFF	; 255
    1ee8:	19 f4       	brne	.+6      	; 0x1ef0 <_ZN16OrangutanDigital9setOutputEhh+0x66>
    1eea:	90 81       	ld	r25, Z
    1eec:	98 27       	eor	r25, r24
    1eee:	09 c0       	rjmp	.+18     	; 0x1f02 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    1ef0:	66 23       	and	r22, r22
    1ef2:	19 f0       	breq	.+6      	; 0x1efa <_ZN16OrangutanDigital9setOutputEhh+0x70>
    1ef4:	90 81       	ld	r25, Z
    1ef6:	98 2b       	or	r25, r24
    1ef8:	04 c0       	rjmp	.+8      	; 0x1f02 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    1efa:	20 81       	ld	r18, Z
    1efc:	98 2f       	mov	r25, r24
    1efe:	90 95       	com	r25
    1f00:	92 23       	and	r25, r18
    1f02:	90 83       	st	Z, r25
    1f04:	9c 91       	ld	r25, X
    1f06:	98 2b       	or	r25, r24
    1f08:	9c 93       	st	X, r25
    1f0a:	08 95       	ret

00001f0c <_ZN15OrangutanMotors5init2Ev>:
    1f0c:	83 ef       	ldi	r24, 0xF3	; 243
    1f0e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1f12:	84 bd       	out	0x24, r24	; 36
    1f14:	82 e0       	ldi	r24, 0x02	; 2
    1f16:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    1f1a:	85 bd       	out	0x25, r24	; 37
    1f1c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    1f20:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    1f24:	18 bc       	out	0x28, r1	; 40
    1f26:	17 bc       	out	0x27, r1	; 39
    1f28:	60 e0       	ldi	r22, 0x00	; 0
    1f2a:	86 e0       	ldi	r24, 0x06	; 6
    1f2c:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_ZN16OrangutanDigital9setOutputEhh>
    1f30:	60 e0       	ldi	r22, 0x00	; 0
    1f32:	85 e0       	ldi	r24, 0x05	; 5
    1f34:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_ZN16OrangutanDigital9setOutputEhh>
    1f38:	60 e0       	ldi	r22, 0x00	; 0
    1f3a:	8b e0       	ldi	r24, 0x0B	; 11
    1f3c:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_ZN16OrangutanDigital9setOutputEhh>
    1f40:	60 e0       	ldi	r22, 0x00	; 0
    1f42:	83 e0       	ldi	r24, 0x03	; 3
    1f44:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_ZN16OrangutanDigital9setOutputEhh>
    1f48:	08 95       	ret

00001f4a <_ZN15OrangutanMotors4initEv>:
    1f4a:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <_ZZN15OrangutanMotors4initEvE11initialized>
    1f4e:	81 11       	cpse	r24, r1
    1f50:	05 c0       	rjmp	.+10     	; 0x1f5c <_ZN15OrangutanMotors4initEv+0x12>
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <_ZZN15OrangutanMotors4initEvE11initialized>
    1f58:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <_ZN15OrangutanMotors5init2Ev>
    1f5c:	08 95       	ret

00001f5e <_ZN15OrangutanMotors10setM1SpeedEi>:
    1f5e:	cf 93       	push	r28
    1f60:	df 93       	push	r29
    1f62:	ec 01       	movw	r28, r24
    1f64:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN15OrangutanMotors4initEv>
    1f68:	d7 ff       	sbrs	r29, 7
    1f6a:	05 c0       	rjmp	.+10     	; 0x1f76 <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    1f6c:	d1 95       	neg	r29
    1f6e:	c1 95       	neg	r28
    1f70:	d1 09       	sbc	r29, r1
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	01 c0       	rjmp	.+2      	; 0x1f78 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	cf 3f       	cpi	r28, 0xFF	; 255
    1f7a:	d1 05       	cpc	r29, r1
    1f7c:	19 f0       	breq	.+6      	; 0x1f84 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    1f7e:	14 f0       	brlt	.+4      	; 0x1f84 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    1f80:	cf ef       	ldi	r28, 0xFF	; 255
    1f82:	d0 e0       	ldi	r29, 0x00	; 0
    1f84:	88 23       	and	r24, r24
    1f86:	19 f0       	breq	.+6      	; 0x1f8e <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    1f88:	18 bc       	out	0x28, r1	; 40
    1f8a:	c7 bd       	out	0x27, r28	; 39
    1f8c:	02 c0       	rjmp	.+4      	; 0x1f92 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    1f8e:	c8 bd       	out	0x28, r28	; 40
    1f90:	17 bc       	out	0x27, r1	; 39
    1f92:	df 91       	pop	r29
    1f94:	cf 91       	pop	r28
    1f96:	08 95       	ret

00001f98 <_ZN15OrangutanMotors10setM2SpeedEi>:
    1f98:	cf 93       	push	r28
    1f9a:	df 93       	push	r29
    1f9c:	ec 01       	movw	r28, r24
    1f9e:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN15OrangutanMotors4initEv>
    1fa2:	d7 ff       	sbrs	r29, 7
    1fa4:	05 c0       	rjmp	.+10     	; 0x1fb0 <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    1fa6:	d1 95       	neg	r29
    1fa8:	c1 95       	neg	r28
    1faa:	d1 09       	sbc	r29, r1
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	01 c0       	rjmp	.+2      	; 0x1fb2 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	cf 3f       	cpi	r28, 0xFF	; 255
    1fb4:	d1 05       	cpc	r29, r1
    1fb6:	19 f0       	breq	.+6      	; 0x1fbe <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1fb8:	14 f0       	brlt	.+4      	; 0x1fbe <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1fba:	cf ef       	ldi	r28, 0xFF	; 255
    1fbc:	d0 e0       	ldi	r29, 0x00	; 0
    1fbe:	88 23       	and	r24, r24
    1fc0:	29 f0       	breq	.+10     	; 0x1fcc <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    1fc2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    1fc6:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    1fca:	04 c0       	rjmp	.+8      	; 0x1fd4 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    1fcc:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    1fd0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    1fd4:	df 91       	pop	r29
    1fd6:	cf 91       	pop	r28
    1fd8:	08 95       	ret

00001fda <_ZN15OrangutanMotors9setSpeedsEii>:
    1fda:	cf 93       	push	r28
    1fdc:	df 93       	push	r29
    1fde:	eb 01       	movw	r28, r22
    1fe0:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <_ZN15OrangutanMotors10setM1SpeedEi>
    1fe4:	ce 01       	movw	r24, r28
    1fe6:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <_ZN15OrangutanMotors10setM2SpeedEi>
    1fea:	df 91       	pop	r29
    1fec:	cf 91       	pop	r28
    1fee:	08 95       	ret

00001ff0 <set_motors>:
    1ff0:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <_ZN15OrangutanMotors9setSpeedsEii>
    1ff4:	08 95       	ret

00001ff6 <_ZN20OrangutanPushbuttons5init2Ev>:
    1ff6:	84 b1       	in	r24, 0x04	; 4
    1ff8:	8d 7c       	andi	r24, 0xCD	; 205
    1ffa:	84 b9       	out	0x04, r24	; 4
    1ffc:	85 b1       	in	r24, 0x05	; 5
    1ffe:	82 63       	ori	r24, 0x32	; 50
    2000:	85 b9       	out	0x05, r24	; 5
    2002:	85 e0       	ldi	r24, 0x05	; 5
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	6f 93       	push	r22
    2008:	64 e0       	ldi	r22, 0x04	; 4
    200a:	6a 95       	dec	r22
    200c:	f1 f7       	brne	.-4      	; 0x200a <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    200e:	6f 91       	pop	r22
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	c9 f7       	brne	.-14     	; 0x2006 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    2014:	08 95       	ret

00002016 <_ZN20OrangutanPushbuttons4initEv>:
    2016:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    201a:	81 11       	cpse	r24, r1
    201c:	05 c0       	rjmp	.+10     	; 0x2028 <_ZN20OrangutanPushbuttons4initEv+0x12>
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    2024:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <_ZN20OrangutanPushbuttons5init2Ev>
    2028:	08 95       	ret

0000202a <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    202a:	cf 93       	push	r28
    202c:	c8 2f       	mov	r28, r24
    202e:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZN20OrangutanPushbuttons4initEv>
    2032:	83 b1       	in	r24, 0x03	; 3
    2034:	8c 23       	and	r24, r28
    2036:	e9 f3       	breq	.-6      	; 0x2032 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    2038:	8a e0       	ldi	r24, 0x0A	; 10
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	0e 94 39 11 	call	0x2272	; 0x2272 <delay_ms>
    2040:	83 b1       	in	r24, 0x03	; 3
    2042:	8c 23       	and	r24, r28
    2044:	b1 f3       	breq	.-20     	; 0x2032 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    2046:	83 b1       	in	r24, 0x03	; 3
    2048:	8c 23       	and	r24, r28
    204a:	cf 91       	pop	r28
    204c:	08 95       	ret

0000204e <wait_for_button_release>:
    204e:	0e 94 15 10 	call	0x202a	; 0x202a <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    2052:	08 95       	ret

00002054 <_ZN20OrangutanPushbuttons9isPressedEh>:
    2054:	a1 e0       	ldi	r26, 0x01	; 1
    2056:	b0 e0       	ldi	r27, 0x00	; 0
    2058:	e0 e3       	ldi	r30, 0x30	; 48
    205a:	f0 e1       	ldi	r31, 0x10	; 16
    205c:	0c 94 8b 17 	jmp	0x2f16	; 0x2f16 <__prologue_saves__+0x20>
    2060:	89 83       	std	Y+1, r24	; 0x01
    2062:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZN20OrangutanPushbuttons4initEv>
    2066:	93 b1       	in	r25, 0x03	; 3
    2068:	90 95       	com	r25
    206a:	89 81       	ldd	r24, Y+1	; 0x01
    206c:	89 23       	and	r24, r25
    206e:	21 96       	adiw	r28, 0x01	; 1
    2070:	e2 e0       	ldi	r30, 0x02	; 2
    2072:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <__epilogue_restores__+0x20>

00002076 <button_is_pressed>:
    2076:	0e 94 2a 10 	call	0x2054	; 0x2054 <_ZN20OrangutanPushbuttons9isPressedEh>
    207a:	08 95       	ret

0000207c <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>:
    207c:	28 2f       	mov	r18, r24
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	9a e0       	ldi	r25, 0x0A	; 10
    2082:	89 9f       	mul	r24, r25
    2084:	f0 01       	movw	r30, r0
    2086:	11 24       	eor	r1, r1
    2088:	e3 57       	subi	r30, 0x73	; 115
    208a:	fe 4f       	sbci	r31, 0xFE	; 254
    208c:	80 85       	ldd	r24, Z+8	; 0x08
    208e:	91 85       	ldd	r25, Z+9	; 0x09
    2090:	00 97       	sbiw	r24, 0x00	; 0
    2092:	21 f0       	breq	.+8      	; 0x209c <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    2094:	52 81       	ldd	r21, Z+2	; 0x02
    2096:	44 81       	ldd	r20, Z+4	; 0x04
    2098:	54 17       	cp	r21, r20
    209a:	80 f0       	brcs	.+32     	; 0x20bc <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x40>
    209c:	8a e0       	ldi	r24, 0x0A	; 10
    209e:	82 9f       	mul	r24, r18
    20a0:	f0 01       	movw	r30, r0
    20a2:	83 9f       	mul	r24, r19
    20a4:	f0 0d       	add	r31, r0
    20a6:	11 24       	eor	r1, r1
    20a8:	e3 57       	subi	r30, 0x73	; 115
    20aa:	fe 4f       	sbci	r31, 0xFE	; 254
    20ac:	92 81       	ldd	r25, Z+2	; 0x02
    20ae:	84 81       	ldd	r24, Z+4	; 0x04
    20b0:	98 13       	cpse	r25, r24
    20b2:	0e c0       	rjmp	.+28     	; 0x20d0 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x54>
    20b4:	85 81       	ldd	r24, Z+5	; 0x05
    20b6:	81 11       	cpse	r24, r1
    20b8:	0a c0       	rjmp	.+20     	; 0x20ce <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x52>
    20ba:	08 95       	ret
    20bc:	42 81       	ldd	r20, Z+2	; 0x02
    20be:	dc 01       	movw	r26, r24
    20c0:	a4 0f       	add	r26, r20
    20c2:	b1 1d       	adc	r27, r1
    20c4:	6c 93       	st	X, r22
    20c6:	82 81       	ldd	r24, Z+2	; 0x02
    20c8:	8f 5f       	subi	r24, 0xFF	; 255
    20ca:	82 83       	std	Z+2, r24	; 0x02
    20cc:	e7 cf       	rjmp	.-50     	; 0x209c <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    20ce:	12 82       	std	Z+2, r1	; 0x02
    20d0:	08 95       	ret

000020d2 <__vector_18>:
    20d2:	1f 92       	push	r1
    20d4:	0f 92       	push	r0
    20d6:	0f b6       	in	r0, 0x3f	; 63
    20d8:	0f 92       	push	r0
    20da:	11 24       	eor	r1, r1
    20dc:	2f 93       	push	r18
    20de:	3f 93       	push	r19
    20e0:	4f 93       	push	r20
    20e2:	5f 93       	push	r21
    20e4:	6f 93       	push	r22
    20e6:	7f 93       	push	r23
    20e8:	8f 93       	push	r24
    20ea:	9f 93       	push	r25
    20ec:	af 93       	push	r26
    20ee:	bf 93       	push	r27
    20f0:	ef 93       	push	r30
    20f2:	ff 93       	push	r31
    20f4:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	0e 94 3e 10 	call	0x207c	; 0x207c <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>
    20fe:	ff 91       	pop	r31
    2100:	ef 91       	pop	r30
    2102:	bf 91       	pop	r27
    2104:	af 91       	pop	r26
    2106:	9f 91       	pop	r25
    2108:	8f 91       	pop	r24
    210a:	7f 91       	pop	r23
    210c:	6f 91       	pop	r22
    210e:	5f 91       	pop	r21
    2110:	4f 91       	pop	r20
    2112:	3f 91       	pop	r19
    2114:	2f 91       	pop	r18
    2116:	0f 90       	pop	r0
    2118:	0f be       	out	0x3f, r0	; 63
    211a:	0f 90       	pop	r0
    211c:	1f 90       	pop	r1
    211e:	18 95       	reti

00002120 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>:
    2120:	9a e0       	ldi	r25, 0x0A	; 10
    2122:	89 9f       	mul	r24, r25
    2124:	f0 01       	movw	r30, r0
    2126:	11 24       	eor	r1, r1
    2128:	e3 57       	subi	r30, 0x73	; 115
    212a:	fe 4f       	sbci	r31, 0xFE	; 254
    212c:	86 81       	ldd	r24, Z+6	; 0x06
    212e:	97 81       	ldd	r25, Z+7	; 0x07
    2130:	89 2b       	or	r24, r25
    2132:	59 f0       	breq	.+22     	; 0x214a <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    2134:	91 81       	ldd	r25, Z+1	; 0x01
    2136:	83 81       	ldd	r24, Z+3	; 0x03
    2138:	98 17       	cp	r25, r24
    213a:	38 f4       	brcc	.+14     	; 0x214a <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    213c:	80 81       	ld	r24, Z
    213e:	81 11       	cpse	r24, r1
    2140:	04 c0       	rjmp	.+8      	; 0x214a <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    2142:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2146:	80 62       	ori	r24, 0x20	; 32
    2148:	03 c0       	rjmp	.+6      	; 0x2150 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x30>
    214a:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    214e:	8f 7d       	andi	r24, 0xDF	; 223
    2150:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2154:	08 95       	ret

00002156 <_ZN15OrangutanSerial11uart_tx_isrEh>:
    2156:	9a e0       	ldi	r25, 0x0A	; 10
    2158:	89 9f       	mul	r24, r25
    215a:	f0 01       	movw	r30, r0
    215c:	11 24       	eor	r1, r1
    215e:	e3 57       	subi	r30, 0x73	; 115
    2160:	fe 4f       	sbci	r31, 0xFE	; 254
    2162:	26 81       	ldd	r18, Z+6	; 0x06
    2164:	37 81       	ldd	r19, Z+7	; 0x07
    2166:	21 15       	cp	r18, r1
    2168:	31 05       	cpc	r19, r1
    216a:	41 f0       	breq	.+16     	; 0x217c <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    216c:	41 81       	ldd	r20, Z+1	; 0x01
    216e:	93 81       	ldd	r25, Z+3	; 0x03
    2170:	49 17       	cp	r20, r25
    2172:	20 f4       	brcc	.+8      	; 0x217c <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    2174:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    2178:	95 fd       	sbrc	r25, 5
    217a:	03 c0       	rjmp	.+6      	; 0x2182 <_ZN15OrangutanSerial11uart_tx_isrEh+0x2c>
    217c:	0e 94 90 10 	call	0x2120	; 0x2120 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    2180:	08 95       	ret
    2182:	91 81       	ldd	r25, Z+1	; 0x01
    2184:	d9 01       	movw	r26, r18
    2186:	a9 0f       	add	r26, r25
    2188:	b1 1d       	adc	r27, r1
    218a:	9c 91       	ld	r25, X
    218c:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    2190:	91 81       	ldd	r25, Z+1	; 0x01
    2192:	9f 5f       	subi	r25, 0xFF	; 255
    2194:	91 83       	std	Z+1, r25	; 0x01
    2196:	f2 cf       	rjmp	.-28     	; 0x217c <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>

00002198 <__vector_19>:
    2198:	1f 92       	push	r1
    219a:	0f 92       	push	r0
    219c:	0f b6       	in	r0, 0x3f	; 63
    219e:	0f 92       	push	r0
    21a0:	11 24       	eor	r1, r1
    21a2:	2f 93       	push	r18
    21a4:	3f 93       	push	r19
    21a6:	4f 93       	push	r20
    21a8:	5f 93       	push	r21
    21aa:	6f 93       	push	r22
    21ac:	7f 93       	push	r23
    21ae:	8f 93       	push	r24
    21b0:	9f 93       	push	r25
    21b2:	af 93       	push	r26
    21b4:	bf 93       	push	r27
    21b6:	ef 93       	push	r30
    21b8:	ff 93       	push	r31
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	0e 94 ab 10 	call	0x2156	; 0x2156 <_ZN15OrangutanSerial11uart_tx_isrEh>
    21c0:	ff 91       	pop	r31
    21c2:	ef 91       	pop	r30
    21c4:	bf 91       	pop	r27
    21c6:	af 91       	pop	r26
    21c8:	9f 91       	pop	r25
    21ca:	8f 91       	pop	r24
    21cc:	7f 91       	pop	r23
    21ce:	6f 91       	pop	r22
    21d0:	5f 91       	pop	r21
    21d2:	4f 91       	pop	r20
    21d4:	3f 91       	pop	r19
    21d6:	2f 91       	pop	r18
    21d8:	0f 90       	pop	r0
    21da:	0f be       	out	0x3f, r0	; 63
    21dc:	0f 90       	pop	r0
    21de:	1f 90       	pop	r1
    21e0:	18 95       	reti

000021e2 <__vector_9>:
    21e2:	2f 92       	push	r2
    21e4:	8f 93       	push	r24
    21e6:	9f 93       	push	r25
    21e8:	2f b6       	in	r2, 0x3f	; 63
    21ea:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <tickCount+0x1>
    21ee:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <tickCount+0x2>
    21f2:	01 96       	adiw	r24, 0x01	; 1
    21f4:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <tickCount+0x1>
    21f8:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <tickCount+0x2>
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <tickCount+0x3>
    2202:	89 1f       	adc	r24, r25
    2204:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <tickCount+0x3>
    2208:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <us_over_10+0x1>
    220c:	9c 5f       	subi	r25, 0xFC	; 252
    220e:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <us_over_10+0x1>
    2212:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <us_over_10>
    2216:	80 51       	subi	r24, 0x10	; 16
    2218:	97 42       	sbci	r25, 0x27	; 39
    221a:	c0 f0       	brcs	.+48     	; 0x224c <end>
    221c:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <us_over_10+0x1>
    2220:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <us_over_10>
    2224:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <msCounter>
    2228:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <msCounter+0x1>
    222c:	01 96       	adiw	r24, 0x01	; 1
    222e:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <msCounter>
    2232:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <msCounter+0x1>
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <msCounter+0x2>
    223c:	89 1f       	adc	r24, r25
    223e:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <msCounter+0x2>
    2242:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <msCounter+0x3>
    2246:	89 1f       	adc	r24, r25
    2248:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <msCounter+0x3>

0000224c <end>:
    224c:	2f be       	out	0x3f, r2	; 63
    224e:	9f 91       	pop	r25
    2250:	8f 91       	pop	r24
    2252:	2f 90       	pop	r2
    2254:	18 95       	reti

00002256 <_ZN13OrangutanTime17delayMillisecondsEj>:
    2256:	28 ee       	ldi	r18, 0xE8	; 232
    2258:	33 e0       	ldi	r19, 0x03	; 3
    225a:	01 97       	sbiw	r24, 0x01	; 1
    225c:	48 f0       	brcs	.+18     	; 0x2270 <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    225e:	f9 01       	movw	r30, r18
    2260:	6f 93       	push	r22
    2262:	64 e0       	ldi	r22, 0x04	; 4
    2264:	6a 95       	dec	r22
    2266:	f1 f7       	brne	.-4      	; 0x2264 <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    2268:	6f 91       	pop	r22
    226a:	31 97       	sbiw	r30, 0x01	; 1
    226c:	c9 f7       	brne	.-14     	; 0x2260 <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    226e:	f5 cf       	rjmp	.-22     	; 0x225a <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    2270:	08 95       	ret

00002272 <delay_ms>:
    2272:	0e 94 2b 11 	call	0x2256	; 0x2256 <_ZN13OrangutanTime17delayMillisecondsEj>
    2276:	08 95       	ret

00002278 <_ZN13OrangutanTime5init2Ev>:
    2278:	e0 e7       	ldi	r30, 0x70	; 112
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	8e 7f       	andi	r24, 0xFE	; 254
    2280:	80 83       	st	Z, r24
    2282:	a0 eb       	ldi	r26, 0xB0	; 176
    2284:	b0 e0       	ldi	r27, 0x00	; 0
    2286:	8c 91       	ld	r24, X
    2288:	83 60       	ori	r24, 0x03	; 3
    228a:	8c 93       	st	X, r24
    228c:	a1 eb       	ldi	r26, 0xB1	; 177
    228e:	b0 e0       	ldi	r27, 0x00	; 0
    2290:	8c 91       	ld	r24, X
    2292:	80 7f       	andi	r24, 0xF0	; 240
    2294:	8c 93       	st	X, r24
    2296:	8c 91       	ld	r24, X
    2298:	82 60       	ori	r24, 0x02	; 2
    229a:	8c 93       	st	X, r24
    229c:	b8 9a       	sbi	0x17, 0	; 23
    229e:	80 81       	ld	r24, Z
    22a0:	81 60       	ori	r24, 0x01	; 1
    22a2:	80 83       	st	Z, r24
    22a4:	78 94       	sei
    22a6:	08 95       	ret

000022a8 <_ZN13OrangutanTime4initEv>:
    22a8:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <_ZZN13OrangutanTime4initEvE11initialized>
    22ac:	81 11       	cpse	r24, r1
    22ae:	05 c0       	rjmp	.+10     	; 0x22ba <_ZN13OrangutanTime4initEv+0x12>
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <_ZZN13OrangutanTime4initEvE11initialized>
    22b6:	0e 94 3c 11 	call	0x2278	; 0x2278 <_ZN13OrangutanTime5init2Ev>
    22ba:	08 95       	ret

000022bc <_ZN13OrangutanTime2msEv>:
    22bc:	0e 94 54 11 	call	0x22a8	; 0x22a8 <_ZN13OrangutanTime4initEv>
    22c0:	e0 e7       	ldi	r30, 0x70	; 112
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	80 81       	ld	r24, Z
    22c6:	8e 7f       	andi	r24, 0xFE	; 254
    22c8:	80 83       	st	Z, r24
    22ca:	60 91 99 01 	lds	r22, 0x0199	; 0x800199 <msCounter>
    22ce:	70 91 9a 01 	lds	r23, 0x019A	; 0x80019a <msCounter+0x1>
    22d2:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <msCounter+0x2>
    22d6:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <msCounter+0x3>
    22da:	20 81       	ld	r18, Z
    22dc:	21 60       	ori	r18, 0x01	; 1
    22de:	20 83       	st	Z, r18
    22e0:	08 95       	ret

000022e2 <get_ms>:
    22e2:	0e 94 5e 11 	call	0x22bc	; 0x22bc <_ZN13OrangutanTime2msEv>
    22e6:	08 95       	ret

000022e8 <_ZN13OrangutanTime5resetEv>:
    22e8:	0e 94 54 11 	call	0x22a8	; 0x22a8 <_ZN13OrangutanTime4initEv>
    22ec:	e0 e7       	ldi	r30, 0x70	; 112
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	80 81       	ld	r24, Z
    22f2:	8e 7f       	andi	r24, 0xFE	; 254
    22f4:	80 83       	st	Z, r24
    22f6:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <msCounter>
    22fa:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <msCounter+0x1>
    22fe:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <msCounter+0x2>
    2302:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <msCounter+0x3>
    2306:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <us_over_10+0x1>
    230a:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <us_over_10>
    230e:	80 81       	ld	r24, Z
    2310:	81 60       	ori	r24, 0x01	; 1
    2312:	80 83       	st	Z, r24
    2314:	08 95       	ret

00002316 <read_line_sensors>:
    2316:	46 2f       	mov	r20, r22
    2318:	bc 01       	movw	r22, r24
    231a:	81 ea       	ldi	r24, 0xA1	; 161
    231c:	91 e0       	ldi	r25, 0x01	; 1
    231e:	0e 94 1c 14 	call	0x2838	; 0x2838 <_ZN16PololuQTRSensors4readEPjh>
    2322:	08 95       	ret

00002324 <calibrate_line_sensors>:
    2324:	68 2f       	mov	r22, r24
    2326:	81 ea       	ldi	r24, 0xA1	; 161
    2328:	91 e0       	ldi	r25, 0x01	; 1
    232a:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <_ZN16PololuQTRSensors9calibrateEh>
    232e:	08 95       	ret

00002330 <read_line>:
    2330:	46 2f       	mov	r20, r22
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	bc 01       	movw	r22, r24
    2336:	81 ea       	ldi	r24, 0xA1	; 161
    2338:	91 e0       	ldi	r25, 0x01	; 1
    233a:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <_ZN16PololuQTRSensors8readLineEPjhh>
    233e:	08 95       	ret

00002340 <_ZN9Pololu3pi4initEjh>:
    2340:	0f 93       	push	r16
    2342:	cf 93       	push	r28
    2344:	df 93       	push	r29
    2346:	00 d0       	rcall	.+0      	; 0x2348 <_ZN9Pololu3pi4initEjh+0x8>
    2348:	00 d0       	rcall	.+0      	; 0x234a <_ZN9Pololu3pi4initEjh+0xa>
    234a:	1f 92       	push	r1
    234c:	cd b7       	in	r28, 0x3d	; 61
    234e:	de b7       	in	r29, 0x3e	; 62
    2350:	9c 01       	movw	r18, r24
    2352:	85 e0       	ldi	r24, 0x05	; 5
    2354:	ec e4       	ldi	r30, 0x4C	; 76
    2356:	f1 e0       	ldi	r31, 0x01	; 1
    2358:	de 01       	movw	r26, r28
    235a:	11 96       	adiw	r26, 0x01	; 1
    235c:	01 90       	ld	r0, Z+
    235e:	0d 92       	st	X+, r0
    2360:	8a 95       	dec	r24
    2362:	e1 f7       	brne	.-8      	; 0x235c <_ZN9Pololu3pi4initEjh+0x1c>
    2364:	66 23       	and	r22, r22
    2366:	11 f0       	breq	.+4      	; 0x236c <_ZN9Pololu3pi4initEjh+0x2c>
    2368:	0f ef       	ldi	r16, 0xFF	; 255
    236a:	01 c0       	rjmp	.+2      	; 0x236e <_ZN9Pololu3pi4initEjh+0x2e>
    236c:	03 e1       	ldi	r16, 0x13	; 19
    236e:	45 e0       	ldi	r20, 0x05	; 5
    2370:	be 01       	movw	r22, r28
    2372:	6f 5f       	subi	r22, 0xFF	; 255
    2374:	7f 4f       	sbci	r23, 0xFF	; 255
    2376:	81 ea       	ldi	r24, 0xA1	; 161
    2378:	91 e0       	ldi	r25, 0x01	; 1
    237a:	0e 94 72 12 	call	0x24e4	; 0x24e4 <_ZN18PololuQTRSensorsRC4initEPhhjh>
    237e:	81 ea       	ldi	r24, 0xA1	; 161
    2380:	91 e0       	ldi	r25, 0x01	; 1
    2382:	0e 94 49 12 	call	0x2492	; 0x2492 <_ZN16PololuQTRSensors11emittersOffEv>
    2386:	0e 94 74 11 	call	0x22e8	; 0x22e8 <_ZN13OrangutanTime5resetEv>
    238a:	0f 90       	pop	r0
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
    2394:	df 91       	pop	r29
    2396:	cf 91       	pop	r28
    2398:	0f 91       	pop	r16
    239a:	08 95       	ret

0000239c <pololu_3pi_init>:
    239c:	60 e0       	ldi	r22, 0x00	; 0
    239e:	0e 94 a0 11 	call	0x2340	; 0x2340 <_ZN9Pololu3pi4initEjh>
    23a2:	08 95       	ret

000023a4 <_GLOBAL__sub_D_pololu_3pi_init>:
    23a4:	81 ea       	ldi	r24, 0xA1	; 161
    23a6:	91 e0       	ldi	r25, 0x01	; 1
    23a8:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <_ZN16PololuQTRSensorsD1Ev>
    23ac:	08 95       	ret

000023ae <delay_us>:
    23ae:	6f 93       	push	r22
    23b0:	64 e0       	ldi	r22, 0x04	; 4
    23b2:	6a 95       	dec	r22
    23b4:	f1 f7       	brne	.-4      	; 0x23b2 <delay_us+0x4>
    23b6:	6f 91       	pop	r22
    23b8:	01 97       	sbiw	r24, 0x01	; 1
    23ba:	c9 f7       	brne	.-14     	; 0x23ae <delay_us>
    23bc:	08 95       	ret

000023be <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    23be:	fc 01       	movw	r30, r24
    23c0:	11 82       	std	Z+1, r1	; 0x01
    23c2:	10 82       	st	Z, r1
    23c4:	13 82       	std	Z+3, r1	; 0x03
    23c6:	12 82       	std	Z+2, r1	; 0x02
    23c8:	15 82       	std	Z+5, r1	; 0x05
    23ca:	14 82       	std	Z+4, r1	; 0x04
    23cc:	16 82       	std	Z+6, r1	; 0x06
    23ce:	68 30       	cpi	r22, 0x08	; 8
    23d0:	68 f4       	brcc	.+26     	; 0x23ec <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    23d2:	89 e2       	ldi	r24, 0x29	; 41
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	91 83       	std	Z+1, r25	; 0x01
    23d8:	80 83       	st	Z, r24
    23da:	8b e2       	ldi	r24, 0x2B	; 43
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	93 83       	std	Z+3, r25	; 0x03
    23e0:	82 83       	std	Z+2, r24	; 0x02
    23e2:	8a e2       	ldi	r24, 0x2A	; 42
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	95 83       	std	Z+5, r25	; 0x05
    23e8:	84 83       	std	Z+4, r24	; 0x04
    23ea:	1f c0       	rjmp	.+62     	; 0x242a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    23ec:	6e 30       	cpi	r22, 0x0E	; 14
    23ee:	70 f4       	brcc	.+28     	; 0x240c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    23f0:	83 e2       	ldi	r24, 0x23	; 35
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	91 83       	std	Z+1, r25	; 0x01
    23f6:	80 83       	st	Z, r24
    23f8:	85 e2       	ldi	r24, 0x25	; 37
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	93 83       	std	Z+3, r25	; 0x03
    23fe:	82 83       	std	Z+2, r24	; 0x02
    2400:	84 e2       	ldi	r24, 0x24	; 36
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	95 83       	std	Z+5, r25	; 0x05
    2406:	84 83       	std	Z+4, r24	; 0x04
    2408:	68 50       	subi	r22, 0x08	; 8
    240a:	0f c0       	rjmp	.+30     	; 0x242a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    240c:	65 31       	cpi	r22, 0x15	; 21
    240e:	98 f4       	brcc	.+38     	; 0x2436 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    2410:	86 e2       	ldi	r24, 0x26	; 38
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	91 83       	std	Z+1, r25	; 0x01
    2416:	80 83       	st	Z, r24
    2418:	88 e2       	ldi	r24, 0x28	; 40
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	93 83       	std	Z+3, r25	; 0x03
    241e:	82 83       	std	Z+2, r24	; 0x02
    2420:	87 e2       	ldi	r24, 0x27	; 39
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	95 83       	std	Z+5, r25	; 0x05
    2426:	84 83       	std	Z+4, r24	; 0x04
    2428:	6e 50       	subi	r22, 0x0E	; 14
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	01 c0       	rjmp	.+2      	; 0x2430 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    242e:	88 0f       	add	r24, r24
    2430:	6a 95       	dec	r22
    2432:	ea f7       	brpl	.-6      	; 0x242e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    2434:	86 83       	std	Z+6, r24	; 0x06
    2436:	08 95       	ret

00002438 <_ZN16PololuQTRSensors4initEhhh>:
    2438:	a7 e0       	ldi	r26, 0x07	; 7
    243a:	b0 e0       	ldi	r27, 0x00	; 0
    243c:	e2 e2       	ldi	r30, 0x22	; 34
    243e:	f2 e1       	ldi	r31, 0x12	; 18
    2440:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <__prologue_saves__+0x1c>
    2444:	8c 01       	movw	r16, r24
    2446:	fc 01       	movw	r30, r24
    2448:	11 82       	std	Z+1, r1	; 0x01
    244a:	10 82       	st	Z, r1
    244c:	13 82       	std	Z+3, r1	; 0x03
    244e:	12 82       	std	Z+2, r1	; 0x02
    2450:	15 82       	std	Z+5, r1	; 0x05
    2452:	14 82       	std	Z+4, r1	; 0x04
    2454:	17 82       	std	Z+7, r1	; 0x07
    2456:	16 82       	std	Z+6, r1	; 0x06
    2458:	61 31       	cpi	r22, 0x11	; 17
    245a:	18 f0       	brcs	.+6      	; 0x2462 <_ZN16PololuQTRSensors4initEhhh+0x2a>
    245c:	80 e1       	ldi	r24, 0x10	; 16
    245e:	80 87       	std	Z+8, r24	; 0x08
    2460:	02 c0       	rjmp	.+4      	; 0x2466 <_ZN16PololuQTRSensors4initEhhh+0x2e>
    2462:	fc 01       	movw	r30, r24
    2464:	60 87       	std	Z+8, r22	; 0x08
    2466:	f8 01       	movw	r30, r16
    2468:	20 8b       	std	Z+16, r18	; 0x10
    246a:	64 2f       	mov	r22, r20
    246c:	ce 01       	movw	r24, r28
    246e:	01 96       	adiw	r24, 0x01	; 1
    2470:	0e 94 df 11 	call	0x23be	; 0x23be <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    2474:	8f 81       	ldd	r24, Y+7	; 0x07
    2476:	f8 01       	movw	r30, r16
    2478:	81 87       	std	Z+9, r24	; 0x09
    247a:	8b 81       	ldd	r24, Y+3	; 0x03
    247c:	9c 81       	ldd	r25, Y+4	; 0x04
    247e:	93 87       	std	Z+11, r25	; 0x0b
    2480:	82 87       	std	Z+10, r24	; 0x0a
    2482:	8d 81       	ldd	r24, Y+5	; 0x05
    2484:	9e 81       	ldd	r25, Y+6	; 0x06
    2486:	95 87       	std	Z+13, r25	; 0x0d
    2488:	84 87       	std	Z+12, r24	; 0x0c
    248a:	27 96       	adiw	r28, 0x07	; 7
    248c:	e4 e0       	ldi	r30, 0x04	; 4
    248e:	0c 94 a5 17 	jmp	0x2f4a	; 0x2f4a <__epilogue_restores__+0x1c>

00002492 <_ZN16PololuQTRSensors11emittersOffEv>:
    2492:	fc 01       	movw	r30, r24
    2494:	a4 85       	ldd	r26, Z+12	; 0x0c
    2496:	b5 85       	ldd	r27, Z+13	; 0x0d
    2498:	10 97       	sbiw	r26, 0x00	; 0
    249a:	79 f0       	breq	.+30     	; 0x24ba <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    249c:	8c 91       	ld	r24, X
    249e:	91 85       	ldd	r25, Z+9	; 0x09
    24a0:	89 2b       	or	r24, r25
    24a2:	8c 93       	st	X, r24
    24a4:	a2 85       	ldd	r26, Z+10	; 0x0a
    24a6:	b3 85       	ldd	r27, Z+11	; 0x0b
    24a8:	9c 91       	ld	r25, X
    24aa:	81 85       	ldd	r24, Z+9	; 0x09
    24ac:	80 95       	com	r24
    24ae:	89 23       	and	r24, r25
    24b0:	8c 93       	st	X, r24
    24b2:	88 ec       	ldi	r24, 0xC8	; 200
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	0e 94 d7 11 	call	0x23ae	; 0x23ae <delay_us>
    24ba:	08 95       	ret

000024bc <_ZN16PololuQTRSensors10emittersOnEv>:
    24bc:	fc 01       	movw	r30, r24
    24be:	a4 85       	ldd	r26, Z+12	; 0x0c
    24c0:	b5 85       	ldd	r27, Z+13	; 0x0d
    24c2:	10 97       	sbiw	r26, 0x00	; 0
    24c4:	71 f0       	breq	.+28     	; 0x24e2 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    24c6:	8c 91       	ld	r24, X
    24c8:	91 85       	ldd	r25, Z+9	; 0x09
    24ca:	89 2b       	or	r24, r25
    24cc:	8c 93       	st	X, r24
    24ce:	a2 85       	ldd	r26, Z+10	; 0x0a
    24d0:	b3 85       	ldd	r27, Z+11	; 0x0b
    24d2:	8c 91       	ld	r24, X
    24d4:	91 85       	ldd	r25, Z+9	; 0x09
    24d6:	89 2b       	or	r24, r25
    24d8:	8c 93       	st	X, r24
    24da:	88 ec       	ldi	r24, 0xC8	; 200
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	0e 94 d7 11 	call	0x23ae	; 0x23ae <delay_us>
    24e2:	08 95       	ret

000024e4 <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    24e4:	a7 e0       	ldi	r26, 0x07	; 7
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	e8 e7       	ldi	r30, 0x78	; 120
    24ea:	f2 e1       	ldi	r31, 0x12	; 18
    24ec:	0c 94 7e 17 	jmp	0x2efc	; 0x2efc <__prologue_saves__+0x6>
    24f0:	7c 01       	movw	r14, r24
    24f2:	4b 01       	movw	r8, r22
    24f4:	64 2f       	mov	r22, r20
    24f6:	39 01       	movw	r6, r18
    24f8:	40 2f       	mov	r20, r16
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	0e 94 1c 12 	call	0x2438	; 0x2438 <_ZN16PololuQTRSensors4initEhhh>
    2500:	87 01       	movw	r16, r14
    2502:	0f 5b       	subi	r16, 0xBF	; 191
    2504:	1f 4f       	sbci	r17, 0xFF	; 255
    2506:	f8 01       	movw	r30, r16
    2508:	10 82       	st	Z, r1
    250a:	67 01       	movw	r12, r14
    250c:	f2 e4       	ldi	r31, 0x42	; 66
    250e:	cf 0e       	add	r12, r31
    2510:	d1 1c       	adc	r13, r1
    2512:	f6 01       	movw	r30, r12
    2514:	10 82       	st	Z, r1
    2516:	57 01       	movw	r10, r14
    2518:	f3 e4       	ldi	r31, 0x43	; 67
    251a:	af 0e       	add	r10, r31
    251c:	b1 1c       	adc	r11, r1
    251e:	f5 01       	movw	r30, r10
    2520:	10 82       	st	Z, r1
    2522:	f7 01       	movw	r30, r14
    2524:	77 86       	std	Z+15, r7	; 0x0f
    2526:	66 86       	std	Z+14, r6	; 0x0e
    2528:	51 2c       	mov	r5, r1
    252a:	f7 01       	movw	r30, r14
    252c:	80 85       	ldd	r24, Z+8	; 0x08
    252e:	58 16       	cp	r5, r24
    2530:	50 f5       	brcc	.+84     	; 0x2586 <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    2532:	65 2c       	mov	r6, r5
    2534:	71 2c       	mov	r7, r1
    2536:	f4 01       	movw	r30, r8
    2538:	e6 0d       	add	r30, r6
    253a:	f7 1d       	adc	r31, r7
    253c:	60 81       	ld	r22, Z
    253e:	ce 01       	movw	r24, r28
    2540:	01 96       	adiw	r24, 0x01	; 1
    2542:	0e 94 df 11 	call	0x23be	; 0x23be <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    2546:	2f 81       	ldd	r18, Y+7	; 0x07
    2548:	f7 01       	movw	r30, r14
    254a:	e6 0d       	add	r30, r6
    254c:	f7 1d       	adc	r31, r7
    254e:	21 8b       	std	Z+17, r18	; 0x11
    2550:	89 81       	ldd	r24, Y+1	; 0x01
    2552:	9a 81       	ldd	r25, Y+2	; 0x02
    2554:	f3 01       	movw	r30, r6
    2556:	ee 0f       	add	r30, r30
    2558:	ff 1f       	adc	r31, r31
    255a:	ee 0d       	add	r30, r14
    255c:	ff 1d       	adc	r31, r15
    255e:	92 a3       	std	Z+34, r25	; 0x22
    2560:	81 a3       	std	Z+33, r24	; 0x21
    2562:	83 32       	cpi	r24, 0x23	; 35
    2564:	91 05       	cpc	r25, r1
    2566:	11 f4       	brne	.+4      	; 0x256c <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    2568:	f8 01       	movw	r30, r16
    256a:	08 c0       	rjmp	.+16     	; 0x257c <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    256c:	86 32       	cpi	r24, 0x26	; 38
    256e:	91 05       	cpc	r25, r1
    2570:	11 f4       	brne	.+4      	; 0x2576 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    2572:	f6 01       	movw	r30, r12
    2574:	03 c0       	rjmp	.+6      	; 0x257c <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    2576:	89 97       	sbiw	r24, 0x29	; 41
    2578:	21 f4       	brne	.+8      	; 0x2582 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    257a:	f5 01       	movw	r30, r10
    257c:	80 81       	ld	r24, Z
    257e:	82 2b       	or	r24, r18
    2580:	80 83       	st	Z, r24
    2582:	53 94       	inc	r5
    2584:	d2 cf       	rjmp	.-92     	; 0x252a <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    2586:	27 96       	adiw	r28, 0x07	; 7
    2588:	ef e0       	ldi	r30, 0x0F	; 15
    258a:	0c 94 9a 17 	jmp	0x2f34	; 0x2f34 <__epilogue_restores__+0x6>

0000258e <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    258e:	a0 e0       	ldi	r26, 0x00	; 0
    2590:	b0 e0       	ldi	r27, 0x00	; 0
    2592:	ed ec       	ldi	r30, 0xCD	; 205
    2594:	f2 e1       	ldi	r31, 0x12	; 18
    2596:	0c 94 80 17 	jmp	0x2f00	; 0x2f00 <__prologue_saves__+0xa>
    259a:	ec 01       	movw	r28, r24
    259c:	5b 01       	movw	r10, r22
    259e:	6c 01       	movw	r12, r24
    25a0:	81 e4       	ldi	r24, 0x41	; 65
    25a2:	c8 0e       	add	r12, r24
    25a4:	d1 1c       	adc	r13, r1
    25a6:	f6 01       	movw	r30, r12
    25a8:	80 80       	ld	r8, Z
    25aa:	7e 01       	movw	r14, r28
    25ac:	f2 e4       	ldi	r31, 0x42	; 66
    25ae:	ef 0e       	add	r14, r31
    25b0:	f1 1c       	adc	r15, r1
    25b2:	f7 01       	movw	r30, r14
    25b4:	70 80       	ld	r7, Z
    25b6:	8e 01       	movw	r16, r28
    25b8:	0d 5b       	subi	r16, 0xBD	; 189
    25ba:	1f 4f       	sbci	r17, 0xFF	; 255
    25bc:	f8 01       	movw	r30, r16
    25be:	90 80       	ld	r9, Z
    25c0:	80 e0       	ldi	r24, 0x00	; 0
    25c2:	98 85       	ldd	r25, Y+8	; 0x08
    25c4:	89 17       	cp	r24, r25
    25c6:	48 f4       	brcc	.+18     	; 0x25da <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    25c8:	f5 01       	movw	r30, r10
    25ca:	e8 0f       	add	r30, r24
    25cc:	f1 1d       	adc	r31, r1
    25ce:	e8 0f       	add	r30, r24
    25d0:	f1 1d       	adc	r31, r1
    25d2:	11 82       	std	Z+1, r1	; 0x01
    25d4:	10 82       	st	Z, r1
    25d6:	8f 5f       	subi	r24, 0xFF	; 255
    25d8:	f4 cf       	rjmp	.-24     	; 0x25c2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    25da:	84 b1       	in	r24, 0x04	; 4
    25dc:	f6 01       	movw	r30, r12
    25de:	90 81       	ld	r25, Z
    25e0:	89 2b       	or	r24, r25
    25e2:	84 b9       	out	0x04, r24	; 4
    25e4:	87 b1       	in	r24, 0x07	; 7
    25e6:	f7 01       	movw	r30, r14
    25e8:	90 81       	ld	r25, Z
    25ea:	89 2b       	or	r24, r25
    25ec:	87 b9       	out	0x07, r24	; 7
    25ee:	8a b1       	in	r24, 0x0a	; 10
    25f0:	f8 01       	movw	r30, r16
    25f2:	90 81       	ld	r25, Z
    25f4:	89 2b       	or	r24, r25
    25f6:	8a b9       	out	0x0a, r24	; 10
    25f8:	85 b1       	in	r24, 0x05	; 5
    25fa:	f6 01       	movw	r30, r12
    25fc:	90 81       	ld	r25, Z
    25fe:	89 2b       	or	r24, r25
    2600:	85 b9       	out	0x05, r24	; 5
    2602:	88 b1       	in	r24, 0x08	; 8
    2604:	f7 01       	movw	r30, r14
    2606:	90 81       	ld	r25, Z
    2608:	89 2b       	or	r24, r25
    260a:	88 b9       	out	0x08, r24	; 8
    260c:	8b b1       	in	r24, 0x0b	; 11
    260e:	f8 01       	movw	r30, r16
    2610:	90 81       	ld	r25, Z
    2612:	89 2b       	or	r24, r25
    2614:	8b b9       	out	0x0b, r24	; 11
    2616:	8a e0       	ldi	r24, 0x0A	; 10
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	0e 94 d7 11 	call	0x23ae	; 0x23ae <delay_us>
    261e:	94 b1       	in	r25, 0x04	; 4
    2620:	f6 01       	movw	r30, r12
    2622:	80 81       	ld	r24, Z
    2624:	80 95       	com	r24
    2626:	89 23       	and	r24, r25
    2628:	84 b9       	out	0x04, r24	; 4
    262a:	97 b1       	in	r25, 0x07	; 7
    262c:	f7 01       	movw	r30, r14
    262e:	80 81       	ld	r24, Z
    2630:	80 95       	com	r24
    2632:	89 23       	and	r24, r25
    2634:	87 b9       	out	0x07, r24	; 7
    2636:	9a b1       	in	r25, 0x0a	; 10
    2638:	f8 01       	movw	r30, r16
    263a:	80 81       	ld	r24, Z
    263c:	80 95       	com	r24
    263e:	89 23       	and	r24, r25
    2640:	8a b9       	out	0x0a, r24	; 10
    2642:	95 b1       	in	r25, 0x05	; 5
    2644:	f6 01       	movw	r30, r12
    2646:	80 81       	ld	r24, Z
    2648:	80 95       	com	r24
    264a:	89 23       	and	r24, r25
    264c:	85 b9       	out	0x05, r24	; 5
    264e:	98 b1       	in	r25, 0x08	; 8
    2650:	f7 01       	movw	r30, r14
    2652:	80 81       	ld	r24, Z
    2654:	80 95       	com	r24
    2656:	89 23       	and	r24, r25
    2658:	88 b9       	out	0x08, r24	; 8
    265a:	9b b1       	in	r25, 0x0b	; 11
    265c:	f8 01       	movw	r30, r16
    265e:	80 81       	ld	r24, Z
    2660:	80 95       	com	r24
    2662:	89 23       	and	r24, r25
    2664:	8b b9       	out	0x0b, r24	; 11
    2666:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    266a:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    266e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2672:	83 60       	ori	r24, 0x03	; 3
    2674:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2678:	82 e0       	ldi	r24, 0x02	; 2
    267a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    267e:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    2682:	80 e0       	ldi	r24, 0x00	; 0
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	2e 85       	ldd	r18, Y+14	; 0x0e
    2688:	3f 85       	ldd	r19, Y+15	; 0x0f
    268a:	82 17       	cp	r24, r18
    268c:	93 07       	cpc	r25, r19
    268e:	20 f5       	brcc	.+72     	; 0x26d8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    2690:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    2694:	2c 2d       	mov	r18, r12
    2696:	24 1b       	sub	r18, r20
    2698:	82 0f       	add	r24, r18
    269a:	91 1d       	adc	r25, r1
    269c:	03 b1       	in	r16, 0x03	; 3
    269e:	08 11       	cpse	r16, r8
    26a0:	32 c0       	rjmp	.+100    	; 0x2706 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    26a2:	f6 b0       	in	r15, 0x06	; 6
    26a4:	f7 10       	cpse	r15, r7
    26a6:	2f c0       	rjmp	.+94     	; 0x2706 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    26a8:	29 b1       	in	r18, 0x09	; 9
    26aa:	29 11       	cpse	r18, r9
    26ac:	2c c0       	rjmp	.+88     	; 0x2706 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    26ae:	10 c0       	rjmp	.+32     	; 0x26d0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    26b0:	21 2f       	mov	r18, r17
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	a9 01       	movw	r20, r18
    26b6:	44 0f       	add	r20, r20
    26b8:	55 1f       	adc	r21, r21
    26ba:	f5 01       	movw	r30, r10
    26bc:	e4 0f       	add	r30, r20
    26be:	f5 1f       	adc	r31, r21
    26c0:	60 81       	ld	r22, Z
    26c2:	71 81       	ldd	r23, Z+1	; 0x01
    26c4:	67 2b       	or	r22, r23
    26c6:	21 f1       	breq	.+72     	; 0x2710 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    26c8:	1f 5f       	subi	r17, 0xFF	; 255
    26ca:	28 85       	ldd	r18, Y+8	; 0x08
    26cc:	12 17       	cp	r17, r18
    26ce:	80 f3       	brcs	.-32     	; 0x26b0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    26d0:	7f 2c       	mov	r7, r15
    26d2:	80 2e       	mov	r8, r16
    26d4:	4c 2d       	mov	r20, r12
    26d6:	d7 cf       	rjmp	.-82     	; 0x2686 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    26d8:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    26dc:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	88 85       	ldd	r24, Y+8	; 0x08
    26e4:	28 17       	cp	r18, r24
    26e6:	30 f5       	brcc	.+76     	; 0x2734 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    26e8:	f5 01       	movw	r30, r10
    26ea:	e2 0f       	add	r30, r18
    26ec:	f1 1d       	adc	r31, r1
    26ee:	e2 0f       	add	r30, r18
    26f0:	f1 1d       	adc	r31, r1
    26f2:	80 81       	ld	r24, Z
    26f4:	91 81       	ldd	r25, Z+1	; 0x01
    26f6:	89 2b       	or	r24, r25
    26f8:	21 f4       	brne	.+8      	; 0x2702 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    26fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    26fc:	9f 85       	ldd	r25, Y+15	; 0x0f
    26fe:	91 83       	std	Z+1, r25	; 0x01
    2700:	80 83       	st	Z, r24
    2702:	2f 5f       	subi	r18, 0xFF	; 255
    2704:	ee cf       	rjmp	.-36     	; 0x26e2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    2706:	03 b1       	in	r16, 0x03	; 3
    2708:	f6 b0       	in	r15, 0x06	; 6
    270a:	99 b0       	in	r9, 0x09	; 9
    270c:	10 e0       	ldi	r17, 0x00	; 0
    270e:	dd cf       	rjmp	.-70     	; 0x26ca <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    2710:	de 01       	movw	r26, r28
    2712:	a4 0f       	add	r26, r20
    2714:	b5 1f       	adc	r27, r21
    2716:	91 96       	adiw	r26, 0x21	; 33
    2718:	0d 90       	ld	r0, X+
    271a:	bc 91       	ld	r27, X
    271c:	a0 2d       	mov	r26, r0
    271e:	4c 91       	ld	r20, X
    2720:	de 01       	movw	r26, r28
    2722:	a2 0f       	add	r26, r18
    2724:	b3 1f       	adc	r27, r19
    2726:	51 96       	adiw	r26, 0x11	; 17
    2728:	2c 91       	ld	r18, X
    272a:	42 23       	and	r20, r18
    272c:	69 f6       	brne	.-102    	; 0x26c8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    272e:	91 83       	std	Z+1, r25	; 0x01
    2730:	80 83       	st	Z, r24
    2732:	ca cf       	rjmp	.-108    	; 0x26c8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    2734:	cd b7       	in	r28, 0x3d	; 61
    2736:	de b7       	in	r29, 0x3e	; 62
    2738:	ed e0       	ldi	r30, 0x0D	; 13
    273a:	0c 94 9c 17 	jmp	0x2f38	; 0x2f38 <__epilogue_restores__+0xa>

0000273e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    273e:	ef 92       	push	r14
    2740:	ff 92       	push	r15
    2742:	0f 93       	push	r16
    2744:	1f 93       	push	r17
    2746:	cf 93       	push	r28
    2748:	df 93       	push	r29
    274a:	fc 01       	movw	r30, r24
    274c:	9b 01       	movw	r18, r22
    274e:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2752:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2756:	47 b1       	in	r20, 0x07	; 7
    2758:	18 b1       	in	r17, 0x08	; 8
    275a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    275e:	86 fd       	sbrc	r24, 6
    2760:	fc cf       	rjmp	.-8      	; 0x275a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	90 85       	ldd	r25, Z+8	; 0x08
    2766:	89 17       	cp	r24, r25
    2768:	48 f4       	brcc	.+18     	; 0x277c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    276a:	d9 01       	movw	r26, r18
    276c:	a8 0f       	add	r26, r24
    276e:	b1 1d       	adc	r27, r1
    2770:	a8 0f       	add	r26, r24
    2772:	b1 1d       	adc	r27, r1
    2774:	1d 92       	st	X+, r1
    2776:	1c 92       	st	X, r1
    2778:	8f 5f       	subi	r24, 0xFF	; 255
    277a:	f4 cf       	rjmp	.-24     	; 0x2764 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    277c:	97 b1       	in	r25, 0x07	; 7
    277e:	82 a1       	ldd	r24, Z+34	; 0x22
    2780:	80 95       	com	r24
    2782:	89 23       	and	r24, r25
    2784:	87 b9       	out	0x07, r24	; 7
    2786:	98 b1       	in	r25, 0x08	; 8
    2788:	82 a1       	ldd	r24, Z+34	; 0x22
    278a:	80 95       	com	r24
    278c:	89 23       	and	r24, r25
    278e:	88 b9       	out	0x08, r24	; 8
    2790:	87 e8       	ldi	r24, 0x87	; 135
    2792:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2796:	e1 2c       	mov	r14, r1
    2798:	81 a1       	ldd	r24, Z+33	; 0x21
    279a:	e8 16       	cp	r14, r24
    279c:	10 f0       	brcs	.+4      	; 0x27a2 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    279e:	e1 2c       	mov	r14, r1
    27a0:	29 c0       	rjmp	.+82     	; 0x27f4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    27a2:	50 e0       	ldi	r21, 0x00	; 0
    27a4:	80 85       	ldd	r24, Z+8	; 0x08
    27a6:	58 17       	cp	r21, r24
    27a8:	18 f5       	brcc	.+70     	; 0x27f0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    27aa:	a5 2f       	mov	r26, r21
    27ac:	b0 e0       	ldi	r27, 0x00	; 0
    27ae:	ef 01       	movw	r28, r30
    27b0:	ca 0f       	add	r28, r26
    27b2:	db 1f       	adc	r29, r27
    27b4:	89 89       	ldd	r24, Y+17	; 0x11
    27b6:	80 64       	ori	r24, 0x40	; 64
    27b8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    27bc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    27c0:	80 64       	ori	r24, 0x40	; 64
    27c2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    27c6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    27ca:	86 fd       	sbrc	r24, 6
    27cc:	fc cf       	rjmp	.-8      	; 0x27c6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    27ce:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    27d2:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    27d6:	aa 0f       	add	r26, r26
    27d8:	bb 1f       	adc	r27, r27
    27da:	a2 0f       	add	r26, r18
    27dc:	b3 1f       	adc	r27, r19
    27de:	8d 91       	ld	r24, X+
    27e0:	9c 91       	ld	r25, X
    27e2:	11 97       	sbiw	r26, 0x01	; 1
    27e4:	86 0f       	add	r24, r22
    27e6:	97 1f       	adc	r25, r23
    27e8:	8d 93       	st	X+, r24
    27ea:	9c 93       	st	X, r25
    27ec:	5f 5f       	subi	r21, 0xFF	; 255
    27ee:	da cf       	rjmp	.-76     	; 0x27a4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    27f0:	e3 94       	inc	r14
    27f2:	d2 cf       	rjmp	.-92     	; 0x2798 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    27f4:	80 85       	ldd	r24, Z+8	; 0x08
    27f6:	e8 16       	cp	r14, r24
    27f8:	a0 f4       	brcc	.+40     	; 0x2822 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    27fa:	e9 01       	movw	r28, r18
    27fc:	ce 0d       	add	r28, r14
    27fe:	d1 1d       	adc	r29, r1
    2800:	ce 0d       	add	r28, r14
    2802:	d1 1d       	adc	r29, r1
    2804:	61 a1       	ldd	r22, Z+33	; 0x21
    2806:	70 e0       	ldi	r23, 0x00	; 0
    2808:	cb 01       	movw	r24, r22
    280a:	95 95       	asr	r25
    280c:	87 95       	ror	r24
    280e:	a8 81       	ld	r26, Y
    2810:	b9 81       	ldd	r27, Y+1	; 0x01
    2812:	8a 0f       	add	r24, r26
    2814:	9b 1f       	adc	r25, r27
    2816:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <__udivmodhi4>
    281a:	79 83       	std	Y+1, r23	; 0x01
    281c:	68 83       	st	Y, r22
    281e:	e3 94       	inc	r14
    2820:	e9 cf       	rjmp	.-46     	; 0x27f4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    2822:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2826:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    282a:	18 b9       	out	0x08, r17	; 8
    282c:	47 b9       	out	0x07, r20	; 7
    282e:	cd b7       	in	r28, 0x3d	; 61
    2830:	de b7       	in	r29, 0x3e	; 62
    2832:	e6 e0       	ldi	r30, 0x06	; 6
    2834:	0c 94 a3 17 	jmp	0x2f46	; 0x2f46 <__epilogue_restores__+0x18>

00002838 <_ZN16PololuQTRSensors4readEPjh>:
    2838:	a0 e2       	ldi	r26, 0x20	; 32
    283a:	b0 e0       	ldi	r27, 0x00	; 0
    283c:	e2 e2       	ldi	r30, 0x22	; 34
    283e:	f4 e1       	ldi	r31, 0x14	; 20
    2840:	0c 94 86 17 	jmp	0x2f0c	; 0x2f0c <__prologue_saves__+0x16>
    2844:	8c 01       	movw	r16, r24
    2846:	7b 01       	movw	r14, r22
    2848:	d4 2e       	mov	r13, r20
    284a:	8f ef       	ldi	r24, 0xFF	; 255
    284c:	84 0f       	add	r24, r20
    284e:	82 30       	cpi	r24, 0x02	; 2
    2850:	18 f4       	brcc	.+6      	; 0x2858 <_ZN16PololuQTRSensors4readEPjh+0x20>
    2852:	c8 01       	movw	r24, r16
    2854:	0e 94 5e 12 	call	0x24bc	; 0x24bc <_ZN16PololuQTRSensors10emittersOnEv>
    2858:	d8 01       	movw	r26, r16
    285a:	50 96       	adiw	r26, 0x10	; 16
    285c:	8c 91       	ld	r24, X
    285e:	b7 01       	movw	r22, r14
    2860:	81 11       	cpse	r24, r1
    2862:	10 c0       	rjmp	.+32     	; 0x2884 <_ZN16PololuQTRSensors4readEPjh+0x4c>
    2864:	c8 01       	movw	r24, r16
    2866:	0e 94 c7 12 	call	0x258e	; 0x258e <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    286a:	c8 01       	movw	r24, r16
    286c:	0e 94 49 12 	call	0x2492	; 0x2492 <_ZN16PololuQTRSensors11emittersOffEv>
    2870:	b2 e0       	ldi	r27, 0x02	; 2
    2872:	db 12       	cpse	r13, r27
    2874:	3a c0       	rjmp	.+116    	; 0x28ea <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2876:	be 01       	movw	r22, r28
    2878:	6f 5f       	subi	r22, 0xFF	; 255
    287a:	7f 4f       	sbci	r23, 0xFF	; 255
    287c:	c8 01       	movw	r24, r16
    287e:	0e 94 c7 12 	call	0x258e	; 0x258e <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2882:	0f c0       	rjmp	.+30     	; 0x28a2 <_ZN16PololuQTRSensors4readEPjh+0x6a>
    2884:	c8 01       	movw	r24, r16
    2886:	0e 94 9f 13 	call	0x273e	; 0x273e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    288a:	c8 01       	movw	r24, r16
    288c:	0e 94 49 12 	call	0x2492	; 0x2492 <_ZN16PololuQTRSensors11emittersOffEv>
    2890:	e2 e0       	ldi	r30, 0x02	; 2
    2892:	de 12       	cpse	r13, r30
    2894:	2a c0       	rjmp	.+84     	; 0x28ea <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2896:	be 01       	movw	r22, r28
    2898:	6f 5f       	subi	r22, 0xFF	; 255
    289a:	7f 4f       	sbci	r23, 0xFF	; 255
    289c:	c8 01       	movw	r24, r16
    289e:	0e 94 9f 13 	call	0x273e	; 0x273e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    28a2:	40 e0       	ldi	r20, 0x00	; 0
    28a4:	f8 01       	movw	r30, r16
    28a6:	80 85       	ldd	r24, Z+8	; 0x08
    28a8:	48 17       	cp	r20, r24
    28aa:	f8 f4       	brcc	.+62     	; 0x28ea <_ZN16PololuQTRSensors4readEPjh+0xb2>
    28ac:	84 2f       	mov	r24, r20
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	88 0f       	add	r24, r24
    28b2:	99 1f       	adc	r25, r25
    28b4:	f7 01       	movw	r30, r14
    28b6:	e8 0f       	add	r30, r24
    28b8:	f9 1f       	adc	r31, r25
    28ba:	21 e0       	ldi	r18, 0x01	; 1
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	2c 0f       	add	r18, r28
    28c0:	3d 1f       	adc	r19, r29
    28c2:	82 0f       	add	r24, r18
    28c4:	93 1f       	adc	r25, r19
    28c6:	d8 01       	movw	r26, r16
    28c8:	1e 96       	adiw	r26, 0x0e	; 14
    28ca:	2d 91       	ld	r18, X+
    28cc:	3c 91       	ld	r19, X
    28ce:	1f 97       	sbiw	r26, 0x0f	; 15
    28d0:	dc 01       	movw	r26, r24
    28d2:	8d 91       	ld	r24, X+
    28d4:	9c 91       	ld	r25, X
    28d6:	28 1b       	sub	r18, r24
    28d8:	39 0b       	sbc	r19, r25
    28da:	80 81       	ld	r24, Z
    28dc:	91 81       	ldd	r25, Z+1	; 0x01
    28de:	82 0f       	add	r24, r18
    28e0:	93 1f       	adc	r25, r19
    28e2:	91 83       	std	Z+1, r25	; 0x01
    28e4:	80 83       	st	Z, r24
    28e6:	4f 5f       	subi	r20, 0xFF	; 255
    28e8:	dd cf       	rjmp	.-70     	; 0x28a4 <_ZN16PololuQTRSensors4readEPjh+0x6c>
    28ea:	a0 96       	adiw	r28, 0x20	; 32
    28ec:	e7 e0       	ldi	r30, 0x07	; 7
    28ee:	0c 94 a2 17 	jmp	0x2f44	; 0x2f44 <__epilogue_restores__+0x16>

000028f2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    28f2:	2f 92       	push	r2
    28f4:	3f 92       	push	r3
    28f6:	5f 92       	push	r5
    28f8:	6f 92       	push	r6
    28fa:	7f 92       	push	r7
    28fc:	8f 92       	push	r8
    28fe:	9f 92       	push	r9
    2900:	af 92       	push	r10
    2902:	bf 92       	push	r11
    2904:	cf 92       	push	r12
    2906:	df 92       	push	r13
    2908:	ef 92       	push	r14
    290a:	ff 92       	push	r15
    290c:	0f 93       	push	r16
    290e:	1f 93       	push	r17
    2910:	cf 93       	push	r28
    2912:	df 93       	push	r29
    2914:	cd b7       	in	r28, 0x3d	; 61
    2916:	de b7       	in	r29, 0x3e	; 62
    2918:	c0 56       	subi	r28, 0x60	; 96
    291a:	d1 09       	sbc	r29, r1
    291c:	0f b6       	in	r0, 0x3f	; 63
    291e:	f8 94       	cli
    2920:	de bf       	out	0x3e, r29	; 62
    2922:	0f be       	out	0x3f, r0	; 63
    2924:	cd bf       	out	0x3d, r28	; 61
    2926:	8c 01       	movw	r16, r24
    2928:	4b 01       	movw	r8, r22
    292a:	5a 01       	movw	r10, r20
    292c:	52 2e       	mov	r5, r18
    292e:	da 01       	movw	r26, r20
    2930:	8d 91       	ld	r24, X+
    2932:	9c 91       	ld	r25, X
    2934:	89 2b       	or	r24, r25
    2936:	31 f0       	breq	.+12     	; 0x2944 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x52>
    2938:	f4 01       	movw	r30, r8
    293a:	80 81       	ld	r24, Z
    293c:	91 81       	ldd	r25, Z+1	; 0x01
    293e:	89 2b       	or	r24, r25
    2940:	f1 f4       	brne	.+60     	; 0x297e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    2942:	24 c0       	rjmp	.+72     	; 0x298c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x9a>
    2944:	d8 01       	movw	r26, r16
    2946:	18 96       	adiw	r26, 0x08	; 8
    2948:	8c 91       	ld	r24, X
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	88 0f       	add	r24, r24
    294e:	99 1f       	adc	r25, r25
    2950:	0e 94 0e 1a 	call	0x341c	; 0x341c <malloc>
    2954:	f5 01       	movw	r30, r10
    2956:	91 83       	std	Z+1, r25	; 0x01
    2958:	80 83       	st	Z, r24
    295a:	00 97       	sbiw	r24, 0x00	; 0
    295c:	09 f4       	brne	.+2      	; 0x2960 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x6e>
    295e:	b1 c0       	rjmp	.+354    	; 0x2ac2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    2960:	fc 01       	movw	r30, r24
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	d8 01       	movw	r26, r16
    2968:	18 96       	adiw	r26, 0x08	; 8
    296a:	8c 91       	ld	r24, X
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	28 17       	cp	r18, r24
    2970:	39 07       	cpc	r19, r25
    2972:	14 f7       	brge	.-60     	; 0x2938 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x46>
    2974:	11 92       	st	Z+, r1
    2976:	11 92       	st	Z+, r1
    2978:	2f 5f       	subi	r18, 0xFF	; 255
    297a:	3f 4f       	sbci	r19, 0xFF	; 255
    297c:	f4 cf       	rjmp	.-24     	; 0x2966 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x74>
    297e:	e1 2c       	mov	r14, r1
    2980:	f1 2c       	mov	r15, r1
    2982:	6e 01       	movw	r12, r28
    2984:	b1 e2       	ldi	r27, 0x21	; 33
    2986:	cb 0e       	add	r12, r27
    2988:	d1 1c       	adc	r13, r1
    298a:	21 c0       	rjmp	.+66     	; 0x29ce <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    298c:	f8 01       	movw	r30, r16
    298e:	80 85       	ldd	r24, Z+8	; 0x08
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	88 0f       	add	r24, r24
    2994:	99 1f       	adc	r25, r25
    2996:	0e 94 0e 1a 	call	0x341c	; 0x341c <malloc>
    299a:	d4 01       	movw	r26, r8
    299c:	8d 93       	st	X+, r24
    299e:	9c 93       	st	X, r25
    29a0:	00 97       	sbiw	r24, 0x00	; 0
    29a2:	09 f4       	brne	.+2      	; 0x29a6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb4>
    29a4:	8e c0       	rjmp	.+284    	; 0x2ac2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    29a6:	fc 01       	movw	r30, r24
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	d8 01       	movw	r26, r16
    29ae:	18 96       	adiw	r26, 0x08	; 8
    29b0:	8c 91       	ld	r24, X
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	28 17       	cp	r18, r24
    29b6:	39 07       	cpc	r19, r25
    29b8:	14 f7       	brge	.-60     	; 0x297e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    29ba:	d8 01       	movw	r26, r16
    29bc:	1e 96       	adiw	r26, 0x0e	; 14
    29be:	8d 91       	ld	r24, X+
    29c0:	9c 91       	ld	r25, X
    29c2:	1f 97       	sbiw	r26, 0x0f	; 15
    29c4:	81 93       	st	Z+, r24
    29c6:	91 93       	st	Z+, r25
    29c8:	2f 5f       	subi	r18, 0xFF	; 255
    29ca:	3f 4f       	sbci	r19, 0xFF	; 255
    29cc:	ef cf       	rjmp	.-34     	; 0x29ac <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xba>
    29ce:	45 2d       	mov	r20, r5
    29d0:	be 01       	movw	r22, r28
    29d2:	6f 5b       	subi	r22, 0xBF	; 191
    29d4:	7f 4f       	sbci	r23, 0xFF	; 255
    29d6:	c8 01       	movw	r24, r16
    29d8:	0e 94 1c 14 	call	0x2838	; 0x2838 <_ZN16PololuQTRSensors4readEPjh>
    29dc:	f8 01       	movw	r30, r16
    29de:	60 84       	ldd	r6, Z+8	; 0x08
    29e0:	71 2c       	mov	r7, r1
    29e2:	fe 01       	movw	r30, r28
    29e4:	ef 5b       	subi	r30, 0xBF	; 191
    29e6:	ff 4f       	sbci	r31, 0xFF	; 255
    29e8:	c6 01       	movw	r24, r12
    29ea:	9e 01       	movw	r18, r28
    29ec:	2f 5f       	subi	r18, 0xFF	; 255
    29ee:	3f 4f       	sbci	r19, 0xFF	; 255
    29f0:	19 01       	movw	r2, r18
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	26 15       	cp	r18, r6
    29f8:	37 05       	cpc	r19, r7
    29fa:	4c f5       	brge	.+82     	; 0x2a4e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x15c>
    29fc:	e1 14       	cp	r14, r1
    29fe:	f1 04       	cpc	r15, r1
    2a00:	89 f0       	breq	.+34     	; 0x2a24 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    2a02:	dc 01       	movw	r26, r24
    2a04:	6d 91       	ld	r22, X+
    2a06:	7c 91       	ld	r23, X
    2a08:	40 81       	ld	r20, Z
    2a0a:	51 81       	ldd	r21, Z+1	; 0x01
    2a0c:	64 17       	cp	r22, r20
    2a0e:	75 07       	cpc	r23, r21
    2a10:	48 f0       	brcs	.+18     	; 0x2a24 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    2a12:	d1 01       	movw	r26, r2
    2a14:	6d 91       	ld	r22, X+
    2a16:	7c 91       	ld	r23, X
    2a18:	40 81       	ld	r20, Z
    2a1a:	51 81       	ldd	r21, Z+1	; 0x01
    2a1c:	46 17       	cp	r20, r22
    2a1e:	57 07       	cpc	r21, r23
    2a20:	48 f0       	brcs	.+18     	; 0x2a34 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x142>
    2a22:	0d c0       	rjmp	.+26     	; 0x2a3e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x14c>
    2a24:	40 81       	ld	r20, Z
    2a26:	51 81       	ldd	r21, Z+1	; 0x01
    2a28:	dc 01       	movw	r26, r24
    2a2a:	4d 93       	st	X+, r20
    2a2c:	5c 93       	st	X, r21
    2a2e:	e1 14       	cp	r14, r1
    2a30:	f1 04       	cpc	r15, r1
    2a32:	79 f7       	brne	.-34     	; 0x2a12 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x120>
    2a34:	40 81       	ld	r20, Z
    2a36:	51 81       	ldd	r21, Z+1	; 0x01
    2a38:	d1 01       	movw	r26, r2
    2a3a:	4d 93       	st	X+, r20
    2a3c:	5c 93       	st	X, r21
    2a3e:	2f 5f       	subi	r18, 0xFF	; 255
    2a40:	3f 4f       	sbci	r19, 0xFF	; 255
    2a42:	b2 e0       	ldi	r27, 0x02	; 2
    2a44:	2b 0e       	add	r2, r27
    2a46:	31 1c       	adc	r3, r1
    2a48:	32 96       	adiw	r30, 0x02	; 2
    2a4a:	02 96       	adiw	r24, 0x02	; 2
    2a4c:	d4 cf       	rjmp	.-88     	; 0x29f6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x104>
    2a4e:	ef ef       	ldi	r30, 0xFF	; 255
    2a50:	ee 1a       	sub	r14, r30
    2a52:	fe 0a       	sbc	r15, r30
    2a54:	fa e0       	ldi	r31, 0x0A	; 10
    2a56:	ef 16       	cp	r14, r31
    2a58:	f1 04       	cpc	r15, r1
    2a5a:	09 f0       	breq	.+2      	; 0x2a5e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x16c>
    2a5c:	b8 cf       	rjmp	.-144    	; 0x29ce <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    2a5e:	9e 01       	movw	r18, r28
    2a60:	2f 5f       	subi	r18, 0xFF	; 255
    2a62:	3f 4f       	sbci	r19, 0xFF	; 255
    2a64:	79 01       	movw	r14, r18
    2a66:	36 01       	movw	r6, r12
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	f8 01       	movw	r30, r16
    2a6e:	20 85       	ldd	r18, Z+8	; 0x08
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	82 17       	cp	r24, r18
    2a74:	93 07       	cpc	r25, r19
    2a76:	2c f5       	brge	.+74     	; 0x2ac2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    2a78:	d7 01       	movw	r26, r14
    2a7a:	2d 91       	ld	r18, X+
    2a7c:	3d 91       	ld	r19, X+
    2a7e:	7d 01       	movw	r14, r26
    2a80:	b3 01       	movw	r22, r6
    2a82:	6c 19       	sub	r22, r12
    2a84:	7d 09       	sbc	r23, r13
    2a86:	d5 01       	movw	r26, r10
    2a88:	ed 91       	ld	r30, X+
    2a8a:	fc 91       	ld	r31, X
    2a8c:	e6 0f       	add	r30, r22
    2a8e:	f7 1f       	adc	r31, r23
    2a90:	40 81       	ld	r20, Z
    2a92:	51 81       	ldd	r21, Z+1	; 0x01
    2a94:	42 17       	cp	r20, r18
    2a96:	53 07       	cpc	r21, r19
    2a98:	10 f4       	brcc	.+4      	; 0x2a9e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1ac>
    2a9a:	31 83       	std	Z+1, r19	; 0x01
    2a9c:	20 83       	st	Z, r18
    2a9e:	f3 01       	movw	r30, r6
    2aa0:	21 91       	ld	r18, Z+
    2aa2:	31 91       	ld	r19, Z+
    2aa4:	3f 01       	movw	r6, r30
    2aa6:	d4 01       	movw	r26, r8
    2aa8:	ed 91       	ld	r30, X+
    2aaa:	fc 91       	ld	r31, X
    2aac:	e6 0f       	add	r30, r22
    2aae:	f7 1f       	adc	r31, r23
    2ab0:	40 81       	ld	r20, Z
    2ab2:	51 81       	ldd	r21, Z+1	; 0x01
    2ab4:	24 17       	cp	r18, r20
    2ab6:	35 07       	cpc	r19, r21
    2ab8:	10 f4       	brcc	.+4      	; 0x2abe <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1cc>
    2aba:	31 83       	std	Z+1, r19	; 0x01
    2abc:	20 83       	st	Z, r18
    2abe:	01 96       	adiw	r24, 0x01	; 1
    2ac0:	d5 cf       	rjmp	.-86     	; 0x2a6c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17a>
    2ac2:	c0 5a       	subi	r28, 0xA0	; 160
    2ac4:	df 4f       	sbci	r29, 0xFF	; 255
    2ac6:	0f b6       	in	r0, 0x3f	; 63
    2ac8:	f8 94       	cli
    2aca:	de bf       	out	0x3e, r29	; 62
    2acc:	0f be       	out	0x3f, r0	; 63
    2ace:	cd bf       	out	0x3d, r28	; 61
    2ad0:	df 91       	pop	r29
    2ad2:	cf 91       	pop	r28
    2ad4:	1f 91       	pop	r17
    2ad6:	0f 91       	pop	r16
    2ad8:	ff 90       	pop	r15
    2ada:	ef 90       	pop	r14
    2adc:	df 90       	pop	r13
    2ade:	cf 90       	pop	r12
    2ae0:	bf 90       	pop	r11
    2ae2:	af 90       	pop	r10
    2ae4:	9f 90       	pop	r9
    2ae6:	8f 90       	pop	r8
    2ae8:	7f 90       	pop	r7
    2aea:	6f 90       	pop	r6
    2aec:	5f 90       	pop	r5
    2aee:	3f 90       	pop	r3
    2af0:	2f 90       	pop	r2
    2af2:	08 95       	ret

00002af4 <_ZN16PololuQTRSensors9calibrateEh>:
    2af4:	1f 93       	push	r17
    2af6:	cf 93       	push	r28
    2af8:	df 93       	push	r29
    2afa:	ec 01       	movw	r28, r24
    2afc:	16 2f       	mov	r17, r22
    2afe:	8f ef       	ldi	r24, 0xFF	; 255
    2b00:	86 0f       	add	r24, r22
    2b02:	82 30       	cpi	r24, 0x02	; 2
    2b04:	18 f0       	brcs	.+6      	; 0x2b0c <_ZN16PololuQTRSensors9calibrateEh+0x18>
    2b06:	66 23       	and	r22, r22
    2b08:	59 f0       	breq	.+22     	; 0x2b20 <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    2b0a:	14 c0       	rjmp	.+40     	; 0x2b34 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    2b0c:	21 e0       	ldi	r18, 0x01	; 1
    2b0e:	ae 01       	movw	r20, r28
    2b10:	4e 5f       	subi	r20, 0xFE	; 254
    2b12:	5f 4f       	sbci	r21, 0xFF	; 255
    2b14:	be 01       	movw	r22, r28
    2b16:	ce 01       	movw	r24, r28
    2b18:	0e 94 79 14 	call	0x28f2	; 0x28f2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    2b1c:	12 30       	cpi	r17, 0x02	; 2
    2b1e:	51 f4       	brne	.+20     	; 0x2b34 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    2b20:	ae 01       	movw	r20, r28
    2b22:	4a 5f       	subi	r20, 0xFA	; 250
    2b24:	5f 4f       	sbci	r21, 0xFF	; 255
    2b26:	be 01       	movw	r22, r28
    2b28:	6c 5f       	subi	r22, 0xFC	; 252
    2b2a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	ce 01       	movw	r24, r28
    2b30:	0e 94 79 14 	call	0x28f2	; 0x28f2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    2b34:	df 91       	pop	r29
    2b36:	cf 91       	pop	r28
    2b38:	1f 91       	pop	r17
    2b3a:	08 95       	ret

00002b3c <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    2b3c:	a0 e0       	ldi	r26, 0x00	; 0
    2b3e:	b0 e0       	ldi	r27, 0x00	; 0
    2b40:	e4 ea       	ldi	r30, 0xA4	; 164
    2b42:	f5 e1       	ldi	r31, 0x15	; 21
    2b44:	0c 94 84 17 	jmp	0x2f08	; 0x2f08 <__prologue_saves__+0x12>
    2b48:	ec 01       	movw	r28, r24
    2b4a:	8b 01       	movw	r16, r22
    2b4c:	b4 2e       	mov	r11, r20
    2b4e:	84 2f       	mov	r24, r20
    2b50:	8d 7f       	andi	r24, 0xFD	; 253
    2b52:	51 f4       	brne	.+20     	; 0x2b68 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    2b54:	8c 81       	ldd	r24, Y+4	; 0x04
    2b56:	9d 81       	ldd	r25, Y+5	; 0x05
    2b58:	89 2b       	or	r24, r25
    2b5a:	09 f4       	brne	.+2      	; 0x2b5e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x22>
    2b5c:	97 c0       	rjmp	.+302    	; 0x2c8c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2b5e:	8e 81       	ldd	r24, Y+6	; 0x06
    2b60:	9f 81       	ldd	r25, Y+7	; 0x07
    2b62:	89 2b       	or	r24, r25
    2b64:	09 f4       	brne	.+2      	; 0x2b68 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    2b66:	92 c0       	rjmp	.+292    	; 0x2c8c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2b68:	8f ef       	ldi	r24, 0xFF	; 255
    2b6a:	8b 0d       	add	r24, r11
    2b6c:	82 30       	cpi	r24, 0x02	; 2
    2b6e:	50 f4       	brcc	.+20     	; 0x2b84 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    2b70:	88 81       	ld	r24, Y
    2b72:	99 81       	ldd	r25, Y+1	; 0x01
    2b74:	89 2b       	or	r24, r25
    2b76:	09 f4       	brne	.+2      	; 0x2b7a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3e>
    2b78:	89 c0       	rjmp	.+274    	; 0x2c8c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b7e:	89 2b       	or	r24, r25
    2b80:	09 f4       	brne	.+2      	; 0x2b84 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    2b82:	84 c0       	rjmp	.+264    	; 0x2c8c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2b84:	4b 2d       	mov	r20, r11
    2b86:	b8 01       	movw	r22, r16
    2b88:	ce 01       	movw	r24, r28
    2b8a:	0e 94 1c 14 	call	0x2838	; 0x2838 <_ZN16PololuQTRSensors4readEPjh>
    2b8e:	78 01       	movw	r14, r16
    2b90:	00 e0       	ldi	r16, 0x00	; 0
    2b92:	10 e0       	ldi	r17, 0x00	; 0
    2b94:	c1 2c       	mov	r12, r1
    2b96:	d1 2c       	mov	r13, r1
    2b98:	88 85       	ldd	r24, Y+8	; 0x08
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	c8 16       	cp	r12, r24
    2b9e:	d9 06       	cpc	r13, r25
    2ba0:	0c f0       	brlt	.+2      	; 0x2ba4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x68>
    2ba2:	74 c0       	rjmp	.+232    	; 0x2c8c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	b8 12       	cpse	r11, r24
    2ba8:	0a c0       	rjmp	.+20     	; 0x2bbe <_ZN16PololuQTRSensors14readCalibratedEPjh+0x82>
    2baa:	ea 81       	ldd	r30, Y+2	; 0x02
    2bac:	fb 81       	ldd	r31, Y+3	; 0x03
    2bae:	e0 0f       	add	r30, r16
    2bb0:	f1 1f       	adc	r31, r17
    2bb2:	01 90       	ld	r0, Z+
    2bb4:	f0 81       	ld	r31, Z
    2bb6:	e0 2d       	mov	r30, r0
    2bb8:	a8 81       	ld	r26, Y
    2bba:	b9 81       	ldd	r27, Y+1	; 0x01
    2bbc:	0d c0       	rjmp	.+26     	; 0x2bd8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x9c>
    2bbe:	8c 81       	ldd	r24, Y+4	; 0x04
    2bc0:	9d 81       	ldd	r25, Y+5	; 0x05
    2bc2:	2e 81       	ldd	r18, Y+6	; 0x06
    2bc4:	3f 81       	ldd	r19, Y+7	; 0x07
    2bc6:	b1 10       	cpse	r11, r1
    2bc8:	0c c0       	rjmp	.+24     	; 0x2be2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    2bca:	f9 01       	movw	r30, r18
    2bcc:	e0 0f       	add	r30, r16
    2bce:	f1 1f       	adc	r31, r17
    2bd0:	01 90       	ld	r0, Z+
    2bd2:	f0 81       	ld	r31, Z
    2bd4:	e0 2d       	mov	r30, r0
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	a0 0f       	add	r26, r16
    2bda:	b1 1f       	adc	r27, r17
    2bdc:	8d 91       	ld	r24, X+
    2bde:	9c 91       	ld	r25, X
    2be0:	28 c0       	rjmp	.+80     	; 0x2c32 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    2be2:	fc 01       	movw	r30, r24
    2be4:	e0 0f       	add	r30, r16
    2be6:	f1 1f       	adc	r31, r17
    2be8:	40 81       	ld	r20, Z
    2bea:	51 81       	ldd	r21, Z+1	; 0x01
    2bec:	e8 81       	ld	r30, Y
    2bee:	f9 81       	ldd	r31, Y+1	; 0x01
    2bf0:	e0 0f       	add	r30, r16
    2bf2:	f1 1f       	adc	r31, r17
    2bf4:	80 81       	ld	r24, Z
    2bf6:	91 81       	ldd	r25, Z+1	; 0x01
    2bf8:	ee 85       	ldd	r30, Y+14	; 0x0e
    2bfa:	ff 85       	ldd	r31, Y+15	; 0x0f
    2bfc:	48 17       	cp	r20, r24
    2bfe:	59 07       	cpc	r21, r25
    2c00:	10 f4       	brcc	.+4      	; 0x2c06 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xca>
    2c02:	cf 01       	movw	r24, r30
    2c04:	04 c0       	rjmp	.+8      	; 0x2c0e <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd2>
    2c06:	8e 0f       	add	r24, r30
    2c08:	9f 1f       	adc	r25, r31
    2c0a:	84 1b       	sub	r24, r20
    2c0c:	95 0b       	sbc	r25, r21
    2c0e:	d9 01       	movw	r26, r18
    2c10:	a0 0f       	add	r26, r16
    2c12:	b1 1f       	adc	r27, r17
    2c14:	2d 91       	ld	r18, X+
    2c16:	3c 91       	ld	r19, X
    2c18:	aa 81       	ldd	r26, Y+2	; 0x02
    2c1a:	bb 81       	ldd	r27, Y+3	; 0x03
    2c1c:	a0 0f       	add	r26, r16
    2c1e:	b1 1f       	adc	r27, r17
    2c20:	4d 91       	ld	r20, X+
    2c22:	5c 91       	ld	r21, X
    2c24:	24 17       	cp	r18, r20
    2c26:	35 07       	cpc	r19, r21
    2c28:	20 f0       	brcs	.+8      	; 0x2c32 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    2c2a:	e4 0f       	add	r30, r20
    2c2c:	f5 1f       	adc	r31, r21
    2c2e:	e2 1b       	sub	r30, r18
    2c30:	f3 0b       	sbc	r31, r19
    2c32:	e8 1b       	sub	r30, r24
    2c34:	f9 0b       	sbc	r31, r25
    2c36:	a9 f0       	breq	.+42     	; 0x2c62 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x126>
    2c38:	d7 01       	movw	r26, r14
    2c3a:	2d 91       	ld	r18, X+
    2c3c:	3c 91       	ld	r19, X
    2c3e:	40 e0       	ldi	r20, 0x00	; 0
    2c40:	50 e0       	ldi	r21, 0x00	; 0
    2c42:	28 1b       	sub	r18, r24
    2c44:	39 0b       	sbc	r19, r25
    2c46:	41 09       	sbc	r20, r1
    2c48:	51 09       	sbc	r21, r1
    2c4a:	a8 ee       	ldi	r26, 0xE8	; 232
    2c4c:	b3 e0       	ldi	r27, 0x03	; 3
    2c4e:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <__muluhisi3>
    2c52:	9f 01       	movw	r18, r30
    2c54:	40 e0       	ldi	r20, 0x00	; 0
    2c56:	50 e0       	ldi	r21, 0x00	; 0
    2c58:	0e 94 34 17 	call	0x2e68	; 0x2e68 <__divmodsi4>
    2c5c:	37 fd       	sbrc	r19, 7
    2c5e:	0a c0       	rjmp	.+20     	; 0x2c74 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x138>
    2c60:	02 c0       	rjmp	.+4      	; 0x2c66 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x12a>
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	29 3e       	cpi	r18, 0xE9	; 233
    2c68:	b3 e0       	ldi	r27, 0x03	; 3
    2c6a:	3b 07       	cpc	r19, r27
    2c6c:	2c f0       	brlt	.+10     	; 0x2c78 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    2c6e:	28 ee       	ldi	r18, 0xE8	; 232
    2c70:	33 e0       	ldi	r19, 0x03	; 3
    2c72:	02 c0       	rjmp	.+4      	; 0x2c78 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	f7 01       	movw	r30, r14
    2c7a:	21 93       	st	Z+, r18
    2c7c:	31 93       	st	Z+, r19
    2c7e:	7f 01       	movw	r14, r30
    2c80:	ff ef       	ldi	r31, 0xFF	; 255
    2c82:	cf 1a       	sub	r12, r31
    2c84:	df 0a       	sbc	r13, r31
    2c86:	0e 5f       	subi	r16, 0xFE	; 254
    2c88:	1f 4f       	sbci	r17, 0xFF	; 255
    2c8a:	86 cf       	rjmp	.-244    	; 0x2b98 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x5c>
    2c8c:	cd b7       	in	r28, 0x3d	; 61
    2c8e:	de b7       	in	r29, 0x3e	; 62
    2c90:	e9 e0       	ldi	r30, 0x09	; 9
    2c92:	0c 94 a0 17 	jmp	0x2f40	; 0x2f40 <__epilogue_restores__+0x12>

00002c96 <_ZN16PololuQTRSensors8readLineEPjhh>:
    2c96:	a0 e0       	ldi	r26, 0x00	; 0
    2c98:	b0 e0       	ldi	r27, 0x00	; 0
    2c9a:	e1 e5       	ldi	r30, 0x51	; 81
    2c9c:	f6 e1       	ldi	r31, 0x16	; 22
    2c9e:	0c 94 7b 17 	jmp	0x2ef6	; 0x2ef6 <__prologue_saves__>
    2ca2:	ec 01       	movw	r28, r24
    2ca4:	8b 01       	movw	r16, r22
    2ca6:	82 2e       	mov	r8, r18
    2ca8:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <_ZN16PololuQTRSensors14readCalibratedEPjh>
    2cac:	28 84       	ldd	r2, Y+8	; 0x08
    2cae:	e8 01       	movw	r28, r16
    2cb0:	41 2c       	mov	r4, r1
    2cb2:	51 2c       	mov	r5, r1
    2cb4:	32 01       	movw	r6, r4
    2cb6:	00 e0       	ldi	r16, 0x00	; 0
    2cb8:	10 e0       	ldi	r17, 0x00	; 0
    2cba:	c1 2c       	mov	r12, r1
    2cbc:	d1 2c       	mov	r13, r1
    2cbe:	76 01       	movw	r14, r12
    2cc0:	31 2c       	mov	r3, r1
    2cc2:	91 2c       	mov	r9, r1
    2cc4:	58 ee       	ldi	r21, 0xE8	; 232
    2cc6:	a5 2e       	mov	r10, r21
    2cc8:	53 e0       	ldi	r21, 0x03	; 3
    2cca:	b5 2e       	mov	r11, r21
    2ccc:	92 14       	cp	r9, r2
    2cce:	21 f1       	breq	.+72     	; 0x2d18 <_ZN16PololuQTRSensors8readLineEPjhh+0x82>
    2cd0:	e9 91       	ld	r30, Y+
    2cd2:	f9 91       	ld	r31, Y+
    2cd4:	88 20       	and	r8, r8
    2cd6:	21 f0       	breq	.+8      	; 0x2ce0 <_ZN16PololuQTRSensors8readLineEPjhh+0x4a>
    2cd8:	c5 01       	movw	r24, r10
    2cda:	8e 1b       	sub	r24, r30
    2cdc:	9f 0b       	sbc	r25, r31
    2cde:	fc 01       	movw	r30, r24
    2ce0:	e9 3c       	cpi	r30, 0xC9	; 201
    2ce2:	f1 05       	cpc	r31, r1
    2ce4:	24 f4       	brge	.+8      	; 0x2cee <_ZN16PololuQTRSensors8readLineEPjhh+0x58>
    2ce6:	e3 33       	cpi	r30, 0x33	; 51
    2ce8:	f1 05       	cpc	r31, r1
    2cea:	74 f0       	brlt	.+28     	; 0x2d08 <_ZN16PololuQTRSensors8readLineEPjhh+0x72>
    2cec:	02 c0       	rjmp	.+4      	; 0x2cf2 <_ZN16PololuQTRSensors8readLineEPjhh+0x5c>
    2cee:	33 24       	eor	r3, r3
    2cf0:	33 94       	inc	r3
    2cf2:	df 01       	movw	r26, r30
    2cf4:	a3 01       	movw	r20, r6
    2cf6:	92 01       	movw	r18, r4
    2cf8:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <__mulshisi3>
    2cfc:	c6 0e       	add	r12, r22
    2cfe:	d7 1e       	adc	r13, r23
    2d00:	e8 1e       	adc	r14, r24
    2d02:	f9 1e       	adc	r15, r25
    2d04:	0e 0f       	add	r16, r30
    2d06:	1f 1f       	adc	r17, r31
    2d08:	93 94       	inc	r9
    2d0a:	98 ee       	ldi	r25, 0xE8	; 232
    2d0c:	49 0e       	add	r4, r25
    2d0e:	93 e0       	ldi	r25, 0x03	; 3
    2d10:	59 1e       	adc	r5, r25
    2d12:	61 1c       	adc	r6, r1
    2d14:	71 1c       	adc	r7, r1
    2d16:	da cf       	rjmp	.-76     	; 0x2ccc <_ZN16PololuQTRSensors8readLineEPjhh+0x36>
    2d18:	31 10       	cpse	r3, r1
    2d1a:	1e c0       	rjmp	.+60     	; 0x2d58 <_ZN16PololuQTRSensors8readLineEPjhh+0xc2>
    2d1c:	49 2d       	mov	r20, r9
    2d1e:	50 e0       	ldi	r21, 0x00	; 0
    2d20:	41 50       	subi	r20, 0x01	; 1
    2d22:	51 09       	sbc	r21, r1
    2d24:	24 ef       	ldi	r18, 0xF4	; 244
    2d26:	31 e0       	ldi	r19, 0x01	; 1
    2d28:	42 9f       	mul	r20, r18
    2d2a:	c0 01       	movw	r24, r0
    2d2c:	43 9f       	mul	r20, r19
    2d2e:	90 0d       	add	r25, r0
    2d30:	52 9f       	mul	r21, r18
    2d32:	90 0d       	add	r25, r0
    2d34:	11 24       	eor	r1, r1
    2d36:	20 91 e5 01 	lds	r18, 0x01E5	; 0x8001e5 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    2d3a:	30 91 e6 01 	lds	r19, 0x01E6	; 0x8001e6 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    2d3e:	28 17       	cp	r18, r24
    2d40:	39 07       	cpc	r19, r25
    2d42:	b4 f0       	brlt	.+44     	; 0x2d70 <_ZN16PololuQTRSensors8readLineEPjhh+0xda>
    2d44:	88 ee       	ldi	r24, 0xE8	; 232
    2d46:	93 e0       	ldi	r25, 0x03	; 3
    2d48:	48 9f       	mul	r20, r24
    2d4a:	90 01       	movw	r18, r0
    2d4c:	49 9f       	mul	r20, r25
    2d4e:	30 0d       	add	r19, r0
    2d50:	58 9f       	mul	r21, r24
    2d52:	30 0d       	add	r19, r0
    2d54:	11 24       	eor	r1, r1
    2d56:	0e c0       	rjmp	.+28     	; 0x2d74 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    2d58:	98 01       	movw	r18, r16
    2d5a:	40 e0       	ldi	r20, 0x00	; 0
    2d5c:	50 e0       	ldi	r21, 0x00	; 0
    2d5e:	c7 01       	movw	r24, r14
    2d60:	b6 01       	movw	r22, r12
    2d62:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__udivmodsi4>
    2d66:	30 93 e6 01 	sts	0x01E6, r19	; 0x8001e6 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    2d6a:	20 93 e5 01 	sts	0x01E5, r18	; 0x8001e5 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    2d6e:	02 c0       	rjmp	.+4      	; 0x2d74 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    2d70:	20 e0       	ldi	r18, 0x00	; 0
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	c9 01       	movw	r24, r18
    2d76:	cd b7       	in	r28, 0x3d	; 61
    2d78:	de b7       	in	r29, 0x3e	; 62
    2d7a:	e2 e1       	ldi	r30, 0x12	; 18
    2d7c:	0c 94 97 17 	jmp	0x2f2e	; 0x2f2e <__epilogue_restores__>

00002d80 <_ZN16PololuQTRSensorsD1Ev>:
    2d80:	cf 93       	push	r28
    2d82:	df 93       	push	r29
    2d84:	ec 01       	movw	r28, r24
    2d86:	8a 81       	ldd	r24, Y+2	; 0x02
    2d88:	9b 81       	ldd	r25, Y+3	; 0x03
    2d8a:	00 97       	sbiw	r24, 0x00	; 0
    2d8c:	11 f0       	breq	.+4      	; 0x2d92 <_ZN16PololuQTRSensorsD1Ev+0x12>
    2d8e:	0e 94 a6 1a 	call	0x354c	; 0x354c <free>
    2d92:	8e 81       	ldd	r24, Y+6	; 0x06
    2d94:	9f 81       	ldd	r25, Y+7	; 0x07
    2d96:	00 97       	sbiw	r24, 0x00	; 0
    2d98:	11 f0       	breq	.+4      	; 0x2d9e <_ZN16PololuQTRSensorsD1Ev+0x1e>
    2d9a:	0e 94 a6 1a 	call	0x354c	; 0x354c <free>
    2d9e:	88 81       	ld	r24, Y
    2da0:	99 81       	ldd	r25, Y+1	; 0x01
    2da2:	00 97       	sbiw	r24, 0x00	; 0
    2da4:	11 f0       	breq	.+4      	; 0x2daa <_ZN16PololuQTRSensorsD1Ev+0x2a>
    2da6:	0e 94 a6 1a 	call	0x354c	; 0x354c <free>
    2daa:	8c 81       	ldd	r24, Y+4	; 0x04
    2dac:	9d 81       	ldd	r25, Y+5	; 0x05
    2dae:	00 97       	sbiw	r24, 0x00	; 0
    2db0:	11 f0       	breq	.+4      	; 0x2db6 <_ZN16PololuQTRSensorsD1Ev+0x36>
    2db2:	0e 94 a6 1a 	call	0x354c	; 0x354c <free>
    2db6:	df 91       	pop	r29
    2db8:	cf 91       	pop	r28
    2dba:	08 95       	ret

00002dbc <__udivmodqi4>:
    2dbc:	99 1b       	sub	r25, r25
    2dbe:	79 e0       	ldi	r23, 0x09	; 9
    2dc0:	04 c0       	rjmp	.+8      	; 0x2dca <__udivmodqi4_ep>

00002dc2 <__udivmodqi4_loop>:
    2dc2:	99 1f       	adc	r25, r25
    2dc4:	96 17       	cp	r25, r22
    2dc6:	08 f0       	brcs	.+2      	; 0x2dca <__udivmodqi4_ep>
    2dc8:	96 1b       	sub	r25, r22

00002dca <__udivmodqi4_ep>:
    2dca:	88 1f       	adc	r24, r24
    2dcc:	7a 95       	dec	r23
    2dce:	c9 f7       	brne	.-14     	; 0x2dc2 <__udivmodqi4_loop>
    2dd0:	80 95       	com	r24
    2dd2:	08 95       	ret

00002dd4 <__udivmodhi4>:
    2dd4:	aa 1b       	sub	r26, r26
    2dd6:	bb 1b       	sub	r27, r27
    2dd8:	51 e1       	ldi	r21, 0x11	; 17
    2dda:	07 c0       	rjmp	.+14     	; 0x2dea <__udivmodhi4_ep>

00002ddc <__udivmodhi4_loop>:
    2ddc:	aa 1f       	adc	r26, r26
    2dde:	bb 1f       	adc	r27, r27
    2de0:	a6 17       	cp	r26, r22
    2de2:	b7 07       	cpc	r27, r23
    2de4:	10 f0       	brcs	.+4      	; 0x2dea <__udivmodhi4_ep>
    2de6:	a6 1b       	sub	r26, r22
    2de8:	b7 0b       	sbc	r27, r23

00002dea <__udivmodhi4_ep>:
    2dea:	88 1f       	adc	r24, r24
    2dec:	99 1f       	adc	r25, r25
    2dee:	5a 95       	dec	r21
    2df0:	a9 f7       	brne	.-22     	; 0x2ddc <__udivmodhi4_loop>
    2df2:	80 95       	com	r24
    2df4:	90 95       	com	r25
    2df6:	bc 01       	movw	r22, r24
    2df8:	cd 01       	movw	r24, r26
    2dfa:	08 95       	ret

00002dfc <__divmodhi4>:
    2dfc:	97 fb       	bst	r25, 7
    2dfe:	07 2e       	mov	r0, r23
    2e00:	16 f4       	brtc	.+4      	; 0x2e06 <__divmodhi4+0xa>
    2e02:	00 94       	com	r0
    2e04:	07 d0       	rcall	.+14     	; 0x2e14 <__divmodhi4_neg1>
    2e06:	77 fd       	sbrc	r23, 7
    2e08:	09 d0       	rcall	.+18     	; 0x2e1c <__divmodhi4_neg2>
    2e0a:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <__udivmodhi4>
    2e0e:	07 fc       	sbrc	r0, 7
    2e10:	05 d0       	rcall	.+10     	; 0x2e1c <__divmodhi4_neg2>
    2e12:	3e f4       	brtc	.+14     	; 0x2e22 <__divmodhi4_exit>

00002e14 <__divmodhi4_neg1>:
    2e14:	90 95       	com	r25
    2e16:	81 95       	neg	r24
    2e18:	9f 4f       	sbci	r25, 0xFF	; 255
    2e1a:	08 95       	ret

00002e1c <__divmodhi4_neg2>:
    2e1c:	70 95       	com	r23
    2e1e:	61 95       	neg	r22
    2e20:	7f 4f       	sbci	r23, 0xFF	; 255

00002e22 <__divmodhi4_exit>:
    2e22:	08 95       	ret

00002e24 <__udivmodsi4>:
    2e24:	a1 e2       	ldi	r26, 0x21	; 33
    2e26:	1a 2e       	mov	r1, r26
    2e28:	aa 1b       	sub	r26, r26
    2e2a:	bb 1b       	sub	r27, r27
    2e2c:	fd 01       	movw	r30, r26
    2e2e:	0d c0       	rjmp	.+26     	; 0x2e4a <__udivmodsi4_ep>

00002e30 <__udivmodsi4_loop>:
    2e30:	aa 1f       	adc	r26, r26
    2e32:	bb 1f       	adc	r27, r27
    2e34:	ee 1f       	adc	r30, r30
    2e36:	ff 1f       	adc	r31, r31
    2e38:	a2 17       	cp	r26, r18
    2e3a:	b3 07       	cpc	r27, r19
    2e3c:	e4 07       	cpc	r30, r20
    2e3e:	f5 07       	cpc	r31, r21
    2e40:	20 f0       	brcs	.+8      	; 0x2e4a <__udivmodsi4_ep>
    2e42:	a2 1b       	sub	r26, r18
    2e44:	b3 0b       	sbc	r27, r19
    2e46:	e4 0b       	sbc	r30, r20
    2e48:	f5 0b       	sbc	r31, r21

00002e4a <__udivmodsi4_ep>:
    2e4a:	66 1f       	adc	r22, r22
    2e4c:	77 1f       	adc	r23, r23
    2e4e:	88 1f       	adc	r24, r24
    2e50:	99 1f       	adc	r25, r25
    2e52:	1a 94       	dec	r1
    2e54:	69 f7       	brne	.-38     	; 0x2e30 <__udivmodsi4_loop>
    2e56:	60 95       	com	r22
    2e58:	70 95       	com	r23
    2e5a:	80 95       	com	r24
    2e5c:	90 95       	com	r25
    2e5e:	9b 01       	movw	r18, r22
    2e60:	ac 01       	movw	r20, r24
    2e62:	bd 01       	movw	r22, r26
    2e64:	cf 01       	movw	r24, r30
    2e66:	08 95       	ret

00002e68 <__divmodsi4>:
    2e68:	05 2e       	mov	r0, r21
    2e6a:	97 fb       	bst	r25, 7
    2e6c:	1e f4       	brtc	.+6      	; 0x2e74 <__divmodsi4+0xc>
    2e6e:	00 94       	com	r0
    2e70:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__negsi2>
    2e74:	57 fd       	sbrc	r21, 7
    2e76:	07 d0       	rcall	.+14     	; 0x2e86 <__divmodsi4_neg2>
    2e78:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__udivmodsi4>
    2e7c:	07 fc       	sbrc	r0, 7
    2e7e:	03 d0       	rcall	.+6      	; 0x2e86 <__divmodsi4_neg2>
    2e80:	4e f4       	brtc	.+18     	; 0x2e94 <__divmodsi4_exit>
    2e82:	0c 94 4b 17 	jmp	0x2e96	; 0x2e96 <__negsi2>

00002e86 <__divmodsi4_neg2>:
    2e86:	50 95       	com	r21
    2e88:	40 95       	com	r20
    2e8a:	30 95       	com	r19
    2e8c:	21 95       	neg	r18
    2e8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e90:	4f 4f       	sbci	r20, 0xFF	; 255
    2e92:	5f 4f       	sbci	r21, 0xFF	; 255

00002e94 <__divmodsi4_exit>:
    2e94:	08 95       	ret

00002e96 <__negsi2>:
    2e96:	90 95       	com	r25
    2e98:	80 95       	com	r24
    2e9a:	70 95       	com	r23
    2e9c:	61 95       	neg	r22
    2e9e:	7f 4f       	sbci	r23, 0xFF	; 255
    2ea0:	8f 4f       	sbci	r24, 0xFF	; 255
    2ea2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ea4:	08 95       	ret

00002ea6 <__tablejump2__>:
    2ea6:	ee 0f       	add	r30, r30
    2ea8:	ff 1f       	adc	r31, r31
    2eaa:	05 90       	lpm	r0, Z+
    2eac:	f4 91       	lpm	r31, Z
    2eae:	e0 2d       	mov	r30, r0
    2eb0:	09 94       	ijmp

00002eb2 <__umulhisi3>:
    2eb2:	a2 9f       	mul	r26, r18
    2eb4:	b0 01       	movw	r22, r0
    2eb6:	b3 9f       	mul	r27, r19
    2eb8:	c0 01       	movw	r24, r0
    2eba:	a3 9f       	mul	r26, r19
    2ebc:	70 0d       	add	r23, r0
    2ebe:	81 1d       	adc	r24, r1
    2ec0:	11 24       	eor	r1, r1
    2ec2:	91 1d       	adc	r25, r1
    2ec4:	b2 9f       	mul	r27, r18
    2ec6:	70 0d       	add	r23, r0
    2ec8:	81 1d       	adc	r24, r1
    2eca:	11 24       	eor	r1, r1
    2ecc:	91 1d       	adc	r25, r1
    2ece:	08 95       	ret

00002ed0 <__muluhisi3>:
    2ed0:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <__umulhisi3>
    2ed4:	a5 9f       	mul	r26, r21
    2ed6:	90 0d       	add	r25, r0
    2ed8:	b4 9f       	mul	r27, r20
    2eda:	90 0d       	add	r25, r0
    2edc:	a4 9f       	mul	r26, r20
    2ede:	80 0d       	add	r24, r0
    2ee0:	91 1d       	adc	r25, r1
    2ee2:	11 24       	eor	r1, r1
    2ee4:	08 95       	ret

00002ee6 <__mulshisi3>:
    2ee6:	b7 ff       	sbrs	r27, 7
    2ee8:	0c 94 68 17 	jmp	0x2ed0	; 0x2ed0 <__muluhisi3>

00002eec <__mulohisi3>:
    2eec:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <__muluhisi3>
    2ef0:	82 1b       	sub	r24, r18
    2ef2:	93 0b       	sbc	r25, r19
    2ef4:	08 95       	ret

00002ef6 <__prologue_saves__>:
    2ef6:	2f 92       	push	r2
    2ef8:	3f 92       	push	r3
    2efa:	4f 92       	push	r4
    2efc:	5f 92       	push	r5
    2efe:	6f 92       	push	r6
    2f00:	7f 92       	push	r7
    2f02:	8f 92       	push	r8
    2f04:	9f 92       	push	r9
    2f06:	af 92       	push	r10
    2f08:	bf 92       	push	r11
    2f0a:	cf 92       	push	r12
    2f0c:	df 92       	push	r13
    2f0e:	ef 92       	push	r14
    2f10:	ff 92       	push	r15
    2f12:	0f 93       	push	r16
    2f14:	1f 93       	push	r17
    2f16:	cf 93       	push	r28
    2f18:	df 93       	push	r29
    2f1a:	cd b7       	in	r28, 0x3d	; 61
    2f1c:	de b7       	in	r29, 0x3e	; 62
    2f1e:	ca 1b       	sub	r28, r26
    2f20:	db 0b       	sbc	r29, r27
    2f22:	0f b6       	in	r0, 0x3f	; 63
    2f24:	f8 94       	cli
    2f26:	de bf       	out	0x3e, r29	; 62
    2f28:	0f be       	out	0x3f, r0	; 63
    2f2a:	cd bf       	out	0x3d, r28	; 61
    2f2c:	09 94       	ijmp

00002f2e <__epilogue_restores__>:
    2f2e:	2a 88       	ldd	r2, Y+18	; 0x12
    2f30:	39 88       	ldd	r3, Y+17	; 0x11
    2f32:	48 88       	ldd	r4, Y+16	; 0x10
    2f34:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f36:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f38:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f3a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f3c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f3e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f40:	b9 84       	ldd	r11, Y+9	; 0x09
    2f42:	c8 84       	ldd	r12, Y+8	; 0x08
    2f44:	df 80       	ldd	r13, Y+7	; 0x07
    2f46:	ee 80       	ldd	r14, Y+6	; 0x06
    2f48:	fd 80       	ldd	r15, Y+5	; 0x05
    2f4a:	0c 81       	ldd	r16, Y+4	; 0x04
    2f4c:	1b 81       	ldd	r17, Y+3	; 0x03
    2f4e:	aa 81       	ldd	r26, Y+2	; 0x02
    2f50:	b9 81       	ldd	r27, Y+1	; 0x01
    2f52:	ce 0f       	add	r28, r30
    2f54:	d1 1d       	adc	r29, r1
    2f56:	0f b6       	in	r0, 0x3f	; 63
    2f58:	f8 94       	cli
    2f5a:	de bf       	out	0x3e, r29	; 62
    2f5c:	0f be       	out	0x3f, r0	; 63
    2f5e:	cd bf       	out	0x3d, r28	; 61
    2f60:	ed 01       	movw	r28, r26
    2f62:	08 95       	ret

00002f64 <__subsf3>:
    2f64:	50 58       	subi	r21, 0x80	; 128

00002f66 <__addsf3>:
    2f66:	bb 27       	eor	r27, r27
    2f68:	aa 27       	eor	r26, r26
    2f6a:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__addsf3x>
    2f6e:	0c 94 d2 18 	jmp	0x31a4	; 0x31a4 <__fp_round>
    2f72:	0e 94 c4 18 	call	0x3188	; 0x3188 <__fp_pscA>
    2f76:	38 f0       	brcs	.+14     	; 0x2f86 <__addsf3+0x20>
    2f78:	0e 94 cb 18 	call	0x3196	; 0x3196 <__fp_pscB>
    2f7c:	20 f0       	brcs	.+8      	; 0x2f86 <__addsf3+0x20>
    2f7e:	39 f4       	brne	.+14     	; 0x2f8e <__addsf3+0x28>
    2f80:	9f 3f       	cpi	r25, 0xFF	; 255
    2f82:	19 f4       	brne	.+6      	; 0x2f8a <__addsf3+0x24>
    2f84:	26 f4       	brtc	.+8      	; 0x2f8e <__addsf3+0x28>
    2f86:	0c 94 c1 18 	jmp	0x3182	; 0x3182 <__fp_nan>
    2f8a:	0e f4       	brtc	.+2      	; 0x2f8e <__addsf3+0x28>
    2f8c:	e0 95       	com	r30
    2f8e:	e7 fb       	bst	r30, 7
    2f90:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <__fp_inf>

00002f94 <__addsf3x>:
    2f94:	e9 2f       	mov	r30, r25
    2f96:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <__fp_split3>
    2f9a:	58 f3       	brcs	.-42     	; 0x2f72 <__addsf3+0xc>
    2f9c:	ba 17       	cp	r27, r26
    2f9e:	62 07       	cpc	r22, r18
    2fa0:	73 07       	cpc	r23, r19
    2fa2:	84 07       	cpc	r24, r20
    2fa4:	95 07       	cpc	r25, r21
    2fa6:	20 f0       	brcs	.+8      	; 0x2fb0 <__addsf3x+0x1c>
    2fa8:	79 f4       	brne	.+30     	; 0x2fc8 <__addsf3x+0x34>
    2faa:	a6 f5       	brtc	.+104    	; 0x3014 <__addsf3x+0x80>
    2fac:	0c 94 05 19 	jmp	0x320a	; 0x320a <__fp_zero>
    2fb0:	0e f4       	brtc	.+2      	; 0x2fb4 <__addsf3x+0x20>
    2fb2:	e0 95       	com	r30
    2fb4:	0b 2e       	mov	r0, r27
    2fb6:	ba 2f       	mov	r27, r26
    2fb8:	a0 2d       	mov	r26, r0
    2fba:	0b 01       	movw	r0, r22
    2fbc:	b9 01       	movw	r22, r18
    2fbe:	90 01       	movw	r18, r0
    2fc0:	0c 01       	movw	r0, r24
    2fc2:	ca 01       	movw	r24, r20
    2fc4:	a0 01       	movw	r20, r0
    2fc6:	11 24       	eor	r1, r1
    2fc8:	ff 27       	eor	r31, r31
    2fca:	59 1b       	sub	r21, r25
    2fcc:	99 f0       	breq	.+38     	; 0x2ff4 <__addsf3x+0x60>
    2fce:	59 3f       	cpi	r21, 0xF9	; 249
    2fd0:	50 f4       	brcc	.+20     	; 0x2fe6 <__addsf3x+0x52>
    2fd2:	50 3e       	cpi	r21, 0xE0	; 224
    2fd4:	68 f1       	brcs	.+90     	; 0x3030 <__addsf3x+0x9c>
    2fd6:	1a 16       	cp	r1, r26
    2fd8:	f0 40       	sbci	r31, 0x00	; 0
    2fda:	a2 2f       	mov	r26, r18
    2fdc:	23 2f       	mov	r18, r19
    2fde:	34 2f       	mov	r19, r20
    2fe0:	44 27       	eor	r20, r20
    2fe2:	58 5f       	subi	r21, 0xF8	; 248
    2fe4:	f3 cf       	rjmp	.-26     	; 0x2fcc <__addsf3x+0x38>
    2fe6:	46 95       	lsr	r20
    2fe8:	37 95       	ror	r19
    2fea:	27 95       	ror	r18
    2fec:	a7 95       	ror	r26
    2fee:	f0 40       	sbci	r31, 0x00	; 0
    2ff0:	53 95       	inc	r21
    2ff2:	c9 f7       	brne	.-14     	; 0x2fe6 <__addsf3x+0x52>
    2ff4:	7e f4       	brtc	.+30     	; 0x3014 <__addsf3x+0x80>
    2ff6:	1f 16       	cp	r1, r31
    2ff8:	ba 0b       	sbc	r27, r26
    2ffa:	62 0b       	sbc	r22, r18
    2ffc:	73 0b       	sbc	r23, r19
    2ffe:	84 0b       	sbc	r24, r20
    3000:	ba f0       	brmi	.+46     	; 0x3030 <__addsf3x+0x9c>
    3002:	91 50       	subi	r25, 0x01	; 1
    3004:	a1 f0       	breq	.+40     	; 0x302e <__addsf3x+0x9a>
    3006:	ff 0f       	add	r31, r31
    3008:	bb 1f       	adc	r27, r27
    300a:	66 1f       	adc	r22, r22
    300c:	77 1f       	adc	r23, r23
    300e:	88 1f       	adc	r24, r24
    3010:	c2 f7       	brpl	.-16     	; 0x3002 <__addsf3x+0x6e>
    3012:	0e c0       	rjmp	.+28     	; 0x3030 <__addsf3x+0x9c>
    3014:	ba 0f       	add	r27, r26
    3016:	62 1f       	adc	r22, r18
    3018:	73 1f       	adc	r23, r19
    301a:	84 1f       	adc	r24, r20
    301c:	48 f4       	brcc	.+18     	; 0x3030 <__addsf3x+0x9c>
    301e:	87 95       	ror	r24
    3020:	77 95       	ror	r23
    3022:	67 95       	ror	r22
    3024:	b7 95       	ror	r27
    3026:	f7 95       	ror	r31
    3028:	9e 3f       	cpi	r25, 0xFE	; 254
    302a:	08 f0       	brcs	.+2      	; 0x302e <__addsf3x+0x9a>
    302c:	b0 cf       	rjmp	.-160    	; 0x2f8e <__addsf3+0x28>
    302e:	93 95       	inc	r25
    3030:	88 0f       	add	r24, r24
    3032:	08 f0       	brcs	.+2      	; 0x3036 <__addsf3x+0xa2>
    3034:	99 27       	eor	r25, r25
    3036:	ee 0f       	add	r30, r30
    3038:	97 95       	ror	r25
    303a:	87 95       	ror	r24
    303c:	08 95       	ret

0000303e <__cmpsf2>:
    303e:	0e 94 97 18 	call	0x312e	; 0x312e <__fp_cmp>
    3042:	08 f4       	brcc	.+2      	; 0x3046 <__cmpsf2+0x8>
    3044:	81 e0       	ldi	r24, 0x01	; 1
    3046:	08 95       	ret

00003048 <__fixsfsi>:
    3048:	0e 94 2b 18 	call	0x3056	; 0x3056 <__fixunssfsi>
    304c:	68 94       	set
    304e:	b1 11       	cpse	r27, r1
    3050:	0c 94 06 19 	jmp	0x320c	; 0x320c <__fp_szero>
    3054:	08 95       	ret

00003056 <__fixunssfsi>:
    3056:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__fp_splitA>
    305a:	88 f0       	brcs	.+34     	; 0x307e <__fixunssfsi+0x28>
    305c:	9f 57       	subi	r25, 0x7F	; 127
    305e:	98 f0       	brcs	.+38     	; 0x3086 <__fixunssfsi+0x30>
    3060:	b9 2f       	mov	r27, r25
    3062:	99 27       	eor	r25, r25
    3064:	b7 51       	subi	r27, 0x17	; 23
    3066:	b0 f0       	brcs	.+44     	; 0x3094 <__fixunssfsi+0x3e>
    3068:	e1 f0       	breq	.+56     	; 0x30a2 <__fixunssfsi+0x4c>
    306a:	66 0f       	add	r22, r22
    306c:	77 1f       	adc	r23, r23
    306e:	88 1f       	adc	r24, r24
    3070:	99 1f       	adc	r25, r25
    3072:	1a f0       	brmi	.+6      	; 0x307a <__fixunssfsi+0x24>
    3074:	ba 95       	dec	r27
    3076:	c9 f7       	brne	.-14     	; 0x306a <__fixunssfsi+0x14>
    3078:	14 c0       	rjmp	.+40     	; 0x30a2 <__fixunssfsi+0x4c>
    307a:	b1 30       	cpi	r27, 0x01	; 1
    307c:	91 f0       	breq	.+36     	; 0x30a2 <__fixunssfsi+0x4c>
    307e:	0e 94 05 19 	call	0x320a	; 0x320a <__fp_zero>
    3082:	b1 e0       	ldi	r27, 0x01	; 1
    3084:	08 95       	ret
    3086:	0c 94 05 19 	jmp	0x320a	; 0x320a <__fp_zero>
    308a:	67 2f       	mov	r22, r23
    308c:	78 2f       	mov	r23, r24
    308e:	88 27       	eor	r24, r24
    3090:	b8 5f       	subi	r27, 0xF8	; 248
    3092:	39 f0       	breq	.+14     	; 0x30a2 <__fixunssfsi+0x4c>
    3094:	b9 3f       	cpi	r27, 0xF9	; 249
    3096:	cc f3       	brlt	.-14     	; 0x308a <__fixunssfsi+0x34>
    3098:	86 95       	lsr	r24
    309a:	77 95       	ror	r23
    309c:	67 95       	ror	r22
    309e:	b3 95       	inc	r27
    30a0:	d9 f7       	brne	.-10     	; 0x3098 <__fixunssfsi+0x42>
    30a2:	3e f4       	brtc	.+14     	; 0x30b2 <__fixunssfsi+0x5c>
    30a4:	90 95       	com	r25
    30a6:	80 95       	com	r24
    30a8:	70 95       	com	r23
    30aa:	61 95       	neg	r22
    30ac:	7f 4f       	sbci	r23, 0xFF	; 255
    30ae:	8f 4f       	sbci	r24, 0xFF	; 255
    30b0:	9f 4f       	sbci	r25, 0xFF	; 255
    30b2:	08 95       	ret

000030b4 <__floatunsisf>:
    30b4:	e8 94       	clt
    30b6:	09 c0       	rjmp	.+18     	; 0x30ca <__floatsisf+0x12>

000030b8 <__floatsisf>:
    30b8:	97 fb       	bst	r25, 7
    30ba:	3e f4       	brtc	.+14     	; 0x30ca <__floatsisf+0x12>
    30bc:	90 95       	com	r25
    30be:	80 95       	com	r24
    30c0:	70 95       	com	r23
    30c2:	61 95       	neg	r22
    30c4:	7f 4f       	sbci	r23, 0xFF	; 255
    30c6:	8f 4f       	sbci	r24, 0xFF	; 255
    30c8:	9f 4f       	sbci	r25, 0xFF	; 255
    30ca:	99 23       	and	r25, r25
    30cc:	a9 f0       	breq	.+42     	; 0x30f8 <__floatsisf+0x40>
    30ce:	f9 2f       	mov	r31, r25
    30d0:	96 e9       	ldi	r25, 0x96	; 150
    30d2:	bb 27       	eor	r27, r27
    30d4:	93 95       	inc	r25
    30d6:	f6 95       	lsr	r31
    30d8:	87 95       	ror	r24
    30da:	77 95       	ror	r23
    30dc:	67 95       	ror	r22
    30de:	b7 95       	ror	r27
    30e0:	f1 11       	cpse	r31, r1
    30e2:	f8 cf       	rjmp	.-16     	; 0x30d4 <__floatsisf+0x1c>
    30e4:	fa f4       	brpl	.+62     	; 0x3124 <__floatsisf+0x6c>
    30e6:	bb 0f       	add	r27, r27
    30e8:	11 f4       	brne	.+4      	; 0x30ee <__floatsisf+0x36>
    30ea:	60 ff       	sbrs	r22, 0
    30ec:	1b c0       	rjmp	.+54     	; 0x3124 <__floatsisf+0x6c>
    30ee:	6f 5f       	subi	r22, 0xFF	; 255
    30f0:	7f 4f       	sbci	r23, 0xFF	; 255
    30f2:	8f 4f       	sbci	r24, 0xFF	; 255
    30f4:	9f 4f       	sbci	r25, 0xFF	; 255
    30f6:	16 c0       	rjmp	.+44     	; 0x3124 <__floatsisf+0x6c>
    30f8:	88 23       	and	r24, r24
    30fa:	11 f0       	breq	.+4      	; 0x3100 <__floatsisf+0x48>
    30fc:	96 e9       	ldi	r25, 0x96	; 150
    30fe:	11 c0       	rjmp	.+34     	; 0x3122 <__floatsisf+0x6a>
    3100:	77 23       	and	r23, r23
    3102:	21 f0       	breq	.+8      	; 0x310c <__floatsisf+0x54>
    3104:	9e e8       	ldi	r25, 0x8E	; 142
    3106:	87 2f       	mov	r24, r23
    3108:	76 2f       	mov	r23, r22
    310a:	05 c0       	rjmp	.+10     	; 0x3116 <__floatsisf+0x5e>
    310c:	66 23       	and	r22, r22
    310e:	71 f0       	breq	.+28     	; 0x312c <__floatsisf+0x74>
    3110:	96 e8       	ldi	r25, 0x86	; 134
    3112:	86 2f       	mov	r24, r22
    3114:	70 e0       	ldi	r23, 0x00	; 0
    3116:	60 e0       	ldi	r22, 0x00	; 0
    3118:	2a f0       	brmi	.+10     	; 0x3124 <__floatsisf+0x6c>
    311a:	9a 95       	dec	r25
    311c:	66 0f       	add	r22, r22
    311e:	77 1f       	adc	r23, r23
    3120:	88 1f       	adc	r24, r24
    3122:	da f7       	brpl	.-10     	; 0x311a <__floatsisf+0x62>
    3124:	88 0f       	add	r24, r24
    3126:	96 95       	lsr	r25
    3128:	87 95       	ror	r24
    312a:	97 f9       	bld	r25, 7
    312c:	08 95       	ret

0000312e <__fp_cmp>:
    312e:	99 0f       	add	r25, r25
    3130:	00 08       	sbc	r0, r0
    3132:	55 0f       	add	r21, r21
    3134:	aa 0b       	sbc	r26, r26
    3136:	e0 e8       	ldi	r30, 0x80	; 128
    3138:	fe ef       	ldi	r31, 0xFE	; 254
    313a:	16 16       	cp	r1, r22
    313c:	17 06       	cpc	r1, r23
    313e:	e8 07       	cpc	r30, r24
    3140:	f9 07       	cpc	r31, r25
    3142:	c0 f0       	brcs	.+48     	; 0x3174 <__fp_cmp+0x46>
    3144:	12 16       	cp	r1, r18
    3146:	13 06       	cpc	r1, r19
    3148:	e4 07       	cpc	r30, r20
    314a:	f5 07       	cpc	r31, r21
    314c:	98 f0       	brcs	.+38     	; 0x3174 <__fp_cmp+0x46>
    314e:	62 1b       	sub	r22, r18
    3150:	73 0b       	sbc	r23, r19
    3152:	84 0b       	sbc	r24, r20
    3154:	95 0b       	sbc	r25, r21
    3156:	39 f4       	brne	.+14     	; 0x3166 <__fp_cmp+0x38>
    3158:	0a 26       	eor	r0, r26
    315a:	61 f0       	breq	.+24     	; 0x3174 <__fp_cmp+0x46>
    315c:	23 2b       	or	r18, r19
    315e:	24 2b       	or	r18, r20
    3160:	25 2b       	or	r18, r21
    3162:	21 f4       	brne	.+8      	; 0x316c <__fp_cmp+0x3e>
    3164:	08 95       	ret
    3166:	0a 26       	eor	r0, r26
    3168:	09 f4       	brne	.+2      	; 0x316c <__fp_cmp+0x3e>
    316a:	a1 40       	sbci	r26, 0x01	; 1
    316c:	a6 95       	lsr	r26
    316e:	8f ef       	ldi	r24, 0xFF	; 255
    3170:	81 1d       	adc	r24, r1
    3172:	81 1d       	adc	r24, r1
    3174:	08 95       	ret

00003176 <__fp_inf>:
    3176:	97 f9       	bld	r25, 7
    3178:	9f 67       	ori	r25, 0x7F	; 127
    317a:	80 e8       	ldi	r24, 0x80	; 128
    317c:	70 e0       	ldi	r23, 0x00	; 0
    317e:	60 e0       	ldi	r22, 0x00	; 0
    3180:	08 95       	ret

00003182 <__fp_nan>:
    3182:	9f ef       	ldi	r25, 0xFF	; 255
    3184:	80 ec       	ldi	r24, 0xC0	; 192
    3186:	08 95       	ret

00003188 <__fp_pscA>:
    3188:	00 24       	eor	r0, r0
    318a:	0a 94       	dec	r0
    318c:	16 16       	cp	r1, r22
    318e:	17 06       	cpc	r1, r23
    3190:	18 06       	cpc	r1, r24
    3192:	09 06       	cpc	r0, r25
    3194:	08 95       	ret

00003196 <__fp_pscB>:
    3196:	00 24       	eor	r0, r0
    3198:	0a 94       	dec	r0
    319a:	12 16       	cp	r1, r18
    319c:	13 06       	cpc	r1, r19
    319e:	14 06       	cpc	r1, r20
    31a0:	05 06       	cpc	r0, r21
    31a2:	08 95       	ret

000031a4 <__fp_round>:
    31a4:	09 2e       	mov	r0, r25
    31a6:	03 94       	inc	r0
    31a8:	00 0c       	add	r0, r0
    31aa:	11 f4       	brne	.+4      	; 0x31b0 <__fp_round+0xc>
    31ac:	88 23       	and	r24, r24
    31ae:	52 f0       	brmi	.+20     	; 0x31c4 <__fp_round+0x20>
    31b0:	bb 0f       	add	r27, r27
    31b2:	40 f4       	brcc	.+16     	; 0x31c4 <__fp_round+0x20>
    31b4:	bf 2b       	or	r27, r31
    31b6:	11 f4       	brne	.+4      	; 0x31bc <__fp_round+0x18>
    31b8:	60 ff       	sbrs	r22, 0
    31ba:	04 c0       	rjmp	.+8      	; 0x31c4 <__fp_round+0x20>
    31bc:	6f 5f       	subi	r22, 0xFF	; 255
    31be:	7f 4f       	sbci	r23, 0xFF	; 255
    31c0:	8f 4f       	sbci	r24, 0xFF	; 255
    31c2:	9f 4f       	sbci	r25, 0xFF	; 255
    31c4:	08 95       	ret

000031c6 <__fp_split3>:
    31c6:	57 fd       	sbrc	r21, 7
    31c8:	90 58       	subi	r25, 0x80	; 128
    31ca:	44 0f       	add	r20, r20
    31cc:	55 1f       	adc	r21, r21
    31ce:	59 f0       	breq	.+22     	; 0x31e6 <__fp_splitA+0x10>
    31d0:	5f 3f       	cpi	r21, 0xFF	; 255
    31d2:	71 f0       	breq	.+28     	; 0x31f0 <__fp_splitA+0x1a>
    31d4:	47 95       	ror	r20

000031d6 <__fp_splitA>:
    31d6:	88 0f       	add	r24, r24
    31d8:	97 fb       	bst	r25, 7
    31da:	99 1f       	adc	r25, r25
    31dc:	61 f0       	breq	.+24     	; 0x31f6 <__fp_splitA+0x20>
    31de:	9f 3f       	cpi	r25, 0xFF	; 255
    31e0:	79 f0       	breq	.+30     	; 0x3200 <__fp_splitA+0x2a>
    31e2:	87 95       	ror	r24
    31e4:	08 95       	ret
    31e6:	12 16       	cp	r1, r18
    31e8:	13 06       	cpc	r1, r19
    31ea:	14 06       	cpc	r1, r20
    31ec:	55 1f       	adc	r21, r21
    31ee:	f2 cf       	rjmp	.-28     	; 0x31d4 <__fp_split3+0xe>
    31f0:	46 95       	lsr	r20
    31f2:	f1 df       	rcall	.-30     	; 0x31d6 <__fp_splitA>
    31f4:	08 c0       	rjmp	.+16     	; 0x3206 <__fp_splitA+0x30>
    31f6:	16 16       	cp	r1, r22
    31f8:	17 06       	cpc	r1, r23
    31fa:	18 06       	cpc	r1, r24
    31fc:	99 1f       	adc	r25, r25
    31fe:	f1 cf       	rjmp	.-30     	; 0x31e2 <__fp_splitA+0xc>
    3200:	86 95       	lsr	r24
    3202:	71 05       	cpc	r23, r1
    3204:	61 05       	cpc	r22, r1
    3206:	08 94       	sec
    3208:	08 95       	ret

0000320a <__fp_zero>:
    320a:	e8 94       	clt

0000320c <__fp_szero>:
    320c:	bb 27       	eor	r27, r27
    320e:	66 27       	eor	r22, r22
    3210:	77 27       	eor	r23, r23
    3212:	cb 01       	movw	r24, r22
    3214:	97 f9       	bld	r25, 7
    3216:	08 95       	ret

00003218 <__gesf2>:
    3218:	0e 94 97 18 	call	0x312e	; 0x312e <__fp_cmp>
    321c:	08 f4       	brcc	.+2      	; 0x3220 <__gesf2+0x8>
    321e:	8f ef       	ldi	r24, 0xFF	; 255
    3220:	08 95       	ret

00003222 <__mulsf3>:
    3222:	0e 94 24 19 	call	0x3248	; 0x3248 <__mulsf3x>
    3226:	0c 94 d2 18 	jmp	0x31a4	; 0x31a4 <__fp_round>
    322a:	0e 94 c4 18 	call	0x3188	; 0x3188 <__fp_pscA>
    322e:	38 f0       	brcs	.+14     	; 0x323e <__mulsf3+0x1c>
    3230:	0e 94 cb 18 	call	0x3196	; 0x3196 <__fp_pscB>
    3234:	20 f0       	brcs	.+8      	; 0x323e <__mulsf3+0x1c>
    3236:	95 23       	and	r25, r21
    3238:	11 f0       	breq	.+4      	; 0x323e <__mulsf3+0x1c>
    323a:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <__fp_inf>
    323e:	0c 94 c1 18 	jmp	0x3182	; 0x3182 <__fp_nan>
    3242:	11 24       	eor	r1, r1
    3244:	0c 94 06 19 	jmp	0x320c	; 0x320c <__fp_szero>

00003248 <__mulsf3x>:
    3248:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <__fp_split3>
    324c:	70 f3       	brcs	.-36     	; 0x322a <__mulsf3+0x8>

0000324e <__mulsf3_pse>:
    324e:	95 9f       	mul	r25, r21
    3250:	c1 f3       	breq	.-16     	; 0x3242 <__mulsf3+0x20>
    3252:	95 0f       	add	r25, r21
    3254:	50 e0       	ldi	r21, 0x00	; 0
    3256:	55 1f       	adc	r21, r21
    3258:	62 9f       	mul	r22, r18
    325a:	f0 01       	movw	r30, r0
    325c:	72 9f       	mul	r23, r18
    325e:	bb 27       	eor	r27, r27
    3260:	f0 0d       	add	r31, r0
    3262:	b1 1d       	adc	r27, r1
    3264:	63 9f       	mul	r22, r19
    3266:	aa 27       	eor	r26, r26
    3268:	f0 0d       	add	r31, r0
    326a:	b1 1d       	adc	r27, r1
    326c:	aa 1f       	adc	r26, r26
    326e:	64 9f       	mul	r22, r20
    3270:	66 27       	eor	r22, r22
    3272:	b0 0d       	add	r27, r0
    3274:	a1 1d       	adc	r26, r1
    3276:	66 1f       	adc	r22, r22
    3278:	82 9f       	mul	r24, r18
    327a:	22 27       	eor	r18, r18
    327c:	b0 0d       	add	r27, r0
    327e:	a1 1d       	adc	r26, r1
    3280:	62 1f       	adc	r22, r18
    3282:	73 9f       	mul	r23, r19
    3284:	b0 0d       	add	r27, r0
    3286:	a1 1d       	adc	r26, r1
    3288:	62 1f       	adc	r22, r18
    328a:	83 9f       	mul	r24, r19
    328c:	a0 0d       	add	r26, r0
    328e:	61 1d       	adc	r22, r1
    3290:	22 1f       	adc	r18, r18
    3292:	74 9f       	mul	r23, r20
    3294:	33 27       	eor	r19, r19
    3296:	a0 0d       	add	r26, r0
    3298:	61 1d       	adc	r22, r1
    329a:	23 1f       	adc	r18, r19
    329c:	84 9f       	mul	r24, r20
    329e:	60 0d       	add	r22, r0
    32a0:	21 1d       	adc	r18, r1
    32a2:	82 2f       	mov	r24, r18
    32a4:	76 2f       	mov	r23, r22
    32a6:	6a 2f       	mov	r22, r26
    32a8:	11 24       	eor	r1, r1
    32aa:	9f 57       	subi	r25, 0x7F	; 127
    32ac:	50 40       	sbci	r21, 0x00	; 0
    32ae:	9a f0       	brmi	.+38     	; 0x32d6 <__mulsf3_pse+0x88>
    32b0:	f1 f0       	breq	.+60     	; 0x32ee <__mulsf3_pse+0xa0>
    32b2:	88 23       	and	r24, r24
    32b4:	4a f0       	brmi	.+18     	; 0x32c8 <__mulsf3_pse+0x7a>
    32b6:	ee 0f       	add	r30, r30
    32b8:	ff 1f       	adc	r31, r31
    32ba:	bb 1f       	adc	r27, r27
    32bc:	66 1f       	adc	r22, r22
    32be:	77 1f       	adc	r23, r23
    32c0:	88 1f       	adc	r24, r24
    32c2:	91 50       	subi	r25, 0x01	; 1
    32c4:	50 40       	sbci	r21, 0x00	; 0
    32c6:	a9 f7       	brne	.-22     	; 0x32b2 <__mulsf3_pse+0x64>
    32c8:	9e 3f       	cpi	r25, 0xFE	; 254
    32ca:	51 05       	cpc	r21, r1
    32cc:	80 f0       	brcs	.+32     	; 0x32ee <__mulsf3_pse+0xa0>
    32ce:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <__fp_inf>
    32d2:	0c 94 06 19 	jmp	0x320c	; 0x320c <__fp_szero>
    32d6:	5f 3f       	cpi	r21, 0xFF	; 255
    32d8:	e4 f3       	brlt	.-8      	; 0x32d2 <__mulsf3_pse+0x84>
    32da:	98 3e       	cpi	r25, 0xE8	; 232
    32dc:	d4 f3       	brlt	.-12     	; 0x32d2 <__mulsf3_pse+0x84>
    32de:	86 95       	lsr	r24
    32e0:	77 95       	ror	r23
    32e2:	67 95       	ror	r22
    32e4:	b7 95       	ror	r27
    32e6:	f7 95       	ror	r31
    32e8:	e7 95       	ror	r30
    32ea:	9f 5f       	subi	r25, 0xFF	; 255
    32ec:	c1 f7       	brne	.-16     	; 0x32de <__mulsf3_pse+0x90>
    32ee:	fe 2b       	or	r31, r30
    32f0:	88 0f       	add	r24, r24
    32f2:	91 1d       	adc	r25, r1
    32f4:	96 95       	lsr	r25
    32f6:	87 95       	ror	r24
    32f8:	97 f9       	bld	r25, 7
    32fa:	08 95       	ret

000032fc <sin>:
    32fc:	9f 93       	push	r25
    32fe:	0e 94 96 19 	call	0x332c	; 0x332c <__fp_rempio2>
    3302:	0f 90       	pop	r0
    3304:	07 fc       	sbrc	r0, 7
    3306:	ee 5f       	subi	r30, 0xFE	; 254
    3308:	0c 94 bf 19 	jmp	0x337e	; 0x337e <__fp_sinus>

0000330c <__fp_mpack>:
    330c:	9f 3f       	cpi	r25, 0xFF	; 255
    330e:	31 f0       	breq	.+12     	; 0x331c <__fp_mpack_finite+0xc>

00003310 <__fp_mpack_finite>:
    3310:	91 50       	subi	r25, 0x01	; 1
    3312:	20 f4       	brcc	.+8      	; 0x331c <__fp_mpack_finite+0xc>
    3314:	87 95       	ror	r24
    3316:	77 95       	ror	r23
    3318:	67 95       	ror	r22
    331a:	b7 95       	ror	r27
    331c:	88 0f       	add	r24, r24
    331e:	91 1d       	adc	r25, r1
    3320:	96 95       	lsr	r25
    3322:	87 95       	ror	r24
    3324:	97 f9       	bld	r25, 7
    3326:	08 95       	ret
    3328:	0c 94 c1 18 	jmp	0x3182	; 0x3182 <__fp_nan>

0000332c <__fp_rempio2>:
    332c:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <__fp_splitA>
    3330:	d8 f3       	brcs	.-10     	; 0x3328 <__fp_mpack_finite+0x18>
    3332:	e8 94       	clt
    3334:	e0 e0       	ldi	r30, 0x00	; 0
    3336:	bb 27       	eor	r27, r27
    3338:	9f 57       	subi	r25, 0x7F	; 127
    333a:	f0 f0       	brcs	.+60     	; 0x3378 <__fp_rempio2+0x4c>
    333c:	2a ed       	ldi	r18, 0xDA	; 218
    333e:	3f e0       	ldi	r19, 0x0F	; 15
    3340:	49 ec       	ldi	r20, 0xC9	; 201
    3342:	06 c0       	rjmp	.+12     	; 0x3350 <__fp_rempio2+0x24>
    3344:	ee 0f       	add	r30, r30
    3346:	bb 0f       	add	r27, r27
    3348:	66 1f       	adc	r22, r22
    334a:	77 1f       	adc	r23, r23
    334c:	88 1f       	adc	r24, r24
    334e:	28 f0       	brcs	.+10     	; 0x335a <__fp_rempio2+0x2e>
    3350:	b2 3a       	cpi	r27, 0xA2	; 162
    3352:	62 07       	cpc	r22, r18
    3354:	73 07       	cpc	r23, r19
    3356:	84 07       	cpc	r24, r20
    3358:	28 f0       	brcs	.+10     	; 0x3364 <__fp_rempio2+0x38>
    335a:	b2 5a       	subi	r27, 0xA2	; 162
    335c:	62 0b       	sbc	r22, r18
    335e:	73 0b       	sbc	r23, r19
    3360:	84 0b       	sbc	r24, r20
    3362:	e3 95       	inc	r30
    3364:	9a 95       	dec	r25
    3366:	72 f7       	brpl	.-36     	; 0x3344 <__fp_rempio2+0x18>
    3368:	80 38       	cpi	r24, 0x80	; 128
    336a:	30 f4       	brcc	.+12     	; 0x3378 <__fp_rempio2+0x4c>
    336c:	9a 95       	dec	r25
    336e:	bb 0f       	add	r27, r27
    3370:	66 1f       	adc	r22, r22
    3372:	77 1f       	adc	r23, r23
    3374:	88 1f       	adc	r24, r24
    3376:	d2 f7       	brpl	.-12     	; 0x336c <__fp_rempio2+0x40>
    3378:	90 48       	sbci	r25, 0x80	; 128
    337a:	0c 94 88 19 	jmp	0x3310	; 0x3310 <__fp_mpack_finite>

0000337e <__fp_sinus>:
    337e:	ef 93       	push	r30
    3380:	e0 ff       	sbrs	r30, 0
    3382:	07 c0       	rjmp	.+14     	; 0x3392 <__fp_sinus+0x14>
    3384:	a2 ea       	ldi	r26, 0xA2	; 162
    3386:	2a ed       	ldi	r18, 0xDA	; 218
    3388:	3f e0       	ldi	r19, 0x0F	; 15
    338a:	49 ec       	ldi	r20, 0xC9	; 201
    338c:	5f eb       	ldi	r21, 0xBF	; 191
    338e:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__addsf3x>
    3392:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <__fp_round>
    3396:	0f 90       	pop	r0
    3398:	03 94       	inc	r0
    339a:	01 fc       	sbrc	r0, 1
    339c:	90 58       	subi	r25, 0x80	; 128
    339e:	e8 e6       	ldi	r30, 0x68	; 104
    33a0:	f0 e0       	ldi	r31, 0x00	; 0
    33a2:	0c 94 d3 19 	jmp	0x33a6	; 0x33a6 <__fp_powsodd>

000033a6 <__fp_powsodd>:
    33a6:	9f 93       	push	r25
    33a8:	8f 93       	push	r24
    33aa:	7f 93       	push	r23
    33ac:	6f 93       	push	r22
    33ae:	ff 93       	push	r31
    33b0:	ef 93       	push	r30
    33b2:	9b 01       	movw	r18, r22
    33b4:	ac 01       	movw	r20, r24
    33b6:	0e 94 11 19 	call	0x3222	; 0x3222 <__mulsf3>
    33ba:	ef 91       	pop	r30
    33bc:	ff 91       	pop	r31
    33be:	0e 94 e7 19 	call	0x33ce	; 0x33ce <__fp_powser>
    33c2:	2f 91       	pop	r18
    33c4:	3f 91       	pop	r19
    33c6:	4f 91       	pop	r20
    33c8:	5f 91       	pop	r21
    33ca:	0c 94 11 19 	jmp	0x3222	; 0x3222 <__mulsf3>

000033ce <__fp_powser>:
    33ce:	df 93       	push	r29
    33d0:	cf 93       	push	r28
    33d2:	1f 93       	push	r17
    33d4:	0f 93       	push	r16
    33d6:	ff 92       	push	r15
    33d8:	ef 92       	push	r14
    33da:	df 92       	push	r13
    33dc:	7b 01       	movw	r14, r22
    33de:	8c 01       	movw	r16, r24
    33e0:	68 94       	set
    33e2:	06 c0       	rjmp	.+12     	; 0x33f0 <__fp_powser+0x22>
    33e4:	da 2e       	mov	r13, r26
    33e6:	ef 01       	movw	r28, r30
    33e8:	0e 94 24 19 	call	0x3248	; 0x3248 <__mulsf3x>
    33ec:	fe 01       	movw	r30, r28
    33ee:	e8 94       	clt
    33f0:	a5 91       	lpm	r26, Z+
    33f2:	25 91       	lpm	r18, Z+
    33f4:	35 91       	lpm	r19, Z+
    33f6:	45 91       	lpm	r20, Z+
    33f8:	55 91       	lpm	r21, Z+
    33fa:	a6 f3       	brts	.-24     	; 0x33e4 <__fp_powser+0x16>
    33fc:	ef 01       	movw	r28, r30
    33fe:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <__addsf3x>
    3402:	fe 01       	movw	r30, r28
    3404:	97 01       	movw	r18, r14
    3406:	a8 01       	movw	r20, r16
    3408:	da 94       	dec	r13
    340a:	69 f7       	brne	.-38     	; 0x33e6 <__fp_powser+0x18>
    340c:	df 90       	pop	r13
    340e:	ef 90       	pop	r14
    3410:	ff 90       	pop	r15
    3412:	0f 91       	pop	r16
    3414:	1f 91       	pop	r17
    3416:	cf 91       	pop	r28
    3418:	df 91       	pop	r29
    341a:	08 95       	ret

0000341c <malloc>:
    341c:	0f 93       	push	r16
    341e:	1f 93       	push	r17
    3420:	cf 93       	push	r28
    3422:	df 93       	push	r29
    3424:	82 30       	cpi	r24, 0x02	; 2
    3426:	91 05       	cpc	r25, r1
    3428:	10 f4       	brcc	.+4      	; 0x342e <malloc+0x12>
    342a:	82 e0       	ldi	r24, 0x02	; 2
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <__flp>
    3432:	f0 91 64 02 	lds	r31, 0x0264	; 0x800264 <__flp+0x1>
    3436:	20 e0       	ldi	r18, 0x00	; 0
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	a0 e0       	ldi	r26, 0x00	; 0
    343c:	b0 e0       	ldi	r27, 0x00	; 0
    343e:	30 97       	sbiw	r30, 0x00	; 0
    3440:	19 f1       	breq	.+70     	; 0x3488 <malloc+0x6c>
    3442:	40 81       	ld	r20, Z
    3444:	51 81       	ldd	r21, Z+1	; 0x01
    3446:	02 81       	ldd	r16, Z+2	; 0x02
    3448:	13 81       	ldd	r17, Z+3	; 0x03
    344a:	48 17       	cp	r20, r24
    344c:	59 07       	cpc	r21, r25
    344e:	c8 f0       	brcs	.+50     	; 0x3482 <malloc+0x66>
    3450:	84 17       	cp	r24, r20
    3452:	95 07       	cpc	r25, r21
    3454:	69 f4       	brne	.+26     	; 0x3470 <malloc+0x54>
    3456:	10 97       	sbiw	r26, 0x00	; 0
    3458:	31 f0       	breq	.+12     	; 0x3466 <malloc+0x4a>
    345a:	12 96       	adiw	r26, 0x02	; 2
    345c:	0c 93       	st	X, r16
    345e:	12 97       	sbiw	r26, 0x02	; 2
    3460:	13 96       	adiw	r26, 0x03	; 3
    3462:	1c 93       	st	X, r17
    3464:	27 c0       	rjmp	.+78     	; 0x34b4 <malloc+0x98>
    3466:	00 93 63 02 	sts	0x0263, r16	; 0x800263 <__flp>
    346a:	10 93 64 02 	sts	0x0264, r17	; 0x800264 <__flp+0x1>
    346e:	22 c0       	rjmp	.+68     	; 0x34b4 <malloc+0x98>
    3470:	21 15       	cp	r18, r1
    3472:	31 05       	cpc	r19, r1
    3474:	19 f0       	breq	.+6      	; 0x347c <malloc+0x60>
    3476:	42 17       	cp	r20, r18
    3478:	53 07       	cpc	r21, r19
    347a:	18 f4       	brcc	.+6      	; 0x3482 <malloc+0x66>
    347c:	9a 01       	movw	r18, r20
    347e:	bd 01       	movw	r22, r26
    3480:	ef 01       	movw	r28, r30
    3482:	df 01       	movw	r26, r30
    3484:	f8 01       	movw	r30, r16
    3486:	db cf       	rjmp	.-74     	; 0x343e <malloc+0x22>
    3488:	21 15       	cp	r18, r1
    348a:	31 05       	cpc	r19, r1
    348c:	f9 f0       	breq	.+62     	; 0x34cc <malloc+0xb0>
    348e:	28 1b       	sub	r18, r24
    3490:	39 0b       	sbc	r19, r25
    3492:	24 30       	cpi	r18, 0x04	; 4
    3494:	31 05       	cpc	r19, r1
    3496:	80 f4       	brcc	.+32     	; 0x34b8 <malloc+0x9c>
    3498:	8a 81       	ldd	r24, Y+2	; 0x02
    349a:	9b 81       	ldd	r25, Y+3	; 0x03
    349c:	61 15       	cp	r22, r1
    349e:	71 05       	cpc	r23, r1
    34a0:	21 f0       	breq	.+8      	; 0x34aa <malloc+0x8e>
    34a2:	fb 01       	movw	r30, r22
    34a4:	93 83       	std	Z+3, r25	; 0x03
    34a6:	82 83       	std	Z+2, r24	; 0x02
    34a8:	04 c0       	rjmp	.+8      	; 0x34b2 <malloc+0x96>
    34aa:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <__flp+0x1>
    34ae:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <__flp>
    34b2:	fe 01       	movw	r30, r28
    34b4:	32 96       	adiw	r30, 0x02	; 2
    34b6:	44 c0       	rjmp	.+136    	; 0x3540 <malloc+0x124>
    34b8:	fe 01       	movw	r30, r28
    34ba:	e2 0f       	add	r30, r18
    34bc:	f3 1f       	adc	r31, r19
    34be:	81 93       	st	Z+, r24
    34c0:	91 93       	st	Z+, r25
    34c2:	22 50       	subi	r18, 0x02	; 2
    34c4:	31 09       	sbc	r19, r1
    34c6:	39 83       	std	Y+1, r19	; 0x01
    34c8:	28 83       	st	Y, r18
    34ca:	3a c0       	rjmp	.+116    	; 0x3540 <malloc+0x124>
    34cc:	20 91 61 02 	lds	r18, 0x0261	; 0x800261 <__brkval>
    34d0:	30 91 62 02 	lds	r19, 0x0262	; 0x800262 <__brkval+0x1>
    34d4:	23 2b       	or	r18, r19
    34d6:	41 f4       	brne	.+16     	; 0x34e8 <malloc+0xcc>
    34d8:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__malloc_heap_start>
    34dc:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__malloc_heap_start+0x1>
    34e0:	30 93 62 02 	sts	0x0262, r19	; 0x800262 <__brkval+0x1>
    34e4:	20 93 61 02 	sts	0x0261, r18	; 0x800261 <__brkval>
    34e8:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__malloc_heap_end>
    34ec:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__malloc_heap_end+0x1>
    34f0:	21 15       	cp	r18, r1
    34f2:	31 05       	cpc	r19, r1
    34f4:	41 f4       	brne	.+16     	; 0x3506 <malloc+0xea>
    34f6:	2d b7       	in	r18, 0x3d	; 61
    34f8:	3e b7       	in	r19, 0x3e	; 62
    34fa:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__malloc_margin>
    34fe:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__malloc_margin+0x1>
    3502:	24 1b       	sub	r18, r20
    3504:	35 0b       	sbc	r19, r21
    3506:	e0 91 61 02 	lds	r30, 0x0261	; 0x800261 <__brkval>
    350a:	f0 91 62 02 	lds	r31, 0x0262	; 0x800262 <__brkval+0x1>
    350e:	e2 17       	cp	r30, r18
    3510:	f3 07       	cpc	r31, r19
    3512:	a0 f4       	brcc	.+40     	; 0x353c <malloc+0x120>
    3514:	2e 1b       	sub	r18, r30
    3516:	3f 0b       	sbc	r19, r31
    3518:	28 17       	cp	r18, r24
    351a:	39 07       	cpc	r19, r25
    351c:	78 f0       	brcs	.+30     	; 0x353c <malloc+0x120>
    351e:	ac 01       	movw	r20, r24
    3520:	4e 5f       	subi	r20, 0xFE	; 254
    3522:	5f 4f       	sbci	r21, 0xFF	; 255
    3524:	24 17       	cp	r18, r20
    3526:	35 07       	cpc	r19, r21
    3528:	48 f0       	brcs	.+18     	; 0x353c <malloc+0x120>
    352a:	4e 0f       	add	r20, r30
    352c:	5f 1f       	adc	r21, r31
    352e:	50 93 62 02 	sts	0x0262, r21	; 0x800262 <__brkval+0x1>
    3532:	40 93 61 02 	sts	0x0261, r20	; 0x800261 <__brkval>
    3536:	81 93       	st	Z+, r24
    3538:	91 93       	st	Z+, r25
    353a:	02 c0       	rjmp	.+4      	; 0x3540 <malloc+0x124>
    353c:	e0 e0       	ldi	r30, 0x00	; 0
    353e:	f0 e0       	ldi	r31, 0x00	; 0
    3540:	cf 01       	movw	r24, r30
    3542:	df 91       	pop	r29
    3544:	cf 91       	pop	r28
    3546:	1f 91       	pop	r17
    3548:	0f 91       	pop	r16
    354a:	08 95       	ret

0000354c <free>:
    354c:	cf 93       	push	r28
    354e:	df 93       	push	r29
    3550:	00 97       	sbiw	r24, 0x00	; 0
    3552:	09 f4       	brne	.+2      	; 0x3556 <free+0xa>
    3554:	81 c0       	rjmp	.+258    	; 0x3658 <free+0x10c>
    3556:	fc 01       	movw	r30, r24
    3558:	32 97       	sbiw	r30, 0x02	; 2
    355a:	13 82       	std	Z+3, r1	; 0x03
    355c:	12 82       	std	Z+2, r1	; 0x02
    355e:	a0 91 63 02 	lds	r26, 0x0263	; 0x800263 <__flp>
    3562:	b0 91 64 02 	lds	r27, 0x0264	; 0x800264 <__flp+0x1>
    3566:	10 97       	sbiw	r26, 0x00	; 0
    3568:	81 f4       	brne	.+32     	; 0x358a <free+0x3e>
    356a:	20 81       	ld	r18, Z
    356c:	31 81       	ldd	r19, Z+1	; 0x01
    356e:	82 0f       	add	r24, r18
    3570:	93 1f       	adc	r25, r19
    3572:	20 91 61 02 	lds	r18, 0x0261	; 0x800261 <__brkval>
    3576:	30 91 62 02 	lds	r19, 0x0262	; 0x800262 <__brkval+0x1>
    357a:	28 17       	cp	r18, r24
    357c:	39 07       	cpc	r19, r25
    357e:	51 f5       	brne	.+84     	; 0x35d4 <free+0x88>
    3580:	f0 93 62 02 	sts	0x0262, r31	; 0x800262 <__brkval+0x1>
    3584:	e0 93 61 02 	sts	0x0261, r30	; 0x800261 <__brkval>
    3588:	67 c0       	rjmp	.+206    	; 0x3658 <free+0x10c>
    358a:	ed 01       	movw	r28, r26
    358c:	20 e0       	ldi	r18, 0x00	; 0
    358e:	30 e0       	ldi	r19, 0x00	; 0
    3590:	ce 17       	cp	r28, r30
    3592:	df 07       	cpc	r29, r31
    3594:	40 f4       	brcc	.+16     	; 0x35a6 <free+0x5a>
    3596:	4a 81       	ldd	r20, Y+2	; 0x02
    3598:	5b 81       	ldd	r21, Y+3	; 0x03
    359a:	9e 01       	movw	r18, r28
    359c:	41 15       	cp	r20, r1
    359e:	51 05       	cpc	r21, r1
    35a0:	f1 f0       	breq	.+60     	; 0x35de <free+0x92>
    35a2:	ea 01       	movw	r28, r20
    35a4:	f5 cf       	rjmp	.-22     	; 0x3590 <free+0x44>
    35a6:	d3 83       	std	Z+3, r29	; 0x03
    35a8:	c2 83       	std	Z+2, r28	; 0x02
    35aa:	40 81       	ld	r20, Z
    35ac:	51 81       	ldd	r21, Z+1	; 0x01
    35ae:	84 0f       	add	r24, r20
    35b0:	95 1f       	adc	r25, r21
    35b2:	c8 17       	cp	r28, r24
    35b4:	d9 07       	cpc	r29, r25
    35b6:	59 f4       	brne	.+22     	; 0x35ce <free+0x82>
    35b8:	88 81       	ld	r24, Y
    35ba:	99 81       	ldd	r25, Y+1	; 0x01
    35bc:	84 0f       	add	r24, r20
    35be:	95 1f       	adc	r25, r21
    35c0:	02 96       	adiw	r24, 0x02	; 2
    35c2:	91 83       	std	Z+1, r25	; 0x01
    35c4:	80 83       	st	Z, r24
    35c6:	8a 81       	ldd	r24, Y+2	; 0x02
    35c8:	9b 81       	ldd	r25, Y+3	; 0x03
    35ca:	93 83       	std	Z+3, r25	; 0x03
    35cc:	82 83       	std	Z+2, r24	; 0x02
    35ce:	21 15       	cp	r18, r1
    35d0:	31 05       	cpc	r19, r1
    35d2:	29 f4       	brne	.+10     	; 0x35de <free+0x92>
    35d4:	f0 93 64 02 	sts	0x0264, r31	; 0x800264 <__flp+0x1>
    35d8:	e0 93 63 02 	sts	0x0263, r30	; 0x800263 <__flp>
    35dc:	3d c0       	rjmp	.+122    	; 0x3658 <free+0x10c>
    35de:	e9 01       	movw	r28, r18
    35e0:	fb 83       	std	Y+3, r31	; 0x03
    35e2:	ea 83       	std	Y+2, r30	; 0x02
    35e4:	49 91       	ld	r20, Y+
    35e6:	59 91       	ld	r21, Y+
    35e8:	c4 0f       	add	r28, r20
    35ea:	d5 1f       	adc	r29, r21
    35ec:	ec 17       	cp	r30, r28
    35ee:	fd 07       	cpc	r31, r29
    35f0:	61 f4       	brne	.+24     	; 0x360a <free+0xbe>
    35f2:	80 81       	ld	r24, Z
    35f4:	91 81       	ldd	r25, Z+1	; 0x01
    35f6:	84 0f       	add	r24, r20
    35f8:	95 1f       	adc	r25, r21
    35fa:	02 96       	adiw	r24, 0x02	; 2
    35fc:	e9 01       	movw	r28, r18
    35fe:	99 83       	std	Y+1, r25	; 0x01
    3600:	88 83       	st	Y, r24
    3602:	82 81       	ldd	r24, Z+2	; 0x02
    3604:	93 81       	ldd	r25, Z+3	; 0x03
    3606:	9b 83       	std	Y+3, r25	; 0x03
    3608:	8a 83       	std	Y+2, r24	; 0x02
    360a:	e0 e0       	ldi	r30, 0x00	; 0
    360c:	f0 e0       	ldi	r31, 0x00	; 0
    360e:	12 96       	adiw	r26, 0x02	; 2
    3610:	8d 91       	ld	r24, X+
    3612:	9c 91       	ld	r25, X
    3614:	13 97       	sbiw	r26, 0x03	; 3
    3616:	00 97       	sbiw	r24, 0x00	; 0
    3618:	19 f0       	breq	.+6      	; 0x3620 <free+0xd4>
    361a:	fd 01       	movw	r30, r26
    361c:	dc 01       	movw	r26, r24
    361e:	f7 cf       	rjmp	.-18     	; 0x360e <free+0xc2>
    3620:	8d 91       	ld	r24, X+
    3622:	9c 91       	ld	r25, X
    3624:	11 97       	sbiw	r26, 0x01	; 1
    3626:	9d 01       	movw	r18, r26
    3628:	2e 5f       	subi	r18, 0xFE	; 254
    362a:	3f 4f       	sbci	r19, 0xFF	; 255
    362c:	82 0f       	add	r24, r18
    362e:	93 1f       	adc	r25, r19
    3630:	20 91 61 02 	lds	r18, 0x0261	; 0x800261 <__brkval>
    3634:	30 91 62 02 	lds	r19, 0x0262	; 0x800262 <__brkval+0x1>
    3638:	28 17       	cp	r18, r24
    363a:	39 07       	cpc	r19, r25
    363c:	69 f4       	brne	.+26     	; 0x3658 <free+0x10c>
    363e:	30 97       	sbiw	r30, 0x00	; 0
    3640:	29 f4       	brne	.+10     	; 0x364c <free+0x100>
    3642:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <__flp+0x1>
    3646:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <__flp>
    364a:	02 c0       	rjmp	.+4      	; 0x3650 <free+0x104>
    364c:	13 82       	std	Z+3, r1	; 0x03
    364e:	12 82       	std	Z+2, r1	; 0x02
    3650:	b0 93 62 02 	sts	0x0262, r27	; 0x800262 <__brkval+0x1>
    3654:	a0 93 61 02 	sts	0x0261, r26	; 0x800261 <__brkval>
    3658:	df 91       	pop	r29
    365a:	cf 91       	pop	r28
    365c:	08 95       	ret

0000365e <__do_global_dtors>:
    365e:	10 e0       	ldi	r17, 0x00	; 0
    3660:	c1 e6       	ldi	r28, 0x61	; 97
    3662:	d0 e0       	ldi	r29, 0x00	; 0
    3664:	04 c0       	rjmp	.+8      	; 0x366e <__do_global_dtors+0x10>
    3666:	fe 01       	movw	r30, r28
    3668:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <__tablejump2__>
    366c:	21 96       	adiw	r28, 0x01	; 1
    366e:	c2 36       	cpi	r28, 0x62	; 98
    3670:	d1 07       	cpc	r29, r17
    3672:	c9 f7       	brne	.-14     	; 0x3666 <__do_global_dtors+0x8>
    3674:	f8 94       	cli

00003676 <__stop_program>:
    3676:	ff cf       	rjmp	.-2      	; 0x3676 <__stop_program>
