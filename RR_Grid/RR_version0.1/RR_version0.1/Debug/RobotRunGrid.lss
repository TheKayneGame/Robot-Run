
RobotRunGrid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000088  00800100  000034f4  00003588  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000034f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e8  00800188  00800188  00003610  2**0
                  ALLOC
  3 .stab         0000759c  00000000  00000000  00003610  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000a086  00000000  00000000  0000abac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  00014c32  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00014c74  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000108  00000000  00000000  00014cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000023be  00000000  00000000  00014dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000d36  00000000  00000000  0001717a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000017fb  00000000  00000000  00017eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000370  00000000  00000000  000196ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000008f6  00000000  00000000  00019a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001411  00000000  00000000  0001a312  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000c8  00000000  00000000  0001b723  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__dtors_end>
       4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
       8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
       c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      10:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      14:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      18:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      1c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      20:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      24:	0c 94 9f 12 	jmp	0x253e	; 0x253e <__vector_9>
      28:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      2c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      30:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      34:	0c 94 cb 0e 	jmp	0x1d96	; 0x1d96 <__vector_13>
      38:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      3c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      40:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      44:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      48:	0c 94 e1 11 	jmp	0x23c2	; 0x23c2 <__vector_18>
      4c:	0c 94 7a 12 	jmp	0x24f4	; 0x24f4 <__vector_19>
      50:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      54:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      58:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      5c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      60:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      68:	05 a8       	ldd	r0, Z+53	; 0x35
      6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
      6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <__stack+0xd3>
      6e:	4e b9       	out	0x0e, r20	; 14
      70:	38 36       	cpi	r19, 0x68	; 104
      72:	a9 02       	muls	r26, r25
      74:	0c 50       	subi	r16, 0x0C	; 12
      76:	b9 91       	ld	r27, Y+
      78:	86 88       	ldd	r8, Z+22	; 0x16
      7a:	08 3c       	cpi	r16, 0xC8	; 200
      7c:	a6 aa       	std	Z+54, r10	; 0x36
      7e:	aa 2a       	or	r10, r26
      80:	be 00       	.word	0x00be	; ????
      82:	00 00       	nop
      84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__trampolines_end>:
      86:	3e 66       	ori	r19, 0x6E	; 110
      88:	33 32       	cpi	r19, 0x23	; 35
      8a:	3e 3e       	cpi	r19, 0xEE	; 238
      8c:	61 33       	cpi	r22, 0x31	; 49
      8e:	32 00       	.word	0x0032	; ????

00000090 <__c.2382>:
      90:	3e 66 33 32 3e 3e 61 33 32 00                       >f32>>a32.

0000009a <__c.2368>:
      9a:	3e 66 33 32 3e 3e 61 33 32 00                       >f32>>a32.

000000a4 <__ctors_end>:
      a4:	80 13       	cpse	r24, r16

000000a6 <__dtors_end>:
      a6:	11 24       	eor	r1, r1
      a8:	1f be       	out	0x3f, r1	; 63
      aa:	cf ef       	ldi	r28, 0xFF	; 255
      ac:	d8 e0       	ldi	r29, 0x08	; 8
      ae:	de bf       	out	0x3e, r29	; 62
      b0:	cd bf       	out	0x3d, r28	; 61

000000b2 <__do_copy_data>:
      b2:	11 e0       	ldi	r17, 0x01	; 1
      b4:	a0 e0       	ldi	r26, 0x00	; 0
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	e4 ef       	ldi	r30, 0xF4	; 244
      ba:	f4 e3       	ldi	r31, 0x34	; 52
      bc:	02 c0       	rjmp	.+4      	; 0xc2 <__do_copy_data+0x10>
      be:	05 90       	lpm	r0, Z+
      c0:	0d 92       	st	X+, r0
      c2:	a8 38       	cpi	r26, 0x88	; 136
      c4:	b1 07       	cpc	r27, r17
      c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0xc>

000000c8 <__do_clear_bss>:
      c8:	22 e0       	ldi	r18, 0x02	; 2
      ca:	a8 e8       	ldi	r26, 0x88	; 136
      cc:	b1 e0       	ldi	r27, 0x01	; 1
      ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
      d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
      d2:	a0 37       	cpi	r26, 0x70	; 112
      d4:	b2 07       	cpc	r27, r18
      d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>
      d8:	0e 94 da 02 	call	0x5b4	; 0x5b4 <main>
      dc:	0c 94 6d 1a 	jmp	0x34da	; 0x34da <__do_global_dtors>

000000e0 <__bad_interrupt>:
      e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e4 <swapOne>:
	temp = *secondYValue;                                                                               //Swap Y-Coordinates
	*secondYValue = *firstYValue;
	*firstYValue = temp;
}

void swapOne(float *firstValue, float *secondValue) {                                                  //Swap function for the distance array
      e4:	cf 92       	push	r12
      e6:	df 92       	push	r13
      e8:	ef 92       	push	r14
      ea:	ff 92       	push	r15
      ec:	0f 93       	push	r16
      ee:	1f 93       	push	r17
	float temp;

	temp = *secondValue;
      f0:	fb 01       	movw	r30, r22
      f2:	00 81       	ld	r16, Z
      f4:	11 81       	ldd	r17, Z+1	; 0x01
      f6:	22 81       	ldd	r18, Z+2	; 0x02
      f8:	33 81       	ldd	r19, Z+3	; 0x03
	*secondValue = *firstValue;
      fa:	fc 01       	movw	r30, r24
      fc:	c0 80       	ld	r12, Z
      fe:	d1 80       	ldd	r13, Z+1	; 0x01
     100:	e2 80       	ldd	r14, Z+2	; 0x02
     102:	f3 80       	ldd	r15, Z+3	; 0x03
     104:	fb 01       	movw	r30, r22
     106:	c0 82       	st	Z, r12
     108:	d1 82       	std	Z+1, r13	; 0x01
     10a:	e2 82       	std	Z+2, r14	; 0x02
     10c:	f3 82       	std	Z+3, r15	; 0x03
	*firstValue = temp;
     10e:	fc 01       	movw	r30, r24
     110:	00 83       	st	Z, r16
     112:	11 83       	std	Z+1, r17	; 0x01
     114:	22 83       	std	Z+2, r18	; 0x02
     116:	33 83       	std	Z+3, r19	; 0x03
}
     118:	1f 91       	pop	r17
     11a:	0f 91       	pop	r16
     11c:	ff 90       	pop	r15
     11e:	ef 90       	pop	r14
     120:	df 90       	pop	r13
     122:	cf 90       	pop	r12
     124:	08 95       	ret

00000126 <sortOrder>:

void sortOrder(int X[], int Y[]) {                                                                   //Sorting algorithm, this sorts the coordinates of the given order
     126:	2f 92       	push	r2
     128:	3f 92       	push	r3
     12a:	4f 92       	push	r4
     12c:	5f 92       	push	r5
     12e:	6f 92       	push	r6
     130:	7f 92       	push	r7
     132:	8f 92       	push	r8
     134:	9f 92       	push	r9
     136:	af 92       	push	r10
     138:	bf 92       	push	r11
     13a:	cf 92       	push	r12
     13c:	df 92       	push	r13
     13e:	ef 92       	push	r14
     140:	ff 92       	push	r15
     142:	0f 93       	push	r16
     144:	1f 93       	push	r17
     146:	cf 93       	push	r28
     148:	df 93       	push	r29
     14a:	cd b7       	in	r28, 0x3d	; 61
     14c:	de b7       	in	r29, 0x3e	; 62
     14e:	a5 97       	sbiw	r28, 0x25	; 37
     150:	0f b6       	in	r0, 0x3f	; 63
     152:	f8 94       	cli
     154:	de bf       	out	0x3e, r29	; 62
     156:	0f be       	out	0x3f, r0	; 63
     158:	cd bf       	out	0x3d, r28	; 61
     15a:	9b a3       	std	Y+35, r25	; 0x23
     15c:	8a a3       	std	Y+34, r24	; 0x22
     15e:	6c a3       	std	Y+36, r22	; 0x24
     160:	7d a3       	std	Y+37, r23	; 0x25
     162:	06 96       	adiw	r24, 0x06	; 6
     164:	98 a3       	std	Y+32, r25	; 0x20
     166:	8f 8f       	std	Y+31, r24	; 0x1f
     168:	b6 c0       	rjmp	.+364    	; 0x2d6 <sortOrder+0x1b0>
     16a:	7e 8e       	std	Y+30, r7	; 0x1e
     16c:	6d 8e       	std	Y+29, r6	; 0x1d

	while (check != 1) {
		orderCorrect = 1;

		for (int i = 0; i < (sizeOfOrder - 1); i++) {
			Distance[i] = sqrt((pow(X[i], 2)) + (pow(Y[i], 2)));                                    //Pythagoras
     16e:	f3 01       	movw	r30, r6
     170:	01 90       	ld	r0, Z+
     172:	f0 81       	ld	r31, Z
     174:	e0 2d       	mov	r30, r0
     176:	fa 8f       	std	Y+26, r31	; 0x1a
     178:	e9 8f       	std	Y+25, r30	; 0x19
     17a:	bf 01       	movw	r22, r30
     17c:	ff 0f       	add	r31, r31
     17e:	88 0b       	sbc	r24, r24
     180:	99 0b       	sbc	r25, r25
     182:	0e 94 41 09 	call	0x1282	; 0x1282 <__floatsisf>
     186:	6b 01       	movw	r12, r22
     188:	7c 01       	movw	r14, r24
     18a:	3c 8e       	std	Y+28, r3	; 0x1c
     18c:	2b 8e       	std	Y+27, r2	; 0x1b
     18e:	f1 01       	movw	r30, r2
     190:	00 81       	ld	r16, Z
     192:	11 81       	ldd	r17, Z+1	; 0x01
     194:	b8 01       	movw	r22, r16
     196:	01 2e       	mov	r0, r17
     198:	00 0c       	add	r0, r0
     19a:	88 0b       	sbc	r24, r24
     19c:	99 0b       	sbc	r25, r25
     19e:	0e 94 41 09 	call	0x1282	; 0x1282 <__floatsisf>
     1a2:	4b 01       	movw	r8, r22
     1a4:	5c 01       	movw	r10, r24
     1a6:	9b 01       	movw	r18, r22
     1a8:	ac 01       	movw	r20, r24
     1aa:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     1ae:	69 8b       	std	Y+17, r22	; 0x11
     1b0:	7a 8b       	std	Y+18, r23	; 0x12
     1b2:	8b 8b       	std	Y+19, r24	; 0x13
     1b4:	9c 8b       	std	Y+20, r25	; 0x14
     1b6:	a5 01       	movw	r20, r10
     1b8:	94 01       	movw	r18, r8
     1ba:	c5 01       	movw	r24, r10
     1bc:	b4 01       	movw	r22, r8
     1be:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     1c2:	4b 01       	movw	r8, r22
     1c4:	5c 01       	movw	r10, r24
     1c6:	a7 01       	movw	r20, r14
     1c8:	96 01       	movw	r18, r12
     1ca:	c7 01       	movw	r24, r14
     1cc:	b6 01       	movw	r22, r12
     1ce:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	c5 01       	movw	r24, r10
     1d8:	b4 01       	movw	r22, r8
     1da:	0e 94 98 08 	call	0x1130	; 0x1130 <__addsf3>
     1de:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <sqrt>
     1e2:	6b 01       	movw	r12, r22
     1e4:	7c 01       	movw	r14, r24
     1e6:	f2 01       	movw	r30, r4
     1e8:	61 93       	st	Z+, r22
     1ea:	71 93       	st	Z+, r23
     1ec:	81 93       	st	Z+, r24
     1ee:	91 93       	st	Z+, r25
     1f0:	2f 01       	movw	r4, r30
     1f2:	e9 8b       	std	Y+17, r30	; 0x11
     1f4:	59 a2       	std	Y+33, r5	; 0x21
			firstDistanceValue =  Distance[i];
			secondDistanceValue =  Distance[i + 1];
     1f6:	80 80       	ld	r8, Z
     1f8:	91 80       	ldd	r9, Z+1	; 0x01
     1fa:	a2 80       	ldd	r10, Z+2	; 0x02
     1fc:	b3 80       	ldd	r11, Z+3	; 0x03

			if ( Distance[i] >  Distance[i + 1]) {                                                  //Compare the distance of two points to each other
     1fe:	a5 01       	movw	r20, r10
     200:	94 01       	movw	r18, r8
     202:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__gesf2>
     206:	18 16       	cp	r1, r24
     208:	d4 f4       	brge	.+52     	; 0x23e <sortOrder+0x118>
				swapOne(& Distance[i], & Distance[i + 1]);                                          //Place the biggest one further behind in the array
     20a:	b2 01       	movw	r22, r4
     20c:	8d 89       	ldd	r24, Y+21	; 0x15
     20e:	9e 89       	ldd	r25, Y+22	; 0x16
     210:	0e 94 72 00 	call	0xe4	; 0xe4 <swapOne>


void swapTwo( int *firstXValue, int *secondXValue, int *firstYValue, int *secondYValue){                //Swap function for the coordinates
	int temp;

	temp = *secondXValue;                                                                               //Swap X-Coordinates
     214:	f3 01       	movw	r30, r6
     216:	82 81       	ldd	r24, Z+2	; 0x02
     218:	93 81       	ldd	r25, Z+3	; 0x03
	*secondXValue = *firstXValue;
     21a:	20 81       	ld	r18, Z
     21c:	31 81       	ldd	r19, Z+1	; 0x01
     21e:	33 83       	std	Z+3, r19	; 0x03
     220:	22 83       	std	Z+2, r18	; 0x02
	*firstXValue = temp;
     222:	91 83       	std	Z+1, r25	; 0x01
     224:	80 83       	st	Z, r24

	temp = *secondYValue;                                                                               //Swap Y-Coordinates
     226:	f1 01       	movw	r30, r2
     228:	82 81       	ldd	r24, Z+2	; 0x02
     22a:	93 81       	ldd	r25, Z+3	; 0x03
	*secondYValue = *firstYValue;
     22c:	20 81       	ld	r18, Z
     22e:	31 81       	ldd	r19, Z+1	; 0x01
     230:	33 83       	std	Z+3, r19	; 0x03
     232:	22 83       	std	Z+2, r18	; 0x02
	*firstYValue = temp;
     234:	91 83       	std	Z+1, r25	; 0x01
     236:	80 83       	st	Z, r24
			secondDistanceValue =  Distance[i + 1];

			if ( Distance[i] >  Distance[i + 1]) {                                                  //Compare the distance of two points to each other
				swapOne(& Distance[i], & Distance[i + 1]);                                          //Place the biggest one further behind in the array
				swapTwo(&X[i], &X[i + 1], &Y[i], &Y[i + 1]);                                        //Swap the coordinates accordingly
				orderCorrect = 0;
     238:	1f 8a       	std	Y+23, r1	; 0x17
     23a:	18 8e       	std	Y+24, r1	; 0x18
     23c:	36 c0       	rjmp	.+108    	; 0x2aa <sortOrder+0x184>
				} else if ((firstDistanceValue == secondDistanceValue) && (Y[i] == Y[i + 1])) {     //If the distance is the same and the Y values are the same
     23e:	c7 01       	movw	r24, r14
     240:	b6 01       	movw	r22, r12
     242:	0e 94 09 09 	call	0x1212	; 0x1212 <__fixsfsi>
     246:	7b 01       	movw	r14, r22
     248:	c5 01       	movw	r24, r10
     24a:	b4 01       	movw	r22, r8
     24c:	0e 94 09 09 	call	0x1212	; 0x1212 <__fixsfsi>
     250:	e6 16       	cp	r14, r22
     252:	f7 06       	cpc	r15, r23
     254:	51 f5       	brne	.+84     	; 0x2aa <sortOrder+0x184>
     256:	eb 8d       	ldd	r30, Y+27	; 0x1b
     258:	fc 8d       	ldd	r31, Y+28	; 0x1c
     25a:	82 81       	ldd	r24, Z+2	; 0x02
     25c:	93 81       	ldd	r25, Z+3	; 0x03
     25e:	08 17       	cp	r16, r24
     260:	19 07       	cpc	r17, r25
     262:	19 f5       	brne	.+70     	; 0x2aa <sortOrder+0x184>
				if (X[i] < X[i + 1]) {                                                              //Compare the X values
     264:	ed 8d       	ldd	r30, Y+29	; 0x1d
     266:	fe 8d       	ldd	r31, Y+30	; 0x1e
     268:	82 81       	ldd	r24, Z+2	; 0x02
     26a:	93 81       	ldd	r25, Z+3	; 0x03
     26c:	29 8d       	ldd	r18, Y+25	; 0x19
     26e:	3a 8d       	ldd	r19, Y+26	; 0x1a
     270:	28 17       	cp	r18, r24
     272:	39 07       	cpc	r19, r25
     274:	d4 f4       	brge	.+52     	; 0x2aa <sortOrder+0x184>
					swapOne(& Distance[i], & Distance[i + 1]);
     276:	69 89       	ldd	r22, Y+17	; 0x11
     278:	79 a1       	ldd	r23, Y+33	; 0x21
     27a:	8d 89       	ldd	r24, Y+21	; 0x15
     27c:	9e 89       	ldd	r25, Y+22	; 0x16
     27e:	0e 94 72 00 	call	0xe4	; 0xe4 <swapOne>


void swapTwo( int *firstXValue, int *secondXValue, int *firstYValue, int *secondYValue){                //Swap function for the coordinates
	int temp;

	temp = *secondXValue;                                                                               //Swap X-Coordinates
     282:	ed 8d       	ldd	r30, Y+29	; 0x1d
     284:	fe 8d       	ldd	r31, Y+30	; 0x1e
     286:	82 81       	ldd	r24, Z+2	; 0x02
     288:	93 81       	ldd	r25, Z+3	; 0x03
	*secondXValue = *firstXValue;
     28a:	20 81       	ld	r18, Z
     28c:	31 81       	ldd	r19, Z+1	; 0x01
     28e:	33 83       	std	Z+3, r19	; 0x03
     290:	22 83       	std	Z+2, r18	; 0x02
	*firstXValue = temp;
     292:	91 83       	std	Z+1, r25	; 0x01
     294:	80 83       	st	Z, r24

	temp = *secondYValue;                                                                               //Swap Y-Coordinates
     296:	eb 8d       	ldd	r30, Y+27	; 0x1b
     298:	fc 8d       	ldd	r31, Y+28	; 0x1c
     29a:	82 81       	ldd	r24, Z+2	; 0x02
     29c:	93 81       	ldd	r25, Z+3	; 0x03
	*secondYValue = *firstYValue;
     29e:	20 81       	ld	r18, Z
     2a0:	31 81       	ldd	r19, Z+1	; 0x01
     2a2:	33 83       	std	Z+3, r19	; 0x03
     2a4:	22 83       	std	Z+2, r18	; 0x02
	*firstYValue = temp;
     2a6:	91 83       	std	Z+1, r25	; 0x01
     2a8:	80 83       	st	Z, r24
     2aa:	f2 e0       	ldi	r31, 0x02	; 2
     2ac:	6f 0e       	add	r6, r31
     2ae:	71 1c       	adc	r7, r1
     2b0:	22 e0       	ldi	r18, 0x02	; 2
     2b2:	22 0e       	add	r2, r18
     2b4:	31 1c       	adc	r3, r1
     2b6:	8d 89       	ldd	r24, Y+21	; 0x15
     2b8:	9e 89       	ldd	r25, Y+22	; 0x16
     2ba:	04 96       	adiw	r24, 0x04	; 4
     2bc:	9e 8b       	std	Y+22, r25	; 0x16
     2be:	8d 8b       	std	Y+21, r24	; 0x15
	float Distance[sizeOfOrder];

	while (check != 1) {
		orderCorrect = 1;

		for (int i = 0; i < (sizeOfOrder - 1); i++) {
     2c0:	ef 8d       	ldd	r30, Y+31	; 0x1f
     2c2:	f8 a1       	ldd	r31, Y+32	; 0x20
     2c4:	6e 16       	cp	r6, r30
     2c6:	7f 06       	cpc	r7, r31
     2c8:	09 f0       	breq	.+2      	; 0x2cc <sortOrder+0x1a6>
     2ca:	4f cf       	rjmp	.-354    	; 0x16a <sortOrder+0x44>
					swapOne(& Distance[i], & Distance[i + 1]);
					swapTwo(&X[i], &X[i + 1], &Y[i], &Y[i + 1]);
				}
			}
		}
		if (orderCorrect == 1) {
     2cc:	2f 89       	ldd	r18, Y+23	; 0x17
     2ce:	38 8d       	ldd	r19, Y+24	; 0x18
     2d0:	21 30       	cpi	r18, 0x01	; 1
     2d2:	31 05       	cpc	r19, r1
     2d4:	69 f0       	breq	.+26     	; 0x2f0 <sortOrder+0x1ca>
     2d6:	6a a0       	ldd	r6, Y+34	; 0x22
     2d8:	7b a0       	ldd	r7, Y+35	; 0x23
     2da:	2c a0       	ldd	r2, Y+36	; 0x24
     2dc:	3d a0       	ldd	r3, Y+37	; 0x25
     2de:	ce 01       	movw	r24, r28
     2e0:	01 96       	adiw	r24, 0x01	; 1
     2e2:	2c 01       	movw	r4, r24
	temp = *secondValue;
	*secondValue = *firstValue;
	*firstValue = temp;
}

void sortOrder(int X[], int Y[]) {                                                                   //Sorting algorithm, this sorts the coordinates of the given order
     2e4:	9e 8b       	std	Y+22, r25	; 0x16
     2e6:	8d 8b       	std	Y+21, r24	; 0x15
     2e8:	91 e0       	ldi	r25, 0x01	; 1
     2ea:	9f 8b       	std	Y+23, r25	; 0x17
     2ec:	18 8e       	std	Y+24, r1	; 0x18
     2ee:	3d cf       	rjmp	.-390    	; 0x16a <sortOrder+0x44>
		}
		if (orderCorrect == 1) {
			check = 1;
		}
	}
}
     2f0:	a5 96       	adiw	r28, 0x25	; 37
     2f2:	0f b6       	in	r0, 0x3f	; 63
     2f4:	f8 94       	cli
     2f6:	de bf       	out	0x3e, r29	; 62
     2f8:	0f be       	out	0x3f, r0	; 63
     2fa:	cd bf       	out	0x3d, r28	; 61
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	1f 91       	pop	r17
     302:	0f 91       	pop	r16
     304:	ff 90       	pop	r15
     306:	ef 90       	pop	r14
     308:	df 90       	pop	r13
     30a:	cf 90       	pop	r12
     30c:	bf 90       	pop	r11
     30e:	af 90       	pop	r10
     310:	9f 90       	pop	r9
     312:	8f 90       	pop	r8
     314:	7f 90       	pop	r7
     316:	6f 90       	pop	r6
     318:	5f 90       	pop	r5
     31a:	4f 90       	pop	r4
     31c:	3f 90       	pop	r3
     31e:	2f 90       	pop	r2
     320:	08 95       	ret

00000322 <readGrid>:



void readGrid(int routes[4][4]){
     322:	fc 01       	movw	r30, r24
	
	//routes[0][0] = 2;                                                                         //Home to grid
	routes[0][0] = 3;
     324:	83 e0       	ldi	r24, 0x03	; 3
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	91 83       	std	Z+1, r25	; 0x01
     32a:	80 83       	st	Z, r24
	routes[0][1] = 2;
     32c:	42 e0       	ldi	r20, 0x02	; 2
     32e:	50 e0       	ldi	r21, 0x00	; 0
     330:	53 83       	std	Z+3, r21	; 0x03
     332:	42 83       	std	Z+2, r20	; 0x02
	routes[0][2] = 5;
     334:	25 e0       	ldi	r18, 0x05	; 5
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	35 83       	std	Z+5, r19	; 0x05
     33a:	24 83       	std	Z+4, r18	; 0x04
	
	routes[1][0] = 1;                                                                        //Home to charge point
     33c:	61 e0       	ldi	r22, 0x01	; 1
     33e:	70 e0       	ldi	r23, 0x00	; 0
     340:	71 87       	std	Z+9, r23	; 0x09
     342:	60 87       	std	Z+8, r22	; 0x08
	routes[1][1] = 1;
     344:	73 87       	std	Z+11, r23	; 0x0b
     346:	62 87       	std	Z+10, r22	; 0x0a
	routes[1][2] = 5;
     348:	35 87       	std	Z+13, r19	; 0x0d
     34a:	24 87       	std	Z+12, r18	; 0x0c
	
	routes[2][0] = 3;                                                                        //Grid to charge point
     34c:	91 8b       	std	Z+17, r25	; 0x11
     34e:	80 8b       	std	Z+16, r24	; 0x10
	routes[2][1] = 3;
     350:	93 8b       	std	Z+19, r25	; 0x13
     352:	82 8b       	std	Z+18, r24	; 0x12
	routes[2][2] = 5;
     354:	35 8b       	std	Z+21, r19	; 0x15
     356:	24 8b       	std	Z+20, r18	; 0x14
	
	routes[3][0] = 3;                                                                        //Grid to home
     358:	91 8f       	std	Z+25, r25	; 0x19
     35a:	80 8f       	std	Z+24, r24	; 0x18
	routes[3][1] = 1;
     35c:	73 8f       	std	Z+27, r23	; 0x1b
     35e:	62 8f       	std	Z+26, r22	; 0x1a
	routes[3][2] = 2;
     360:	55 8f       	std	Z+29, r21	; 0x1d
     362:	44 8f       	std	Z+28, r20	; 0x1c
	routes[3][3] = 5;
     364:	37 8f       	std	Z+31, r19	; 0x1f
     366:	26 8f       	std	Z+30, r18	; 0x1e
	
	routes[4][0] = 3;                                                                       //Charge point to grid
     368:	91 a3       	std	Z+33, r25	; 0x21
     36a:	80 a3       	std	Z+32, r24	; 0x20
	routes[4][1] = 2;
     36c:	53 a3       	std	Z+35, r21	; 0x23
     36e:	42 a3       	std	Z+34, r20	; 0x22
	routes[4][2] = 3;
     370:	95 a3       	std	Z+37, r25	; 0x25
     372:	84 a3       	std	Z+36, r24	; 0x24
	routes[4][3] = 5;
     374:	37 a3       	std	Z+39, r19	; 0x27
     376:	26 a3       	std	Z+38, r18	; 0x26
     378:	08 95       	ret

0000037a <followStraightLine>:
		play_from_program_space(PSTR(">f32>>a32"));
		delay(3000);
	}
}

void followStraightLine(int *coordinate, int coordinateDesired){
     37a:	8f 92       	push	r8
     37c:	9f 92       	push	r9
     37e:	af 92       	push	r10
     380:	bf 92       	push	r11
     382:	cf 92       	push	r12
     384:	df 92       	push	r13
     386:	ef 92       	push	r14
     388:	ff 92       	push	r15
     38a:	0f 93       	push	r16
     38c:	1f 93       	push	r17
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
	int cockBlock = 0;
	int dirty = 0;
	int biggerThan = 2;
	//print_long(*coordinate);
	if(*coordinate > coordinateDesired){
     392:	fc 01       	movw	r30, r24
     394:	e0 80       	ld	r14, Z
     396:	f1 80       	ldd	r15, Z+1	; 0x01
		biggerThan = 0;
	}
	else{
		biggerThan = 1;
	}
	while(*coordinate != coordinateDesired){
     398:	e6 16       	cp	r14, r22
     39a:	f7 06       	cpc	r15, r23
     39c:	09 f4       	brne	.+2      	; 0x3a0 <followStraightLine+0x26>
     39e:	4a c0       	rjmp	.+148    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     3a0:	eb 01       	movw	r28, r22
     3a2:	8c 01       	movw	r16, r24
     3a4:	c1 2c       	mov	r12, r1
     3a6:	d1 2c       	mov	r13, r1
			followLine();
		}while(checkDecision() == HIGH);
		if(biggerThan == 1){
			if(cockBlock == 1)
			{
					cockBlock =0;
     3a8:	a1 2c       	mov	r10, r1
     3aa:	b1 2c       	mov	r11, r1
			else
			{
				*coordinate = *coordinate + 1;
				if(*coordinate == 2)
				{
					cockBlock = 1;
     3ac:	88 24       	eor	r8, r8
     3ae:	83 94       	inc	r8
     3b0:	91 2c       	mov	r9, r1
	else{
		biggerThan = 1;
	}
	while(*coordinate != coordinateDesired){
		do{
			followLine();
     3b2:	0e 94 e5 07 	call	0xfca	; 0xfca <followLine>
		}while(checkDecision() == HIGH);
     3b6:	0e 94 70 08 	call	0x10e0	; 0x10e0 <checkDecision>
     3ba:	01 97       	sbiw	r24, 0x01	; 1
     3bc:	d1 f3       	breq	.-12     	; 0x3b2 <followStraightLine+0x38>
		if(biggerThan == 1){
     3be:	ce 15       	cp	r28, r14
     3c0:	df 05       	cpc	r29, r15
     3c2:	d4 f0       	brlt	.+52     	; 0x3f8 <followStraightLine+0x7e>
			if(cockBlock == 1)
     3c4:	f1 e0       	ldi	r31, 0x01	; 1
     3c6:	cf 16       	cp	r12, r31
     3c8:	d1 04       	cpc	r13, r1
     3ca:	79 f0       	breq	.+30     	; 0x3ea <followStraightLine+0x70>
			{
					cockBlock =0;
			}
			else
			{
				*coordinate = *coordinate + 1;
     3cc:	f8 01       	movw	r30, r16
     3ce:	80 81       	ld	r24, Z
     3d0:	91 81       	ldd	r25, Z+1	; 0x01
     3d2:	01 96       	adiw	r24, 0x01	; 1
     3d4:	91 83       	std	Z+1, r25	; 0x01
     3d6:	80 83       	st	Z, r24
				if(*coordinate == 2)
     3d8:	02 97       	sbiw	r24, 0x02	; 2
     3da:	11 f4       	brne	.+4      	; 0x3e0 <followStraightLine+0x66>
				{
					cockBlock = 1;
     3dc:	c8 2c       	mov	r12, r8
     3de:	d9 2c       	mov	r13, r9
				}
				
				play_from_program_space(PSTR(">f32>>a32"));
     3e0:	80 e9       	ldi	r24, 0x90	; 144
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <play_from_program_space>
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <followStraightLine+0x74>
			followLine();
		}while(checkDecision() == HIGH);
		if(biggerThan == 1){
			if(cockBlock == 1)
			{
					cockBlock =0;
     3ea:	ca 2c       	mov	r12, r10
     3ec:	db 2c       	mov	r13, r11
		    : "0" ( microseconds )
		    );  
}

// These are alternative aliases:
static inline void delay(unsigned int milliseconds) { delay_ms(milliseconds); }
     3ee:	82 e3       	ldi	r24, 0x32	; 50
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	0e 94 e7 12 	call	0x25ce	; 0x25ce <delay_ms>
     3f6:	0e c0       	rjmp	.+28     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
			
			
			delay(50);
		}
		else if(biggerThan == 0){
			*coordinate = *coordinate - 1;			
     3f8:	f8 01       	movw	r30, r16
     3fa:	80 81       	ld	r24, Z
     3fc:	91 81       	ldd	r25, Z+1	; 0x01
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	91 83       	std	Z+1, r25	; 0x01
     402:	80 83       	st	Z, r24
			play_from_program_space(PSTR(">f32>>a32"));
     404:	86 e8       	ldi	r24, 0x86	; 134
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <play_from_program_space>
     40c:	82 e3       	ldi	r24, 0x32	; 50
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	0e 94 e7 12 	call	0x25ce	; 0x25ce <delay_ms>
			//print_long(*coordinate);
			delay(50);
		}
		motorControl(50, 'F', 0.30);      //moet korte stoot geven zodat de robot over kruispunt heen komt, nog kijken hoe hard / lang
     414:	2a e9       	ldi	r18, 0x9A	; 154
     416:	39 e9       	ldi	r19, 0x99	; 153
     418:	49 e9       	ldi	r20, 0x99	; 153
     41a:	5e e3       	ldi	r21, 0x3E	; 62
     41c:	66 e4       	ldi	r22, 0x46	; 70
     41e:	82 e3       	ldi	r24, 0x32	; 50
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 20 03 	call	0x640	; 0x640 <motorControl>
		biggerThan = 0;
	}
	else{
		biggerThan = 1;
	}
	while(*coordinate != coordinateDesired){
     426:	f8 01       	movw	r30, r16
     428:	80 81       	ld	r24, Z
     42a:	91 81       	ldd	r25, Z+1	; 0x01
     42c:	c8 17       	cp	r28, r24
     42e:	d9 07       	cpc	r29, r25
     430:	09 f0       	breq	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     432:	bf cf       	rjmp	.-130    	; 0x3b2 <followStraightLine+0x38>
			//print_long(*coordinate);
			delay(50);
		}
		motorControl(50, 'F', 0.30);      //moet korte stoot geven zodat de robot over kruispunt heen komt, nog kijken hoe hard / lang
	}
}
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	1f 91       	pop	r17
     43a:	0f 91       	pop	r16
     43c:	ff 90       	pop	r15
     43e:	ef 90       	pop	r14
     440:	df 90       	pop	r13
     442:	cf 90       	pop	r12
     444:	bf 90       	pop	r11
     446:	af 90       	pop	r10
     448:	9f 90       	pop	r9
     44a:	8f 90       	pop	r8
     44c:	08 95       	ret

0000044e <setDirection>:
// 	else{
// 		setDirection(S, directionCurrent);
// 	}
// }

void setDirection(direction directionDesired, direction directionCurrent){
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	cd b7       	in	r28, 0x3d	; 61
     454:	de b7       	in	r29, 0x3e	; 62
     456:	60 97       	sbiw	r28, 0x10	; 16
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	f8 94       	cli
     45c:	de bf       	out	0x3e, r29	; 62
     45e:	0f be       	out	0x3f, r0	; 63
     460:	cd bf       	out	0x3d, r28	; 61
	rotation orientation[4][4] ={{X, R, T, L},
     462:	90 e1       	ldi	r25, 0x10	; 16
     464:	e4 e1       	ldi	r30, 0x14	; 20
     466:	f1 e0       	ldi	r31, 0x01	; 1
     468:	de 01       	movw	r26, r28
     46a:	11 96       	adiw	r26, 0x01	; 1
     46c:	01 90       	ld	r0, Z+
     46e:	0d 92       	st	X+, r0
     470:	9a 95       	dec	r25
     472:	e1 f7       	brne	.-8      	; 0x46c <setDirection+0x1e>
	{L, X, R, T},
	{T, L, X, R},
	{R, T, L, X}};
	
	switch(orientation[directionDesired][directionCurrent]){
     474:	e1 e0       	ldi	r30, 0x01	; 1
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	ec 0f       	add	r30, r28
     47a:	fd 1f       	adc	r31, r29
     47c:	94 e0       	ldi	r25, 0x04	; 4
     47e:	89 9f       	mul	r24, r25
     480:	e0 0d       	add	r30, r0
     482:	f1 1d       	adc	r31, r1
     484:	11 24       	eor	r1, r1
     486:	e6 0f       	add	r30, r22
     488:	f1 1d       	adc	r31, r1
     48a:	80 81       	ld	r24, Z
     48c:	81 30       	cpi	r24, 0x01	; 1
     48e:	21 f0       	breq	.+8      	; 0x498 <setDirection+0x4a>
     490:	b8 f0       	brcs	.+46     	; 0x4c0 <setDirection+0x72>
     492:	82 30       	cpi	r24, 0x02	; 2
     494:	59 f0       	breq	.+22     	; 0x4ac <setDirection+0x5e>
     496:	26 c0       	rjmp	.+76     	; 0x4e4 <setDirection+0x96>
		case R:
		motorControl(60, 'R', 0.20);
     498:	2d ec       	ldi	r18, 0xCD	; 205
     49a:	3c ec       	ldi	r19, 0xCC	; 204
     49c:	4c e4       	ldi	r20, 0x4C	; 76
     49e:	5e e3       	ldi	r21, 0x3E	; 62
     4a0:	62 e5       	ldi	r22, 0x52	; 82
     4a2:	8c e3       	ldi	r24, 0x3C	; 60
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	0e 94 20 03 	call	0x640	; 0x640 <motorControl>
		directionCurrent = directionDesired;
		break;
     4aa:	1c c0       	rjmp	.+56     	; 0x4e4 <setDirection+0x96>
		case L:
		motorControl(60, 'L', 0.20);
     4ac:	2d ec       	ldi	r18, 0xCD	; 205
     4ae:	3c ec       	ldi	r19, 0xCC	; 204
     4b0:	4c e4       	ldi	r20, 0x4C	; 76
     4b2:	5e e3       	ldi	r21, 0x3E	; 62
     4b4:	6c e4       	ldi	r22, 0x4C	; 76
     4b6:	8c e3       	ldi	r24, 0x3C	; 60
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	0e 94 20 03 	call	0x640	; 0x640 <motorControl>
		directionCurrent = directionDesired;
		break;
     4be:	12 c0       	rjmp	.+36     	; 0x4e4 <setDirection+0x96>
		case T:
		motorControl(60, 'R', 0.20);
     4c0:	2d ec       	ldi	r18, 0xCD	; 205
     4c2:	3c ec       	ldi	r19, 0xCC	; 204
     4c4:	4c e4       	ldi	r20, 0x4C	; 76
     4c6:	5e e3       	ldi	r21, 0x3E	; 62
     4c8:	62 e5       	ldi	r22, 0x52	; 82
     4ca:	8c e3       	ldi	r24, 0x3C	; 60
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	0e 94 20 03 	call	0x640	; 0x640 <motorControl>
		motorControl(60, 'R', 0.20);
     4d2:	2d ec       	ldi	r18, 0xCD	; 205
     4d4:	3c ec       	ldi	r19, 0xCC	; 204
     4d6:	4c e4       	ldi	r20, 0x4C	; 76
     4d8:	5e e3       	ldi	r21, 0x3E	; 62
     4da:	62 e5       	ldi	r22, 0x52	; 82
     4dc:	8c e3       	ldi	r24, 0x3C	; 60
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	0e 94 20 03 	call	0x640	; 0x640 <motorControl>
		break;
		default:
		break;
		clear();
	}
}
     4e4:	60 96       	adiw	r28, 0x10	; 16
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	de bf       	out	0x3e, r29	; 62
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	cd bf       	out	0x3d, r28	; 61
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	08 95       	ret

000004f6 <fetchOrder3>:
	routes[4][1] = 2;
	routes[4][2] = 3;
	routes[4][3] = 5;
	
}
void fetchOrder3(int orderX[], int orderY[], int route[4][4]){
     4f6:	cf 92       	push	r12
     4f8:	df 92       	push	r13
     4fa:	ef 92       	push	r14
     4fc:	ff 92       	push	r15
     4fe:	0f 93       	push	r16
     500:	1f 93       	push	r17
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	00 d0       	rcall	.+0      	; 0x508 <fetchOrder3+0x12>
     508:	cd b7       	in	r28, 0x3d	; 61
     50a:	de b7       	in	r29, 0x3e	; 62
     50c:	6b 01       	movw	r12, r22
	//driveRoute(route, 0);
	do{
		followLine();
     50e:	0e 94 e5 07 	call	0xfca	; 0xfca <followLine>
	}while(checkDecision() != LOW);
     512:	0e 94 70 08 	call	0x10e0	; 0x10e0 <checkDecision>
     516:	89 2b       	or	r24, r25
     518:	d1 f7       	brne	.-12     	; 0x50e <fetchOrder3+0x18>
	
	int xCoordinate = 0, yCoordinate = 0;
     51a:	1a 82       	std	Y+2, r1	; 0x02
     51c:	19 82       	std	Y+1, r1	; 0x01
     51e:	86 01       	movw	r16, r12
     520:	88 e0       	ldi	r24, 0x08	; 8
     522:	c8 0e       	add	r12, r24
     524:	d1 1c       	adc	r13, r1
     526:	78 01       	movw	r14, r16
// 			}
// 			followStraightLine(&xCoordinate, orderX[orderNum]);
// 			print("Hoi :D");
// 		}
		
		if(orderY[orderNum] != yCoordinate){
     528:	f8 01       	movw	r30, r16
     52a:	20 81       	ld	r18, Z
     52c:	31 81       	ldd	r19, Z+1	; 0x01
     52e:	89 81       	ldd	r24, Y+1	; 0x01
     530:	9a 81       	ldd	r25, Y+2	; 0x02
     532:	28 17       	cp	r18, r24
     534:	39 07       	cpc	r19, r25
     536:	01 f1       	breq	.+64     	; 0x578 <fetchOrder3+0x82>
			if(orderY[orderNum] > yCoordinate){
     538:	82 17       	cp	r24, r18
     53a:	93 07       	cpc	r25, r19
     53c:	2c f4       	brge	.+10     	; 0x548 <fetchOrder3+0x52>
				setDirection(N, directionCurrent);
     53e:	60 91 f5 01 	lds	r22, 0x01F5	; 0x8001f5 <directionCurrent>
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	0e 94 27 02 	call	0x44e	; 0x44e <setDirection>
			}
			if(orderY[orderNum] < yCoordinate){
     548:	f7 01       	movw	r30, r14
     54a:	20 81       	ld	r18, Z
     54c:	31 81       	ldd	r19, Z+1	; 0x01
     54e:	89 81       	ldd	r24, Y+1	; 0x01
     550:	9a 81       	ldd	r25, Y+2	; 0x02
     552:	28 17       	cp	r18, r24
     554:	39 07       	cpc	r19, r25
     556:	2c f4       	brge	.+10     	; 0x562 <fetchOrder3+0x6c>
				setDirection(S, directionCurrent);
     558:	60 91 f5 01 	lds	r22, 0x01F5	; 0x8001f5 <directionCurrent>
     55c:	82 e0       	ldi	r24, 0x02	; 2
     55e:	0e 94 27 02 	call	0x44e	; 0x44e <setDirection>
			}
			followStraightLine(&yCoordinate, orderY[orderNum]);
     562:	f7 01       	movw	r30, r14
     564:	60 81       	ld	r22, Z
     566:	71 81       	ldd	r23, Z+1	; 0x01
     568:	ce 01       	movw	r24, r28
     56a:	01 96       	adiw	r24, 0x01	; 1
     56c:	0e 94 bd 01 	call	0x37a	; 0x37a <followStraightLine>
			print("Hoi :D");
     570:	81 e5       	ldi	r24, 0x51	; 81
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	0e 94 42 10 	call	0x2084	; 0x2084 <print>
		}
		set_motors(0,0);               //moeten we nog even naar kijken, hij moet gelijk stilstaan
     578:	60 e0       	ldi	r22, 0x00	; 0
     57a:	70 e0       	ldi	r23, 0x00	; 0
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	0e 94 70 11 	call	0x22e0	; 0x22e0 <set_motors>
		play_from_program_space(PSTR(">f32>>a32"));
     584:	8a e9       	ldi	r24, 0x9A	; 154
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <play_from_program_space>
     58c:	88 eb       	ldi	r24, 0xB8	; 184
     58e:	9b e0       	ldi	r25, 0x0B	; 11
     590:	0e 94 e7 12 	call	0x25ce	; 0x25ce <delay_ms>
     594:	0e 5f       	subi	r16, 0xFE	; 254
     596:	1f 4f       	sbci	r17, 0xFF	; 255
		followLine();
	}while(checkDecision() != LOW);
	
	int xCoordinate = 0, yCoordinate = 0;
	
	for(int orderNum = 0; orderNum < sizeOfOrder; orderNum++){
     598:	0c 15       	cp	r16, r12
     59a:	1d 05       	cpc	r17, r13
     59c:	21 f6       	brne	.-120    	; 0x526 <fetchOrder3+0x30>
		}
		set_motors(0,0);               //moeten we nog even naar kijken, hij moet gelijk stilstaan
		play_from_program_space(PSTR(">f32>>a32"));
		delay(3000);
	}
}
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	1f 91       	pop	r17
     5a8:	0f 91       	pop	r16
     5aa:	ff 90       	pop	r15
     5ac:	ef 90       	pop	r14
     5ae:	df 90       	pop	r13
     5b0:	cf 90       	pop	r12
     5b2:	08 95       	ret

000005b4 <main>:
#include <pololu/3pi.h>
#include <avr/pgmspace.h>
#include <avr/io.h>
#include <avr/interrupt.h>

int main(){
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	cd b7       	in	r28, 0x3d	; 61
     5ba:	de b7       	in	r29, 0x3e	; 62
     5bc:	e0 97       	sbiw	r28, 0x30	; 48
     5be:	0f b6       	in	r0, 0x3f	; 63
     5c0:	f8 94       	cli
     5c2:	de bf       	out	0x3e, r29	; 62
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	cd bf       	out	0x3d, r28	; 61
	initialize();
     5c8:	0e 94 6d 07 	call	0xeda	; 0xeda <initialize>
	serial_set_baud_rate(9600);
     5cc:	60 e8       	ldi	r22, 0x80	; 128
     5ce:	75 e2       	ldi	r23, 0x25	; 37
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	0e 94 35 12 	call	0x246a	; 0x246a <serial_set_baud_rate>
	int routes[4][4];
	readGrid(routes);
     5d8:	ce 01       	movw	r24, r28
     5da:	01 96       	adiw	r24, 0x01	; 1
     5dc:	0e 94 91 01 	call	0x322	; 0x322 <readGrid>
	int orderX[sizeOfOrder] ={1, 1, 1, 1};
     5e0:	88 e0       	ldi	r24, 0x08	; 8
     5e2:	e4 e2       	ldi	r30, 0x24	; 36
     5e4:	f1 e0       	ldi	r31, 0x01	; 1
     5e6:	de 01       	movw	r26, r28
     5e8:	91 96       	adiw	r26, 0x21	; 33
     5ea:	01 90       	ld	r0, Z+
     5ec:	0d 92       	st	X+, r0
     5ee:	8a 95       	dec	r24
     5f0:	e1 f7       	brne	.-8      	; 0x5ea <main+0x36>
	int orderY[sizeOfOrder] ={4, 3, 3, 3};
     5f2:	88 e0       	ldi	r24, 0x08	; 8
     5f4:	ec e2       	ldi	r30, 0x2C	; 44
     5f6:	f1 e0       	ldi	r31, 0x01	; 1
     5f8:	de 01       	movw	r26, r28
     5fa:	99 96       	adiw	r26, 0x29	; 41
     5fc:	01 90       	ld	r0, Z+
     5fe:	0d 92       	st	X+, r0
     600:	8a 95       	dec	r24
     602:	e1 f7       	brne	.-8      	; 0x5fc <main+0x48>
	//wirMain(orderX, orderY);
	sortOrder(orderX, orderY);
     604:	be 01       	movw	r22, r28
     606:	67 5d       	subi	r22, 0xD7	; 215
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	ce 01       	movw	r24, r28
     60c:	81 96       	adiw	r24, 0x21	; 33
     60e:	0e 94 93 00 	call	0x126	; 0x126 <sortOrder>
	fetchOrder3(orderX, orderY, routes);
     612:	ae 01       	movw	r20, r28
     614:	4f 5f       	subi	r20, 0xFF	; 255
     616:	5f 4f       	sbci	r21, 0xFF	; 255
     618:	be 01       	movw	r22, r28
     61a:	67 5d       	subi	r22, 0xD7	; 215
     61c:	7f 4f       	sbci	r23, 0xFF	; 255
     61e:	ce 01       	movw	r24, r28
     620:	81 96       	adiw	r24, 0x21	; 33
     622:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <fetchOrder3>
	clear();
     626:	0e 94 33 10 	call	0x2066	; 0x2066 <clear>
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	e0 96       	adiw	r28, 0x30	; 48
     630:	0f b6       	in	r0, 0x3f	; 63
     632:	f8 94       	cli
     634:	de bf       	out	0x3e, r29	; 62
     636:	0f be       	out	0x3f, r0	; 63
     638:	cd bf       	out	0x3d, r28	; 61
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	08 95       	ret

00000640 <motorControl>:

int speedCurrent = 0;			//Defining the current speeds.
int speedCurrentRight = 0;
int speedCurrentLeft = 0;

void motorControl(int speed, char direction, float aggressionFactor){		//This function is an upgrade over the existing motor control function written by Pololu. This function moves the robot with an entered speed and acceleration time in a desired direction.
     640:	2f 92       	push	r2
     642:	3f 92       	push	r3
     644:	4f 92       	push	r4
     646:	5f 92       	push	r5
     648:	6f 92       	push	r6
     64a:	7f 92       	push	r7
     64c:	8f 92       	push	r8
     64e:	9f 92       	push	r9
     650:	af 92       	push	r10
     652:	bf 92       	push	r11
     654:	cf 92       	push	r12
     656:	df 92       	push	r13
     658:	ef 92       	push	r14
     65a:	ff 92       	push	r15
     65c:	0f 93       	push	r16
     65e:	1f 93       	push	r17
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	cd b7       	in	r28, 0x3d	; 61
     666:	de b7       	in	r29, 0x3e	; 62
     668:	66 97       	sbiw	r28, 0x16	; 22
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	f8 94       	cli
     66e:	de bf       	out	0x3e, r29	; 62
     670:	0f be       	out	0x3f, r0	; 63
     672:	cd bf       	out	0x3d, r28	; 61
     674:	1c 01       	movw	r2, r24
     676:	29 83       	std	Y+1, r18	; 0x01
     678:	3a 83       	std	Y+2, r19	; 0x02
     67a:	4b 83       	std	Y+3, r20	; 0x03
     67c:	5c 83       	std	Y+4, r21	; 0x04
	int setSpeedRight = 0;
	int setSpeedLeft = 0;
	
	//directions direction;

	switch (direction){														//This switch case switches between the directions based on the user input.
     67e:	66 34       	cpi	r22, 0x46	; 70
     680:	61 f0       	breq	.+24     	; 0x69a <motorControl+0x5a>
     682:	20 f4       	brcc	.+8      	; 0x68c <motorControl+0x4c>
     684:	62 34       	cpi	r22, 0x42	; 66
     686:	09 f4       	brne	.+2      	; 0x68a <motorControl+0x4a>
     688:	95 c0       	rjmp	.+298    	; 0x7b4 <motorControl+0x174>
     68a:	08 c4       	rjmp	.+2064   	; 0xe9c <__stack+0x59d>
     68c:	6c 34       	cpi	r22, 0x4C	; 76
     68e:	09 f4       	brne	.+2      	; 0x692 <motorControl+0x52>
     690:	a9 c2       	rjmp	.+1362   	; 0xbe4 <__stack+0x2e5>
     692:	62 35       	cpi	r22, 0x52	; 82
     694:	09 f4       	brne	.+2      	; 0x698 <motorControl+0x58>
     696:	1b c1       	rjmp	.+566    	; 0x8ce <motorControl+0x28e>
     698:	01 c4       	rjmp	.+2050   	; 0xe9c <__stack+0x59d>
		case 'F':															//This case handles the forward movement of the 3PI robot.
		
		setSpeed = speed - speedCurrent;
     69a:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <speedCurrent>
     69e:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <speedCurrent+0x1>
     6a2:	91 01       	movw	r18, r2
     6a4:	28 1b       	sub	r18, r24
     6a6:	39 0b       	sbc	r19, r25
     6a8:	45 e6       	ldi	r20, 0x65	; 101
     6aa:	50 e0       	ldi	r21, 0x00	; 0
     6ac:	5a 87       	std	Y+10, r21	; 0x0a
     6ae:	49 87       	std	Y+9, r20	; 0x09
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){	//This for loop increases the speed of the current speed to the desired speed with a total of a 100 increments.
     6b0:	41 2c       	mov	r4, r1
     6b2:	51 2c       	mov	r5, r1
     6b4:	32 01       	movw	r6, r4
			timerStart = get_ms();
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2*M_PI ) ) * sin ( 2* M_PI * accelerationCounter ) ) );		//This function transfers the input speed to a segmented speed increase based on the swept sinusoidal curve.
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     6b6:	03 2e       	mov	r0, r19
     6b8:	00 0c       	add	r0, r0
     6ba:	44 0b       	sbc	r20, r20
     6bc:	55 0b       	sbc	r21, r21
     6be:	2d 83       	std	Y+5, r18	; 0x05
     6c0:	3e 83       	std	Y+6, r19	; 0x06
     6c2:	4f 83       	std	Y+7, r20	; 0x07
     6c4:	58 87       	std	Y+8, r21	; 0x08
		case 'F':															//This case handles the forward movement of the 3PI robot.
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){	//This for loop increases the speed of the current speed to the desired speed with a total of a 100 increments.
			timerStart = get_ms();
     6c6:	0e 94 1f 13 	call	0x263e	; 0x263e <get_ms>
     6ca:	8b 01       	movw	r16, r22
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2*M_PI ) ) * sin ( 2* M_PI * accelerationCounter ) ) );		//This function transfers the input speed to a segmented speed increase based on the swept sinusoidal curve.
     6cc:	2b ed       	ldi	r18, 0xDB	; 219
     6ce:	3f e0       	ldi	r19, 0x0F	; 15
     6d0:	49 ec       	ldi	r20, 0xC9	; 201
     6d2:	50 e4       	ldi	r21, 0x40	; 64
     6d4:	c3 01       	movw	r24, r6
     6d6:	b2 01       	movw	r22, r4
     6d8:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     6dc:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <sin>
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     6e0:	23 e8       	ldi	r18, 0x83	; 131
     6e2:	39 ef       	ldi	r19, 0xF9	; 249
     6e4:	42 e2       	ldi	r20, 0x22	; 34
     6e6:	5e e3       	ldi	r21, 0x3E	; 62
     6e8:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     6ec:	9b 01       	movw	r18, r22
     6ee:	ac 01       	movw	r20, r24
     6f0:	c3 01       	movw	r24, r6
     6f2:	b2 01       	movw	r22, r4
     6f4:	0e 94 97 08 	call	0x112e	; 0x112e <__subsf3>
     6f8:	4b 01       	movw	r8, r22
     6fa:	5c 01       	movw	r10, r24
     6fc:	6d 81       	ldd	r22, Y+5	; 0x05
     6fe:	7e 81       	ldd	r23, Y+6	; 0x06
     700:	8f 81       	ldd	r24, Y+7	; 0x07
     702:	98 85       	ldd	r25, Y+8	; 0x08
     704:	0e 94 41 09 	call	0x1282	; 0x1282 <__floatsisf>
     708:	9b 01       	movw	r18, r22
     70a:	ac 01       	movw	r20, r24
     70c:	c5 01       	movw	r24, r10
     70e:	b4 01       	movw	r22, r8
     710:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     714:	4b 01       	movw	r8, r22
     716:	5c 01       	movw	r10, r24
     718:	60 91 fa 01 	lds	r22, 0x01FA	; 0x8001fa <speedCurrent>
     71c:	70 91 fb 01 	lds	r23, 0x01FB	; 0x8001fb <speedCurrent+0x1>
     720:	07 2e       	mov	r0, r23
     722:	00 0c       	add	r0, r0
     724:	88 0b       	sbc	r24, r24
     726:	99 0b       	sbc	r25, r25
     728:	0e 94 41 09 	call	0x1282	; 0x1282 <__floatsisf>
     72c:	9b 01       	movw	r18, r22
     72e:	ac 01       	movw	r20, r24
     730:	c5 01       	movw	r24, r10
     732:	b4 01       	movw	r22, r8
     734:	0e 94 98 08 	call	0x1130	; 0x1130 <__addsf3>
     738:	0e 94 09 09 	call	0x1212	; 0x1212 <__fixsfsi>
     73c:	dc 01       	movw	r26, r24
     73e:	cb 01       	movw	r24, r22
     740:	bc 01       	movw	r22, r24
     742:	0e 94 70 11 	call	0x22e0	; 0x22e0 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {											//This while loop temporarily freezes the system to make sure that the increments are spaced properly to facilitate a fluent and consequent increase in speed.
     746:	48 01       	movw	r8, r16
     748:	11 0f       	add	r17, r17
     74a:	aa 08       	sbc	r10, r10
     74c:	bb 08       	sbc	r11, r11
     74e:	0e 94 1f 13 	call	0x263e	; 0x263e <get_ms>
     752:	68 19       	sub	r22, r8
     754:	79 09       	sbc	r23, r9
     756:	8a 09       	sbc	r24, r10
     758:	9b 09       	sbc	r25, r11
     75a:	0e 94 3f 09 	call	0x127e	; 0x127e <__floatunsisf>
     75e:	6b 01       	movw	r12, r22
     760:	7c 01       	movw	r14, r24
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	40 e2       	ldi	r20, 0x20	; 32
     768:	51 e4       	ldi	r21, 0x41	; 65
     76a:	69 81       	ldd	r22, Y+1	; 0x01
     76c:	7a 81       	ldd	r23, Y+2	; 0x02
     76e:	8b 81       	ldd	r24, Y+3	; 0x03
     770:	9c 81       	ldd	r25, Y+4	; 0x04
     772:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     776:	9b 01       	movw	r18, r22
     778:	ac 01       	movw	r20, r24
     77a:	c7 01       	movw	r24, r14
     77c:	b6 01       	movw	r22, r12
     77e:	0e 94 04 09 	call	0x1208	; 0x1208 <__cmpsf2>
     782:	88 23       	and	r24, r24
     784:	24 f3       	brlt	.-56     	; 0x74e <motorControl+0x10e>
	switch (direction){														//This switch case switches between the directions based on the user input.
		case 'F':															//This case handles the forward movement of the 3PI robot.
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){	//This for loop increases the speed of the current speed to the desired speed with a total of a 100 increments.
     786:	2a e0       	ldi	r18, 0x0A	; 10
     788:	37 ed       	ldi	r19, 0xD7	; 215
     78a:	43 e2       	ldi	r20, 0x23	; 35
     78c:	5c e3       	ldi	r21, 0x3C	; 60
     78e:	c3 01       	movw	r24, r6
     790:	b2 01       	movw	r22, r4
     792:	0e 94 98 08 	call	0x1130	; 0x1130 <__addsf3>
     796:	2b 01       	movw	r4, r22
     798:	3c 01       	movw	r6, r24
     79a:	a9 85       	ldd	r26, Y+9	; 0x09
     79c:	ba 85       	ldd	r27, Y+10	; 0x0a
     79e:	11 97       	sbiw	r26, 0x01	; 1
     7a0:	ba 87       	std	Y+10, r27	; 0x0a
     7a2:	a9 87       	std	Y+9, r26	; 0x09
     7a4:	ab 2b       	or	r26, r27
     7a6:	09 f0       	breq	.+2      	; 0x7aa <motorControl+0x16a>
     7a8:	8e cf       	rjmp	.-228    	; 0x6c6 <motorControl+0x86>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {											//This while loop temporarily freezes the system to make sure that the increments are spaced properly to facilitate a fluent and consequent increase in speed.
				//Change the aggression factor to manipulate the acceleration time. A shorter time increases the overall jerk of the acceleration.
			}
		}
		speedCurrent = speed;
     7aa:	30 92 fb 01 	sts	0x01FB, r3	; 0x8001fb <speedCurrent+0x1>
     7ae:	20 92 fa 01 	sts	0x01FA, r2	; 0x8001fa <speedCurrent>
		break;
     7b2:	7a c3       	rjmp	.+1780   	; 0xea8 <__stack+0x5a9>
		
		case 'B':		//This case handles the backward movement of the robot. While the robot does not require this function in the standard routine, it is desired when operating the robot in manual mode.
		
		setSpeed = speed - speedCurrent;
     7b4:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <speedCurrent>
     7b8:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <speedCurrent+0x1>
     7bc:	91 01       	movw	r18, r2
     7be:	28 1b       	sub	r18, r24
     7c0:	39 0b       	sbc	r19, r25
     7c2:	45 e6       	ldi	r20, 0x65	; 101
     7c4:	50 e0       	ldi	r21, 0x00	; 0
     7c6:	5a 87       	std	Y+10, r21	; 0x0a
     7c8:	49 87       	std	Y+9, r20	; 0x09
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     7ca:	41 2c       	mov	r4, r1
     7cc:	51 2c       	mov	r5, r1
     7ce:	32 01       	movw	r6, r4
			timerStart = get_ms();
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     7d0:	03 2e       	mov	r0, r19
     7d2:	00 0c       	add	r0, r0
     7d4:	44 0b       	sbc	r20, r20
     7d6:	55 0b       	sbc	r21, r21
     7d8:	2d 83       	std	Y+5, r18	; 0x05
     7da:	3e 83       	std	Y+6, r19	; 0x06
     7dc:	4f 83       	std	Y+7, r20	; 0x07
     7de:	58 87       	std	Y+8, r21	; 0x08
		case 'B':		//This case handles the backward movement of the robot. While the robot does not require this function in the standard routine, it is desired when operating the robot in manual mode.
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     7e0:	0e 94 1f 13 	call	0x263e	; 0x263e <get_ms>
     7e4:	8b 01       	movw	r16, r22
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) );
     7e6:	2b ed       	ldi	r18, 0xDB	; 219
     7e8:	3f e0       	ldi	r19, 0x0F	; 15
     7ea:	49 ec       	ldi	r20, 0xC9	; 201
     7ec:	50 e4       	ldi	r21, 0x40	; 64
     7ee:	c3 01       	movw	r24, r6
     7f0:	b2 01       	movw	r22, r4
     7f2:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     7f6:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <sin>
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     7fa:	23 e8       	ldi	r18, 0x83	; 131
     7fc:	39 ef       	ldi	r19, 0xF9	; 249
     7fe:	42 e2       	ldi	r20, 0x22	; 34
     800:	5e e3       	ldi	r21, 0x3E	; 62
     802:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     806:	9b 01       	movw	r18, r22
     808:	ac 01       	movw	r20, r24
     80a:	c3 01       	movw	r24, r6
     80c:	b2 01       	movw	r22, r4
     80e:	0e 94 97 08 	call	0x112e	; 0x112e <__subsf3>
     812:	4b 01       	movw	r8, r22
     814:	5c 01       	movw	r10, r24
     816:	6d 81       	ldd	r22, Y+5	; 0x05
     818:	7e 81       	ldd	r23, Y+6	; 0x06
     81a:	8f 81       	ldd	r24, Y+7	; 0x07
     81c:	98 85       	ldd	r25, Y+8	; 0x08
     81e:	0e 94 41 09 	call	0x1282	; 0x1282 <__floatsisf>
     822:	9b 01       	movw	r18, r22
     824:	ac 01       	movw	r20, r24
     826:	c5 01       	movw	r24, r10
     828:	b4 01       	movw	r22, r8
     82a:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     82e:	4b 01       	movw	r8, r22
     830:	5c 01       	movw	r10, r24
     832:	60 91 fa 01 	lds	r22, 0x01FA	; 0x8001fa <speedCurrent>
     836:	70 91 fb 01 	lds	r23, 0x01FB	; 0x8001fb <speedCurrent+0x1>
     83a:	07 2e       	mov	r0, r23
     83c:	00 0c       	add	r0, r0
     83e:	88 0b       	sbc	r24, r24
     840:	99 0b       	sbc	r25, r25
     842:	0e 94 41 09 	call	0x1282	; 0x1282 <__floatsisf>
     846:	9b 01       	movw	r18, r22
     848:	ac 01       	movw	r20, r24
     84a:	c5 01       	movw	r24, r10
     84c:	b4 01       	movw	r22, r8
     84e:	0e 94 98 08 	call	0x1130	; 0x1130 <__addsf3>
     852:	0e 94 09 09 	call	0x1212	; 0x1212 <__fixsfsi>
     856:	dc 01       	movw	r26, r24
     858:	cb 01       	movw	r24, r22
     85a:	bc 01       	movw	r22, r24
     85c:	0e 94 70 11 	call	0x22e0	; 0x22e0 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     860:	48 01       	movw	r8, r16
     862:	11 0f       	add	r17, r17
     864:	aa 08       	sbc	r10, r10
     866:	bb 08       	sbc	r11, r11
     868:	0e 94 1f 13 	call	0x263e	; 0x263e <get_ms>
     86c:	68 19       	sub	r22, r8
     86e:	79 09       	sbc	r23, r9
     870:	8a 09       	sbc	r24, r10
     872:	9b 09       	sbc	r25, r11
     874:	0e 94 3f 09 	call	0x127e	; 0x127e <__floatunsisf>
     878:	6b 01       	movw	r12, r22
     87a:	7c 01       	movw	r14, r24
     87c:	20 e0       	ldi	r18, 0x00	; 0
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	40 e2       	ldi	r20, 0x20	; 32
     882:	51 e4       	ldi	r21, 0x41	; 65
     884:	69 81       	ldd	r22, Y+1	; 0x01
     886:	7a 81       	ldd	r23, Y+2	; 0x02
     888:	8b 81       	ldd	r24, Y+3	; 0x03
     88a:	9c 81       	ldd	r25, Y+4	; 0x04
     88c:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     890:	9b 01       	movw	r18, r22
     892:	ac 01       	movw	r20, r24
     894:	c7 01       	movw	r24, r14
     896:	b6 01       	movw	r22, r12
     898:	0e 94 04 09 	call	0x1208	; 0x1208 <__cmpsf2>
     89c:	88 23       	and	r24, r24
     89e:	24 f3       	brlt	.-56     	; 0x868 <motorControl+0x228>
		
		case 'B':		//This case handles the backward movement of the robot. While the robot does not require this function in the standard routine, it is desired when operating the robot in manual mode.
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     8a0:	2a e0       	ldi	r18, 0x0A	; 10
     8a2:	37 ed       	ldi	r19, 0xD7	; 215
     8a4:	43 e2       	ldi	r20, 0x23	; 35
     8a6:	5c e3       	ldi	r21, 0x3C	; 60
     8a8:	c3 01       	movw	r24, r6
     8aa:	b2 01       	movw	r22, r4
     8ac:	0e 94 98 08 	call	0x1130	; 0x1130 <__addsf3>
     8b0:	2b 01       	movw	r4, r22
     8b2:	3c 01       	movw	r6, r24
     8b4:	a9 85       	ldd	r26, Y+9	; 0x09
     8b6:	ba 85       	ldd	r27, Y+10	; 0x0a
     8b8:	11 97       	sbiw	r26, 0x01	; 1
     8ba:	ba 87       	std	Y+10, r27	; 0x0a
     8bc:	a9 87       	std	Y+9, r26	; 0x09
     8be:	ab 2b       	or	r26, r27
     8c0:	09 f0       	breq	.+2      	; 0x8c4 <motorControl+0x284>
     8c2:	8e cf       	rjmp	.-228    	; 0x7e0 <motorControl+0x1a0>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrent = speed;
     8c4:	30 92 fb 01 	sts	0x01FB, r3	; 0x8001fb <speedCurrent+0x1>
     8c8:	20 92 fa 01 	sts	0x01FA, r2	; 0x8001fa <speedCurrent>
		break;
     8cc:	ed c2       	rjmp	.+1498   	; 0xea8 <__stack+0x5a9>

		case 'R':		//This case handles the rotation of the robot 90 degrees to the right. The robot accelerates and decelerates with the same method used with forward and backward movement.
		
		setSpeedRight = speed + speedCurrentRight;
     8ce:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <speedCurrentRight>
     8d2:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <speedCurrentRight+0x1>
     8d6:	82 0d       	add	r24, r2
     8d8:	93 1d       	adc	r25, r3
		setSpeedLeft = speed - speedCurrentLeft;
     8da:	20 91 f6 01 	lds	r18, 0x01F6	; 0x8001f6 <speedCurrentLeft>
     8de:	30 91 f7 01 	lds	r19, 0x01F7	; 0x8001f7 <speedCurrentLeft+0x1>
     8e2:	a1 01       	movw	r20, r2
     8e4:	42 1b       	sub	r20, r18
     8e6:	53 0b       	sbc	r21, r19
     8e8:	9a 01       	movw	r18, r20
     8ea:	05 e6       	ldi	r16, 0x65	; 101
     8ec:	10 e0       	ldi	r17, 0x00	; 0
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     8ee:	1d 82       	std	Y+5, r1	; 0x05
     8f0:	1e 82       	std	Y+6, r1	; 0x06
     8f2:	1f 82       	std	Y+7, r1	; 0x07
     8f4:	18 86       	std	Y+8, r1	; 0x08
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			motorLeftSpeed = speedCurrent + (speedCurrentLeft + (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     8f6:	ac 01       	movw	r20, r24
     8f8:	99 0f       	add	r25, r25
     8fa:	66 0b       	sbc	r22, r22
     8fc:	77 0b       	sbc	r23, r23
     8fe:	4d 87       	std	Y+13, r20	; 0x0d
     900:	5e 87       	std	Y+14, r21	; 0x0e
     902:	6f 87       	std	Y+15, r22	; 0x0f
     904:	78 8b       	std	Y+16, r23	; 0x10
     906:	b9 01       	movw	r22, r18
     908:	33 0f       	add	r19, r19
     90a:	88 0b       	sbc	r24, r24
     90c:	99 0b       	sbc	r25, r25
     90e:	69 8b       	std	Y+17, r22	; 0x11
     910:	7a 8b       	std	Y+18, r23	; 0x12
     912:	8b 8b       	std	Y+19, r24	; 0x13
     914:	9c 8b       	std	Y+20, r25	; 0x14
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     916:	0e 94 1f 13 	call	0x263e	; 0x263e <get_ms>
     91a:	7e 8b       	std	Y+22, r23	; 0x16
     91c:	6d 8b       	std	Y+21, r22	; 0x15
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
     91e:	60 91 fa 01 	lds	r22, 0x01FA	; 0x8001fa <speedCurrent>
     922:	70 91 fb 01 	lds	r23, 0x01FB	; 0x8001fb <speedCurrent+0x1>
     926:	07 2e       	mov	r0, r23
     928:	00 0c       	add	r0, r0
     92a:	88 0b       	sbc	r24, r24
     92c:	99 0b       	sbc	r25, r25
     92e:	0e 94 41 09 	call	0x1282	; 0x1282 <__floatsisf>
     932:	69 87       	std	Y+9, r22	; 0x09
     934:	7a 87       	std	Y+10, r23	; 0x0a
     936:	8b 87       	std	Y+11, r24	; 0x0b
     938:	9c 87       	std	Y+12, r25	; 0x0c
     93a:	2b ed       	ldi	r18, 0xDB	; 219
     93c:	3f e0       	ldi	r19, 0x0F	; 15
     93e:	49 ec       	ldi	r20, 0xC9	; 201
     940:	50 e4       	ldi	r21, 0x40	; 64
     942:	6d 81       	ldd	r22, Y+5	; 0x05
     944:	7e 81       	ldd	r23, Y+6	; 0x06
     946:	8f 81       	ldd	r24, Y+7	; 0x07
     948:	98 85       	ldd	r25, Y+8	; 0x08
     94a:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     94e:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <sin>
     952:	23 e8       	ldi	r18, 0x83	; 131
     954:	39 ef       	ldi	r19, 0xF9	; 249
     956:	42 e2       	ldi	r20, 0x22	; 34
     958:	5e e3       	ldi	r21, 0x3E	; 62
     95a:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     95e:	2d 81       	ldd	r18, Y+5	; 0x05
     960:	3e 81       	ldd	r19, Y+6	; 0x06
     962:	4f 81       	ldd	r20, Y+7	; 0x07
     964:	58 85       	ldd	r21, Y+8	; 0x08
     966:	0e 94 98 08 	call	0x1130	; 0x1130 <__addsf3>
     96a:	4b 01       	movw	r8, r22
     96c:	5c 01       	movw	r10, r24
			
			motorLeftSpeed = speedCurrent + (speedCurrentLeft + (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     96e:	60 91 f8 01 	lds	r22, 0x01F8	; 0x8001f8 <speedCurrentRight>
     972:	70 91 f9 01 	lds	r23, 0x01F9	; 0x8001f9 <speedCurrentRight+0x1>
     976:	07 2e       	mov	r0, r23
     978:	00 0c       	add	r0, r0
     97a:	88 0b       	sbc	r24, r24
     97c:	99 0b       	sbc	r25, r25
     97e:	0e 94 41 09 	call	0x1282	; 0x1282 <__floatsisf>
     982:	2b 01       	movw	r4, r22
     984:	3c 01       	movw	r6, r24
     986:	6d 85       	ldd	r22, Y+13	; 0x0d
     988:	7e 85       	ldd	r23, Y+14	; 0x0e
     98a:	8f 85       	ldd	r24, Y+15	; 0x0f
     98c:	98 89       	ldd	r25, Y+16	; 0x10
     98e:	0e 94 41 09 	call	0x1282	; 0x1282 <__floatsisf>
     992:	a5 01       	movw	r20, r10
     994:	94 01       	movw	r18, r8
     996:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     99a:	9b 01       	movw	r18, r22
     99c:	ac 01       	movw	r20, r24
     99e:	c3 01       	movw	r24, r6
     9a0:	b2 01       	movw	r22, r4
     9a2:	0e 94 97 08 	call	0x112e	; 0x112e <__subsf3>
     9a6:	29 85       	ldd	r18, Y+9	; 0x09
     9a8:	3a 85       	ldd	r19, Y+10	; 0x0a
     9aa:	4b 85       	ldd	r20, Y+11	; 0x0b
     9ac:	5c 85       	ldd	r21, Y+12	; 0x0c
     9ae:	0e 94 98 08 	call	0x1130	; 0x1130 <__addsf3>
     9b2:	0e 94 09 09 	call	0x1212	; 0x1212 <__fixsfsi>
     9b6:	2b 01       	movw	r4, r22
     9b8:	3c 01       	movw	r6, r24
     9ba:	60 91 f6 01 	lds	r22, 0x01F6	; 0x8001f6 <speedCurrentLeft>
     9be:	70 91 f7 01 	lds	r23, 0x01F7	; 0x8001f7 <speedCurrentLeft+0x1>
     9c2:	07 2e       	mov	r0, r23
     9c4:	00 0c       	add	r0, r0
     9c6:	88 0b       	sbc	r24, r24
     9c8:	99 0b       	sbc	r25, r25
     9ca:	0e 94 41 09 	call	0x1282	; 0x1282 <__floatsisf>
     9ce:	6b 01       	movw	r12, r22
     9d0:	7c 01       	movw	r14, r24
     9d2:	69 89       	ldd	r22, Y+17	; 0x11
     9d4:	7a 89       	ldd	r23, Y+18	; 0x12
     9d6:	8b 89       	ldd	r24, Y+19	; 0x13
     9d8:	9c 89       	ldd	r25, Y+20	; 0x14
     9da:	0e 94 41 09 	call	0x1282	; 0x1282 <__floatsisf>
     9de:	a5 01       	movw	r20, r10
     9e0:	94 01       	movw	r18, r8
     9e2:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     9e6:	9b 01       	movw	r18, r22
     9e8:	ac 01       	movw	r20, r24
     9ea:	c7 01       	movw	r24, r14
     9ec:	b6 01       	movw	r22, r12
     9ee:	0e 94 98 08 	call	0x1130	; 0x1130 <__addsf3>
     9f2:	29 85       	ldd	r18, Y+9	; 0x09
     9f4:	3a 85       	ldd	r19, Y+10	; 0x0a
     9f6:	4b 85       	ldd	r20, Y+11	; 0x0b
     9f8:	5c 85       	ldd	r21, Y+12	; 0x0c
     9fa:	0e 94 98 08 	call	0x1130	; 0x1130 <__addsf3>
     9fe:	0e 94 09 09 	call	0x1212	; 0x1212 <__fixsfsi>
     a02:	dc 01       	movw	r26, r24
     a04:	cb 01       	movw	r24, r22
     a06:	b2 01       	movw	r22, r4
     a08:	0e 94 70 11 	call	0x22e0	; 0x22e0 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     a0c:	8d 89       	ldd	r24, Y+21	; 0x15
     a0e:	9e 89       	ldd	r25, Y+22	; 0x16
     a10:	4c 01       	movw	r8, r24
     a12:	99 0f       	add	r25, r25
     a14:	aa 08       	sbc	r10, r10
     a16:	bb 08       	sbc	r11, r11
     a18:	0e 94 1f 13 	call	0x263e	; 0x263e <get_ms>
     a1c:	6b 01       	movw	r12, r22
     a1e:	7c 01       	movw	r14, r24
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	40 e2       	ldi	r20, 0x20	; 32
     a26:	51 e4       	ldi	r21, 0x41	; 65
     a28:	69 81       	ldd	r22, Y+1	; 0x01
     a2a:	7a 81       	ldd	r23, Y+2	; 0x02
     a2c:	8b 81       	ldd	r24, Y+3	; 0x03
     a2e:	9c 81       	ldd	r25, Y+4	; 0x04
     a30:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     a34:	2b 01       	movw	r4, r22
     a36:	3c 01       	movw	r6, r24
     a38:	c7 01       	movw	r24, r14
     a3a:	b6 01       	movw	r22, r12
     a3c:	68 19       	sub	r22, r8
     a3e:	79 09       	sbc	r23, r9
     a40:	8a 09       	sbc	r24, r10
     a42:	9b 09       	sbc	r25, r11
     a44:	0e 94 3f 09 	call	0x127e	; 0x127e <__floatunsisf>
     a48:	a3 01       	movw	r20, r6
     a4a:	92 01       	movw	r18, r4
     a4c:	0e 94 04 09 	call	0x1208	; 0x1208 <__cmpsf2>
     a50:	88 23       	and	r24, r24
     a52:	14 f3       	brlt	.-60     	; 0xa18 <__stack+0x119>
		case 'R':		//This case handles the rotation of the robot 90 degrees to the right. The robot accelerates and decelerates with the same method used with forward and backward movement.
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     a54:	2a e0       	ldi	r18, 0x0A	; 10
     a56:	37 ed       	ldi	r19, 0xD7	; 215
     a58:	43 e2       	ldi	r20, 0x23	; 35
     a5a:	5c e3       	ldi	r21, 0x3C	; 60
     a5c:	6d 81       	ldd	r22, Y+5	; 0x05
     a5e:	7e 81       	ldd	r23, Y+6	; 0x06
     a60:	8f 81       	ldd	r24, Y+7	; 0x07
     a62:	98 85       	ldd	r25, Y+8	; 0x08
     a64:	0e 94 98 08 	call	0x1130	; 0x1130 <__addsf3>
     a68:	6d 83       	std	Y+5, r22	; 0x05
     a6a:	7e 83       	std	Y+6, r23	; 0x06
     a6c:	8f 83       	std	Y+7, r24	; 0x07
     a6e:	98 87       	std	Y+8, r25	; 0x08
     a70:	01 50       	subi	r16, 0x01	; 1
     a72:	11 09       	sbc	r17, r1
     a74:	09 f0       	breq	.+2      	; 0xa78 <__stack+0x179>
     a76:	4f cf       	rjmp	.-354    	; 0x916 <__stack+0x17>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = -speed;
     a78:	88 27       	eor	r24, r24
     a7a:	99 27       	eor	r25, r25
     a7c:	82 19       	sub	r24, r2
     a7e:	93 09       	sbc	r25, r3
     a80:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <speedCurrentRight+0x1>
     a84:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <speedCurrentRight>
		speedCurrentLeft = speed;
     a88:	30 92 f7 01 	sts	0x01F7, r3	; 0x8001f7 <speedCurrentLeft+0x1>
     a8c:	20 92 f6 01 	sts	0x01F6, r2	; 0x8001f6 <speedCurrentLeft>
     a90:	05 e6       	ldi	r16, 0x65	; 101
     a92:	10 e0       	ldi	r17, 0x00	; 0
		speed = 0;
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     a94:	19 82       	std	Y+1, r1	; 0x01
     a96:	1a 82       	std	Y+2, r1	; 0x02
     a98:	1b 82       	std	Y+3, r1	; 0x03
     a9a:	1c 82       	std	Y+4, r1	; 0x04
			timerStart = get_ms();
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
     a9c:	9c 01       	movw	r18, r24
     a9e:	99 0f       	add	r25, r25
     aa0:	44 0b       	sbc	r20, r20
     aa2:	55 0b       	sbc	r21, r21
     aa4:	29 87       	std	Y+9, r18	; 0x09
     aa6:	3a 87       	std	Y+10, r19	; 0x0a
     aa8:	4b 87       	std	Y+11, r20	; 0x0b
     aaa:	5c 87       	std	Y+12, r21	; 0x0c
     aac:	c1 2c       	mov	r12, r1
     aae:	d1 2c       	mov	r13, r1
     ab0:	76 01       	movw	r14, r12
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     ab2:	0e 94 1f 13 	call	0x263e	; 0x263e <get_ms>
     ab6:	7e 87       	std	Y+14, r23	; 0x0e
     ab8:	6d 87       	std	Y+13, r22	; 0x0d
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
     aba:	60 91 fa 01 	lds	r22, 0x01FA	; 0x8001fa <speedCurrent>
     abe:	70 91 fb 01 	lds	r23, 0x01FB	; 0x8001fb <speedCurrent+0x1>
     ac2:	07 2e       	mov	r0, r23
     ac4:	00 0c       	add	r0, r0
     ac6:	88 0b       	sbc	r24, r24
     ac8:	99 0b       	sbc	r25, r25
     aca:	0e 94 41 09 	call	0x1282	; 0x1282 <__floatsisf>
     ace:	69 83       	std	Y+1, r22	; 0x01
     ad0:	7a 83       	std	Y+2, r23	; 0x02
     ad2:	8b 83       	std	Y+3, r24	; 0x03
     ad4:	9c 83       	std	Y+4, r25	; 0x04
     ad6:	2b ed       	ldi	r18, 0xDB	; 219
     ad8:	3f e0       	ldi	r19, 0x0F	; 15
     ada:	49 ec       	ldi	r20, 0xC9	; 201
     adc:	50 e4       	ldi	r21, 0x40	; 64
     ade:	c7 01       	movw	r24, r14
     ae0:	b6 01       	movw	r22, r12
     ae2:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     ae6:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <sin>
     aea:	23 e8       	ldi	r18, 0x83	; 131
     aec:	39 ef       	ldi	r19, 0xF9	; 249
     aee:	42 e2       	ldi	r20, 0x22	; 34
     af0:	5e e3       	ldi	r21, 0x3E	; 62
     af2:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     af6:	a7 01       	movw	r20, r14
     af8:	96 01       	movw	r18, r12
     afa:	0e 94 98 08 	call	0x1130	; 0x1130 <__addsf3>
     afe:	4b 01       	movw	r8, r22
     b00:	5c 01       	movw	r10, r24
     b02:	69 85       	ldd	r22, Y+9	; 0x09
     b04:	7a 85       	ldd	r23, Y+10	; 0x0a
     b06:	8b 85       	ldd	r24, Y+11	; 0x0b
     b08:	9c 85       	ldd	r25, Y+12	; 0x0c
     b0a:	0e 94 41 09 	call	0x1282	; 0x1282 <__floatsisf>
     b0e:	9b 01       	movw	r18, r22
     b10:	ac 01       	movw	r20, r24
     b12:	c5 01       	movw	r24, r10
     b14:	b4 01       	movw	r22, r8
     b16:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     b1a:	4b 01       	movw	r8, r22
     b1c:	5c 01       	movw	r10, r24
			
			motorLeftSpeed = speedCurrent + (speedCurrentLeft + (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     b1e:	60 91 f8 01 	lds	r22, 0x01F8	; 0x8001f8 <speedCurrentRight>
     b22:	70 91 f9 01 	lds	r23, 0x01F9	; 0x8001f9 <speedCurrentRight+0x1>
     b26:	07 2e       	mov	r0, r23
     b28:	00 0c       	add	r0, r0
     b2a:	88 0b       	sbc	r24, r24
     b2c:	99 0b       	sbc	r25, r25
     b2e:	0e 94 41 09 	call	0x1282	; 0x1282 <__floatsisf>
     b32:	a5 01       	movw	r20, r10
     b34:	94 01       	movw	r18, r8
     b36:	0e 94 97 08 	call	0x112e	; 0x112e <__subsf3>
     b3a:	29 81       	ldd	r18, Y+1	; 0x01
     b3c:	3a 81       	ldd	r19, Y+2	; 0x02
     b3e:	4b 81       	ldd	r20, Y+3	; 0x03
     b40:	5c 81       	ldd	r21, Y+4	; 0x04
     b42:	0e 94 98 08 	call	0x1130	; 0x1130 <__addsf3>
     b46:	0e 94 09 09 	call	0x1212	; 0x1212 <__fixsfsi>
     b4a:	6d 83       	std	Y+5, r22	; 0x05
     b4c:	7e 83       	std	Y+6, r23	; 0x06
     b4e:	8f 83       	std	Y+7, r24	; 0x07
     b50:	98 87       	std	Y+8, r25	; 0x08
     b52:	60 91 f6 01 	lds	r22, 0x01F6	; 0x8001f6 <speedCurrentLeft>
     b56:	70 91 f7 01 	lds	r23, 0x01F7	; 0x8001f7 <speedCurrentLeft+0x1>
     b5a:	07 2e       	mov	r0, r23
     b5c:	00 0c       	add	r0, r0
     b5e:	88 0b       	sbc	r24, r24
     b60:	99 0b       	sbc	r25, r25
     b62:	0e 94 41 09 	call	0x1282	; 0x1282 <__floatsisf>
     b66:	a5 01       	movw	r20, r10
     b68:	94 01       	movw	r18, r8
     b6a:	0e 94 98 08 	call	0x1130	; 0x1130 <__addsf3>
     b6e:	29 81       	ldd	r18, Y+1	; 0x01
     b70:	3a 81       	ldd	r19, Y+2	; 0x02
     b72:	4b 81       	ldd	r20, Y+3	; 0x03
     b74:	5c 81       	ldd	r21, Y+4	; 0x04
     b76:	0e 94 98 08 	call	0x1130	; 0x1130 <__addsf3>
     b7a:	0e 94 09 09 	call	0x1212	; 0x1212 <__fixsfsi>
     b7e:	dc 01       	movw	r26, r24
     b80:	cb 01       	movw	r24, r22
     b82:	6d 81       	ldd	r22, Y+5	; 0x05
     b84:	7e 81       	ldd	r23, Y+6	; 0x06
     b86:	0e 94 70 11 	call	0x22e0	; 0x22e0 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     b8a:	4d 85       	ldd	r20, Y+13	; 0x0d
     b8c:	5e 85       	ldd	r21, Y+14	; 0x0e
     b8e:	4a 01       	movw	r8, r20
     b90:	55 0f       	add	r21, r21
     b92:	aa 08       	sbc	r10, r10
     b94:	bb 08       	sbc	r11, r11
     b96:	0e 94 1f 13 	call	0x263e	; 0x263e <get_ms>
     b9a:	68 19       	sub	r22, r8
     b9c:	79 09       	sbc	r23, r9
     b9e:	8a 09       	sbc	r24, r10
     ba0:	9b 09       	sbc	r25, r11
     ba2:	0e 94 3f 09 	call	0x127e	; 0x127e <__floatunsisf>
     ba6:	9b 01       	movw	r18, r22
     ba8:	ac 01       	movw	r20, r24
     baa:	c3 01       	movw	r24, r6
     bac:	b2 01       	movw	r22, r4
     bae:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__gesf2>
     bb2:	18 16       	cp	r1, r24
     bb4:	84 f3       	brlt	.-32     	; 0xb96 <__stack+0x297>
		speed = 0;
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     bb6:	2a e0       	ldi	r18, 0x0A	; 10
     bb8:	37 ed       	ldi	r19, 0xD7	; 215
     bba:	43 e2       	ldi	r20, 0x23	; 35
     bbc:	5c e3       	ldi	r21, 0x3C	; 60
     bbe:	c7 01       	movw	r24, r14
     bc0:	b6 01       	movw	r22, r12
     bc2:	0e 94 98 08 	call	0x1130	; 0x1130 <__addsf3>
     bc6:	6b 01       	movw	r12, r22
     bc8:	7c 01       	movw	r14, r24
     bca:	01 50       	subi	r16, 0x01	; 1
     bcc:	11 09       	sbc	r17, r1
     bce:	09 f0       	breq	.+2      	; 0xbd2 <__stack+0x2d3>
     bd0:	70 cf       	rjmp	.-288    	; 0xab2 <__stack+0x1b3>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = -speed;
     bd2:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <speedCurrentRight+0x1>
     bd6:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <speedCurrentRight>
		speedCurrentLeft = speed;
     bda:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <speedCurrentLeft+0x1>
     bde:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <speedCurrentLeft>
		
		break;
     be2:	62 c1       	rjmp	.+708    	; 0xea8 <__stack+0x5a9>

		case 'L': //This case handles the rotation of the robot 90 degrees to the left. The robot accelerates and decelerates with the same method used with forward and backward movement.
		
		setSpeedRight = speed - speedCurrentRight;
     be4:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <speedCurrentRight>
     be8:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <speedCurrentRight+0x1>
     bec:	91 01       	movw	r18, r2
     bee:	28 1b       	sub	r18, r24
     bf0:	39 0b       	sbc	r19, r25
		setSpeedLeft = speed + speedCurrentLeft;
     bf2:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <speedCurrentLeft>
     bf6:	90 91 f7 01 	lds	r25, 0x01F7	; 0x8001f7 <speedCurrentLeft+0x1>
     bfa:	82 0d       	add	r24, r2
     bfc:	93 1d       	adc	r25, r3
     bfe:	65 e6       	ldi	r22, 0x65	; 101
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	7a 8b       	std	Y+18, r23	; 0x12
     c04:	69 8b       	std	Y+17, r22	; 0x11
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     c06:	1d 82       	std	Y+5, r1	; 0x05
     c08:	1e 82       	std	Y+6, r1	; 0x06
     c0a:	1f 82       	std	Y+7, r1	; 0x07
     c0c:	18 86       	std	Y+8, r1	; 0x08
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
			
			motorLeftSpeed = speedCurrentLeft - (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ));
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     c0e:	a9 01       	movw	r20, r18
     c10:	33 0f       	add	r19, r19
     c12:	66 0b       	sbc	r22, r22
     c14:	77 0b       	sbc	r23, r23
     c16:	49 87       	std	Y+9, r20	; 0x09
     c18:	5a 87       	std	Y+10, r21	; 0x0a
     c1a:	6b 87       	std	Y+11, r22	; 0x0b
     c1c:	7c 87       	std	Y+12, r23	; 0x0c
     c1e:	9c 01       	movw	r18, r24
     c20:	99 0f       	add	r25, r25
     c22:	44 0b       	sbc	r20, r20
     c24:	55 0b       	sbc	r21, r21
     c26:	2d 87       	std	Y+13, r18	; 0x0d
     c28:	3e 87       	std	Y+14, r19	; 0x0e
     c2a:	4f 87       	std	Y+15, r20	; 0x0f
     c2c:	58 8b       	std	Y+16, r21	; 0x10
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     c2e:	0e 94 1f 13 	call	0x263e	; 0x263e <get_ms>
     c32:	8b 01       	movw	r16, r22
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
     c34:	2b ed       	ldi	r18, 0xDB	; 219
     c36:	3f e0       	ldi	r19, 0x0F	; 15
     c38:	49 ec       	ldi	r20, 0xC9	; 201
     c3a:	50 e4       	ldi	r21, 0x40	; 64
     c3c:	6d 81       	ldd	r22, Y+5	; 0x05
     c3e:	7e 81       	ldd	r23, Y+6	; 0x06
     c40:	8f 81       	ldd	r24, Y+7	; 0x07
     c42:	98 85       	ldd	r25, Y+8	; 0x08
     c44:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     c48:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <sin>
     c4c:	23 e8       	ldi	r18, 0x83	; 131
     c4e:	39 ef       	ldi	r19, 0xF9	; 249
     c50:	42 e2       	ldi	r20, 0x22	; 34
     c52:	5e e3       	ldi	r21, 0x3E	; 62
     c54:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     c58:	2d 81       	ldd	r18, Y+5	; 0x05
     c5a:	3e 81       	ldd	r19, Y+6	; 0x06
     c5c:	4f 81       	ldd	r20, Y+7	; 0x07
     c5e:	58 85       	ldd	r21, Y+8	; 0x08
     c60:	0e 94 98 08 	call	0x1130	; 0x1130 <__addsf3>
     c64:	6b 01       	movw	r12, r22
     c66:	7c 01       	movw	r14, r24
			
			motorLeftSpeed = speedCurrentLeft - (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ));
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     c68:	60 91 f8 01 	lds	r22, 0x01F8	; 0x8001f8 <speedCurrentRight>
     c6c:	70 91 f9 01 	lds	r23, 0x01F9	; 0x8001f9 <speedCurrentRight+0x1>
     c70:	07 2e       	mov	r0, r23
     c72:	00 0c       	add	r0, r0
     c74:	88 0b       	sbc	r24, r24
     c76:	99 0b       	sbc	r25, r25
     c78:	0e 94 41 09 	call	0x1282	; 0x1282 <__floatsisf>
     c7c:	4b 01       	movw	r8, r22
     c7e:	5c 01       	movw	r10, r24
     c80:	69 85       	ldd	r22, Y+9	; 0x09
     c82:	7a 85       	ldd	r23, Y+10	; 0x0a
     c84:	8b 85       	ldd	r24, Y+11	; 0x0b
     c86:	9c 85       	ldd	r25, Y+12	; 0x0c
     c88:	0e 94 41 09 	call	0x1282	; 0x1282 <__floatsisf>
     c8c:	a7 01       	movw	r20, r14
     c8e:	96 01       	movw	r18, r12
     c90:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     c94:	9b 01       	movw	r18, r22
     c96:	ac 01       	movw	r20, r24
     c98:	c5 01       	movw	r24, r10
     c9a:	b4 01       	movw	r22, r8
     c9c:	0e 94 98 08 	call	0x1130	; 0x1130 <__addsf3>
     ca0:	0e 94 09 09 	call	0x1212	; 0x1212 <__fixsfsi>
     ca4:	4b 01       	movw	r8, r22
     ca6:	5c 01       	movw	r10, r24
     ca8:	60 91 f6 01 	lds	r22, 0x01F6	; 0x8001f6 <speedCurrentLeft>
     cac:	70 91 f7 01 	lds	r23, 0x01F7	; 0x8001f7 <speedCurrentLeft+0x1>
     cb0:	07 2e       	mov	r0, r23
     cb2:	00 0c       	add	r0, r0
     cb4:	88 0b       	sbc	r24, r24
     cb6:	99 0b       	sbc	r25, r25
     cb8:	0e 94 41 09 	call	0x1282	; 0x1282 <__floatsisf>
     cbc:	2b 01       	movw	r4, r22
     cbe:	3c 01       	movw	r6, r24
     cc0:	6d 85       	ldd	r22, Y+13	; 0x0d
     cc2:	7e 85       	ldd	r23, Y+14	; 0x0e
     cc4:	8f 85       	ldd	r24, Y+15	; 0x0f
     cc6:	98 89       	ldd	r25, Y+16	; 0x10
     cc8:	0e 94 41 09 	call	0x1282	; 0x1282 <__floatsisf>
     ccc:	a7 01       	movw	r20, r14
     cce:	96 01       	movw	r18, r12
     cd0:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     cd4:	9b 01       	movw	r18, r22
     cd6:	ac 01       	movw	r20, r24
     cd8:	c3 01       	movw	r24, r6
     cda:	b2 01       	movw	r22, r4
     cdc:	0e 94 97 08 	call	0x112e	; 0x112e <__subsf3>
     ce0:	0e 94 09 09 	call	0x1212	; 0x1212 <__fixsfsi>
     ce4:	dc 01       	movw	r26, r24
     ce6:	cb 01       	movw	r24, r22
     ce8:	b4 01       	movw	r22, r8
     cea:	0e 94 70 11 	call	0x22e0	; 0x22e0 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     cee:	48 01       	movw	r8, r16
     cf0:	11 0f       	add	r17, r17
     cf2:	aa 08       	sbc	r10, r10
     cf4:	bb 08       	sbc	r11, r11
     cf6:	0e 94 1f 13 	call	0x263e	; 0x263e <get_ms>
     cfa:	2b 01       	movw	r4, r22
     cfc:	3c 01       	movw	r6, r24
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	40 e2       	ldi	r20, 0x20	; 32
     d04:	51 e4       	ldi	r21, 0x41	; 65
     d06:	69 81       	ldd	r22, Y+1	; 0x01
     d08:	7a 81       	ldd	r23, Y+2	; 0x02
     d0a:	8b 81       	ldd	r24, Y+3	; 0x03
     d0c:	9c 81       	ldd	r25, Y+4	; 0x04
     d0e:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     d12:	6b 01       	movw	r12, r22
     d14:	7c 01       	movw	r14, r24
     d16:	c3 01       	movw	r24, r6
     d18:	b2 01       	movw	r22, r4
     d1a:	68 19       	sub	r22, r8
     d1c:	79 09       	sbc	r23, r9
     d1e:	8a 09       	sbc	r24, r10
     d20:	9b 09       	sbc	r25, r11
     d22:	0e 94 3f 09 	call	0x127e	; 0x127e <__floatunsisf>
     d26:	a7 01       	movw	r20, r14
     d28:	96 01       	movw	r18, r12
     d2a:	0e 94 04 09 	call	0x1208	; 0x1208 <__cmpsf2>
     d2e:	88 23       	and	r24, r24
     d30:	14 f3       	brlt	.-60     	; 0xcf6 <__stack+0x3f7>
		case 'L': //This case handles the rotation of the robot 90 degrees to the left. The robot accelerates and decelerates with the same method used with forward and backward movement.
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     d32:	2a e0       	ldi	r18, 0x0A	; 10
     d34:	37 ed       	ldi	r19, 0xD7	; 215
     d36:	43 e2       	ldi	r20, 0x23	; 35
     d38:	5c e3       	ldi	r21, 0x3C	; 60
     d3a:	6d 81       	ldd	r22, Y+5	; 0x05
     d3c:	7e 81       	ldd	r23, Y+6	; 0x06
     d3e:	8f 81       	ldd	r24, Y+7	; 0x07
     d40:	98 85       	ldd	r25, Y+8	; 0x08
     d42:	0e 94 98 08 	call	0x1130	; 0x1130 <__addsf3>
     d46:	6d 83       	std	Y+5, r22	; 0x05
     d48:	7e 83       	std	Y+6, r23	; 0x06
     d4a:	8f 83       	std	Y+7, r24	; 0x07
     d4c:	98 87       	std	Y+8, r25	; 0x08
     d4e:	a9 89       	ldd	r26, Y+17	; 0x11
     d50:	ba 89       	ldd	r27, Y+18	; 0x12
     d52:	11 97       	sbiw	r26, 0x01	; 1
     d54:	ba 8b       	std	Y+18, r27	; 0x12
     d56:	a9 8b       	std	Y+17, r26	; 0x11
     d58:	ab 2b       	or	r26, r27
     d5a:	09 f0       	breq	.+2      	; 0xd5e <__stack+0x45f>
     d5c:	68 cf       	rjmp	.-304    	; 0xc2e <__stack+0x32f>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = speed;
     d5e:	30 92 f9 01 	sts	0x01F9, r3	; 0x8001f9 <speedCurrentRight+0x1>
     d62:	20 92 f8 01 	sts	0x01F8, r2	; 0x8001f8 <speedCurrentRight>
		speedCurrentLeft = -speed;
     d66:	31 94       	neg	r3
     d68:	21 94       	neg	r2
     d6a:	31 08       	sbc	r3, r1
     d6c:	30 92 f7 01 	sts	0x01F7, r3	; 0x8001f7 <speedCurrentLeft+0x1>
     d70:	20 92 f6 01 	sts	0x01F6, r2	; 0x8001f6 <speedCurrentLeft>
     d74:	25 e6       	ldi	r18, 0x65	; 101
     d76:	30 e0       	ldi	r19, 0x00	; 0
		speed = 0;
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     d78:	19 82       	std	Y+1, r1	; 0x01
     d7a:	1a 82       	std	Y+2, r1	; 0x02
     d7c:	1b 82       	std	Y+3, r1	; 0x03
     d7e:	1c 82       	std	Y+4, r1	; 0x04
			timerStart = get_ms();
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
     d80:	a1 01       	movw	r20, r2
     d82:	33 0c       	add	r3, r3
     d84:	66 0b       	sbc	r22, r22
     d86:	77 0b       	sbc	r23, r23
     d88:	4d 83       	std	Y+5, r20	; 0x05
     d8a:	5e 83       	std	Y+6, r21	; 0x06
     d8c:	6f 83       	std	Y+7, r22	; 0x07
     d8e:	78 87       	std	Y+8, r23	; 0x08
     d90:	3a 87       	std	Y+10, r19	; 0x0a
     d92:	29 87       	std	Y+9, r18	; 0x09
     d94:	81 2c       	mov	r8, r1
     d96:	91 2c       	mov	r9, r1
     d98:	54 01       	movw	r10, r8
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     d9a:	0e 94 1f 13 	call	0x263e	; 0x263e <get_ms>
     d9e:	8b 01       	movw	r16, r22
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
     da0:	2b ed       	ldi	r18, 0xDB	; 219
     da2:	3f e0       	ldi	r19, 0x0F	; 15
     da4:	49 ec       	ldi	r20, 0xC9	; 201
     da6:	50 e4       	ldi	r21, 0x40	; 64
     da8:	c5 01       	movw	r24, r10
     daa:	b4 01       	movw	r22, r8
     dac:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     db0:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <sin>
     db4:	23 e8       	ldi	r18, 0x83	; 131
     db6:	39 ef       	ldi	r19, 0xF9	; 249
     db8:	42 e2       	ldi	r20, 0x22	; 34
     dba:	5e e3       	ldi	r21, 0x3E	; 62
     dbc:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     dc0:	a5 01       	movw	r20, r10
     dc2:	94 01       	movw	r18, r8
     dc4:	0e 94 98 08 	call	0x1130	; 0x1130 <__addsf3>
     dc8:	2b 01       	movw	r4, r22
     dca:	3c 01       	movw	r6, r24
     dcc:	6d 81       	ldd	r22, Y+5	; 0x05
     dce:	7e 81       	ldd	r23, Y+6	; 0x06
     dd0:	8f 81       	ldd	r24, Y+7	; 0x07
     dd2:	98 85       	ldd	r25, Y+8	; 0x08
     dd4:	0e 94 41 09 	call	0x1282	; 0x1282 <__floatsisf>
     dd8:	9b 01       	movw	r18, r22
     dda:	ac 01       	movw	r20, r24
     ddc:	c3 01       	movw	r24, r6
     dde:	b2 01       	movw	r22, r4
     de0:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
     de4:	2b 01       	movw	r4, r22
     de6:	3c 01       	movw	r6, r24
			
			motorLeftSpeed = speedCurrentLeft - (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ));
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     de8:	60 91 f8 01 	lds	r22, 0x01F8	; 0x8001f8 <speedCurrentRight>
     dec:	70 91 f9 01 	lds	r23, 0x01F9	; 0x8001f9 <speedCurrentRight+0x1>
     df0:	07 2e       	mov	r0, r23
     df2:	00 0c       	add	r0, r0
     df4:	88 0b       	sbc	r24, r24
     df6:	99 0b       	sbc	r25, r25
     df8:	0e 94 41 09 	call	0x1282	; 0x1282 <__floatsisf>
     dfc:	a3 01       	movw	r20, r6
     dfe:	92 01       	movw	r18, r4
     e00:	0e 94 98 08 	call	0x1130	; 0x1130 <__addsf3>
     e04:	0e 94 09 09 	call	0x1212	; 0x1212 <__fixsfsi>
     e08:	69 83       	std	Y+1, r22	; 0x01
     e0a:	7a 83       	std	Y+2, r23	; 0x02
     e0c:	8b 83       	std	Y+3, r24	; 0x03
     e0e:	9c 83       	std	Y+4, r25	; 0x04
     e10:	60 91 f6 01 	lds	r22, 0x01F6	; 0x8001f6 <speedCurrentLeft>
     e14:	70 91 f7 01 	lds	r23, 0x01F7	; 0x8001f7 <speedCurrentLeft+0x1>
     e18:	07 2e       	mov	r0, r23
     e1a:	00 0c       	add	r0, r0
     e1c:	88 0b       	sbc	r24, r24
     e1e:	99 0b       	sbc	r25, r25
     e20:	0e 94 41 09 	call	0x1282	; 0x1282 <__floatsisf>
     e24:	a3 01       	movw	r20, r6
     e26:	92 01       	movw	r18, r4
     e28:	0e 94 97 08 	call	0x112e	; 0x112e <__subsf3>
     e2c:	0e 94 09 09 	call	0x1212	; 0x1212 <__fixsfsi>
     e30:	dc 01       	movw	r26, r24
     e32:	cb 01       	movw	r24, r22
     e34:	69 81       	ldd	r22, Y+1	; 0x01
     e36:	7a 81       	ldd	r23, Y+2	; 0x02
     e38:	0e 94 70 11 	call	0x22e0	; 0x22e0 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     e3c:	28 01       	movw	r4, r16
     e3e:	11 0f       	add	r17, r17
     e40:	66 08       	sbc	r6, r6
     e42:	77 08       	sbc	r7, r7
     e44:	0e 94 1f 13 	call	0x263e	; 0x263e <get_ms>
     e48:	64 19       	sub	r22, r4
     e4a:	75 09       	sbc	r23, r5
     e4c:	86 09       	sbc	r24, r6
     e4e:	97 09       	sbc	r25, r7
     e50:	0e 94 3f 09 	call	0x127e	; 0x127e <__floatunsisf>
     e54:	9b 01       	movw	r18, r22
     e56:	ac 01       	movw	r20, r24
     e58:	c7 01       	movw	r24, r14
     e5a:	b6 01       	movw	r22, r12
     e5c:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__gesf2>
     e60:	18 16       	cp	r1, r24
     e62:	84 f3       	brlt	.-32     	; 0xe44 <__stack+0x545>
		speed = 0;
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     e64:	2a e0       	ldi	r18, 0x0A	; 10
     e66:	37 ed       	ldi	r19, 0xD7	; 215
     e68:	43 e2       	ldi	r20, 0x23	; 35
     e6a:	5c e3       	ldi	r21, 0x3C	; 60
     e6c:	c5 01       	movw	r24, r10
     e6e:	b4 01       	movw	r22, r8
     e70:	0e 94 98 08 	call	0x1130	; 0x1130 <__addsf3>
     e74:	4b 01       	movw	r8, r22
     e76:	5c 01       	movw	r10, r24
     e78:	69 85       	ldd	r22, Y+9	; 0x09
     e7a:	7a 85       	ldd	r23, Y+10	; 0x0a
     e7c:	61 50       	subi	r22, 0x01	; 1
     e7e:	71 09       	sbc	r23, r1
     e80:	7a 87       	std	Y+10, r23	; 0x0a
     e82:	69 87       	std	Y+9, r22	; 0x09
     e84:	67 2b       	or	r22, r23
     e86:	09 f0       	breq	.+2      	; 0xe8a <__stack+0x58b>
     e88:	88 cf       	rjmp	.-240    	; 0xd9a <__stack+0x49b>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = speed;
     e8a:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <speedCurrentRight+0x1>
     e8e:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <speedCurrentRight>
		speedCurrentLeft = -speed;
     e92:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <speedCurrentLeft+0x1>
     e96:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <speedCurrentLeft>
		break;
     e9a:	06 c0       	rjmp	.+12     	; 0xea8 <__stack+0x5a9>
		
		default:		//The default case puts the robot into a full stop and is only used in emergency situations. Using this case is not recommended as it applies the brakes instantaneously and therefore creates an extreme jerk in the acceleration curve.
		set_motors(0,0);
     e9c:	60 e0       	ldi	r22, 0x00	; 0
     e9e:	70 e0       	ldi	r23, 0x00	; 0
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	0e 94 70 11 	call	0x22e0	; 0x22e0 <set_motors>
		break;
	}
}
     ea8:	66 96       	adiw	r28, 0x16	; 22
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	f8 94       	cli
     eae:	de bf       	out	0x3e, r29	; 62
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	cd bf       	out	0x3d, r28	; 61
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	1f 91       	pop	r17
     eba:	0f 91       	pop	r16
     ebc:	ff 90       	pop	r15
     ebe:	ef 90       	pop	r14
     ec0:	df 90       	pop	r13
     ec2:	cf 90       	pop	r12
     ec4:	bf 90       	pop	r11
     ec6:	af 90       	pop	r10
     ec8:	9f 90       	pop	r9
     eca:	8f 90       	pop	r8
     ecc:	7f 90       	pop	r7
     ece:	6f 90       	pop	r6
     ed0:	5f 90       	pop	r5
     ed2:	4f 90       	pop	r4
     ed4:	3f 90       	pop	r3
     ed6:	2f 90       	pop	r2
     ed8:	08 95       	ret

00000eda <initialize>:
#include "Grid.h"

int situations[3]={LOW, LOW, LOW};

void initialize()
{
     eda:	cf 93       	push	r28
     edc:	df 93       	push	r29
	
	unsigned int counter;
	pololu_3pi_init(2000);								//initialize sensor value from 0 to 2000
     ede:	80 ed       	ldi	r24, 0xD0	; 208
     ee0:	97 e0       	ldi	r25, 0x07	; 7
     ee2:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <pololu_3pi_init>
	
	while(!button_is_pressed(BUTTON_B))					//this function is activated until button B is pressed.
     ee6:	1b c0       	rjmp	.+54     	; 0xf1e <initialize+0x44>
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
     ee8:	0e 94 11 0c 	call	0x1822	; 0x1822 <read_battery_millivolts_3pi>
     eec:	ec 01       	movw	r28, r24
	{
		int bat = read_battery_millivolts();
		clear();
     eee:	0e 94 33 10 	call	0x2066	; 0x2066 <clear>
		print_long(bat);								//print battery voltage in millivolts on the LCD
     ef2:	be 01       	movw	r22, r28
     ef4:	dd 0f       	add	r29, r29
     ef6:	88 0b       	sbc	r24, r24
     ef8:	99 0b       	sbc	r25, r25
     efa:	0e 94 97 10 	call	0x212e	; 0x212e <print_long>
		print("mV");
     efe:	88 e5       	ldi	r24, 0x58	; 88
     f00:	91 e0       	ldi	r25, 0x01	; 1
     f02:	0e 94 42 10 	call	0x2084	; 0x2084 <print>
		lcd_goto_xy(0,1);
     f06:	61 e0       	ldi	r22, 0x01	; 1
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	0e 94 ba 10 	call	0x2174	; 0x2174 <lcd_goto_xy>
		print("druk B");								//print instruction to continue
     f0e:	8b e5       	ldi	r24, 0x5B	; 91
     f10:	91 e0       	ldi	r25, 0x01	; 1
     f12:	0e 94 42 10 	call	0x2084	; 0x2084 <print>
		delay_ms(100);
     f16:	84 e6       	ldi	r24, 0x64	; 100
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	0e 94 e7 12 	call	0x25ce	; 0x25ce <delay_ms>
{
	
	unsigned int counter;
	pololu_3pi_init(2000);								//initialize sensor value from 0 to 2000
	
	while(!button_is_pressed(BUTTON_B))					//this function is activated until button B is pressed.
     f1e:	80 e1       	ldi	r24, 0x10	; 16
     f20:	0e 94 b3 11 	call	0x2366	; 0x2366 <button_is_pressed>
     f24:	88 23       	and	r24, r24
     f26:	01 f3       	breq	.-64     	; 0xee8 <initialize+0xe>
		lcd_goto_xy(0,1);
		print("druk B");								//print instruction to continue
		delay_ms(100);
	}
	
	wait_for_button_release(BUTTON_B);					//button B is pressed
     f28:	80 e1       	ldi	r24, 0x10	; 16
     f2a:	0e 94 9f 11 	call	0x233e	; 0x233e <wait_for_button_release>
	delay_ms(1000);
     f2e:	88 ee       	ldi	r24, 0xE8	; 232
     f30:	93 e0       	ldi	r25, 0x03	; 3
     f32:	0e 94 e7 12 	call	0x25ce	; 0x25ce <delay_ms>
     f36:	cc ee       	ldi	r28, 0xEC	; 236
     f38:	df ef       	ldi	r29, 0xFF	; 255
	
	for(counter=0;counter<80;counter++)					//calibrating line sensors
	{
		if(counter < 20 || counter >= 60)
     f3a:	c8 32       	cpi	r28, 0x28	; 40
     f3c:	d1 05       	cpc	r29, r1
     f3e:	38 f0       	brcs	.+14     	; 0xf4e <initialize+0x74>
		set_motors(40,-40);
     f40:	68 ed       	ldi	r22, 0xD8	; 216
     f42:	7f ef       	ldi	r23, 0xFF	; 255
     f44:	88 e2       	ldi	r24, 0x28	; 40
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	0e 94 70 11 	call	0x22e0	; 0x22e0 <set_motors>
     f4c:	06 c0       	rjmp	.+12     	; 0xf5a <initialize+0x80>
		else
		set_motors(-40,40);
     f4e:	68 e2       	ldi	r22, 0x28	; 40
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	88 ed       	ldi	r24, 0xD8	; 216
     f54:	9f ef       	ldi	r25, 0xFF	; 255
     f56:	0e 94 70 11 	call	0x22e0	; 0x22e0 <set_motors>
		calibrate_line_sensors(IR_EMITTERS_ON);
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	0e 94 40 13 	call	0x2680	; 0x2680 <calibrate_line_sensors>
		delay_ms(20);
     f60:	84 e1       	ldi	r24, 0x14	; 20
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	0e 94 e7 12 	call	0x25ce	; 0x25ce <delay_ms>
     f68:	21 96       	adiw	r28, 0x01	; 1
	}
	
	wait_for_button_release(BUTTON_B);					//button B is pressed
	delay_ms(1000);
	
	for(counter=0;counter<80;counter++)					//calibrating line sensors
     f6a:	cc 33       	cpi	r28, 0x3C	; 60
     f6c:	d1 05       	cpc	r29, r1
     f6e:	29 f7       	brne	.-54     	; 0xf3a <initialize+0x60>
		set_motors(-40,40);
		calibrate_line_sensors(IR_EMITTERS_ON);
		delay_ms(20);
	}
	
	set_motors(0,0);
     f70:	60 e0       	ldi	r22, 0x00	; 0
     f72:	70 e0       	ldi	r23, 0x00	; 0
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	0e 94 70 11 	call	0x22e0	; 0x22e0 <set_motors>
	
	while(!button_is_pressed(BUTTON_B))										//function is activated until button B is pressed
     f7c:	15 c0       	rjmp	.+42     	; 0xfa8 <initialize+0xce>
	{
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);			//reading the sensors to determine the position of the robot
     f7e:	61 e0       	ldi	r22, 0x01	; 1
     f80:	82 e6       	ldi	r24, 0x62	; 98
     f82:	92 e0       	ldi	r25, 0x02	; 2
     f84:	0e 94 46 13 	call	0x268c	; 0x268c <read_line>
     f88:	ec 01       	movw	r28, r24
		clear();															//clear LCD
     f8a:	0e 94 33 10 	call	0x2066	; 0x2066 <clear>
		print("  ");
     f8e:	82 e6       	ldi	r24, 0x62	; 98
     f90:	91 e0       	ldi	r25, 0x01	; 1
     f92:	0e 94 42 10 	call	0x2084	; 0x2084 <print>
		print_long(position);												//print position of the robot compared to the line
     f96:	be 01       	movw	r22, r28
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	0e 94 97 10 	call	0x212e	; 0x212e <print_long>
		delay_ms(100);
     fa0:	84 e6       	ldi	r24, 0x64	; 100
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	0e 94 e7 12 	call	0x25ce	; 0x25ce <delay_ms>
		delay_ms(20);
	}
	
	set_motors(0,0);
	
	while(!button_is_pressed(BUTTON_B))										//function is activated until button B is pressed
     fa8:	80 e1       	ldi	r24, 0x10	; 16
     faa:	0e 94 b3 11 	call	0x2366	; 0x2366 <button_is_pressed>
     fae:	88 23       	and	r24, r24
     fb0:	31 f3       	breq	.-52     	; 0xf7e <initialize+0xa4>
		print("  ");
		print_long(position);												//print position of the robot compared to the line
		delay_ms(100);
	}
	
	wait_for_button_release(BUTTON_B);										//button B is pressed
     fb2:	80 e1       	ldi	r24, 0x10	; 16
     fb4:	0e 94 9f 11 	call	0x233e	; 0x233e <wait_for_button_release>
	clear();																//clear LCD
     fb8:	0e 94 33 10 	call	0x2066	; 0x2066 <clear>
	print("Go!");
     fbc:	85 e6       	ldi	r24, 0x65	; 101
     fbe:	91 e0       	ldi	r25, 0x01	; 1
     fc0:	0e 94 42 10 	call	0x2084	; 0x2084 <print>

}
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	08 95       	ret

00000fca <followLine>:


void followLine()
{
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
	
	unsigned int pos = read_line(sensors,IR_EMITTERS_ON);					//write position of the robot to an unsigned int called pos
     fce:	61 e0       	ldi	r22, 0x01	; 1
     fd0:	82 e6       	ldi	r24, 0x62	; 98
     fd2:	92 e0       	ldi	r25, 0x02	; 2
     fd4:	0e 94 46 13 	call	0x268c	; 0x268c <read_line>
     fd8:	ec 01       	movw	r28, r24
	read_line_sensors(sensors,IR_EMITTERS_ON);								//read line sensors
     fda:	61 e0       	ldi	r22, 0x01	; 1
     fdc:	82 e6       	ldi	r24, 0x62	; 98
     fde:	92 e0       	ldi	r25, 0x02	; 2
     fe0:	0e 94 39 13 	call	0x2672	; 0x2672 <read_line_sensors>


	clear();																//clear display
     fe4:	0e 94 33 10 	call	0x2066	; 0x2066 <clear>
	
	if(pos < 1950)
     fe8:	ce 39       	cpi	r28, 0x9E	; 158
     fea:	87 e0       	ldi	r24, 0x07	; 7
     fec:	d8 07       	cpc	r29, r24
     fee:	98 f4       	brcc	.+38     	; 0x1016 <followLine+0x4c>
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
     ff0:	5f 9a       	sbi	0x0b, 7	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     ff2:	57 9a       	sbi	0x0a, 7	; 10
	{
		
		green_led(1);

		if(pos < 1800)														//We are far to the right of the line: turn left.
     ff4:	c8 30       	cpi	r28, 0x08	; 8
     ff6:	d7 40       	sbci	r29, 0x07	; 7
     ff8:	38 f4       	brcc	.+14     	; 0x1008 <followLine+0x3e>
		{
			set_motors(0,SPEED);
     ffa:	6c e3       	ldi	r22, 0x3C	; 60
     ffc:	70 e0       	ldi	r23, 0x00	; 0
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	0e 94 70 11 	call	0x22e0	; 0x22e0 <set_motors>
    1006:	24 c0       	rjmp	.+72     	; 0x1050 <followLine+0x86>
		}
		else
		{
			set_motors(SLOW,SPEED);											//we are to the right of the line: turn left.
    1008:	6c e3       	ldi	r22, 0x3C	; 60
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	8b e3       	ldi	r24, 0x3B	; 59
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	0e 94 70 11 	call	0x22e0	; 0x22e0 <set_motors>
    1014:	1d c0       	rjmp	.+58     	; 0x1050 <followLine+0x86>
		}
		
	}
	
	else if (pos > 2050)
    1016:	c3 30       	cpi	r28, 0x03	; 3
    1018:	88 e0       	ldi	r24, 0x08	; 8
    101a:	d8 07       	cpc	r29, r24
    101c:	98 f0       	brcs	.+38     	; 0x1044 <followLine+0x7a>
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
    101e:	59 9a       	sbi	0x0b, 1	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    1020:	51 9a       	sbi	0x0a, 1	; 10
	{
		// We are far to the left of the line: turn right.
		red_led(1);
		
		if(pos > 2200)														//We are far to the left of the line: turn right
    1022:	c9 39       	cpi	r28, 0x99	; 153
    1024:	d8 40       	sbci	r29, 0x08	; 8
    1026:	38 f0       	brcs	.+14     	; 0x1036 <followLine+0x6c>
		{
			set_motors(SPEED,0);
    1028:	60 e0       	ldi	r22, 0x00	; 0
    102a:	70 e0       	ldi	r23, 0x00	; 0
    102c:	8c e3       	ldi	r24, 0x3C	; 60
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	0e 94 70 11 	call	0x22e0	; 0x22e0 <set_motors>
    1034:	0d c0       	rjmp	.+26     	; 0x1050 <followLine+0x86>
		}
		else
		{
			set_motors(FAST,SLOW);											//We are to the left of the line: turn right
    1036:	6b e3       	ldi	r22, 0x3B	; 59
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	8c e3       	ldi	r24, 0x3C	; 60
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 94 70 11 	call	0x22e0	; 0x22e0 <set_motors>
    1042:	06 c0       	rjmp	.+12     	; 0x1050 <followLine+0x86>
		}
	}
	else
	{
		set_motors(SLOW,SLOW);												//we are on the line. move forward
    1044:	6b e3       	ldi	r22, 0x3B	; 59
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	8b e3       	ldi	r24, 0x3B	; 59
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	0e 94 70 11 	call	0x22e0	; 0x22e0 <set_motors>
		
	}

	
}
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	08 95       	ret

00001056 <checkAfslag>:

int checkAfslag(){
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29

	int flag = 0;													        //initialize flag and turn
	situations[0] =LOW;														//sensor left initialize
    105a:	ec ef       	ldi	r30, 0xFC	; 252
    105c:	f1 e0       	ldi	r31, 0x01	; 1
    105e:	11 82       	std	Z+1, r1	; 0x01
    1060:	10 82       	st	Z, r1
	situations[1] =LOW;														//sensor center initialize
    1062:	13 82       	std	Z+3, r1	; 0x03
    1064:	12 82       	std	Z+2, r1	; 0x02
	situations[2] =LOW;														//sensor right initialize
    1066:	15 82       	std	Z+5, r1	; 0x05
    1068:	14 82       	std	Z+4, r1	; 0x04
	read_line_sensors(sensors,IR_EMITTERS_ON);								//read line sensors
    106a:	61 e0       	ldi	r22, 0x01	; 1
    106c:	82 e6       	ldi	r24, 0x62	; 98
    106e:	92 e0       	ldi	r25, 0x02	; 2
    1070:	0e 94 39 13 	call	0x2672	; 0x2672 <read_line_sensors>
	int rangeHigh = 1500;													//set high range to 1000
	
	if(SENSOR_L > rangeHigh){
    1074:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <sensors>
    1078:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <sensors+0x1>
    107c:	8d 3d       	cpi	r24, 0xDD	; 221
    107e:	95 40       	sbci	r25, 0x05	; 5
    1080:	48 f0       	brcs	.+18     	; 0x1094 <checkAfslag+0x3e>
		situations[0] = HIGH;
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <situations+0x1>
    108a:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <situations>
		flag = 1;															//sensor left is high, flag = 1
    108e:	c1 e0       	ldi	r28, 0x01	; 1
    1090:	d0 e0       	ldi	r29, 0x00	; 0
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <checkAfslag+0x42>
	
}

int checkAfslag(){

	int flag = 0;													        //initialize flag and turn
    1094:	c0 e0       	ldi	r28, 0x00	; 0
    1096:	d0 e0       	ldi	r29, 0x00	; 0
	
	if(SENSOR_L > rangeHigh){
		situations[0] = HIGH;
		flag = 1;															//sensor left is high, flag = 1
	}
	if(SENSOR_C_C > rangeHigh){
    1098:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <sensors+0x4>
    109c:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <sensors+0x5>
    10a0:	8d 3d       	cpi	r24, 0xDD	; 221
    10a2:	95 40       	sbci	r25, 0x05	; 5
    10a4:	40 f0       	brcs	.+16     	; 0x10b6 <checkAfslag+0x60>
		situations[1] = HIGH;
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <situations+0x3>
    10ae:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <situations+0x2>
		flag = 2;															//sensor center is high, flag = 2
    10b2:	c2 e0       	ldi	r28, 0x02	; 2
    10b4:	d0 e0       	ldi	r29, 0x00	; 0
	}
	if(SENSOR_R > rangeHigh){
    10b6:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <sensors+0x8>
    10ba:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <sensors+0x9>
    10be:	8d 3d       	cpi	r24, 0xDD	; 221
    10c0:	95 40       	sbci	r25, 0x05	; 5
    10c2:	40 f0       	brcs	.+16     	; 0x10d4 <checkAfslag+0x7e>
		situations[2] = HIGH;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <situations+0x5>
    10cc:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <situations+0x4>
		flag = 3;															//sensor right is high, flag = 3
    10d0:	c3 e0       	ldi	r28, 0x03	; 3
    10d2:	d0 e0       	ldi	r29, 0x00	; 0
	}
	clear();																//clear LCD
    10d4:	0e 94 33 10 	call	0x2066	; 0x2066 <clear>
	return flag;
}
    10d8:	ce 01       	movw	r24, r28
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	08 95       	ret

000010e0 <checkDecision>:

int checkDecision()
{
    10e0:	0f 93       	push	r16
    10e2:	1f 93       	push	r17
    10e4:	cf 93       	push	r28
    10e6:	df 93       	push	r29
    10e8:	c2 e0       	ldi	r28, 0x02	; 2
    10ea:	d2 e0       	ldi	r29, 0x02	; 2
	int decision = LOW, turn, resultTemp = 0;
	do{
		turn = 0;
		checkAfslag();
    10ec:	0e 94 2b 08 	call	0x1056	; 0x1056 <checkAfslag>
    10f0:	ec ef       	ldi	r30, 0xFC	; 252
    10f2:	f1 e0       	ldi	r31, 0x01	; 1

int checkDecision()
{
	int decision = LOW, turn, resultTemp = 0;
	do{
		turn = 0;
    10f4:	00 e0       	ldi	r16, 0x00	; 0
    10f6:	10 e0       	ldi	r17, 0x00	; 0
		checkAfslag();
		for(int i = 0; i < 3; i++){
			if(situations[i] == HIGH){                                                     //Counts number of possible turns
    10f8:	81 91       	ld	r24, Z+
    10fa:	91 91       	ld	r25, Z+
    10fc:	01 97       	sbiw	r24, 0x01	; 1
    10fe:	11 f4       	brne	.+4      	; 0x1104 <checkDecision+0x24>
				turn++;
    1100:	0f 5f       	subi	r16, 0xFF	; 255
    1102:	1f 4f       	sbci	r17, 0xFF	; 255
{
	int decision = LOW, turn, resultTemp = 0;
	do{
		turn = 0;
		checkAfslag();
		for(int i = 0; i < 3; i++){
    1104:	ec 17       	cp	r30, r28
    1106:	fd 07       	cpc	r31, r29
    1108:	b9 f7       	brne	.-18     	; 0x10f8 <checkDecision+0x18>
			if(situations[i] == HIGH){                                                     //Counts number of possible turns
				turn++;
			}
		}
		followLine();
    110a:	0e 94 e5 07 	call	0xfca	; 0xfca <followLine>
		//	checkDistance();
	}while(checkAfslag() == 0);                                                           //Keep following the line if the sensor does not detect any intersections
    110e:	0e 94 2b 08 	call	0x1056	; 0x1056 <checkAfslag>
    1112:	89 2b       	or	r24, r25
    1114:	59 f3       	breq	.-42     	; 0x10ec <checkDecision+0xc>
	
	resultTemp = turn;                                                                    //If there is more than one option, the robot has to make a decision
	if(resultTemp > 1){
		decision = HIGH;
	}
	return decision;
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	02 30       	cpi	r16, 0x02	; 2
    111c:	11 05       	cpc	r17, r1
    111e:	14 f4       	brge	.+4      	; 0x1124 <checkDecision+0x44>
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	90 e0       	ldi	r25, 0x00	; 0
}
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	1f 91       	pop	r17
    112a:	0f 91       	pop	r16
    112c:	08 95       	ret

0000112e <__subsf3>:
    112e:	50 58       	subi	r21, 0x80	; 128

00001130 <__addsf3>:
    1130:	bb 27       	eor	r27, r27
    1132:	aa 27       	eor	r26, r26
    1134:	0e 94 af 08 	call	0x115e	; 0x115e <__addsf3x>
    1138:	0c 94 b7 09 	jmp	0x136e	; 0x136e <__fp_round>
    113c:	0e 94 a9 09 	call	0x1352	; 0x1352 <__fp_pscA>
    1140:	38 f0       	brcs	.+14     	; 0x1150 <__addsf3+0x20>
    1142:	0e 94 b0 09 	call	0x1360	; 0x1360 <__fp_pscB>
    1146:	20 f0       	brcs	.+8      	; 0x1150 <__addsf3+0x20>
    1148:	39 f4       	brne	.+14     	; 0x1158 <__addsf3+0x28>
    114a:	9f 3f       	cpi	r25, 0xFF	; 255
    114c:	19 f4       	brne	.+6      	; 0x1154 <__addsf3+0x24>
    114e:	26 f4       	brtc	.+8      	; 0x1158 <__addsf3+0x28>
    1150:	0c 94 a6 09 	jmp	0x134c	; 0x134c <__fp_nan>
    1154:	0e f4       	brtc	.+2      	; 0x1158 <__addsf3+0x28>
    1156:	e0 95       	com	r30
    1158:	e7 fb       	bst	r30, 7
    115a:	0c 94 a0 09 	jmp	0x1340	; 0x1340 <__fp_inf>

0000115e <__addsf3x>:
    115e:	e9 2f       	mov	r30, r25
    1160:	0e 94 c8 09 	call	0x1390	; 0x1390 <__fp_split3>
    1164:	58 f3       	brcs	.-42     	; 0x113c <__addsf3+0xc>
    1166:	ba 17       	cp	r27, r26
    1168:	62 07       	cpc	r22, r18
    116a:	73 07       	cpc	r23, r19
    116c:	84 07       	cpc	r24, r20
    116e:	95 07       	cpc	r25, r21
    1170:	20 f0       	brcs	.+8      	; 0x117a <__addsf3x+0x1c>
    1172:	79 f4       	brne	.+30     	; 0x1192 <__addsf3x+0x34>
    1174:	a6 f5       	brtc	.+104    	; 0x11de <__addsf3x+0x80>
    1176:	0c 94 ea 09 	jmp	0x13d4	; 0x13d4 <__fp_zero>
    117a:	0e f4       	brtc	.+2      	; 0x117e <__addsf3x+0x20>
    117c:	e0 95       	com	r30
    117e:	0b 2e       	mov	r0, r27
    1180:	ba 2f       	mov	r27, r26
    1182:	a0 2d       	mov	r26, r0
    1184:	0b 01       	movw	r0, r22
    1186:	b9 01       	movw	r22, r18
    1188:	90 01       	movw	r18, r0
    118a:	0c 01       	movw	r0, r24
    118c:	ca 01       	movw	r24, r20
    118e:	a0 01       	movw	r20, r0
    1190:	11 24       	eor	r1, r1
    1192:	ff 27       	eor	r31, r31
    1194:	59 1b       	sub	r21, r25
    1196:	99 f0       	breq	.+38     	; 0x11be <__addsf3x+0x60>
    1198:	59 3f       	cpi	r21, 0xF9	; 249
    119a:	50 f4       	brcc	.+20     	; 0x11b0 <__addsf3x+0x52>
    119c:	50 3e       	cpi	r21, 0xE0	; 224
    119e:	68 f1       	brcs	.+90     	; 0x11fa <__addsf3x+0x9c>
    11a0:	1a 16       	cp	r1, r26
    11a2:	f0 40       	sbci	r31, 0x00	; 0
    11a4:	a2 2f       	mov	r26, r18
    11a6:	23 2f       	mov	r18, r19
    11a8:	34 2f       	mov	r19, r20
    11aa:	44 27       	eor	r20, r20
    11ac:	58 5f       	subi	r21, 0xF8	; 248
    11ae:	f3 cf       	rjmp	.-26     	; 0x1196 <__addsf3x+0x38>
    11b0:	46 95       	lsr	r20
    11b2:	37 95       	ror	r19
    11b4:	27 95       	ror	r18
    11b6:	a7 95       	ror	r26
    11b8:	f0 40       	sbci	r31, 0x00	; 0
    11ba:	53 95       	inc	r21
    11bc:	c9 f7       	brne	.-14     	; 0x11b0 <__addsf3x+0x52>
    11be:	7e f4       	brtc	.+30     	; 0x11de <__addsf3x+0x80>
    11c0:	1f 16       	cp	r1, r31
    11c2:	ba 0b       	sbc	r27, r26
    11c4:	62 0b       	sbc	r22, r18
    11c6:	73 0b       	sbc	r23, r19
    11c8:	84 0b       	sbc	r24, r20
    11ca:	ba f0       	brmi	.+46     	; 0x11fa <__addsf3x+0x9c>
    11cc:	91 50       	subi	r25, 0x01	; 1
    11ce:	a1 f0       	breq	.+40     	; 0x11f8 <__addsf3x+0x9a>
    11d0:	ff 0f       	add	r31, r31
    11d2:	bb 1f       	adc	r27, r27
    11d4:	66 1f       	adc	r22, r22
    11d6:	77 1f       	adc	r23, r23
    11d8:	88 1f       	adc	r24, r24
    11da:	c2 f7       	brpl	.-16     	; 0x11cc <__addsf3x+0x6e>
    11dc:	0e c0       	rjmp	.+28     	; 0x11fa <__addsf3x+0x9c>
    11de:	ba 0f       	add	r27, r26
    11e0:	62 1f       	adc	r22, r18
    11e2:	73 1f       	adc	r23, r19
    11e4:	84 1f       	adc	r24, r20
    11e6:	48 f4       	brcc	.+18     	; 0x11fa <__addsf3x+0x9c>
    11e8:	87 95       	ror	r24
    11ea:	77 95       	ror	r23
    11ec:	67 95       	ror	r22
    11ee:	b7 95       	ror	r27
    11f0:	f7 95       	ror	r31
    11f2:	9e 3f       	cpi	r25, 0xFE	; 254
    11f4:	08 f0       	brcs	.+2      	; 0x11f8 <__addsf3x+0x9a>
    11f6:	b0 cf       	rjmp	.-160    	; 0x1158 <__addsf3+0x28>
    11f8:	93 95       	inc	r25
    11fa:	88 0f       	add	r24, r24
    11fc:	08 f0       	brcs	.+2      	; 0x1200 <__addsf3x+0xa2>
    11fe:	99 27       	eor	r25, r25
    1200:	ee 0f       	add	r30, r30
    1202:	97 95       	ror	r25
    1204:	87 95       	ror	r24
    1206:	08 95       	ret

00001208 <__cmpsf2>:
    1208:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <__fp_cmp>
    120c:	08 f4       	brcc	.+2      	; 0x1210 <__cmpsf2+0x8>
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	08 95       	ret

00001212 <__fixsfsi>:
    1212:	0e 94 10 09 	call	0x1220	; 0x1220 <__fixunssfsi>
    1216:	68 94       	set
    1218:	b1 11       	cpse	r27, r1
    121a:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <__fp_szero>
    121e:	08 95       	ret

00001220 <__fixunssfsi>:
    1220:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__fp_splitA>
    1224:	88 f0       	brcs	.+34     	; 0x1248 <__fixunssfsi+0x28>
    1226:	9f 57       	subi	r25, 0x7F	; 127
    1228:	98 f0       	brcs	.+38     	; 0x1250 <__fixunssfsi+0x30>
    122a:	b9 2f       	mov	r27, r25
    122c:	99 27       	eor	r25, r25
    122e:	b7 51       	subi	r27, 0x17	; 23
    1230:	b0 f0       	brcs	.+44     	; 0x125e <__fixunssfsi+0x3e>
    1232:	e1 f0       	breq	.+56     	; 0x126c <__fixunssfsi+0x4c>
    1234:	66 0f       	add	r22, r22
    1236:	77 1f       	adc	r23, r23
    1238:	88 1f       	adc	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	1a f0       	brmi	.+6      	; 0x1244 <__fixunssfsi+0x24>
    123e:	ba 95       	dec	r27
    1240:	c9 f7       	brne	.-14     	; 0x1234 <__fixunssfsi+0x14>
    1242:	14 c0       	rjmp	.+40     	; 0x126c <__fixunssfsi+0x4c>
    1244:	b1 30       	cpi	r27, 0x01	; 1
    1246:	91 f0       	breq	.+36     	; 0x126c <__fixunssfsi+0x4c>
    1248:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__fp_zero>
    124c:	b1 e0       	ldi	r27, 0x01	; 1
    124e:	08 95       	ret
    1250:	0c 94 ea 09 	jmp	0x13d4	; 0x13d4 <__fp_zero>
    1254:	67 2f       	mov	r22, r23
    1256:	78 2f       	mov	r23, r24
    1258:	88 27       	eor	r24, r24
    125a:	b8 5f       	subi	r27, 0xF8	; 248
    125c:	39 f0       	breq	.+14     	; 0x126c <__fixunssfsi+0x4c>
    125e:	b9 3f       	cpi	r27, 0xF9	; 249
    1260:	cc f3       	brlt	.-14     	; 0x1254 <__fixunssfsi+0x34>
    1262:	86 95       	lsr	r24
    1264:	77 95       	ror	r23
    1266:	67 95       	ror	r22
    1268:	b3 95       	inc	r27
    126a:	d9 f7       	brne	.-10     	; 0x1262 <__fixunssfsi+0x42>
    126c:	3e f4       	brtc	.+14     	; 0x127c <__fixunssfsi+0x5c>
    126e:	90 95       	com	r25
    1270:	80 95       	com	r24
    1272:	70 95       	com	r23
    1274:	61 95       	neg	r22
    1276:	7f 4f       	sbci	r23, 0xFF	; 255
    1278:	8f 4f       	sbci	r24, 0xFF	; 255
    127a:	9f 4f       	sbci	r25, 0xFF	; 255
    127c:	08 95       	ret

0000127e <__floatunsisf>:
    127e:	e8 94       	clt
    1280:	09 c0       	rjmp	.+18     	; 0x1294 <__floatsisf+0x12>

00001282 <__floatsisf>:
    1282:	97 fb       	bst	r25, 7
    1284:	3e f4       	brtc	.+14     	; 0x1294 <__floatsisf+0x12>
    1286:	90 95       	com	r25
    1288:	80 95       	com	r24
    128a:	70 95       	com	r23
    128c:	61 95       	neg	r22
    128e:	7f 4f       	sbci	r23, 0xFF	; 255
    1290:	8f 4f       	sbci	r24, 0xFF	; 255
    1292:	9f 4f       	sbci	r25, 0xFF	; 255
    1294:	99 23       	and	r25, r25
    1296:	a9 f0       	breq	.+42     	; 0x12c2 <__floatsisf+0x40>
    1298:	f9 2f       	mov	r31, r25
    129a:	96 e9       	ldi	r25, 0x96	; 150
    129c:	bb 27       	eor	r27, r27
    129e:	93 95       	inc	r25
    12a0:	f6 95       	lsr	r31
    12a2:	87 95       	ror	r24
    12a4:	77 95       	ror	r23
    12a6:	67 95       	ror	r22
    12a8:	b7 95       	ror	r27
    12aa:	f1 11       	cpse	r31, r1
    12ac:	f8 cf       	rjmp	.-16     	; 0x129e <__floatsisf+0x1c>
    12ae:	fa f4       	brpl	.+62     	; 0x12ee <__floatsisf+0x6c>
    12b0:	bb 0f       	add	r27, r27
    12b2:	11 f4       	brne	.+4      	; 0x12b8 <__floatsisf+0x36>
    12b4:	60 ff       	sbrs	r22, 0
    12b6:	1b c0       	rjmp	.+54     	; 0x12ee <__floatsisf+0x6c>
    12b8:	6f 5f       	subi	r22, 0xFF	; 255
    12ba:	7f 4f       	sbci	r23, 0xFF	; 255
    12bc:	8f 4f       	sbci	r24, 0xFF	; 255
    12be:	9f 4f       	sbci	r25, 0xFF	; 255
    12c0:	16 c0       	rjmp	.+44     	; 0x12ee <__floatsisf+0x6c>
    12c2:	88 23       	and	r24, r24
    12c4:	11 f0       	breq	.+4      	; 0x12ca <__floatsisf+0x48>
    12c6:	96 e9       	ldi	r25, 0x96	; 150
    12c8:	11 c0       	rjmp	.+34     	; 0x12ec <__floatsisf+0x6a>
    12ca:	77 23       	and	r23, r23
    12cc:	21 f0       	breq	.+8      	; 0x12d6 <__floatsisf+0x54>
    12ce:	9e e8       	ldi	r25, 0x8E	; 142
    12d0:	87 2f       	mov	r24, r23
    12d2:	76 2f       	mov	r23, r22
    12d4:	05 c0       	rjmp	.+10     	; 0x12e0 <__floatsisf+0x5e>
    12d6:	66 23       	and	r22, r22
    12d8:	71 f0       	breq	.+28     	; 0x12f6 <__floatsisf+0x74>
    12da:	96 e8       	ldi	r25, 0x86	; 134
    12dc:	86 2f       	mov	r24, r22
    12de:	70 e0       	ldi	r23, 0x00	; 0
    12e0:	60 e0       	ldi	r22, 0x00	; 0
    12e2:	2a f0       	brmi	.+10     	; 0x12ee <__floatsisf+0x6c>
    12e4:	9a 95       	dec	r25
    12e6:	66 0f       	add	r22, r22
    12e8:	77 1f       	adc	r23, r23
    12ea:	88 1f       	adc	r24, r24
    12ec:	da f7       	brpl	.-10     	; 0x12e4 <__floatsisf+0x62>
    12ee:	88 0f       	add	r24, r24
    12f0:	96 95       	lsr	r25
    12f2:	87 95       	ror	r24
    12f4:	97 f9       	bld	r25, 7
    12f6:	08 95       	ret

000012f8 <__fp_cmp>:
    12f8:	99 0f       	add	r25, r25
    12fa:	00 08       	sbc	r0, r0
    12fc:	55 0f       	add	r21, r21
    12fe:	aa 0b       	sbc	r26, r26
    1300:	e0 e8       	ldi	r30, 0x80	; 128
    1302:	fe ef       	ldi	r31, 0xFE	; 254
    1304:	16 16       	cp	r1, r22
    1306:	17 06       	cpc	r1, r23
    1308:	e8 07       	cpc	r30, r24
    130a:	f9 07       	cpc	r31, r25
    130c:	c0 f0       	brcs	.+48     	; 0x133e <__fp_cmp+0x46>
    130e:	12 16       	cp	r1, r18
    1310:	13 06       	cpc	r1, r19
    1312:	e4 07       	cpc	r30, r20
    1314:	f5 07       	cpc	r31, r21
    1316:	98 f0       	brcs	.+38     	; 0x133e <__fp_cmp+0x46>
    1318:	62 1b       	sub	r22, r18
    131a:	73 0b       	sbc	r23, r19
    131c:	84 0b       	sbc	r24, r20
    131e:	95 0b       	sbc	r25, r21
    1320:	39 f4       	brne	.+14     	; 0x1330 <__fp_cmp+0x38>
    1322:	0a 26       	eor	r0, r26
    1324:	61 f0       	breq	.+24     	; 0x133e <__fp_cmp+0x46>
    1326:	23 2b       	or	r18, r19
    1328:	24 2b       	or	r18, r20
    132a:	25 2b       	or	r18, r21
    132c:	21 f4       	brne	.+8      	; 0x1336 <__fp_cmp+0x3e>
    132e:	08 95       	ret
    1330:	0a 26       	eor	r0, r26
    1332:	09 f4       	brne	.+2      	; 0x1336 <__fp_cmp+0x3e>
    1334:	a1 40       	sbci	r26, 0x01	; 1
    1336:	a6 95       	lsr	r26
    1338:	8f ef       	ldi	r24, 0xFF	; 255
    133a:	81 1d       	adc	r24, r1
    133c:	81 1d       	adc	r24, r1
    133e:	08 95       	ret

00001340 <__fp_inf>:
    1340:	97 f9       	bld	r25, 7
    1342:	9f 67       	ori	r25, 0x7F	; 127
    1344:	80 e8       	ldi	r24, 0x80	; 128
    1346:	70 e0       	ldi	r23, 0x00	; 0
    1348:	60 e0       	ldi	r22, 0x00	; 0
    134a:	08 95       	ret

0000134c <__fp_nan>:
    134c:	9f ef       	ldi	r25, 0xFF	; 255
    134e:	80 ec       	ldi	r24, 0xC0	; 192
    1350:	08 95       	ret

00001352 <__fp_pscA>:
    1352:	00 24       	eor	r0, r0
    1354:	0a 94       	dec	r0
    1356:	16 16       	cp	r1, r22
    1358:	17 06       	cpc	r1, r23
    135a:	18 06       	cpc	r1, r24
    135c:	09 06       	cpc	r0, r25
    135e:	08 95       	ret

00001360 <__fp_pscB>:
    1360:	00 24       	eor	r0, r0
    1362:	0a 94       	dec	r0
    1364:	12 16       	cp	r1, r18
    1366:	13 06       	cpc	r1, r19
    1368:	14 06       	cpc	r1, r20
    136a:	05 06       	cpc	r0, r21
    136c:	08 95       	ret

0000136e <__fp_round>:
    136e:	09 2e       	mov	r0, r25
    1370:	03 94       	inc	r0
    1372:	00 0c       	add	r0, r0
    1374:	11 f4       	brne	.+4      	; 0x137a <__fp_round+0xc>
    1376:	88 23       	and	r24, r24
    1378:	52 f0       	brmi	.+20     	; 0x138e <__fp_round+0x20>
    137a:	bb 0f       	add	r27, r27
    137c:	40 f4       	brcc	.+16     	; 0x138e <__fp_round+0x20>
    137e:	bf 2b       	or	r27, r31
    1380:	11 f4       	brne	.+4      	; 0x1386 <__fp_round+0x18>
    1382:	60 ff       	sbrs	r22, 0
    1384:	04 c0       	rjmp	.+8      	; 0x138e <__fp_round+0x20>
    1386:	6f 5f       	subi	r22, 0xFF	; 255
    1388:	7f 4f       	sbci	r23, 0xFF	; 255
    138a:	8f 4f       	sbci	r24, 0xFF	; 255
    138c:	9f 4f       	sbci	r25, 0xFF	; 255
    138e:	08 95       	ret

00001390 <__fp_split3>:
    1390:	57 fd       	sbrc	r21, 7
    1392:	90 58       	subi	r25, 0x80	; 128
    1394:	44 0f       	add	r20, r20
    1396:	55 1f       	adc	r21, r21
    1398:	59 f0       	breq	.+22     	; 0x13b0 <__fp_splitA+0x10>
    139a:	5f 3f       	cpi	r21, 0xFF	; 255
    139c:	71 f0       	breq	.+28     	; 0x13ba <__fp_splitA+0x1a>
    139e:	47 95       	ror	r20

000013a0 <__fp_splitA>:
    13a0:	88 0f       	add	r24, r24
    13a2:	97 fb       	bst	r25, 7
    13a4:	99 1f       	adc	r25, r25
    13a6:	61 f0       	breq	.+24     	; 0x13c0 <__fp_splitA+0x20>
    13a8:	9f 3f       	cpi	r25, 0xFF	; 255
    13aa:	79 f0       	breq	.+30     	; 0x13ca <__fp_splitA+0x2a>
    13ac:	87 95       	ror	r24
    13ae:	08 95       	ret
    13b0:	12 16       	cp	r1, r18
    13b2:	13 06       	cpc	r1, r19
    13b4:	14 06       	cpc	r1, r20
    13b6:	55 1f       	adc	r21, r21
    13b8:	f2 cf       	rjmp	.-28     	; 0x139e <__fp_split3+0xe>
    13ba:	46 95       	lsr	r20
    13bc:	f1 df       	rcall	.-30     	; 0x13a0 <__fp_splitA>
    13be:	08 c0       	rjmp	.+16     	; 0x13d0 <__fp_splitA+0x30>
    13c0:	16 16       	cp	r1, r22
    13c2:	17 06       	cpc	r1, r23
    13c4:	18 06       	cpc	r1, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	f1 cf       	rjmp	.-30     	; 0x13ac <__fp_splitA+0xc>
    13ca:	86 95       	lsr	r24
    13cc:	71 05       	cpc	r23, r1
    13ce:	61 05       	cpc	r22, r1
    13d0:	08 94       	sec
    13d2:	08 95       	ret

000013d4 <__fp_zero>:
    13d4:	e8 94       	clt

000013d6 <__fp_szero>:
    13d6:	bb 27       	eor	r27, r27
    13d8:	66 27       	eor	r22, r22
    13da:	77 27       	eor	r23, r23
    13dc:	cb 01       	movw	r24, r22
    13de:	97 f9       	bld	r25, 7
    13e0:	08 95       	ret

000013e2 <__gesf2>:
    13e2:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <__fp_cmp>
    13e6:	08 f4       	brcc	.+2      	; 0x13ea <__gesf2+0x8>
    13e8:	8f ef       	ldi	r24, 0xFF	; 255
    13ea:	08 95       	ret

000013ec <__mulsf3>:
    13ec:	0e 94 09 0a 	call	0x1412	; 0x1412 <__mulsf3x>
    13f0:	0c 94 b7 09 	jmp	0x136e	; 0x136e <__fp_round>
    13f4:	0e 94 a9 09 	call	0x1352	; 0x1352 <__fp_pscA>
    13f8:	38 f0       	brcs	.+14     	; 0x1408 <__mulsf3+0x1c>
    13fa:	0e 94 b0 09 	call	0x1360	; 0x1360 <__fp_pscB>
    13fe:	20 f0       	brcs	.+8      	; 0x1408 <__mulsf3+0x1c>
    1400:	95 23       	and	r25, r21
    1402:	11 f0       	breq	.+4      	; 0x1408 <__mulsf3+0x1c>
    1404:	0c 94 a0 09 	jmp	0x1340	; 0x1340 <__fp_inf>
    1408:	0c 94 a6 09 	jmp	0x134c	; 0x134c <__fp_nan>
    140c:	11 24       	eor	r1, r1
    140e:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <__fp_szero>

00001412 <__mulsf3x>:
    1412:	0e 94 c8 09 	call	0x1390	; 0x1390 <__fp_split3>
    1416:	70 f3       	brcs	.-36     	; 0x13f4 <__mulsf3+0x8>

00001418 <__mulsf3_pse>:
    1418:	95 9f       	mul	r25, r21
    141a:	c1 f3       	breq	.-16     	; 0x140c <__mulsf3+0x20>
    141c:	95 0f       	add	r25, r21
    141e:	50 e0       	ldi	r21, 0x00	; 0
    1420:	55 1f       	adc	r21, r21
    1422:	62 9f       	mul	r22, r18
    1424:	f0 01       	movw	r30, r0
    1426:	72 9f       	mul	r23, r18
    1428:	bb 27       	eor	r27, r27
    142a:	f0 0d       	add	r31, r0
    142c:	b1 1d       	adc	r27, r1
    142e:	63 9f       	mul	r22, r19
    1430:	aa 27       	eor	r26, r26
    1432:	f0 0d       	add	r31, r0
    1434:	b1 1d       	adc	r27, r1
    1436:	aa 1f       	adc	r26, r26
    1438:	64 9f       	mul	r22, r20
    143a:	66 27       	eor	r22, r22
    143c:	b0 0d       	add	r27, r0
    143e:	a1 1d       	adc	r26, r1
    1440:	66 1f       	adc	r22, r22
    1442:	82 9f       	mul	r24, r18
    1444:	22 27       	eor	r18, r18
    1446:	b0 0d       	add	r27, r0
    1448:	a1 1d       	adc	r26, r1
    144a:	62 1f       	adc	r22, r18
    144c:	73 9f       	mul	r23, r19
    144e:	b0 0d       	add	r27, r0
    1450:	a1 1d       	adc	r26, r1
    1452:	62 1f       	adc	r22, r18
    1454:	83 9f       	mul	r24, r19
    1456:	a0 0d       	add	r26, r0
    1458:	61 1d       	adc	r22, r1
    145a:	22 1f       	adc	r18, r18
    145c:	74 9f       	mul	r23, r20
    145e:	33 27       	eor	r19, r19
    1460:	a0 0d       	add	r26, r0
    1462:	61 1d       	adc	r22, r1
    1464:	23 1f       	adc	r18, r19
    1466:	84 9f       	mul	r24, r20
    1468:	60 0d       	add	r22, r0
    146a:	21 1d       	adc	r18, r1
    146c:	82 2f       	mov	r24, r18
    146e:	76 2f       	mov	r23, r22
    1470:	6a 2f       	mov	r22, r26
    1472:	11 24       	eor	r1, r1
    1474:	9f 57       	subi	r25, 0x7F	; 127
    1476:	50 40       	sbci	r21, 0x00	; 0
    1478:	9a f0       	brmi	.+38     	; 0x14a0 <__mulsf3_pse+0x88>
    147a:	f1 f0       	breq	.+60     	; 0x14b8 <__mulsf3_pse+0xa0>
    147c:	88 23       	and	r24, r24
    147e:	4a f0       	brmi	.+18     	; 0x1492 <__mulsf3_pse+0x7a>
    1480:	ee 0f       	add	r30, r30
    1482:	ff 1f       	adc	r31, r31
    1484:	bb 1f       	adc	r27, r27
    1486:	66 1f       	adc	r22, r22
    1488:	77 1f       	adc	r23, r23
    148a:	88 1f       	adc	r24, r24
    148c:	91 50       	subi	r25, 0x01	; 1
    148e:	50 40       	sbci	r21, 0x00	; 0
    1490:	a9 f7       	brne	.-22     	; 0x147c <__mulsf3_pse+0x64>
    1492:	9e 3f       	cpi	r25, 0xFE	; 254
    1494:	51 05       	cpc	r21, r1
    1496:	80 f0       	brcs	.+32     	; 0x14b8 <__mulsf3_pse+0xa0>
    1498:	0c 94 a0 09 	jmp	0x1340	; 0x1340 <__fp_inf>
    149c:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <__fp_szero>
    14a0:	5f 3f       	cpi	r21, 0xFF	; 255
    14a2:	e4 f3       	brlt	.-8      	; 0x149c <__mulsf3_pse+0x84>
    14a4:	98 3e       	cpi	r25, 0xE8	; 232
    14a6:	d4 f3       	brlt	.-12     	; 0x149c <__mulsf3_pse+0x84>
    14a8:	86 95       	lsr	r24
    14aa:	77 95       	ror	r23
    14ac:	67 95       	ror	r22
    14ae:	b7 95       	ror	r27
    14b0:	f7 95       	ror	r31
    14b2:	e7 95       	ror	r30
    14b4:	9f 5f       	subi	r25, 0xFF	; 255
    14b6:	c1 f7       	brne	.-16     	; 0x14a8 <__mulsf3_pse+0x90>
    14b8:	fe 2b       	or	r31, r30
    14ba:	88 0f       	add	r24, r24
    14bc:	91 1d       	adc	r25, r1
    14be:	96 95       	lsr	r25
    14c0:	87 95       	ror	r24
    14c2:	97 f9       	bld	r25, 7
    14c4:	08 95       	ret

000014c6 <sin>:
    14c6:	9f 93       	push	r25
    14c8:	0e 94 c8 0a 	call	0x1590	; 0x1590 <__fp_rempio2>
    14cc:	0f 90       	pop	r0
    14ce:	07 fc       	sbrc	r0, 7
    14d0:	ee 5f       	subi	r30, 0xFE	; 254
    14d2:	0c 94 f1 0a 	jmp	0x15e2	; 0x15e2 <__fp_sinus>
    14d6:	19 f4       	brne	.+6      	; 0x14de <sin+0x18>
    14d8:	16 f4       	brtc	.+4      	; 0x14de <sin+0x18>
    14da:	0c 94 a6 09 	jmp	0x134c	; 0x134c <__fp_nan>
    14de:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__fp_mpack>

000014e2 <sqrt>:
    14e2:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__fp_splitA>
    14e6:	b8 f3       	brcs	.-18     	; 0x14d6 <sin+0x10>
    14e8:	99 23       	and	r25, r25
    14ea:	c9 f3       	breq	.-14     	; 0x14de <sin+0x18>
    14ec:	b6 f3       	brts	.-20     	; 0x14da <sin+0x14>
    14ee:	9f 57       	subi	r25, 0x7F	; 127
    14f0:	55 0b       	sbc	r21, r21
    14f2:	87 ff       	sbrs	r24, 7
    14f4:	0e 94 bf 0a 	call	0x157e	; 0x157e <__fp_norm2>
    14f8:	00 24       	eor	r0, r0
    14fa:	a0 e6       	ldi	r26, 0x60	; 96
    14fc:	40 ea       	ldi	r20, 0xA0	; 160
    14fe:	90 01       	movw	r18, r0
    1500:	80 58       	subi	r24, 0x80	; 128
    1502:	56 95       	lsr	r21
    1504:	97 95       	ror	r25
    1506:	28 f4       	brcc	.+10     	; 0x1512 <sqrt+0x30>
    1508:	80 5c       	subi	r24, 0xC0	; 192
    150a:	66 0f       	add	r22, r22
    150c:	77 1f       	adc	r23, r23
    150e:	88 1f       	adc	r24, r24
    1510:	20 f0       	brcs	.+8      	; 0x151a <sqrt+0x38>
    1512:	26 17       	cp	r18, r22
    1514:	37 07       	cpc	r19, r23
    1516:	48 07       	cpc	r20, r24
    1518:	30 f4       	brcc	.+12     	; 0x1526 <sqrt+0x44>
    151a:	62 1b       	sub	r22, r18
    151c:	73 0b       	sbc	r23, r19
    151e:	84 0b       	sbc	r24, r20
    1520:	20 29       	or	r18, r0
    1522:	31 29       	or	r19, r1
    1524:	4a 2b       	or	r20, r26
    1526:	a6 95       	lsr	r26
    1528:	17 94       	ror	r1
    152a:	07 94       	ror	r0
    152c:	20 25       	eor	r18, r0
    152e:	31 25       	eor	r19, r1
    1530:	4a 27       	eor	r20, r26
    1532:	58 f7       	brcc	.-42     	; 0x150a <sqrt+0x28>
    1534:	66 0f       	add	r22, r22
    1536:	77 1f       	adc	r23, r23
    1538:	88 1f       	adc	r24, r24
    153a:	20 f0       	brcs	.+8      	; 0x1544 <sqrt+0x62>
    153c:	26 17       	cp	r18, r22
    153e:	37 07       	cpc	r19, r23
    1540:	48 07       	cpc	r20, r24
    1542:	30 f4       	brcc	.+12     	; 0x1550 <sqrt+0x6e>
    1544:	62 0b       	sbc	r22, r18
    1546:	73 0b       	sbc	r23, r19
    1548:	84 0b       	sbc	r24, r20
    154a:	20 0d       	add	r18, r0
    154c:	31 1d       	adc	r19, r1
    154e:	41 1d       	adc	r20, r1
    1550:	a0 95       	com	r26
    1552:	81 f7       	brne	.-32     	; 0x1534 <sqrt+0x52>
    1554:	b9 01       	movw	r22, r18
    1556:	84 2f       	mov	r24, r20
    1558:	91 58       	subi	r25, 0x81	; 129
    155a:	88 0f       	add	r24, r24
    155c:	96 95       	lsr	r25
    155e:	87 95       	ror	r24
    1560:	08 95       	ret

00001562 <__fp_mpack>:
    1562:	9f 3f       	cpi	r25, 0xFF	; 255
    1564:	31 f0       	breq	.+12     	; 0x1572 <__fp_mpack_finite+0xc>

00001566 <__fp_mpack_finite>:
    1566:	91 50       	subi	r25, 0x01	; 1
    1568:	20 f4       	brcc	.+8      	; 0x1572 <__fp_mpack_finite+0xc>
    156a:	87 95       	ror	r24
    156c:	77 95       	ror	r23
    156e:	67 95       	ror	r22
    1570:	b7 95       	ror	r27
    1572:	88 0f       	add	r24, r24
    1574:	91 1d       	adc	r25, r1
    1576:	96 95       	lsr	r25
    1578:	87 95       	ror	r24
    157a:	97 f9       	bld	r25, 7
    157c:	08 95       	ret

0000157e <__fp_norm2>:
    157e:	91 50       	subi	r25, 0x01	; 1
    1580:	50 40       	sbci	r21, 0x00	; 0
    1582:	66 0f       	add	r22, r22
    1584:	77 1f       	adc	r23, r23
    1586:	88 1f       	adc	r24, r24
    1588:	d2 f7       	brpl	.-12     	; 0x157e <__fp_norm2>
    158a:	08 95       	ret
    158c:	0c 94 a6 09 	jmp	0x134c	; 0x134c <__fp_nan>

00001590 <__fp_rempio2>:
    1590:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__fp_splitA>
    1594:	d8 f3       	brcs	.-10     	; 0x158c <__fp_norm2+0xe>
    1596:	e8 94       	clt
    1598:	e0 e0       	ldi	r30, 0x00	; 0
    159a:	bb 27       	eor	r27, r27
    159c:	9f 57       	subi	r25, 0x7F	; 127
    159e:	f0 f0       	brcs	.+60     	; 0x15dc <__fp_rempio2+0x4c>
    15a0:	2a ed       	ldi	r18, 0xDA	; 218
    15a2:	3f e0       	ldi	r19, 0x0F	; 15
    15a4:	49 ec       	ldi	r20, 0xC9	; 201
    15a6:	06 c0       	rjmp	.+12     	; 0x15b4 <__fp_rempio2+0x24>
    15a8:	ee 0f       	add	r30, r30
    15aa:	bb 0f       	add	r27, r27
    15ac:	66 1f       	adc	r22, r22
    15ae:	77 1f       	adc	r23, r23
    15b0:	88 1f       	adc	r24, r24
    15b2:	28 f0       	brcs	.+10     	; 0x15be <__fp_rempio2+0x2e>
    15b4:	b2 3a       	cpi	r27, 0xA2	; 162
    15b6:	62 07       	cpc	r22, r18
    15b8:	73 07       	cpc	r23, r19
    15ba:	84 07       	cpc	r24, r20
    15bc:	28 f0       	brcs	.+10     	; 0x15c8 <__fp_rempio2+0x38>
    15be:	b2 5a       	subi	r27, 0xA2	; 162
    15c0:	62 0b       	sbc	r22, r18
    15c2:	73 0b       	sbc	r23, r19
    15c4:	84 0b       	sbc	r24, r20
    15c6:	e3 95       	inc	r30
    15c8:	9a 95       	dec	r25
    15ca:	72 f7       	brpl	.-36     	; 0x15a8 <__fp_rempio2+0x18>
    15cc:	80 38       	cpi	r24, 0x80	; 128
    15ce:	30 f4       	brcc	.+12     	; 0x15dc <__fp_rempio2+0x4c>
    15d0:	9a 95       	dec	r25
    15d2:	bb 0f       	add	r27, r27
    15d4:	66 1f       	adc	r22, r22
    15d6:	77 1f       	adc	r23, r23
    15d8:	88 1f       	adc	r24, r24
    15da:	d2 f7       	brpl	.-12     	; 0x15d0 <__fp_rempio2+0x40>
    15dc:	90 48       	sbci	r25, 0x80	; 128
    15de:	0c 94 b3 0a 	jmp	0x1566	; 0x1566 <__fp_mpack_finite>

000015e2 <__fp_sinus>:
    15e2:	ef 93       	push	r30
    15e4:	e0 ff       	sbrs	r30, 0
    15e6:	07 c0       	rjmp	.+14     	; 0x15f6 <__fp_sinus+0x14>
    15e8:	a2 ea       	ldi	r26, 0xA2	; 162
    15ea:	2a ed       	ldi	r18, 0xDA	; 218
    15ec:	3f e0       	ldi	r19, 0x0F	; 15
    15ee:	49 ec       	ldi	r20, 0xC9	; 201
    15f0:	5f eb       	ldi	r21, 0xBF	; 191
    15f2:	0e 94 af 08 	call	0x115e	; 0x115e <__addsf3x>
    15f6:	0e 94 b7 09 	call	0x136e	; 0x136e <__fp_round>
    15fa:	0f 90       	pop	r0
    15fc:	03 94       	inc	r0
    15fe:	01 fc       	sbrc	r0, 1
    1600:	90 58       	subi	r25, 0x80	; 128
    1602:	e8 e6       	ldi	r30, 0x68	; 104
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	0c 94 05 0b 	jmp	0x160a	; 0x160a <__fp_powsodd>

0000160a <__fp_powsodd>:
    160a:	9f 93       	push	r25
    160c:	8f 93       	push	r24
    160e:	7f 93       	push	r23
    1610:	6f 93       	push	r22
    1612:	ff 93       	push	r31
    1614:	ef 93       	push	r30
    1616:	9b 01       	movw	r18, r22
    1618:	ac 01       	movw	r20, r24
    161a:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3>
    161e:	ef 91       	pop	r30
    1620:	ff 91       	pop	r31
    1622:	0e 94 19 0b 	call	0x1632	; 0x1632 <__fp_powser>
    1626:	2f 91       	pop	r18
    1628:	3f 91       	pop	r19
    162a:	4f 91       	pop	r20
    162c:	5f 91       	pop	r21
    162e:	0c 94 f6 09 	jmp	0x13ec	; 0x13ec <__mulsf3>

00001632 <__fp_powser>:
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	1f 93       	push	r17
    1638:	0f 93       	push	r16
    163a:	ff 92       	push	r15
    163c:	ef 92       	push	r14
    163e:	df 92       	push	r13
    1640:	7b 01       	movw	r14, r22
    1642:	8c 01       	movw	r16, r24
    1644:	68 94       	set
    1646:	06 c0       	rjmp	.+12     	; 0x1654 <__fp_powser+0x22>
    1648:	da 2e       	mov	r13, r26
    164a:	ef 01       	movw	r28, r30
    164c:	0e 94 09 0a 	call	0x1412	; 0x1412 <__mulsf3x>
    1650:	fe 01       	movw	r30, r28
    1652:	e8 94       	clt
    1654:	a5 91       	lpm	r26, Z+
    1656:	25 91       	lpm	r18, Z+
    1658:	35 91       	lpm	r19, Z+
    165a:	45 91       	lpm	r20, Z+
    165c:	55 91       	lpm	r21, Z+
    165e:	a6 f3       	brts	.-24     	; 0x1648 <__fp_powser+0x16>
    1660:	ef 01       	movw	r28, r30
    1662:	0e 94 af 08 	call	0x115e	; 0x115e <__addsf3x>
    1666:	fe 01       	movw	r30, r28
    1668:	97 01       	movw	r18, r14
    166a:	a8 01       	movw	r20, r16
    166c:	da 94       	dec	r13
    166e:	69 f7       	brne	.-38     	; 0x164a <__fp_powser+0x18>
    1670:	df 90       	pop	r13
    1672:	ef 90       	pop	r14
    1674:	ff 90       	pop	r15
    1676:	0f 91       	pop	r16
    1678:	1f 91       	pop	r17
    167a:	cf 91       	pop	r28
    167c:	df 91       	pop	r29
    167e:	08 95       	ret

00001680 <_ZN15OrangutanAnalog7setModeEh.part.0>:
    1680:	ec e7       	ldi	r30, 0x7C	; 124
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	8f 7d       	andi	r24, 0xDF	; 223
    1688:	80 83       	st	Z, r24
    168a:	08 95       	ret

0000168c <_ZN15OrangutanAnalog7setModeEh>:
    168c:	81 11       	cpse	r24, r1
    168e:	03 c0       	rjmp	.+6      	; 0x1696 <_ZN15OrangutanAnalog7setModeEh+0xa>
    1690:	0e 94 40 0b 	call	0x1680	; 0x1680 <_ZN15OrangutanAnalog7setModeEh.part.0>
    1694:	08 95       	ret
    1696:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    169a:	80 62       	ori	r24, 0x20	; 32
    169c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    16a0:	08 95       	ret

000016a2 <_ZN15OrangutanAnalog7getModeEv>:
    16a2:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    16a6:	85 fb       	bst	r24, 5
    16a8:	88 27       	eor	r24, r24
    16aa:	80 f9       	bld	r24, 0
    16ac:	08 95       	ret

000016ae <_ZN15OrangutanAnalog16conversionResultEv>:
    16ae:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <_ZN15OrangutanAnalog7getModeEv>
    16b2:	88 23       	and	r24, r24
    16b4:	21 f0       	breq	.+8      	; 0x16be <_ZN15OrangutanAnalog16conversionResultEv+0x10>
    16b6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	08 95       	ret
    16be:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    16c2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    16c6:	08 95       	ret

000016c8 <_ZN15OrangutanAnalog15startConversionEhh>:
    16c8:	80 32       	cpi	r24, 0x20	; 32
    16ca:	a0 f4       	brcc	.+40     	; 0x16f4 <_ZN15OrangutanAnalog15startConversionEhh+0x2c>
    16cc:	97 e8       	ldi	r25, 0x87	; 135
    16ce:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    16d2:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    16d6:	66 23       	and	r22, r22
    16d8:	11 f0       	breq	.+4      	; 0x16de <_ZN15OrangutanAnalog15startConversionEhh+0x16>
    16da:	90 6c       	ori	r25, 0xC0	; 192
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
    16de:	9f 77       	andi	r25, 0x7F	; 127
    16e0:	90 64       	ori	r25, 0x40	; 64
    16e2:	90 7e       	andi	r25, 0xE0	; 224
    16e4:	98 2b       	or	r25, r24
    16e6:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    16ea:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    16ee:	80 64       	ori	r24, 0x40	; 64
    16f0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    16f4:	08 95       	ret

000016f6 <_ZN15OrangutanAnalog11readAverageEhj>:
    16f6:	a0 e0       	ldi	r26, 0x00	; 0
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e1 e8       	ldi	r30, 0x81	; 129
    16fc:	fb e0       	ldi	r31, 0x0B	; 11
    16fe:	0c 94 1f 19 	jmp	0x323e	; 0x323e <__prologue_saves__+0x14>
    1702:	eb 01       	movw	r28, r22
    1704:	60 e0       	ldi	r22, 0x00	; 0
    1706:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <_ZN15OrangutanAnalog15startConversionEhh>
    170a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    170e:	86 fd       	sbrc	r24, 6
    1710:	fc cf       	rjmp	.-8      	; 0x170a <_ZN15OrangutanAnalog11readAverageEhj+0x14>
    1712:	8e 01       	movw	r16, r28
    1714:	c1 2c       	mov	r12, r1
    1716:	d1 2c       	mov	r13, r1
    1718:	76 01       	movw	r14, r12
    171a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    171e:	80 64       	ori	r24, 0x40	; 64
    1720:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1724:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1728:	86 fd       	sbrc	r24, 6
    172a:	fc cf       	rjmp	.-8      	; 0x1724 <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
    172c:	0e 94 57 0b 	call	0x16ae	; 0x16ae <_ZN15OrangutanAnalog16conversionResultEv>
    1730:	c8 0e       	add	r12, r24
    1732:	d9 1e       	adc	r13, r25
    1734:	e1 1c       	adc	r14, r1
    1736:	f1 1c       	adc	r15, r1
    1738:	01 50       	subi	r16, 0x01	; 1
    173a:	11 09       	sbc	r17, r1
    173c:	01 15       	cp	r16, r1
    173e:	11 05       	cpc	r17, r1
    1740:	61 f7       	brne	.-40     	; 0x171a <_ZN15OrangutanAnalog11readAverageEhj+0x24>
    1742:	ce 01       	movw	r24, r28
    1744:	96 95       	lsr	r25
    1746:	87 95       	ror	r24
    1748:	c0 34       	cpi	r28, 0x40	; 64
    174a:	d1 05       	cpc	r29, r1
    174c:	38 f4       	brcc	.+14     	; 0x175c <_ZN15OrangutanAnalog11readAverageEhj+0x66>
    174e:	8c 0d       	add	r24, r12
    1750:	9d 1d       	adc	r25, r13
    1752:	be 01       	movw	r22, r28
    1754:	0e 94 98 18 	call	0x3130	; 0x3130 <__udivmodhi4>
    1758:	cb 01       	movw	r24, r22
    175a:	0e c0       	rjmp	.+28     	; 0x1778 <_ZN15OrangutanAnalog11readAverageEhj+0x82>
    175c:	a7 01       	movw	r20, r14
    175e:	96 01       	movw	r18, r12
    1760:	28 0f       	add	r18, r24
    1762:	39 1f       	adc	r19, r25
    1764:	41 1d       	adc	r20, r1
    1766:	51 1d       	adc	r21, r1
    1768:	ca 01       	movw	r24, r20
    176a:	b9 01       	movw	r22, r18
    176c:	9e 01       	movw	r18, r28
    176e:	40 e0       	ldi	r20, 0x00	; 0
    1770:	50 e0       	ldi	r21, 0x00	; 0
    1772:	0e 94 ac 18 	call	0x3158	; 0x3158 <__udivmodsi4>
    1776:	c9 01       	movw	r24, r18
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
    177c:	e8 e0       	ldi	r30, 0x08	; 8
    177e:	0c 94 3b 19 	jmp	0x3276	; 0x3276 <__epilogue_restores__+0x14>

00001782 <_ZN15OrangutanAnalog12toMillivoltsEj>:
    1782:	cf 92       	push	r12
    1784:	df 92       	push	r13
    1786:	ef 92       	push	r14
    1788:	ff 92       	push	r15
    178a:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
    178e:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
    1792:	9c 01       	movw	r18, r24
    1794:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__umulhisi3>
    1798:	6b 01       	movw	r12, r22
    179a:	7c 01       	movw	r14, r24
    179c:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <_ZN15OrangutanAnalog7getModeEv>
    17a0:	88 23       	and	r24, r24
    17a2:	59 f0       	breq	.+22     	; 0x17ba <_ZN15OrangutanAnalog12toMillivoltsEj+0x38>
    17a4:	c7 01       	movw	r24, r14
    17a6:	b6 01       	movw	r22, r12
    17a8:	61 58       	subi	r22, 0x81	; 129
    17aa:	7f 4f       	sbci	r23, 0xFF	; 255
    17ac:	8f 4f       	sbci	r24, 0xFF	; 255
    17ae:	9f 4f       	sbci	r25, 0xFF	; 255
    17b0:	2f ef       	ldi	r18, 0xFF	; 255
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	40 e0       	ldi	r20, 0x00	; 0
    17b6:	50 e0       	ldi	r21, 0x00	; 0
    17b8:	0a c0       	rjmp	.+20     	; 0x17ce <_ZN15OrangutanAnalog12toMillivoltsEj+0x4c>
    17ba:	c7 01       	movw	r24, r14
    17bc:	b6 01       	movw	r22, r12
    17be:	61 50       	subi	r22, 0x01	; 1
    17c0:	7e 4f       	sbci	r23, 0xFE	; 254
    17c2:	8f 4f       	sbci	r24, 0xFF	; 255
    17c4:	9f 4f       	sbci	r25, 0xFF	; 255
    17c6:	2f ef       	ldi	r18, 0xFF	; 255
    17c8:	33 e0       	ldi	r19, 0x03	; 3
    17ca:	40 e0       	ldi	r20, 0x00	; 0
    17cc:	50 e0       	ldi	r21, 0x00	; 0
    17ce:	0e 94 ac 18 	call	0x3158	; 0x3158 <__udivmodsi4>
    17d2:	c9 01       	movw	r24, r18
    17d4:	ff 90       	pop	r15
    17d6:	ef 90       	pop	r14
    17d8:	df 90       	pop	r13
    17da:	cf 90       	pop	r12
    17dc:	08 95       	ret

000017de <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
    17de:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <_ZN15OrangutanAnalog11readAverageEhj>
    17e2:	0e 94 c1 0b 	call	0x1782	; 0x1782 <_ZN15OrangutanAnalog12toMillivoltsEj>
    17e6:	08 95       	ret

000017e8 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
    17e8:	1f 93       	push	r17
    17ea:	cf 93       	push	r28
    17ec:	df 93       	push	r29
    17ee:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <_ZN15OrangutanAnalog7getModeEv>
    17f2:	18 2f       	mov	r17, r24
    17f4:	0e 94 40 0b 	call	0x1680	; 0x1680 <_ZN15OrangutanAnalog7setModeEh.part.0>
    17f8:	6a e0       	ldi	r22, 0x0A	; 10
    17fa:	70 e0       	ldi	r23, 0x00	; 0
    17fc:	86 e0       	ldi	r24, 0x06	; 6
    17fe:	0e 94 ef 0b 	call	0x17de	; 0x17de <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
    1802:	ec 01       	movw	r28, r24
    1804:	81 2f       	mov	r24, r17
    1806:	0e 94 46 0b 	call	0x168c	; 0x168c <_ZN15OrangutanAnalog7setModeEh>
    180a:	ce 01       	movw	r24, r28
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	8c 0f       	add	r24, r28
    1812:	9d 1f       	adc	r25, r29
    1814:	01 96       	adiw	r24, 0x01	; 1
    1816:	96 95       	lsr	r25
    1818:	87 95       	ror	r24
    181a:	df 91       	pop	r29
    181c:	cf 91       	pop	r28
    181e:	1f 91       	pop	r17
    1820:	08 95       	ret

00001822 <read_battery_millivolts_3pi>:
    1822:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
    1826:	08 95       	ret

00001828 <_ZL16currentCharacterv>:
    1828:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <_ZL17use_program_space>
    182c:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <__data_end>
    1830:	f0 91 89 01 	lds	r31, 0x0189	; 0x800189 <__data_end+0x1>
    1834:	99 23       	and	r25, r25
    1836:	11 f0       	breq	.+4      	; 0x183c <_ZL16currentCharacterv+0x14>
    1838:	84 91       	lpm	r24, Z
    183a:	01 c0       	rjmp	.+2      	; 0x183e <_ZL16currentCharacterv+0x16>
    183c:	80 81       	ld	r24, Z
    183e:	2f eb       	ldi	r18, 0xBF	; 191
    1840:	28 0f       	add	r18, r24
    1842:	2a 31       	cpi	r18, 0x1A	; 26
    1844:	10 f4       	brcc	.+4      	; 0x184a <_ZL16currentCharacterv+0x22>
    1846:	80 5e       	subi	r24, 0xE0	; 224
    1848:	08 95       	ret
    184a:	80 32       	cpi	r24, 0x20	; 32
    184c:	49 f4       	brne	.+18     	; 0x1860 <_ZL16currentCharacterv+0x38>
    184e:	9f 01       	movw	r18, r30
    1850:	2f 5f       	subi	r18, 0xFF	; 255
    1852:	3f 4f       	sbci	r19, 0xFF	; 255
    1854:	30 93 89 01 	sts	0x0189, r19	; 0x800189 <__data_end+0x1>
    1858:	20 93 88 01 	sts	0x0188, r18	; 0x800188 <__data_end>
    185c:	ef 2b       	or	r30, r31
    185e:	31 f7       	brne	.-52     	; 0x182c <_ZL16currentCharacterv+0x4>
    1860:	08 95       	ret

00001862 <_ZL9getNumberv>:
    1862:	1f 93       	push	r17
    1864:	cf 93       	push	r28
    1866:	df 93       	push	r29
    1868:	0e 94 14 0c 	call	0x1828	; 0x1828 <_ZL16currentCharacterv>
    186c:	c0 e0       	ldi	r28, 0x00	; 0
    186e:	d0 e0       	ldi	r29, 0x00	; 0
    1870:	1a e0       	ldi	r17, 0x0A	; 10
    1872:	90 ed       	ldi	r25, 0xD0	; 208
    1874:	98 0f       	add	r25, r24
    1876:	9a 30       	cpi	r25, 0x0A	; 10
    1878:	b8 f4       	brcc	.+46     	; 0x18a8 <_ZL9getNumberv+0x46>
    187a:	9e 01       	movw	r18, r28
    187c:	12 9f       	mul	r17, r18
    187e:	e0 01       	movw	r28, r0
    1880:	13 9f       	mul	r17, r19
    1882:	d0 0d       	add	r29, r0
    1884:	11 24       	eor	r1, r1
    1886:	c8 0f       	add	r28, r24
    1888:	d1 1d       	adc	r29, r1
    188a:	87 fd       	sbrc	r24, 7
    188c:	da 95       	dec	r29
    188e:	e0 97       	sbiw	r28, 0x30	; 48
    1890:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <__data_end>
    1894:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <__data_end+0x1>
    1898:	01 96       	adiw	r24, 0x01	; 1
    189a:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <__data_end+0x1>
    189e:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <__data_end>
    18a2:	0e 94 14 0c 	call	0x1828	; 0x1828 <_ZL16currentCharacterv>
    18a6:	e5 cf       	rjmp	.-54     	; 0x1872 <_ZL9getNumberv+0x10>
    18a8:	ce 01       	movw	r24, r28
    18aa:	df 91       	pop	r29
    18ac:	cf 91       	pop	r28
    18ae:	1f 91       	pop	r17
    18b0:	08 95       	ret

000018b2 <_ZN15OrangutanBuzzer5init2Ev>:
    18b2:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    18b6:	83 e2       	ldi	r24, 0x23	; 35
    18b8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    18bc:	81 e1       	ldi	r24, 0x11	; 17
    18be:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    18c2:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    18c6:	80 e1       	ldi	r24, 0x10	; 16
    18c8:	97 e2       	ldi	r25, 0x27	; 39
    18ca:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    18ce:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    18d2:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    18d6:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    18da:	22 9a       	sbi	0x04, 2	; 4
    18dc:	78 94       	sei
    18de:	08 95       	ret

000018e0 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
    18e0:	8f 92       	push	r8
    18e2:	9f 92       	push	r9
    18e4:	af 92       	push	r10
    18e6:	bf 92       	push	r11
    18e8:	df 92       	push	r13
    18ea:	ef 92       	push	r14
    18ec:	ff 92       	push	r15
    18ee:	0f 93       	push	r16
    18f0:	1f 93       	push	r17
    18f2:	cf 93       	push	r28
    18f4:	df 93       	push	r29
    18f6:	5c 01       	movw	r10, r24
    18f8:	8b 01       	movw	r16, r22
    18fa:	d4 2e       	mov	r13, r20
    18fc:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <buzzerInitialized>
    1900:	81 11       	cpse	r24, r1
    1902:	05 c0       	rjmp	.+10     	; 0x190e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <buzzerInitialized>
    190a:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <_ZN15OrangutanBuzzer5init2Ev>
    190e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <buzzerFinished>
    1912:	b7 fe       	sbrs	r11, 7
    1914:	05 c0       	rjmp	.+10     	; 0x1920 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
    1916:	e8 94       	clt
    1918:	b7 f8       	bld	r11, 7
    191a:	2a e0       	ldi	r18, 0x0A	; 10
    191c:	f2 2e       	mov	r15, r18
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
    1920:	ff 24       	eor	r15, r15
    1922:	f3 94       	inc	r15
    1924:	e0 90 81 00 	lds	r14, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1928:	2e 2d       	mov	r18, r14
    192a:	28 7f       	andi	r18, 0xF8	; 248
    192c:	e2 2e       	mov	r14, r18
    192e:	48 ec       	ldi	r20, 0xC8	; 200
    1930:	f4 9e       	mul	r15, r20
    1932:	c0 01       	movw	r24, r0
    1934:	11 24       	eor	r1, r1
    1936:	8a 15       	cp	r24, r10
    1938:	9b 05       	cpc	r25, r11
    193a:	e0 f4       	brcc	.+56     	; 0x1974 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
    193c:	e5 01       	movw	r28, r10
    193e:	51 e1       	ldi	r21, 0x11	; 17
    1940:	a5 16       	cp	r10, r21
    1942:	57 e2       	ldi	r21, 0x27	; 39
    1944:	b5 06       	cpc	r11, r21
    1946:	10 f0       	brcs	.+4      	; 0x194c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
    1948:	c0 e1       	ldi	r28, 0x10	; 16
    194a:	d7 e2       	ldi	r29, 0x27	; 39
    194c:	be 01       	movw	r22, r28
    194e:	76 95       	lsr	r23
    1950:	67 95       	ror	r22
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	60 58       	subi	r22, 0x80	; 128
    1958:	79 46       	sbci	r23, 0x69	; 105
    195a:	87 46       	sbci	r24, 0x67	; 103
    195c:	9f 4f       	sbci	r25, 0xFF	; 255
    195e:	4e 01       	movw	r8, r28
    1960:	a1 2c       	mov	r10, r1
    1962:	b1 2c       	mov	r11, r1
    1964:	a5 01       	movw	r20, r10
    1966:	94 01       	movw	r18, r8
    1968:	0e 94 ac 18 	call	0x3158	; 0x3158 <__udivmodsi4>
    196c:	59 01       	movw	r10, r18
    196e:	8e 2d       	mov	r24, r14
    1970:	81 60       	ori	r24, 0x01	; 1
    1972:	24 c0       	rjmp	.+72     	; 0x19bc <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
    1974:	c8 e2       	ldi	r28, 0x28	; 40
    1976:	fc 9e       	mul	r15, r28
    1978:	c0 2d       	mov	r28, r0
    197a:	11 24       	eor	r1, r1
    197c:	d0 e0       	ldi	r29, 0x00	; 0
    197e:	ca 15       	cp	r28, r10
    1980:	db 05       	cpc	r29, r11
    1982:	08 f4       	brcc	.+2      	; 0x1986 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
    1984:	e5 01       	movw	r28, r10
    1986:	be 01       	movw	r22, r28
    1988:	76 95       	lsr	r23
    198a:	67 95       	ror	r22
    198c:	9e 01       	movw	r18, r28
    198e:	40 e0       	ldi	r20, 0x00	; 0
    1990:	50 e0       	ldi	r21, 0x00	; 0
    1992:	8a e0       	ldi	r24, 0x0A	; 10
    1994:	f8 12       	cpse	r15, r24
    1996:	07 c0       	rjmp	.+14     	; 0x19a6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	60 5e       	subi	r22, 0xE0	; 224
    199e:	73 44       	sbci	r23, 0x43	; 67
    19a0:	81 44       	sbci	r24, 0x41	; 65
    19a2:	9f 4f       	sbci	r25, 0xFF	; 255
    19a4:	06 c0       	rjmp	.+12     	; 0x19b2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	60 53       	subi	r22, 0x30	; 48
    19ac:	7d 4e       	sbci	r23, 0xED	; 237
    19ae:	8c 4e       	sbci	r24, 0xEC	; 236
    19b0:	9f 4f       	sbci	r25, 0xFF	; 255
    19b2:	0e 94 ac 18 	call	0x3158	; 0x3158 <__udivmodsi4>
    19b6:	59 01       	movw	r10, r18
    19b8:	8e 2d       	mov	r24, r14
    19ba:	82 60       	ori	r24, 0x02	; 2
    19bc:	88 2e       	mov	r8, r24
    19be:	2a e0       	ldi	r18, 0x0A	; 10
    19c0:	f2 12       	cpse	r15, r18
    19c2:	07 c0       	rjmp	.+14     	; 0x19d2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
    19c4:	ce 01       	movw	r24, r28
    19c6:	05 96       	adiw	r24, 0x05	; 5
    19c8:	6a e0       	ldi	r22, 0x0A	; 10
    19ca:	70 e0       	ldi	r23, 0x00	; 0
    19cc:	0e 94 98 18 	call	0x3130	; 0x3130 <__udivmodhi4>
    19d0:	eb 01       	movw	r28, r22
    19d2:	c8 3e       	cpi	r28, 0xE8	; 232
    19d4:	43 e0       	ldi	r20, 0x03	; 3
    19d6:	d4 07       	cpc	r29, r20
    19d8:	59 f0       	breq	.+22     	; 0x19f0 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    19da:	98 01       	movw	r18, r16
    19dc:	de 01       	movw	r26, r28
    19de:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__umulhisi3>
    19e2:	28 ee       	ldi	r18, 0xE8	; 232
    19e4:	33 e0       	ldi	r19, 0x03	; 3
    19e6:	40 e0       	ldi	r20, 0x00	; 0
    19e8:	50 e0       	ldi	r21, 0x00	; 0
    19ea:	0e 94 ce 18 	call	0x319c	; 0x319c <__divmodsi4>
    19ee:	89 01       	movw	r16, r18
    19f0:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    19f4:	80 92 81 00 	sts	0x0081, r8	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    19f8:	b0 92 89 00 	sts	0x0089, r11	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    19fc:	a0 92 88 00 	sts	0x0088, r10	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1a00:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1a04:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1a08:	4d 2d       	mov	r20, r13
    1a0a:	40 31       	cpi	r20, 0x10	; 16
    1a0c:	08 f0       	brcs	.+2      	; 0x1a10 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    1a0e:	4f e0       	ldi	r20, 0x0F	; 15
    1a10:	80 e1       	ldi	r24, 0x10	; 16
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	84 1b       	sub	r24, r20
    1a16:	91 09       	sbc	r25, r1
    1a18:	a9 01       	movw	r20, r18
    1a1a:	02 c0       	rjmp	.+4      	; 0x1a20 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    1a1c:	56 95       	lsr	r21
    1a1e:	47 95       	ror	r20
    1a20:	8a 95       	dec	r24
    1a22:	e2 f7       	brpl	.-8      	; 0x1a1c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    1a24:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1a28:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1a2c:	10 93 90 01 	sts	0x0190, r17	; 0x800190 <_ZL13buzzerTimeout+0x1>
    1a30:	00 93 8f 01 	sts	0x018F, r16	; 0x80018f <_ZL13buzzerTimeout>
    1a34:	86 b3       	in	r24, 0x16	; 22
    1a36:	8f ef       	ldi	r24, 0xFF	; 255
    1a38:	86 bb       	out	0x16, r24	; 22
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1a40:	df 91       	pop	r29
    1a42:	cf 91       	pop	r28
    1a44:	1f 91       	pop	r17
    1a46:	0f 91       	pop	r16
    1a48:	ff 90       	pop	r15
    1a4a:	ef 90       	pop	r14
    1a4c:	df 90       	pop	r13
    1a4e:	bf 90       	pop	r11
    1a50:	af 90       	pop	r10
    1a52:	9f 90       	pop	r9
    1a54:	8f 90       	pop	r8
    1a56:	08 95       	ret

00001a58 <_ZN15OrangutanBuzzer8playNoteEhjh>:
    1a58:	cf 93       	push	r28
    1a5a:	df 93       	push	r29
    1a5c:	eb 01       	movw	r28, r22
    1a5e:	8f 3f       	cpi	r24, 0xFF	; 255
    1a60:	11 f0       	breq	.+4      	; 0x1a66 <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
    1a62:	41 11       	cpse	r20, r1
    1a64:	05 c0       	rjmp	.+10     	; 0x1a70 <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
    1a66:	40 e0       	ldi	r20, 0x00	; 0
    1a68:	be 01       	movw	r22, r28
    1a6a:	88 ee       	ldi	r24, 0xE8	; 232
    1a6c:	93 e0       	ldi	r25, 0x03	; 3
    1a6e:	43 c0       	rjmp	.+134    	; 0x1af6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
    1a70:	81 31       	cpi	r24, 0x11	; 17
    1a72:	30 f0       	brcs	.+12     	; 0x1a80 <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
    1a74:	50 ef       	ldi	r21, 0xF0	; 240
    1a76:	58 0f       	add	r21, r24
    1a78:	50 36       	cpi	r21, 0x60	; 96
    1a7a:	18 f0       	brcs	.+6      	; 0x1a82 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1a7c:	5f e5       	ldi	r21, 0x5F	; 95
    1a7e:	01 c0       	rjmp	.+2      	; 0x1a82 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1a80:	50 e0       	ldi	r21, 0x00	; 0
    1a82:	85 2f       	mov	r24, r21
    1a84:	6c e0       	ldi	r22, 0x0C	; 12
    1a86:	0e 94 8c 18 	call	0x3118	; 0x3118 <__udivmodqi4>
    1a8a:	68 2f       	mov	r22, r24
    1a8c:	74 ef       	ldi	r23, 0xF4	; 244
    1a8e:	76 03       	mulsu	r23, r22
    1a90:	90 01       	movw	r18, r0
    1a92:	11 24       	eor	r1, r1
    1a94:	25 0f       	add	r18, r21
    1a96:	31 1d       	adc	r19, r1
    1a98:	2c 30       	cpi	r18, 0x0C	; 12
    1a9a:	31 05       	cpc	r19, r1
    1a9c:	40 f4       	brcc	.+16     	; 0x1aae <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
    1a9e:	f9 01       	movw	r30, r18
    1aa0:	ee 0f       	add	r30, r30
    1aa2:	ff 1f       	adc	r31, r31
    1aa4:	ec 5c       	subi	r30, 0xCC	; 204
    1aa6:	fe 4f       	sbci	r31, 0xFE	; 254
    1aa8:	20 81       	ld	r18, Z
    1aaa:	31 81       	ldd	r19, Z+1	; 0x01
    1aac:	02 c0       	rjmp	.+4      	; 0x1ab2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	87 30       	cpi	r24, 0x07	; 7
    1ab4:	81 f0       	breq	.+32     	; 0x1ad6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
    1ab6:	08 2e       	mov	r0, r24
    1ab8:	02 c0       	rjmp	.+4      	; 0x1abe <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
    1aba:	22 0f       	add	r18, r18
    1abc:	33 1f       	adc	r19, r19
    1abe:	0a 94       	dec	r0
    1ac0:	e2 f7       	brpl	.-8      	; 0x1aba <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    1ac2:	82 30       	cpi	r24, 0x02	; 2
    1ac4:	28 f0       	brcs	.+10     	; 0x1ad0 <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
    1ac6:	c9 01       	movw	r24, r18
    1ac8:	05 96       	adiw	r24, 0x05	; 5
    1aca:	6a e0       	ldi	r22, 0x0A	; 10
    1acc:	70 e0       	ldi	r23, 0x00	; 0
    1ace:	0c c0       	rjmp	.+24     	; 0x1ae8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
    1ad0:	c9 01       	movw	r24, r18
    1ad2:	90 58       	subi	r25, 0x80	; 128
    1ad4:	0c c0       	rjmp	.+24     	; 0x1aee <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
    1ad6:	c9 01       	movw	r24, r18
    1ad8:	36 e0       	ldi	r19, 0x06	; 6
    1ada:	88 0f       	add	r24, r24
    1adc:	99 1f       	adc	r25, r25
    1ade:	3a 95       	dec	r19
    1ae0:	e1 f7       	brne	.-8      	; 0x1ada <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
    1ae2:	02 96       	adiw	r24, 0x02	; 2
    1ae4:	65 e0       	ldi	r22, 0x05	; 5
    1ae6:	70 e0       	ldi	r23, 0x00	; 0
    1ae8:	0e 94 98 18 	call	0x3130	; 0x3130 <__udivmodhi4>
    1aec:	cb 01       	movw	r24, r22
    1aee:	40 31       	cpi	r20, 0x10	; 16
    1af0:	08 f0       	brcs	.+2      	; 0x1af4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    1af2:	4f e0       	ldi	r20, 0x0F	; 15
    1af4:	be 01       	movw	r22, r28
    1af6:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1afa:	df 91       	pop	r29
    1afc:	cf 91       	pop	r28
    1afe:	08 95       	ret

00001b00 <_ZL8nextNotev>:
    1b00:	a2 e0       	ldi	r26, 0x02	; 2
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e6 e8       	ldi	r30, 0x86	; 134
    1b06:	fd e0       	ldi	r31, 0x0D	; 13
    1b08:	0c 94 17 19 	jmp	0x322e	; 0x322e <__prologue_saves__+0x4>
    1b0c:	90 90 0a 01 	lds	r9, 0x010A	; 0x80010a <_ZL6octave>
    1b10:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <_ZL8staccato>
    1b14:	88 23       	and	r24, r24
    1b16:	21 f0       	breq	.+8      	; 0x1b20 <_ZL8nextNotev+0x20>
    1b18:	60 91 8b 01 	lds	r22, 0x018B	; 0x80018b <_ZL22staccato_rest_duration>
    1b1c:	61 11       	cpse	r22, r1
    1b1e:	17 c0       	rjmp	.+46     	; 0x1b4e <_ZL8nextNotev+0x4e>
    1b20:	77 24       	eor	r7, r7
    1b22:	73 94       	inc	r7
    1b24:	b0 ec       	ldi	r27, 0xC0	; 192
    1b26:	ab 2e       	mov	r10, r27
    1b28:	bd e5       	ldi	r27, 0x5D	; 93
    1b2a:	bb 2e       	mov	r11, r27
    1b2c:	1a e0       	ldi	r17, 0x0A	; 10
    1b2e:	61 2e       	mov	r6, r17
    1b30:	04 e0       	ldi	r16, 0x04	; 4
    1b32:	80 2e       	mov	r8, r16
    1b34:	80 ed       	ldi	r24, 0xD0	; 208
    1b36:	c8 2e       	mov	r12, r24
    1b38:	87 e0       	ldi	r24, 0x07	; 7
    1b3a:	d8 2e       	mov	r13, r24
    1b3c:	94 e0       	ldi	r25, 0x04	; 4
    1b3e:	e9 2e       	mov	r14, r25
    1b40:	f1 2c       	mov	r15, r1
    1b42:	04 ef       	ldi	r16, 0xF4	; 244
    1b44:	11 e0       	ldi	r17, 0x01	; 1
    1b46:	2f e0       	ldi	r18, 0x0F	; 15
    1b48:	42 2e       	mov	r4, r18
    1b4a:	51 2c       	mov	r5, r1
    1b4c:	15 c0       	rjmp	.+42     	; 0x1b78 <_ZL8nextNotev+0x78>
    1b4e:	70 e0       	ldi	r23, 0x00	; 0
    1b50:	40 e0       	ldi	r20, 0x00	; 0
    1b52:	88 ee       	ldi	r24, 0xE8	; 232
    1b54:	93 e0       	ldi	r25, 0x03	; 3
    1b56:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1b5a:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <_ZL22staccato_rest_duration>
    1b5e:	17 c1       	rjmp	.+558    	; 0x1d8e <_ZL8nextNotev+0x28e>
    1b60:	86 36       	cpi	r24, 0x66	; 102
    1b62:	d4 f5       	brge	.+116    	; 0x1bd8 <_ZL8nextNotev+0xd8>
    1b64:	81 36       	cpi	r24, 0x61	; 97
    1b66:	09 f4       	brne	.+2      	; 0x1b6a <_ZL8nextNotev+0x6a>
    1b68:	a9 c0       	rjmp	.+338    	; 0x1cbc <_ZL8nextNotev+0x1bc>
    1b6a:	7c f5       	brge	.+94     	; 0x1bca <_ZL8nextNotev+0xca>
    1b6c:	8c 33       	cpi	r24, 0x3C	; 60
    1b6e:	09 f4       	brne	.+2      	; 0x1b72 <_ZL8nextNotev+0x72>
    1b70:	60 c0       	rjmp	.+192    	; 0x1c32 <_ZL8nextNotev+0x132>
    1b72:	8e 33       	cpi	r24, 0x3E	; 62
    1b74:	81 f4       	brne	.+32     	; 0x1b96 <_ZL8nextNotev+0x96>
    1b76:	93 94       	inc	r9
    1b78:	0e 94 14 0c 	call	0x1828	; 0x1828 <_ZL16currentCharacterv>
    1b7c:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <__data_end>
    1b80:	30 91 89 01 	lds	r19, 0x0189	; 0x800189 <__data_end+0x1>
    1b84:	2f 5f       	subi	r18, 0xFF	; 255
    1b86:	3f 4f       	sbci	r19, 0xFF	; 255
    1b88:	30 93 89 01 	sts	0x0189, r19	; 0x800189 <__data_end+0x1>
    1b8c:	20 93 88 01 	sts	0x0188, r18	; 0x800188 <__data_end>
    1b90:	85 36       	cpi	r24, 0x65	; 101
    1b92:	31 f7       	brne	.-52     	; 0x1b60 <_ZL8nextNotev+0x60>
    1b94:	52 c0       	rjmp	.+164    	; 0x1c3a <_ZL8nextNotev+0x13a>
    1b96:	81 32       	cpi	r24, 0x21	; 33
    1b98:	09 f0       	breq	.+2      	; 0x1b9c <_ZL8nextNotev+0x9c>
    1b9a:	8b c0       	rjmp	.+278    	; 0x1cb2 <_ZL8nextNotev+0x1b2>
    1b9c:	80 92 0a 01 	sts	0x010A, r8	; 0x80010a <_ZL6octave>
    1ba0:	d0 92 09 01 	sts	0x0109, r13	; 0x800109 <_ZL19whole_note_duration+0x1>
    1ba4:	c0 92 08 01 	sts	0x0108, r12	; 0x800108 <_ZL19whole_note_duration>
    1ba8:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <_ZL9note_type+0x1>
    1bac:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <_ZL9note_type>
    1bb0:	10 93 05 01 	sts	0x0105, r17	; 0x800105 <_ZL8duration+0x1>
    1bb4:	00 93 04 01 	sts	0x0104, r16	; 0x800104 <_ZL8duration>
    1bb8:	50 92 03 01 	sts	0x0103, r5	; 0x800103 <_ZL6volume+0x1>
    1bbc:	40 92 02 01 	sts	0x0102, r4	; 0x800102 <_ZL6volume>
    1bc0:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <_ZL8staccato>
    1bc4:	a4 e0       	ldi	r26, 0x04	; 4
    1bc6:	9a 2e       	mov	r9, r26
    1bc8:	d7 cf       	rjmp	.-82     	; 0x1b78 <_ZL8nextNotev+0x78>
    1bca:	83 36       	cpi	r24, 0x63	; 99
    1bcc:	a1 f1       	breq	.+104    	; 0x1c36 <_ZL8nextNotev+0x136>
    1bce:	0c f4       	brge	.+2      	; 0x1bd2 <_ZL8nextNotev+0xd2>
    1bd0:	78 c0       	rjmp	.+240    	; 0x1cc2 <_ZL8nextNotev+0x1c2>
    1bd2:	10 e0       	ldi	r17, 0x00	; 0
    1bd4:	82 e0       	ldi	r24, 0x02	; 2
    1bd6:	77 c0       	rjmp	.+238    	; 0x1cc6 <_ZL8nextNotev+0x1c6>
    1bd8:	8d 36       	cpi	r24, 0x6D	; 109
    1bda:	c1 f1       	breq	.+112    	; 0x1c4c <_ZL8nextNotev+0x14c>
    1bdc:	94 f4       	brge	.+36     	; 0x1c02 <_ZL8nextNotev+0x102>
    1bde:	87 36       	cpi	r24, 0x67	; 103
    1be0:	91 f1       	breq	.+100    	; 0x1c46 <_ZL8nextNotev+0x146>
    1be2:	74 f1       	brlt	.+92     	; 0x1c40 <_ZL8nextNotev+0x140>
    1be4:	8c 36       	cpi	r24, 0x6C	; 108
    1be6:	09 f0       	breq	.+2      	; 0x1bea <_ZL8nextNotev+0xea>
    1be8:	64 c0       	rjmp	.+200    	; 0x1cb2 <_ZL8nextNotev+0x1b2>
    1bea:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZL9getNumberv>
    1bee:	bc 01       	movw	r22, r24
    1bf0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL9note_type+0x1>
    1bf4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL9note_type>
    1bf8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    1bfc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    1c00:	51 c0       	rjmp	.+162    	; 0x1ca4 <_ZL8nextNotev+0x1a4>
    1c02:	82 37       	cpi	r24, 0x72	; 114
    1c04:	c9 f1       	breq	.+114    	; 0x1c78 <_ZL8nextNotev+0x178>
    1c06:	4c f4       	brge	.+18     	; 0x1c1a <_ZL8nextNotev+0x11a>
    1c08:	8f 36       	cpi	r24, 0x6F	; 111
    1c0a:	09 f0       	breq	.+2      	; 0x1c0e <_ZL8nextNotev+0x10e>
    1c0c:	52 c0       	rjmp	.+164    	; 0x1cb2 <_ZL8nextNotev+0x1b2>
    1c0e:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZL9getNumberv>
    1c12:	98 2e       	mov	r9, r24
    1c14:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZL6octave>
    1c18:	af cf       	rjmp	.-162    	; 0x1b78 <_ZL8nextNotev+0x78>
    1c1a:	84 37       	cpi	r24, 0x74	; 116
    1c1c:	81 f1       	breq	.+96     	; 0x1c7e <_ZL8nextNotev+0x17e>
    1c1e:	86 37       	cpi	r24, 0x76	; 118
    1c20:	09 f0       	breq	.+2      	; 0x1c24 <_ZL8nextNotev+0x124>
    1c22:	47 c0       	rjmp	.+142    	; 0x1cb2 <_ZL8nextNotev+0x1b2>
    1c24:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZL9getNumberv>
    1c28:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_ZL6volume+0x1>
    1c2c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_ZL6volume>
    1c30:	a3 cf       	rjmp	.-186    	; 0x1b78 <_ZL8nextNotev+0x78>
    1c32:	9a 94       	dec	r9
    1c34:	a1 cf       	rjmp	.-190    	; 0x1b78 <_ZL8nextNotev+0x78>
    1c36:	10 e0       	ldi	r17, 0x00	; 0
    1c38:	20 c0       	rjmp	.+64     	; 0x1c7a <_ZL8nextNotev+0x17a>
    1c3a:	10 e0       	ldi	r17, 0x00	; 0
    1c3c:	84 e0       	ldi	r24, 0x04	; 4
    1c3e:	43 c0       	rjmp	.+134    	; 0x1cc6 <_ZL8nextNotev+0x1c6>
    1c40:	10 e0       	ldi	r17, 0x00	; 0
    1c42:	85 e0       	ldi	r24, 0x05	; 5
    1c44:	40 c0       	rjmp	.+128    	; 0x1cc6 <_ZL8nextNotev+0x1c6>
    1c46:	10 e0       	ldi	r17, 0x00	; 0
    1c48:	87 e0       	ldi	r24, 0x07	; 7
    1c4a:	3d c0       	rjmp	.+122    	; 0x1cc6 <_ZL8nextNotev+0x1c6>
    1c4c:	0e 94 14 0c 	call	0x1828	; 0x1828 <_ZL16currentCharacterv>
    1c50:	8c 36       	cpi	r24, 0x6C	; 108
    1c52:	19 f4       	brne	.+6      	; 0x1c5a <_ZL8nextNotev+0x15a>
    1c54:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <_ZL8staccato>
    1c58:	04 c0       	rjmp	.+8      	; 0x1c62 <_ZL8nextNotev+0x162>
    1c5a:	70 92 8c 01 	sts	0x018C, r7	; 0x80018c <_ZL8staccato>
    1c5e:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <_ZL22staccato_rest_duration>
    1c62:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <__data_end>
    1c66:	30 91 89 01 	lds	r19, 0x0189	; 0x800189 <__data_end+0x1>
    1c6a:	2f 5f       	subi	r18, 0xFF	; 255
    1c6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c6e:	30 93 89 01 	sts	0x0189, r19	; 0x800189 <__data_end+0x1>
    1c72:	20 93 88 01 	sts	0x0188, r18	; 0x800188 <__data_end>
    1c76:	80 cf       	rjmp	.-256    	; 0x1b78 <_ZL8nextNotev+0x78>
    1c78:	11 e0       	ldi	r17, 0x01	; 1
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	24 c0       	rjmp	.+72     	; 0x1cc6 <_ZL8nextNotev+0x1c6>
    1c7e:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZL9getNumberv>
    1c82:	bc 01       	movw	r22, r24
    1c84:	c5 01       	movw	r24, r10
    1c86:	0e 94 98 18 	call	0x3130	; 0x3130 <__udivmodhi4>
    1c8a:	66 9e       	mul	r6, r22
    1c8c:	c0 01       	movw	r24, r0
    1c8e:	67 9e       	mul	r6, r23
    1c90:	90 0d       	add	r25, r0
    1c92:	11 24       	eor	r1, r1
    1c94:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZL19whole_note_duration+0x1>
    1c98:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL19whole_note_duration>
    1c9c:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <_ZL9note_type>
    1ca0:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <_ZL9note_type+0x1>
    1ca4:	0e 94 98 18 	call	0x3130	; 0x3130 <__udivmodhi4>
    1ca8:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_ZL8duration+0x1>
    1cac:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_ZL8duration>
    1cb0:	63 cf       	rjmp	.-314    	; 0x1b78 <_ZL8nextNotev+0x78>
    1cb2:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <__data_end+0x1>
    1cb6:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <__data_end>
    1cba:	69 c0       	rjmp	.+210    	; 0x1d8e <_ZL8nextNotev+0x28e>
    1cbc:	10 e0       	ldi	r17, 0x00	; 0
    1cbe:	89 e0       	ldi	r24, 0x09	; 9
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <_ZL8nextNotev+0x1c6>
    1cc2:	10 e0       	ldi	r17, 0x00	; 0
    1cc4:	8b e0       	ldi	r24, 0x0B	; 11
    1cc6:	08 2f       	mov	r16, r24
    1cc8:	9c e0       	ldi	r25, 0x0C	; 12
    1cca:	99 9e       	mul	r9, r25
    1ccc:	00 0d       	add	r16, r0
    1cce:	11 24       	eor	r1, r1
    1cd0:	0e 94 14 0c 	call	0x1828	; 0x1828 <_ZL16currentCharacterv>
    1cd4:	98 2f       	mov	r25, r24
    1cd6:	97 7f       	andi	r25, 0xF7	; 247
    1cd8:	93 32       	cpi	r25, 0x23	; 35
    1cda:	61 f4       	brne	.+24     	; 0x1cf4 <_ZL8nextNotev+0x1f4>
    1cdc:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <__data_end>
    1ce0:	30 91 89 01 	lds	r19, 0x0189	; 0x800189 <__data_end+0x1>
    1ce4:	2f 5f       	subi	r18, 0xFF	; 255
    1ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce8:	30 93 89 01 	sts	0x0189, r19	; 0x800189 <__data_end+0x1>
    1cec:	20 93 88 01 	sts	0x0188, r18	; 0x800188 <__data_end>
    1cf0:	0f 5f       	subi	r16, 0xFF	; 255
    1cf2:	ee cf       	rjmp	.-36     	; 0x1cd0 <_ZL8nextNotev+0x1d0>
    1cf4:	8d 32       	cpi	r24, 0x2D	; 45
    1cf6:	71 f4       	brne	.+28     	; 0x1d14 <_ZL8nextNotev+0x214>
    1cf8:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <__data_end>
    1cfc:	30 91 89 01 	lds	r19, 0x0189	; 0x800189 <__data_end+0x1>
    1d00:	2f 5f       	subi	r18, 0xFF	; 255
    1d02:	3f 4f       	sbci	r19, 0xFF	; 255
    1d04:	30 93 89 01 	sts	0x0189, r19	; 0x800189 <__data_end+0x1>
    1d08:	20 93 88 01 	sts	0x0188, r18	; 0x800188 <__data_end>
    1d0c:	01 50       	subi	r16, 0x01	; 1
    1d0e:	0e 94 14 0c 	call	0x1828	; 0x1828 <_ZL16currentCharacterv>
    1d12:	f0 cf       	rjmp	.-32     	; 0x1cf4 <_ZL8nextNotev+0x1f4>
    1d14:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_ZL8duration>
    1d18:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_ZL8duration+0x1>
    1d1c:	81 53       	subi	r24, 0x31	; 49
    1d1e:	88 30       	cpi	r24, 0x08	; 8
    1d20:	50 f4       	brcc	.+20     	; 0x1d36 <_ZL8nextNotev+0x236>
    1d22:	e0 90 08 01 	lds	r14, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    1d26:	f0 90 09 01 	lds	r15, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    1d2a:	0e 94 31 0c 	call	0x1862	; 0x1862 <_ZL9getNumberv>
    1d2e:	bc 01       	movw	r22, r24
    1d30:	c7 01       	movw	r24, r14
    1d32:	0e 94 98 18 	call	0x3130	; 0x3130 <__udivmodhi4>
    1d36:	7b 01       	movw	r14, r22
    1d38:	f6 94       	lsr	r15
    1d3a:	e7 94       	ror	r14
    1d3c:	69 83       	std	Y+1, r22	; 0x01
    1d3e:	7a 83       	std	Y+2, r23	; 0x02
    1d40:	0e 94 14 0c 	call	0x1828	; 0x1828 <_ZL16currentCharacterv>
    1d44:	69 81       	ldd	r22, Y+1	; 0x01
    1d46:	7a 81       	ldd	r23, Y+2	; 0x02
    1d48:	8e 32       	cpi	r24, 0x2E	; 46
    1d4a:	69 f4       	brne	.+26     	; 0x1d66 <_ZL8nextNotev+0x266>
    1d4c:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <__data_end>
    1d50:	30 91 89 01 	lds	r19, 0x0189	; 0x800189 <__data_end+0x1>
    1d54:	2f 5f       	subi	r18, 0xFF	; 255
    1d56:	3f 4f       	sbci	r19, 0xFF	; 255
    1d58:	30 93 89 01 	sts	0x0189, r19	; 0x800189 <__data_end+0x1>
    1d5c:	20 93 88 01 	sts	0x0188, r18	; 0x800188 <__data_end>
    1d60:	6e 0d       	add	r22, r14
    1d62:	7f 1d       	adc	r23, r15
    1d64:	e9 cf       	rjmp	.-46     	; 0x1d38 <_ZL8nextNotev+0x238>
    1d66:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <_ZL8staccato>
    1d6a:	88 23       	and	r24, r24
    1d6c:	39 f0       	breq	.+14     	; 0x1d7c <_ZL8nextNotev+0x27c>
    1d6e:	9b 01       	movw	r18, r22
    1d70:	36 95       	lsr	r19
    1d72:	27 95       	ror	r18
    1d74:	20 93 8b 01 	sts	0x018B, r18	; 0x80018b <_ZL22staccato_rest_duration>
    1d78:	62 1b       	sub	r22, r18
    1d7a:	71 09       	sbc	r23, r1
    1d7c:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <_ZL6volume>
    1d80:	11 23       	and	r17, r17
    1d82:	11 f0       	breq	.+4      	; 0x1d88 <_ZL8nextNotev+0x288>
    1d84:	8f ef       	ldi	r24, 0xFF	; 255
    1d86:	01 c0       	rjmp	.+2      	; 0x1d8a <_ZL8nextNotev+0x28a>
    1d88:	80 2f       	mov	r24, r16
    1d8a:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_ZN15OrangutanBuzzer8playNoteEhjh>
    1d8e:	22 96       	adiw	r28, 0x02	; 2
    1d90:	e0 e1       	ldi	r30, 0x10	; 16
    1d92:	0c 94 33 19 	jmp	0x3266	; 0x3266 <__epilogue_restores__+0x4>

00001d96 <__vector_13>:
    1d96:	1f 92       	push	r1
    1d98:	0f 92       	push	r0
    1d9a:	0f b6       	in	r0, 0x3f	; 63
    1d9c:	0f 92       	push	r0
    1d9e:	11 24       	eor	r1, r1
    1da0:	2f 93       	push	r18
    1da2:	3f 93       	push	r19
    1da4:	4f 93       	push	r20
    1da6:	5f 93       	push	r21
    1da8:	6f 93       	push	r22
    1daa:	7f 93       	push	r23
    1dac:	8f 93       	push	r24
    1dae:	9f 93       	push	r25
    1db0:	af 93       	push	r26
    1db2:	bf 93       	push	r27
    1db4:	ef 93       	push	r30
    1db6:	ff 93       	push	r31
    1db8:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <_ZL13buzzerTimeout>
    1dbc:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <_ZL13buzzerTimeout+0x1>
    1dc0:	9c 01       	movw	r18, r24
    1dc2:	21 50       	subi	r18, 0x01	; 1
    1dc4:	31 09       	sbc	r19, r1
    1dc6:	30 93 90 01 	sts	0x0190, r19	; 0x800190 <_ZL13buzzerTimeout+0x1>
    1dca:	20 93 8f 01 	sts	0x018F, r18	; 0x80018f <_ZL13buzzerTimeout>
    1dce:	89 2b       	or	r24, r25
    1dd0:	11 f5       	brne	.+68     	; 0x1e16 <__vector_13+0x80>
    1dd2:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1dd6:	78 94       	sei
    1dd8:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1ddc:	88 7f       	andi	r24, 0xF8	; 248
    1dde:	81 60       	ori	r24, 0x01	; 1
    1de0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1de4:	80 e1       	ldi	r24, 0x10	; 16
    1de6:	97 e2       	ldi	r25, 0x27	; 39
    1de8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1dec:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1df0:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1df4:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <buzzerFinished>
    1dfe:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <__data_end>
    1e02:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <__data_end+0x1>
    1e06:	89 2b       	or	r24, r25
    1e08:	31 f0       	breq	.+12     	; 0x1e16 <__vector_13+0x80>
    1e0a:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <_ZL17play_mode_setting>
    1e0e:	81 11       	cpse	r24, r1
    1e10:	02 c0       	rjmp	.+4      	; 0x1e16 <__vector_13+0x80>
    1e12:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <_ZL8nextNotev>
    1e16:	ff 91       	pop	r31
    1e18:	ef 91       	pop	r30
    1e1a:	bf 91       	pop	r27
    1e1c:	af 91       	pop	r26
    1e1e:	9f 91       	pop	r25
    1e20:	8f 91       	pop	r24
    1e22:	7f 91       	pop	r23
    1e24:	6f 91       	pop	r22
    1e26:	5f 91       	pop	r21
    1e28:	4f 91       	pop	r20
    1e2a:	3f 91       	pop	r19
    1e2c:	2f 91       	pop	r18
    1e2e:	0f 90       	pop	r0
    1e30:	0f be       	out	0x3f, r0	; 63
    1e32:	0f 90       	pop	r0
    1e34:	1f 90       	pop	r1
    1e36:	18 95       	reti

00001e38 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    1e38:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1e3c:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <__data_end+0x1>
    1e40:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <__data_end>
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <_ZL17use_program_space>
    1e4a:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <_ZL22staccato_rest_duration>
    1e4e:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <_ZL8nextNotev>
    1e52:	08 95       	ret

00001e54 <play_from_program_space>:
    1e54:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    1e58:	08 95       	ret

00001e5a <delay_us.constprop.0>:
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	6f 93       	push	r22
    1e60:	64 e0       	ldi	r22, 0x04	; 4
    1e62:	6a 95       	dec	r22
    1e64:	f1 f7       	brne	.-4      	; 0x1e62 <delay_us.constprop.0+0x8>
    1e66:	6f 91       	pop	r22
    1e68:	01 97       	sbiw	r24, 0x01	; 1
    1e6a:	c9 f7       	brne	.-14     	; 0x1e5e <delay_us.constprop.0+0x4>
    1e6c:	08 95       	ret

00001e6e <_ZN12OrangutanLCD8busyWaitEv>:
    1e6e:	0f 93       	push	r16
    1e70:	1f 93       	push	r17
    1e72:	cf 93       	push	r28
    1e74:	df 93       	push	r29
    1e76:	1a b1       	in	r17, 0x0a	; 10
    1e78:	57 98       	cbi	0x0a, 7	; 10
    1e7a:	5a 98       	cbi	0x0b, 2	; 11
    1e7c:	28 9a       	sbi	0x05, 0	; 5
    1e7e:	c0 e0       	ldi	r28, 0x00	; 0
    1e80:	d0 e0       	ldi	r29, 0x00	; 0
    1e82:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <delay_us.constprop.0>
    1e86:	5c 9a       	sbi	0x0b, 4	; 11
    1e88:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <delay_us.constprop.0>
    1e8c:	09 b1       	in	r16, 0x09	; 9
    1e8e:	5c 98       	cbi	0x0b, 4	; 11
    1e90:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <delay_us.constprop.0>
    1e94:	5c 9a       	sbi	0x0b, 4	; 11
    1e96:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <delay_us.constprop.0>
    1e9a:	5c 98       	cbi	0x0b, 4	; 11
    1e9c:	24 96       	adiw	r28, 0x04	; 4
    1e9e:	07 ff       	sbrs	r16, 7
    1ea0:	10 c0       	rjmp	.+32     	; 0x1ec2 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    1ea2:	ae 01       	movw	r20, r28
    1ea4:	60 e0       	ldi	r22, 0x00	; 0
    1ea6:	70 e0       	ldi	r23, 0x00	; 0
    1ea8:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <lcdTimeout>
    1eac:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <lcdTimeout+0x1>
    1eb0:	a0 91 93 01 	lds	r26, 0x0193	; 0x800193 <lcdTimeout+0x2>
    1eb4:	b0 91 94 01 	lds	r27, 0x0194	; 0x800194 <lcdTimeout+0x3>
    1eb8:	48 17       	cp	r20, r24
    1eba:	59 07       	cpc	r21, r25
    1ebc:	6a 07       	cpc	r22, r26
    1ebe:	7b 07       	cpc	r23, r27
    1ec0:	00 f3       	brcs	.-64     	; 0x1e82 <_ZN12OrangutanLCD8busyWaitEv+0x14>
    1ec2:	1a b9       	out	0x0a, r17	; 10
    1ec4:	df 91       	pop	r29
    1ec6:	cf 91       	pop	r28
    1ec8:	1f 91       	pop	r17
    1eca:	0f 91       	pop	r16
    1ecc:	08 95       	ret

00001ece <_ZN12OrangutanLCD8sendDataEh>:
    1ece:	95 b1       	in	r25, 0x05	; 5
    1ed0:	28 2f       	mov	r18, r24
    1ed2:	21 70       	andi	r18, 0x01	; 1
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	22 0f       	add	r18, r18
    1ed8:	33 1f       	adc	r19, r19
    1eda:	48 2f       	mov	r20, r24
    1edc:	46 70       	andi	r20, 0x06	; 6
    1ede:	68 e0       	ldi	r22, 0x08	; 8
    1ee0:	46 9f       	mul	r20, r22
    1ee2:	a0 01       	movw	r20, r0
    1ee4:	11 24       	eor	r1, r1
    1ee6:	24 2b       	or	r18, r20
    1ee8:	9d 7c       	andi	r25, 0xCD	; 205
    1eea:	29 2b       	or	r18, r25
    1eec:	25 b9       	out	0x05, r18	; 5
    1eee:	9b b1       	in	r25, 0x0b	; 11
    1ef0:	88 70       	andi	r24, 0x08	; 8
    1ef2:	82 95       	swap	r24
    1ef4:	80 7f       	andi	r24, 0xF0	; 240
    1ef6:	9f 77       	andi	r25, 0x7F	; 127
    1ef8:	89 2b       	or	r24, r25
    1efa:	8b b9       	out	0x0b, r24	; 11
    1efc:	5c 9a       	sbi	0x0b, 4	; 11
    1efe:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <delay_us.constprop.0>
    1f02:	5c 98       	cbi	0x0b, 4	; 11
    1f04:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <delay_us.constprop.0>
    1f08:	08 95       	ret

00001f0a <_ZN12OrangutanLCD4sendEhhh>:
    1f0a:	a0 e0       	ldi	r26, 0x00	; 0
    1f0c:	b0 e0       	ldi	r27, 0x00	; 0
    1f0e:	eb e8       	ldi	r30, 0x8B	; 139
    1f10:	ff e0       	ldi	r31, 0x0F	; 15
    1f12:	0c 94 20 19 	jmp	0x3240	; 0x3240 <__prologue_saves__+0x16>
    1f16:	c8 2f       	mov	r28, r24
    1f18:	d6 2e       	mov	r13, r22
    1f1a:	e4 2e       	mov	r14, r20
    1f1c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <_ZZN12OrangutanLCD4initEvE11initialized>
    1f20:	81 11       	cpse	r24, r1
    1f22:	05 c0       	rjmp	.+10     	; 0x1f2e <_ZN12OrangutanLCD4sendEhhh+0x24>
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <_ZZN12OrangutanLCD4initEvE11initialized>
    1f2a:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <_ZN12OrangutanLCD5init2Ev>
    1f2e:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <_ZN12OrangutanLCD8busyWaitEv>
    1f32:	14 b1       	in	r17, 0x04	; 4
    1f34:	d5 b1       	in	r29, 0x05	; 5
    1f36:	fa b0       	in	r15, 0x0a	; 10
    1f38:	0b b1       	in	r16, 0x0b	; 11
    1f3a:	28 98       	cbi	0x05, 0	; 5
    1f3c:	dd 20       	and	r13, r13
    1f3e:	11 f0       	breq	.+4      	; 0x1f44 <_ZN12OrangutanLCD4sendEhhh+0x3a>
    1f40:	5a 9a       	sbi	0x0b, 2	; 11
    1f42:	01 c0       	rjmp	.+2      	; 0x1f46 <_ZN12OrangutanLCD4sendEhhh+0x3c>
    1f44:	5a 98       	cbi	0x0b, 2	; 11
    1f46:	94 b1       	in	r25, 0x04	; 4
    1f48:	92 63       	ori	r25, 0x32	; 50
    1f4a:	94 b9       	out	0x04, r25	; 4
    1f4c:	57 9a       	sbi	0x0a, 7	; 10
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	e8 16       	cp	r14, r24
    1f52:	29 f0       	breq	.+10     	; 0x1f5e <_ZN12OrangutanLCD4sendEhhh+0x54>
    1f54:	8c 2f       	mov	r24, r28
    1f56:	82 95       	swap	r24
    1f58:	8f 70       	andi	r24, 0x0F	; 15
    1f5a:	0e 94 67 0f 	call	0x1ece	; 0x1ece <_ZN12OrangutanLCD8sendDataEh>
    1f5e:	8c 2f       	mov	r24, r28
    1f60:	8f 70       	andi	r24, 0x0F	; 15
    1f62:	0e 94 67 0f 	call	0x1ece	; 0x1ece <_ZN12OrangutanLCD8sendDataEh>
    1f66:	fa b8       	out	0x0a, r15	; 10
    1f68:	0b b9       	out	0x0b, r16	; 11
    1f6a:	14 b9       	out	0x04, r17	; 4
    1f6c:	d5 b9       	out	0x05, r29	; 5
    1f6e:	cd b7       	in	r28, 0x3d	; 61
    1f70:	de b7       	in	r29, 0x3e	; 62
    1f72:	e7 e0       	ldi	r30, 0x07	; 7
    1f74:	0c 94 3c 19 	jmp	0x3278	; 0x3278 <__epilogue_restores__+0x16>

00001f78 <_ZN12OrangutanLCD8send_cmdEh>:
    1f78:	42 e0       	ldi	r20, 0x02	; 2
    1f7a:	60 e0       	ldi	r22, 0x00	; 0
    1f7c:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <_ZN12OrangutanLCD4sendEhhh>
    1f80:	08 95       	ret

00001f82 <_ZN12OrangutanLCD9send_dataEh>:
    1f82:	42 e0       	ldi	r20, 0x02	; 2
    1f84:	61 e0       	ldi	r22, 0x01	; 1
    1f86:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <_ZN12OrangutanLCD4sendEhhh>
    1f8a:	08 95       	ret

00001f8c <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    1f8c:	41 e0       	ldi	r20, 0x01	; 1
    1f8e:	60 e0       	ldi	r22, 0x00	; 0
    1f90:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <_ZN12OrangutanLCD4sendEhhh>
    1f94:	08 95       	ret

00001f96 <_ZN12OrangutanLCD5init2Ev>:
    1f96:	80 e1       	ldi	r24, 0x10	; 16
    1f98:	97 e2       	ldi	r25, 0x27	; 39
    1f9a:	a0 e0       	ldi	r26, 0x00	; 0
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <lcdTimeout>
    1fa2:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <lcdTimeout+0x1>
    1fa6:	a0 93 93 01 	sts	0x0193, r26	; 0x800193 <lcdTimeout+0x2>
    1faa:	b0 93 94 01 	sts	0x0194, r27	; 0x800194 <lcdTimeout+0x3>
    1fae:	52 9a       	sbi	0x0a, 2	; 10
    1fb0:	20 9a       	sbi	0x04, 0	; 4
    1fb2:	54 9a       	sbi	0x0a, 4	; 10
    1fb4:	8e e1       	ldi	r24, 0x1E	; 30
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	0e 94 e7 12 	call	0x25ce	; 0x25ce <delay_ms>
    1fbc:	83 e0       	ldi	r24, 0x03	; 3
    1fbe:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1fc2:	86 e0       	ldi	r24, 0x06	; 6
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	0e 94 e7 12 	call	0x25ce	; 0x25ce <delay_ms>
    1fca:	83 e0       	ldi	r24, 0x03	; 3
    1fcc:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1fd0:	82 e0       	ldi	r24, 0x02	; 2
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	0e 94 e7 12 	call	0x25ce	; 0x25ce <delay_ms>
    1fd8:	83 e0       	ldi	r24, 0x03	; 3
    1fda:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1fde:	82 e0       	ldi	r24, 0x02	; 2
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	0e 94 e7 12 	call	0x25ce	; 0x25ce <delay_ms>
    1fe6:	82 e0       	ldi	r24, 0x02	; 2
    1fe8:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1fec:	82 e0       	ldi	r24, 0x02	; 2
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	0e 94 e7 12 	call	0x25ce	; 0x25ce <delay_ms>
    1ff4:	88 e2       	ldi	r24, 0x28	; 40
    1ff6:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <_ZN12OrangutanLCD8send_cmdEh>
    1ffa:	88 e0       	ldi	r24, 0x08	; 8
    1ffc:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <_ZN12OrangutanLCD8send_cmdEh>
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <_ZN12OrangutanLCD8send_cmdEh>
    2006:	86 e0       	ldi	r24, 0x06	; 6
    2008:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <_ZN12OrangutanLCD8send_cmdEh>
    200c:	8c e0       	ldi	r24, 0x0C	; 12
    200e:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <_ZN12OrangutanLCD8send_cmdEh>
    2012:	08 95       	ret

00002014 <_ZN12OrangutanLCD5clearEv>:
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <_ZN12OrangutanLCD8send_cmdEh>
    201a:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <printf_chars>
    201e:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <printf_chars+0x1>
    2022:	89 2b       	or	r24, r25
    2024:	f9 f0       	breq	.+62     	; 0x2064 <_ZN12OrangutanLCD5clearEv+0x50>
    2026:	60 e0       	ldi	r22, 0x00	; 0
    2028:	a0 e2       	ldi	r26, 0x20	; 32
    202a:	26 2f       	mov	r18, r22
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <numLCDCols>
    2032:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <numLCDRows>
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	01 97       	sbiw	r24, 0x01	; 1
    203a:	78 9f       	mul	r23, r24
    203c:	a0 01       	movw	r20, r0
    203e:	79 9f       	mul	r23, r25
    2040:	50 0d       	add	r21, r0
    2042:	11 24       	eor	r1, r1
    2044:	24 17       	cp	r18, r20
    2046:	35 07       	cpc	r19, r21
    2048:	4c f4       	brge	.+18     	; 0x205c <_ZN12OrangutanLCD5clearEv+0x48>
    204a:	e0 91 97 01 	lds	r30, 0x0197	; 0x800197 <printf_chars>
    204e:	f0 91 98 01 	lds	r31, 0x0198	; 0x800198 <printf_chars+0x1>
    2052:	e2 0f       	add	r30, r18
    2054:	f3 1f       	adc	r31, r19
    2056:	a0 83       	st	Z, r26
    2058:	6f 5f       	subi	r22, 0xFF	; 255
    205a:	e7 cf       	rjmp	.-50     	; 0x202a <_ZN12OrangutanLCD5clearEv+0x16>
    205c:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <col>
    2060:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <row>
    2064:	08 95       	ret

00002066 <clear>:
    2066:	0e 94 0a 10 	call	0x2014	; 0x2014 <_ZN12OrangutanLCD5clearEv>
    206a:	08 95       	ret

0000206c <_ZN12OrangutanLCD5printEPKc>:
    206c:	cf 93       	push	r28
    206e:	df 93       	push	r29
    2070:	ec 01       	movw	r28, r24
    2072:	89 91       	ld	r24, Y+
    2074:	88 23       	and	r24, r24
    2076:	19 f0       	breq	.+6      	; 0x207e <_ZN12OrangutanLCD5printEPKc+0x12>
    2078:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <_ZN12OrangutanLCD9send_dataEh>
    207c:	fa cf       	rjmp	.-12     	; 0x2072 <_ZN12OrangutanLCD5printEPKc+0x6>
    207e:	df 91       	pop	r29
    2080:	cf 91       	pop	r28
    2082:	08 95       	ret

00002084 <print>:
    2084:	0e 94 36 10 	call	0x206c	; 0x206c <_ZN12OrangutanLCD5printEPKc>
    2088:	08 95       	ret

0000208a <_ZN12OrangutanLCD5printEm>:
    208a:	aa e0       	ldi	r26, 0x0A	; 10
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	eb e4       	ldi	r30, 0x4B	; 75
    2090:	f0 e1       	ldi	r31, 0x10	; 16
    2092:	0c 94 1f 19 	jmp	0x323e	; 0x323e <__prologue_saves__+0x14>
    2096:	1a e0       	ldi	r17, 0x0A	; 10
    2098:	5a e0       	ldi	r21, 0x0A	; 10
    209a:	c5 2e       	mov	r12, r21
    209c:	d1 2c       	mov	r13, r1
    209e:	e1 2c       	mov	r14, r1
    20a0:	f1 2c       	mov	r15, r1
    20a2:	06 2f       	mov	r16, r22
    20a4:	a7 01       	movw	r20, r14
    20a6:	96 01       	movw	r18, r12
    20a8:	0e 94 ac 18 	call	0x3158	; 0x3158 <__udivmodsi4>
    20ac:	ca 01       	movw	r24, r20
    20ae:	b9 01       	movw	r22, r18
    20b0:	11 50       	subi	r17, 0x01	; 1
    20b2:	e1 e0       	ldi	r30, 0x01	; 1
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	ec 0f       	add	r30, r28
    20b8:	fd 1f       	adc	r31, r29
    20ba:	e1 0f       	add	r30, r17
    20bc:	f1 1d       	adc	r31, r1
    20be:	00 5d       	subi	r16, 0xD0	; 208
    20c0:	2a e0       	ldi	r18, 0x0A	; 10
    20c2:	62 9f       	mul	r22, r18
    20c4:	00 19       	sub	r16, r0
    20c6:	11 24       	eor	r1, r1
    20c8:	00 83       	st	Z, r16
    20ca:	61 15       	cp	r22, r1
    20cc:	71 05       	cpc	r23, r1
    20ce:	81 05       	cpc	r24, r1
    20d0:	91 05       	cpc	r25, r1
    20d2:	39 f7       	brne	.-50     	; 0x20a2 <_ZN12OrangutanLCD5printEm+0x18>
    20d4:	1a 30       	cpi	r17, 0x0A	; 10
    20d6:	58 f4       	brcc	.+22     	; 0x20ee <_ZN12OrangutanLCD5printEm+0x64>
    20d8:	e1 e0       	ldi	r30, 0x01	; 1
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	ec 0f       	add	r30, r28
    20de:	fd 1f       	adc	r31, r29
    20e0:	e1 0f       	add	r30, r17
    20e2:	f1 1d       	adc	r31, r1
    20e4:	80 81       	ld	r24, Z
    20e6:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <_ZN12OrangutanLCD9send_dataEh>
    20ea:	1f 5f       	subi	r17, 0xFF	; 255
    20ec:	f3 cf       	rjmp	.-26     	; 0x20d4 <_ZN12OrangutanLCD5printEm+0x4a>
    20ee:	2a 96       	adiw	r28, 0x0a	; 10
    20f0:	e8 e0       	ldi	r30, 0x08	; 8
    20f2:	0c 94 3b 19 	jmp	0x3276	; 0x3276 <__epilogue_restores__+0x14>

000020f6 <_ZN12OrangutanLCD5printEl>:
    20f6:	cf 92       	push	r12
    20f8:	df 92       	push	r13
    20fa:	ef 92       	push	r14
    20fc:	ff 92       	push	r15
    20fe:	6b 01       	movw	r12, r22
    2100:	7c 01       	movw	r14, r24
    2102:	97 ff       	sbrs	r25, 7
    2104:	0b c0       	rjmp	.+22     	; 0x211c <_ZN12OrangutanLCD5printEl+0x26>
    2106:	f0 94       	com	r15
    2108:	e0 94       	com	r14
    210a:	d0 94       	com	r13
    210c:	c0 94       	com	r12
    210e:	c1 1c       	adc	r12, r1
    2110:	d1 1c       	adc	r13, r1
    2112:	e1 1c       	adc	r14, r1
    2114:	f1 1c       	adc	r15, r1
    2116:	8d e2       	ldi	r24, 0x2D	; 45
    2118:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <_ZN12OrangutanLCD9send_dataEh>
    211c:	c7 01       	movw	r24, r14
    211e:	b6 01       	movw	r22, r12
    2120:	0e 94 45 10 	call	0x208a	; 0x208a <_ZN12OrangutanLCD5printEm>
    2124:	ff 90       	pop	r15
    2126:	ef 90       	pop	r14
    2128:	df 90       	pop	r13
    212a:	cf 90       	pop	r12
    212c:	08 95       	ret

0000212e <print_long>:
    212e:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <_ZN12OrangutanLCD5printEl>
    2132:	08 95       	ret

00002134 <_ZN12OrangutanLCD6gotoXYEhh>:
    2134:	a5 e0       	ldi	r26, 0x05	; 5
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	e0 ea       	ldi	r30, 0xA0	; 160
    213a:	f0 e1       	ldi	r31, 0x10	; 16
    213c:	0c 94 24 19 	jmp	0x3248	; 0x3248 <__prologue_saves__+0x1e>
    2140:	18 2f       	mov	r17, r24
    2142:	80 e8       	ldi	r24, 0x80	; 128
    2144:	89 83       	std	Y+1, r24	; 0x01
    2146:	80 ec       	ldi	r24, 0xC0	; 192
    2148:	8a 83       	std	Y+2, r24	; 0x02
    214a:	84 e9       	ldi	r24, 0x94	; 148
    214c:	8b 83       	std	Y+3, r24	; 0x03
    214e:	84 ed       	ldi	r24, 0xD4	; 212
    2150:	8c 83       	std	Y+4, r24	; 0x04
    2152:	fe 01       	movw	r30, r28
    2154:	e6 0f       	add	r30, r22
    2156:	f1 1d       	adc	r31, r1
    2158:	81 81       	ldd	r24, Z+1	; 0x01
    215a:	81 0f       	add	r24, r17
    215c:	6d 83       	std	Y+5, r22	; 0x05
    215e:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <_ZN12OrangutanLCD8send_cmdEh>
    2162:	10 93 95 01 	sts	0x0195, r17	; 0x800195 <col>
    2166:	6d 81       	ldd	r22, Y+5	; 0x05
    2168:	60 93 96 01 	sts	0x0196, r22	; 0x800196 <row>
    216c:	25 96       	adiw	r28, 0x05	; 5
    216e:	e3 e0       	ldi	r30, 0x03	; 3
    2170:	0c 94 40 19 	jmp	0x3280	; 0x3280 <__epilogue_restores__+0x1e>

00002174 <lcd_goto_xy>:
    2174:	0e 94 9a 10 	call	0x2134	; 0x2134 <_ZN12OrangutanLCD6gotoXYEhh>
    2178:	08 95       	ret

0000217a <_ZN16OrangutanDigital9setOutputEhh>:
    217a:	88 30       	cpi	r24, 0x08	; 8
    217c:	58 f4       	brcc	.+22     	; 0x2194 <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    217e:	91 e0       	ldi	r25, 0x01	; 1
    2180:	01 c0       	rjmp	.+2      	; 0x2184 <_ZN16OrangutanDigital9setOutputEhh+0xa>
    2182:	99 0f       	add	r25, r25
    2184:	8a 95       	dec	r24
    2186:	ea f7       	brpl	.-6      	; 0x2182 <_ZN16OrangutanDigital9setOutputEhh+0x8>
    2188:	89 2f       	mov	r24, r25
    218a:	aa e2       	ldi	r26, 0x2A	; 42
    218c:	b0 e0       	ldi	r27, 0x00	; 0
    218e:	eb e2       	ldi	r30, 0x2B	; 43
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	21 c0       	rjmp	.+66     	; 0x21d6 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    2194:	8e 30       	cpi	r24, 0x0E	; 14
    2196:	60 f4       	brcc	.+24     	; 0x21b0 <_ZN16OrangutanDigital9setOutputEhh+0x36>
    2198:	98 ef       	ldi	r25, 0xF8	; 248
    219a:	98 0f       	add	r25, r24
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	01 c0       	rjmp	.+2      	; 0x21a2 <_ZN16OrangutanDigital9setOutputEhh+0x28>
    21a0:	88 0f       	add	r24, r24
    21a2:	9a 95       	dec	r25
    21a4:	ea f7       	brpl	.-6      	; 0x21a0 <_ZN16OrangutanDigital9setOutputEhh+0x26>
    21a6:	a4 e2       	ldi	r26, 0x24	; 36
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	e5 e2       	ldi	r30, 0x25	; 37
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	13 c0       	rjmp	.+38     	; 0x21d6 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    21b0:	85 31       	cpi	r24, 0x15	; 21
    21b2:	60 f4       	brcc	.+24     	; 0x21cc <_ZN16OrangutanDigital9setOutputEhh+0x52>
    21b4:	92 ef       	ldi	r25, 0xF2	; 242
    21b6:	98 0f       	add	r25, r24
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	01 c0       	rjmp	.+2      	; 0x21be <_ZN16OrangutanDigital9setOutputEhh+0x44>
    21bc:	88 0f       	add	r24, r24
    21be:	9a 95       	dec	r25
    21c0:	ea f7       	brpl	.-6      	; 0x21bc <_ZN16OrangutanDigital9setOutputEhh+0x42>
    21c2:	a7 e2       	ldi	r26, 0x27	; 39
    21c4:	b0 e0       	ldi	r27, 0x00	; 0
    21c6:	e8 e2       	ldi	r30, 0x28	; 40
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	05 c0       	rjmp	.+10     	; 0x21d6 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	a0 e0       	ldi	r26, 0x00	; 0
    21d0:	b0 e0       	ldi	r27, 0x00	; 0
    21d2:	e0 e0       	ldi	r30, 0x00	; 0
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	6f 3f       	cpi	r22, 0xFF	; 255
    21d8:	19 f4       	brne	.+6      	; 0x21e0 <_ZN16OrangutanDigital9setOutputEhh+0x66>
    21da:	90 81       	ld	r25, Z
    21dc:	98 27       	eor	r25, r24
    21de:	09 c0       	rjmp	.+18     	; 0x21f2 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    21e0:	66 23       	and	r22, r22
    21e2:	19 f0       	breq	.+6      	; 0x21ea <_ZN16OrangutanDigital9setOutputEhh+0x70>
    21e4:	90 81       	ld	r25, Z
    21e6:	98 2b       	or	r25, r24
    21e8:	04 c0       	rjmp	.+8      	; 0x21f2 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    21ea:	20 81       	ld	r18, Z
    21ec:	98 2f       	mov	r25, r24
    21ee:	90 95       	com	r25
    21f0:	92 23       	and	r25, r18
    21f2:	90 83       	st	Z, r25
    21f4:	9c 91       	ld	r25, X
    21f6:	98 2b       	or	r25, r24
    21f8:	9c 93       	st	X, r25
    21fa:	08 95       	ret

000021fc <_ZN15OrangutanMotors5init2Ev>:
    21fc:	83 ef       	ldi	r24, 0xF3	; 243
    21fe:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2202:	84 bd       	out	0x24, r24	; 36
    2204:	82 e0       	ldi	r24, 0x02	; 2
    2206:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    220a:	85 bd       	out	0x25, r24	; 37
    220c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    2210:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    2214:	18 bc       	out	0x28, r1	; 40
    2216:	17 bc       	out	0x27, r1	; 39
    2218:	60 e0       	ldi	r22, 0x00	; 0
    221a:	86 e0       	ldi	r24, 0x06	; 6
    221c:	0e 94 bd 10 	call	0x217a	; 0x217a <_ZN16OrangutanDigital9setOutputEhh>
    2220:	60 e0       	ldi	r22, 0x00	; 0
    2222:	85 e0       	ldi	r24, 0x05	; 5
    2224:	0e 94 bd 10 	call	0x217a	; 0x217a <_ZN16OrangutanDigital9setOutputEhh>
    2228:	60 e0       	ldi	r22, 0x00	; 0
    222a:	8b e0       	ldi	r24, 0x0B	; 11
    222c:	0e 94 bd 10 	call	0x217a	; 0x217a <_ZN16OrangutanDigital9setOutputEhh>
    2230:	60 e0       	ldi	r22, 0x00	; 0
    2232:	83 e0       	ldi	r24, 0x03	; 3
    2234:	0e 94 bd 10 	call	0x217a	; 0x217a <_ZN16OrangutanDigital9setOutputEhh>
    2238:	08 95       	ret

0000223a <_ZN15OrangutanMotors4initEv>:
    223a:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <_ZZN15OrangutanMotors4initEvE11initialized>
    223e:	81 11       	cpse	r24, r1
    2240:	05 c0       	rjmp	.+10     	; 0x224c <_ZN15OrangutanMotors4initEv+0x12>
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <_ZZN15OrangutanMotors4initEvE11initialized>
    2248:	0e 94 fe 10 	call	0x21fc	; 0x21fc <_ZN15OrangutanMotors5init2Ev>
    224c:	08 95       	ret

0000224e <_ZN15OrangutanMotors10setM1SpeedEi>:
    224e:	cf 93       	push	r28
    2250:	df 93       	push	r29
    2252:	ec 01       	movw	r28, r24
    2254:	0e 94 1d 11 	call	0x223a	; 0x223a <_ZN15OrangutanMotors4initEv>
    2258:	d7 ff       	sbrs	r29, 7
    225a:	05 c0       	rjmp	.+10     	; 0x2266 <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    225c:	d1 95       	neg	r29
    225e:	c1 95       	neg	r28
    2260:	d1 09       	sbc	r29, r1
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	01 c0       	rjmp	.+2      	; 0x2268 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	cf 3f       	cpi	r28, 0xFF	; 255
    226a:	d1 05       	cpc	r29, r1
    226c:	19 f0       	breq	.+6      	; 0x2274 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    226e:	14 f0       	brlt	.+4      	; 0x2274 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    2270:	cf ef       	ldi	r28, 0xFF	; 255
    2272:	d0 e0       	ldi	r29, 0x00	; 0
    2274:	88 23       	and	r24, r24
    2276:	19 f0       	breq	.+6      	; 0x227e <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    2278:	18 bc       	out	0x28, r1	; 40
    227a:	c7 bd       	out	0x27, r28	; 39
    227c:	02 c0       	rjmp	.+4      	; 0x2282 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    227e:	c8 bd       	out	0x28, r28	; 40
    2280:	17 bc       	out	0x27, r1	; 39
    2282:	df 91       	pop	r29
    2284:	cf 91       	pop	r28
    2286:	08 95       	ret

00002288 <_ZN15OrangutanMotors10setM2SpeedEi>:
    2288:	cf 93       	push	r28
    228a:	df 93       	push	r29
    228c:	ec 01       	movw	r28, r24
    228e:	0e 94 1d 11 	call	0x223a	; 0x223a <_ZN15OrangutanMotors4initEv>
    2292:	d7 ff       	sbrs	r29, 7
    2294:	05 c0       	rjmp	.+10     	; 0x22a0 <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    2296:	d1 95       	neg	r29
    2298:	c1 95       	neg	r28
    229a:	d1 09       	sbc	r29, r1
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	01 c0       	rjmp	.+2      	; 0x22a2 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	cf 3f       	cpi	r28, 0xFF	; 255
    22a4:	d1 05       	cpc	r29, r1
    22a6:	19 f0       	breq	.+6      	; 0x22ae <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    22a8:	14 f0       	brlt	.+4      	; 0x22ae <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    22aa:	cf ef       	ldi	r28, 0xFF	; 255
    22ac:	d0 e0       	ldi	r29, 0x00	; 0
    22ae:	88 23       	and	r24, r24
    22b0:	29 f0       	breq	.+10     	; 0x22bc <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    22b2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    22b6:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    22ba:	04 c0       	rjmp	.+8      	; 0x22c4 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    22bc:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    22c0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    22c4:	df 91       	pop	r29
    22c6:	cf 91       	pop	r28
    22c8:	08 95       	ret

000022ca <_ZN15OrangutanMotors9setSpeedsEii>:
    22ca:	cf 93       	push	r28
    22cc:	df 93       	push	r29
    22ce:	eb 01       	movw	r28, r22
    22d0:	0e 94 27 11 	call	0x224e	; 0x224e <_ZN15OrangutanMotors10setM1SpeedEi>
    22d4:	ce 01       	movw	r24, r28
    22d6:	0e 94 44 11 	call	0x2288	; 0x2288 <_ZN15OrangutanMotors10setM2SpeedEi>
    22da:	df 91       	pop	r29
    22dc:	cf 91       	pop	r28
    22de:	08 95       	ret

000022e0 <set_motors>:
    22e0:	0e 94 65 11 	call	0x22ca	; 0x22ca <_ZN15OrangutanMotors9setSpeedsEii>
    22e4:	08 95       	ret

000022e6 <_ZN20OrangutanPushbuttons5init2Ev>:
    22e6:	84 b1       	in	r24, 0x04	; 4
    22e8:	8d 7c       	andi	r24, 0xCD	; 205
    22ea:	84 b9       	out	0x04, r24	; 4
    22ec:	85 b1       	in	r24, 0x05	; 5
    22ee:	82 63       	ori	r24, 0x32	; 50
    22f0:	85 b9       	out	0x05, r24	; 5
    22f2:	85 e0       	ldi	r24, 0x05	; 5
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	6f 93       	push	r22
    22f8:	64 e0       	ldi	r22, 0x04	; 4
    22fa:	6a 95       	dec	r22
    22fc:	f1 f7       	brne	.-4      	; 0x22fa <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    22fe:	6f 91       	pop	r22
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	c9 f7       	brne	.-14     	; 0x22f6 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    2304:	08 95       	ret

00002306 <_ZN20OrangutanPushbuttons4initEv>:
    2306:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    230a:	81 11       	cpse	r24, r1
    230c:	05 c0       	rjmp	.+10     	; 0x2318 <_ZN20OrangutanPushbuttons4initEv+0x12>
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    2314:	0e 94 73 11 	call	0x22e6	; 0x22e6 <_ZN20OrangutanPushbuttons5init2Ev>
    2318:	08 95       	ret

0000231a <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    231a:	cf 93       	push	r28
    231c:	c8 2f       	mov	r28, r24
    231e:	0e 94 83 11 	call	0x2306	; 0x2306 <_ZN20OrangutanPushbuttons4initEv>
    2322:	83 b1       	in	r24, 0x03	; 3
    2324:	8c 23       	and	r24, r28
    2326:	e9 f3       	breq	.-6      	; 0x2322 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    2328:	8a e0       	ldi	r24, 0x0A	; 10
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	0e 94 e7 12 	call	0x25ce	; 0x25ce <delay_ms>
    2330:	83 b1       	in	r24, 0x03	; 3
    2332:	8c 23       	and	r24, r28
    2334:	b1 f3       	breq	.-20     	; 0x2322 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    2336:	83 b1       	in	r24, 0x03	; 3
    2338:	8c 23       	and	r24, r28
    233a:	cf 91       	pop	r28
    233c:	08 95       	ret

0000233e <wait_for_button_release>:
    233e:	0e 94 8d 11 	call	0x231a	; 0x231a <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    2342:	08 95       	ret

00002344 <_ZN20OrangutanPushbuttons9isPressedEh>:
    2344:	a1 e0       	ldi	r26, 0x01	; 1
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	e8 ea       	ldi	r30, 0xA8	; 168
    234a:	f1 e1       	ldi	r31, 0x11	; 17
    234c:	0c 94 25 19 	jmp	0x324a	; 0x324a <__prologue_saves__+0x20>
    2350:	89 83       	std	Y+1, r24	; 0x01
    2352:	0e 94 83 11 	call	0x2306	; 0x2306 <_ZN20OrangutanPushbuttons4initEv>
    2356:	93 b1       	in	r25, 0x03	; 3
    2358:	90 95       	com	r25
    235a:	89 81       	ldd	r24, Y+1	; 0x01
    235c:	89 23       	and	r24, r25
    235e:	21 96       	adiw	r28, 0x01	; 1
    2360:	e2 e0       	ldi	r30, 0x02	; 2
    2362:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__epilogue_restores__+0x20>

00002366 <button_is_pressed>:
    2366:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN20OrangutanPushbuttons9isPressedEh>
    236a:	08 95       	ret

0000236c <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>:
    236c:	28 2f       	mov	r18, r24
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	9a e0       	ldi	r25, 0x0A	; 10
    2372:	89 9f       	mul	r24, r25
    2374:	f0 01       	movw	r30, r0
    2376:	11 24       	eor	r1, r1
    2378:	e7 56       	subi	r30, 0x67	; 103
    237a:	fe 4f       	sbci	r31, 0xFE	; 254
    237c:	80 85       	ldd	r24, Z+8	; 0x08
    237e:	91 85       	ldd	r25, Z+9	; 0x09
    2380:	00 97       	sbiw	r24, 0x00	; 0
    2382:	21 f0       	breq	.+8      	; 0x238c <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    2384:	52 81       	ldd	r21, Z+2	; 0x02
    2386:	44 81       	ldd	r20, Z+4	; 0x04
    2388:	54 17       	cp	r21, r20
    238a:	80 f0       	brcs	.+32     	; 0x23ac <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x40>
    238c:	8a e0       	ldi	r24, 0x0A	; 10
    238e:	82 9f       	mul	r24, r18
    2390:	f0 01       	movw	r30, r0
    2392:	83 9f       	mul	r24, r19
    2394:	f0 0d       	add	r31, r0
    2396:	11 24       	eor	r1, r1
    2398:	e7 56       	subi	r30, 0x67	; 103
    239a:	fe 4f       	sbci	r31, 0xFE	; 254
    239c:	92 81       	ldd	r25, Z+2	; 0x02
    239e:	84 81       	ldd	r24, Z+4	; 0x04
    23a0:	98 13       	cpse	r25, r24
    23a2:	0e c0       	rjmp	.+28     	; 0x23c0 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x54>
    23a4:	85 81       	ldd	r24, Z+5	; 0x05
    23a6:	81 11       	cpse	r24, r1
    23a8:	0a c0       	rjmp	.+20     	; 0x23be <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x52>
    23aa:	08 95       	ret
    23ac:	42 81       	ldd	r20, Z+2	; 0x02
    23ae:	dc 01       	movw	r26, r24
    23b0:	a4 0f       	add	r26, r20
    23b2:	b1 1d       	adc	r27, r1
    23b4:	6c 93       	st	X, r22
    23b6:	82 81       	ldd	r24, Z+2	; 0x02
    23b8:	8f 5f       	subi	r24, 0xFF	; 255
    23ba:	82 83       	std	Z+2, r24	; 0x02
    23bc:	e7 cf       	rjmp	.-50     	; 0x238c <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    23be:	12 82       	std	Z+2, r1	; 0x02
    23c0:	08 95       	ret

000023c2 <__vector_18>:
    23c2:	1f 92       	push	r1
    23c4:	0f 92       	push	r0
    23c6:	0f b6       	in	r0, 0x3f	; 63
    23c8:	0f 92       	push	r0
    23ca:	11 24       	eor	r1, r1
    23cc:	2f 93       	push	r18
    23ce:	3f 93       	push	r19
    23d0:	4f 93       	push	r20
    23d2:	5f 93       	push	r21
    23d4:	6f 93       	push	r22
    23d6:	7f 93       	push	r23
    23d8:	8f 93       	push	r24
    23da:	9f 93       	push	r25
    23dc:	af 93       	push	r26
    23de:	bf 93       	push	r27
    23e0:	ef 93       	push	r30
    23e2:	ff 93       	push	r31
    23e4:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    23e8:	80 e0       	ldi	r24, 0x00	; 0
    23ea:	0e 94 b6 11 	call	0x236c	; 0x236c <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>
    23ee:	ff 91       	pop	r31
    23f0:	ef 91       	pop	r30
    23f2:	bf 91       	pop	r27
    23f4:	af 91       	pop	r26
    23f6:	9f 91       	pop	r25
    23f8:	8f 91       	pop	r24
    23fa:	7f 91       	pop	r23
    23fc:	6f 91       	pop	r22
    23fe:	5f 91       	pop	r21
    2400:	4f 91       	pop	r20
    2402:	3f 91       	pop	r19
    2404:	2f 91       	pop	r18
    2406:	0f 90       	pop	r0
    2408:	0f be       	out	0x3f, r0	; 63
    240a:	0f 90       	pop	r0
    240c:	1f 90       	pop	r1
    240e:	18 95       	reti

00002410 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>:
    2410:	9a e0       	ldi	r25, 0x0A	; 10
    2412:	89 9f       	mul	r24, r25
    2414:	f0 01       	movw	r30, r0
    2416:	11 24       	eor	r1, r1
    2418:	e7 56       	subi	r30, 0x67	; 103
    241a:	fe 4f       	sbci	r31, 0xFE	; 254
    241c:	86 81       	ldd	r24, Z+6	; 0x06
    241e:	97 81       	ldd	r25, Z+7	; 0x07
    2420:	89 2b       	or	r24, r25
    2422:	59 f0       	breq	.+22     	; 0x243a <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    2424:	91 81       	ldd	r25, Z+1	; 0x01
    2426:	83 81       	ldd	r24, Z+3	; 0x03
    2428:	98 17       	cp	r25, r24
    242a:	38 f4       	brcc	.+14     	; 0x243a <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    242c:	80 81       	ld	r24, Z
    242e:	81 11       	cpse	r24, r1
    2430:	04 c0       	rjmp	.+8      	; 0x243a <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    2432:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2436:	80 62       	ori	r24, 0x20	; 32
    2438:	03 c0       	rjmp	.+6      	; 0x2440 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x30>
    243a:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    243e:	8f 7d       	andi	r24, 0xDF	; 223
    2440:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2444:	08 95       	ret

00002446 <_ZN15OrangutanSerial15initUART_inlineEh>:
    2446:	9a e0       	ldi	r25, 0x0A	; 10
    2448:	89 9f       	mul	r24, r25
    244a:	f0 01       	movw	r30, r0
    244c:	11 24       	eor	r1, r1
    244e:	e7 56       	subi	r30, 0x67	; 103
    2450:	fe 4f       	sbci	r31, 0xFE	; 254
    2452:	90 81       	ld	r25, Z
    2454:	91 11       	cpse	r25, r1
    2456:	02 c0       	rjmp	.+4      	; 0x245c <_ZN15OrangutanSerial15initUART_inlineEh+0x16>
    2458:	98 e9       	ldi	r25, 0x98	; 152
    245a:	01 c0       	rjmp	.+2      	; 0x245e <_ZN15OrangutanSerial15initUART_inlineEh+0x18>
    245c:	98 e1       	ldi	r25, 0x18	; 24
    245e:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2462:	0e 94 08 12 	call	0x2410	; 0x2410 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    2466:	78 94       	sei
    2468:	08 95       	ret

0000246a <serial_set_baud_rate>:
    246a:	cf 92       	push	r12
    246c:	df 92       	push	r13
    246e:	ef 92       	push	r14
    2470:	ff 92       	push	r15
    2472:	6b 01       	movw	r12, r22
    2474:	7c 01       	movw	r14, r24
    2476:	80 e0       	ldi	r24, 0x00	; 0
    2478:	0e 94 23 12 	call	0x2446	; 0x2446 <_ZN15OrangutanSerial15initUART_inlineEh>
    247c:	a8 ef       	ldi	r26, 0xF8	; 248
    247e:	bf ef       	ldi	r27, 0xFF	; 255
    2480:	a7 01       	movw	r20, r14
    2482:	96 01       	movw	r18, r12
    2484:	0e 94 10 19 	call	0x3220	; 0x3220 <__mulohisi3>
    2488:	73 5d       	subi	r23, 0xD3	; 211
    248a:	8e 4c       	sbci	r24, 0xCE	; 206
    248c:	9e 4f       	sbci	r25, 0xFE	; 254
    248e:	e4 e0       	ldi	r30, 0x04	; 4
    2490:	22 0f       	add	r18, r18
    2492:	33 1f       	adc	r19, r19
    2494:	44 1f       	adc	r20, r20
    2496:	55 1f       	adc	r21, r21
    2498:	ea 95       	dec	r30
    249a:	d1 f7       	brne	.-12     	; 0x2490 <serial_set_baud_rate+0x26>
    249c:	0e 94 ac 18 	call	0x3158	; 0x3158 <__udivmodsi4>
    24a0:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    24a4:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    24a8:	ff 90       	pop	r15
    24aa:	ef 90       	pop	r14
    24ac:	df 90       	pop	r13
    24ae:	cf 90       	pop	r12
    24b0:	08 95       	ret

000024b2 <_ZN15OrangutanSerial11uart_tx_isrEh>:
    24b2:	9a e0       	ldi	r25, 0x0A	; 10
    24b4:	89 9f       	mul	r24, r25
    24b6:	f0 01       	movw	r30, r0
    24b8:	11 24       	eor	r1, r1
    24ba:	e7 56       	subi	r30, 0x67	; 103
    24bc:	fe 4f       	sbci	r31, 0xFE	; 254
    24be:	26 81       	ldd	r18, Z+6	; 0x06
    24c0:	37 81       	ldd	r19, Z+7	; 0x07
    24c2:	21 15       	cp	r18, r1
    24c4:	31 05       	cpc	r19, r1
    24c6:	41 f0       	breq	.+16     	; 0x24d8 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    24c8:	41 81       	ldd	r20, Z+1	; 0x01
    24ca:	93 81       	ldd	r25, Z+3	; 0x03
    24cc:	49 17       	cp	r20, r25
    24ce:	20 f4       	brcc	.+8      	; 0x24d8 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    24d0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    24d4:	95 fd       	sbrc	r25, 5
    24d6:	03 c0       	rjmp	.+6      	; 0x24de <_ZN15OrangutanSerial11uart_tx_isrEh+0x2c>
    24d8:	0e 94 08 12 	call	0x2410	; 0x2410 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    24dc:	08 95       	ret
    24de:	91 81       	ldd	r25, Z+1	; 0x01
    24e0:	d9 01       	movw	r26, r18
    24e2:	a9 0f       	add	r26, r25
    24e4:	b1 1d       	adc	r27, r1
    24e6:	9c 91       	ld	r25, X
    24e8:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    24ec:	91 81       	ldd	r25, Z+1	; 0x01
    24ee:	9f 5f       	subi	r25, 0xFF	; 255
    24f0:	91 83       	std	Z+1, r25	; 0x01
    24f2:	f2 cf       	rjmp	.-28     	; 0x24d8 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>

000024f4 <__vector_19>:
    24f4:	1f 92       	push	r1
    24f6:	0f 92       	push	r0
    24f8:	0f b6       	in	r0, 0x3f	; 63
    24fa:	0f 92       	push	r0
    24fc:	11 24       	eor	r1, r1
    24fe:	2f 93       	push	r18
    2500:	3f 93       	push	r19
    2502:	4f 93       	push	r20
    2504:	5f 93       	push	r21
    2506:	6f 93       	push	r22
    2508:	7f 93       	push	r23
    250a:	8f 93       	push	r24
    250c:	9f 93       	push	r25
    250e:	af 93       	push	r26
    2510:	bf 93       	push	r27
    2512:	ef 93       	push	r30
    2514:	ff 93       	push	r31
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	0e 94 59 12 	call	0x24b2	; 0x24b2 <_ZN15OrangutanSerial11uart_tx_isrEh>
    251c:	ff 91       	pop	r31
    251e:	ef 91       	pop	r30
    2520:	bf 91       	pop	r27
    2522:	af 91       	pop	r26
    2524:	9f 91       	pop	r25
    2526:	8f 91       	pop	r24
    2528:	7f 91       	pop	r23
    252a:	6f 91       	pop	r22
    252c:	5f 91       	pop	r21
    252e:	4f 91       	pop	r20
    2530:	3f 91       	pop	r19
    2532:	2f 91       	pop	r18
    2534:	0f 90       	pop	r0
    2536:	0f be       	out	0x3f, r0	; 63
    2538:	0f 90       	pop	r0
    253a:	1f 90       	pop	r1
    253c:	18 95       	reti

0000253e <__vector_9>:
    253e:	2f 92       	push	r2
    2540:	8f 93       	push	r24
    2542:	9f 93       	push	r25
    2544:	2f b6       	in	r2, 0x3f	; 63
    2546:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <tickCount+0x1>
    254a:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <tickCount+0x2>
    254e:	01 96       	adiw	r24, 0x01	; 1
    2550:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <tickCount+0x1>
    2554:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <tickCount+0x2>
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <tickCount+0x3>
    255e:	89 1f       	adc	r24, r25
    2560:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <tickCount+0x3>
    2564:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <us_over_10+0x1>
    2568:	9c 5f       	subi	r25, 0xFC	; 252
    256a:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <us_over_10+0x1>
    256e:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <us_over_10>
    2572:	80 51       	subi	r24, 0x10	; 16
    2574:	97 42       	sbci	r25, 0x27	; 39
    2576:	c0 f0       	brcs	.+48     	; 0x25a8 <end>
    2578:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <us_over_10+0x1>
    257c:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <us_over_10>
    2580:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <msCounter>
    2584:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <msCounter+0x1>
    2588:	01 96       	adiw	r24, 0x01	; 1
    258a:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <msCounter>
    258e:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <msCounter+0x1>
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <msCounter+0x2>
    2598:	89 1f       	adc	r24, r25
    259a:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <msCounter+0x2>
    259e:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <msCounter+0x3>
    25a2:	89 1f       	adc	r24, r25
    25a4:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <msCounter+0x3>

000025a8 <end>:
    25a8:	2f be       	out	0x3f, r2	; 63
    25aa:	9f 91       	pop	r25
    25ac:	8f 91       	pop	r24
    25ae:	2f 90       	pop	r2
    25b0:	18 95       	reti

000025b2 <_ZN13OrangutanTime17delayMillisecondsEj>:
    25b2:	28 ee       	ldi	r18, 0xE8	; 232
    25b4:	33 e0       	ldi	r19, 0x03	; 3
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	48 f0       	brcs	.+18     	; 0x25cc <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    25ba:	f9 01       	movw	r30, r18
    25bc:	6f 93       	push	r22
    25be:	64 e0       	ldi	r22, 0x04	; 4
    25c0:	6a 95       	dec	r22
    25c2:	f1 f7       	brne	.-4      	; 0x25c0 <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    25c4:	6f 91       	pop	r22
    25c6:	31 97       	sbiw	r30, 0x01	; 1
    25c8:	c9 f7       	brne	.-14     	; 0x25bc <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    25ca:	f5 cf       	rjmp	.-22     	; 0x25b6 <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    25cc:	08 95       	ret

000025ce <delay_ms>:
    25ce:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <_ZN13OrangutanTime17delayMillisecondsEj>
    25d2:	08 95       	ret

000025d4 <_ZN13OrangutanTime5init2Ev>:
    25d4:	e0 e7       	ldi	r30, 0x70	; 112
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	80 81       	ld	r24, Z
    25da:	8e 7f       	andi	r24, 0xFE	; 254
    25dc:	80 83       	st	Z, r24
    25de:	a0 eb       	ldi	r26, 0xB0	; 176
    25e0:	b0 e0       	ldi	r27, 0x00	; 0
    25e2:	8c 91       	ld	r24, X
    25e4:	83 60       	ori	r24, 0x03	; 3
    25e6:	8c 93       	st	X, r24
    25e8:	a1 eb       	ldi	r26, 0xB1	; 177
    25ea:	b0 e0       	ldi	r27, 0x00	; 0
    25ec:	8c 91       	ld	r24, X
    25ee:	80 7f       	andi	r24, 0xF0	; 240
    25f0:	8c 93       	st	X, r24
    25f2:	8c 91       	ld	r24, X
    25f4:	82 60       	ori	r24, 0x02	; 2
    25f6:	8c 93       	st	X, r24
    25f8:	b8 9a       	sbi	0x17, 0	; 23
    25fa:	80 81       	ld	r24, Z
    25fc:	81 60       	ori	r24, 0x01	; 1
    25fe:	80 83       	st	Z, r24
    2600:	78 94       	sei
    2602:	08 95       	ret

00002604 <_ZN13OrangutanTime4initEv>:
    2604:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <_ZZN13OrangutanTime4initEvE11initialized>
    2608:	81 11       	cpse	r24, r1
    260a:	05 c0       	rjmp	.+10     	; 0x2616 <_ZN13OrangutanTime4initEv+0x12>
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <_ZZN13OrangutanTime4initEvE11initialized>
    2612:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <_ZN13OrangutanTime5init2Ev>
    2616:	08 95       	ret

00002618 <_ZN13OrangutanTime2msEv>:
    2618:	0e 94 02 13 	call	0x2604	; 0x2604 <_ZN13OrangutanTime4initEv>
    261c:	e0 e7       	ldi	r30, 0x70	; 112
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	80 81       	ld	r24, Z
    2622:	8e 7f       	andi	r24, 0xFE	; 254
    2624:	80 83       	st	Z, r24
    2626:	60 91 a5 01 	lds	r22, 0x01A5	; 0x8001a5 <msCounter>
    262a:	70 91 a6 01 	lds	r23, 0x01A6	; 0x8001a6 <msCounter+0x1>
    262e:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <msCounter+0x2>
    2632:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <msCounter+0x3>
    2636:	20 81       	ld	r18, Z
    2638:	21 60       	ori	r18, 0x01	; 1
    263a:	20 83       	st	Z, r18
    263c:	08 95       	ret

0000263e <get_ms>:
    263e:	0e 94 0c 13 	call	0x2618	; 0x2618 <_ZN13OrangutanTime2msEv>
    2642:	08 95       	ret

00002644 <_ZN13OrangutanTime5resetEv>:
    2644:	0e 94 02 13 	call	0x2604	; 0x2604 <_ZN13OrangutanTime4initEv>
    2648:	e0 e7       	ldi	r30, 0x70	; 112
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	80 81       	ld	r24, Z
    264e:	8e 7f       	andi	r24, 0xFE	; 254
    2650:	80 83       	st	Z, r24
    2652:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <msCounter>
    2656:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <msCounter+0x1>
    265a:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <msCounter+0x2>
    265e:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <msCounter+0x3>
    2662:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <us_over_10+0x1>
    2666:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <us_over_10>
    266a:	80 81       	ld	r24, Z
    266c:	81 60       	ori	r24, 0x01	; 1
    266e:	80 83       	st	Z, r24
    2670:	08 95       	ret

00002672 <read_line_sensors>:
    2672:	46 2f       	mov	r20, r22
    2674:	bc 01       	movw	r22, r24
    2676:	8d ea       	ldi	r24, 0xAD	; 173
    2678:	91 e0       	ldi	r25, 0x01	; 1
    267a:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <_ZN16PololuQTRSensors4readEPjh>
    267e:	08 95       	ret

00002680 <calibrate_line_sensors>:
    2680:	68 2f       	mov	r22, r24
    2682:	8d ea       	ldi	r24, 0xAD	; 173
    2684:	91 e0       	ldi	r25, 0x01	; 1
    2686:	0e 94 28 17 	call	0x2e50	; 0x2e50 <_ZN16PololuQTRSensors9calibrateEh>
    268a:	08 95       	ret

0000268c <read_line>:
    268c:	46 2f       	mov	r20, r22
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	bc 01       	movw	r22, r24
    2692:	8d ea       	ldi	r24, 0xAD	; 173
    2694:	91 e0       	ldi	r25, 0x01	; 1
    2696:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <_ZN16PololuQTRSensors8readLineEPjhh>
    269a:	08 95       	ret

0000269c <_ZN9Pololu3pi4initEjh>:
    269c:	0f 93       	push	r16
    269e:	cf 93       	push	r28
    26a0:	df 93       	push	r29
    26a2:	00 d0       	rcall	.+0      	; 0x26a4 <_ZN9Pololu3pi4initEjh+0x8>
    26a4:	00 d0       	rcall	.+0      	; 0x26a6 <_ZN9Pololu3pi4initEjh+0xa>
    26a6:	1f 92       	push	r1
    26a8:	cd b7       	in	r28, 0x3d	; 61
    26aa:	de b7       	in	r29, 0x3e	; 62
    26ac:	9c 01       	movw	r18, r24
    26ae:	85 e0       	ldi	r24, 0x05	; 5
    26b0:	ec e4       	ldi	r30, 0x4C	; 76
    26b2:	f1 e0       	ldi	r31, 0x01	; 1
    26b4:	de 01       	movw	r26, r28
    26b6:	11 96       	adiw	r26, 0x01	; 1
    26b8:	01 90       	ld	r0, Z+
    26ba:	0d 92       	st	X+, r0
    26bc:	8a 95       	dec	r24
    26be:	e1 f7       	brne	.-8      	; 0x26b8 <_ZN9Pololu3pi4initEjh+0x1c>
    26c0:	66 23       	and	r22, r22
    26c2:	11 f0       	breq	.+4      	; 0x26c8 <_ZN9Pololu3pi4initEjh+0x2c>
    26c4:	0f ef       	ldi	r16, 0xFF	; 255
    26c6:	01 c0       	rjmp	.+2      	; 0x26ca <_ZN9Pololu3pi4initEjh+0x2e>
    26c8:	03 e1       	ldi	r16, 0x13	; 19
    26ca:	45 e0       	ldi	r20, 0x05	; 5
    26cc:	be 01       	movw	r22, r28
    26ce:	6f 5f       	subi	r22, 0xFF	; 255
    26d0:	7f 4f       	sbci	r23, 0xFF	; 255
    26d2:	8d ea       	ldi	r24, 0xAD	; 173
    26d4:	91 e0       	ldi	r25, 0x01	; 1
    26d6:	0e 94 20 14 	call	0x2840	; 0x2840 <_ZN18PololuQTRSensorsRC4initEPhhjh>
    26da:	8d ea       	ldi	r24, 0xAD	; 173
    26dc:	91 e0       	ldi	r25, 0x01	; 1
    26de:	0e 94 f7 13 	call	0x27ee	; 0x27ee <_ZN16PololuQTRSensors11emittersOffEv>
    26e2:	0e 94 22 13 	call	0x2644	; 0x2644 <_ZN13OrangutanTime5resetEv>
    26e6:	0f 90       	pop	r0
    26e8:	0f 90       	pop	r0
    26ea:	0f 90       	pop	r0
    26ec:	0f 90       	pop	r0
    26ee:	0f 90       	pop	r0
    26f0:	df 91       	pop	r29
    26f2:	cf 91       	pop	r28
    26f4:	0f 91       	pop	r16
    26f6:	08 95       	ret

000026f8 <pololu_3pi_init>:
    26f8:	60 e0       	ldi	r22, 0x00	; 0
    26fa:	0e 94 4e 13 	call	0x269c	; 0x269c <_ZN9Pololu3pi4initEjh>
    26fe:	08 95       	ret

00002700 <_GLOBAL__sub_D_pololu_3pi_init>:
    2700:	8d ea       	ldi	r24, 0xAD	; 173
    2702:	91 e0       	ldi	r25, 0x01	; 1
    2704:	0e 94 6e 18 	call	0x30dc	; 0x30dc <_ZN16PololuQTRSensorsD1Ev>
    2708:	08 95       	ret

0000270a <delay_us>:
    270a:	6f 93       	push	r22
    270c:	64 e0       	ldi	r22, 0x04	; 4
    270e:	6a 95       	dec	r22
    2710:	f1 f7       	brne	.-4      	; 0x270e <delay_us+0x4>
    2712:	6f 91       	pop	r22
    2714:	01 97       	sbiw	r24, 0x01	; 1
    2716:	c9 f7       	brne	.-14     	; 0x270a <delay_us>
    2718:	08 95       	ret

0000271a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    271a:	fc 01       	movw	r30, r24
    271c:	11 82       	std	Z+1, r1	; 0x01
    271e:	10 82       	st	Z, r1
    2720:	13 82       	std	Z+3, r1	; 0x03
    2722:	12 82       	std	Z+2, r1	; 0x02
    2724:	15 82       	std	Z+5, r1	; 0x05
    2726:	14 82       	std	Z+4, r1	; 0x04
    2728:	16 82       	std	Z+6, r1	; 0x06
    272a:	68 30       	cpi	r22, 0x08	; 8
    272c:	68 f4       	brcc	.+26     	; 0x2748 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    272e:	89 e2       	ldi	r24, 0x29	; 41
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	91 83       	std	Z+1, r25	; 0x01
    2734:	80 83       	st	Z, r24
    2736:	8b e2       	ldi	r24, 0x2B	; 43
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	93 83       	std	Z+3, r25	; 0x03
    273c:	82 83       	std	Z+2, r24	; 0x02
    273e:	8a e2       	ldi	r24, 0x2A	; 42
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	95 83       	std	Z+5, r25	; 0x05
    2744:	84 83       	std	Z+4, r24	; 0x04
    2746:	1f c0       	rjmp	.+62     	; 0x2786 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    2748:	6e 30       	cpi	r22, 0x0E	; 14
    274a:	70 f4       	brcc	.+28     	; 0x2768 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    274c:	83 e2       	ldi	r24, 0x23	; 35
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	91 83       	std	Z+1, r25	; 0x01
    2752:	80 83       	st	Z, r24
    2754:	85 e2       	ldi	r24, 0x25	; 37
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	93 83       	std	Z+3, r25	; 0x03
    275a:	82 83       	std	Z+2, r24	; 0x02
    275c:	84 e2       	ldi	r24, 0x24	; 36
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	95 83       	std	Z+5, r25	; 0x05
    2762:	84 83       	std	Z+4, r24	; 0x04
    2764:	68 50       	subi	r22, 0x08	; 8
    2766:	0f c0       	rjmp	.+30     	; 0x2786 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    2768:	65 31       	cpi	r22, 0x15	; 21
    276a:	98 f4       	brcc	.+38     	; 0x2792 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    276c:	86 e2       	ldi	r24, 0x26	; 38
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	91 83       	std	Z+1, r25	; 0x01
    2772:	80 83       	st	Z, r24
    2774:	88 e2       	ldi	r24, 0x28	; 40
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	93 83       	std	Z+3, r25	; 0x03
    277a:	82 83       	std	Z+2, r24	; 0x02
    277c:	87 e2       	ldi	r24, 0x27	; 39
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	95 83       	std	Z+5, r25	; 0x05
    2782:	84 83       	std	Z+4, r24	; 0x04
    2784:	6e 50       	subi	r22, 0x0E	; 14
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	01 c0       	rjmp	.+2      	; 0x278c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    278a:	88 0f       	add	r24, r24
    278c:	6a 95       	dec	r22
    278e:	ea f7       	brpl	.-6      	; 0x278a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    2790:	86 83       	std	Z+6, r24	; 0x06
    2792:	08 95       	ret

00002794 <_ZN16PololuQTRSensors4initEhhh>:
    2794:	a7 e0       	ldi	r26, 0x07	; 7
    2796:	b0 e0       	ldi	r27, 0x00	; 0
    2798:	e0 ed       	ldi	r30, 0xD0	; 208
    279a:	f3 e1       	ldi	r31, 0x13	; 19
    279c:	0c 94 23 19 	jmp	0x3246	; 0x3246 <__prologue_saves__+0x1c>
    27a0:	8c 01       	movw	r16, r24
    27a2:	fc 01       	movw	r30, r24
    27a4:	11 82       	std	Z+1, r1	; 0x01
    27a6:	10 82       	st	Z, r1
    27a8:	13 82       	std	Z+3, r1	; 0x03
    27aa:	12 82       	std	Z+2, r1	; 0x02
    27ac:	15 82       	std	Z+5, r1	; 0x05
    27ae:	14 82       	std	Z+4, r1	; 0x04
    27b0:	17 82       	std	Z+7, r1	; 0x07
    27b2:	16 82       	std	Z+6, r1	; 0x06
    27b4:	61 31       	cpi	r22, 0x11	; 17
    27b6:	18 f0       	brcs	.+6      	; 0x27be <_ZN16PololuQTRSensors4initEhhh+0x2a>
    27b8:	80 e1       	ldi	r24, 0x10	; 16
    27ba:	80 87       	std	Z+8, r24	; 0x08
    27bc:	02 c0       	rjmp	.+4      	; 0x27c2 <_ZN16PololuQTRSensors4initEhhh+0x2e>
    27be:	fc 01       	movw	r30, r24
    27c0:	60 87       	std	Z+8, r22	; 0x08
    27c2:	f8 01       	movw	r30, r16
    27c4:	20 8b       	std	Z+16, r18	; 0x10
    27c6:	64 2f       	mov	r22, r20
    27c8:	ce 01       	movw	r24, r28
    27ca:	01 96       	adiw	r24, 0x01	; 1
    27cc:	0e 94 8d 13 	call	0x271a	; 0x271a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    27d0:	8f 81       	ldd	r24, Y+7	; 0x07
    27d2:	f8 01       	movw	r30, r16
    27d4:	81 87       	std	Z+9, r24	; 0x09
    27d6:	8b 81       	ldd	r24, Y+3	; 0x03
    27d8:	9c 81       	ldd	r25, Y+4	; 0x04
    27da:	93 87       	std	Z+11, r25	; 0x0b
    27dc:	82 87       	std	Z+10, r24	; 0x0a
    27de:	8d 81       	ldd	r24, Y+5	; 0x05
    27e0:	9e 81       	ldd	r25, Y+6	; 0x06
    27e2:	95 87       	std	Z+13, r25	; 0x0d
    27e4:	84 87       	std	Z+12, r24	; 0x0c
    27e6:	27 96       	adiw	r28, 0x07	; 7
    27e8:	e4 e0       	ldi	r30, 0x04	; 4
    27ea:	0c 94 3f 19 	jmp	0x327e	; 0x327e <__epilogue_restores__+0x1c>

000027ee <_ZN16PololuQTRSensors11emittersOffEv>:
    27ee:	fc 01       	movw	r30, r24
    27f0:	a4 85       	ldd	r26, Z+12	; 0x0c
    27f2:	b5 85       	ldd	r27, Z+13	; 0x0d
    27f4:	10 97       	sbiw	r26, 0x00	; 0
    27f6:	79 f0       	breq	.+30     	; 0x2816 <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    27f8:	8c 91       	ld	r24, X
    27fa:	91 85       	ldd	r25, Z+9	; 0x09
    27fc:	89 2b       	or	r24, r25
    27fe:	8c 93       	st	X, r24
    2800:	a2 85       	ldd	r26, Z+10	; 0x0a
    2802:	b3 85       	ldd	r27, Z+11	; 0x0b
    2804:	9c 91       	ld	r25, X
    2806:	81 85       	ldd	r24, Z+9	; 0x09
    2808:	80 95       	com	r24
    280a:	89 23       	and	r24, r25
    280c:	8c 93       	st	X, r24
    280e:	88 ec       	ldi	r24, 0xC8	; 200
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	0e 94 85 13 	call	0x270a	; 0x270a <delay_us>
    2816:	08 95       	ret

00002818 <_ZN16PololuQTRSensors10emittersOnEv>:
    2818:	fc 01       	movw	r30, r24
    281a:	a4 85       	ldd	r26, Z+12	; 0x0c
    281c:	b5 85       	ldd	r27, Z+13	; 0x0d
    281e:	10 97       	sbiw	r26, 0x00	; 0
    2820:	71 f0       	breq	.+28     	; 0x283e <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    2822:	8c 91       	ld	r24, X
    2824:	91 85       	ldd	r25, Z+9	; 0x09
    2826:	89 2b       	or	r24, r25
    2828:	8c 93       	st	X, r24
    282a:	a2 85       	ldd	r26, Z+10	; 0x0a
    282c:	b3 85       	ldd	r27, Z+11	; 0x0b
    282e:	8c 91       	ld	r24, X
    2830:	91 85       	ldd	r25, Z+9	; 0x09
    2832:	89 2b       	or	r24, r25
    2834:	8c 93       	st	X, r24
    2836:	88 ec       	ldi	r24, 0xC8	; 200
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	0e 94 85 13 	call	0x270a	; 0x270a <delay_us>
    283e:	08 95       	ret

00002840 <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    2840:	a7 e0       	ldi	r26, 0x07	; 7
    2842:	b0 e0       	ldi	r27, 0x00	; 0
    2844:	e6 e2       	ldi	r30, 0x26	; 38
    2846:	f4 e1       	ldi	r31, 0x14	; 20
    2848:	0c 94 18 19 	jmp	0x3230	; 0x3230 <__prologue_saves__+0x6>
    284c:	7c 01       	movw	r14, r24
    284e:	4b 01       	movw	r8, r22
    2850:	64 2f       	mov	r22, r20
    2852:	39 01       	movw	r6, r18
    2854:	40 2f       	mov	r20, r16
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	0e 94 ca 13 	call	0x2794	; 0x2794 <_ZN16PololuQTRSensors4initEhhh>
    285c:	87 01       	movw	r16, r14
    285e:	0f 5b       	subi	r16, 0xBF	; 191
    2860:	1f 4f       	sbci	r17, 0xFF	; 255
    2862:	f8 01       	movw	r30, r16
    2864:	10 82       	st	Z, r1
    2866:	67 01       	movw	r12, r14
    2868:	f2 e4       	ldi	r31, 0x42	; 66
    286a:	cf 0e       	add	r12, r31
    286c:	d1 1c       	adc	r13, r1
    286e:	f6 01       	movw	r30, r12
    2870:	10 82       	st	Z, r1
    2872:	57 01       	movw	r10, r14
    2874:	f3 e4       	ldi	r31, 0x43	; 67
    2876:	af 0e       	add	r10, r31
    2878:	b1 1c       	adc	r11, r1
    287a:	f5 01       	movw	r30, r10
    287c:	10 82       	st	Z, r1
    287e:	f7 01       	movw	r30, r14
    2880:	77 86       	std	Z+15, r7	; 0x0f
    2882:	66 86       	std	Z+14, r6	; 0x0e
    2884:	51 2c       	mov	r5, r1
    2886:	f7 01       	movw	r30, r14
    2888:	80 85       	ldd	r24, Z+8	; 0x08
    288a:	58 16       	cp	r5, r24
    288c:	50 f5       	brcc	.+84     	; 0x28e2 <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    288e:	65 2c       	mov	r6, r5
    2890:	71 2c       	mov	r7, r1
    2892:	f4 01       	movw	r30, r8
    2894:	e6 0d       	add	r30, r6
    2896:	f7 1d       	adc	r31, r7
    2898:	60 81       	ld	r22, Z
    289a:	ce 01       	movw	r24, r28
    289c:	01 96       	adiw	r24, 0x01	; 1
    289e:	0e 94 8d 13 	call	0x271a	; 0x271a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    28a2:	2f 81       	ldd	r18, Y+7	; 0x07
    28a4:	f7 01       	movw	r30, r14
    28a6:	e6 0d       	add	r30, r6
    28a8:	f7 1d       	adc	r31, r7
    28aa:	21 8b       	std	Z+17, r18	; 0x11
    28ac:	89 81       	ldd	r24, Y+1	; 0x01
    28ae:	9a 81       	ldd	r25, Y+2	; 0x02
    28b0:	f3 01       	movw	r30, r6
    28b2:	ee 0f       	add	r30, r30
    28b4:	ff 1f       	adc	r31, r31
    28b6:	ee 0d       	add	r30, r14
    28b8:	ff 1d       	adc	r31, r15
    28ba:	92 a3       	std	Z+34, r25	; 0x22
    28bc:	81 a3       	std	Z+33, r24	; 0x21
    28be:	83 32       	cpi	r24, 0x23	; 35
    28c0:	91 05       	cpc	r25, r1
    28c2:	11 f4       	brne	.+4      	; 0x28c8 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    28c4:	f8 01       	movw	r30, r16
    28c6:	08 c0       	rjmp	.+16     	; 0x28d8 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    28c8:	86 32       	cpi	r24, 0x26	; 38
    28ca:	91 05       	cpc	r25, r1
    28cc:	11 f4       	brne	.+4      	; 0x28d2 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    28ce:	f6 01       	movw	r30, r12
    28d0:	03 c0       	rjmp	.+6      	; 0x28d8 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    28d2:	89 97       	sbiw	r24, 0x29	; 41
    28d4:	21 f4       	brne	.+8      	; 0x28de <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    28d6:	f5 01       	movw	r30, r10
    28d8:	80 81       	ld	r24, Z
    28da:	82 2b       	or	r24, r18
    28dc:	80 83       	st	Z, r24
    28de:	53 94       	inc	r5
    28e0:	d2 cf       	rjmp	.-92     	; 0x2886 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    28e2:	27 96       	adiw	r28, 0x07	; 7
    28e4:	ef e0       	ldi	r30, 0x0F	; 15
    28e6:	0c 94 34 19 	jmp	0x3268	; 0x3268 <__epilogue_restores__+0x6>

000028ea <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    28ea:	a0 e0       	ldi	r26, 0x00	; 0
    28ec:	b0 e0       	ldi	r27, 0x00	; 0
    28ee:	eb e7       	ldi	r30, 0x7B	; 123
    28f0:	f4 e1       	ldi	r31, 0x14	; 20
    28f2:	0c 94 1a 19 	jmp	0x3234	; 0x3234 <__prologue_saves__+0xa>
    28f6:	ec 01       	movw	r28, r24
    28f8:	5b 01       	movw	r10, r22
    28fa:	6c 01       	movw	r12, r24
    28fc:	81 e4       	ldi	r24, 0x41	; 65
    28fe:	c8 0e       	add	r12, r24
    2900:	d1 1c       	adc	r13, r1
    2902:	f6 01       	movw	r30, r12
    2904:	80 80       	ld	r8, Z
    2906:	7e 01       	movw	r14, r28
    2908:	f2 e4       	ldi	r31, 0x42	; 66
    290a:	ef 0e       	add	r14, r31
    290c:	f1 1c       	adc	r15, r1
    290e:	f7 01       	movw	r30, r14
    2910:	70 80       	ld	r7, Z
    2912:	8e 01       	movw	r16, r28
    2914:	0d 5b       	subi	r16, 0xBD	; 189
    2916:	1f 4f       	sbci	r17, 0xFF	; 255
    2918:	f8 01       	movw	r30, r16
    291a:	90 80       	ld	r9, Z
    291c:	80 e0       	ldi	r24, 0x00	; 0
    291e:	98 85       	ldd	r25, Y+8	; 0x08
    2920:	89 17       	cp	r24, r25
    2922:	48 f4       	brcc	.+18     	; 0x2936 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    2924:	f5 01       	movw	r30, r10
    2926:	e8 0f       	add	r30, r24
    2928:	f1 1d       	adc	r31, r1
    292a:	e8 0f       	add	r30, r24
    292c:	f1 1d       	adc	r31, r1
    292e:	11 82       	std	Z+1, r1	; 0x01
    2930:	10 82       	st	Z, r1
    2932:	8f 5f       	subi	r24, 0xFF	; 255
    2934:	f4 cf       	rjmp	.-24     	; 0x291e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    2936:	84 b1       	in	r24, 0x04	; 4
    2938:	f6 01       	movw	r30, r12
    293a:	90 81       	ld	r25, Z
    293c:	89 2b       	or	r24, r25
    293e:	84 b9       	out	0x04, r24	; 4
    2940:	87 b1       	in	r24, 0x07	; 7
    2942:	f7 01       	movw	r30, r14
    2944:	90 81       	ld	r25, Z
    2946:	89 2b       	or	r24, r25
    2948:	87 b9       	out	0x07, r24	; 7
    294a:	8a b1       	in	r24, 0x0a	; 10
    294c:	f8 01       	movw	r30, r16
    294e:	90 81       	ld	r25, Z
    2950:	89 2b       	or	r24, r25
    2952:	8a b9       	out	0x0a, r24	; 10
    2954:	85 b1       	in	r24, 0x05	; 5
    2956:	f6 01       	movw	r30, r12
    2958:	90 81       	ld	r25, Z
    295a:	89 2b       	or	r24, r25
    295c:	85 b9       	out	0x05, r24	; 5
    295e:	88 b1       	in	r24, 0x08	; 8
    2960:	f7 01       	movw	r30, r14
    2962:	90 81       	ld	r25, Z
    2964:	89 2b       	or	r24, r25
    2966:	88 b9       	out	0x08, r24	; 8
    2968:	8b b1       	in	r24, 0x0b	; 11
    296a:	f8 01       	movw	r30, r16
    296c:	90 81       	ld	r25, Z
    296e:	89 2b       	or	r24, r25
    2970:	8b b9       	out	0x0b, r24	; 11
    2972:	8a e0       	ldi	r24, 0x0A	; 10
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	0e 94 85 13 	call	0x270a	; 0x270a <delay_us>
    297a:	94 b1       	in	r25, 0x04	; 4
    297c:	f6 01       	movw	r30, r12
    297e:	80 81       	ld	r24, Z
    2980:	80 95       	com	r24
    2982:	89 23       	and	r24, r25
    2984:	84 b9       	out	0x04, r24	; 4
    2986:	97 b1       	in	r25, 0x07	; 7
    2988:	f7 01       	movw	r30, r14
    298a:	80 81       	ld	r24, Z
    298c:	80 95       	com	r24
    298e:	89 23       	and	r24, r25
    2990:	87 b9       	out	0x07, r24	; 7
    2992:	9a b1       	in	r25, 0x0a	; 10
    2994:	f8 01       	movw	r30, r16
    2996:	80 81       	ld	r24, Z
    2998:	80 95       	com	r24
    299a:	89 23       	and	r24, r25
    299c:	8a b9       	out	0x0a, r24	; 10
    299e:	95 b1       	in	r25, 0x05	; 5
    29a0:	f6 01       	movw	r30, r12
    29a2:	80 81       	ld	r24, Z
    29a4:	80 95       	com	r24
    29a6:	89 23       	and	r24, r25
    29a8:	85 b9       	out	0x05, r24	; 5
    29aa:	98 b1       	in	r25, 0x08	; 8
    29ac:	f7 01       	movw	r30, r14
    29ae:	80 81       	ld	r24, Z
    29b0:	80 95       	com	r24
    29b2:	89 23       	and	r24, r25
    29b4:	88 b9       	out	0x08, r24	; 8
    29b6:	9b b1       	in	r25, 0x0b	; 11
    29b8:	f8 01       	movw	r30, r16
    29ba:	80 81       	ld	r24, Z
    29bc:	80 95       	com	r24
    29be:	89 23       	and	r24, r25
    29c0:	8b b9       	out	0x0b, r24	; 11
    29c2:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    29c6:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    29ca:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    29ce:	83 60       	ori	r24, 0x03	; 3
    29d0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    29d4:	82 e0       	ldi	r24, 0x02	; 2
    29d6:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    29da:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    29de:	80 e0       	ldi	r24, 0x00	; 0
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	2e 85       	ldd	r18, Y+14	; 0x0e
    29e4:	3f 85       	ldd	r19, Y+15	; 0x0f
    29e6:	82 17       	cp	r24, r18
    29e8:	93 07       	cpc	r25, r19
    29ea:	20 f5       	brcc	.+72     	; 0x2a34 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    29ec:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    29f0:	2c 2d       	mov	r18, r12
    29f2:	24 1b       	sub	r18, r20
    29f4:	82 0f       	add	r24, r18
    29f6:	91 1d       	adc	r25, r1
    29f8:	03 b1       	in	r16, 0x03	; 3
    29fa:	08 11       	cpse	r16, r8
    29fc:	32 c0       	rjmp	.+100    	; 0x2a62 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    29fe:	f6 b0       	in	r15, 0x06	; 6
    2a00:	f7 10       	cpse	r15, r7
    2a02:	2f c0       	rjmp	.+94     	; 0x2a62 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2a04:	29 b1       	in	r18, 0x09	; 9
    2a06:	29 11       	cpse	r18, r9
    2a08:	2c c0       	rjmp	.+88     	; 0x2a62 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2a0a:	10 c0       	rjmp	.+32     	; 0x2a2c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    2a0c:	21 2f       	mov	r18, r17
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	a9 01       	movw	r20, r18
    2a12:	44 0f       	add	r20, r20
    2a14:	55 1f       	adc	r21, r21
    2a16:	f5 01       	movw	r30, r10
    2a18:	e4 0f       	add	r30, r20
    2a1a:	f5 1f       	adc	r31, r21
    2a1c:	60 81       	ld	r22, Z
    2a1e:	71 81       	ldd	r23, Z+1	; 0x01
    2a20:	67 2b       	or	r22, r23
    2a22:	21 f1       	breq	.+72     	; 0x2a6c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    2a24:	1f 5f       	subi	r17, 0xFF	; 255
    2a26:	28 85       	ldd	r18, Y+8	; 0x08
    2a28:	12 17       	cp	r17, r18
    2a2a:	80 f3       	brcs	.-32     	; 0x2a0c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    2a2c:	7f 2c       	mov	r7, r15
    2a2e:	80 2e       	mov	r8, r16
    2a30:	4c 2d       	mov	r20, r12
    2a32:	d7 cf       	rjmp	.-82     	; 0x29e2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    2a34:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2a38:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2a3c:	20 e0       	ldi	r18, 0x00	; 0
    2a3e:	88 85       	ldd	r24, Y+8	; 0x08
    2a40:	28 17       	cp	r18, r24
    2a42:	30 f5       	brcc	.+76     	; 0x2a90 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    2a44:	f5 01       	movw	r30, r10
    2a46:	e2 0f       	add	r30, r18
    2a48:	f1 1d       	adc	r31, r1
    2a4a:	e2 0f       	add	r30, r18
    2a4c:	f1 1d       	adc	r31, r1
    2a4e:	80 81       	ld	r24, Z
    2a50:	91 81       	ldd	r25, Z+1	; 0x01
    2a52:	89 2b       	or	r24, r25
    2a54:	21 f4       	brne	.+8      	; 0x2a5e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    2a56:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a58:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a5a:	91 83       	std	Z+1, r25	; 0x01
    2a5c:	80 83       	st	Z, r24
    2a5e:	2f 5f       	subi	r18, 0xFF	; 255
    2a60:	ee cf       	rjmp	.-36     	; 0x2a3e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    2a62:	03 b1       	in	r16, 0x03	; 3
    2a64:	f6 b0       	in	r15, 0x06	; 6
    2a66:	99 b0       	in	r9, 0x09	; 9
    2a68:	10 e0       	ldi	r17, 0x00	; 0
    2a6a:	dd cf       	rjmp	.-70     	; 0x2a26 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    2a6c:	de 01       	movw	r26, r28
    2a6e:	a4 0f       	add	r26, r20
    2a70:	b5 1f       	adc	r27, r21
    2a72:	91 96       	adiw	r26, 0x21	; 33
    2a74:	0d 90       	ld	r0, X+
    2a76:	bc 91       	ld	r27, X
    2a78:	a0 2d       	mov	r26, r0
    2a7a:	4c 91       	ld	r20, X
    2a7c:	de 01       	movw	r26, r28
    2a7e:	a2 0f       	add	r26, r18
    2a80:	b3 1f       	adc	r27, r19
    2a82:	51 96       	adiw	r26, 0x11	; 17
    2a84:	2c 91       	ld	r18, X
    2a86:	42 23       	and	r20, r18
    2a88:	69 f6       	brne	.-102    	; 0x2a24 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    2a8a:	91 83       	std	Z+1, r25	; 0x01
    2a8c:	80 83       	st	Z, r24
    2a8e:	ca cf       	rjmp	.-108    	; 0x2a24 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    2a90:	cd b7       	in	r28, 0x3d	; 61
    2a92:	de b7       	in	r29, 0x3e	; 62
    2a94:	ed e0       	ldi	r30, 0x0D	; 13
    2a96:	0c 94 36 19 	jmp	0x326c	; 0x326c <__epilogue_restores__+0xa>

00002a9a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    2a9a:	ef 92       	push	r14
    2a9c:	ff 92       	push	r15
    2a9e:	0f 93       	push	r16
    2aa0:	1f 93       	push	r17
    2aa2:	cf 93       	push	r28
    2aa4:	df 93       	push	r29
    2aa6:	fc 01       	movw	r30, r24
    2aa8:	9b 01       	movw	r18, r22
    2aaa:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2aae:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2ab2:	47 b1       	in	r20, 0x07	; 7
    2ab4:	18 b1       	in	r17, 0x08	; 8
    2ab6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2aba:	86 fd       	sbrc	r24, 6
    2abc:	fc cf       	rjmp	.-8      	; 0x2ab6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    2abe:	80 e0       	ldi	r24, 0x00	; 0
    2ac0:	90 85       	ldd	r25, Z+8	; 0x08
    2ac2:	89 17       	cp	r24, r25
    2ac4:	48 f4       	brcc	.+18     	; 0x2ad8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    2ac6:	d9 01       	movw	r26, r18
    2ac8:	a8 0f       	add	r26, r24
    2aca:	b1 1d       	adc	r27, r1
    2acc:	a8 0f       	add	r26, r24
    2ace:	b1 1d       	adc	r27, r1
    2ad0:	1d 92       	st	X+, r1
    2ad2:	1c 92       	st	X, r1
    2ad4:	8f 5f       	subi	r24, 0xFF	; 255
    2ad6:	f4 cf       	rjmp	.-24     	; 0x2ac0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    2ad8:	97 b1       	in	r25, 0x07	; 7
    2ada:	82 a1       	ldd	r24, Z+34	; 0x22
    2adc:	80 95       	com	r24
    2ade:	89 23       	and	r24, r25
    2ae0:	87 b9       	out	0x07, r24	; 7
    2ae2:	98 b1       	in	r25, 0x08	; 8
    2ae4:	82 a1       	ldd	r24, Z+34	; 0x22
    2ae6:	80 95       	com	r24
    2ae8:	89 23       	and	r24, r25
    2aea:	88 b9       	out	0x08, r24	; 8
    2aec:	87 e8       	ldi	r24, 0x87	; 135
    2aee:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2af2:	e1 2c       	mov	r14, r1
    2af4:	81 a1       	ldd	r24, Z+33	; 0x21
    2af6:	e8 16       	cp	r14, r24
    2af8:	10 f0       	brcs	.+4      	; 0x2afe <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    2afa:	e1 2c       	mov	r14, r1
    2afc:	29 c0       	rjmp	.+82     	; 0x2b50 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    2afe:	50 e0       	ldi	r21, 0x00	; 0
    2b00:	80 85       	ldd	r24, Z+8	; 0x08
    2b02:	58 17       	cp	r21, r24
    2b04:	18 f5       	brcc	.+70     	; 0x2b4c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    2b06:	a5 2f       	mov	r26, r21
    2b08:	b0 e0       	ldi	r27, 0x00	; 0
    2b0a:	ef 01       	movw	r28, r30
    2b0c:	ca 0f       	add	r28, r26
    2b0e:	db 1f       	adc	r29, r27
    2b10:	89 89       	ldd	r24, Y+17	; 0x11
    2b12:	80 64       	ori	r24, 0x40	; 64
    2b14:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2b18:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2b1c:	80 64       	ori	r24, 0x40	; 64
    2b1e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2b22:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2b26:	86 fd       	sbrc	r24, 6
    2b28:	fc cf       	rjmp	.-8      	; 0x2b22 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    2b2a:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    2b2e:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    2b32:	aa 0f       	add	r26, r26
    2b34:	bb 1f       	adc	r27, r27
    2b36:	a2 0f       	add	r26, r18
    2b38:	b3 1f       	adc	r27, r19
    2b3a:	8d 91       	ld	r24, X+
    2b3c:	9c 91       	ld	r25, X
    2b3e:	11 97       	sbiw	r26, 0x01	; 1
    2b40:	86 0f       	add	r24, r22
    2b42:	97 1f       	adc	r25, r23
    2b44:	8d 93       	st	X+, r24
    2b46:	9c 93       	st	X, r25
    2b48:	5f 5f       	subi	r21, 0xFF	; 255
    2b4a:	da cf       	rjmp	.-76     	; 0x2b00 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    2b4c:	e3 94       	inc	r14
    2b4e:	d2 cf       	rjmp	.-92     	; 0x2af4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    2b50:	80 85       	ldd	r24, Z+8	; 0x08
    2b52:	e8 16       	cp	r14, r24
    2b54:	a0 f4       	brcc	.+40     	; 0x2b7e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    2b56:	e9 01       	movw	r28, r18
    2b58:	ce 0d       	add	r28, r14
    2b5a:	d1 1d       	adc	r29, r1
    2b5c:	ce 0d       	add	r28, r14
    2b5e:	d1 1d       	adc	r29, r1
    2b60:	61 a1       	ldd	r22, Z+33	; 0x21
    2b62:	70 e0       	ldi	r23, 0x00	; 0
    2b64:	cb 01       	movw	r24, r22
    2b66:	95 95       	asr	r25
    2b68:	87 95       	ror	r24
    2b6a:	a8 81       	ld	r26, Y
    2b6c:	b9 81       	ldd	r27, Y+1	; 0x01
    2b6e:	8a 0f       	add	r24, r26
    2b70:	9b 1f       	adc	r25, r27
    2b72:	0e 94 98 18 	call	0x3130	; 0x3130 <__udivmodhi4>
    2b76:	79 83       	std	Y+1, r23	; 0x01
    2b78:	68 83       	st	Y, r22
    2b7a:	e3 94       	inc	r14
    2b7c:	e9 cf       	rjmp	.-46     	; 0x2b50 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    2b7e:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2b82:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2b86:	18 b9       	out	0x08, r17	; 8
    2b88:	47 b9       	out	0x07, r20	; 7
    2b8a:	cd b7       	in	r28, 0x3d	; 61
    2b8c:	de b7       	in	r29, 0x3e	; 62
    2b8e:	e6 e0       	ldi	r30, 0x06	; 6
    2b90:	0c 94 3d 19 	jmp	0x327a	; 0x327a <__epilogue_restores__+0x18>

00002b94 <_ZN16PololuQTRSensors4readEPjh>:
    2b94:	a0 e2       	ldi	r26, 0x20	; 32
    2b96:	b0 e0       	ldi	r27, 0x00	; 0
    2b98:	e0 ed       	ldi	r30, 0xD0	; 208
    2b9a:	f5 e1       	ldi	r31, 0x15	; 21
    2b9c:	0c 94 20 19 	jmp	0x3240	; 0x3240 <__prologue_saves__+0x16>
    2ba0:	8c 01       	movw	r16, r24
    2ba2:	7b 01       	movw	r14, r22
    2ba4:	d4 2e       	mov	r13, r20
    2ba6:	8f ef       	ldi	r24, 0xFF	; 255
    2ba8:	84 0f       	add	r24, r20
    2baa:	82 30       	cpi	r24, 0x02	; 2
    2bac:	18 f4       	brcc	.+6      	; 0x2bb4 <_ZN16PololuQTRSensors4readEPjh+0x20>
    2bae:	c8 01       	movw	r24, r16
    2bb0:	0e 94 0c 14 	call	0x2818	; 0x2818 <_ZN16PololuQTRSensors10emittersOnEv>
    2bb4:	d8 01       	movw	r26, r16
    2bb6:	50 96       	adiw	r26, 0x10	; 16
    2bb8:	8c 91       	ld	r24, X
    2bba:	b7 01       	movw	r22, r14
    2bbc:	81 11       	cpse	r24, r1
    2bbe:	10 c0       	rjmp	.+32     	; 0x2be0 <_ZN16PololuQTRSensors4readEPjh+0x4c>
    2bc0:	c8 01       	movw	r24, r16
    2bc2:	0e 94 75 14 	call	0x28ea	; 0x28ea <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2bc6:	c8 01       	movw	r24, r16
    2bc8:	0e 94 f7 13 	call	0x27ee	; 0x27ee <_ZN16PololuQTRSensors11emittersOffEv>
    2bcc:	b2 e0       	ldi	r27, 0x02	; 2
    2bce:	db 12       	cpse	r13, r27
    2bd0:	3a c0       	rjmp	.+116    	; 0x2c46 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2bd2:	be 01       	movw	r22, r28
    2bd4:	6f 5f       	subi	r22, 0xFF	; 255
    2bd6:	7f 4f       	sbci	r23, 0xFF	; 255
    2bd8:	c8 01       	movw	r24, r16
    2bda:	0e 94 75 14 	call	0x28ea	; 0x28ea <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2bde:	0f c0       	rjmp	.+30     	; 0x2bfe <_ZN16PololuQTRSensors4readEPjh+0x6a>
    2be0:	c8 01       	movw	r24, r16
    2be2:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2be6:	c8 01       	movw	r24, r16
    2be8:	0e 94 f7 13 	call	0x27ee	; 0x27ee <_ZN16PololuQTRSensors11emittersOffEv>
    2bec:	e2 e0       	ldi	r30, 0x02	; 2
    2bee:	de 12       	cpse	r13, r30
    2bf0:	2a c0       	rjmp	.+84     	; 0x2c46 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2bf2:	be 01       	movw	r22, r28
    2bf4:	6f 5f       	subi	r22, 0xFF	; 255
    2bf6:	7f 4f       	sbci	r23, 0xFF	; 255
    2bf8:	c8 01       	movw	r24, r16
    2bfa:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2bfe:	40 e0       	ldi	r20, 0x00	; 0
    2c00:	f8 01       	movw	r30, r16
    2c02:	80 85       	ldd	r24, Z+8	; 0x08
    2c04:	48 17       	cp	r20, r24
    2c06:	f8 f4       	brcc	.+62     	; 0x2c46 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2c08:	84 2f       	mov	r24, r20
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	88 0f       	add	r24, r24
    2c0e:	99 1f       	adc	r25, r25
    2c10:	f7 01       	movw	r30, r14
    2c12:	e8 0f       	add	r30, r24
    2c14:	f9 1f       	adc	r31, r25
    2c16:	21 e0       	ldi	r18, 0x01	; 1
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	2c 0f       	add	r18, r28
    2c1c:	3d 1f       	adc	r19, r29
    2c1e:	82 0f       	add	r24, r18
    2c20:	93 1f       	adc	r25, r19
    2c22:	d8 01       	movw	r26, r16
    2c24:	1e 96       	adiw	r26, 0x0e	; 14
    2c26:	2d 91       	ld	r18, X+
    2c28:	3c 91       	ld	r19, X
    2c2a:	1f 97       	sbiw	r26, 0x0f	; 15
    2c2c:	dc 01       	movw	r26, r24
    2c2e:	8d 91       	ld	r24, X+
    2c30:	9c 91       	ld	r25, X
    2c32:	28 1b       	sub	r18, r24
    2c34:	39 0b       	sbc	r19, r25
    2c36:	80 81       	ld	r24, Z
    2c38:	91 81       	ldd	r25, Z+1	; 0x01
    2c3a:	82 0f       	add	r24, r18
    2c3c:	93 1f       	adc	r25, r19
    2c3e:	91 83       	std	Z+1, r25	; 0x01
    2c40:	80 83       	st	Z, r24
    2c42:	4f 5f       	subi	r20, 0xFF	; 255
    2c44:	dd cf       	rjmp	.-70     	; 0x2c00 <_ZN16PololuQTRSensors4readEPjh+0x6c>
    2c46:	a0 96       	adiw	r28, 0x20	; 32
    2c48:	e7 e0       	ldi	r30, 0x07	; 7
    2c4a:	0c 94 3c 19 	jmp	0x3278	; 0x3278 <__epilogue_restores__+0x16>

00002c4e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    2c4e:	2f 92       	push	r2
    2c50:	3f 92       	push	r3
    2c52:	5f 92       	push	r5
    2c54:	6f 92       	push	r6
    2c56:	7f 92       	push	r7
    2c58:	8f 92       	push	r8
    2c5a:	9f 92       	push	r9
    2c5c:	af 92       	push	r10
    2c5e:	bf 92       	push	r11
    2c60:	cf 92       	push	r12
    2c62:	df 92       	push	r13
    2c64:	ef 92       	push	r14
    2c66:	ff 92       	push	r15
    2c68:	0f 93       	push	r16
    2c6a:	1f 93       	push	r17
    2c6c:	cf 93       	push	r28
    2c6e:	df 93       	push	r29
    2c70:	cd b7       	in	r28, 0x3d	; 61
    2c72:	de b7       	in	r29, 0x3e	; 62
    2c74:	c0 56       	subi	r28, 0x60	; 96
    2c76:	d1 09       	sbc	r29, r1
    2c78:	0f b6       	in	r0, 0x3f	; 63
    2c7a:	f8 94       	cli
    2c7c:	de bf       	out	0x3e, r29	; 62
    2c7e:	0f be       	out	0x3f, r0	; 63
    2c80:	cd bf       	out	0x3d, r28	; 61
    2c82:	8c 01       	movw	r16, r24
    2c84:	4b 01       	movw	r8, r22
    2c86:	5a 01       	movw	r10, r20
    2c88:	52 2e       	mov	r5, r18
    2c8a:	da 01       	movw	r26, r20
    2c8c:	8d 91       	ld	r24, X+
    2c8e:	9c 91       	ld	r25, X
    2c90:	89 2b       	or	r24, r25
    2c92:	31 f0       	breq	.+12     	; 0x2ca0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x52>
    2c94:	f4 01       	movw	r30, r8
    2c96:	80 81       	ld	r24, Z
    2c98:	91 81       	ldd	r25, Z+1	; 0x01
    2c9a:	89 2b       	or	r24, r25
    2c9c:	f1 f4       	brne	.+60     	; 0x2cda <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    2c9e:	24 c0       	rjmp	.+72     	; 0x2ce8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x9a>
    2ca0:	d8 01       	movw	r26, r16
    2ca2:	18 96       	adiw	r26, 0x08	; 8
    2ca4:	8c 91       	ld	r24, X
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	88 0f       	add	r24, r24
    2caa:	99 1f       	adc	r25, r25
    2cac:	0e 94 4c 19 	call	0x3298	; 0x3298 <malloc>
    2cb0:	f5 01       	movw	r30, r10
    2cb2:	91 83       	std	Z+1, r25	; 0x01
    2cb4:	80 83       	st	Z, r24
    2cb6:	00 97       	sbiw	r24, 0x00	; 0
    2cb8:	09 f4       	brne	.+2      	; 0x2cbc <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x6e>
    2cba:	b1 c0       	rjmp	.+354    	; 0x2e1e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    2cbc:	fc 01       	movw	r30, r24
    2cbe:	20 e0       	ldi	r18, 0x00	; 0
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	d8 01       	movw	r26, r16
    2cc4:	18 96       	adiw	r26, 0x08	; 8
    2cc6:	8c 91       	ld	r24, X
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	28 17       	cp	r18, r24
    2ccc:	39 07       	cpc	r19, r25
    2cce:	14 f7       	brge	.-60     	; 0x2c94 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x46>
    2cd0:	11 92       	st	Z+, r1
    2cd2:	11 92       	st	Z+, r1
    2cd4:	2f 5f       	subi	r18, 0xFF	; 255
    2cd6:	3f 4f       	sbci	r19, 0xFF	; 255
    2cd8:	f4 cf       	rjmp	.-24     	; 0x2cc2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x74>
    2cda:	e1 2c       	mov	r14, r1
    2cdc:	f1 2c       	mov	r15, r1
    2cde:	6e 01       	movw	r12, r28
    2ce0:	b1 e2       	ldi	r27, 0x21	; 33
    2ce2:	cb 0e       	add	r12, r27
    2ce4:	d1 1c       	adc	r13, r1
    2ce6:	21 c0       	rjmp	.+66     	; 0x2d2a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    2ce8:	f8 01       	movw	r30, r16
    2cea:	80 85       	ldd	r24, Z+8	; 0x08
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	88 0f       	add	r24, r24
    2cf0:	99 1f       	adc	r25, r25
    2cf2:	0e 94 4c 19 	call	0x3298	; 0x3298 <malloc>
    2cf6:	d4 01       	movw	r26, r8
    2cf8:	8d 93       	st	X+, r24
    2cfa:	9c 93       	st	X, r25
    2cfc:	00 97       	sbiw	r24, 0x00	; 0
    2cfe:	09 f4       	brne	.+2      	; 0x2d02 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb4>
    2d00:	8e c0       	rjmp	.+284    	; 0x2e1e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    2d02:	fc 01       	movw	r30, r24
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	d8 01       	movw	r26, r16
    2d0a:	18 96       	adiw	r26, 0x08	; 8
    2d0c:	8c 91       	ld	r24, X
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	28 17       	cp	r18, r24
    2d12:	39 07       	cpc	r19, r25
    2d14:	14 f7       	brge	.-60     	; 0x2cda <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    2d16:	d8 01       	movw	r26, r16
    2d18:	1e 96       	adiw	r26, 0x0e	; 14
    2d1a:	8d 91       	ld	r24, X+
    2d1c:	9c 91       	ld	r25, X
    2d1e:	1f 97       	sbiw	r26, 0x0f	; 15
    2d20:	81 93       	st	Z+, r24
    2d22:	91 93       	st	Z+, r25
    2d24:	2f 5f       	subi	r18, 0xFF	; 255
    2d26:	3f 4f       	sbci	r19, 0xFF	; 255
    2d28:	ef cf       	rjmp	.-34     	; 0x2d08 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xba>
    2d2a:	45 2d       	mov	r20, r5
    2d2c:	be 01       	movw	r22, r28
    2d2e:	6f 5b       	subi	r22, 0xBF	; 191
    2d30:	7f 4f       	sbci	r23, 0xFF	; 255
    2d32:	c8 01       	movw	r24, r16
    2d34:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <_ZN16PololuQTRSensors4readEPjh>
    2d38:	f8 01       	movw	r30, r16
    2d3a:	60 84       	ldd	r6, Z+8	; 0x08
    2d3c:	71 2c       	mov	r7, r1
    2d3e:	fe 01       	movw	r30, r28
    2d40:	ef 5b       	subi	r30, 0xBF	; 191
    2d42:	ff 4f       	sbci	r31, 0xFF	; 255
    2d44:	c6 01       	movw	r24, r12
    2d46:	9e 01       	movw	r18, r28
    2d48:	2f 5f       	subi	r18, 0xFF	; 255
    2d4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d4c:	19 01       	movw	r2, r18
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	26 15       	cp	r18, r6
    2d54:	37 05       	cpc	r19, r7
    2d56:	4c f5       	brge	.+82     	; 0x2daa <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x15c>
    2d58:	e1 14       	cp	r14, r1
    2d5a:	f1 04       	cpc	r15, r1
    2d5c:	89 f0       	breq	.+34     	; 0x2d80 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    2d5e:	dc 01       	movw	r26, r24
    2d60:	6d 91       	ld	r22, X+
    2d62:	7c 91       	ld	r23, X
    2d64:	40 81       	ld	r20, Z
    2d66:	51 81       	ldd	r21, Z+1	; 0x01
    2d68:	64 17       	cp	r22, r20
    2d6a:	75 07       	cpc	r23, r21
    2d6c:	48 f0       	brcs	.+18     	; 0x2d80 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    2d6e:	d1 01       	movw	r26, r2
    2d70:	6d 91       	ld	r22, X+
    2d72:	7c 91       	ld	r23, X
    2d74:	40 81       	ld	r20, Z
    2d76:	51 81       	ldd	r21, Z+1	; 0x01
    2d78:	46 17       	cp	r20, r22
    2d7a:	57 07       	cpc	r21, r23
    2d7c:	48 f0       	brcs	.+18     	; 0x2d90 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x142>
    2d7e:	0d c0       	rjmp	.+26     	; 0x2d9a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x14c>
    2d80:	40 81       	ld	r20, Z
    2d82:	51 81       	ldd	r21, Z+1	; 0x01
    2d84:	dc 01       	movw	r26, r24
    2d86:	4d 93       	st	X+, r20
    2d88:	5c 93       	st	X, r21
    2d8a:	e1 14       	cp	r14, r1
    2d8c:	f1 04       	cpc	r15, r1
    2d8e:	79 f7       	brne	.-34     	; 0x2d6e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x120>
    2d90:	40 81       	ld	r20, Z
    2d92:	51 81       	ldd	r21, Z+1	; 0x01
    2d94:	d1 01       	movw	r26, r2
    2d96:	4d 93       	st	X+, r20
    2d98:	5c 93       	st	X, r21
    2d9a:	2f 5f       	subi	r18, 0xFF	; 255
    2d9c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d9e:	b2 e0       	ldi	r27, 0x02	; 2
    2da0:	2b 0e       	add	r2, r27
    2da2:	31 1c       	adc	r3, r1
    2da4:	32 96       	adiw	r30, 0x02	; 2
    2da6:	02 96       	adiw	r24, 0x02	; 2
    2da8:	d4 cf       	rjmp	.-88     	; 0x2d52 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x104>
    2daa:	ef ef       	ldi	r30, 0xFF	; 255
    2dac:	ee 1a       	sub	r14, r30
    2dae:	fe 0a       	sbc	r15, r30
    2db0:	fa e0       	ldi	r31, 0x0A	; 10
    2db2:	ef 16       	cp	r14, r31
    2db4:	f1 04       	cpc	r15, r1
    2db6:	09 f0       	breq	.+2      	; 0x2dba <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x16c>
    2db8:	b8 cf       	rjmp	.-144    	; 0x2d2a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    2dba:	9e 01       	movw	r18, r28
    2dbc:	2f 5f       	subi	r18, 0xFF	; 255
    2dbe:	3f 4f       	sbci	r19, 0xFF	; 255
    2dc0:	79 01       	movw	r14, r18
    2dc2:	36 01       	movw	r6, r12
    2dc4:	80 e0       	ldi	r24, 0x00	; 0
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	f8 01       	movw	r30, r16
    2dca:	20 85       	ldd	r18, Z+8	; 0x08
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	82 17       	cp	r24, r18
    2dd0:	93 07       	cpc	r25, r19
    2dd2:	2c f5       	brge	.+74     	; 0x2e1e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    2dd4:	d7 01       	movw	r26, r14
    2dd6:	2d 91       	ld	r18, X+
    2dd8:	3d 91       	ld	r19, X+
    2dda:	7d 01       	movw	r14, r26
    2ddc:	b3 01       	movw	r22, r6
    2dde:	6c 19       	sub	r22, r12
    2de0:	7d 09       	sbc	r23, r13
    2de2:	d5 01       	movw	r26, r10
    2de4:	ed 91       	ld	r30, X+
    2de6:	fc 91       	ld	r31, X
    2de8:	e6 0f       	add	r30, r22
    2dea:	f7 1f       	adc	r31, r23
    2dec:	40 81       	ld	r20, Z
    2dee:	51 81       	ldd	r21, Z+1	; 0x01
    2df0:	42 17       	cp	r20, r18
    2df2:	53 07       	cpc	r21, r19
    2df4:	10 f4       	brcc	.+4      	; 0x2dfa <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1ac>
    2df6:	31 83       	std	Z+1, r19	; 0x01
    2df8:	20 83       	st	Z, r18
    2dfa:	f3 01       	movw	r30, r6
    2dfc:	21 91       	ld	r18, Z+
    2dfe:	31 91       	ld	r19, Z+
    2e00:	3f 01       	movw	r6, r30
    2e02:	d4 01       	movw	r26, r8
    2e04:	ed 91       	ld	r30, X+
    2e06:	fc 91       	ld	r31, X
    2e08:	e6 0f       	add	r30, r22
    2e0a:	f7 1f       	adc	r31, r23
    2e0c:	40 81       	ld	r20, Z
    2e0e:	51 81       	ldd	r21, Z+1	; 0x01
    2e10:	24 17       	cp	r18, r20
    2e12:	35 07       	cpc	r19, r21
    2e14:	10 f4       	brcc	.+4      	; 0x2e1a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1cc>
    2e16:	31 83       	std	Z+1, r19	; 0x01
    2e18:	20 83       	st	Z, r18
    2e1a:	01 96       	adiw	r24, 0x01	; 1
    2e1c:	d5 cf       	rjmp	.-86     	; 0x2dc8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17a>
    2e1e:	c0 5a       	subi	r28, 0xA0	; 160
    2e20:	df 4f       	sbci	r29, 0xFF	; 255
    2e22:	0f b6       	in	r0, 0x3f	; 63
    2e24:	f8 94       	cli
    2e26:	de bf       	out	0x3e, r29	; 62
    2e28:	0f be       	out	0x3f, r0	; 63
    2e2a:	cd bf       	out	0x3d, r28	; 61
    2e2c:	df 91       	pop	r29
    2e2e:	cf 91       	pop	r28
    2e30:	1f 91       	pop	r17
    2e32:	0f 91       	pop	r16
    2e34:	ff 90       	pop	r15
    2e36:	ef 90       	pop	r14
    2e38:	df 90       	pop	r13
    2e3a:	cf 90       	pop	r12
    2e3c:	bf 90       	pop	r11
    2e3e:	af 90       	pop	r10
    2e40:	9f 90       	pop	r9
    2e42:	8f 90       	pop	r8
    2e44:	7f 90       	pop	r7
    2e46:	6f 90       	pop	r6
    2e48:	5f 90       	pop	r5
    2e4a:	3f 90       	pop	r3
    2e4c:	2f 90       	pop	r2
    2e4e:	08 95       	ret

00002e50 <_ZN16PololuQTRSensors9calibrateEh>:
    2e50:	1f 93       	push	r17
    2e52:	cf 93       	push	r28
    2e54:	df 93       	push	r29
    2e56:	ec 01       	movw	r28, r24
    2e58:	16 2f       	mov	r17, r22
    2e5a:	8f ef       	ldi	r24, 0xFF	; 255
    2e5c:	86 0f       	add	r24, r22
    2e5e:	82 30       	cpi	r24, 0x02	; 2
    2e60:	18 f0       	brcs	.+6      	; 0x2e68 <_ZN16PololuQTRSensors9calibrateEh+0x18>
    2e62:	66 23       	and	r22, r22
    2e64:	59 f0       	breq	.+22     	; 0x2e7c <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    2e66:	14 c0       	rjmp	.+40     	; 0x2e90 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    2e68:	21 e0       	ldi	r18, 0x01	; 1
    2e6a:	ae 01       	movw	r20, r28
    2e6c:	4e 5f       	subi	r20, 0xFE	; 254
    2e6e:	5f 4f       	sbci	r21, 0xFF	; 255
    2e70:	be 01       	movw	r22, r28
    2e72:	ce 01       	movw	r24, r28
    2e74:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    2e78:	12 30       	cpi	r17, 0x02	; 2
    2e7a:	51 f4       	brne	.+20     	; 0x2e90 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    2e7c:	ae 01       	movw	r20, r28
    2e7e:	4a 5f       	subi	r20, 0xFA	; 250
    2e80:	5f 4f       	sbci	r21, 0xFF	; 255
    2e82:	be 01       	movw	r22, r28
    2e84:	6c 5f       	subi	r22, 0xFC	; 252
    2e86:	7f 4f       	sbci	r23, 0xFF	; 255
    2e88:	20 e0       	ldi	r18, 0x00	; 0
    2e8a:	ce 01       	movw	r24, r28
    2e8c:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    2e90:	df 91       	pop	r29
    2e92:	cf 91       	pop	r28
    2e94:	1f 91       	pop	r17
    2e96:	08 95       	ret

00002e98 <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    2e98:	a0 e0       	ldi	r26, 0x00	; 0
    2e9a:	b0 e0       	ldi	r27, 0x00	; 0
    2e9c:	e2 e5       	ldi	r30, 0x52	; 82
    2e9e:	f7 e1       	ldi	r31, 0x17	; 23
    2ea0:	0c 94 1e 19 	jmp	0x323c	; 0x323c <__prologue_saves__+0x12>
    2ea4:	ec 01       	movw	r28, r24
    2ea6:	8b 01       	movw	r16, r22
    2ea8:	b4 2e       	mov	r11, r20
    2eaa:	84 2f       	mov	r24, r20
    2eac:	8d 7f       	andi	r24, 0xFD	; 253
    2eae:	51 f4       	brne	.+20     	; 0x2ec4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    2eb0:	8c 81       	ldd	r24, Y+4	; 0x04
    2eb2:	9d 81       	ldd	r25, Y+5	; 0x05
    2eb4:	89 2b       	or	r24, r25
    2eb6:	09 f4       	brne	.+2      	; 0x2eba <_ZN16PololuQTRSensors14readCalibratedEPjh+0x22>
    2eb8:	97 c0       	rjmp	.+302    	; 0x2fe8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2eba:	8e 81       	ldd	r24, Y+6	; 0x06
    2ebc:	9f 81       	ldd	r25, Y+7	; 0x07
    2ebe:	89 2b       	or	r24, r25
    2ec0:	09 f4       	brne	.+2      	; 0x2ec4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    2ec2:	92 c0       	rjmp	.+292    	; 0x2fe8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2ec4:	8f ef       	ldi	r24, 0xFF	; 255
    2ec6:	8b 0d       	add	r24, r11
    2ec8:	82 30       	cpi	r24, 0x02	; 2
    2eca:	50 f4       	brcc	.+20     	; 0x2ee0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    2ecc:	88 81       	ld	r24, Y
    2ece:	99 81       	ldd	r25, Y+1	; 0x01
    2ed0:	89 2b       	or	r24, r25
    2ed2:	09 f4       	brne	.+2      	; 0x2ed6 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3e>
    2ed4:	89 c0       	rjmp	.+274    	; 0x2fe8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed8:	9b 81       	ldd	r25, Y+3	; 0x03
    2eda:	89 2b       	or	r24, r25
    2edc:	09 f4       	brne	.+2      	; 0x2ee0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    2ede:	84 c0       	rjmp	.+264    	; 0x2fe8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2ee0:	4b 2d       	mov	r20, r11
    2ee2:	b8 01       	movw	r22, r16
    2ee4:	ce 01       	movw	r24, r28
    2ee6:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <_ZN16PololuQTRSensors4readEPjh>
    2eea:	78 01       	movw	r14, r16
    2eec:	00 e0       	ldi	r16, 0x00	; 0
    2eee:	10 e0       	ldi	r17, 0x00	; 0
    2ef0:	c1 2c       	mov	r12, r1
    2ef2:	d1 2c       	mov	r13, r1
    2ef4:	88 85       	ldd	r24, Y+8	; 0x08
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	c8 16       	cp	r12, r24
    2efa:	d9 06       	cpc	r13, r25
    2efc:	0c f0       	brlt	.+2      	; 0x2f00 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x68>
    2efe:	74 c0       	rjmp	.+232    	; 0x2fe8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2f00:	81 e0       	ldi	r24, 0x01	; 1
    2f02:	b8 12       	cpse	r11, r24
    2f04:	0a c0       	rjmp	.+20     	; 0x2f1a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x82>
    2f06:	ea 81       	ldd	r30, Y+2	; 0x02
    2f08:	fb 81       	ldd	r31, Y+3	; 0x03
    2f0a:	e0 0f       	add	r30, r16
    2f0c:	f1 1f       	adc	r31, r17
    2f0e:	01 90       	ld	r0, Z+
    2f10:	f0 81       	ld	r31, Z
    2f12:	e0 2d       	mov	r30, r0
    2f14:	a8 81       	ld	r26, Y
    2f16:	b9 81       	ldd	r27, Y+1	; 0x01
    2f18:	0d c0       	rjmp	.+26     	; 0x2f34 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x9c>
    2f1a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f1c:	9d 81       	ldd	r25, Y+5	; 0x05
    2f1e:	2e 81       	ldd	r18, Y+6	; 0x06
    2f20:	3f 81       	ldd	r19, Y+7	; 0x07
    2f22:	b1 10       	cpse	r11, r1
    2f24:	0c c0       	rjmp	.+24     	; 0x2f3e <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    2f26:	f9 01       	movw	r30, r18
    2f28:	e0 0f       	add	r30, r16
    2f2a:	f1 1f       	adc	r31, r17
    2f2c:	01 90       	ld	r0, Z+
    2f2e:	f0 81       	ld	r31, Z
    2f30:	e0 2d       	mov	r30, r0
    2f32:	dc 01       	movw	r26, r24
    2f34:	a0 0f       	add	r26, r16
    2f36:	b1 1f       	adc	r27, r17
    2f38:	8d 91       	ld	r24, X+
    2f3a:	9c 91       	ld	r25, X
    2f3c:	28 c0       	rjmp	.+80     	; 0x2f8e <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    2f3e:	fc 01       	movw	r30, r24
    2f40:	e0 0f       	add	r30, r16
    2f42:	f1 1f       	adc	r31, r17
    2f44:	40 81       	ld	r20, Z
    2f46:	51 81       	ldd	r21, Z+1	; 0x01
    2f48:	e8 81       	ld	r30, Y
    2f4a:	f9 81       	ldd	r31, Y+1	; 0x01
    2f4c:	e0 0f       	add	r30, r16
    2f4e:	f1 1f       	adc	r31, r17
    2f50:	80 81       	ld	r24, Z
    2f52:	91 81       	ldd	r25, Z+1	; 0x01
    2f54:	ee 85       	ldd	r30, Y+14	; 0x0e
    2f56:	ff 85       	ldd	r31, Y+15	; 0x0f
    2f58:	48 17       	cp	r20, r24
    2f5a:	59 07       	cpc	r21, r25
    2f5c:	10 f4       	brcc	.+4      	; 0x2f62 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xca>
    2f5e:	cf 01       	movw	r24, r30
    2f60:	04 c0       	rjmp	.+8      	; 0x2f6a <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd2>
    2f62:	8e 0f       	add	r24, r30
    2f64:	9f 1f       	adc	r25, r31
    2f66:	84 1b       	sub	r24, r20
    2f68:	95 0b       	sbc	r25, r21
    2f6a:	d9 01       	movw	r26, r18
    2f6c:	a0 0f       	add	r26, r16
    2f6e:	b1 1f       	adc	r27, r17
    2f70:	2d 91       	ld	r18, X+
    2f72:	3c 91       	ld	r19, X
    2f74:	aa 81       	ldd	r26, Y+2	; 0x02
    2f76:	bb 81       	ldd	r27, Y+3	; 0x03
    2f78:	a0 0f       	add	r26, r16
    2f7a:	b1 1f       	adc	r27, r17
    2f7c:	4d 91       	ld	r20, X+
    2f7e:	5c 91       	ld	r21, X
    2f80:	24 17       	cp	r18, r20
    2f82:	35 07       	cpc	r19, r21
    2f84:	20 f0       	brcs	.+8      	; 0x2f8e <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    2f86:	e4 0f       	add	r30, r20
    2f88:	f5 1f       	adc	r31, r21
    2f8a:	e2 1b       	sub	r30, r18
    2f8c:	f3 0b       	sbc	r31, r19
    2f8e:	e8 1b       	sub	r30, r24
    2f90:	f9 0b       	sbc	r31, r25
    2f92:	a9 f0       	breq	.+42     	; 0x2fbe <_ZN16PololuQTRSensors14readCalibratedEPjh+0x126>
    2f94:	d7 01       	movw	r26, r14
    2f96:	2d 91       	ld	r18, X+
    2f98:	3c 91       	ld	r19, X
    2f9a:	40 e0       	ldi	r20, 0x00	; 0
    2f9c:	50 e0       	ldi	r21, 0x00	; 0
    2f9e:	28 1b       	sub	r18, r24
    2fa0:	39 0b       	sbc	r19, r25
    2fa2:	41 09       	sbc	r20, r1
    2fa4:	51 09       	sbc	r21, r1
    2fa6:	a8 ee       	ldi	r26, 0xE8	; 232
    2fa8:	b3 e0       	ldi	r27, 0x03	; 3
    2faa:	0e 94 02 19 	call	0x3204	; 0x3204 <__muluhisi3>
    2fae:	9f 01       	movw	r18, r30
    2fb0:	40 e0       	ldi	r20, 0x00	; 0
    2fb2:	50 e0       	ldi	r21, 0x00	; 0
    2fb4:	0e 94 ce 18 	call	0x319c	; 0x319c <__divmodsi4>
    2fb8:	37 fd       	sbrc	r19, 7
    2fba:	0a c0       	rjmp	.+20     	; 0x2fd0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x138>
    2fbc:	02 c0       	rjmp	.+4      	; 0x2fc2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x12a>
    2fbe:	20 e0       	ldi	r18, 0x00	; 0
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	29 3e       	cpi	r18, 0xE9	; 233
    2fc4:	b3 e0       	ldi	r27, 0x03	; 3
    2fc6:	3b 07       	cpc	r19, r27
    2fc8:	2c f0       	brlt	.+10     	; 0x2fd4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    2fca:	28 ee       	ldi	r18, 0xE8	; 232
    2fcc:	33 e0       	ldi	r19, 0x03	; 3
    2fce:	02 c0       	rjmp	.+4      	; 0x2fd4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    2fd0:	20 e0       	ldi	r18, 0x00	; 0
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	f7 01       	movw	r30, r14
    2fd6:	21 93       	st	Z+, r18
    2fd8:	31 93       	st	Z+, r19
    2fda:	7f 01       	movw	r14, r30
    2fdc:	ff ef       	ldi	r31, 0xFF	; 255
    2fde:	cf 1a       	sub	r12, r31
    2fe0:	df 0a       	sbc	r13, r31
    2fe2:	0e 5f       	subi	r16, 0xFE	; 254
    2fe4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fe6:	86 cf       	rjmp	.-244    	; 0x2ef4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x5c>
    2fe8:	cd b7       	in	r28, 0x3d	; 61
    2fea:	de b7       	in	r29, 0x3e	; 62
    2fec:	e9 e0       	ldi	r30, 0x09	; 9
    2fee:	0c 94 3a 19 	jmp	0x3274	; 0x3274 <__epilogue_restores__+0x12>

00002ff2 <_ZN16PololuQTRSensors8readLineEPjhh>:
    2ff2:	a0 e0       	ldi	r26, 0x00	; 0
    2ff4:	b0 e0       	ldi	r27, 0x00	; 0
    2ff6:	ef ef       	ldi	r30, 0xFF	; 255
    2ff8:	f7 e1       	ldi	r31, 0x17	; 23
    2ffa:	0c 94 15 19 	jmp	0x322a	; 0x322a <__prologue_saves__>
    2ffe:	ec 01       	movw	r28, r24
    3000:	8b 01       	movw	r16, r22
    3002:	82 2e       	mov	r8, r18
    3004:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <_ZN16PololuQTRSensors14readCalibratedEPjh>
    3008:	28 84       	ldd	r2, Y+8	; 0x08
    300a:	e8 01       	movw	r28, r16
    300c:	41 2c       	mov	r4, r1
    300e:	51 2c       	mov	r5, r1
    3010:	32 01       	movw	r6, r4
    3012:	00 e0       	ldi	r16, 0x00	; 0
    3014:	10 e0       	ldi	r17, 0x00	; 0
    3016:	c1 2c       	mov	r12, r1
    3018:	d1 2c       	mov	r13, r1
    301a:	76 01       	movw	r14, r12
    301c:	31 2c       	mov	r3, r1
    301e:	91 2c       	mov	r9, r1
    3020:	58 ee       	ldi	r21, 0xE8	; 232
    3022:	a5 2e       	mov	r10, r21
    3024:	53 e0       	ldi	r21, 0x03	; 3
    3026:	b5 2e       	mov	r11, r21
    3028:	92 14       	cp	r9, r2
    302a:	21 f1       	breq	.+72     	; 0x3074 <_ZN16PololuQTRSensors8readLineEPjhh+0x82>
    302c:	e9 91       	ld	r30, Y+
    302e:	f9 91       	ld	r31, Y+
    3030:	88 20       	and	r8, r8
    3032:	21 f0       	breq	.+8      	; 0x303c <_ZN16PololuQTRSensors8readLineEPjhh+0x4a>
    3034:	c5 01       	movw	r24, r10
    3036:	8e 1b       	sub	r24, r30
    3038:	9f 0b       	sbc	r25, r31
    303a:	fc 01       	movw	r30, r24
    303c:	e9 3c       	cpi	r30, 0xC9	; 201
    303e:	f1 05       	cpc	r31, r1
    3040:	24 f4       	brge	.+8      	; 0x304a <_ZN16PololuQTRSensors8readLineEPjhh+0x58>
    3042:	e3 33       	cpi	r30, 0x33	; 51
    3044:	f1 05       	cpc	r31, r1
    3046:	74 f0       	brlt	.+28     	; 0x3064 <_ZN16PololuQTRSensors8readLineEPjhh+0x72>
    3048:	02 c0       	rjmp	.+4      	; 0x304e <_ZN16PololuQTRSensors8readLineEPjhh+0x5c>
    304a:	33 24       	eor	r3, r3
    304c:	33 94       	inc	r3
    304e:	df 01       	movw	r26, r30
    3050:	a3 01       	movw	r20, r6
    3052:	92 01       	movw	r18, r4
    3054:	0e 94 0d 19 	call	0x321a	; 0x321a <__mulshisi3>
    3058:	c6 0e       	add	r12, r22
    305a:	d7 1e       	adc	r13, r23
    305c:	e8 1e       	adc	r14, r24
    305e:	f9 1e       	adc	r15, r25
    3060:	0e 0f       	add	r16, r30
    3062:	1f 1f       	adc	r17, r31
    3064:	93 94       	inc	r9
    3066:	98 ee       	ldi	r25, 0xE8	; 232
    3068:	49 0e       	add	r4, r25
    306a:	93 e0       	ldi	r25, 0x03	; 3
    306c:	59 1e       	adc	r5, r25
    306e:	61 1c       	adc	r6, r1
    3070:	71 1c       	adc	r7, r1
    3072:	da cf       	rjmp	.-76     	; 0x3028 <_ZN16PololuQTRSensors8readLineEPjhh+0x36>
    3074:	31 10       	cpse	r3, r1
    3076:	1e c0       	rjmp	.+60     	; 0x30b4 <_ZN16PololuQTRSensors8readLineEPjhh+0xc2>
    3078:	49 2d       	mov	r20, r9
    307a:	50 e0       	ldi	r21, 0x00	; 0
    307c:	41 50       	subi	r20, 0x01	; 1
    307e:	51 09       	sbc	r21, r1
    3080:	24 ef       	ldi	r18, 0xF4	; 244
    3082:	31 e0       	ldi	r19, 0x01	; 1
    3084:	42 9f       	mul	r20, r18
    3086:	c0 01       	movw	r24, r0
    3088:	43 9f       	mul	r20, r19
    308a:	90 0d       	add	r25, r0
    308c:	52 9f       	mul	r21, r18
    308e:	90 0d       	add	r25, r0
    3090:	11 24       	eor	r1, r1
    3092:	20 91 f1 01 	lds	r18, 0x01F1	; 0x8001f1 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    3096:	30 91 f2 01 	lds	r19, 0x01F2	; 0x8001f2 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    309a:	28 17       	cp	r18, r24
    309c:	39 07       	cpc	r19, r25
    309e:	b4 f0       	brlt	.+44     	; 0x30cc <_ZN16PololuQTRSensors8readLineEPjhh+0xda>
    30a0:	88 ee       	ldi	r24, 0xE8	; 232
    30a2:	93 e0       	ldi	r25, 0x03	; 3
    30a4:	48 9f       	mul	r20, r24
    30a6:	90 01       	movw	r18, r0
    30a8:	49 9f       	mul	r20, r25
    30aa:	30 0d       	add	r19, r0
    30ac:	58 9f       	mul	r21, r24
    30ae:	30 0d       	add	r19, r0
    30b0:	11 24       	eor	r1, r1
    30b2:	0e c0       	rjmp	.+28     	; 0x30d0 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    30b4:	98 01       	movw	r18, r16
    30b6:	40 e0       	ldi	r20, 0x00	; 0
    30b8:	50 e0       	ldi	r21, 0x00	; 0
    30ba:	c7 01       	movw	r24, r14
    30bc:	b6 01       	movw	r22, r12
    30be:	0e 94 ac 18 	call	0x3158	; 0x3158 <__udivmodsi4>
    30c2:	30 93 f2 01 	sts	0x01F2, r19	; 0x8001f2 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    30c6:	20 93 f1 01 	sts	0x01F1, r18	; 0x8001f1 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    30ca:	02 c0       	rjmp	.+4      	; 0x30d0 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	c9 01       	movw	r24, r18
    30d2:	cd b7       	in	r28, 0x3d	; 61
    30d4:	de b7       	in	r29, 0x3e	; 62
    30d6:	e2 e1       	ldi	r30, 0x12	; 18
    30d8:	0c 94 31 19 	jmp	0x3262	; 0x3262 <__epilogue_restores__>

000030dc <_ZN16PololuQTRSensorsD1Ev>:
    30dc:	cf 93       	push	r28
    30de:	df 93       	push	r29
    30e0:	ec 01       	movw	r28, r24
    30e2:	8a 81       	ldd	r24, Y+2	; 0x02
    30e4:	9b 81       	ldd	r25, Y+3	; 0x03
    30e6:	00 97       	sbiw	r24, 0x00	; 0
    30e8:	11 f0       	breq	.+4      	; 0x30ee <_ZN16PololuQTRSensorsD1Ev+0x12>
    30ea:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <free>
    30ee:	8e 81       	ldd	r24, Y+6	; 0x06
    30f0:	9f 81       	ldd	r25, Y+7	; 0x07
    30f2:	00 97       	sbiw	r24, 0x00	; 0
    30f4:	11 f0       	breq	.+4      	; 0x30fa <_ZN16PololuQTRSensorsD1Ev+0x1e>
    30f6:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <free>
    30fa:	88 81       	ld	r24, Y
    30fc:	99 81       	ldd	r25, Y+1	; 0x01
    30fe:	00 97       	sbiw	r24, 0x00	; 0
    3100:	11 f0       	breq	.+4      	; 0x3106 <_ZN16PololuQTRSensorsD1Ev+0x2a>
    3102:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <free>
    3106:	8c 81       	ldd	r24, Y+4	; 0x04
    3108:	9d 81       	ldd	r25, Y+5	; 0x05
    310a:	00 97       	sbiw	r24, 0x00	; 0
    310c:	11 f0       	breq	.+4      	; 0x3112 <_ZN16PololuQTRSensorsD1Ev+0x36>
    310e:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <free>
    3112:	df 91       	pop	r29
    3114:	cf 91       	pop	r28
    3116:	08 95       	ret

00003118 <__udivmodqi4>:
    3118:	99 1b       	sub	r25, r25
    311a:	79 e0       	ldi	r23, 0x09	; 9
    311c:	04 c0       	rjmp	.+8      	; 0x3126 <__udivmodqi4_ep>

0000311e <__udivmodqi4_loop>:
    311e:	99 1f       	adc	r25, r25
    3120:	96 17       	cp	r25, r22
    3122:	08 f0       	brcs	.+2      	; 0x3126 <__udivmodqi4_ep>
    3124:	96 1b       	sub	r25, r22

00003126 <__udivmodqi4_ep>:
    3126:	88 1f       	adc	r24, r24
    3128:	7a 95       	dec	r23
    312a:	c9 f7       	brne	.-14     	; 0x311e <__udivmodqi4_loop>
    312c:	80 95       	com	r24
    312e:	08 95       	ret

00003130 <__udivmodhi4>:
    3130:	aa 1b       	sub	r26, r26
    3132:	bb 1b       	sub	r27, r27
    3134:	51 e1       	ldi	r21, 0x11	; 17
    3136:	07 c0       	rjmp	.+14     	; 0x3146 <__udivmodhi4_ep>

00003138 <__udivmodhi4_loop>:
    3138:	aa 1f       	adc	r26, r26
    313a:	bb 1f       	adc	r27, r27
    313c:	a6 17       	cp	r26, r22
    313e:	b7 07       	cpc	r27, r23
    3140:	10 f0       	brcs	.+4      	; 0x3146 <__udivmodhi4_ep>
    3142:	a6 1b       	sub	r26, r22
    3144:	b7 0b       	sbc	r27, r23

00003146 <__udivmodhi4_ep>:
    3146:	88 1f       	adc	r24, r24
    3148:	99 1f       	adc	r25, r25
    314a:	5a 95       	dec	r21
    314c:	a9 f7       	brne	.-22     	; 0x3138 <__udivmodhi4_loop>
    314e:	80 95       	com	r24
    3150:	90 95       	com	r25
    3152:	bc 01       	movw	r22, r24
    3154:	cd 01       	movw	r24, r26
    3156:	08 95       	ret

00003158 <__udivmodsi4>:
    3158:	a1 e2       	ldi	r26, 0x21	; 33
    315a:	1a 2e       	mov	r1, r26
    315c:	aa 1b       	sub	r26, r26
    315e:	bb 1b       	sub	r27, r27
    3160:	fd 01       	movw	r30, r26
    3162:	0d c0       	rjmp	.+26     	; 0x317e <__udivmodsi4_ep>

00003164 <__udivmodsi4_loop>:
    3164:	aa 1f       	adc	r26, r26
    3166:	bb 1f       	adc	r27, r27
    3168:	ee 1f       	adc	r30, r30
    316a:	ff 1f       	adc	r31, r31
    316c:	a2 17       	cp	r26, r18
    316e:	b3 07       	cpc	r27, r19
    3170:	e4 07       	cpc	r30, r20
    3172:	f5 07       	cpc	r31, r21
    3174:	20 f0       	brcs	.+8      	; 0x317e <__udivmodsi4_ep>
    3176:	a2 1b       	sub	r26, r18
    3178:	b3 0b       	sbc	r27, r19
    317a:	e4 0b       	sbc	r30, r20
    317c:	f5 0b       	sbc	r31, r21

0000317e <__udivmodsi4_ep>:
    317e:	66 1f       	adc	r22, r22
    3180:	77 1f       	adc	r23, r23
    3182:	88 1f       	adc	r24, r24
    3184:	99 1f       	adc	r25, r25
    3186:	1a 94       	dec	r1
    3188:	69 f7       	brne	.-38     	; 0x3164 <__udivmodsi4_loop>
    318a:	60 95       	com	r22
    318c:	70 95       	com	r23
    318e:	80 95       	com	r24
    3190:	90 95       	com	r25
    3192:	9b 01       	movw	r18, r22
    3194:	ac 01       	movw	r20, r24
    3196:	bd 01       	movw	r22, r26
    3198:	cf 01       	movw	r24, r30
    319a:	08 95       	ret

0000319c <__divmodsi4>:
    319c:	05 2e       	mov	r0, r21
    319e:	97 fb       	bst	r25, 7
    31a0:	1e f4       	brtc	.+6      	; 0x31a8 <__divmodsi4+0xc>
    31a2:	00 94       	com	r0
    31a4:	0e 94 e5 18 	call	0x31ca	; 0x31ca <__negsi2>
    31a8:	57 fd       	sbrc	r21, 7
    31aa:	07 d0       	rcall	.+14     	; 0x31ba <__divmodsi4_neg2>
    31ac:	0e 94 ac 18 	call	0x3158	; 0x3158 <__udivmodsi4>
    31b0:	07 fc       	sbrc	r0, 7
    31b2:	03 d0       	rcall	.+6      	; 0x31ba <__divmodsi4_neg2>
    31b4:	4e f4       	brtc	.+18     	; 0x31c8 <__divmodsi4_exit>
    31b6:	0c 94 e5 18 	jmp	0x31ca	; 0x31ca <__negsi2>

000031ba <__divmodsi4_neg2>:
    31ba:	50 95       	com	r21
    31bc:	40 95       	com	r20
    31be:	30 95       	com	r19
    31c0:	21 95       	neg	r18
    31c2:	3f 4f       	sbci	r19, 0xFF	; 255
    31c4:	4f 4f       	sbci	r20, 0xFF	; 255
    31c6:	5f 4f       	sbci	r21, 0xFF	; 255

000031c8 <__divmodsi4_exit>:
    31c8:	08 95       	ret

000031ca <__negsi2>:
    31ca:	90 95       	com	r25
    31cc:	80 95       	com	r24
    31ce:	70 95       	com	r23
    31d0:	61 95       	neg	r22
    31d2:	7f 4f       	sbci	r23, 0xFF	; 255
    31d4:	8f 4f       	sbci	r24, 0xFF	; 255
    31d6:	9f 4f       	sbci	r25, 0xFF	; 255
    31d8:	08 95       	ret

000031da <__tablejump2__>:
    31da:	ee 0f       	add	r30, r30
    31dc:	ff 1f       	adc	r31, r31
    31de:	05 90       	lpm	r0, Z+
    31e0:	f4 91       	lpm	r31, Z
    31e2:	e0 2d       	mov	r30, r0
    31e4:	09 94       	ijmp

000031e6 <__umulhisi3>:
    31e6:	a2 9f       	mul	r26, r18
    31e8:	b0 01       	movw	r22, r0
    31ea:	b3 9f       	mul	r27, r19
    31ec:	c0 01       	movw	r24, r0
    31ee:	a3 9f       	mul	r26, r19
    31f0:	70 0d       	add	r23, r0
    31f2:	81 1d       	adc	r24, r1
    31f4:	11 24       	eor	r1, r1
    31f6:	91 1d       	adc	r25, r1
    31f8:	b2 9f       	mul	r27, r18
    31fa:	70 0d       	add	r23, r0
    31fc:	81 1d       	adc	r24, r1
    31fe:	11 24       	eor	r1, r1
    3200:	91 1d       	adc	r25, r1
    3202:	08 95       	ret

00003204 <__muluhisi3>:
    3204:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__umulhisi3>
    3208:	a5 9f       	mul	r26, r21
    320a:	90 0d       	add	r25, r0
    320c:	b4 9f       	mul	r27, r20
    320e:	90 0d       	add	r25, r0
    3210:	a4 9f       	mul	r26, r20
    3212:	80 0d       	add	r24, r0
    3214:	91 1d       	adc	r25, r1
    3216:	11 24       	eor	r1, r1
    3218:	08 95       	ret

0000321a <__mulshisi3>:
    321a:	b7 ff       	sbrs	r27, 7
    321c:	0c 94 02 19 	jmp	0x3204	; 0x3204 <__muluhisi3>

00003220 <__mulohisi3>:
    3220:	0e 94 02 19 	call	0x3204	; 0x3204 <__muluhisi3>
    3224:	82 1b       	sub	r24, r18
    3226:	93 0b       	sbc	r25, r19
    3228:	08 95       	ret

0000322a <__prologue_saves__>:
    322a:	2f 92       	push	r2
    322c:	3f 92       	push	r3
    322e:	4f 92       	push	r4
    3230:	5f 92       	push	r5
    3232:	6f 92       	push	r6
    3234:	7f 92       	push	r7
    3236:	8f 92       	push	r8
    3238:	9f 92       	push	r9
    323a:	af 92       	push	r10
    323c:	bf 92       	push	r11
    323e:	cf 92       	push	r12
    3240:	df 92       	push	r13
    3242:	ef 92       	push	r14
    3244:	ff 92       	push	r15
    3246:	0f 93       	push	r16
    3248:	1f 93       	push	r17
    324a:	cf 93       	push	r28
    324c:	df 93       	push	r29
    324e:	cd b7       	in	r28, 0x3d	; 61
    3250:	de b7       	in	r29, 0x3e	; 62
    3252:	ca 1b       	sub	r28, r26
    3254:	db 0b       	sbc	r29, r27
    3256:	0f b6       	in	r0, 0x3f	; 63
    3258:	f8 94       	cli
    325a:	de bf       	out	0x3e, r29	; 62
    325c:	0f be       	out	0x3f, r0	; 63
    325e:	cd bf       	out	0x3d, r28	; 61
    3260:	09 94       	ijmp

00003262 <__epilogue_restores__>:
    3262:	2a 88       	ldd	r2, Y+18	; 0x12
    3264:	39 88       	ldd	r3, Y+17	; 0x11
    3266:	48 88       	ldd	r4, Y+16	; 0x10
    3268:	5f 84       	ldd	r5, Y+15	; 0x0f
    326a:	6e 84       	ldd	r6, Y+14	; 0x0e
    326c:	7d 84       	ldd	r7, Y+13	; 0x0d
    326e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3270:	9b 84       	ldd	r9, Y+11	; 0x0b
    3272:	aa 84       	ldd	r10, Y+10	; 0x0a
    3274:	b9 84       	ldd	r11, Y+9	; 0x09
    3276:	c8 84       	ldd	r12, Y+8	; 0x08
    3278:	df 80       	ldd	r13, Y+7	; 0x07
    327a:	ee 80       	ldd	r14, Y+6	; 0x06
    327c:	fd 80       	ldd	r15, Y+5	; 0x05
    327e:	0c 81       	ldd	r16, Y+4	; 0x04
    3280:	1b 81       	ldd	r17, Y+3	; 0x03
    3282:	aa 81       	ldd	r26, Y+2	; 0x02
    3284:	b9 81       	ldd	r27, Y+1	; 0x01
    3286:	ce 0f       	add	r28, r30
    3288:	d1 1d       	adc	r29, r1
    328a:	0f b6       	in	r0, 0x3f	; 63
    328c:	f8 94       	cli
    328e:	de bf       	out	0x3e, r29	; 62
    3290:	0f be       	out	0x3f, r0	; 63
    3292:	cd bf       	out	0x3d, r28	; 61
    3294:	ed 01       	movw	r28, r26
    3296:	08 95       	ret

00003298 <malloc>:
    3298:	0f 93       	push	r16
    329a:	1f 93       	push	r17
    329c:	cf 93       	push	r28
    329e:	df 93       	push	r29
    32a0:	82 30       	cpi	r24, 0x02	; 2
    32a2:	91 05       	cpc	r25, r1
    32a4:	10 f4       	brcc	.+4      	; 0x32aa <malloc+0x12>
    32a6:	82 e0       	ldi	r24, 0x02	; 2
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	e0 91 6e 02 	lds	r30, 0x026E	; 0x80026e <__flp>
    32ae:	f0 91 6f 02 	lds	r31, 0x026F	; 0x80026f <__flp+0x1>
    32b2:	20 e0       	ldi	r18, 0x00	; 0
    32b4:	30 e0       	ldi	r19, 0x00	; 0
    32b6:	a0 e0       	ldi	r26, 0x00	; 0
    32b8:	b0 e0       	ldi	r27, 0x00	; 0
    32ba:	30 97       	sbiw	r30, 0x00	; 0
    32bc:	19 f1       	breq	.+70     	; 0x3304 <malloc+0x6c>
    32be:	40 81       	ld	r20, Z
    32c0:	51 81       	ldd	r21, Z+1	; 0x01
    32c2:	02 81       	ldd	r16, Z+2	; 0x02
    32c4:	13 81       	ldd	r17, Z+3	; 0x03
    32c6:	48 17       	cp	r20, r24
    32c8:	59 07       	cpc	r21, r25
    32ca:	c8 f0       	brcs	.+50     	; 0x32fe <malloc+0x66>
    32cc:	84 17       	cp	r24, r20
    32ce:	95 07       	cpc	r25, r21
    32d0:	69 f4       	brne	.+26     	; 0x32ec <malloc+0x54>
    32d2:	10 97       	sbiw	r26, 0x00	; 0
    32d4:	31 f0       	breq	.+12     	; 0x32e2 <malloc+0x4a>
    32d6:	12 96       	adiw	r26, 0x02	; 2
    32d8:	0c 93       	st	X, r16
    32da:	12 97       	sbiw	r26, 0x02	; 2
    32dc:	13 96       	adiw	r26, 0x03	; 3
    32de:	1c 93       	st	X, r17
    32e0:	27 c0       	rjmp	.+78     	; 0x3330 <malloc+0x98>
    32e2:	00 93 6e 02 	sts	0x026E, r16	; 0x80026e <__flp>
    32e6:	10 93 6f 02 	sts	0x026F, r17	; 0x80026f <__flp+0x1>
    32ea:	22 c0       	rjmp	.+68     	; 0x3330 <malloc+0x98>
    32ec:	21 15       	cp	r18, r1
    32ee:	31 05       	cpc	r19, r1
    32f0:	19 f0       	breq	.+6      	; 0x32f8 <malloc+0x60>
    32f2:	42 17       	cp	r20, r18
    32f4:	53 07       	cpc	r21, r19
    32f6:	18 f4       	brcc	.+6      	; 0x32fe <malloc+0x66>
    32f8:	9a 01       	movw	r18, r20
    32fa:	bd 01       	movw	r22, r26
    32fc:	ef 01       	movw	r28, r30
    32fe:	df 01       	movw	r26, r30
    3300:	f8 01       	movw	r30, r16
    3302:	db cf       	rjmp	.-74     	; 0x32ba <malloc+0x22>
    3304:	21 15       	cp	r18, r1
    3306:	31 05       	cpc	r19, r1
    3308:	f9 f0       	breq	.+62     	; 0x3348 <malloc+0xb0>
    330a:	28 1b       	sub	r18, r24
    330c:	39 0b       	sbc	r19, r25
    330e:	24 30       	cpi	r18, 0x04	; 4
    3310:	31 05       	cpc	r19, r1
    3312:	80 f4       	brcc	.+32     	; 0x3334 <malloc+0x9c>
    3314:	8a 81       	ldd	r24, Y+2	; 0x02
    3316:	9b 81       	ldd	r25, Y+3	; 0x03
    3318:	61 15       	cp	r22, r1
    331a:	71 05       	cpc	r23, r1
    331c:	21 f0       	breq	.+8      	; 0x3326 <malloc+0x8e>
    331e:	fb 01       	movw	r30, r22
    3320:	93 83       	std	Z+3, r25	; 0x03
    3322:	82 83       	std	Z+2, r24	; 0x02
    3324:	04 c0       	rjmp	.+8      	; 0x332e <malloc+0x96>
    3326:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <__flp+0x1>
    332a:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <__flp>
    332e:	fe 01       	movw	r30, r28
    3330:	32 96       	adiw	r30, 0x02	; 2
    3332:	44 c0       	rjmp	.+136    	; 0x33bc <malloc+0x124>
    3334:	fe 01       	movw	r30, r28
    3336:	e2 0f       	add	r30, r18
    3338:	f3 1f       	adc	r31, r19
    333a:	81 93       	st	Z+, r24
    333c:	91 93       	st	Z+, r25
    333e:	22 50       	subi	r18, 0x02	; 2
    3340:	31 09       	sbc	r19, r1
    3342:	39 83       	std	Y+1, r19	; 0x01
    3344:	28 83       	st	Y, r18
    3346:	3a c0       	rjmp	.+116    	; 0x33bc <malloc+0x124>
    3348:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <__brkval>
    334c:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <__brkval+0x1>
    3350:	23 2b       	or	r18, r19
    3352:	41 f4       	brne	.+16     	; 0x3364 <malloc+0xcc>
    3354:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__malloc_heap_start>
    3358:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__malloc_heap_start+0x1>
    335c:	30 93 6d 02 	sts	0x026D, r19	; 0x80026d <__brkval+0x1>
    3360:	20 93 6c 02 	sts	0x026C, r18	; 0x80026c <__brkval>
    3364:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__malloc_heap_end>
    3368:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__malloc_heap_end+0x1>
    336c:	21 15       	cp	r18, r1
    336e:	31 05       	cpc	r19, r1
    3370:	41 f4       	brne	.+16     	; 0x3382 <malloc+0xea>
    3372:	2d b7       	in	r18, 0x3d	; 61
    3374:	3e b7       	in	r19, 0x3e	; 62
    3376:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__malloc_margin>
    337a:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__malloc_margin+0x1>
    337e:	24 1b       	sub	r18, r20
    3380:	35 0b       	sbc	r19, r21
    3382:	e0 91 6c 02 	lds	r30, 0x026C	; 0x80026c <__brkval>
    3386:	f0 91 6d 02 	lds	r31, 0x026D	; 0x80026d <__brkval+0x1>
    338a:	e2 17       	cp	r30, r18
    338c:	f3 07       	cpc	r31, r19
    338e:	a0 f4       	brcc	.+40     	; 0x33b8 <malloc+0x120>
    3390:	2e 1b       	sub	r18, r30
    3392:	3f 0b       	sbc	r19, r31
    3394:	28 17       	cp	r18, r24
    3396:	39 07       	cpc	r19, r25
    3398:	78 f0       	brcs	.+30     	; 0x33b8 <malloc+0x120>
    339a:	ac 01       	movw	r20, r24
    339c:	4e 5f       	subi	r20, 0xFE	; 254
    339e:	5f 4f       	sbci	r21, 0xFF	; 255
    33a0:	24 17       	cp	r18, r20
    33a2:	35 07       	cpc	r19, r21
    33a4:	48 f0       	brcs	.+18     	; 0x33b8 <malloc+0x120>
    33a6:	4e 0f       	add	r20, r30
    33a8:	5f 1f       	adc	r21, r31
    33aa:	50 93 6d 02 	sts	0x026D, r21	; 0x80026d <__brkval+0x1>
    33ae:	40 93 6c 02 	sts	0x026C, r20	; 0x80026c <__brkval>
    33b2:	81 93       	st	Z+, r24
    33b4:	91 93       	st	Z+, r25
    33b6:	02 c0       	rjmp	.+4      	; 0x33bc <malloc+0x124>
    33b8:	e0 e0       	ldi	r30, 0x00	; 0
    33ba:	f0 e0       	ldi	r31, 0x00	; 0
    33bc:	cf 01       	movw	r24, r30
    33be:	df 91       	pop	r29
    33c0:	cf 91       	pop	r28
    33c2:	1f 91       	pop	r17
    33c4:	0f 91       	pop	r16
    33c6:	08 95       	ret

000033c8 <free>:
    33c8:	cf 93       	push	r28
    33ca:	df 93       	push	r29
    33cc:	00 97       	sbiw	r24, 0x00	; 0
    33ce:	09 f4       	brne	.+2      	; 0x33d2 <free+0xa>
    33d0:	81 c0       	rjmp	.+258    	; 0x34d4 <free+0x10c>
    33d2:	fc 01       	movw	r30, r24
    33d4:	32 97       	sbiw	r30, 0x02	; 2
    33d6:	13 82       	std	Z+3, r1	; 0x03
    33d8:	12 82       	std	Z+2, r1	; 0x02
    33da:	a0 91 6e 02 	lds	r26, 0x026E	; 0x80026e <__flp>
    33de:	b0 91 6f 02 	lds	r27, 0x026F	; 0x80026f <__flp+0x1>
    33e2:	10 97       	sbiw	r26, 0x00	; 0
    33e4:	81 f4       	brne	.+32     	; 0x3406 <free+0x3e>
    33e6:	20 81       	ld	r18, Z
    33e8:	31 81       	ldd	r19, Z+1	; 0x01
    33ea:	82 0f       	add	r24, r18
    33ec:	93 1f       	adc	r25, r19
    33ee:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <__brkval>
    33f2:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <__brkval+0x1>
    33f6:	28 17       	cp	r18, r24
    33f8:	39 07       	cpc	r19, r25
    33fa:	51 f5       	brne	.+84     	; 0x3450 <free+0x88>
    33fc:	f0 93 6d 02 	sts	0x026D, r31	; 0x80026d <__brkval+0x1>
    3400:	e0 93 6c 02 	sts	0x026C, r30	; 0x80026c <__brkval>
    3404:	67 c0       	rjmp	.+206    	; 0x34d4 <free+0x10c>
    3406:	ed 01       	movw	r28, r26
    3408:	20 e0       	ldi	r18, 0x00	; 0
    340a:	30 e0       	ldi	r19, 0x00	; 0
    340c:	ce 17       	cp	r28, r30
    340e:	df 07       	cpc	r29, r31
    3410:	40 f4       	brcc	.+16     	; 0x3422 <free+0x5a>
    3412:	4a 81       	ldd	r20, Y+2	; 0x02
    3414:	5b 81       	ldd	r21, Y+3	; 0x03
    3416:	9e 01       	movw	r18, r28
    3418:	41 15       	cp	r20, r1
    341a:	51 05       	cpc	r21, r1
    341c:	f1 f0       	breq	.+60     	; 0x345a <free+0x92>
    341e:	ea 01       	movw	r28, r20
    3420:	f5 cf       	rjmp	.-22     	; 0x340c <free+0x44>
    3422:	d3 83       	std	Z+3, r29	; 0x03
    3424:	c2 83       	std	Z+2, r28	; 0x02
    3426:	40 81       	ld	r20, Z
    3428:	51 81       	ldd	r21, Z+1	; 0x01
    342a:	84 0f       	add	r24, r20
    342c:	95 1f       	adc	r25, r21
    342e:	c8 17       	cp	r28, r24
    3430:	d9 07       	cpc	r29, r25
    3432:	59 f4       	brne	.+22     	; 0x344a <free+0x82>
    3434:	88 81       	ld	r24, Y
    3436:	99 81       	ldd	r25, Y+1	; 0x01
    3438:	84 0f       	add	r24, r20
    343a:	95 1f       	adc	r25, r21
    343c:	02 96       	adiw	r24, 0x02	; 2
    343e:	91 83       	std	Z+1, r25	; 0x01
    3440:	80 83       	st	Z, r24
    3442:	8a 81       	ldd	r24, Y+2	; 0x02
    3444:	9b 81       	ldd	r25, Y+3	; 0x03
    3446:	93 83       	std	Z+3, r25	; 0x03
    3448:	82 83       	std	Z+2, r24	; 0x02
    344a:	21 15       	cp	r18, r1
    344c:	31 05       	cpc	r19, r1
    344e:	29 f4       	brne	.+10     	; 0x345a <free+0x92>
    3450:	f0 93 6f 02 	sts	0x026F, r31	; 0x80026f <__flp+0x1>
    3454:	e0 93 6e 02 	sts	0x026E, r30	; 0x80026e <__flp>
    3458:	3d c0       	rjmp	.+122    	; 0x34d4 <free+0x10c>
    345a:	e9 01       	movw	r28, r18
    345c:	fb 83       	std	Y+3, r31	; 0x03
    345e:	ea 83       	std	Y+2, r30	; 0x02
    3460:	49 91       	ld	r20, Y+
    3462:	59 91       	ld	r21, Y+
    3464:	c4 0f       	add	r28, r20
    3466:	d5 1f       	adc	r29, r21
    3468:	ec 17       	cp	r30, r28
    346a:	fd 07       	cpc	r31, r29
    346c:	61 f4       	brne	.+24     	; 0x3486 <free+0xbe>
    346e:	80 81       	ld	r24, Z
    3470:	91 81       	ldd	r25, Z+1	; 0x01
    3472:	84 0f       	add	r24, r20
    3474:	95 1f       	adc	r25, r21
    3476:	02 96       	adiw	r24, 0x02	; 2
    3478:	e9 01       	movw	r28, r18
    347a:	99 83       	std	Y+1, r25	; 0x01
    347c:	88 83       	st	Y, r24
    347e:	82 81       	ldd	r24, Z+2	; 0x02
    3480:	93 81       	ldd	r25, Z+3	; 0x03
    3482:	9b 83       	std	Y+3, r25	; 0x03
    3484:	8a 83       	std	Y+2, r24	; 0x02
    3486:	e0 e0       	ldi	r30, 0x00	; 0
    3488:	f0 e0       	ldi	r31, 0x00	; 0
    348a:	12 96       	adiw	r26, 0x02	; 2
    348c:	8d 91       	ld	r24, X+
    348e:	9c 91       	ld	r25, X
    3490:	13 97       	sbiw	r26, 0x03	; 3
    3492:	00 97       	sbiw	r24, 0x00	; 0
    3494:	19 f0       	breq	.+6      	; 0x349c <free+0xd4>
    3496:	fd 01       	movw	r30, r26
    3498:	dc 01       	movw	r26, r24
    349a:	f7 cf       	rjmp	.-18     	; 0x348a <free+0xc2>
    349c:	8d 91       	ld	r24, X+
    349e:	9c 91       	ld	r25, X
    34a0:	11 97       	sbiw	r26, 0x01	; 1
    34a2:	9d 01       	movw	r18, r26
    34a4:	2e 5f       	subi	r18, 0xFE	; 254
    34a6:	3f 4f       	sbci	r19, 0xFF	; 255
    34a8:	82 0f       	add	r24, r18
    34aa:	93 1f       	adc	r25, r19
    34ac:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <__brkval>
    34b0:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <__brkval+0x1>
    34b4:	28 17       	cp	r18, r24
    34b6:	39 07       	cpc	r19, r25
    34b8:	69 f4       	brne	.+26     	; 0x34d4 <free+0x10c>
    34ba:	30 97       	sbiw	r30, 0x00	; 0
    34bc:	29 f4       	brne	.+10     	; 0x34c8 <free+0x100>
    34be:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <__flp+0x1>
    34c2:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <__flp>
    34c6:	02 c0       	rjmp	.+4      	; 0x34cc <free+0x104>
    34c8:	13 82       	std	Z+3, r1	; 0x03
    34ca:	12 82       	std	Z+2, r1	; 0x02
    34cc:	b0 93 6d 02 	sts	0x026D, r27	; 0x80026d <__brkval+0x1>
    34d0:	a0 93 6c 02 	sts	0x026C, r26	; 0x80026c <__brkval>
    34d4:	df 91       	pop	r29
    34d6:	cf 91       	pop	r28
    34d8:	08 95       	ret

000034da <__do_global_dtors>:
    34da:	10 e0       	ldi	r17, 0x00	; 0
    34dc:	c2 e5       	ldi	r28, 0x52	; 82
    34de:	d0 e0       	ldi	r29, 0x00	; 0
    34e0:	04 c0       	rjmp	.+8      	; 0x34ea <__do_global_dtors+0x10>
    34e2:	fe 01       	movw	r30, r28
    34e4:	0e 94 ed 18 	call	0x31da	; 0x31da <__tablejump2__>
    34e8:	21 96       	adiw	r28, 0x01	; 1
    34ea:	c3 35       	cpi	r28, 0x53	; 83
    34ec:	d1 07       	cpc	r29, r17
    34ee:	c9 f7       	brne	.-14     	; 0x34e2 <__do_global_dtors+0x8>
    34f0:	f8 94       	cli

000034f2 <__stop_program>:
    34f2:	ff cf       	rjmp	.-2      	; 0x34f2 <__stop_program>
