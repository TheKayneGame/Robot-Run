
RobotRunGrid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  0000319c  00003230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000319c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000dc  0080012a  0080012a  0000325a  2**0
                  ALLOC
  3 .stab         00005538  00000000  00000000  0000325c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000a086  00000000  00000000  00008794  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  0001281a  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001285c  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000128  00000000  00000000  0001289c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000028db  00000000  00000000  000129c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000d6b  00000000  00000000  0001529f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001952  00000000  00000000  0001600a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000003f8  00000000  00000000  0001795c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000008e2  00000000  00000000  00017d54  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000016f0  00000000  00000000  00018636  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000f0  00000000  00000000  00019d26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__dtors_end>
       4:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
       8:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
       c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      10:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      14:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      18:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      1c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      20:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      24:	0c 94 2d 13 	jmp	0x265a	; 0x265a <__vector_9>
      28:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      2c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      30:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      34:	0c 94 5e 10 	jmp	0x20bc	; 0x20bc <__vector_13>
      38:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      3c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      40:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      44:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      48:	0c 94 a5 12 	jmp	0x254a	; 0x254a <__vector_18>
      4c:	0c 94 08 13 	jmp	0x2610	; 0x2610 <__vector_19>
      50:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      54:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      58:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      5c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      60:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      64:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
      68:	ea 01       	movw	r28, r20
      6a:	fc 01       	movw	r30, r24
      6c:	0e 02       	muls	r16, r30
      6e:	20 02       	muls	r18, r16
      70:	31 02       	muls	r19, r17
      72:	42 02       	muls	r20, r18
      74:	54 02       	muls	r21, r20
      76:	6e 02       	muls	r22, r30
      78:	a3 02       	muls	r26, r19
      7a:	b2 02       	muls	r27, r18
      7c:	c1 02       	muls	r28, r17
      7e:	e5 02       	muls	r30, r21
      80:	09 03       	fmul	r16, r17
      82:	2d 03       	fmul	r18, r21
      84:	72 03       	mulsu	r23, r18
      86:	56 03       	mulsu	r21, r22
      88:	05 a8       	ldd	r0, Z+53	; 0x35
      8a:	4c cd       	rjmp	.-1384   	; 0xfffffb24 <__eeprom_end+0xff7efb24>
      8c:	b2 d4       	rcall	.+2404   	; 0x9f2 <main+0x2e>
      8e:	4e b9       	out	0x0e, r20	; 14
      90:	38 36       	cpi	r19, 0x68	; 104
      92:	a9 02       	muls	r26, r25
      94:	0c 50       	subi	r16, 0x0C	; 12
      96:	b9 91       	ld	r27, Y+
      98:	86 88       	ldd	r8, Z+22	; 0x16
      9a:	08 3c       	cpi	r16, 0xC8	; 200
      9c:	a6 aa       	std	Z+54, r10	; 0x36
      9e:	aa 2a       	or	r10, r26
      a0:	be 00       	.word	0x00be	; ????
      a2:	00 00       	nop
      a4:	80 3f       	cpi	r24, 0xF0	; 240

000000a6 <__trampolines_end>:
      a6:	3e 67       	ori	r19, 0x7E	; 126
      a8:	33 32       	cpi	r19, 0x23	; 35
      aa:	3e 3e       	cpi	r19, 0xEE	; 238
      ac:	63 33       	cpi	r22, 0x33	; 51
      ae:	32 00       	.word	0x0032	; ????

000000b0 <__c.2346>:
      b0:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

000000ba <__c.2341>:
      ba:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

000000c4 <__ctors_end>:
      c4:	b8 13       	cpse	r27, r24

000000c6 <__dtors_end>:
      c6:	11 24       	eor	r1, r1
      c8:	1f be       	out	0x3f, r1	; 63
      ca:	cf ef       	ldi	r28, 0xFF	; 255
      cc:	d8 e0       	ldi	r29, 0x08	; 8
      ce:	de bf       	out	0x3e, r29	; 62
      d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_copy_data>:
      d2:	11 e0       	ldi	r17, 0x01	; 1
      d4:	a0 e0       	ldi	r26, 0x00	; 0
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	ec e9       	ldi	r30, 0x9C	; 156
      da:	f1 e3       	ldi	r31, 0x31	; 49
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <__do_copy_data+0x10>
      de:	05 90       	lpm	r0, Z+
      e0:	0d 92       	st	X+, r0
      e2:	aa 32       	cpi	r26, 0x2A	; 42
      e4:	b1 07       	cpc	r27, r17
      e6:	d9 f7       	brne	.-10     	; 0xde <__do_copy_data+0xc>

000000e8 <__do_clear_bss>:
      e8:	22 e0       	ldi	r18, 0x02	; 2
      ea:	aa e2       	ldi	r26, 0x2A	; 42
      ec:	b1 e0       	ldi	r27, 0x01	; 1
      ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
      f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
      f2:	a6 30       	cpi	r26, 0x06	; 6
      f4:	b2 07       	cpc	r27, r18
      f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>
      f8:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <main>
      fc:	0c 94 c1 18 	jmp	0x3182	; 0x3182 <__do_global_dtors>

00000100 <__bad_interrupt>:
     100:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000104 <wirMain>:

#include <pololu/3pi.h>
#include "wireless.h"

void wirMain(int orderX[], int orderY[]){
	play_from_program_space(PSTR(">g32>>c32"));  // Play welcoming notes.
     104:	86 ea       	ldi	r24, 0xA6	; 166
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	0e 94 bd 10 	call	0x217a	; 0x217a <play_from_program_space>
     10c:	08 95       	ret

0000010e <swapOne>:
	temp = *secondYValue;                                                                               //swap Y-coordinates
	*secondYValue = *firstYValue;
	*firstYValue = temp;
}

void swapOne(float *firstValue, float *secondValue) {
     10e:	cf 92       	push	r12
     110:	df 92       	push	r13
     112:	ef 92       	push	r14
     114:	ff 92       	push	r15
     116:	0f 93       	push	r16
     118:	1f 93       	push	r17
	float temp;

	temp = *secondValue;
     11a:	fb 01       	movw	r30, r22
     11c:	00 81       	ld	r16, Z
     11e:	11 81       	ldd	r17, Z+1	; 0x01
     120:	22 81       	ldd	r18, Z+2	; 0x02
     122:	33 81       	ldd	r19, Z+3	; 0x03
	*secondValue = *firstValue;
     124:	fc 01       	movw	r30, r24
     126:	c0 80       	ld	r12, Z
     128:	d1 80       	ldd	r13, Z+1	; 0x01
     12a:	e2 80       	ldd	r14, Z+2	; 0x02
     12c:	f3 80       	ldd	r15, Z+3	; 0x03
     12e:	fb 01       	movw	r30, r22
     130:	c0 82       	st	Z, r12
     132:	d1 82       	std	Z+1, r13	; 0x01
     134:	e2 82       	std	Z+2, r14	; 0x02
     136:	f3 82       	std	Z+3, r15	; 0x03
	*firstValue = temp;
     138:	fc 01       	movw	r30, r24
     13a:	00 83       	st	Z, r16
     13c:	11 83       	std	Z+1, r17	; 0x01
     13e:	22 83       	std	Z+2, r18	; 0x02
     140:	33 83       	std	Z+3, r19	; 0x03
}
     142:	1f 91       	pop	r17
     144:	0f 91       	pop	r16
     146:	ff 90       	pop	r15
     148:	ef 90       	pop	r14
     14a:	df 90       	pop	r13
     14c:	cf 90       	pop	r12
     14e:	08 95       	ret

00000150 <sortOrder>:

void sortOrder(int X[], int Y[]) {
     150:	2f 92       	push	r2
     152:	3f 92       	push	r3
     154:	4f 92       	push	r4
     156:	5f 92       	push	r5
     158:	6f 92       	push	r6
     15a:	7f 92       	push	r7
     15c:	8f 92       	push	r8
     15e:	9f 92       	push	r9
     160:	af 92       	push	r10
     162:	bf 92       	push	r11
     164:	cf 92       	push	r12
     166:	df 92       	push	r13
     168:	ef 92       	push	r14
     16a:	ff 92       	push	r15
     16c:	0f 93       	push	r16
     16e:	1f 93       	push	r17
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
     174:	cd b7       	in	r28, 0x3d	; 61
     176:	de b7       	in	r29, 0x3e	; 62
     178:	a5 97       	sbiw	r28, 0x25	; 37
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	9b a3       	std	Y+35, r25	; 0x23
     186:	8a a3       	std	Y+34, r24	; 0x22
     188:	6c a3       	std	Y+36, r22	; 0x24
     18a:	7d a3       	std	Y+37, r23	; 0x25
     18c:	06 96       	adiw	r24, 0x06	; 6
     18e:	98 a3       	std	Y+32, r25	; 0x20
     190:	8f 8f       	std	Y+31, r24	; 0x1f
     192:	b6 c0       	rjmp	.+364    	; 0x300 <sortOrder+0x1b0>
     194:	7e 8e       	std	Y+30, r7	; 0x1e
     196:	6d 8e       	std	Y+29, r6	; 0x1d

	while (check != 1) {
		orderCorrect = 1;

		for (int i = 0; i < (sizeOfOrder - 1); i++) {
			Distance[i] = sqrt((pow(X[i], 2)) + (pow(Y[i], 2)));      //Pythagoras
     198:	f3 01       	movw	r30, r6
     19a:	01 90       	ld	r0, Z+
     19c:	f0 81       	ld	r31, Z
     19e:	e0 2d       	mov	r30, r0
     1a0:	fa 8f       	std	Y+26, r31	; 0x1a
     1a2:	e9 8f       	std	Y+25, r30	; 0x19
     1a4:	bf 01       	movw	r22, r30
     1a6:	ff 0f       	add	r31, r31
     1a8:	88 0b       	sbc	r24, r24
     1aa:	99 0b       	sbc	r25, r25
     1ac:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__floatsisf>
     1b0:	6b 01       	movw	r12, r22
     1b2:	7c 01       	movw	r14, r24
     1b4:	3c 8e       	std	Y+28, r3	; 0x1c
     1b6:	2b 8e       	std	Y+27, r2	; 0x1b
     1b8:	f1 01       	movw	r30, r2
     1ba:	00 81       	ld	r16, Z
     1bc:	11 81       	ldd	r17, Z+1	; 0x01
     1be:	b8 01       	movw	r22, r16
     1c0:	01 2e       	mov	r0, r17
     1c2:	00 0c       	add	r0, r0
     1c4:	88 0b       	sbc	r24, r24
     1c6:	99 0b       	sbc	r25, r25
     1c8:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__floatsisf>
     1cc:	4b 01       	movw	r8, r22
     1ce:	5c 01       	movw	r10, r24
     1d0:	9b 01       	movw	r18, r22
     1d2:	ac 01       	movw	r20, r24
     1d4:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
     1d8:	69 8b       	std	Y+17, r22	; 0x11
     1da:	7a 8b       	std	Y+18, r23	; 0x12
     1dc:	8b 8b       	std	Y+19, r24	; 0x13
     1de:	9c 8b       	std	Y+20, r25	; 0x14
     1e0:	a5 01       	movw	r20, r10
     1e2:	94 01       	movw	r18, r8
     1e4:	c5 01       	movw	r24, r10
     1e6:	b4 01       	movw	r22, r8
     1e8:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
     1ec:	4b 01       	movw	r8, r22
     1ee:	5c 01       	movw	r10, r24
     1f0:	a7 01       	movw	r20, r14
     1f2:	96 01       	movw	r18, r12
     1f4:	c7 01       	movw	r24, r14
     1f6:	b6 01       	movw	r22, r12
     1f8:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
     1fc:	9b 01       	movw	r18, r22
     1fe:	ac 01       	movw	r20, r24
     200:	c5 01       	movw	r24, r10
     202:	b4 01       	movw	r22, r8
     204:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__addsf3>
     208:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <sqrt>
     20c:	6b 01       	movw	r12, r22
     20e:	7c 01       	movw	r14, r24
     210:	f2 01       	movw	r30, r4
     212:	61 93       	st	Z+, r22
     214:	71 93       	st	Z+, r23
     216:	81 93       	st	Z+, r24
     218:	91 93       	st	Z+, r25
     21a:	2f 01       	movw	r4, r30
     21c:	e9 8b       	std	Y+17, r30	; 0x11
     21e:	59 a2       	std	Y+33, r5	; 0x21
			firstDistanceValue =  Distance[i];
			secondDistanceValue =  Distance[i + 1];
     220:	80 80       	ld	r8, Z
     222:	91 80       	ldd	r9, Z+1	; 0x01
     224:	a2 80       	ldd	r10, Z+2	; 0x02
     226:	b3 80       	ldd	r11, Z+3	; 0x03

			if ( Distance[i] >  Distance[i + 1]) {
     228:	a5 01       	movw	r20, r10
     22a:	94 01       	movw	r18, r8
     22c:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <__gesf2>
     230:	18 16       	cp	r1, r24
     232:	d4 f4       	brge	.+52     	; 0x268 <sortOrder+0x118>
				swapOne(& Distance[i], & Distance[i + 1]);
     234:	b2 01       	movw	r22, r4
     236:	8d 89       	ldd	r24, Y+21	; 0x15
     238:	9e 89       	ldd	r25, Y+22	; 0x16
     23a:	0e 94 87 00 	call	0x10e	; 0x10e <swapOne>


void swapTwo( int *firstXValue, int *secondXValue, int *firstYValue, int *secondYValue){
	int temp;

	temp = *secondXValue;                                                                               //swap X-coordinates
     23e:	f3 01       	movw	r30, r6
     240:	82 81       	ldd	r24, Z+2	; 0x02
     242:	93 81       	ldd	r25, Z+3	; 0x03
	*secondXValue = *firstXValue;
     244:	20 81       	ld	r18, Z
     246:	31 81       	ldd	r19, Z+1	; 0x01
     248:	33 83       	std	Z+3, r19	; 0x03
     24a:	22 83       	std	Z+2, r18	; 0x02
	*firstXValue = temp;
     24c:	91 83       	std	Z+1, r25	; 0x01
     24e:	80 83       	st	Z, r24

	temp = *secondYValue;                                                                               //swap Y-coordinates
     250:	f1 01       	movw	r30, r2
     252:	82 81       	ldd	r24, Z+2	; 0x02
     254:	93 81       	ldd	r25, Z+3	; 0x03
	*secondYValue = *firstYValue;
     256:	20 81       	ld	r18, Z
     258:	31 81       	ldd	r19, Z+1	; 0x01
     25a:	33 83       	std	Z+3, r19	; 0x03
     25c:	22 83       	std	Z+2, r18	; 0x02
	*firstYValue = temp;
     25e:	91 83       	std	Z+1, r25	; 0x01
     260:	80 83       	st	Z, r24
			secondDistanceValue =  Distance[i + 1];

			if ( Distance[i] >  Distance[i + 1]) {
				swapOne(& Distance[i], & Distance[i + 1]);
				swapTwo(&X[i], &X[i + 1], &Y[i], &Y[i + 1]);
				orderCorrect = 0;
     262:	1f 8a       	std	Y+23, r1	; 0x17
     264:	18 8e       	std	Y+24, r1	; 0x18
     266:	36 c0       	rjmp	.+108    	; 0x2d4 <sortOrder+0x184>
				} else if ((firstDistanceValue == secondDistanceValue) && (Y[i] == Y[i + 1])) {
     268:	c7 01       	movw	r24, r14
     26a:	b6 01       	movw	r22, r12
     26c:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__fixsfsi>
     270:	7b 01       	movw	r14, r22
     272:	c5 01       	movw	r24, r10
     274:	b4 01       	movw	r22, r8
     276:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__fixsfsi>
     27a:	e6 16       	cp	r14, r22
     27c:	f7 06       	cpc	r15, r23
     27e:	51 f5       	brne	.+84     	; 0x2d4 <sortOrder+0x184>
     280:	eb 8d       	ldd	r30, Y+27	; 0x1b
     282:	fc 8d       	ldd	r31, Y+28	; 0x1c
     284:	82 81       	ldd	r24, Z+2	; 0x02
     286:	93 81       	ldd	r25, Z+3	; 0x03
     288:	08 17       	cp	r16, r24
     28a:	19 07       	cpc	r17, r25
     28c:	19 f5       	brne	.+70     	; 0x2d4 <sortOrder+0x184>
				if (X[i] < X[i + 1]) {
     28e:	ed 8d       	ldd	r30, Y+29	; 0x1d
     290:	fe 8d       	ldd	r31, Y+30	; 0x1e
     292:	82 81       	ldd	r24, Z+2	; 0x02
     294:	93 81       	ldd	r25, Z+3	; 0x03
     296:	29 8d       	ldd	r18, Y+25	; 0x19
     298:	3a 8d       	ldd	r19, Y+26	; 0x1a
     29a:	28 17       	cp	r18, r24
     29c:	39 07       	cpc	r19, r25
     29e:	d4 f4       	brge	.+52     	; 0x2d4 <sortOrder+0x184>
					swapOne(& Distance[i], & Distance[i + 1]);
     2a0:	69 89       	ldd	r22, Y+17	; 0x11
     2a2:	79 a1       	ldd	r23, Y+33	; 0x21
     2a4:	8d 89       	ldd	r24, Y+21	; 0x15
     2a6:	9e 89       	ldd	r25, Y+22	; 0x16
     2a8:	0e 94 87 00 	call	0x10e	; 0x10e <swapOne>


void swapTwo( int *firstXValue, int *secondXValue, int *firstYValue, int *secondYValue){
	int temp;

	temp = *secondXValue;                                                                               //swap X-coordinates
     2ac:	ed 8d       	ldd	r30, Y+29	; 0x1d
     2ae:	fe 8d       	ldd	r31, Y+30	; 0x1e
     2b0:	82 81       	ldd	r24, Z+2	; 0x02
     2b2:	93 81       	ldd	r25, Z+3	; 0x03
	*secondXValue = *firstXValue;
     2b4:	20 81       	ld	r18, Z
     2b6:	31 81       	ldd	r19, Z+1	; 0x01
     2b8:	33 83       	std	Z+3, r19	; 0x03
     2ba:	22 83       	std	Z+2, r18	; 0x02
	*firstXValue = temp;
     2bc:	91 83       	std	Z+1, r25	; 0x01
     2be:	80 83       	st	Z, r24

	temp = *secondYValue;                                                                               //swap Y-coordinates
     2c0:	eb 8d       	ldd	r30, Y+27	; 0x1b
     2c2:	fc 8d       	ldd	r31, Y+28	; 0x1c
     2c4:	82 81       	ldd	r24, Z+2	; 0x02
     2c6:	93 81       	ldd	r25, Z+3	; 0x03
	*secondYValue = *firstYValue;
     2c8:	20 81       	ld	r18, Z
     2ca:	31 81       	ldd	r19, Z+1	; 0x01
     2cc:	33 83       	std	Z+3, r19	; 0x03
     2ce:	22 83       	std	Z+2, r18	; 0x02
	*firstYValue = temp;
     2d0:	91 83       	std	Z+1, r25	; 0x01
     2d2:	80 83       	st	Z, r24
     2d4:	f2 e0       	ldi	r31, 0x02	; 2
     2d6:	6f 0e       	add	r6, r31
     2d8:	71 1c       	adc	r7, r1
     2da:	22 e0       	ldi	r18, 0x02	; 2
     2dc:	22 0e       	add	r2, r18
     2de:	31 1c       	adc	r3, r1
     2e0:	8d 89       	ldd	r24, Y+21	; 0x15
     2e2:	9e 89       	ldd	r25, Y+22	; 0x16
     2e4:	04 96       	adiw	r24, 0x04	; 4
     2e6:	9e 8b       	std	Y+22, r25	; 0x16
     2e8:	8d 8b       	std	Y+21, r24	; 0x15
	float Distance[sizeOfOrder];

	while (check != 1) {
		orderCorrect = 1;

		for (int i = 0; i < (sizeOfOrder - 1); i++) {
     2ea:	ef 8d       	ldd	r30, Y+31	; 0x1f
     2ec:	f8 a1       	ldd	r31, Y+32	; 0x20
     2ee:	6e 16       	cp	r6, r30
     2f0:	7f 06       	cpc	r7, r31
     2f2:	09 f0       	breq	.+2      	; 0x2f6 <sortOrder+0x1a6>
     2f4:	4f cf       	rjmp	.-354    	; 0x194 <sortOrder+0x44>
					swapOne(& Distance[i], & Distance[i + 1]);
					swapTwo(&X[i], &X[i + 1], &Y[i], &Y[i + 1]);
				}
			}
		}
		if (orderCorrect == 1) {
     2f6:	2f 89       	ldd	r18, Y+23	; 0x17
     2f8:	38 8d       	ldd	r19, Y+24	; 0x18
     2fa:	21 30       	cpi	r18, 0x01	; 1
     2fc:	31 05       	cpc	r19, r1
     2fe:	69 f0       	breq	.+26     	; 0x31a <sortOrder+0x1ca>
     300:	6a a0       	ldd	r6, Y+34	; 0x22
     302:	7b a0       	ldd	r7, Y+35	; 0x23
     304:	2c a0       	ldd	r2, Y+36	; 0x24
     306:	3d a0       	ldd	r3, Y+37	; 0x25
     308:	ce 01       	movw	r24, r28
     30a:	01 96       	adiw	r24, 0x01	; 1
     30c:	2c 01       	movw	r4, r24
	temp = *secondValue;
	*secondValue = *firstValue;
	*firstValue = temp;
}

void sortOrder(int X[], int Y[]) {
     30e:	9e 8b       	std	Y+22, r25	; 0x16
     310:	8d 8b       	std	Y+21, r24	; 0x15
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	9f 8b       	std	Y+23, r25	; 0x17
     316:	18 8e       	std	Y+24, r1	; 0x18
     318:	3d cf       	rjmp	.-390    	; 0x194 <sortOrder+0x44>
		}
		if (orderCorrect == 1) {
			check = 1;
		}
	}
}
     31a:	a5 96       	adiw	r28, 0x25	; 37
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	f8 94       	cli
     320:	de bf       	out	0x3e, r29	; 62
     322:	0f be       	out	0x3f, r0	; 63
     324:	cd bf       	out	0x3d, r28	; 61
     326:	df 91       	pop	r29
     328:	cf 91       	pop	r28
     32a:	1f 91       	pop	r17
     32c:	0f 91       	pop	r16
     32e:	ff 90       	pop	r15
     330:	ef 90       	pop	r14
     332:	df 90       	pop	r13
     334:	cf 90       	pop	r12
     336:	bf 90       	pop	r11
     338:	af 90       	pop	r10
     33a:	9f 90       	pop	r9
     33c:	8f 90       	pop	r8
     33e:	7f 90       	pop	r7
     340:	6f 90       	pop	r6
     342:	5f 90       	pop	r5
     344:	4f 90       	pop	r4
     346:	3f 90       	pop	r3
     348:	2f 90       	pop	r2
     34a:	08 95       	ret

0000034c <readGrid>:
	}
	driveRoute(route, 1, 1, amountOfIntersects);    //Drive back to home
	play_from_program_space(PSTR(">g32>>c32"));
}

int readGrid(int routes[4][20]){
     34c:	2f 92       	push	r2
     34e:	3f 92       	push	r3
     350:	4f 92       	push	r4
     352:	5f 92       	push	r5
     354:	6f 92       	push	r6
     356:	7f 92       	push	r7
     358:	8f 92       	push	r8
     35a:	9f 92       	push	r9
     35c:	af 92       	push	r10
     35e:	bf 92       	push	r11
     360:	cf 92       	push	r12
     362:	df 92       	push	r13
     364:	ef 92       	push	r14
     366:	ff 92       	push	r15
     368:	0f 93       	push	r16
     36a:	1f 93       	push	r17
     36c:	cf 93       	push	r28
     36e:	df 93       	push	r29
     370:	8c 01       	movw	r16, r24
	int i = 1, grid = 0, numOfIntersects, crossing = 0, routeNum = 1;
	int resultTemp;
	routes[1][0] = 5;                    //Marks beginning of route
     372:	85 e0       	ldi	r24, 0x05	; 5
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	f8 01       	movw	r30, r16
     378:	91 a7       	std	Z+41, r25	; 0x29
     37a:	80 a7       	std	Z+40, r24	; 0x28
	driveRoute(route, 1, 1, amountOfIntersects);    //Drive back to home
	play_from_program_space(PSTR(">g32>>c32"));
}

int readGrid(int routes[4][20]){
	int i = 1, grid = 0, numOfIntersects, crossing = 0, routeNum = 1;
     37c:	c1 e0       	ldi	r28, 0x01	; 1
     37e:	d0 e0       	ldi	r29, 0x00	; 0
			motorControl(70, 'L', 0.89);
			i++;
			routes[0][i] = 6;
			break;
			case 7:              //Dead end
			routes[0][i] = 7;
     380:	0f 2e       	mov	r0, r31
     382:	f7 e0       	ldi	r31, 0x07	; 7
     384:	8f 2e       	mov	r8, r31
     386:	91 2c       	mov	r9, r1
     388:	f0 2d       	mov	r31, r0
			motorControl(80, 'F', 0.89);
			break;
			case 6:               //It is a crossing
			motorControl(70, 'L', 0.89);
			i++;
			routes[0][i] = 6;
     38a:	0f 2e       	mov	r0, r31
     38c:	f6 e0       	ldi	r31, 0x06	; 6
     38e:	af 2e       	mov	r10, r31
     390:	b1 2c       	mov	r11, r1
     392:	f0 2d       	mov	r31, r0
			case 4:                 //R
			routes[0][i] = 4;
			motorControl(80, 'F', 0.89);
			break;
			case 5:                //L
			routes[0][i] = 5;
     394:	0f 2e       	mov	r0, r31
     396:	f5 e0       	ldi	r31, 0x05	; 5
     398:	cf 2e       	mov	r12, r31
     39a:	d1 2c       	mov	r13, r1
     39c:	f0 2d       	mov	r31, r0
			motorControl(70, 'L', 0.89);
			routes[0][i] = 3;
			i++;
			break;
			case 4:                 //R
			routes[0][i] = 4;
     39e:	68 94       	set
     3a0:	ee 24       	eor	r14, r14
     3a2:	e2 f8       	bld	r14, 2
     3a4:	f1 2c       	mov	r15, r1
			motorControl(70, 'L', 0.89);
			i++;
			break;
			case 3:                  //It is a T-crossing    L R
			motorControl(70, 'L', 0.89);
			routes[0][i] = 3;
     3a6:	0f 2e       	mov	r0, r31
     3a8:	f3 e0       	ldi	r31, 0x03	; 3
     3aa:	6f 2e       	mov	r6, r31
     3ac:	71 2c       	mov	r7, r1
     3ae:	f0 2d       	mov	r31, r0
			routes[0][i] = 1;
			motorControl(70, 'R', 0.89);
			i++;
			break;
			case 2:                   //It is a corner to the left
			routes[0][i] = 2;
     3b0:	68 94       	set
     3b2:	44 24       	eor	r4, r4
     3b4:	41 f8       	bld	r4, 1
     3b6:	51 2c       	mov	r5, r1
	routes[1][0] = 5;                    //Marks beginning of route
	do{
		resultTemp = checkAfslag();
		switch(resultTemp){
			case 1:                     //It is a corner to the right
			routes[0][i] = 1;
     3b8:	22 24       	eor	r2, r2
     3ba:	23 94       	inc	r2
     3bc:	31 2c       	mov	r3, r1
int readGrid(int routes[4][20]){
	int i = 1, grid = 0, numOfIntersects, crossing = 0, routeNum = 1;
	int resultTemp;
	routes[1][0] = 5;                    //Marks beginning of route
	do{
		resultTemp = checkAfslag();
     3be:	0e 94 c7 09 	call	0x138e	; 0x138e <checkAfslag>
		switch(resultTemp){
     3c2:	01 97       	sbiw	r24, 0x01	; 1
     3c4:	88 30       	cpi	r24, 0x08	; 8
     3c6:	91 05       	cpc	r25, r1
     3c8:	d0 f7       	brcc	.-12     	; 0x3be <readGrid+0x72>
     3ca:	8c 5c       	subi	r24, 0xCC	; 204
     3cc:	9f 4f       	sbci	r25, 0xFF	; 255
     3ce:	fc 01       	movw	r30, r24
     3d0:	0c 94 41 17 	jmp	0x2e82	; 0x2e82 <__tablejump2__>
			case 1:                     //It is a corner to the right
			routes[0][i] = 1;
     3d4:	fe 01       	movw	r30, r28
     3d6:	ee 0f       	add	r30, r30
     3d8:	ff 1f       	adc	r31, r31
     3da:	e0 0f       	add	r30, r16
     3dc:	f1 1f       	adc	r31, r17
     3de:	31 82       	std	Z+1, r3	; 0x01
     3e0:	20 82       	st	Z, r2
			motorControl(70, 'R', 0.89);
     3e2:	2a e0       	ldi	r18, 0x0A	; 10
     3e4:	37 ed       	ldi	r19, 0xD7	; 215
     3e6:	43 e6       	ldi	r20, 0x63	; 99
     3e8:	5f e3       	ldi	r21, 0x3F	; 63
     3ea:	62 e5       	ldi	r22, 0x52	; 82
     3ec:	86 e4       	ldi	r24, 0x46	; 70
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	0e 94 26 05 	call	0xa4c	; 0xa4c <motorControl>
			i++;
     3f4:	21 96       	adiw	r28, 0x01	; 1
			break;
     3f6:	e3 cf       	rjmp	.-58     	; 0x3be <readGrid+0x72>
			case 2:                   //It is a corner to the left
			routes[0][i] = 2;
     3f8:	fe 01       	movw	r30, r28
     3fa:	ee 0f       	add	r30, r30
     3fc:	ff 1f       	adc	r31, r31
     3fe:	e0 0f       	add	r30, r16
     400:	f1 1f       	adc	r31, r17
     402:	51 82       	std	Z+1, r5	; 0x01
     404:	40 82       	st	Z, r4
			motorControl(70, 'L', 0.89);
     406:	2a e0       	ldi	r18, 0x0A	; 10
     408:	37 ed       	ldi	r19, 0xD7	; 215
     40a:	43 e6       	ldi	r20, 0x63	; 99
     40c:	5f e3       	ldi	r21, 0x3F	; 63
     40e:	6c e4       	ldi	r22, 0x4C	; 76
     410:	86 e4       	ldi	r24, 0x46	; 70
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	0e 94 26 05 	call	0xa4c	; 0xa4c <motorControl>
			i++;
     418:	21 96       	adiw	r28, 0x01	; 1
			break;
     41a:	d1 cf       	rjmp	.-94     	; 0x3be <readGrid+0x72>
			case 3:                  //It is a T-crossing    L R
			motorControl(70, 'L', 0.89);
     41c:	2a e0       	ldi	r18, 0x0A	; 10
     41e:	37 ed       	ldi	r19, 0xD7	; 215
     420:	43 e6       	ldi	r20, 0x63	; 99
     422:	5f e3       	ldi	r21, 0x3F	; 63
     424:	6c e4       	ldi	r22, 0x4C	; 76
     426:	86 e4       	ldi	r24, 0x46	; 70
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	0e 94 26 05 	call	0xa4c	; 0xa4c <motorControl>
			routes[0][i] = 3;
     42e:	fe 01       	movw	r30, r28
     430:	ee 0f       	add	r30, r30
     432:	ff 1f       	adc	r31, r31
     434:	e0 0f       	add	r30, r16
     436:	f1 1f       	adc	r31, r17
     438:	71 82       	std	Z+1, r7	; 0x01
     43a:	60 82       	st	Z, r6
			i++;
     43c:	21 96       	adiw	r28, 0x01	; 1
			break;
     43e:	bf cf       	rjmp	.-130    	; 0x3be <readGrid+0x72>
			case 4:                 //R
			routes[0][i] = 4;
     440:	fe 01       	movw	r30, r28
     442:	ee 0f       	add	r30, r30
     444:	ff 1f       	adc	r31, r31
     446:	e0 0f       	add	r30, r16
     448:	f1 1f       	adc	r31, r17
     44a:	f1 82       	std	Z+1, r15	; 0x01
     44c:	e0 82       	st	Z, r14
			motorControl(80, 'F', 0.89);
     44e:	2a e0       	ldi	r18, 0x0A	; 10
     450:	37 ed       	ldi	r19, 0xD7	; 215
     452:	43 e6       	ldi	r20, 0x63	; 99
     454:	5f e3       	ldi	r21, 0x3F	; 63
     456:	66 e4       	ldi	r22, 0x46	; 70
     458:	80 e5       	ldi	r24, 0x50	; 80
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	0e 94 26 05 	call	0xa4c	; 0xa4c <motorControl>
			break;
     460:	ae cf       	rjmp	.-164    	; 0x3be <readGrid+0x72>
			case 5:                //L
			routes[0][i] = 5;
     462:	fe 01       	movw	r30, r28
     464:	ee 0f       	add	r30, r30
     466:	ff 1f       	adc	r31, r31
     468:	e0 0f       	add	r30, r16
     46a:	f1 1f       	adc	r31, r17
     46c:	d1 82       	std	Z+1, r13	; 0x01
     46e:	c0 82       	st	Z, r12
			motorControl(80, 'F', 0.89);
     470:	2a e0       	ldi	r18, 0x0A	; 10
     472:	37 ed       	ldi	r19, 0xD7	; 215
     474:	43 e6       	ldi	r20, 0x63	; 99
     476:	5f e3       	ldi	r21, 0x3F	; 63
     478:	66 e4       	ldi	r22, 0x46	; 70
     47a:	80 e5       	ldi	r24, 0x50	; 80
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	0e 94 26 05 	call	0xa4c	; 0xa4c <motorControl>
			break;
     482:	9d cf       	rjmp	.-198    	; 0x3be <readGrid+0x72>
			case 6:               //It is a crossing
			motorControl(70, 'L', 0.89);
     484:	2a e0       	ldi	r18, 0x0A	; 10
     486:	37 ed       	ldi	r19, 0xD7	; 215
     488:	43 e6       	ldi	r20, 0x63	; 99
     48a:	5f e3       	ldi	r21, 0x3F	; 63
     48c:	6c e4       	ldi	r22, 0x4C	; 76
     48e:	86 e4       	ldi	r24, 0x46	; 70
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	0e 94 26 05 	call	0xa4c	; 0xa4c <motorControl>
			i++;
     496:	21 96       	adiw	r28, 0x01	; 1
			routes[0][i] = 6;
     498:	fe 01       	movw	r30, r28
     49a:	ee 0f       	add	r30, r30
     49c:	ff 1f       	adc	r31, r31
     49e:	e0 0f       	add	r30, r16
     4a0:	f1 1f       	adc	r31, r17
     4a2:	b1 82       	std	Z+1, r11	; 0x01
     4a4:	a0 82       	st	Z, r10
			break;
     4a6:	8b cf       	rjmp	.-234    	; 0x3be <readGrid+0x72>
			case 7:              //Dead end
			routes[0][i] = 7;
     4a8:	fe 01       	movw	r30, r28
     4aa:	ee 0f       	add	r30, r30
     4ac:	ff 1f       	adc	r31, r31
     4ae:	e0 0f       	add	r30, r16
     4b0:	f1 1f       	adc	r31, r17
     4b2:	91 82       	std	Z+1, r9	; 0x01
     4b4:	80 82       	st	Z, r8
			motorControl(70, 'R', 0.89);
     4b6:	2a e0       	ldi	r18, 0x0A	; 10
     4b8:	37 ed       	ldi	r19, 0xD7	; 215
     4ba:	43 e6       	ldi	r20, 0x63	; 99
     4bc:	5f e3       	ldi	r21, 0x3F	; 63
     4be:	62 e5       	ldi	r22, 0x52	; 82
     4c0:	86 e4       	ldi	r24, 0x46	; 70
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	0e 94 26 05 	call	0xa4c	; 0xa4c <motorControl>
			motorControl(70, 'R', 0.89);
     4c8:	2a e0       	ldi	r18, 0x0A	; 10
     4ca:	37 ed       	ldi	r19, 0xD7	; 215
     4cc:	43 e6       	ldi	r20, 0x63	; 99
     4ce:	5f e3       	ldi	r21, 0x3F	; 63
     4d0:	62 e5       	ldi	r22, 0x52	; 82
     4d2:	86 e4       	ldi	r24, 0x46	; 70
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	0e 94 26 05 	call	0xa4c	; 0xa4c <motorControl>
			break;
     4da:	71 cf       	rjmp	.-286    	; 0x3be <readGrid+0x72>
			case 8:
			grid = 1;
			routes[0][i] = 8; //Marks end of route
     4dc:	fe 01       	movw	r30, r28
     4de:	ee 0f       	add	r30, r30
     4e0:	ff 1f       	adc	r31, r31
     4e2:	e0 0f       	add	r30, r16
     4e4:	f1 1f       	adc	r31, r17
     4e6:	88 e0       	ldi	r24, 0x08	; 8
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	91 83       	std	Z+1, r25	; 0x01
     4ec:	80 83       	st	Z, r24
		}
	}while(grid == 0);
	numOfIntersects = i;
	
	for(i = 0; i < numOfIntersects; i++){   //Writing route towards X
     4ee:	1c 16       	cp	r1, r28
     4f0:	1d 06       	cpc	r1, r29
     4f2:	0c f0       	brlt	.+2      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
     4f4:	fc c0       	rjmp	.+504    	; 0x6ee <__LOCK_REGION_LENGTH__+0x2ee>
     4f6:	d8 01       	movw	r26, r16
     4f8:	21 e0       	ldi	r18, 0x01	; 1
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	e1 2c       	mov	r14, r1
     4fe:	f1 2c       	mov	r15, r1
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	90 e0       	ldi	r25, 0x00	; 0
				crossing = 0;
				routes[1][i - 1] = 3;
			}
			break;
			case 8:                                                     //case 7 isn't part of a route
			routes[routeNum][i] = 8;                                    //Marks end of route
     504:	48 e2       	ldi	r20, 0x28	; 40
     506:	68 94       	set
     508:	66 24       	eor	r6, r6
     50a:	63 f8       	bld	r6, 3
     50c:	71 2c       	mov	r7, r1
				routes[routeNum][i] = 2;
			}
			break;
			case 6:
			crossing++;
			routes[routeNum][i] = 6;
     50e:	0f 2e       	mov	r0, r31
     510:	f6 e0       	ldi	r31, 0x06	; 6
     512:	4f 2e       	mov	r4, r31
     514:	51 2c       	mov	r5, r1
     516:	f0 2d       	mov	r31, r0
			if((crossing == 2) && (routes[routeNum][i - 1] == 6)){
				crossing = 0;
				routes[1][i - 1] = 3;
     518:	0f 2e       	mov	r0, r31
     51a:	f3 e0       	ldi	r31, 0x03	; 3
     51c:	2f 2e       	mov	r2, r31
     51e:	31 2c       	mov	r3, r1
     520:	f0 2d       	mov	r31, r0
			case 5:
			if(routes[0][i + 1] == 7){
				routes[routeNum][i] = 1;
			}
			else if(routes[0][i] != 7){
				routes[routeNum][i] = 2;
     522:	68 94       	set
     524:	cc 24       	eor	r12, r12
     526:	c1 f8       	bld	r12, 1
     528:	d1 2c       	mov	r13, r1
				routes[routeNum][i] = 3;
			}
			break;
			case 5:
			if(routes[0][i + 1] == 7){
				routes[routeNum][i] = 1;
     52a:	aa 24       	eor	r10, r10
     52c:	a3 94       	inc	r10
     52e:	b1 2c       	mov	r11, r1
		}
	}while(grid == 0);
	numOfIntersects = i;
	
	for(i = 0; i < numOfIntersects; i++){   //Writing route towards X
		switch(routes[0][i]){
     530:	ed 91       	ld	r30, X+
     532:	fd 91       	ld	r31, X+
     534:	31 97       	sbiw	r30, 0x01	; 1
     536:	e8 30       	cpi	r30, 0x08	; 8
     538:	f1 05       	cpc	r31, r1
     53a:	08 f0       	brcs	.+2      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
     53c:	d3 c0       	rjmp	.+422    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
     53e:	e4 5c       	subi	r30, 0xC4	; 196
     540:	ff 4f       	sbci	r31, 0xFF	; 255
     542:	0c 94 41 17 	jmp	0x2e82	; 0x2e82 <__tablejump2__>
			case 1:
			routes[routeNum][i] = 1;
     546:	42 9f       	mul	r20, r18
     548:	f0 01       	movw	r30, r0
     54a:	43 9f       	mul	r20, r19
     54c:	f0 0d       	add	r31, r0
     54e:	11 24       	eor	r1, r1
     550:	e0 0f       	add	r30, r16
     552:	f1 1f       	adc	r31, r17
     554:	bc 01       	movw	r22, r24
     556:	66 0f       	add	r22, r22
     558:	77 1f       	adc	r23, r23
     55a:	e6 0f       	add	r30, r22
     55c:	f7 1f       	adc	r31, r23
     55e:	b1 82       	std	Z+1, r11	; 0x01
     560:	a0 82       	st	Z, r10
			break;
     562:	c0 c0       	rjmp	.+384    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
			case 2:
			routes[routeNum][i] = 2;
     564:	42 9f       	mul	r20, r18
     566:	f0 01       	movw	r30, r0
     568:	43 9f       	mul	r20, r19
     56a:	f0 0d       	add	r31, r0
     56c:	11 24       	eor	r1, r1
     56e:	e0 0f       	add	r30, r16
     570:	f1 1f       	adc	r31, r17
     572:	bc 01       	movw	r22, r24
     574:	66 0f       	add	r22, r22
     576:	77 1f       	adc	r23, r23
     578:	e6 0f       	add	r30, r22
     57a:	f7 1f       	adc	r31, r23
     57c:	d1 82       	std	Z+1, r13	; 0x01
     57e:	c0 82       	st	Z, r12
			break;
     580:	b1 c0       	rjmp	.+354    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
			case 3:
			if(routes[0][i + 1] == 7){
     582:	6d 91       	ld	r22, X+
     584:	7c 91       	ld	r23, X
     586:	11 97       	sbiw	r26, 0x01	; 1
     588:	67 30       	cpi	r22, 0x07	; 7
     58a:	71 05       	cpc	r23, r1
     58c:	79 f4       	brne	.+30     	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
				routes[routeNum][i] = 1;
     58e:	42 9f       	mul	r20, r18
     590:	f0 01       	movw	r30, r0
     592:	43 9f       	mul	r20, r19
     594:	f0 0d       	add	r31, r0
     596:	11 24       	eor	r1, r1
     598:	e0 0f       	add	r30, r16
     59a:	f1 1f       	adc	r31, r17
     59c:	bc 01       	movw	r22, r24
     59e:	66 0f       	add	r22, r22
     5a0:	77 1f       	adc	r23, r23
     5a2:	e6 0f       	add	r30, r22
     5a4:	f7 1f       	adc	r31, r23
     5a6:	b1 82       	std	Z+1, r11	; 0x01
     5a8:	a0 82       	st	Z, r10
     5aa:	9c c0       	rjmp	.+312    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
			}
			else if(routes[0][i + 1] != 7){
				routes[routeNum][i] = 2;
     5ac:	42 9f       	mul	r20, r18
     5ae:	f0 01       	movw	r30, r0
     5b0:	43 9f       	mul	r20, r19
     5b2:	f0 0d       	add	r31, r0
     5b4:	11 24       	eor	r1, r1
     5b6:	e0 0f       	add	r30, r16
     5b8:	f1 1f       	adc	r31, r17
     5ba:	bc 01       	movw	r22, r24
     5bc:	66 0f       	add	r22, r22
     5be:	77 1f       	adc	r23, r23
     5c0:	e6 0f       	add	r30, r22
     5c2:	f7 1f       	adc	r31, r23
     5c4:	d1 82       	std	Z+1, r13	; 0x01
     5c6:	c0 82       	st	Z, r12
     5c8:	8d c0       	rjmp	.+282    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
			}
			break;
			case 4:
			if(routes[0][i + 1] == 7){
     5ca:	6d 91       	ld	r22, X+
     5cc:	7c 91       	ld	r23, X
     5ce:	11 97       	sbiw	r26, 0x01	; 1
     5d0:	67 30       	cpi	r22, 0x07	; 7
     5d2:	71 05       	cpc	r23, r1
     5d4:	79 f4       	brne	.+30     	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
				routes[routeNum][i] = 1;
     5d6:	42 9f       	mul	r20, r18
     5d8:	f0 01       	movw	r30, r0
     5da:	43 9f       	mul	r20, r19
     5dc:	f0 0d       	add	r31, r0
     5de:	11 24       	eor	r1, r1
     5e0:	e0 0f       	add	r30, r16
     5e2:	f1 1f       	adc	r31, r17
     5e4:	bc 01       	movw	r22, r24
     5e6:	66 0f       	add	r22, r22
     5e8:	77 1f       	adc	r23, r23
     5ea:	e6 0f       	add	r30, r22
     5ec:	f7 1f       	adc	r31, r23
     5ee:	b1 82       	std	Z+1, r11	; 0x01
     5f0:	a0 82       	st	Z, r10
     5f2:	78 c0       	rjmp	.+240    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
			}
			else if(routes[0][i] != 7){
				routes[routeNum][i] = 3;
     5f4:	42 9f       	mul	r20, r18
     5f6:	f0 01       	movw	r30, r0
     5f8:	43 9f       	mul	r20, r19
     5fa:	f0 0d       	add	r31, r0
     5fc:	11 24       	eor	r1, r1
     5fe:	e0 0f       	add	r30, r16
     600:	f1 1f       	adc	r31, r17
     602:	bc 01       	movw	r22, r24
     604:	66 0f       	add	r22, r22
     606:	77 1f       	adc	r23, r23
     608:	e6 0f       	add	r30, r22
     60a:	f7 1f       	adc	r31, r23
     60c:	31 82       	std	Z+1, r3	; 0x01
     60e:	20 82       	st	Z, r2
     610:	69 c0       	rjmp	.+210    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
			}
			break;
			case 5:
			if(routes[0][i + 1] == 7){
     612:	6d 91       	ld	r22, X+
     614:	7c 91       	ld	r23, X
     616:	11 97       	sbiw	r26, 0x01	; 1
     618:	67 30       	cpi	r22, 0x07	; 7
     61a:	71 05       	cpc	r23, r1
     61c:	79 f4       	brne	.+30     	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
				routes[routeNum][i] = 1;
     61e:	42 9f       	mul	r20, r18
     620:	f0 01       	movw	r30, r0
     622:	43 9f       	mul	r20, r19
     624:	f0 0d       	add	r31, r0
     626:	11 24       	eor	r1, r1
     628:	e0 0f       	add	r30, r16
     62a:	f1 1f       	adc	r31, r17
     62c:	bc 01       	movw	r22, r24
     62e:	66 0f       	add	r22, r22
     630:	77 1f       	adc	r23, r23
     632:	e6 0f       	add	r30, r22
     634:	f7 1f       	adc	r31, r23
     636:	b1 82       	std	Z+1, r11	; 0x01
     638:	a0 82       	st	Z, r10
     63a:	54 c0       	rjmp	.+168    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
			}
			else if(routes[0][i] != 7){
				routes[routeNum][i] = 2;
     63c:	42 9f       	mul	r20, r18
     63e:	f0 01       	movw	r30, r0
     640:	43 9f       	mul	r20, r19
     642:	f0 0d       	add	r31, r0
     644:	11 24       	eor	r1, r1
     646:	e0 0f       	add	r30, r16
     648:	f1 1f       	adc	r31, r17
     64a:	bc 01       	movw	r22, r24
     64c:	66 0f       	add	r22, r22
     64e:	77 1f       	adc	r23, r23
     650:	e6 0f       	add	r30, r22
     652:	f7 1f       	adc	r31, r23
     654:	d1 82       	std	Z+1, r13	; 0x01
     656:	c0 82       	st	Z, r12
     658:	45 c0       	rjmp	.+138    	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
			}
			break;
			case 6:
			crossing++;
     65a:	ff ef       	ldi	r31, 0xFF	; 255
     65c:	ef 1a       	sub	r14, r31
     65e:	ff 0a       	sbc	r15, r31
			routes[routeNum][i] = 6;
     660:	42 9f       	mul	r20, r18
     662:	40 01       	movw	r8, r0
     664:	43 9f       	mul	r20, r19
     666:	90 0c       	add	r9, r0
     668:	11 24       	eor	r1, r1
     66a:	80 0e       	add	r8, r16
     66c:	91 1e       	adc	r9, r17
     66e:	fc 01       	movw	r30, r24
     670:	ee 0f       	add	r30, r30
     672:	ff 1f       	adc	r31, r31
     674:	e8 0d       	add	r30, r8
     676:	f9 1d       	adc	r31, r9
     678:	51 82       	std	Z+1, r5	; 0x01
     67a:	40 82       	st	Z, r4
			if((crossing == 2) && (routes[routeNum][i - 1] == 6)){
     67c:	52 e0       	ldi	r21, 0x02	; 2
     67e:	e5 16       	cp	r14, r21
     680:	f1 04       	cpc	r15, r1
     682:	81 f5       	brne	.+96     	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
     684:	bc 01       	movw	r22, r24
     686:	61 50       	subi	r22, 0x01	; 1
     688:	71 09       	sbc	r23, r1
     68a:	66 0f       	add	r22, r22
     68c:	77 1f       	adc	r23, r23
     68e:	f4 01       	movw	r30, r8
     690:	e6 0f       	add	r30, r22
     692:	f7 1f       	adc	r31, r23
     694:	60 81       	ld	r22, Z
     696:	71 81       	ldd	r23, Z+1	; 0x01
     698:	66 30       	cpi	r22, 0x06	; 6
     69a:	71 05       	cpc	r23, r1
     69c:	19 f5       	brne	.+70     	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
				crossing = 0;
				routes[1][i - 1] = 3;
     69e:	95 96       	adiw	r26, 0x25	; 37
     6a0:	3c 92       	st	X, r3
     6a2:	2e 92       	st	-X, r2
     6a4:	94 97       	sbiw	r26, 0x24	; 36
			break;
			case 6:
			crossing++;
			routes[routeNum][i] = 6;
			if((crossing == 2) && (routes[routeNum][i - 1] == 6)){
				crossing = 0;
     6a6:	e1 2c       	mov	r14, r1
     6a8:	f1 2c       	mov	r15, r1
     6aa:	1c c0       	rjmp	.+56     	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
				routes[1][i - 1] = 3;
			}
			break;
			case 8:                                                     //case 7 isn't part of a route
			routes[routeNum][i] = 8;                                    //Marks end of route
     6ac:	42 9f       	mul	r20, r18
     6ae:	f0 01       	movw	r30, r0
     6b0:	43 9f       	mul	r20, r19
     6b2:	f0 0d       	add	r31, r0
     6b4:	11 24       	eor	r1, r1
     6b6:	e0 0f       	add	r30, r16
     6b8:	f1 1f       	adc	r31, r17
     6ba:	bc 01       	movw	r22, r24
     6bc:	66 0f       	add	r22, r22
     6be:	77 1f       	adc	r23, r23
     6c0:	e6 0f       	add	r30, r22
     6c2:	f7 1f       	adc	r31, r23
     6c4:	71 82       	std	Z+1, r7	; 0x01
     6c6:	60 82       	st	Z, r6
     6c8:	64 e1       	ldi	r22, 0x14	; 20
     6ca:	70 e0       	ldi	r23, 0x00	; 0
     6cc:	61 50       	subi	r22, 0x01	; 1
     6ce:	71 09       	sbc	r23, r1
			for(int j = 0; j < 20; j++){                                //reset decoy array
     6d0:	e9 f7       	brne	.-6      	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
     6d2:	fd 01       	movw	r30, r26
     6d4:	32 97       	sbiw	r30, 0x02	; 2
     6d6:	11 82       	std	Z+1, r1	; 0x01
     6d8:	10 82       	st	Z, r1
				routes[0][i] = 0;
			}
			if(routeNum < 4){
     6da:	24 30       	cpi	r18, 0x04	; 4
     6dc:	31 05       	cpc	r19, r1
     6de:	14 f4       	brge	.+4      	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
				routeNum++;
     6e0:	2f 5f       	subi	r18, 0xFF	; 255
     6e2:	3f 4f       	sbci	r19, 0xFF	; 255
			routes[0][i] = 8; //Marks end of route
		}
	}while(grid == 0);
	numOfIntersects = i;
	
	for(i = 0; i < numOfIntersects; i++){   //Writing route towards X
     6e4:	01 96       	adiw	r24, 0x01	; 1
     6e6:	c8 17       	cp	r28, r24
     6e8:	d9 07       	cpc	r29, r25
     6ea:	09 f0       	breq	.+2      	; 0x6ee <__LOCK_REGION_LENGTH__+0x2ee>
     6ec:	21 cf       	rjmp	.-446    	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
			
		}
	}
	
	return numOfIntersects;                                                       //returns intersect count, so amount of intersects on route
}
     6ee:	ce 01       	movw	r24, r28
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	1f 91       	pop	r17
     6f6:	0f 91       	pop	r16
     6f8:	ff 90       	pop	r15
     6fa:	ef 90       	pop	r14
     6fc:	df 90       	pop	r13
     6fe:	cf 90       	pop	r12
     700:	bf 90       	pop	r11
     702:	af 90       	pop	r10
     704:	9f 90       	pop	r9
     706:	8f 90       	pop	r8
     708:	7f 90       	pop	r7
     70a:	6f 90       	pop	r6
     70c:	5f 90       	pop	r5
     70e:	4f 90       	pop	r4
     710:	3f 90       	pop	r3
     712:	2f 90       	pop	r2
     714:	08 95       	ret

00000716 <driveRoute>:

void driveRoute(int route[2][20], int flag, int flagReturn, int max){             //go to or return from, grid or chargepoint
     716:	cf 92       	push	r12
     718:	df 92       	push	r13
     71a:	ef 92       	push	r14
     71c:	ff 92       	push	r15
     71e:	0f 93       	push	r16
     720:	1f 93       	push	r17
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	6c 01       	movw	r12, r24
     728:	eb 01       	movw	r28, r22
     72a:	7a 01       	movw	r14, r20
     72c:	89 01       	movw	r16, r18
	int intersectnum = 1;                                       // flag 1 =  from or to home, flag 2 is from or to chargepoint
	
	if(flagReturn == 1){
     72e:	41 30       	cpi	r20, 0x01	; 1
     730:	51 05       	cpc	r21, r1
     732:	11 f0       	breq	.+4      	; 0x738 <driveRoute+0x22>
	
	return numOfIntersects;                                                       //returns intersect count, so amount of intersects on route
}

void driveRoute(int route[2][20], int flag, int flagReturn, int max){             //go to or return from, grid or chargepoint
	int intersectnum = 1;                                       // flag 1 =  from or to home, flag 2 is from or to chargepoint
     734:	01 e0       	ldi	r16, 0x01	; 1
     736:	10 e0       	ldi	r17, 0x00	; 0
	
	if(flagReturn == 1){
		intersectnum = max;
	}
	
	if(flag == 2){
     738:	c2 30       	cpi	r28, 0x02	; 2
     73a:	d1 05       	cpc	r29, r1
     73c:	49 f4       	brne	.+18     	; 0x750 <driveRoute+0x3a>
		motorControl(70, 'R', 0.89);
     73e:	2a e0       	ldi	r18, 0x0A	; 10
     740:	37 ed       	ldi	r19, 0xD7	; 215
     742:	43 e6       	ldi	r20, 0x63	; 99
     744:	5f e3       	ldi	r21, 0x3F	; 63
     746:	62 e5       	ldi	r22, 0x52	; 82
     748:	86 e4       	ldi	r24, 0x46	; 70
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	0e 94 26 05 	call	0xa4c	; 0xa4c <motorControl>
	}while(checkAfslag() == 0);
	
	if(checkAfslag() != 0){
		
		if(flagReturn == 0){
			switch(route[flag][intersectnum]){
     750:	28 e2       	ldi	r18, 0x28	; 40
     752:	2c 9f       	mul	r18, r28
     754:	c0 01       	movw	r24, r0
     756:	2d 9f       	mul	r18, r29
     758:	90 0d       	add	r25, r0
     75a:	11 24       	eor	r1, r1
     75c:	e8 01       	movw	r28, r16
     75e:	cc 0f       	add	r28, r28
     760:	dd 1f       	adc	r29, r29
     762:	c8 0f       	add	r28, r24
     764:	d9 1f       	adc	r29, r25
     766:	cc 0d       	add	r28, r12
     768:	dd 1d       	adc	r29, r13
		motorControl(70, 'R', 0.89);
	}
	
	Next:
	do{
		followLine();
     76a:	0e 94 73 09 	call	0x12e6	; 0x12e6 <followLine>
	}while(checkAfslag() == 0);
     76e:	0e 94 c7 09 	call	0x138e	; 0x138e <checkAfslag>
     772:	89 2b       	or	r24, r25
     774:	d1 f3       	breq	.-12     	; 0x76a <driveRoute+0x54>
	
	if(checkAfslag() != 0){
     776:	0e 94 c7 09 	call	0x138e	; 0x138e <checkAfslag>
     77a:	89 2b       	or	r24, r25
     77c:	c9 f1       	breq	.+114    	; 0x7f0 <driveRoute+0xda>
		
		if(flagReturn == 0){
     77e:	e1 14       	cp	r14, r1
     780:	f1 04       	cpc	r15, r1
     782:	b1 f5       	brne	.+108    	; 0x7f0 <driveRoute+0xda>
			switch(route[flag][intersectnum]){
     784:	89 91       	ld	r24, Y+
     786:	99 91       	ld	r25, Y+
     788:	82 30       	cpi	r24, 0x02	; 2
     78a:	91 05       	cpc	r25, r1
     78c:	a1 f0       	breq	.+40     	; 0x7b6 <driveRoute+0xa0>
     78e:	1c f4       	brge	.+6      	; 0x796 <driveRoute+0x80>
     790:	01 97       	sbiw	r24, 0x01	; 1
     792:	39 f0       	breq	.+14     	; 0x7a2 <driveRoute+0x8c>
     794:	2d c0       	rjmp	.+90     	; 0x7f0 <driveRoute+0xda>
     796:	83 30       	cpi	r24, 0x03	; 3
     798:	91 05       	cpc	r25, r1
     79a:	b9 f0       	breq	.+46     	; 0x7ca <driveRoute+0xb4>
     79c:	05 97       	sbiw	r24, 0x05	; 5
     79e:	f9 f0       	breq	.+62     	; 0x7de <driveRoute+0xc8>
     7a0:	27 c0       	rjmp	.+78     	; 0x7f0 <driveRoute+0xda>
				case 1:
				motorControl(70, 'R', 0.89);
     7a2:	2a e0       	ldi	r18, 0x0A	; 10
     7a4:	37 ed       	ldi	r19, 0xD7	; 215
     7a6:	43 e6       	ldi	r20, 0x63	; 99
     7a8:	5f e3       	ldi	r21, 0x3F	; 63
     7aa:	62 e5       	ldi	r22, 0x52	; 82
     7ac:	86 e4       	ldi	r24, 0x46	; 70
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	0e 94 26 05 	call	0xa4c	; 0xa4c <motorControl>
				intersectnum++;
				goto Next;
     7b4:	da cf       	rjmp	.-76     	; 0x76a <driveRoute+0x54>
				case 2:
				motorControl(70, 'L', 0.89);
     7b6:	2a e0       	ldi	r18, 0x0A	; 10
     7b8:	37 ed       	ldi	r19, 0xD7	; 215
     7ba:	43 e6       	ldi	r20, 0x63	; 99
     7bc:	5f e3       	ldi	r21, 0x3F	; 63
     7be:	6c e4       	ldi	r22, 0x4C	; 76
     7c0:	86 e4       	ldi	r24, 0x46	; 70
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	0e 94 26 05 	call	0xa4c	; 0xa4c <motorControl>
				intersectnum++;
				goto Next;
     7c8:	d0 cf       	rjmp	.-96     	; 0x76a <driveRoute+0x54>
				case 3:
				motorControl(80, 'F', 0.89);
     7ca:	2a e0       	ldi	r18, 0x0A	; 10
     7cc:	37 ed       	ldi	r19, 0xD7	; 215
     7ce:	43 e6       	ldi	r20, 0x63	; 99
     7d0:	5f e3       	ldi	r21, 0x3F	; 63
     7d2:	66 e4       	ldi	r22, 0x46	; 70
     7d4:	80 e5       	ldi	r24, 0x50	; 80
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	0e 94 26 05 	call	0xa4c	; 0xa4c <motorControl>
				intersectnum++;
				goto Next;
     7dc:	c6 cf       	rjmp	.-116    	; 0x76a <driveRoute+0x54>
				case 5:
				motorControl(0, 'F', 0.89);    //stop
     7de:	2a e0       	ldi	r18, 0x0A	; 10
     7e0:	37 ed       	ldi	r19, 0xD7	; 215
     7e2:	43 e6       	ldi	r20, 0x63	; 99
     7e4:	5f e3       	ldi	r21, 0x3F	; 63
     7e6:	66 e4       	ldi	r22, 0x46	; 70
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	0e 94 26 05 	call	0xa4c	; 0xa4c <motorControl>
				play_from_program_space(PSTR(">g32>>c32"));

			}
		}
	}
}
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	ff 90       	pop	r15
     7fa:	ef 90       	pop	r14
     7fc:	df 90       	pop	r13
     7fe:	cf 90       	pop	r12
     800:	08 95       	ret

00000802 <fetchOrder>:
			check = 1;
		}
	}
}

void fetchOrder(int OrderX[], int orderY[], int route[2][20]){
     802:	4f 92       	push	r4
     804:	5f 92       	push	r5
     806:	6f 92       	push	r6
     808:	7f 92       	push	r7
     80a:	8f 92       	push	r8
     80c:	9f 92       	push	r9
     80e:	af 92       	push	r10
     810:	bf 92       	push	r11
     812:	cf 92       	push	r12
     814:	df 92       	push	r13
     816:	ef 92       	push	r14
     818:	ff 92       	push	r15
     81a:	0f 93       	push	r16
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	08 2f       	mov	r16, r24
     824:	19 2f       	mov	r17, r25
     826:	d6 2f       	mov	r29, r22
     828:	c7 2f       	mov	r28, r23
     82a:	4a 01       	movw	r8, r20
	int crossCountX = 0, crossCountY = 0, flagY = 0, flagX = 0, endX = 5, endY = 0, endFlag = 0;
	int amountOfIntersects = readGrid(route);
     82c:	ca 01       	movw	r24, r20
     82e:	0e 94 a6 01 	call	0x34c	; 0x34c <readGrid>
     832:	3c 01       	movw	r6, r24
	driveRoute(route, 1, 0, amountOfIntersects);    //Drive to grid entrance
     834:	9c 01       	movw	r18, r24
     836:	40 e0       	ldi	r20, 0x00	; 0
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	61 e0       	ldi	r22, 0x01	; 1
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	c4 01       	movw	r24, r8
     840:	0e 94 8b 03 	call	0x716	; 0x716 <driveRoute>
	motorControl(70, 'R', 0.89);
     844:	2a e0       	ldi	r18, 0x0A	; 10
     846:	37 ed       	ldi	r19, 0xD7	; 215
     848:	43 e6       	ldi	r20, 0x63	; 99
     84a:	5f e3       	ldi	r21, 0x3F	; 63
     84c:	62 e5       	ldi	r22, 0x52	; 82
     84e:	86 e4       	ldi	r24, 0x46	; 70
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	0e 94 26 05 	call	0xa4c	; 0xa4c <motorControl>
		    : "0" ( microseconds )
		    );  
}

// These are alternative aliases:
static inline void delay(unsigned int milliseconds) { delay_ms(milliseconds); }
     856:	82 e3       	ldi	r24, 0x32	; 50
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 75 13 	call	0x26ea	; 0x26ea <delay_ms>
	delay(50);
	motorControl(0, 'R', 0.89);
     85e:	2a e0       	ldi	r18, 0x0A	; 10
     860:	37 ed       	ldi	r19, 0xD7	; 215
     862:	43 e6       	ldi	r20, 0x63	; 99
     864:	5f e3       	ldi	r21, 0x3F	; 63
     866:	62 e5       	ldi	r22, 0x52	; 82
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	0e 94 26 05 	call	0xa4c	; 0xa4c <motorControl>
     870:	c0 2e       	mov	r12, r16
     872:	d1 2e       	mov	r13, r17
     874:	ed 2e       	mov	r14, r29
     876:	fc 2e       	mov	r15, r28
	for(int i = 0; i < sizeOfOrder + 1; i ++){
     878:	a1 2c       	mov	r10, r1
     87a:	b1 2c       	mov	r11, r1
		}
	}
}

void fetchOrder(int OrderX[], int orderY[], int route[2][20]){
	int crossCountX = 0, crossCountY = 0, flagY = 0, flagX = 0, endX = 5, endY = 0, endFlag = 0;
     87c:	00 e0       	ldi	r16, 0x00	; 0
     87e:	10 e0       	ldi	r17, 0x00	; 0
	motorControl(70, 'R', 0.89);
	delay(50);
	motorControl(0, 'R', 0.89);
	for(int i = 0; i < sizeOfOrder + 1; i ++){
		if(i == sizeOfOrder){
			endFlag = 1;
     880:	44 24       	eor	r4, r4
     882:	43 94       	inc	r4
     884:	51 2c       	mov	r5, r1
     886:	0c c0       	rjmp	.+24     	; 0x8a0 <fetchOrder+0x9e>
	driveRoute(route, 1, 0, amountOfIntersects);    //Drive to grid entrance
	motorControl(70, 'R', 0.89);
	delay(50);
	motorControl(0, 'R', 0.89);
	for(int i = 0; i < sizeOfOrder + 1; i ++){
		if(i == sizeOfOrder){
     888:	84 e0       	ldi	r24, 0x04	; 4
     88a:	a8 16       	cp	r10, r24
     88c:	b1 04       	cpc	r11, r1
     88e:	11 f4       	brne	.+4      	; 0x894 <fetchOrder+0x92>
			endFlag = 1;
     890:	04 2d       	mov	r16, r4
     892:	15 2d       	mov	r17, r5
     894:	e2 e0       	ldi	r30, 0x02	; 2
     896:	ce 0e       	add	r12, r30
     898:	d1 1c       	adc	r13, r1
     89a:	f2 e0       	ldi	r31, 0x02	; 2
     89c:	ef 0e       	add	r14, r31
     89e:	f1 1c       	adc	r15, r1
     8a0:	e6 01       	movw	r28, r12
		}
		if((crossCountX > OrderX[i]) || (endFlag == 1 && (crossCountX > endX))){
     8a2:	88 81       	ld	r24, Y
     8a4:	99 81       	ldd	r25, Y+1	; 0x01
     8a6:	99 23       	and	r25, r25
     8a8:	54 f4       	brge	.+20     	; 0x8be <fetchOrder+0xbc>
			motorControl(70, 'L', 0.89);
     8aa:	2a e0       	ldi	r18, 0x0A	; 10
     8ac:	37 ed       	ldi	r19, 0xD7	; 215
     8ae:	43 e6       	ldi	r20, 0x63	; 99
     8b0:	5f e3       	ldi	r21, 0x3F	; 63
     8b2:	6c e4       	ldi	r22, 0x4C	; 76
     8b4:	86 e4       	ldi	r24, 0x46	; 70
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	0e 94 26 05 	call	0xa4c	; 0xa4c <motorControl>

			flagX = 1;
     8bc:	19 c0       	rjmp	.+50     	; 0x8f0 <fetchOrder+0xee>
		}
		else if((crossCountX < OrderX[i]) || (endFlag == 1 && (crossCountX < endX))){
     8be:	18 16       	cp	r1, r24
     8c0:	19 06       	cpc	r1, r25
     8c2:	1c f0       	brlt	.+6      	; 0x8ca <fetchOrder+0xc8>
     8c4:	01 30       	cpi	r16, 0x01	; 1
     8c6:	11 05       	cpc	r17, r1
     8c8:	99 f4       	brne	.+38     	; 0x8f0 <fetchOrder+0xee>
			motorControl(70, 'R', 0.89);
     8ca:	2a e0       	ldi	r18, 0x0A	; 10
     8cc:	37 ed       	ldi	r19, 0xD7	; 215
     8ce:	43 e6       	ldi	r20, 0x63	; 99
     8d0:	5f e3       	ldi	r21, 0x3F	; 63
     8d2:	62 e5       	ldi	r22, 0x52	; 82
     8d4:	86 e4       	ldi	r24, 0x46	; 70
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	0e 94 26 05 	call	0xa4c	; 0xa4c <motorControl>
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <fetchOrder+0xee>
				//if intersection detected crossCountX++
			}
			else if(flagX == 2){
				//if intersection detected crossCountX--
			}
			motorControl(90, 'F', 0.89);
     8de:	2a e0       	ldi	r18, 0x0A	; 10
     8e0:	37 ed       	ldi	r19, 0xD7	; 215
     8e2:	43 e6       	ldi	r20, 0x63	; 99
     8e4:	5f e3       	ldi	r21, 0x3F	; 63
     8e6:	66 e4       	ldi	r22, 0x46	; 70
     8e8:	8a e5       	ldi	r24, 0x5A	; 90
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	0e 94 26 05 	call	0xa4c	; 0xa4c <motorControl>
		}
		else if((crossCountX < OrderX[i]) || (endFlag == 1 && (crossCountX < endX))){
			motorControl(70, 'R', 0.89);
			flagX = 2;
		}
		while((crossCountX != OrderX[i]) || (endFlag == 1 && (crossCountX != endX))){
     8f0:	88 81       	ld	r24, Y
     8f2:	99 81       	ldd	r25, Y+1	; 0x01
     8f4:	89 2b       	or	r24, r25
     8f6:	99 f7       	brne	.-26     	; 0x8de <fetchOrder+0xdc>
     8f8:	01 30       	cpi	r16, 0x01	; 1
     8fa:	11 05       	cpc	r17, r1
     8fc:	81 f3       	breq	.-32     	; 0x8de <fetchOrder+0xdc>
				//if intersection detected crossCountX--
			}
			motorControl(90, 'F', 0.89);
			// if intersection detected crossCountX++
		}
		motorControl(0, 'F', 0.89);
     8fe:	2a e0       	ldi	r18, 0x0A	; 10
     900:	37 ed       	ldi	r19, 0xD7	; 215
     902:	43 e6       	ldi	r20, 0x63	; 99
     904:	5f e3       	ldi	r21, 0x3F	; 63
     906:	66 e4       	ldi	r22, 0x46	; 70
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	0e 94 26 05 	call	0xa4c	; 0xa4c <motorControl>
     910:	e7 01       	movw	r28, r14
		if((crossCountY > orderY[i]) || (endFlag == 1 && (crossCountY > endY))){
     912:	88 81       	ld	r24, Y
     914:	99 81       	ldd	r25, Y+1	; 0x01
     916:	99 23       	and	r25, r25
     918:	74 f4       	brge	.+28     	; 0x936 <__stack+0x37>
			motorControl(70, 'L', 0.89);
     91a:	2a e0       	ldi	r18, 0x0A	; 10
     91c:	37 ed       	ldi	r19, 0xD7	; 215
     91e:	43 e6       	ldi	r20, 0x63	; 99
     920:	5f e3       	ldi	r21, 0x3F	; 63
     922:	6c e4       	ldi	r22, 0x4C	; 76
     924:	86 e4       	ldi	r24, 0x46	; 70
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	0e 94 26 05 	call	0xa4c	; 0xa4c <motorControl>
		}
		else if((crossCountY < orderY[i]) || (endFlag == 1 && (crossCountY < endY))){
			motorControl(70, 'R', 0.89);
			flagY = 2;
		}
		while((crossCountY != orderY[i]) || (endFlag == 1 && (crossCountY != endY))){
     92c:	88 81       	ld	r24, Y
     92e:	99 81       	ldd	r25, Y+1	; 0x01
     930:	89 2b       	or	r24, r25
     932:	71 f4       	brne	.+28     	; 0x950 <__stack+0x51>
     934:	1a c0       	rjmp	.+52     	; 0x96a <__stack+0x6b>
		motorControl(0, 'F', 0.89);
		if((crossCountY > orderY[i]) || (endFlag == 1 && (crossCountY > endY))){
			motorControl(70, 'L', 0.89);
			flagY = 1;
		}
		else if((crossCountY < orderY[i]) || (endFlag == 1 && (crossCountY < endY))){
     936:	18 16       	cp	r1, r24
     938:	19 06       	cpc	r1, r25
     93a:	c4 f7       	brge	.-16     	; 0x92c <__stack+0x2d>
			motorControl(70, 'R', 0.89);
     93c:	2a e0       	ldi	r18, 0x0A	; 10
     93e:	37 ed       	ldi	r19, 0xD7	; 215
     940:	43 e6       	ldi	r20, 0x63	; 99
     942:	5f e3       	ldi	r21, 0x3F	; 63
     944:	62 e5       	ldi	r22, 0x52	; 82
     946:	86 e4       	ldi	r24, 0x46	; 70
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	0e 94 26 05 	call	0xa4c	; 0xa4c <motorControl>
     94e:	ee cf       	rjmp	.-36     	; 0x92c <__stack+0x2d>
				//if intersection detected crossCountY++
			}
			else if(flagY == 2){
				//if intersection detected crossCountY--
			}
			motorControl(90, 'F', 0.89);
     950:	2a e0       	ldi	r18, 0x0A	; 10
     952:	37 ed       	ldi	r19, 0xD7	; 215
     954:	43 e6       	ldi	r20, 0x63	; 99
     956:	5f e3       	ldi	r21, 0x3F	; 63
     958:	66 e4       	ldi	r22, 0x46	; 70
     95a:	8a e5       	ldi	r24, 0x5A	; 90
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	0e 94 26 05 	call	0xa4c	; 0xa4c <motorControl>
		}
		else if((crossCountY < orderY[i]) || (endFlag == 1 && (crossCountY < endY))){
			motorControl(70, 'R', 0.89);
			flagY = 2;
		}
		while((crossCountY != orderY[i]) || (endFlag == 1 && (crossCountY != endY))){
     962:	88 81       	ld	r24, Y
     964:	99 81       	ldd	r25, Y+1	; 0x01
     966:	89 2b       	or	r24, r25
     968:	99 f7       	brne	.-26     	; 0x950 <__stack+0x51>
			else if(flagY == 2){
				//if intersection detected crossCountY--
			}
			motorControl(90, 'F', 0.89);
		}
		play_from_program_space(PSTR(">g32>>c32"));
     96a:	8a eb       	ldi	r24, 0xBA	; 186
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	0e 94 bd 10 	call	0x217a	; 0x217a <play_from_program_space>
     972:	88 ec       	ldi	r24, 0xC8	; 200
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	0e 94 75 13 	call	0x26ea	; 0x26ea <delay_ms>
	int amountOfIntersects = readGrid(route);
	driveRoute(route, 1, 0, amountOfIntersects);    //Drive to grid entrance
	motorControl(70, 'R', 0.89);
	delay(50);
	motorControl(0, 'R', 0.89);
	for(int i = 0; i < sizeOfOrder + 1; i ++){
     97a:	8f ef       	ldi	r24, 0xFF	; 255
     97c:	a8 1a       	sub	r10, r24
     97e:	b8 0a       	sbc	r11, r24
     980:	e5 e0       	ldi	r30, 0x05	; 5
     982:	ae 16       	cp	r10, r30
     984:	b1 04       	cpc	r11, r1
     986:	09 f0       	breq	.+2      	; 0x98a <__stack+0x8b>
     988:	7f cf       	rjmp	.-258    	; 0x888 <fetchOrder+0x86>
			motorControl(90, 'F', 0.89);
		}
		play_from_program_space(PSTR(">g32>>c32"));
		delay(200);
	}
	driveRoute(route, 1, 1, amountOfIntersects);    //Drive back to home
     98a:	93 01       	movw	r18, r6
     98c:	41 e0       	ldi	r20, 0x01	; 1
     98e:	50 e0       	ldi	r21, 0x00	; 0
     990:	61 e0       	ldi	r22, 0x01	; 1
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	c4 01       	movw	r24, r8
     996:	0e 94 8b 03 	call	0x716	; 0x716 <driveRoute>
	play_from_program_space(PSTR(">g32>>c32"));
     99a:	80 eb       	ldi	r24, 0xB0	; 176
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	0e 94 bd 10 	call	0x217a	; 0x217a <play_from_program_space>
}
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	1f 91       	pop	r17
     9a8:	0f 91       	pop	r16
     9aa:	ff 90       	pop	r15
     9ac:	ef 90       	pop	r14
     9ae:	df 90       	pop	r13
     9b0:	cf 90       	pop	r12
     9b2:	bf 90       	pop	r11
     9b4:	af 90       	pop	r10
     9b6:	9f 90       	pop	r9
     9b8:	8f 90       	pop	r8
     9ba:	7f 90       	pop	r7
     9bc:	6f 90       	pop	r6
     9be:	5f 90       	pop	r5
     9c0:	4f 90       	pop	r4
     9c2:	08 95       	ret

000009c4 <main>:

#include "Grid.h"
#include <pololu/3pi.h>
#include <avr/pgmspace.h>

int main(){
     9c4:	0f 93       	push	r16
     9c6:	1f 93       	push	r17
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	cd b7       	in	r28, 0x3d	; 61
     9ce:	de b7       	in	r29, 0x3e	; 62
     9d0:	c0 56       	subi	r28, 0x60	; 96
     9d2:	d1 09       	sbc	r29, r1
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	f8 94       	cli
     9d8:	de bf       	out	0x3e, r29	; 62
     9da:	0f be       	out	0x3f, r0	; 63
     9dc:	cd bf       	out	0x3d, r28	; 61
	int amountOfIntersects = 0;
	int routes[2][20];
    amountOfIntersects = readGrid(routes);
     9de:	ce 01       	movw	r24, r28
     9e0:	01 96       	adiw	r24, 0x01	; 1
     9e2:	0e 94 a6 01 	call	0x34c	; 0x34c <readGrid>
     9e6:	8c 01       	movw	r16, r24
	int orderX[sizeOfOrder];
	int orderY[sizeOfOrder];
	wirMain(orderX, orderY);
     9e8:	be 01       	movw	r22, r28
     9ea:	67 5a       	subi	r22, 0xA7	; 167
     9ec:	7f 4f       	sbci	r23, 0xFF	; 255
     9ee:	ce 01       	movw	r24, r28
     9f0:	8f 5a       	subi	r24, 0xAF	; 175
     9f2:	9f 4f       	sbci	r25, 0xFF	; 255
     9f4:	0e 94 82 00 	call	0x104	; 0x104 <wirMain>
	sortOrder(orderX, orderY);
     9f8:	be 01       	movw	r22, r28
     9fa:	67 5a       	subi	r22, 0xA7	; 167
     9fc:	7f 4f       	sbci	r23, 0xFF	; 255
     9fe:	ce 01       	movw	r24, r28
     a00:	8f 5a       	subi	r24, 0xAF	; 175
     a02:	9f 4f       	sbci	r25, 0xFF	; 255
     a04:	0e 94 a8 00 	call	0x150	; 0x150 <sortOrder>
	driveRoute(routes, 1, 0, amountOfIntersects);
     a08:	98 01       	movw	r18, r16
     a0a:	40 e0       	ldi	r20, 0x00	; 0
     a0c:	50 e0       	ldi	r21, 0x00	; 0
     a0e:	61 e0       	ldi	r22, 0x01	; 1
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	ce 01       	movw	r24, r28
     a14:	01 96       	adiw	r24, 0x01	; 1
     a16:	0e 94 8b 03 	call	0x716	; 0x716 <driveRoute>
	fetchOrder(orderX, orderY, routes);	
     a1a:	ae 01       	movw	r20, r28
     a1c:	4f 5f       	subi	r20, 0xFF	; 255
     a1e:	5f 4f       	sbci	r21, 0xFF	; 255
     a20:	be 01       	movw	r22, r28
     a22:	67 5a       	subi	r22, 0xA7	; 167
     a24:	7f 4f       	sbci	r23, 0xFF	; 255
     a26:	ce 01       	movw	r24, r28
     a28:	8f 5a       	subi	r24, 0xAF	; 175
     a2a:	9f 4f       	sbci	r25, 0xFF	; 255
     a2c:	0e 94 01 04 	call	0x802	; 0x802 <fetchOrder>
				
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	c0 5a       	subi	r28, 0xA0	; 160
     a36:	df 4f       	sbci	r29, 0xFF	; 255
     a38:	0f b6       	in	r0, 0x3f	; 63
     a3a:	f8 94       	cli
     a3c:	de bf       	out	0x3e, r29	; 62
     a3e:	0f be       	out	0x3f, r0	; 63
     a40:	cd bf       	out	0x3d, r28	; 61
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	1f 91       	pop	r17
     a48:	0f 91       	pop	r16
     a4a:	08 95       	ret

00000a4c <motorControl>:

int speedCurrent = 0;
int speedCurrentRight = 0;
int speedCurrentLeft = 0;

void motorControl(int speed, char direction, float aggressionFactor){
     a4c:	2f 92       	push	r2
     a4e:	3f 92       	push	r3
     a50:	4f 92       	push	r4
     a52:	5f 92       	push	r5
     a54:	6f 92       	push	r6
     a56:	7f 92       	push	r7
     a58:	8f 92       	push	r8
     a5a:	9f 92       	push	r9
     a5c:	af 92       	push	r10
     a5e:	bf 92       	push	r11
     a60:	cf 92       	push	r12
     a62:	df 92       	push	r13
     a64:	ef 92       	push	r14
     a66:	ff 92       	push	r15
     a68:	0f 93       	push	r16
     a6a:	1f 93       	push	r17
     a6c:	cf 93       	push	r28
     a6e:	df 93       	push	r29
     a70:	cd b7       	in	r28, 0x3d	; 61
     a72:	de b7       	in	r29, 0x3e	; 62
     a74:	66 97       	sbiw	r28, 0x16	; 22
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	f8 94       	cli
     a7a:	de bf       	out	0x3e, r29	; 62
     a7c:	0f be       	out	0x3f, r0	; 63
     a7e:	cd bf       	out	0x3d, r28	; 61
     a80:	1c 01       	movw	r2, r24
     a82:	29 83       	std	Y+1, r18	; 0x01
     a84:	3a 83       	std	Y+2, r19	; 0x02
     a86:	4b 83       	std	Y+3, r20	; 0x03
     a88:	5c 83       	std	Y+4, r21	; 0x04
	int setSpeedRight = 0;
	int setSpeedLeft = 0;
	
	//directions direction;

	switch (direction){
     a8a:	66 34       	cpi	r22, 0x46	; 70
     a8c:	61 f0       	breq	.+24     	; 0xaa6 <motorControl+0x5a>
     a8e:	20 f4       	brcc	.+8      	; 0xa98 <motorControl+0x4c>
     a90:	62 34       	cpi	r22, 0x42	; 66
     a92:	09 f4       	brne	.+2      	; 0xa96 <motorControl+0x4a>
     a94:	95 c0       	rjmp	.+298    	; 0xbc0 <motorControl+0x174>
     a96:	08 c4       	rjmp	.+2064   	; 0x12a8 <motorControl+0x85c>
     a98:	6c 34       	cpi	r22, 0x4C	; 76
     a9a:	09 f4       	brne	.+2      	; 0xa9e <motorControl+0x52>
     a9c:	a9 c2       	rjmp	.+1362   	; 0xff0 <motorControl+0x5a4>
     a9e:	62 35       	cpi	r22, 0x52	; 82
     aa0:	09 f4       	brne	.+2      	; 0xaa4 <motorControl+0x58>
     aa2:	1b c1       	rjmp	.+566    	; 0xcda <motorControl+0x28e>
     aa4:	01 c4       	rjmp	.+2050   	; 0x12a8 <motorControl+0x85c>
		case 'F':
		
		setSpeed = speed - speedCurrent;
     aa6:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <speedCurrent>
     aaa:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <speedCurrent+0x1>
     aae:	91 01       	movw	r18, r2
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	45 e6       	ldi	r20, 0x65	; 101
     ab6:	50 e0       	ldi	r21, 0x00	; 0
     ab8:	5a 87       	std	Y+10, r21	; 0x0a
     aba:	49 87       	std	Y+9, r20	; 0x09
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     abc:	41 2c       	mov	r4, r1
     abe:	51 2c       	mov	r5, r1
     ac0:	32 01       	movw	r6, r4
			timerStart = get_ms();
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2*M_PI ) ) * sin ( 2* M_PI * accelerationCounter ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     ac2:	03 2e       	mov	r0, r19
     ac4:	00 0c       	add	r0, r0
     ac6:	44 0b       	sbc	r20, r20
     ac8:	55 0b       	sbc	r21, r21
     aca:	2d 83       	std	Y+5, r18	; 0x05
     acc:	3e 83       	std	Y+6, r19	; 0x06
     ace:	4f 83       	std	Y+7, r20	; 0x07
     ad0:	58 87       	std	Y+8, r21	; 0x08
		case 'F':
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     ad2:	0e 94 ad 13 	call	0x275a	; 0x275a <get_ms>
     ad6:	8b 01       	movw	r16, r22
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2*M_PI ) ) * sin ( 2* M_PI * accelerationCounter ) ) );
     ad8:	2b ed       	ldi	r18, 0xDB	; 219
     ada:	3f e0       	ldi	r19, 0x0F	; 15
     adc:	49 ec       	ldi	r20, 0xC9	; 201
     ade:	50 e4       	ldi	r21, 0x40	; 64
     ae0:	c3 01       	movw	r24, r6
     ae2:	b2 01       	movw	r22, r4
     ae4:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
     ae8:	0e 94 ca 0c 	call	0x1994	; 0x1994 <sin>
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     aec:	23 e8       	ldi	r18, 0x83	; 131
     aee:	39 ef       	ldi	r19, 0xF9	; 249
     af0:	42 e2       	ldi	r20, 0x22	; 34
     af2:	5e e3       	ldi	r21, 0x3E	; 62
     af4:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
     af8:	9b 01       	movw	r18, r22
     afa:	ac 01       	movw	r20, r24
     afc:	c3 01       	movw	r24, r6
     afe:	b2 01       	movw	r22, r4
     b00:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__subsf3>
     b04:	4b 01       	movw	r8, r22
     b06:	5c 01       	movw	r10, r24
     b08:	6d 81       	ldd	r22, Y+5	; 0x05
     b0a:	7e 81       	ldd	r23, Y+6	; 0x06
     b0c:	8f 81       	ldd	r24, Y+7	; 0x07
     b0e:	98 85       	ldd	r25, Y+8	; 0x08
     b10:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__floatsisf>
     b14:	9b 01       	movw	r18, r22
     b16:	ac 01       	movw	r20, r24
     b18:	c5 01       	movw	r24, r10
     b1a:	b4 01       	movw	r22, r8
     b1c:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
     b20:	4b 01       	movw	r8, r22
     b22:	5c 01       	movw	r10, r24
     b24:	60 91 9b 01 	lds	r22, 0x019B	; 0x80019b <speedCurrent>
     b28:	70 91 9c 01 	lds	r23, 0x019C	; 0x80019c <speedCurrent+0x1>
     b2c:	07 2e       	mov	r0, r23
     b2e:	00 0c       	add	r0, r0
     b30:	88 0b       	sbc	r24, r24
     b32:	99 0b       	sbc	r25, r25
     b34:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__floatsisf>
     b38:	9b 01       	movw	r18, r22
     b3a:	ac 01       	movw	r20, r24
     b3c:	c5 01       	movw	r24, r10
     b3e:	b4 01       	movw	r22, r8
     b40:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__addsf3>
     b44:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__fixsfsi>
     b48:	dc 01       	movw	r26, r24
     b4a:	cb 01       	movw	r24, r22
     b4c:	bc 01       	movw	r22, r24
     b4e:	0e 94 77 12 	call	0x24ee	; 0x24ee <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     b52:	48 01       	movw	r8, r16
     b54:	11 0f       	add	r17, r17
     b56:	aa 08       	sbc	r10, r10
     b58:	bb 08       	sbc	r11, r11
     b5a:	0e 94 ad 13 	call	0x275a	; 0x275a <get_ms>
     b5e:	68 19       	sub	r22, r8
     b60:	79 09       	sbc	r23, r9
     b62:	8a 09       	sbc	r24, r10
     b64:	9b 09       	sbc	r25, r11
     b66:	0e 94 a6 0b 	call	0x174c	; 0x174c <__floatunsisf>
     b6a:	6b 01       	movw	r12, r22
     b6c:	7c 01       	movw	r14, r24
     b6e:	20 e0       	ldi	r18, 0x00	; 0
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	40 e2       	ldi	r20, 0x20	; 32
     b74:	51 e4       	ldi	r21, 0x41	; 65
     b76:	69 81       	ldd	r22, Y+1	; 0x01
     b78:	7a 81       	ldd	r23, Y+2	; 0x02
     b7a:	8b 81       	ldd	r24, Y+3	; 0x03
     b7c:	9c 81       	ldd	r25, Y+4	; 0x04
     b7e:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
     b82:	9b 01       	movw	r18, r22
     b84:	ac 01       	movw	r20, r24
     b86:	c7 01       	movw	r24, r14
     b88:	b6 01       	movw	r22, r12
     b8a:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__cmpsf2>
     b8e:	88 23       	and	r24, r24
     b90:	24 f3       	brlt	.-56     	; 0xb5a <motorControl+0x10e>
	switch (direction){
		case 'F':
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     b92:	2a e0       	ldi	r18, 0x0A	; 10
     b94:	37 ed       	ldi	r19, 0xD7	; 215
     b96:	43 e2       	ldi	r20, 0x23	; 35
     b98:	5c e3       	ldi	r21, 0x3C	; 60
     b9a:	c3 01       	movw	r24, r6
     b9c:	b2 01       	movw	r22, r4
     b9e:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__addsf3>
     ba2:	2b 01       	movw	r4, r22
     ba4:	3c 01       	movw	r6, r24
     ba6:	a9 85       	ldd	r26, Y+9	; 0x09
     ba8:	ba 85       	ldd	r27, Y+10	; 0x0a
     baa:	11 97       	sbiw	r26, 0x01	; 1
     bac:	ba 87       	std	Y+10, r27	; 0x0a
     bae:	a9 87       	std	Y+9, r26	; 0x09
     bb0:	ab 2b       	or	r26, r27
     bb2:	09 f0       	breq	.+2      	; 0xbb6 <motorControl+0x16a>
     bb4:	8e cf       	rjmp	.-228    	; 0xad2 <motorControl+0x86>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrent = speed;
     bb6:	30 92 9c 01 	sts	0x019C, r3	; 0x80019c <speedCurrent+0x1>
     bba:	20 92 9b 01 	sts	0x019B, r2	; 0x80019b <speedCurrent>
		break;
     bbe:	7a c3       	rjmp	.+1780   	; 0x12b4 <motorControl+0x868>
		
		case 'B':
		
		setSpeed = speed - speedCurrent;
     bc0:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <speedCurrent>
     bc4:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <speedCurrent+0x1>
     bc8:	91 01       	movw	r18, r2
     bca:	28 1b       	sub	r18, r24
     bcc:	39 0b       	sbc	r19, r25
     bce:	45 e6       	ldi	r20, 0x65	; 101
     bd0:	50 e0       	ldi	r21, 0x00	; 0
     bd2:	5a 87       	std	Y+10, r21	; 0x0a
     bd4:	49 87       	std	Y+9, r20	; 0x09
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     bd6:	41 2c       	mov	r4, r1
     bd8:	51 2c       	mov	r5, r1
     bda:	32 01       	movw	r6, r4
			timerStart = get_ms();
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     bdc:	03 2e       	mov	r0, r19
     bde:	00 0c       	add	r0, r0
     be0:	44 0b       	sbc	r20, r20
     be2:	55 0b       	sbc	r21, r21
     be4:	2d 83       	std	Y+5, r18	; 0x05
     be6:	3e 83       	std	Y+6, r19	; 0x06
     be8:	4f 83       	std	Y+7, r20	; 0x07
     bea:	58 87       	std	Y+8, r21	; 0x08
		case 'B':
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     bec:	0e 94 ad 13 	call	0x275a	; 0x275a <get_ms>
     bf0:	8b 01       	movw	r16, r22
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) );
     bf2:	2b ed       	ldi	r18, 0xDB	; 219
     bf4:	3f e0       	ldi	r19, 0x0F	; 15
     bf6:	49 ec       	ldi	r20, 0xC9	; 201
     bf8:	50 e4       	ldi	r21, 0x40	; 64
     bfa:	c3 01       	movw	r24, r6
     bfc:	b2 01       	movw	r22, r4
     bfe:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
     c02:	0e 94 ca 0c 	call	0x1994	; 0x1994 <sin>
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     c06:	23 e8       	ldi	r18, 0x83	; 131
     c08:	39 ef       	ldi	r19, 0xF9	; 249
     c0a:	42 e2       	ldi	r20, 0x22	; 34
     c0c:	5e e3       	ldi	r21, 0x3E	; 62
     c0e:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
     c12:	9b 01       	movw	r18, r22
     c14:	ac 01       	movw	r20, r24
     c16:	c3 01       	movw	r24, r6
     c18:	b2 01       	movw	r22, r4
     c1a:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__subsf3>
     c1e:	4b 01       	movw	r8, r22
     c20:	5c 01       	movw	r10, r24
     c22:	6d 81       	ldd	r22, Y+5	; 0x05
     c24:	7e 81       	ldd	r23, Y+6	; 0x06
     c26:	8f 81       	ldd	r24, Y+7	; 0x07
     c28:	98 85       	ldd	r25, Y+8	; 0x08
     c2a:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__floatsisf>
     c2e:	9b 01       	movw	r18, r22
     c30:	ac 01       	movw	r20, r24
     c32:	c5 01       	movw	r24, r10
     c34:	b4 01       	movw	r22, r8
     c36:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
     c3a:	4b 01       	movw	r8, r22
     c3c:	5c 01       	movw	r10, r24
     c3e:	60 91 9b 01 	lds	r22, 0x019B	; 0x80019b <speedCurrent>
     c42:	70 91 9c 01 	lds	r23, 0x019C	; 0x80019c <speedCurrent+0x1>
     c46:	07 2e       	mov	r0, r23
     c48:	00 0c       	add	r0, r0
     c4a:	88 0b       	sbc	r24, r24
     c4c:	99 0b       	sbc	r25, r25
     c4e:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__floatsisf>
     c52:	9b 01       	movw	r18, r22
     c54:	ac 01       	movw	r20, r24
     c56:	c5 01       	movw	r24, r10
     c58:	b4 01       	movw	r22, r8
     c5a:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__addsf3>
     c5e:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__fixsfsi>
     c62:	dc 01       	movw	r26, r24
     c64:	cb 01       	movw	r24, r22
     c66:	bc 01       	movw	r22, r24
     c68:	0e 94 77 12 	call	0x24ee	; 0x24ee <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     c6c:	48 01       	movw	r8, r16
     c6e:	11 0f       	add	r17, r17
     c70:	aa 08       	sbc	r10, r10
     c72:	bb 08       	sbc	r11, r11
     c74:	0e 94 ad 13 	call	0x275a	; 0x275a <get_ms>
     c78:	68 19       	sub	r22, r8
     c7a:	79 09       	sbc	r23, r9
     c7c:	8a 09       	sbc	r24, r10
     c7e:	9b 09       	sbc	r25, r11
     c80:	0e 94 a6 0b 	call	0x174c	; 0x174c <__floatunsisf>
     c84:	6b 01       	movw	r12, r22
     c86:	7c 01       	movw	r14, r24
     c88:	20 e0       	ldi	r18, 0x00	; 0
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	40 e2       	ldi	r20, 0x20	; 32
     c8e:	51 e4       	ldi	r21, 0x41	; 65
     c90:	69 81       	ldd	r22, Y+1	; 0x01
     c92:	7a 81       	ldd	r23, Y+2	; 0x02
     c94:	8b 81       	ldd	r24, Y+3	; 0x03
     c96:	9c 81       	ldd	r25, Y+4	; 0x04
     c98:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
     c9c:	9b 01       	movw	r18, r22
     c9e:	ac 01       	movw	r20, r24
     ca0:	c7 01       	movw	r24, r14
     ca2:	b6 01       	movw	r22, r12
     ca4:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__cmpsf2>
     ca8:	88 23       	and	r24, r24
     caa:	24 f3       	brlt	.-56     	; 0xc74 <motorControl+0x228>
		
		case 'B':
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     cac:	2a e0       	ldi	r18, 0x0A	; 10
     cae:	37 ed       	ldi	r19, 0xD7	; 215
     cb0:	43 e2       	ldi	r20, 0x23	; 35
     cb2:	5c e3       	ldi	r21, 0x3C	; 60
     cb4:	c3 01       	movw	r24, r6
     cb6:	b2 01       	movw	r22, r4
     cb8:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__addsf3>
     cbc:	2b 01       	movw	r4, r22
     cbe:	3c 01       	movw	r6, r24
     cc0:	a9 85       	ldd	r26, Y+9	; 0x09
     cc2:	ba 85       	ldd	r27, Y+10	; 0x0a
     cc4:	11 97       	sbiw	r26, 0x01	; 1
     cc6:	ba 87       	std	Y+10, r27	; 0x0a
     cc8:	a9 87       	std	Y+9, r26	; 0x09
     cca:	ab 2b       	or	r26, r27
     ccc:	09 f0       	breq	.+2      	; 0xcd0 <motorControl+0x284>
     cce:	8e cf       	rjmp	.-228    	; 0xbec <motorControl+0x1a0>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrent = speed;
     cd0:	30 92 9c 01 	sts	0x019C, r3	; 0x80019c <speedCurrent+0x1>
     cd4:	20 92 9b 01 	sts	0x019B, r2	; 0x80019b <speedCurrent>
		break;
     cd8:	ed c2       	rjmp	.+1498   	; 0x12b4 <motorControl+0x868>

		case 'R':
		
		setSpeedRight = speed + speedCurrentRight;
     cda:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <speedCurrentRight>
     cde:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <speedCurrentRight+0x1>
     ce2:	82 0d       	add	r24, r2
     ce4:	93 1d       	adc	r25, r3
		setSpeedLeft = speed - speedCurrentLeft;
     ce6:	20 91 97 01 	lds	r18, 0x0197	; 0x800197 <speedCurrentLeft>
     cea:	30 91 98 01 	lds	r19, 0x0198	; 0x800198 <speedCurrentLeft+0x1>
     cee:	a1 01       	movw	r20, r2
     cf0:	42 1b       	sub	r20, r18
     cf2:	53 0b       	sbc	r21, r19
     cf4:	9a 01       	movw	r18, r20
     cf6:	05 e6       	ldi	r16, 0x65	; 101
     cf8:	10 e0       	ldi	r17, 0x00	; 0
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     cfa:	1d 82       	std	Y+5, r1	; 0x05
     cfc:	1e 82       	std	Y+6, r1	; 0x06
     cfe:	1f 82       	std	Y+7, r1	; 0x07
     d00:	18 86       	std	Y+8, r1	; 0x08
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			motorLeftSpeed = speedCurrent + (speedCurrentLeft + (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     d02:	ac 01       	movw	r20, r24
     d04:	99 0f       	add	r25, r25
     d06:	66 0b       	sbc	r22, r22
     d08:	77 0b       	sbc	r23, r23
     d0a:	4d 87       	std	Y+13, r20	; 0x0d
     d0c:	5e 87       	std	Y+14, r21	; 0x0e
     d0e:	6f 87       	std	Y+15, r22	; 0x0f
     d10:	78 8b       	std	Y+16, r23	; 0x10
     d12:	b9 01       	movw	r22, r18
     d14:	33 0f       	add	r19, r19
     d16:	88 0b       	sbc	r24, r24
     d18:	99 0b       	sbc	r25, r25
     d1a:	69 8b       	std	Y+17, r22	; 0x11
     d1c:	7a 8b       	std	Y+18, r23	; 0x12
     d1e:	8b 8b       	std	Y+19, r24	; 0x13
     d20:	9c 8b       	std	Y+20, r25	; 0x14
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     d22:	0e 94 ad 13 	call	0x275a	; 0x275a <get_ms>
     d26:	7e 8b       	std	Y+22, r23	; 0x16
     d28:	6d 8b       	std	Y+21, r22	; 0x15
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
     d2a:	60 91 9b 01 	lds	r22, 0x019B	; 0x80019b <speedCurrent>
     d2e:	70 91 9c 01 	lds	r23, 0x019C	; 0x80019c <speedCurrent+0x1>
     d32:	07 2e       	mov	r0, r23
     d34:	00 0c       	add	r0, r0
     d36:	88 0b       	sbc	r24, r24
     d38:	99 0b       	sbc	r25, r25
     d3a:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__floatsisf>
     d3e:	69 87       	std	Y+9, r22	; 0x09
     d40:	7a 87       	std	Y+10, r23	; 0x0a
     d42:	8b 87       	std	Y+11, r24	; 0x0b
     d44:	9c 87       	std	Y+12, r25	; 0x0c
     d46:	2b ed       	ldi	r18, 0xDB	; 219
     d48:	3f e0       	ldi	r19, 0x0F	; 15
     d4a:	49 ec       	ldi	r20, 0xC9	; 201
     d4c:	50 e4       	ldi	r21, 0x40	; 64
     d4e:	6d 81       	ldd	r22, Y+5	; 0x05
     d50:	7e 81       	ldd	r23, Y+6	; 0x06
     d52:	8f 81       	ldd	r24, Y+7	; 0x07
     d54:	98 85       	ldd	r25, Y+8	; 0x08
     d56:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
     d5a:	0e 94 ca 0c 	call	0x1994	; 0x1994 <sin>
     d5e:	23 e8       	ldi	r18, 0x83	; 131
     d60:	39 ef       	ldi	r19, 0xF9	; 249
     d62:	42 e2       	ldi	r20, 0x22	; 34
     d64:	5e e3       	ldi	r21, 0x3E	; 62
     d66:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
     d6a:	2d 81       	ldd	r18, Y+5	; 0x05
     d6c:	3e 81       	ldd	r19, Y+6	; 0x06
     d6e:	4f 81       	ldd	r20, Y+7	; 0x07
     d70:	58 85       	ldd	r21, Y+8	; 0x08
     d72:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__addsf3>
     d76:	4b 01       	movw	r8, r22
     d78:	5c 01       	movw	r10, r24
			
			motorLeftSpeed = speedCurrent + (speedCurrentLeft + (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     d7a:	60 91 99 01 	lds	r22, 0x0199	; 0x800199 <speedCurrentRight>
     d7e:	70 91 9a 01 	lds	r23, 0x019A	; 0x80019a <speedCurrentRight+0x1>
     d82:	07 2e       	mov	r0, r23
     d84:	00 0c       	add	r0, r0
     d86:	88 0b       	sbc	r24, r24
     d88:	99 0b       	sbc	r25, r25
     d8a:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__floatsisf>
     d8e:	2b 01       	movw	r4, r22
     d90:	3c 01       	movw	r6, r24
     d92:	6d 85       	ldd	r22, Y+13	; 0x0d
     d94:	7e 85       	ldd	r23, Y+14	; 0x0e
     d96:	8f 85       	ldd	r24, Y+15	; 0x0f
     d98:	98 89       	ldd	r25, Y+16	; 0x10
     d9a:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__floatsisf>
     d9e:	a5 01       	movw	r20, r10
     da0:	94 01       	movw	r18, r8
     da2:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
     da6:	9b 01       	movw	r18, r22
     da8:	ac 01       	movw	r20, r24
     daa:	c3 01       	movw	r24, r6
     dac:	b2 01       	movw	r22, r4
     dae:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__subsf3>
     db2:	29 85       	ldd	r18, Y+9	; 0x09
     db4:	3a 85       	ldd	r19, Y+10	; 0x0a
     db6:	4b 85       	ldd	r20, Y+11	; 0x0b
     db8:	5c 85       	ldd	r21, Y+12	; 0x0c
     dba:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__addsf3>
     dbe:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__fixsfsi>
     dc2:	2b 01       	movw	r4, r22
     dc4:	3c 01       	movw	r6, r24
     dc6:	60 91 97 01 	lds	r22, 0x0197	; 0x800197 <speedCurrentLeft>
     dca:	70 91 98 01 	lds	r23, 0x0198	; 0x800198 <speedCurrentLeft+0x1>
     dce:	07 2e       	mov	r0, r23
     dd0:	00 0c       	add	r0, r0
     dd2:	88 0b       	sbc	r24, r24
     dd4:	99 0b       	sbc	r25, r25
     dd6:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__floatsisf>
     dda:	6b 01       	movw	r12, r22
     ddc:	7c 01       	movw	r14, r24
     dde:	69 89       	ldd	r22, Y+17	; 0x11
     de0:	7a 89       	ldd	r23, Y+18	; 0x12
     de2:	8b 89       	ldd	r24, Y+19	; 0x13
     de4:	9c 89       	ldd	r25, Y+20	; 0x14
     de6:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__floatsisf>
     dea:	a5 01       	movw	r20, r10
     dec:	94 01       	movw	r18, r8
     dee:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
     df2:	9b 01       	movw	r18, r22
     df4:	ac 01       	movw	r20, r24
     df6:	c7 01       	movw	r24, r14
     df8:	b6 01       	movw	r22, r12
     dfa:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__addsf3>
     dfe:	29 85       	ldd	r18, Y+9	; 0x09
     e00:	3a 85       	ldd	r19, Y+10	; 0x0a
     e02:	4b 85       	ldd	r20, Y+11	; 0x0b
     e04:	5c 85       	ldd	r21, Y+12	; 0x0c
     e06:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__addsf3>
     e0a:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__fixsfsi>
     e0e:	dc 01       	movw	r26, r24
     e10:	cb 01       	movw	r24, r22
     e12:	b2 01       	movw	r22, r4
     e14:	0e 94 77 12 	call	0x24ee	; 0x24ee <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     e18:	8d 89       	ldd	r24, Y+21	; 0x15
     e1a:	9e 89       	ldd	r25, Y+22	; 0x16
     e1c:	4c 01       	movw	r8, r24
     e1e:	99 0f       	add	r25, r25
     e20:	aa 08       	sbc	r10, r10
     e22:	bb 08       	sbc	r11, r11
     e24:	0e 94 ad 13 	call	0x275a	; 0x275a <get_ms>
     e28:	6b 01       	movw	r12, r22
     e2a:	7c 01       	movw	r14, r24
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	40 e2       	ldi	r20, 0x20	; 32
     e32:	51 e4       	ldi	r21, 0x41	; 65
     e34:	69 81       	ldd	r22, Y+1	; 0x01
     e36:	7a 81       	ldd	r23, Y+2	; 0x02
     e38:	8b 81       	ldd	r24, Y+3	; 0x03
     e3a:	9c 81       	ldd	r25, Y+4	; 0x04
     e3c:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
     e40:	2b 01       	movw	r4, r22
     e42:	3c 01       	movw	r6, r24
     e44:	c7 01       	movw	r24, r14
     e46:	b6 01       	movw	r22, r12
     e48:	68 19       	sub	r22, r8
     e4a:	79 09       	sbc	r23, r9
     e4c:	8a 09       	sbc	r24, r10
     e4e:	9b 09       	sbc	r25, r11
     e50:	0e 94 a6 0b 	call	0x174c	; 0x174c <__floatunsisf>
     e54:	a3 01       	movw	r20, r6
     e56:	92 01       	movw	r18, r4
     e58:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__cmpsf2>
     e5c:	88 23       	and	r24, r24
     e5e:	14 f3       	brlt	.-60     	; 0xe24 <motorControl+0x3d8>
		case 'R':
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     e60:	2a e0       	ldi	r18, 0x0A	; 10
     e62:	37 ed       	ldi	r19, 0xD7	; 215
     e64:	43 e2       	ldi	r20, 0x23	; 35
     e66:	5c e3       	ldi	r21, 0x3C	; 60
     e68:	6d 81       	ldd	r22, Y+5	; 0x05
     e6a:	7e 81       	ldd	r23, Y+6	; 0x06
     e6c:	8f 81       	ldd	r24, Y+7	; 0x07
     e6e:	98 85       	ldd	r25, Y+8	; 0x08
     e70:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__addsf3>
     e74:	6d 83       	std	Y+5, r22	; 0x05
     e76:	7e 83       	std	Y+6, r23	; 0x06
     e78:	8f 83       	std	Y+7, r24	; 0x07
     e7a:	98 87       	std	Y+8, r25	; 0x08
     e7c:	01 50       	subi	r16, 0x01	; 1
     e7e:	11 09       	sbc	r17, r1
     e80:	09 f0       	breq	.+2      	; 0xe84 <motorControl+0x438>
     e82:	4f cf       	rjmp	.-354    	; 0xd22 <motorControl+0x2d6>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = -speed;
     e84:	88 27       	eor	r24, r24
     e86:	99 27       	eor	r25, r25
     e88:	82 19       	sub	r24, r2
     e8a:	93 09       	sbc	r25, r3
     e8c:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <speedCurrentRight+0x1>
     e90:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <speedCurrentRight>
		speedCurrentLeft = speed;
     e94:	30 92 98 01 	sts	0x0198, r3	; 0x800198 <speedCurrentLeft+0x1>
     e98:	20 92 97 01 	sts	0x0197, r2	; 0x800197 <speedCurrentLeft>
     e9c:	05 e6       	ldi	r16, 0x65	; 101
     e9e:	10 e0       	ldi	r17, 0x00	; 0
		speed = 0;
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     ea0:	19 82       	std	Y+1, r1	; 0x01
     ea2:	1a 82       	std	Y+2, r1	; 0x02
     ea4:	1b 82       	std	Y+3, r1	; 0x03
     ea6:	1c 82       	std	Y+4, r1	; 0x04
			timerStart = get_ms();
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
     ea8:	9c 01       	movw	r18, r24
     eaa:	99 0f       	add	r25, r25
     eac:	44 0b       	sbc	r20, r20
     eae:	55 0b       	sbc	r21, r21
     eb0:	29 87       	std	Y+9, r18	; 0x09
     eb2:	3a 87       	std	Y+10, r19	; 0x0a
     eb4:	4b 87       	std	Y+11, r20	; 0x0b
     eb6:	5c 87       	std	Y+12, r21	; 0x0c
     eb8:	c1 2c       	mov	r12, r1
     eba:	d1 2c       	mov	r13, r1
     ebc:	76 01       	movw	r14, r12
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     ebe:	0e 94 ad 13 	call	0x275a	; 0x275a <get_ms>
     ec2:	7e 87       	std	Y+14, r23	; 0x0e
     ec4:	6d 87       	std	Y+13, r22	; 0x0d
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
     ec6:	60 91 9b 01 	lds	r22, 0x019B	; 0x80019b <speedCurrent>
     eca:	70 91 9c 01 	lds	r23, 0x019C	; 0x80019c <speedCurrent+0x1>
     ece:	07 2e       	mov	r0, r23
     ed0:	00 0c       	add	r0, r0
     ed2:	88 0b       	sbc	r24, r24
     ed4:	99 0b       	sbc	r25, r25
     ed6:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__floatsisf>
     eda:	69 83       	std	Y+1, r22	; 0x01
     edc:	7a 83       	std	Y+2, r23	; 0x02
     ede:	8b 83       	std	Y+3, r24	; 0x03
     ee0:	9c 83       	std	Y+4, r25	; 0x04
     ee2:	2b ed       	ldi	r18, 0xDB	; 219
     ee4:	3f e0       	ldi	r19, 0x0F	; 15
     ee6:	49 ec       	ldi	r20, 0xC9	; 201
     ee8:	50 e4       	ldi	r21, 0x40	; 64
     eea:	c7 01       	movw	r24, r14
     eec:	b6 01       	movw	r22, r12
     eee:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
     ef2:	0e 94 ca 0c 	call	0x1994	; 0x1994 <sin>
     ef6:	23 e8       	ldi	r18, 0x83	; 131
     ef8:	39 ef       	ldi	r19, 0xF9	; 249
     efa:	42 e2       	ldi	r20, 0x22	; 34
     efc:	5e e3       	ldi	r21, 0x3E	; 62
     efe:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
     f02:	a7 01       	movw	r20, r14
     f04:	96 01       	movw	r18, r12
     f06:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__addsf3>
     f0a:	4b 01       	movw	r8, r22
     f0c:	5c 01       	movw	r10, r24
     f0e:	69 85       	ldd	r22, Y+9	; 0x09
     f10:	7a 85       	ldd	r23, Y+10	; 0x0a
     f12:	8b 85       	ldd	r24, Y+11	; 0x0b
     f14:	9c 85       	ldd	r25, Y+12	; 0x0c
     f16:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__floatsisf>
     f1a:	9b 01       	movw	r18, r22
     f1c:	ac 01       	movw	r20, r24
     f1e:	c5 01       	movw	r24, r10
     f20:	b4 01       	movw	r22, r8
     f22:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
     f26:	4b 01       	movw	r8, r22
     f28:	5c 01       	movw	r10, r24
			
			motorLeftSpeed = speedCurrent + (speedCurrentLeft + (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     f2a:	60 91 99 01 	lds	r22, 0x0199	; 0x800199 <speedCurrentRight>
     f2e:	70 91 9a 01 	lds	r23, 0x019A	; 0x80019a <speedCurrentRight+0x1>
     f32:	07 2e       	mov	r0, r23
     f34:	00 0c       	add	r0, r0
     f36:	88 0b       	sbc	r24, r24
     f38:	99 0b       	sbc	r25, r25
     f3a:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__floatsisf>
     f3e:	a5 01       	movw	r20, r10
     f40:	94 01       	movw	r18, r8
     f42:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__subsf3>
     f46:	29 81       	ldd	r18, Y+1	; 0x01
     f48:	3a 81       	ldd	r19, Y+2	; 0x02
     f4a:	4b 81       	ldd	r20, Y+3	; 0x03
     f4c:	5c 81       	ldd	r21, Y+4	; 0x04
     f4e:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__addsf3>
     f52:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__fixsfsi>
     f56:	6d 83       	std	Y+5, r22	; 0x05
     f58:	7e 83       	std	Y+6, r23	; 0x06
     f5a:	8f 83       	std	Y+7, r24	; 0x07
     f5c:	98 87       	std	Y+8, r25	; 0x08
     f5e:	60 91 97 01 	lds	r22, 0x0197	; 0x800197 <speedCurrentLeft>
     f62:	70 91 98 01 	lds	r23, 0x0198	; 0x800198 <speedCurrentLeft+0x1>
     f66:	07 2e       	mov	r0, r23
     f68:	00 0c       	add	r0, r0
     f6a:	88 0b       	sbc	r24, r24
     f6c:	99 0b       	sbc	r25, r25
     f6e:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__floatsisf>
     f72:	a5 01       	movw	r20, r10
     f74:	94 01       	movw	r18, r8
     f76:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__addsf3>
     f7a:	29 81       	ldd	r18, Y+1	; 0x01
     f7c:	3a 81       	ldd	r19, Y+2	; 0x02
     f7e:	4b 81       	ldd	r20, Y+3	; 0x03
     f80:	5c 81       	ldd	r21, Y+4	; 0x04
     f82:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__addsf3>
     f86:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__fixsfsi>
     f8a:	dc 01       	movw	r26, r24
     f8c:	cb 01       	movw	r24, r22
     f8e:	6d 81       	ldd	r22, Y+5	; 0x05
     f90:	7e 81       	ldd	r23, Y+6	; 0x06
     f92:	0e 94 77 12 	call	0x24ee	; 0x24ee <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     f96:	4d 85       	ldd	r20, Y+13	; 0x0d
     f98:	5e 85       	ldd	r21, Y+14	; 0x0e
     f9a:	4a 01       	movw	r8, r20
     f9c:	55 0f       	add	r21, r21
     f9e:	aa 08       	sbc	r10, r10
     fa0:	bb 08       	sbc	r11, r11
     fa2:	0e 94 ad 13 	call	0x275a	; 0x275a <get_ms>
     fa6:	68 19       	sub	r22, r8
     fa8:	79 09       	sbc	r23, r9
     faa:	8a 09       	sbc	r24, r10
     fac:	9b 09       	sbc	r25, r11
     fae:	0e 94 a6 0b 	call	0x174c	; 0x174c <__floatunsisf>
     fb2:	9b 01       	movw	r18, r22
     fb4:	ac 01       	movw	r20, r24
     fb6:	c3 01       	movw	r24, r6
     fb8:	b2 01       	movw	r22, r4
     fba:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <__gesf2>
     fbe:	18 16       	cp	r1, r24
     fc0:	84 f3       	brlt	.-32     	; 0xfa2 <motorControl+0x556>
		speed = 0;
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     fc2:	2a e0       	ldi	r18, 0x0A	; 10
     fc4:	37 ed       	ldi	r19, 0xD7	; 215
     fc6:	43 e2       	ldi	r20, 0x23	; 35
     fc8:	5c e3       	ldi	r21, 0x3C	; 60
     fca:	c7 01       	movw	r24, r14
     fcc:	b6 01       	movw	r22, r12
     fce:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__addsf3>
     fd2:	6b 01       	movw	r12, r22
     fd4:	7c 01       	movw	r14, r24
     fd6:	01 50       	subi	r16, 0x01	; 1
     fd8:	11 09       	sbc	r17, r1
     fda:	09 f0       	breq	.+2      	; 0xfde <motorControl+0x592>
     fdc:	70 cf       	rjmp	.-288    	; 0xebe <motorControl+0x472>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = -speed;
     fde:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <speedCurrentRight+0x1>
     fe2:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <speedCurrentRight>
		speedCurrentLeft = speed;
     fe6:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <speedCurrentLeft+0x1>
     fea:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <speedCurrentLeft>
		
		break;
     fee:	62 c1       	rjmp	.+708    	; 0x12b4 <motorControl+0x868>

		case 'L':
		
		setSpeedRight = speed - speedCurrentRight;
     ff0:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <speedCurrentRight>
     ff4:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <speedCurrentRight+0x1>
     ff8:	91 01       	movw	r18, r2
     ffa:	28 1b       	sub	r18, r24
     ffc:	39 0b       	sbc	r19, r25
		setSpeedLeft = speed + speedCurrentLeft;
     ffe:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <speedCurrentLeft>
    1002:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <speedCurrentLeft+0x1>
    1006:	82 0d       	add	r24, r2
    1008:	93 1d       	adc	r25, r3
    100a:	65 e6       	ldi	r22, 0x65	; 101
    100c:	70 e0       	ldi	r23, 0x00	; 0
    100e:	7a 8b       	std	Y+18, r23	; 0x12
    1010:	69 8b       	std	Y+17, r22	; 0x11
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
    1012:	1d 82       	std	Y+5, r1	; 0x05
    1014:	1e 82       	std	Y+6, r1	; 0x06
    1016:	1f 82       	std	Y+7, r1	; 0x07
    1018:	18 86       	std	Y+8, r1	; 0x08
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
			
			motorLeftSpeed = speedCurrentLeft - (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ));
			
			set_motors(motorLeftSpeed, motorRightSpeed);
    101a:	a9 01       	movw	r20, r18
    101c:	33 0f       	add	r19, r19
    101e:	66 0b       	sbc	r22, r22
    1020:	77 0b       	sbc	r23, r23
    1022:	49 87       	std	Y+9, r20	; 0x09
    1024:	5a 87       	std	Y+10, r21	; 0x0a
    1026:	6b 87       	std	Y+11, r22	; 0x0b
    1028:	7c 87       	std	Y+12, r23	; 0x0c
    102a:	9c 01       	movw	r18, r24
    102c:	99 0f       	add	r25, r25
    102e:	44 0b       	sbc	r20, r20
    1030:	55 0b       	sbc	r21, r21
    1032:	2d 87       	std	Y+13, r18	; 0x0d
    1034:	3e 87       	std	Y+14, r19	; 0x0e
    1036:	4f 87       	std	Y+15, r20	; 0x0f
    1038:	58 8b       	std	Y+16, r21	; 0x10
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
    103a:	0e 94 ad 13 	call	0x275a	; 0x275a <get_ms>
    103e:	8b 01       	movw	r16, r22
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
    1040:	2b ed       	ldi	r18, 0xDB	; 219
    1042:	3f e0       	ldi	r19, 0x0F	; 15
    1044:	49 ec       	ldi	r20, 0xC9	; 201
    1046:	50 e4       	ldi	r21, 0x40	; 64
    1048:	6d 81       	ldd	r22, Y+5	; 0x05
    104a:	7e 81       	ldd	r23, Y+6	; 0x06
    104c:	8f 81       	ldd	r24, Y+7	; 0x07
    104e:	98 85       	ldd	r25, Y+8	; 0x08
    1050:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
    1054:	0e 94 ca 0c 	call	0x1994	; 0x1994 <sin>
    1058:	23 e8       	ldi	r18, 0x83	; 131
    105a:	39 ef       	ldi	r19, 0xF9	; 249
    105c:	42 e2       	ldi	r20, 0x22	; 34
    105e:	5e e3       	ldi	r21, 0x3E	; 62
    1060:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
    1064:	2d 81       	ldd	r18, Y+5	; 0x05
    1066:	3e 81       	ldd	r19, Y+6	; 0x06
    1068:	4f 81       	ldd	r20, Y+7	; 0x07
    106a:	58 85       	ldd	r21, Y+8	; 0x08
    106c:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__addsf3>
    1070:	6b 01       	movw	r12, r22
    1072:	7c 01       	movw	r14, r24
			
			motorLeftSpeed = speedCurrentLeft - (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ));
			
			set_motors(motorLeftSpeed, motorRightSpeed);
    1074:	60 91 99 01 	lds	r22, 0x0199	; 0x800199 <speedCurrentRight>
    1078:	70 91 9a 01 	lds	r23, 0x019A	; 0x80019a <speedCurrentRight+0x1>
    107c:	07 2e       	mov	r0, r23
    107e:	00 0c       	add	r0, r0
    1080:	88 0b       	sbc	r24, r24
    1082:	99 0b       	sbc	r25, r25
    1084:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__floatsisf>
    1088:	4b 01       	movw	r8, r22
    108a:	5c 01       	movw	r10, r24
    108c:	69 85       	ldd	r22, Y+9	; 0x09
    108e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1090:	8b 85       	ldd	r24, Y+11	; 0x0b
    1092:	9c 85       	ldd	r25, Y+12	; 0x0c
    1094:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__floatsisf>
    1098:	a7 01       	movw	r20, r14
    109a:	96 01       	movw	r18, r12
    109c:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
    10a0:	9b 01       	movw	r18, r22
    10a2:	ac 01       	movw	r20, r24
    10a4:	c5 01       	movw	r24, r10
    10a6:	b4 01       	movw	r22, r8
    10a8:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__addsf3>
    10ac:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__fixsfsi>
    10b0:	4b 01       	movw	r8, r22
    10b2:	5c 01       	movw	r10, r24
    10b4:	60 91 97 01 	lds	r22, 0x0197	; 0x800197 <speedCurrentLeft>
    10b8:	70 91 98 01 	lds	r23, 0x0198	; 0x800198 <speedCurrentLeft+0x1>
    10bc:	07 2e       	mov	r0, r23
    10be:	00 0c       	add	r0, r0
    10c0:	88 0b       	sbc	r24, r24
    10c2:	99 0b       	sbc	r25, r25
    10c4:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__floatsisf>
    10c8:	2b 01       	movw	r4, r22
    10ca:	3c 01       	movw	r6, r24
    10cc:	6d 85       	ldd	r22, Y+13	; 0x0d
    10ce:	7e 85       	ldd	r23, Y+14	; 0x0e
    10d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    10d2:	98 89       	ldd	r25, Y+16	; 0x10
    10d4:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__floatsisf>
    10d8:	a7 01       	movw	r20, r14
    10da:	96 01       	movw	r18, r12
    10dc:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
    10e0:	9b 01       	movw	r18, r22
    10e2:	ac 01       	movw	r20, r24
    10e4:	c3 01       	movw	r24, r6
    10e6:	b2 01       	movw	r22, r4
    10e8:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__subsf3>
    10ec:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__fixsfsi>
    10f0:	dc 01       	movw	r26, r24
    10f2:	cb 01       	movw	r24, r22
    10f4:	b4 01       	movw	r22, r8
    10f6:	0e 94 77 12 	call	0x24ee	; 0x24ee <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
    10fa:	48 01       	movw	r8, r16
    10fc:	11 0f       	add	r17, r17
    10fe:	aa 08       	sbc	r10, r10
    1100:	bb 08       	sbc	r11, r11
    1102:	0e 94 ad 13 	call	0x275a	; 0x275a <get_ms>
    1106:	2b 01       	movw	r4, r22
    1108:	3c 01       	movw	r6, r24
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	40 e2       	ldi	r20, 0x20	; 32
    1110:	51 e4       	ldi	r21, 0x41	; 65
    1112:	69 81       	ldd	r22, Y+1	; 0x01
    1114:	7a 81       	ldd	r23, Y+2	; 0x02
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	9c 81       	ldd	r25, Y+4	; 0x04
    111a:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
    111e:	6b 01       	movw	r12, r22
    1120:	7c 01       	movw	r14, r24
    1122:	c3 01       	movw	r24, r6
    1124:	b2 01       	movw	r22, r4
    1126:	68 19       	sub	r22, r8
    1128:	79 09       	sbc	r23, r9
    112a:	8a 09       	sbc	r24, r10
    112c:	9b 09       	sbc	r25, r11
    112e:	0e 94 a6 0b 	call	0x174c	; 0x174c <__floatunsisf>
    1132:	a7 01       	movw	r20, r14
    1134:	96 01       	movw	r18, r12
    1136:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__cmpsf2>
    113a:	88 23       	and	r24, r24
    113c:	14 f3       	brlt	.-60     	; 0x1102 <motorControl+0x6b6>
		case 'L':
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
    113e:	2a e0       	ldi	r18, 0x0A	; 10
    1140:	37 ed       	ldi	r19, 0xD7	; 215
    1142:	43 e2       	ldi	r20, 0x23	; 35
    1144:	5c e3       	ldi	r21, 0x3C	; 60
    1146:	6d 81       	ldd	r22, Y+5	; 0x05
    1148:	7e 81       	ldd	r23, Y+6	; 0x06
    114a:	8f 81       	ldd	r24, Y+7	; 0x07
    114c:	98 85       	ldd	r25, Y+8	; 0x08
    114e:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__addsf3>
    1152:	6d 83       	std	Y+5, r22	; 0x05
    1154:	7e 83       	std	Y+6, r23	; 0x06
    1156:	8f 83       	std	Y+7, r24	; 0x07
    1158:	98 87       	std	Y+8, r25	; 0x08
    115a:	a9 89       	ldd	r26, Y+17	; 0x11
    115c:	ba 89       	ldd	r27, Y+18	; 0x12
    115e:	11 97       	sbiw	r26, 0x01	; 1
    1160:	ba 8b       	std	Y+18, r27	; 0x12
    1162:	a9 8b       	std	Y+17, r26	; 0x11
    1164:	ab 2b       	or	r26, r27
    1166:	09 f0       	breq	.+2      	; 0x116a <motorControl+0x71e>
    1168:	68 cf       	rjmp	.-304    	; 0x103a <motorControl+0x5ee>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = speed;
    116a:	30 92 9a 01 	sts	0x019A, r3	; 0x80019a <speedCurrentRight+0x1>
    116e:	20 92 99 01 	sts	0x0199, r2	; 0x800199 <speedCurrentRight>
		speedCurrentLeft = -speed;
    1172:	31 94       	neg	r3
    1174:	21 94       	neg	r2
    1176:	31 08       	sbc	r3, r1
    1178:	30 92 98 01 	sts	0x0198, r3	; 0x800198 <speedCurrentLeft+0x1>
    117c:	20 92 97 01 	sts	0x0197, r2	; 0x800197 <speedCurrentLeft>
    1180:	25 e6       	ldi	r18, 0x65	; 101
    1182:	30 e0       	ldi	r19, 0x00	; 0
		speed = 0;
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
    1184:	19 82       	std	Y+1, r1	; 0x01
    1186:	1a 82       	std	Y+2, r1	; 0x02
    1188:	1b 82       	std	Y+3, r1	; 0x03
    118a:	1c 82       	std	Y+4, r1	; 0x04
			timerStart = get_ms();
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
    118c:	a1 01       	movw	r20, r2
    118e:	33 0c       	add	r3, r3
    1190:	66 0b       	sbc	r22, r22
    1192:	77 0b       	sbc	r23, r23
    1194:	4d 83       	std	Y+5, r20	; 0x05
    1196:	5e 83       	std	Y+6, r21	; 0x06
    1198:	6f 83       	std	Y+7, r22	; 0x07
    119a:	78 87       	std	Y+8, r23	; 0x08
    119c:	3a 87       	std	Y+10, r19	; 0x0a
    119e:	29 87       	std	Y+9, r18	; 0x09
    11a0:	81 2c       	mov	r8, r1
    11a2:	91 2c       	mov	r9, r1
    11a4:	54 01       	movw	r10, r8
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
    11a6:	0e 94 ad 13 	call	0x275a	; 0x275a <get_ms>
    11aa:	8b 01       	movw	r16, r22
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
    11ac:	2b ed       	ldi	r18, 0xDB	; 219
    11ae:	3f e0       	ldi	r19, 0x0F	; 15
    11b0:	49 ec       	ldi	r20, 0xC9	; 201
    11b2:	50 e4       	ldi	r21, 0x40	; 64
    11b4:	c5 01       	movw	r24, r10
    11b6:	b4 01       	movw	r22, r8
    11b8:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
    11bc:	0e 94 ca 0c 	call	0x1994	; 0x1994 <sin>
    11c0:	23 e8       	ldi	r18, 0x83	; 131
    11c2:	39 ef       	ldi	r19, 0xF9	; 249
    11c4:	42 e2       	ldi	r20, 0x22	; 34
    11c6:	5e e3       	ldi	r21, 0x3E	; 62
    11c8:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
    11cc:	a5 01       	movw	r20, r10
    11ce:	94 01       	movw	r18, r8
    11d0:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__addsf3>
    11d4:	2b 01       	movw	r4, r22
    11d6:	3c 01       	movw	r6, r24
    11d8:	6d 81       	ldd	r22, Y+5	; 0x05
    11da:	7e 81       	ldd	r23, Y+6	; 0x06
    11dc:	8f 81       	ldd	r24, Y+7	; 0x07
    11de:	98 85       	ldd	r25, Y+8	; 0x08
    11e0:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__floatsisf>
    11e4:	9b 01       	movw	r18, r22
    11e6:	ac 01       	movw	r20, r24
    11e8:	c3 01       	movw	r24, r6
    11ea:	b2 01       	movw	r22, r4
    11ec:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
    11f0:	2b 01       	movw	r4, r22
    11f2:	3c 01       	movw	r6, r24
			
			motorLeftSpeed = speedCurrentLeft - (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ));
			
			set_motors(motorLeftSpeed, motorRightSpeed);
    11f4:	60 91 99 01 	lds	r22, 0x0199	; 0x800199 <speedCurrentRight>
    11f8:	70 91 9a 01 	lds	r23, 0x019A	; 0x80019a <speedCurrentRight+0x1>
    11fc:	07 2e       	mov	r0, r23
    11fe:	00 0c       	add	r0, r0
    1200:	88 0b       	sbc	r24, r24
    1202:	99 0b       	sbc	r25, r25
    1204:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__floatsisf>
    1208:	a3 01       	movw	r20, r6
    120a:	92 01       	movw	r18, r4
    120c:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__addsf3>
    1210:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__fixsfsi>
    1214:	69 83       	std	Y+1, r22	; 0x01
    1216:	7a 83       	std	Y+2, r23	; 0x02
    1218:	8b 83       	std	Y+3, r24	; 0x03
    121a:	9c 83       	std	Y+4, r25	; 0x04
    121c:	60 91 97 01 	lds	r22, 0x0197	; 0x800197 <speedCurrentLeft>
    1220:	70 91 98 01 	lds	r23, 0x0198	; 0x800198 <speedCurrentLeft+0x1>
    1224:	07 2e       	mov	r0, r23
    1226:	00 0c       	add	r0, r0
    1228:	88 0b       	sbc	r24, r24
    122a:	99 0b       	sbc	r25, r25
    122c:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__floatsisf>
    1230:	a3 01       	movw	r20, r6
    1232:	92 01       	movw	r18, r4
    1234:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__subsf3>
    1238:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__fixsfsi>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	69 81       	ldd	r22, Y+1	; 0x01
    1242:	7a 81       	ldd	r23, Y+2	; 0x02
    1244:	0e 94 77 12 	call	0x24ee	; 0x24ee <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
    1248:	28 01       	movw	r4, r16
    124a:	11 0f       	add	r17, r17
    124c:	66 08       	sbc	r6, r6
    124e:	77 08       	sbc	r7, r7
    1250:	0e 94 ad 13 	call	0x275a	; 0x275a <get_ms>
    1254:	64 19       	sub	r22, r4
    1256:	75 09       	sbc	r23, r5
    1258:	86 09       	sbc	r24, r6
    125a:	97 09       	sbc	r25, r7
    125c:	0e 94 a6 0b 	call	0x174c	; 0x174c <__floatunsisf>
    1260:	9b 01       	movw	r18, r22
    1262:	ac 01       	movw	r20, r24
    1264:	c7 01       	movw	r24, r14
    1266:	b6 01       	movw	r22, r12
    1268:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <__gesf2>
    126c:	18 16       	cp	r1, r24
    126e:	84 f3       	brlt	.-32     	; 0x1250 <motorControl+0x804>
		speed = 0;
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
    1270:	2a e0       	ldi	r18, 0x0A	; 10
    1272:	37 ed       	ldi	r19, 0xD7	; 215
    1274:	43 e2       	ldi	r20, 0x23	; 35
    1276:	5c e3       	ldi	r21, 0x3C	; 60
    1278:	c5 01       	movw	r24, r10
    127a:	b4 01       	movw	r22, r8
    127c:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__addsf3>
    1280:	4b 01       	movw	r8, r22
    1282:	5c 01       	movw	r10, r24
    1284:	69 85       	ldd	r22, Y+9	; 0x09
    1286:	7a 85       	ldd	r23, Y+10	; 0x0a
    1288:	61 50       	subi	r22, 0x01	; 1
    128a:	71 09       	sbc	r23, r1
    128c:	7a 87       	std	Y+10, r23	; 0x0a
    128e:	69 87       	std	Y+9, r22	; 0x09
    1290:	67 2b       	or	r22, r23
    1292:	09 f0       	breq	.+2      	; 0x1296 <motorControl+0x84a>
    1294:	88 cf       	rjmp	.-240    	; 0x11a6 <motorControl+0x75a>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = speed;
    1296:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <speedCurrentRight+0x1>
    129a:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <speedCurrentRight>
		speedCurrentLeft = -speed;
    129e:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <speedCurrentLeft+0x1>
    12a2:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <speedCurrentLeft>
		break;
    12a6:	06 c0       	rjmp	.+12     	; 0x12b4 <motorControl+0x868>
		
		default:
		set_motors(0,0);
    12a8:	60 e0       	ldi	r22, 0x00	; 0
    12aa:	70 e0       	ldi	r23, 0x00	; 0
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	0e 94 77 12 	call	0x24ee	; 0x24ee <set_motors>
		break;
	}
    12b4:	66 96       	adiw	r28, 0x16	; 22
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	f8 94       	cli
    12ba:	de bf       	out	0x3e, r29	; 62
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	cd bf       	out	0x3d, r28	; 61
    12c0:	df 91       	pop	r29
    12c2:	cf 91       	pop	r28
    12c4:	1f 91       	pop	r17
    12c6:	0f 91       	pop	r16
    12c8:	ff 90       	pop	r15
    12ca:	ef 90       	pop	r14
    12cc:	df 90       	pop	r13
    12ce:	cf 90       	pop	r12
    12d0:	bf 90       	pop	r11
    12d2:	af 90       	pop	r10
    12d4:	9f 90       	pop	r9
    12d6:	8f 90       	pop	r8
    12d8:	7f 90       	pop	r7
    12da:	6f 90       	pop	r6
    12dc:	5f 90       	pop	r5
    12de:	4f 90       	pop	r4
    12e0:	3f 90       	pop	r3
    12e2:	2f 90       	pop	r2
    12e4:	08 95       	ret

000012e6 <followLine>:

}


void followLine()
{
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
	
	unsigned int pos = read_line(sensors,IR_EMITTERS_ON);
    12ea:	61 e0       	ldi	r22, 0x01	; 1
    12ec:	88 ef       	ldi	r24, 0xF8	; 248
    12ee:	91 e0       	ldi	r25, 0x01	; 1
    12f0:	0e 94 b0 13 	call	0x2760	; 0x2760 <read_line>
    12f4:	ec 01       	movw	r28, r24
	clear();
    12f6:	0e 94 c1 11 	call	0x2382	; 0x2382 <clear>
	
		if(pos < 1950)
    12fa:	ce 39       	cpi	r28, 0x9E	; 158
    12fc:	87 e0       	ldi	r24, 0x07	; 7
    12fe:	d8 07       	cpc	r29, r24
    1300:	c8 f4       	brcc	.+50     	; 0x1334 <followLine+0x4e>
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
    1302:	5f 9a       	sbi	0x0b, 7	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    1304:	57 9a       	sbi	0x0a, 7	; 10
		{
			// We are far to the right of the line: turn left.
			green_led(1);

			if(pos < 1800)
    1306:	c8 30       	cpi	r28, 0x08	; 8
    1308:	d7 40       	sbci	r29, 0x07	; 7
    130a:	50 f4       	brcc	.+20     	; 0x1320 <followLine+0x3a>
			{
				motorControl(SPEED, 'L' ,0.89);
    130c:	2a e0       	ldi	r18, 0x0A	; 10
    130e:	37 ed       	ldi	r19, 0xD7	; 215
    1310:	43 e6       	ldi	r20, 0x63	; 99
    1312:	5f e3       	ldi	r21, 0x3F	; 63
    1314:	6c e4       	ldi	r22, 0x4C	; 76
    1316:	8c e3       	ldi	r24, 0x3C	; 60
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	0e 94 26 05 	call	0xa4c	; 0xa4c <motorControl>
    131e:	34 c0       	rjmp	.+104    	; 0x1388 <followLine+0xa2>
			}
			else
			{
				motorControl(SLOW,'L', 0.89);
    1320:	2a e0       	ldi	r18, 0x0A	; 10
    1322:	37 ed       	ldi	r19, 0xD7	; 215
    1324:	43 e6       	ldi	r20, 0x63	; 99
    1326:	5f e3       	ldi	r21, 0x3F	; 63
    1328:	6c e4       	ldi	r22, 0x4C	; 76
    132a:	8d e2       	ldi	r24, 0x2D	; 45
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	0e 94 26 05 	call	0xa4c	; 0xa4c <motorControl>
    1332:	2a c0       	rjmp	.+84     	; 0x1388 <followLine+0xa2>
			}
			
		}
		
		else if (pos > 2050)
    1334:	c3 30       	cpi	r28, 0x03	; 3
    1336:	88 e0       	ldi	r24, 0x08	; 8
    1338:	d8 07       	cpc	r29, r24
    133a:	c8 f0       	brcs	.+50     	; 0x136e <followLine+0x88>
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
    133c:	59 9a       	sbi	0x0b, 1	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    133e:	51 9a       	sbi	0x0a, 1	; 10
		{
			// We are far to the left of the line: turn right.
			red_led(1);
			
			if(pos > 2200)
    1340:	c9 39       	cpi	r28, 0x99	; 153
    1342:	d8 40       	sbci	r29, 0x08	; 8
    1344:	50 f0       	brcs	.+20     	; 0x135a <followLine+0x74>
			{
				motorControl(SPEED,'R', 0.89);
    1346:	2a e0       	ldi	r18, 0x0A	; 10
    1348:	37 ed       	ldi	r19, 0xD7	; 215
    134a:	43 e6       	ldi	r20, 0x63	; 99
    134c:	5f e3       	ldi	r21, 0x3F	; 63
    134e:	62 e5       	ldi	r22, 0x52	; 82
    1350:	8c e3       	ldi	r24, 0x3C	; 60
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	0e 94 26 05 	call	0xa4c	; 0xa4c <motorControl>
    1358:	17 c0       	rjmp	.+46     	; 0x1388 <followLine+0xa2>
			}
			else
			{
				motorControl(SLOW,'R', 0.89);
    135a:	2a e0       	ldi	r18, 0x0A	; 10
    135c:	37 ed       	ldi	r19, 0xD7	; 215
    135e:	43 e6       	ldi	r20, 0x63	; 99
    1360:	5f e3       	ldi	r21, 0x3F	; 63
    1362:	62 e5       	ldi	r22, 0x52	; 82
    1364:	8d e2       	ldi	r24, 0x2D	; 45
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	0e 94 26 05 	call	0xa4c	; 0xa4c <motorControl>
    136c:	0d c0       	rjmp	.+26     	; 0x1388 <followLine+0xa2>
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
	else
		*(ioPin->portRegister) &= ~ioPin->bitmask;
    136e:	59 98       	cbi	0x0b, 1	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    1370:	51 9a       	sbi	0x0a, 1	; 10
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
	else
		*(ioPin->portRegister) &= ~ioPin->bitmask;
    1372:	5f 98       	cbi	0x0b, 7	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    1374:	57 9a       	sbi	0x0a, 7	; 10
		}
		else
		{
			red_led(0);
			green_led(0);
			motorControl(SPEED,'F', 0.89);
    1376:	2a e0       	ldi	r18, 0x0A	; 10
    1378:	37 ed       	ldi	r19, 0xD7	; 215
    137a:	43 e6       	ldi	r20, 0x63	; 99
    137c:	5f e3       	ldi	r21, 0x3F	; 63
    137e:	66 e4       	ldi	r22, 0x46	; 70
    1380:	8c e3       	ldi	r24, 0x3C	; 60
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	0e 94 26 05 	call	0xa4c	; 0xa4c <motorControl>
		
		}

	
}
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	08 95       	ret

0000138e <checkAfslag>:


int checkAfslag()
{
	read_line(sensors,IR_EMITTERS_ON);
    138e:	61 e0       	ldi	r22, 0x01	; 1
    1390:	88 ef       	ldi	r24, 0xF8	; 248
    1392:	91 e0       	ldi	r25, 0x01	; 1
    1394:	0e 94 b0 13 	call	0x2760	; 0x2760 <read_line>
	
	if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C < low_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
    1398:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <sensors>
    139c:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <sensors+0x1>
    13a0:	89 30       	cpi	r24, 0x09	; 9
    13a2:	27 e0       	ldi	r18, 0x07	; 7
    13a4:	92 07       	cpc	r25, r18
    13a6:	00 f1       	brcs	.+64     	; 0x13e8 <checkAfslag+0x5a>
    13a8:	20 91 fa 01 	lds	r18, 0x01FA	; 0x8001fa <sensors+0x2>
    13ac:	30 91 fb 01 	lds	r19, 0x01FB	; 0x8001fb <sensors+0x3>
    13b0:	28 3e       	cpi	r18, 0xE8	; 232
    13b2:	33 40       	sbci	r19, 0x03	; 3
    13b4:	c8 f4       	brcc	.+50     	; 0x13e8 <checkAfslag+0x5a>
    13b6:	20 91 fc 01 	lds	r18, 0x01FC	; 0x8001fc <sensors+0x4>
    13ba:	30 91 fd 01 	lds	r19, 0x01FD	; 0x8001fd <sensors+0x5>
    13be:	28 3e       	cpi	r18, 0xE8	; 232
    13c0:	33 40       	sbci	r19, 0x03	; 3
    13c2:	08 f0       	brcs	.+2      	; 0x13c6 <checkAfslag+0x38>
    13c4:	fb c0       	rjmp	.+502    	; 0x15bc <checkAfslag+0x22e>
    13c6:	20 91 fe 01 	lds	r18, 0x01FE	; 0x8001fe <sensors+0x6>
    13ca:	30 91 ff 01 	lds	r19, 0x01FF	; 0x8001ff <sensors+0x7>
    13ce:	28 3e       	cpi	r18, 0xE8	; 232
    13d0:	33 40       	sbci	r19, 0x03	; 3
    13d2:	08 f0       	brcs	.+2      	; 0x13d6 <checkAfslag+0x48>
    13d4:	f3 c0       	rjmp	.+486    	; 0x15bc <checkAfslag+0x22e>
    13d6:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <sensors+0x8>
    13da:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <sensors+0x9>
    13de:	28 3e       	cpi	r18, 0xE8	; 232
    13e0:	33 40       	sbci	r19, 0x03	; 3
    13e2:	08 f4       	brcc	.+2      	; 0x13e6 <checkAfslag+0x58>
    13e4:	ca c0       	rjmp	.+404    	; 0x157a <checkAfslag+0x1ec>
    13e6:	ea c0       	rjmp	.+468    	; 0x15bc <checkAfslag+0x22e>
	{
		return LEFT; //afslag naar links
	}
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_C < low_range && SENSOR_C_R < low_range && SENSOR_R > high_range)
    13e8:	88 3e       	cpi	r24, 0xE8	; 232
    13ea:	23 e0       	ldi	r18, 0x03	; 3
    13ec:	92 07       	cpc	r25, r18
    13ee:	00 f5       	brcc	.+64     	; 0x1430 <checkAfslag+0xa2>
    13f0:	20 91 fa 01 	lds	r18, 0x01FA	; 0x8001fa <sensors+0x2>
    13f4:	30 91 fb 01 	lds	r19, 0x01FB	; 0x8001fb <sensors+0x3>
    13f8:	28 3e       	cpi	r18, 0xE8	; 232
    13fa:	33 40       	sbci	r19, 0x03	; 3
    13fc:	c8 f4       	brcc	.+50     	; 0x1430 <checkAfslag+0xa2>
    13fe:	20 91 fc 01 	lds	r18, 0x01FC	; 0x8001fc <sensors+0x4>
    1402:	30 91 fd 01 	lds	r19, 0x01FD	; 0x8001fd <sensors+0x5>
    1406:	28 3e       	cpi	r18, 0xE8	; 232
    1408:	33 40       	sbci	r19, 0x03	; 3
    140a:	08 f0       	brcs	.+2      	; 0x140e <checkAfslag+0x80>
    140c:	dd c0       	rjmp	.+442    	; 0x15c8 <checkAfslag+0x23a>
    140e:	20 91 fe 01 	lds	r18, 0x01FE	; 0x8001fe <sensors+0x6>
    1412:	30 91 ff 01 	lds	r19, 0x01FF	; 0x8001ff <sensors+0x7>
    1416:	28 3e       	cpi	r18, 0xE8	; 232
    1418:	33 40       	sbci	r19, 0x03	; 3
    141a:	08 f0       	brcs	.+2      	; 0x141e <checkAfslag+0x90>
    141c:	d5 c0       	rjmp	.+426    	; 0x15c8 <checkAfslag+0x23a>
    141e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <sensors+0x8>
    1422:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <sensors+0x9>
    1426:	29 30       	cpi	r18, 0x09	; 9
    1428:	37 40       	sbci	r19, 0x07	; 7
    142a:	08 f4       	brcc	.+2      	; 0x142e <checkAfslag+0xa0>
    142c:	cd c0       	rjmp	.+410    	; 0x15c8 <checkAfslag+0x23a>
    142e:	a8 c0       	rjmp	.+336    	; 0x1580 <checkAfslag+0x1f2>
	{
		return RIGHT; //afslag naar rechts
	}
	else if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_R > high_range)
    1430:	89 30       	cpi	r24, 0x09	; 9
    1432:	27 e0       	ldi	r18, 0x07	; 7
    1434:	92 07       	cpc	r25, r18
    1436:	08 f4       	brcc	.+2      	; 0x143a <checkAfslag+0xac>
    1438:	d3 c0       	rjmp	.+422    	; 0x15e0 <checkAfslag+0x252>
    143a:	20 91 fa 01 	lds	r18, 0x01FA	; 0x8001fa <sensors+0x2>
    143e:	30 91 fb 01 	lds	r19, 0x01FB	; 0x8001fb <sensors+0x3>
    1442:	28 3e       	cpi	r18, 0xE8	; 232
    1444:	33 40       	sbci	r19, 0x03	; 3
    1446:	b0 f4       	brcc	.+44     	; 0x1474 <checkAfslag+0xe6>
    1448:	20 91 fc 01 	lds	r18, 0x01FC	; 0x8001fc <sensors+0x4>
    144c:	30 91 fd 01 	lds	r19, 0x01FD	; 0x8001fd <sensors+0x5>
    1450:	29 30       	cpi	r18, 0x09	; 9
    1452:	37 40       	sbci	r19, 0x07	; 7
    1454:	78 f0       	brcs	.+30     	; 0x1474 <checkAfslag+0xe6>
    1456:	20 91 fe 01 	lds	r18, 0x01FE	; 0x8001fe <sensors+0x6>
    145a:	30 91 ff 01 	lds	r19, 0x01FF	; 0x8001ff <sensors+0x7>
    145e:	28 3e       	cpi	r18, 0xE8	; 232
    1460:	33 40       	sbci	r19, 0x03	; 3
    1462:	40 f4       	brcc	.+16     	; 0x1474 <checkAfslag+0xe6>
    1464:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <sensors+0x8>
    1468:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <sensors+0x9>
    146c:	29 30       	cpi	r18, 0x09	; 9
    146e:	37 40       	sbci	r19, 0x07	; 7
    1470:	08 f0       	brcs	.+2      	; 0x1474 <checkAfslag+0xe6>
    1472:	89 c0       	rjmp	.+274    	; 0x1586 <checkAfslag+0x1f8>
	{
		return FOUR_WAY_JOINT; //kruispunt
	}
	else if(SENSOR_L > high_range && SENSOR_C_L > high_range && SENSOR_C_C < low_range && SENSOR_C_R > high_range && SENSOR_R > high_range)
    1474:	20 91 fa 01 	lds	r18, 0x01FA	; 0x8001fa <sensors+0x2>
    1478:	30 91 fb 01 	lds	r19, 0x01FB	; 0x8001fb <sensors+0x3>
    147c:	29 30       	cpi	r18, 0x09	; 9
    147e:	47 e0       	ldi	r20, 0x07	; 7
    1480:	34 07       	cpc	r19, r20
    1482:	b0 f0       	brcs	.+44     	; 0x14b0 <checkAfslag+0x122>
    1484:	40 91 fc 01 	lds	r20, 0x01FC	; 0x8001fc <sensors+0x4>
    1488:	50 91 fd 01 	lds	r21, 0x01FD	; 0x8001fd <sensors+0x5>
    148c:	48 3e       	cpi	r20, 0xE8	; 232
    148e:	53 40       	sbci	r21, 0x03	; 3
    1490:	78 f4       	brcc	.+30     	; 0x14b0 <checkAfslag+0x122>
    1492:	40 91 fe 01 	lds	r20, 0x01FE	; 0x8001fe <sensors+0x6>
    1496:	50 91 ff 01 	lds	r21, 0x01FF	; 0x8001ff <sensors+0x7>
    149a:	49 30       	cpi	r20, 0x09	; 9
    149c:	57 40       	sbci	r21, 0x07	; 7
    149e:	40 f0       	brcs	.+16     	; 0x14b0 <checkAfslag+0x122>
    14a0:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <sensors+0x8>
    14a4:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <sensors+0x9>
    14a8:	49 30       	cpi	r20, 0x09	; 9
    14aa:	57 40       	sbci	r21, 0x07	; 7
    14ac:	08 f0       	brcs	.+2      	; 0x14b0 <checkAfslag+0x122>
    14ae:	6e c0       	rjmp	.+220    	; 0x158c <checkAfslag+0x1fe>
	{
		return T_LEFT_RIGHT; //t-splitsing rechtdoor
	}
	else if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
    14b0:	28 3e       	cpi	r18, 0xE8	; 232
    14b2:	33 40       	sbci	r19, 0x03	; 3
    14b4:	c8 f4       	brcc	.+50     	; 0x14e8 <checkAfslag+0x15a>
    14b6:	20 91 fc 01 	lds	r18, 0x01FC	; 0x8001fc <sensors+0x4>
    14ba:	30 91 fd 01 	lds	r19, 0x01FD	; 0x8001fd <sensors+0x5>
    14be:	29 30       	cpi	r18, 0x09	; 9
    14c0:	37 40       	sbci	r19, 0x07	; 7
    14c2:	08 f4       	brcc	.+2      	; 0x14c6 <checkAfslag+0x138>
    14c4:	95 c0       	rjmp	.+298    	; 0x15f0 <checkAfslag+0x262>
    14c6:	20 91 fe 01 	lds	r18, 0x01FE	; 0x8001fe <sensors+0x6>
    14ca:	30 91 ff 01 	lds	r19, 0x01FF	; 0x8001ff <sensors+0x7>
    14ce:	28 3e       	cpi	r18, 0xE8	; 232
    14d0:	33 40       	sbci	r19, 0x03	; 3
    14d2:	08 f0       	brcs	.+2      	; 0x14d6 <checkAfslag+0x148>
    14d4:	7f c0       	rjmp	.+254    	; 0x15d4 <checkAfslag+0x246>
    14d6:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <sensors+0x8>
    14da:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <sensors+0x9>
    14de:	28 3e       	cpi	r18, 0xE8	; 232
    14e0:	33 40       	sbci	r19, 0x03	; 3
    14e2:	08 f4       	brcc	.+2      	; 0x14e6 <checkAfslag+0x158>
    14e4:	56 c0       	rjmp	.+172    	; 0x1592 <checkAfslag+0x204>
    14e6:	76 c0       	rjmp	.+236    	; 0x15d4 <checkAfslag+0x246>
	{
		return T_LEFT; //t-splitsing linksaf
	}
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_C_R > high_range)
    14e8:	88 3e       	cpi	r24, 0xE8	; 232
    14ea:	23 e0       	ldi	r18, 0x03	; 3
    14ec:	92 07       	cpc	r25, r18
    14ee:	18 f5       	brcc	.+70     	; 0x1536 <checkAfslag+0x1a8>
    14f0:	20 91 fa 01 	lds	r18, 0x01FA	; 0x8001fa <sensors+0x2>
    14f4:	30 91 fb 01 	lds	r19, 0x01FB	; 0x8001fb <sensors+0x3>
    14f8:	28 3e       	cpi	r18, 0xE8	; 232
    14fa:	33 40       	sbci	r19, 0x03	; 3
    14fc:	e0 f4       	brcc	.+56     	; 0x1536 <checkAfslag+0x1a8>
	{
		return T_RIGHT; //t-splitsing rechtsaf
	}
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_C < low_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
    14fe:	20 91 fa 01 	lds	r18, 0x01FA	; 0x8001fa <sensors+0x2>
    1502:	30 91 fb 01 	lds	r19, 0x01FB	; 0x8001fb <sensors+0x3>
    1506:	28 3e       	cpi	r18, 0xE8	; 232
    1508:	33 40       	sbci	r19, 0x03	; 3
    150a:	a8 f4       	brcc	.+42     	; 0x1536 <checkAfslag+0x1a8>
    150c:	20 91 fc 01 	lds	r18, 0x01FC	; 0x8001fc <sensors+0x4>
    1510:	30 91 fd 01 	lds	r19, 0x01FD	; 0x8001fd <sensors+0x5>
    1514:	28 3e       	cpi	r18, 0xE8	; 232
    1516:	33 40       	sbci	r19, 0x03	; 3
    1518:	70 f4       	brcc	.+28     	; 0x1536 <checkAfslag+0x1a8>
    151a:	20 91 fe 01 	lds	r18, 0x01FE	; 0x8001fe <sensors+0x6>
    151e:	30 91 ff 01 	lds	r19, 0x01FF	; 0x8001ff <sensors+0x7>
    1522:	28 3e       	cpi	r18, 0xE8	; 232
    1524:	33 40       	sbci	r19, 0x03	; 3
    1526:	38 f4       	brcc	.+14     	; 0x1536 <checkAfslag+0x1a8>
    1528:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <sensors+0x8>
    152c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <sensors+0x9>
    1530:	28 3e       	cpi	r18, 0xE8	; 232
    1532:	33 40       	sbci	r19, 0x03	; 3
    1534:	88 f1       	brcs	.+98     	; 0x1598 <checkAfslag+0x20a>
	{
		return DEAD_END; //doodlopende straat
	}
	else if(SENSOR_L > high_range && SENSOR_C_L > high_range && SENSOR_C_C > high_range && SENSOR_C_R > high_range && SENSOR_R > high_range)
    1536:	89 30       	cpi	r24, 0x09	; 9
    1538:	97 40       	sbci	r25, 0x07	; 7
    153a:	88 f1       	brcs	.+98     	; 0x159e <checkAfslag+0x210>
    153c:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <sensors+0x2>
    1540:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <sensors+0x3>
    1544:	89 30       	cpi	r24, 0x09	; 9
    1546:	97 40       	sbci	r25, 0x07	; 7
    1548:	68 f1       	brcs	.+90     	; 0x15a4 <checkAfslag+0x216>
    154a:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <sensors+0x4>
    154e:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <sensors+0x5>
    1552:	89 30       	cpi	r24, 0x09	; 9
    1554:	97 40       	sbci	r25, 0x07	; 7
    1556:	48 f1       	brcs	.+82     	; 0x15aa <checkAfslag+0x21c>
    1558:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <sensors+0x6>
    155c:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <sensors+0x7>
    1560:	89 30       	cpi	r24, 0x09	; 9
    1562:	97 40       	sbci	r25, 0x07	; 7
    1564:	28 f1       	brcs	.+74     	; 0x15b0 <checkAfslag+0x222>
    1566:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <sensors+0x8>
    156a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <sensors+0x9>
    156e:	89 30       	cpi	r24, 0x09	; 9
    1570:	97 40       	sbci	r25, 0x07	; 7
    1572:	08 f1       	brcs	.+66     	; 0x15b6 <checkAfslag+0x228>
	{
		return GRID_HOME; //entry grid/home
    1574:	88 e0       	ldi	r24, 0x08	; 8
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	08 95       	ret
{
	read_line(sensors,IR_EMITTERS_ON);
	
	if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C < low_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
	{
		return LEFT; //afslag naar links
    157a:	82 e0       	ldi	r24, 0x02	; 2
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	08 95       	ret
	}
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_C < low_range && SENSOR_C_R < low_range && SENSOR_R > high_range)
	{
		return RIGHT; //afslag naar rechts
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	08 95       	ret
	}
	else if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_R > high_range)
	{
		return FOUR_WAY_JOINT; //kruispunt
    1586:	86 e0       	ldi	r24, 0x06	; 6
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	08 95       	ret
	}
	else if(SENSOR_L > high_range && SENSOR_C_L > high_range && SENSOR_C_C < low_range && SENSOR_C_R > high_range && SENSOR_R > high_range)
	{
		return T_LEFT_RIGHT; //t-splitsing rechtdoor
    158c:	83 e0       	ldi	r24, 0x03	; 3
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	08 95       	ret
	}
	else if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
	{
		return T_LEFT; //t-splitsing linksaf
    1592:	85 e0       	ldi	r24, 0x05	; 5
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	08 95       	ret
	{
		return T_RIGHT; //t-splitsing rechtsaf
	}
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_C < low_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
	{
		return DEAD_END; //doodlopende straat
    1598:	87 e0       	ldi	r24, 0x07	; 7
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	08 95       	ret
	}
	else if(SENSOR_L > high_range && SENSOR_C_L > high_range && SENSOR_C_C > high_range && SENSOR_C_R > high_range && SENSOR_R > high_range)
	{
		return GRID_HOME; //entry grid/home
	}
	return 0;
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	08 95       	ret
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	08 95       	ret
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	08 95       	ret
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	08 95       	ret
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	08 95       	ret
	
	if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C < low_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
	{
		return LEFT; //afslag naar links
	}
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_C < low_range && SENSOR_C_R < low_range && SENSOR_R > high_range)
    15bc:	88 3e       	cpi	r24, 0xE8	; 232
    15be:	43 e0       	ldi	r20, 0x03	; 3
    15c0:	94 07       	cpc	r25, r20
    15c2:	08 f0       	brcs	.+2      	; 0x15c6 <checkAfslag+0x238>
    15c4:	3a cf       	rjmp	.-396    	; 0x143a <checkAfslag+0xac>
    15c6:	1b cf       	rjmp	.-458    	; 0x13fe <checkAfslag+0x70>
	{
		return RIGHT; //afslag naar rechts
	}
	else if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_R > high_range)
    15c8:	89 30       	cpi	r24, 0x09	; 9
    15ca:	67 e0       	ldi	r22, 0x07	; 7
    15cc:	96 07       	cpc	r25, r22
    15ce:	08 f0       	brcs	.+2      	; 0x15d2 <checkAfslag+0x244>
    15d0:	3b cf       	rjmp	.-394    	; 0x1448 <checkAfslag+0xba>
    15d2:	06 c0       	rjmp	.+12     	; 0x15e0 <checkAfslag+0x252>
	}
	else if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
	{
		return T_LEFT; //t-splitsing linksaf
	}
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_C_R > high_range)
    15d4:	88 3e       	cpi	r24, 0xE8	; 232
    15d6:	23 e0       	ldi	r18, 0x03	; 3
    15d8:	92 07       	cpc	r25, r18
    15da:	08 f4       	brcc	.+2      	; 0x15de <checkAfslag+0x250>
    15dc:	90 cf       	rjmp	.-224    	; 0x14fe <checkAfslag+0x170>
    15de:	ab cf       	rjmp	.-170    	; 0x1536 <checkAfslag+0x1a8>
    15e0:	88 3e       	cpi	r24, 0xE8	; 232
    15e2:	43 e0       	ldi	r20, 0x03	; 3
    15e4:	94 07       	cpc	r25, r20
    15e6:	08 f4       	brcc	.+2      	; 0x15ea <checkAfslag+0x25c>
    15e8:	83 cf       	rjmp	.-250    	; 0x14f0 <checkAfslag+0x162>
	}
	else if(SENSOR_L > high_range && SENSOR_C_L > high_range && SENSOR_C_C > high_range && SENSOR_C_R > high_range && SENSOR_R > high_range)
	{
		return GRID_HOME; //entry grid/home
	}
	return 0;
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	08 95       	ret
	}
	else if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
	{
		return T_LEFT; //t-splitsing linksaf
	}
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_C_R > high_range)
    15f0:	88 3e       	cpi	r24, 0xE8	; 232
    15f2:	63 e0       	ldi	r22, 0x03	; 3
    15f4:	96 07       	cpc	r25, r22
    15f6:	08 f4       	brcc	.+2      	; 0x15fa <checkAfslag+0x26c>
    15f8:	82 cf       	rjmp	.-252    	; 0x14fe <checkAfslag+0x170>
    15fa:	9d cf       	rjmp	.-198    	; 0x1536 <checkAfslag+0x1a8>

000015fc <__subsf3>:
    15fc:	50 58       	subi	r21, 0x80	; 128

000015fe <__addsf3>:
    15fe:	bb 27       	eor	r27, r27
    1600:	aa 27       	eor	r26, r26
    1602:	0e 94 16 0b 	call	0x162c	; 0x162c <__addsf3x>
    1606:	0c 94 1e 0c 	jmp	0x183c	; 0x183c <__fp_round>
    160a:	0e 94 10 0c 	call	0x1820	; 0x1820 <__fp_pscA>
    160e:	38 f0       	brcs	.+14     	; 0x161e <__addsf3+0x20>
    1610:	0e 94 17 0c 	call	0x182e	; 0x182e <__fp_pscB>
    1614:	20 f0       	brcs	.+8      	; 0x161e <__addsf3+0x20>
    1616:	39 f4       	brne	.+14     	; 0x1626 <__addsf3+0x28>
    1618:	9f 3f       	cpi	r25, 0xFF	; 255
    161a:	19 f4       	brne	.+6      	; 0x1622 <__addsf3+0x24>
    161c:	26 f4       	brtc	.+8      	; 0x1626 <__addsf3+0x28>
    161e:	0c 94 0d 0c 	jmp	0x181a	; 0x181a <__fp_nan>
    1622:	0e f4       	brtc	.+2      	; 0x1626 <__addsf3+0x28>
    1624:	e0 95       	com	r30
    1626:	e7 fb       	bst	r30, 7
    1628:	0c 94 07 0c 	jmp	0x180e	; 0x180e <__fp_inf>

0000162c <__addsf3x>:
    162c:	e9 2f       	mov	r30, r25
    162e:	0e 94 2f 0c 	call	0x185e	; 0x185e <__fp_split3>
    1632:	58 f3       	brcs	.-42     	; 0x160a <__addsf3+0xc>
    1634:	ba 17       	cp	r27, r26
    1636:	62 07       	cpc	r22, r18
    1638:	73 07       	cpc	r23, r19
    163a:	84 07       	cpc	r24, r20
    163c:	95 07       	cpc	r25, r21
    163e:	20 f0       	brcs	.+8      	; 0x1648 <__addsf3x+0x1c>
    1640:	79 f4       	brne	.+30     	; 0x1660 <__addsf3x+0x34>
    1642:	a6 f5       	brtc	.+104    	; 0x16ac <__addsf3x+0x80>
    1644:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <__fp_zero>
    1648:	0e f4       	brtc	.+2      	; 0x164c <__addsf3x+0x20>
    164a:	e0 95       	com	r30
    164c:	0b 2e       	mov	r0, r27
    164e:	ba 2f       	mov	r27, r26
    1650:	a0 2d       	mov	r26, r0
    1652:	0b 01       	movw	r0, r22
    1654:	b9 01       	movw	r22, r18
    1656:	90 01       	movw	r18, r0
    1658:	0c 01       	movw	r0, r24
    165a:	ca 01       	movw	r24, r20
    165c:	a0 01       	movw	r20, r0
    165e:	11 24       	eor	r1, r1
    1660:	ff 27       	eor	r31, r31
    1662:	59 1b       	sub	r21, r25
    1664:	99 f0       	breq	.+38     	; 0x168c <__addsf3x+0x60>
    1666:	59 3f       	cpi	r21, 0xF9	; 249
    1668:	50 f4       	brcc	.+20     	; 0x167e <__addsf3x+0x52>
    166a:	50 3e       	cpi	r21, 0xE0	; 224
    166c:	68 f1       	brcs	.+90     	; 0x16c8 <__addsf3x+0x9c>
    166e:	1a 16       	cp	r1, r26
    1670:	f0 40       	sbci	r31, 0x00	; 0
    1672:	a2 2f       	mov	r26, r18
    1674:	23 2f       	mov	r18, r19
    1676:	34 2f       	mov	r19, r20
    1678:	44 27       	eor	r20, r20
    167a:	58 5f       	subi	r21, 0xF8	; 248
    167c:	f3 cf       	rjmp	.-26     	; 0x1664 <__addsf3x+0x38>
    167e:	46 95       	lsr	r20
    1680:	37 95       	ror	r19
    1682:	27 95       	ror	r18
    1684:	a7 95       	ror	r26
    1686:	f0 40       	sbci	r31, 0x00	; 0
    1688:	53 95       	inc	r21
    168a:	c9 f7       	brne	.-14     	; 0x167e <__addsf3x+0x52>
    168c:	7e f4       	brtc	.+30     	; 0x16ac <__addsf3x+0x80>
    168e:	1f 16       	cp	r1, r31
    1690:	ba 0b       	sbc	r27, r26
    1692:	62 0b       	sbc	r22, r18
    1694:	73 0b       	sbc	r23, r19
    1696:	84 0b       	sbc	r24, r20
    1698:	ba f0       	brmi	.+46     	; 0x16c8 <__addsf3x+0x9c>
    169a:	91 50       	subi	r25, 0x01	; 1
    169c:	a1 f0       	breq	.+40     	; 0x16c6 <__addsf3x+0x9a>
    169e:	ff 0f       	add	r31, r31
    16a0:	bb 1f       	adc	r27, r27
    16a2:	66 1f       	adc	r22, r22
    16a4:	77 1f       	adc	r23, r23
    16a6:	88 1f       	adc	r24, r24
    16a8:	c2 f7       	brpl	.-16     	; 0x169a <__addsf3x+0x6e>
    16aa:	0e c0       	rjmp	.+28     	; 0x16c8 <__addsf3x+0x9c>
    16ac:	ba 0f       	add	r27, r26
    16ae:	62 1f       	adc	r22, r18
    16b0:	73 1f       	adc	r23, r19
    16b2:	84 1f       	adc	r24, r20
    16b4:	48 f4       	brcc	.+18     	; 0x16c8 <__addsf3x+0x9c>
    16b6:	87 95       	ror	r24
    16b8:	77 95       	ror	r23
    16ba:	67 95       	ror	r22
    16bc:	b7 95       	ror	r27
    16be:	f7 95       	ror	r31
    16c0:	9e 3f       	cpi	r25, 0xFE	; 254
    16c2:	08 f0       	brcs	.+2      	; 0x16c6 <__addsf3x+0x9a>
    16c4:	b0 cf       	rjmp	.-160    	; 0x1626 <__addsf3+0x28>
    16c6:	93 95       	inc	r25
    16c8:	88 0f       	add	r24, r24
    16ca:	08 f0       	brcs	.+2      	; 0x16ce <__addsf3x+0xa2>
    16cc:	99 27       	eor	r25, r25
    16ce:	ee 0f       	add	r30, r30
    16d0:	97 95       	ror	r25
    16d2:	87 95       	ror	r24
    16d4:	08 95       	ret

000016d6 <__cmpsf2>:
    16d6:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__fp_cmp>
    16da:	08 f4       	brcc	.+2      	; 0x16de <__cmpsf2+0x8>
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	08 95       	ret

000016e0 <__fixsfsi>:
    16e0:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fixunssfsi>
    16e4:	68 94       	set
    16e6:	b1 11       	cpse	r27, r1
    16e8:	0c 94 52 0c 	jmp	0x18a4	; 0x18a4 <__fp_szero>
    16ec:	08 95       	ret

000016ee <__fixunssfsi>:
    16ee:	0e 94 37 0c 	call	0x186e	; 0x186e <__fp_splitA>
    16f2:	88 f0       	brcs	.+34     	; 0x1716 <__fixunssfsi+0x28>
    16f4:	9f 57       	subi	r25, 0x7F	; 127
    16f6:	98 f0       	brcs	.+38     	; 0x171e <__fixunssfsi+0x30>
    16f8:	b9 2f       	mov	r27, r25
    16fa:	99 27       	eor	r25, r25
    16fc:	b7 51       	subi	r27, 0x17	; 23
    16fe:	b0 f0       	brcs	.+44     	; 0x172c <__fixunssfsi+0x3e>
    1700:	e1 f0       	breq	.+56     	; 0x173a <__fixunssfsi+0x4c>
    1702:	66 0f       	add	r22, r22
    1704:	77 1f       	adc	r23, r23
    1706:	88 1f       	adc	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	1a f0       	brmi	.+6      	; 0x1712 <__fixunssfsi+0x24>
    170c:	ba 95       	dec	r27
    170e:	c9 f7       	brne	.-14     	; 0x1702 <__fixunssfsi+0x14>
    1710:	14 c0       	rjmp	.+40     	; 0x173a <__fixunssfsi+0x4c>
    1712:	b1 30       	cpi	r27, 0x01	; 1
    1714:	91 f0       	breq	.+36     	; 0x173a <__fixunssfsi+0x4c>
    1716:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__fp_zero>
    171a:	b1 e0       	ldi	r27, 0x01	; 1
    171c:	08 95       	ret
    171e:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <__fp_zero>
    1722:	67 2f       	mov	r22, r23
    1724:	78 2f       	mov	r23, r24
    1726:	88 27       	eor	r24, r24
    1728:	b8 5f       	subi	r27, 0xF8	; 248
    172a:	39 f0       	breq	.+14     	; 0x173a <__fixunssfsi+0x4c>
    172c:	b9 3f       	cpi	r27, 0xF9	; 249
    172e:	cc f3       	brlt	.-14     	; 0x1722 <__fixunssfsi+0x34>
    1730:	86 95       	lsr	r24
    1732:	77 95       	ror	r23
    1734:	67 95       	ror	r22
    1736:	b3 95       	inc	r27
    1738:	d9 f7       	brne	.-10     	; 0x1730 <__fixunssfsi+0x42>
    173a:	3e f4       	brtc	.+14     	; 0x174a <__fixunssfsi+0x5c>
    173c:	90 95       	com	r25
    173e:	80 95       	com	r24
    1740:	70 95       	com	r23
    1742:	61 95       	neg	r22
    1744:	7f 4f       	sbci	r23, 0xFF	; 255
    1746:	8f 4f       	sbci	r24, 0xFF	; 255
    1748:	9f 4f       	sbci	r25, 0xFF	; 255
    174a:	08 95       	ret

0000174c <__floatunsisf>:
    174c:	e8 94       	clt
    174e:	09 c0       	rjmp	.+18     	; 0x1762 <__floatsisf+0x12>

00001750 <__floatsisf>:
    1750:	97 fb       	bst	r25, 7
    1752:	3e f4       	brtc	.+14     	; 0x1762 <__floatsisf+0x12>
    1754:	90 95       	com	r25
    1756:	80 95       	com	r24
    1758:	70 95       	com	r23
    175a:	61 95       	neg	r22
    175c:	7f 4f       	sbci	r23, 0xFF	; 255
    175e:	8f 4f       	sbci	r24, 0xFF	; 255
    1760:	9f 4f       	sbci	r25, 0xFF	; 255
    1762:	99 23       	and	r25, r25
    1764:	a9 f0       	breq	.+42     	; 0x1790 <__floatsisf+0x40>
    1766:	f9 2f       	mov	r31, r25
    1768:	96 e9       	ldi	r25, 0x96	; 150
    176a:	bb 27       	eor	r27, r27
    176c:	93 95       	inc	r25
    176e:	f6 95       	lsr	r31
    1770:	87 95       	ror	r24
    1772:	77 95       	ror	r23
    1774:	67 95       	ror	r22
    1776:	b7 95       	ror	r27
    1778:	f1 11       	cpse	r31, r1
    177a:	f8 cf       	rjmp	.-16     	; 0x176c <__floatsisf+0x1c>
    177c:	fa f4       	brpl	.+62     	; 0x17bc <__floatsisf+0x6c>
    177e:	bb 0f       	add	r27, r27
    1780:	11 f4       	brne	.+4      	; 0x1786 <__floatsisf+0x36>
    1782:	60 ff       	sbrs	r22, 0
    1784:	1b c0       	rjmp	.+54     	; 0x17bc <__floatsisf+0x6c>
    1786:	6f 5f       	subi	r22, 0xFF	; 255
    1788:	7f 4f       	sbci	r23, 0xFF	; 255
    178a:	8f 4f       	sbci	r24, 0xFF	; 255
    178c:	9f 4f       	sbci	r25, 0xFF	; 255
    178e:	16 c0       	rjmp	.+44     	; 0x17bc <__floatsisf+0x6c>
    1790:	88 23       	and	r24, r24
    1792:	11 f0       	breq	.+4      	; 0x1798 <__floatsisf+0x48>
    1794:	96 e9       	ldi	r25, 0x96	; 150
    1796:	11 c0       	rjmp	.+34     	; 0x17ba <__floatsisf+0x6a>
    1798:	77 23       	and	r23, r23
    179a:	21 f0       	breq	.+8      	; 0x17a4 <__floatsisf+0x54>
    179c:	9e e8       	ldi	r25, 0x8E	; 142
    179e:	87 2f       	mov	r24, r23
    17a0:	76 2f       	mov	r23, r22
    17a2:	05 c0       	rjmp	.+10     	; 0x17ae <__floatsisf+0x5e>
    17a4:	66 23       	and	r22, r22
    17a6:	71 f0       	breq	.+28     	; 0x17c4 <__floatsisf+0x74>
    17a8:	96 e8       	ldi	r25, 0x86	; 134
    17aa:	86 2f       	mov	r24, r22
    17ac:	70 e0       	ldi	r23, 0x00	; 0
    17ae:	60 e0       	ldi	r22, 0x00	; 0
    17b0:	2a f0       	brmi	.+10     	; 0x17bc <__floatsisf+0x6c>
    17b2:	9a 95       	dec	r25
    17b4:	66 0f       	add	r22, r22
    17b6:	77 1f       	adc	r23, r23
    17b8:	88 1f       	adc	r24, r24
    17ba:	da f7       	brpl	.-10     	; 0x17b2 <__floatsisf+0x62>
    17bc:	88 0f       	add	r24, r24
    17be:	96 95       	lsr	r25
    17c0:	87 95       	ror	r24
    17c2:	97 f9       	bld	r25, 7
    17c4:	08 95       	ret

000017c6 <__fp_cmp>:
    17c6:	99 0f       	add	r25, r25
    17c8:	00 08       	sbc	r0, r0
    17ca:	55 0f       	add	r21, r21
    17cc:	aa 0b       	sbc	r26, r26
    17ce:	e0 e8       	ldi	r30, 0x80	; 128
    17d0:	fe ef       	ldi	r31, 0xFE	; 254
    17d2:	16 16       	cp	r1, r22
    17d4:	17 06       	cpc	r1, r23
    17d6:	e8 07       	cpc	r30, r24
    17d8:	f9 07       	cpc	r31, r25
    17da:	c0 f0       	brcs	.+48     	; 0x180c <__fp_cmp+0x46>
    17dc:	12 16       	cp	r1, r18
    17de:	13 06       	cpc	r1, r19
    17e0:	e4 07       	cpc	r30, r20
    17e2:	f5 07       	cpc	r31, r21
    17e4:	98 f0       	brcs	.+38     	; 0x180c <__fp_cmp+0x46>
    17e6:	62 1b       	sub	r22, r18
    17e8:	73 0b       	sbc	r23, r19
    17ea:	84 0b       	sbc	r24, r20
    17ec:	95 0b       	sbc	r25, r21
    17ee:	39 f4       	brne	.+14     	; 0x17fe <__fp_cmp+0x38>
    17f0:	0a 26       	eor	r0, r26
    17f2:	61 f0       	breq	.+24     	; 0x180c <__fp_cmp+0x46>
    17f4:	23 2b       	or	r18, r19
    17f6:	24 2b       	or	r18, r20
    17f8:	25 2b       	or	r18, r21
    17fa:	21 f4       	brne	.+8      	; 0x1804 <__fp_cmp+0x3e>
    17fc:	08 95       	ret
    17fe:	0a 26       	eor	r0, r26
    1800:	09 f4       	brne	.+2      	; 0x1804 <__fp_cmp+0x3e>
    1802:	a1 40       	sbci	r26, 0x01	; 1
    1804:	a6 95       	lsr	r26
    1806:	8f ef       	ldi	r24, 0xFF	; 255
    1808:	81 1d       	adc	r24, r1
    180a:	81 1d       	adc	r24, r1
    180c:	08 95       	ret

0000180e <__fp_inf>:
    180e:	97 f9       	bld	r25, 7
    1810:	9f 67       	ori	r25, 0x7F	; 127
    1812:	80 e8       	ldi	r24, 0x80	; 128
    1814:	70 e0       	ldi	r23, 0x00	; 0
    1816:	60 e0       	ldi	r22, 0x00	; 0
    1818:	08 95       	ret

0000181a <__fp_nan>:
    181a:	9f ef       	ldi	r25, 0xFF	; 255
    181c:	80 ec       	ldi	r24, 0xC0	; 192
    181e:	08 95       	ret

00001820 <__fp_pscA>:
    1820:	00 24       	eor	r0, r0
    1822:	0a 94       	dec	r0
    1824:	16 16       	cp	r1, r22
    1826:	17 06       	cpc	r1, r23
    1828:	18 06       	cpc	r1, r24
    182a:	09 06       	cpc	r0, r25
    182c:	08 95       	ret

0000182e <__fp_pscB>:
    182e:	00 24       	eor	r0, r0
    1830:	0a 94       	dec	r0
    1832:	12 16       	cp	r1, r18
    1834:	13 06       	cpc	r1, r19
    1836:	14 06       	cpc	r1, r20
    1838:	05 06       	cpc	r0, r21
    183a:	08 95       	ret

0000183c <__fp_round>:
    183c:	09 2e       	mov	r0, r25
    183e:	03 94       	inc	r0
    1840:	00 0c       	add	r0, r0
    1842:	11 f4       	brne	.+4      	; 0x1848 <__fp_round+0xc>
    1844:	88 23       	and	r24, r24
    1846:	52 f0       	brmi	.+20     	; 0x185c <__fp_round+0x20>
    1848:	bb 0f       	add	r27, r27
    184a:	40 f4       	brcc	.+16     	; 0x185c <__fp_round+0x20>
    184c:	bf 2b       	or	r27, r31
    184e:	11 f4       	brne	.+4      	; 0x1854 <__fp_round+0x18>
    1850:	60 ff       	sbrs	r22, 0
    1852:	04 c0       	rjmp	.+8      	; 0x185c <__fp_round+0x20>
    1854:	6f 5f       	subi	r22, 0xFF	; 255
    1856:	7f 4f       	sbci	r23, 0xFF	; 255
    1858:	8f 4f       	sbci	r24, 0xFF	; 255
    185a:	9f 4f       	sbci	r25, 0xFF	; 255
    185c:	08 95       	ret

0000185e <__fp_split3>:
    185e:	57 fd       	sbrc	r21, 7
    1860:	90 58       	subi	r25, 0x80	; 128
    1862:	44 0f       	add	r20, r20
    1864:	55 1f       	adc	r21, r21
    1866:	59 f0       	breq	.+22     	; 0x187e <__fp_splitA+0x10>
    1868:	5f 3f       	cpi	r21, 0xFF	; 255
    186a:	71 f0       	breq	.+28     	; 0x1888 <__fp_splitA+0x1a>
    186c:	47 95       	ror	r20

0000186e <__fp_splitA>:
    186e:	88 0f       	add	r24, r24
    1870:	97 fb       	bst	r25, 7
    1872:	99 1f       	adc	r25, r25
    1874:	61 f0       	breq	.+24     	; 0x188e <__fp_splitA+0x20>
    1876:	9f 3f       	cpi	r25, 0xFF	; 255
    1878:	79 f0       	breq	.+30     	; 0x1898 <__fp_splitA+0x2a>
    187a:	87 95       	ror	r24
    187c:	08 95       	ret
    187e:	12 16       	cp	r1, r18
    1880:	13 06       	cpc	r1, r19
    1882:	14 06       	cpc	r1, r20
    1884:	55 1f       	adc	r21, r21
    1886:	f2 cf       	rjmp	.-28     	; 0x186c <__fp_split3+0xe>
    1888:	46 95       	lsr	r20
    188a:	f1 df       	rcall	.-30     	; 0x186e <__fp_splitA>
    188c:	08 c0       	rjmp	.+16     	; 0x189e <__fp_splitA+0x30>
    188e:	16 16       	cp	r1, r22
    1890:	17 06       	cpc	r1, r23
    1892:	18 06       	cpc	r1, r24
    1894:	99 1f       	adc	r25, r25
    1896:	f1 cf       	rjmp	.-30     	; 0x187a <__fp_splitA+0xc>
    1898:	86 95       	lsr	r24
    189a:	71 05       	cpc	r23, r1
    189c:	61 05       	cpc	r22, r1
    189e:	08 94       	sec
    18a0:	08 95       	ret

000018a2 <__fp_zero>:
    18a2:	e8 94       	clt

000018a4 <__fp_szero>:
    18a4:	bb 27       	eor	r27, r27
    18a6:	66 27       	eor	r22, r22
    18a8:	77 27       	eor	r23, r23
    18aa:	cb 01       	movw	r24, r22
    18ac:	97 f9       	bld	r25, 7
    18ae:	08 95       	ret

000018b0 <__gesf2>:
    18b0:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__fp_cmp>
    18b4:	08 f4       	brcc	.+2      	; 0x18b8 <__gesf2+0x8>
    18b6:	8f ef       	ldi	r24, 0xFF	; 255
    18b8:	08 95       	ret

000018ba <__mulsf3>:
    18ba:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__mulsf3x>
    18be:	0c 94 1e 0c 	jmp	0x183c	; 0x183c <__fp_round>
    18c2:	0e 94 10 0c 	call	0x1820	; 0x1820 <__fp_pscA>
    18c6:	38 f0       	brcs	.+14     	; 0x18d6 <__mulsf3+0x1c>
    18c8:	0e 94 17 0c 	call	0x182e	; 0x182e <__fp_pscB>
    18cc:	20 f0       	brcs	.+8      	; 0x18d6 <__mulsf3+0x1c>
    18ce:	95 23       	and	r25, r21
    18d0:	11 f0       	breq	.+4      	; 0x18d6 <__mulsf3+0x1c>
    18d2:	0c 94 07 0c 	jmp	0x180e	; 0x180e <__fp_inf>
    18d6:	0c 94 0d 0c 	jmp	0x181a	; 0x181a <__fp_nan>
    18da:	11 24       	eor	r1, r1
    18dc:	0c 94 52 0c 	jmp	0x18a4	; 0x18a4 <__fp_szero>

000018e0 <__mulsf3x>:
    18e0:	0e 94 2f 0c 	call	0x185e	; 0x185e <__fp_split3>
    18e4:	70 f3       	brcs	.-36     	; 0x18c2 <__mulsf3+0x8>

000018e6 <__mulsf3_pse>:
    18e6:	95 9f       	mul	r25, r21
    18e8:	c1 f3       	breq	.-16     	; 0x18da <__mulsf3+0x20>
    18ea:	95 0f       	add	r25, r21
    18ec:	50 e0       	ldi	r21, 0x00	; 0
    18ee:	55 1f       	adc	r21, r21
    18f0:	62 9f       	mul	r22, r18
    18f2:	f0 01       	movw	r30, r0
    18f4:	72 9f       	mul	r23, r18
    18f6:	bb 27       	eor	r27, r27
    18f8:	f0 0d       	add	r31, r0
    18fa:	b1 1d       	adc	r27, r1
    18fc:	63 9f       	mul	r22, r19
    18fe:	aa 27       	eor	r26, r26
    1900:	f0 0d       	add	r31, r0
    1902:	b1 1d       	adc	r27, r1
    1904:	aa 1f       	adc	r26, r26
    1906:	64 9f       	mul	r22, r20
    1908:	66 27       	eor	r22, r22
    190a:	b0 0d       	add	r27, r0
    190c:	a1 1d       	adc	r26, r1
    190e:	66 1f       	adc	r22, r22
    1910:	82 9f       	mul	r24, r18
    1912:	22 27       	eor	r18, r18
    1914:	b0 0d       	add	r27, r0
    1916:	a1 1d       	adc	r26, r1
    1918:	62 1f       	adc	r22, r18
    191a:	73 9f       	mul	r23, r19
    191c:	b0 0d       	add	r27, r0
    191e:	a1 1d       	adc	r26, r1
    1920:	62 1f       	adc	r22, r18
    1922:	83 9f       	mul	r24, r19
    1924:	a0 0d       	add	r26, r0
    1926:	61 1d       	adc	r22, r1
    1928:	22 1f       	adc	r18, r18
    192a:	74 9f       	mul	r23, r20
    192c:	33 27       	eor	r19, r19
    192e:	a0 0d       	add	r26, r0
    1930:	61 1d       	adc	r22, r1
    1932:	23 1f       	adc	r18, r19
    1934:	84 9f       	mul	r24, r20
    1936:	60 0d       	add	r22, r0
    1938:	21 1d       	adc	r18, r1
    193a:	82 2f       	mov	r24, r18
    193c:	76 2f       	mov	r23, r22
    193e:	6a 2f       	mov	r22, r26
    1940:	11 24       	eor	r1, r1
    1942:	9f 57       	subi	r25, 0x7F	; 127
    1944:	50 40       	sbci	r21, 0x00	; 0
    1946:	9a f0       	brmi	.+38     	; 0x196e <__mulsf3_pse+0x88>
    1948:	f1 f0       	breq	.+60     	; 0x1986 <__mulsf3_pse+0xa0>
    194a:	88 23       	and	r24, r24
    194c:	4a f0       	brmi	.+18     	; 0x1960 <__mulsf3_pse+0x7a>
    194e:	ee 0f       	add	r30, r30
    1950:	ff 1f       	adc	r31, r31
    1952:	bb 1f       	adc	r27, r27
    1954:	66 1f       	adc	r22, r22
    1956:	77 1f       	adc	r23, r23
    1958:	88 1f       	adc	r24, r24
    195a:	91 50       	subi	r25, 0x01	; 1
    195c:	50 40       	sbci	r21, 0x00	; 0
    195e:	a9 f7       	brne	.-22     	; 0x194a <__mulsf3_pse+0x64>
    1960:	9e 3f       	cpi	r25, 0xFE	; 254
    1962:	51 05       	cpc	r21, r1
    1964:	80 f0       	brcs	.+32     	; 0x1986 <__mulsf3_pse+0xa0>
    1966:	0c 94 07 0c 	jmp	0x180e	; 0x180e <__fp_inf>
    196a:	0c 94 52 0c 	jmp	0x18a4	; 0x18a4 <__fp_szero>
    196e:	5f 3f       	cpi	r21, 0xFF	; 255
    1970:	e4 f3       	brlt	.-8      	; 0x196a <__mulsf3_pse+0x84>
    1972:	98 3e       	cpi	r25, 0xE8	; 232
    1974:	d4 f3       	brlt	.-12     	; 0x196a <__mulsf3_pse+0x84>
    1976:	86 95       	lsr	r24
    1978:	77 95       	ror	r23
    197a:	67 95       	ror	r22
    197c:	b7 95       	ror	r27
    197e:	f7 95       	ror	r31
    1980:	e7 95       	ror	r30
    1982:	9f 5f       	subi	r25, 0xFF	; 255
    1984:	c1 f7       	brne	.-16     	; 0x1976 <__mulsf3_pse+0x90>
    1986:	fe 2b       	or	r31, r30
    1988:	88 0f       	add	r24, r24
    198a:	91 1d       	adc	r25, r1
    198c:	96 95       	lsr	r25
    198e:	87 95       	ror	r24
    1990:	97 f9       	bld	r25, 7
    1992:	08 95       	ret

00001994 <sin>:
    1994:	9f 93       	push	r25
    1996:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <__fp_rempio2>
    199a:	0f 90       	pop	r0
    199c:	07 fc       	sbrc	r0, 7
    199e:	ee 5f       	subi	r30, 0xFE	; 254
    19a0:	0c 94 58 0d 	jmp	0x1ab0	; 0x1ab0 <__fp_sinus>
    19a4:	19 f4       	brne	.+6      	; 0x19ac <sin+0x18>
    19a6:	16 f4       	brtc	.+4      	; 0x19ac <sin+0x18>
    19a8:	0c 94 0d 0c 	jmp	0x181a	; 0x181a <__fp_nan>
    19ac:	0c 94 18 0d 	jmp	0x1a30	; 0x1a30 <__fp_mpack>

000019b0 <sqrt>:
    19b0:	0e 94 37 0c 	call	0x186e	; 0x186e <__fp_splitA>
    19b4:	b8 f3       	brcs	.-18     	; 0x19a4 <sin+0x10>
    19b6:	99 23       	and	r25, r25
    19b8:	c9 f3       	breq	.-14     	; 0x19ac <sin+0x18>
    19ba:	b6 f3       	brts	.-20     	; 0x19a8 <sin+0x14>
    19bc:	9f 57       	subi	r25, 0x7F	; 127
    19be:	55 0b       	sbc	r21, r21
    19c0:	87 ff       	sbrs	r24, 7
    19c2:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__fp_norm2>
    19c6:	00 24       	eor	r0, r0
    19c8:	a0 e6       	ldi	r26, 0x60	; 96
    19ca:	40 ea       	ldi	r20, 0xA0	; 160
    19cc:	90 01       	movw	r18, r0
    19ce:	80 58       	subi	r24, 0x80	; 128
    19d0:	56 95       	lsr	r21
    19d2:	97 95       	ror	r25
    19d4:	28 f4       	brcc	.+10     	; 0x19e0 <sqrt+0x30>
    19d6:	80 5c       	subi	r24, 0xC0	; 192
    19d8:	66 0f       	add	r22, r22
    19da:	77 1f       	adc	r23, r23
    19dc:	88 1f       	adc	r24, r24
    19de:	20 f0       	brcs	.+8      	; 0x19e8 <sqrt+0x38>
    19e0:	26 17       	cp	r18, r22
    19e2:	37 07       	cpc	r19, r23
    19e4:	48 07       	cpc	r20, r24
    19e6:	30 f4       	brcc	.+12     	; 0x19f4 <sqrt+0x44>
    19e8:	62 1b       	sub	r22, r18
    19ea:	73 0b       	sbc	r23, r19
    19ec:	84 0b       	sbc	r24, r20
    19ee:	20 29       	or	r18, r0
    19f0:	31 29       	or	r19, r1
    19f2:	4a 2b       	or	r20, r26
    19f4:	a6 95       	lsr	r26
    19f6:	17 94       	ror	r1
    19f8:	07 94       	ror	r0
    19fa:	20 25       	eor	r18, r0
    19fc:	31 25       	eor	r19, r1
    19fe:	4a 27       	eor	r20, r26
    1a00:	58 f7       	brcc	.-42     	; 0x19d8 <sqrt+0x28>
    1a02:	66 0f       	add	r22, r22
    1a04:	77 1f       	adc	r23, r23
    1a06:	88 1f       	adc	r24, r24
    1a08:	20 f0       	brcs	.+8      	; 0x1a12 <sqrt+0x62>
    1a0a:	26 17       	cp	r18, r22
    1a0c:	37 07       	cpc	r19, r23
    1a0e:	48 07       	cpc	r20, r24
    1a10:	30 f4       	brcc	.+12     	; 0x1a1e <sqrt+0x6e>
    1a12:	62 0b       	sbc	r22, r18
    1a14:	73 0b       	sbc	r23, r19
    1a16:	84 0b       	sbc	r24, r20
    1a18:	20 0d       	add	r18, r0
    1a1a:	31 1d       	adc	r19, r1
    1a1c:	41 1d       	adc	r20, r1
    1a1e:	a0 95       	com	r26
    1a20:	81 f7       	brne	.-32     	; 0x1a02 <sqrt+0x52>
    1a22:	b9 01       	movw	r22, r18
    1a24:	84 2f       	mov	r24, r20
    1a26:	91 58       	subi	r25, 0x81	; 129
    1a28:	88 0f       	add	r24, r24
    1a2a:	96 95       	lsr	r25
    1a2c:	87 95       	ror	r24
    1a2e:	08 95       	ret

00001a30 <__fp_mpack>:
    1a30:	9f 3f       	cpi	r25, 0xFF	; 255
    1a32:	31 f0       	breq	.+12     	; 0x1a40 <__fp_mpack_finite+0xc>

00001a34 <__fp_mpack_finite>:
    1a34:	91 50       	subi	r25, 0x01	; 1
    1a36:	20 f4       	brcc	.+8      	; 0x1a40 <__fp_mpack_finite+0xc>
    1a38:	87 95       	ror	r24
    1a3a:	77 95       	ror	r23
    1a3c:	67 95       	ror	r22
    1a3e:	b7 95       	ror	r27
    1a40:	88 0f       	add	r24, r24
    1a42:	91 1d       	adc	r25, r1
    1a44:	96 95       	lsr	r25
    1a46:	87 95       	ror	r24
    1a48:	97 f9       	bld	r25, 7
    1a4a:	08 95       	ret

00001a4c <__fp_norm2>:
    1a4c:	91 50       	subi	r25, 0x01	; 1
    1a4e:	50 40       	sbci	r21, 0x00	; 0
    1a50:	66 0f       	add	r22, r22
    1a52:	77 1f       	adc	r23, r23
    1a54:	88 1f       	adc	r24, r24
    1a56:	d2 f7       	brpl	.-12     	; 0x1a4c <__fp_norm2>
    1a58:	08 95       	ret
    1a5a:	0c 94 0d 0c 	jmp	0x181a	; 0x181a <__fp_nan>

00001a5e <__fp_rempio2>:
    1a5e:	0e 94 37 0c 	call	0x186e	; 0x186e <__fp_splitA>
    1a62:	d8 f3       	brcs	.-10     	; 0x1a5a <__fp_norm2+0xe>
    1a64:	e8 94       	clt
    1a66:	e0 e0       	ldi	r30, 0x00	; 0
    1a68:	bb 27       	eor	r27, r27
    1a6a:	9f 57       	subi	r25, 0x7F	; 127
    1a6c:	f0 f0       	brcs	.+60     	; 0x1aaa <__fp_rempio2+0x4c>
    1a6e:	2a ed       	ldi	r18, 0xDA	; 218
    1a70:	3f e0       	ldi	r19, 0x0F	; 15
    1a72:	49 ec       	ldi	r20, 0xC9	; 201
    1a74:	06 c0       	rjmp	.+12     	; 0x1a82 <__fp_rempio2+0x24>
    1a76:	ee 0f       	add	r30, r30
    1a78:	bb 0f       	add	r27, r27
    1a7a:	66 1f       	adc	r22, r22
    1a7c:	77 1f       	adc	r23, r23
    1a7e:	88 1f       	adc	r24, r24
    1a80:	28 f0       	brcs	.+10     	; 0x1a8c <__fp_rempio2+0x2e>
    1a82:	b2 3a       	cpi	r27, 0xA2	; 162
    1a84:	62 07       	cpc	r22, r18
    1a86:	73 07       	cpc	r23, r19
    1a88:	84 07       	cpc	r24, r20
    1a8a:	28 f0       	brcs	.+10     	; 0x1a96 <__fp_rempio2+0x38>
    1a8c:	b2 5a       	subi	r27, 0xA2	; 162
    1a8e:	62 0b       	sbc	r22, r18
    1a90:	73 0b       	sbc	r23, r19
    1a92:	84 0b       	sbc	r24, r20
    1a94:	e3 95       	inc	r30
    1a96:	9a 95       	dec	r25
    1a98:	72 f7       	brpl	.-36     	; 0x1a76 <__fp_rempio2+0x18>
    1a9a:	80 38       	cpi	r24, 0x80	; 128
    1a9c:	30 f4       	brcc	.+12     	; 0x1aaa <__fp_rempio2+0x4c>
    1a9e:	9a 95       	dec	r25
    1aa0:	bb 0f       	add	r27, r27
    1aa2:	66 1f       	adc	r22, r22
    1aa4:	77 1f       	adc	r23, r23
    1aa6:	88 1f       	adc	r24, r24
    1aa8:	d2 f7       	brpl	.-12     	; 0x1a9e <__fp_rempio2+0x40>
    1aaa:	90 48       	sbci	r25, 0x80	; 128
    1aac:	0c 94 1a 0d 	jmp	0x1a34	; 0x1a34 <__fp_mpack_finite>

00001ab0 <__fp_sinus>:
    1ab0:	ef 93       	push	r30
    1ab2:	e0 ff       	sbrs	r30, 0
    1ab4:	07 c0       	rjmp	.+14     	; 0x1ac4 <__fp_sinus+0x14>
    1ab6:	a2 ea       	ldi	r26, 0xA2	; 162
    1ab8:	2a ed       	ldi	r18, 0xDA	; 218
    1aba:	3f e0       	ldi	r19, 0x0F	; 15
    1abc:	49 ec       	ldi	r20, 0xC9	; 201
    1abe:	5f eb       	ldi	r21, 0xBF	; 191
    1ac0:	0e 94 16 0b 	call	0x162c	; 0x162c <__addsf3x>
    1ac4:	0e 94 1e 0c 	call	0x183c	; 0x183c <__fp_round>
    1ac8:	0f 90       	pop	r0
    1aca:	03 94       	inc	r0
    1acc:	01 fc       	sbrc	r0, 1
    1ace:	90 58       	subi	r25, 0x80	; 128
    1ad0:	e8 e8       	ldi	r30, 0x88	; 136
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	0c 94 6c 0d 	jmp	0x1ad8	; 0x1ad8 <__fp_powsodd>

00001ad8 <__fp_powsodd>:
    1ad8:	9f 93       	push	r25
    1ada:	8f 93       	push	r24
    1adc:	7f 93       	push	r23
    1ade:	6f 93       	push	r22
    1ae0:	ff 93       	push	r31
    1ae2:	ef 93       	push	r30
    1ae4:	9b 01       	movw	r18, r22
    1ae6:	ac 01       	movw	r20, r24
    1ae8:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__mulsf3>
    1aec:	ef 91       	pop	r30
    1aee:	ff 91       	pop	r31
    1af0:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__fp_powser>
    1af4:	2f 91       	pop	r18
    1af6:	3f 91       	pop	r19
    1af8:	4f 91       	pop	r20
    1afa:	5f 91       	pop	r21
    1afc:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__mulsf3>

00001b00 <__fp_powser>:
    1b00:	df 93       	push	r29
    1b02:	cf 93       	push	r28
    1b04:	1f 93       	push	r17
    1b06:	0f 93       	push	r16
    1b08:	ff 92       	push	r15
    1b0a:	ef 92       	push	r14
    1b0c:	df 92       	push	r13
    1b0e:	7b 01       	movw	r14, r22
    1b10:	8c 01       	movw	r16, r24
    1b12:	68 94       	set
    1b14:	06 c0       	rjmp	.+12     	; 0x1b22 <__fp_powser+0x22>
    1b16:	da 2e       	mov	r13, r26
    1b18:	ef 01       	movw	r28, r30
    1b1a:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__mulsf3x>
    1b1e:	fe 01       	movw	r30, r28
    1b20:	e8 94       	clt
    1b22:	a5 91       	lpm	r26, Z+
    1b24:	25 91       	lpm	r18, Z+
    1b26:	35 91       	lpm	r19, Z+
    1b28:	45 91       	lpm	r20, Z+
    1b2a:	55 91       	lpm	r21, Z+
    1b2c:	a6 f3       	brts	.-24     	; 0x1b16 <__fp_powser+0x16>
    1b2e:	ef 01       	movw	r28, r30
    1b30:	0e 94 16 0b 	call	0x162c	; 0x162c <__addsf3x>
    1b34:	fe 01       	movw	r30, r28
    1b36:	97 01       	movw	r18, r14
    1b38:	a8 01       	movw	r20, r16
    1b3a:	da 94       	dec	r13
    1b3c:	69 f7       	brne	.-38     	; 0x1b18 <__fp_powser+0x18>
    1b3e:	df 90       	pop	r13
    1b40:	ef 90       	pop	r14
    1b42:	ff 90       	pop	r15
    1b44:	0f 91       	pop	r16
    1b46:	1f 91       	pop	r17
    1b48:	cf 91       	pop	r28
    1b4a:	df 91       	pop	r29
    1b4c:	08 95       	ret

00001b4e <_ZL16currentCharacterv>:
    1b4e:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <_ZL17use_program_space>
    1b52:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <__data_end>
    1b56:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <__data_end+0x1>
    1b5a:	99 23       	and	r25, r25
    1b5c:	11 f0       	breq	.+4      	; 0x1b62 <_ZL16currentCharacterv+0x14>
    1b5e:	84 91       	lpm	r24, Z
    1b60:	01 c0       	rjmp	.+2      	; 0x1b64 <_ZL16currentCharacterv+0x16>
    1b62:	80 81       	ld	r24, Z
    1b64:	2f eb       	ldi	r18, 0xBF	; 191
    1b66:	28 0f       	add	r18, r24
    1b68:	2a 31       	cpi	r18, 0x1A	; 26
    1b6a:	10 f4       	brcc	.+4      	; 0x1b70 <_ZL16currentCharacterv+0x22>
    1b6c:	80 5e       	subi	r24, 0xE0	; 224
    1b6e:	08 95       	ret
    1b70:	80 32       	cpi	r24, 0x20	; 32
    1b72:	49 f4       	brne	.+18     	; 0x1b86 <_ZL16currentCharacterv+0x38>
    1b74:	9f 01       	movw	r18, r30
    1b76:	2f 5f       	subi	r18, 0xFF	; 255
    1b78:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7a:	30 93 2b 01 	sts	0x012B, r19	; 0x80012b <__data_end+0x1>
    1b7e:	20 93 2a 01 	sts	0x012A, r18	; 0x80012a <__data_end>
    1b82:	ef 2b       	or	r30, r31
    1b84:	31 f7       	brne	.-52     	; 0x1b52 <_ZL16currentCharacterv+0x4>
    1b86:	08 95       	ret

00001b88 <_ZL9getNumberv>:
    1b88:	1f 93       	push	r17
    1b8a:	cf 93       	push	r28
    1b8c:	df 93       	push	r29
    1b8e:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <_ZL16currentCharacterv>
    1b92:	c0 e0       	ldi	r28, 0x00	; 0
    1b94:	d0 e0       	ldi	r29, 0x00	; 0
    1b96:	1a e0       	ldi	r17, 0x0A	; 10
    1b98:	90 ed       	ldi	r25, 0xD0	; 208
    1b9a:	98 0f       	add	r25, r24
    1b9c:	9a 30       	cpi	r25, 0x0A	; 10
    1b9e:	b8 f4       	brcc	.+46     	; 0x1bce <_ZL9getNumberv+0x46>
    1ba0:	9e 01       	movw	r18, r28
    1ba2:	12 9f       	mul	r17, r18
    1ba4:	e0 01       	movw	r28, r0
    1ba6:	13 9f       	mul	r17, r19
    1ba8:	d0 0d       	add	r29, r0
    1baa:	11 24       	eor	r1, r1
    1bac:	c8 0f       	add	r28, r24
    1bae:	d1 1d       	adc	r29, r1
    1bb0:	87 fd       	sbrc	r24, 7
    1bb2:	da 95       	dec	r29
    1bb4:	e0 97       	sbiw	r28, 0x30	; 48
    1bb6:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
    1bba:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0x1>
    1bbe:	01 96       	adiw	r24, 0x01	; 1
    1bc0:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__data_end+0x1>
    1bc4:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
    1bc8:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <_ZL16currentCharacterv>
    1bcc:	e5 cf       	rjmp	.-54     	; 0x1b98 <_ZL9getNumberv+0x10>
    1bce:	ce 01       	movw	r24, r28
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	1f 91       	pop	r17
    1bd6:	08 95       	ret

00001bd8 <_ZN15OrangutanBuzzer5init2Ev>:
    1bd8:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1bdc:	83 e2       	ldi	r24, 0x23	; 35
    1bde:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1be2:	81 e1       	ldi	r24, 0x11	; 17
    1be4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1be8:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    1bec:	80 e1       	ldi	r24, 0x10	; 16
    1bee:	97 e2       	ldi	r25, 0x27	; 39
    1bf0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1bf4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1bf8:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1bfc:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1c00:	22 9a       	sbi	0x04, 2	; 4
    1c02:	78 94       	sei
    1c04:	08 95       	ret

00001c06 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
    1c06:	8f 92       	push	r8
    1c08:	9f 92       	push	r9
    1c0a:	af 92       	push	r10
    1c0c:	bf 92       	push	r11
    1c0e:	df 92       	push	r13
    1c10:	ef 92       	push	r14
    1c12:	ff 92       	push	r15
    1c14:	0f 93       	push	r16
    1c16:	1f 93       	push	r17
    1c18:	cf 93       	push	r28
    1c1a:	df 93       	push	r29
    1c1c:	5c 01       	movw	r10, r24
    1c1e:	8b 01       	movw	r16, r22
    1c20:	d4 2e       	mov	r13, r20
    1c22:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <buzzerInitialized>
    1c26:	81 11       	cpse	r24, r1
    1c28:	05 c0       	rjmp	.+10     	; 0x1c34 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <buzzerInitialized>
    1c30:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <_ZN15OrangutanBuzzer5init2Ev>
    1c34:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <buzzerFinished>
    1c38:	b7 fe       	sbrs	r11, 7
    1c3a:	05 c0       	rjmp	.+10     	; 0x1c46 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
    1c3c:	e8 94       	clt
    1c3e:	b7 f8       	bld	r11, 7
    1c40:	2a e0       	ldi	r18, 0x0A	; 10
    1c42:	f2 2e       	mov	r15, r18
    1c44:	02 c0       	rjmp	.+4      	; 0x1c4a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
    1c46:	ff 24       	eor	r15, r15
    1c48:	f3 94       	inc	r15
    1c4a:	e0 90 81 00 	lds	r14, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1c4e:	2e 2d       	mov	r18, r14
    1c50:	28 7f       	andi	r18, 0xF8	; 248
    1c52:	e2 2e       	mov	r14, r18
    1c54:	48 ec       	ldi	r20, 0xC8	; 200
    1c56:	f4 9e       	mul	r15, r20
    1c58:	c0 01       	movw	r24, r0
    1c5a:	11 24       	eor	r1, r1
    1c5c:	8a 15       	cp	r24, r10
    1c5e:	9b 05       	cpc	r25, r11
    1c60:	e0 f4       	brcc	.+56     	; 0x1c9a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
    1c62:	e5 01       	movw	r28, r10
    1c64:	51 e1       	ldi	r21, 0x11	; 17
    1c66:	a5 16       	cp	r10, r21
    1c68:	57 e2       	ldi	r21, 0x27	; 39
    1c6a:	b5 06       	cpc	r11, r21
    1c6c:	10 f0       	brcs	.+4      	; 0x1c72 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
    1c6e:	c0 e1       	ldi	r28, 0x10	; 16
    1c70:	d7 e2       	ldi	r29, 0x27	; 39
    1c72:	be 01       	movw	r22, r28
    1c74:	76 95       	lsr	r23
    1c76:	67 95       	ror	r22
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	60 58       	subi	r22, 0x80	; 128
    1c7e:	79 46       	sbci	r23, 0x69	; 105
    1c80:	87 46       	sbci	r24, 0x67	; 103
    1c82:	9f 4f       	sbci	r25, 0xFF	; 255
    1c84:	4e 01       	movw	r8, r28
    1c86:	a1 2c       	mov	r10, r1
    1c88:	b1 2c       	mov	r11, r1
    1c8a:	a5 01       	movw	r20, r10
    1c8c:	94 01       	movw	r18, r8
    1c8e:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__udivmodsi4>
    1c92:	59 01       	movw	r10, r18
    1c94:	8e 2d       	mov	r24, r14
    1c96:	81 60       	ori	r24, 0x01	; 1
    1c98:	24 c0       	rjmp	.+72     	; 0x1ce2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
    1c9a:	c8 e2       	ldi	r28, 0x28	; 40
    1c9c:	fc 9e       	mul	r15, r28
    1c9e:	c0 2d       	mov	r28, r0
    1ca0:	11 24       	eor	r1, r1
    1ca2:	d0 e0       	ldi	r29, 0x00	; 0
    1ca4:	ca 15       	cp	r28, r10
    1ca6:	db 05       	cpc	r29, r11
    1ca8:	08 f4       	brcc	.+2      	; 0x1cac <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
    1caa:	e5 01       	movw	r28, r10
    1cac:	be 01       	movw	r22, r28
    1cae:	76 95       	lsr	r23
    1cb0:	67 95       	ror	r22
    1cb2:	9e 01       	movw	r18, r28
    1cb4:	40 e0       	ldi	r20, 0x00	; 0
    1cb6:	50 e0       	ldi	r21, 0x00	; 0
    1cb8:	8a e0       	ldi	r24, 0x0A	; 10
    1cba:	f8 12       	cpse	r15, r24
    1cbc:	07 c0       	rjmp	.+14     	; 0x1ccc <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	60 5e       	subi	r22, 0xE0	; 224
    1cc4:	73 44       	sbci	r23, 0x43	; 67
    1cc6:	81 44       	sbci	r24, 0x41	; 65
    1cc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cca:	06 c0       	rjmp	.+12     	; 0x1cd8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	60 53       	subi	r22, 0x30	; 48
    1cd2:	7d 4e       	sbci	r23, 0xED	; 237
    1cd4:	8c 4e       	sbci	r24, 0xEC	; 236
    1cd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd8:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__udivmodsi4>
    1cdc:	59 01       	movw	r10, r18
    1cde:	8e 2d       	mov	r24, r14
    1ce0:	82 60       	ori	r24, 0x02	; 2
    1ce2:	88 2e       	mov	r8, r24
    1ce4:	2a e0       	ldi	r18, 0x0A	; 10
    1ce6:	f2 12       	cpse	r15, r18
    1ce8:	07 c0       	rjmp	.+14     	; 0x1cf8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
    1cea:	ce 01       	movw	r24, r28
    1cec:	05 96       	adiw	r24, 0x05	; 5
    1cee:	6a e0       	ldi	r22, 0x0A	; 10
    1cf0:	70 e0       	ldi	r23, 0x00	; 0
    1cf2:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <__udivmodhi4>
    1cf6:	eb 01       	movw	r28, r22
    1cf8:	c8 3e       	cpi	r28, 0xE8	; 232
    1cfa:	43 e0       	ldi	r20, 0x03	; 3
    1cfc:	d4 07       	cpc	r29, r20
    1cfe:	59 f0       	breq	.+22     	; 0x1d16 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    1d00:	98 01       	movw	r18, r16
    1d02:	de 01       	movw	r26, r28
    1d04:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <__umulhisi3>
    1d08:	28 ee       	ldi	r18, 0xE8	; 232
    1d0a:	33 e0       	ldi	r19, 0x03	; 3
    1d0c:	40 e0       	ldi	r20, 0x00	; 0
    1d0e:	50 e0       	ldi	r21, 0x00	; 0
    1d10:	0e 94 22 17 	call	0x2e44	; 0x2e44 <__divmodsi4>
    1d14:	89 01       	movw	r16, r18
    1d16:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1d1a:	80 92 81 00 	sts	0x0081, r8	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1d1e:	b0 92 89 00 	sts	0x0089, r11	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1d22:	a0 92 88 00 	sts	0x0088, r10	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1d26:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1d2a:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1d2e:	4d 2d       	mov	r20, r13
    1d30:	40 31       	cpi	r20, 0x10	; 16
    1d32:	08 f0       	brcs	.+2      	; 0x1d36 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    1d34:	4f e0       	ldi	r20, 0x0F	; 15
    1d36:	80 e1       	ldi	r24, 0x10	; 16
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	84 1b       	sub	r24, r20
    1d3c:	91 09       	sbc	r25, r1
    1d3e:	a9 01       	movw	r20, r18
    1d40:	02 c0       	rjmp	.+4      	; 0x1d46 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    1d42:	56 95       	lsr	r21
    1d44:	47 95       	ror	r20
    1d46:	8a 95       	dec	r24
    1d48:	e2 f7       	brpl	.-8      	; 0x1d42 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    1d4a:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1d4e:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1d52:	10 93 32 01 	sts	0x0132, r17	; 0x800132 <_ZL13buzzerTimeout+0x1>
    1d56:	00 93 31 01 	sts	0x0131, r16	; 0x800131 <_ZL13buzzerTimeout>
    1d5a:	86 b3       	in	r24, 0x16	; 22
    1d5c:	8f ef       	ldi	r24, 0xFF	; 255
    1d5e:	86 bb       	out	0x16, r24	; 22
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1d66:	df 91       	pop	r29
    1d68:	cf 91       	pop	r28
    1d6a:	1f 91       	pop	r17
    1d6c:	0f 91       	pop	r16
    1d6e:	ff 90       	pop	r15
    1d70:	ef 90       	pop	r14
    1d72:	df 90       	pop	r13
    1d74:	bf 90       	pop	r11
    1d76:	af 90       	pop	r10
    1d78:	9f 90       	pop	r9
    1d7a:	8f 90       	pop	r8
    1d7c:	08 95       	ret

00001d7e <_ZN15OrangutanBuzzer8playNoteEhjh>:
    1d7e:	cf 93       	push	r28
    1d80:	df 93       	push	r29
    1d82:	eb 01       	movw	r28, r22
    1d84:	8f 3f       	cpi	r24, 0xFF	; 255
    1d86:	11 f0       	breq	.+4      	; 0x1d8c <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
    1d88:	41 11       	cpse	r20, r1
    1d8a:	05 c0       	rjmp	.+10     	; 0x1d96 <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
    1d8c:	40 e0       	ldi	r20, 0x00	; 0
    1d8e:	be 01       	movw	r22, r28
    1d90:	88 ee       	ldi	r24, 0xE8	; 232
    1d92:	93 e0       	ldi	r25, 0x03	; 3
    1d94:	43 c0       	rjmp	.+134    	; 0x1e1c <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
    1d96:	81 31       	cpi	r24, 0x11	; 17
    1d98:	30 f0       	brcs	.+12     	; 0x1da6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
    1d9a:	50 ef       	ldi	r21, 0xF0	; 240
    1d9c:	58 0f       	add	r21, r24
    1d9e:	50 36       	cpi	r21, 0x60	; 96
    1da0:	18 f0       	brcs	.+6      	; 0x1da8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1da2:	5f e5       	ldi	r21, 0x5F	; 95
    1da4:	01 c0       	rjmp	.+2      	; 0x1da8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1da6:	50 e0       	ldi	r21, 0x00	; 0
    1da8:	85 2f       	mov	r24, r21
    1daa:	6c e0       	ldi	r22, 0x0C	; 12
    1dac:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <__udivmodqi4>
    1db0:	68 2f       	mov	r22, r24
    1db2:	74 ef       	ldi	r23, 0xF4	; 244
    1db4:	76 03       	mulsu	r23, r22
    1db6:	90 01       	movw	r18, r0
    1db8:	11 24       	eor	r1, r1
    1dba:	25 0f       	add	r18, r21
    1dbc:	31 1d       	adc	r19, r1
    1dbe:	2c 30       	cpi	r18, 0x0C	; 12
    1dc0:	31 05       	cpc	r19, r1
    1dc2:	40 f4       	brcc	.+16     	; 0x1dd4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
    1dc4:	f9 01       	movw	r30, r18
    1dc6:	ee 0f       	add	r30, r30
    1dc8:	ff 1f       	adc	r31, r31
    1dca:	ee 5e       	subi	r30, 0xEE	; 238
    1dcc:	fe 4f       	sbci	r31, 0xFE	; 254
    1dce:	20 81       	ld	r18, Z
    1dd0:	31 81       	ldd	r19, Z+1	; 0x01
    1dd2:	02 c0       	rjmp	.+4      	; 0x1dd8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	87 30       	cpi	r24, 0x07	; 7
    1dda:	81 f0       	breq	.+32     	; 0x1dfc <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
    1ddc:	08 2e       	mov	r0, r24
    1dde:	02 c0       	rjmp	.+4      	; 0x1de4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
    1de0:	22 0f       	add	r18, r18
    1de2:	33 1f       	adc	r19, r19
    1de4:	0a 94       	dec	r0
    1de6:	e2 f7       	brpl	.-8      	; 0x1de0 <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    1de8:	82 30       	cpi	r24, 0x02	; 2
    1dea:	28 f0       	brcs	.+10     	; 0x1df6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
    1dec:	c9 01       	movw	r24, r18
    1dee:	05 96       	adiw	r24, 0x05	; 5
    1df0:	6a e0       	ldi	r22, 0x0A	; 10
    1df2:	70 e0       	ldi	r23, 0x00	; 0
    1df4:	0c c0       	rjmp	.+24     	; 0x1e0e <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
    1df6:	c9 01       	movw	r24, r18
    1df8:	90 58       	subi	r25, 0x80	; 128
    1dfa:	0c c0       	rjmp	.+24     	; 0x1e14 <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
    1dfc:	c9 01       	movw	r24, r18
    1dfe:	36 e0       	ldi	r19, 0x06	; 6
    1e00:	88 0f       	add	r24, r24
    1e02:	99 1f       	adc	r25, r25
    1e04:	3a 95       	dec	r19
    1e06:	e1 f7       	brne	.-8      	; 0x1e00 <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
    1e08:	02 96       	adiw	r24, 0x02	; 2
    1e0a:	65 e0       	ldi	r22, 0x05	; 5
    1e0c:	70 e0       	ldi	r23, 0x00	; 0
    1e0e:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <__udivmodhi4>
    1e12:	cb 01       	movw	r24, r22
    1e14:	40 31       	cpi	r20, 0x10	; 16
    1e16:	08 f0       	brcs	.+2      	; 0x1e1a <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    1e18:	4f e0       	ldi	r20, 0x0F	; 15
    1e1a:	be 01       	movw	r22, r28
    1e1c:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1e20:	df 91       	pop	r29
    1e22:	cf 91       	pop	r28
    1e24:	08 95       	ret

00001e26 <_ZL8nextNotev>:
    1e26:	a2 e0       	ldi	r26, 0x02	; 2
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	e9 e1       	ldi	r30, 0x19	; 25
    1e2c:	ff e0       	ldi	r31, 0x0F	; 15
    1e2e:	0c 94 6b 17 	jmp	0x2ed6	; 0x2ed6 <__prologue_saves__+0x4>
    1e32:	90 90 08 01 	lds	r9, 0x0108	; 0x800108 <_ZL6octave>
    1e36:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <_ZL8staccato>
    1e3a:	88 23       	and	r24, r24
    1e3c:	21 f0       	breq	.+8      	; 0x1e46 <_ZL8nextNotev+0x20>
    1e3e:	60 91 2d 01 	lds	r22, 0x012D	; 0x80012d <_ZL22staccato_rest_duration>
    1e42:	61 11       	cpse	r22, r1
    1e44:	17 c0       	rjmp	.+46     	; 0x1e74 <_ZL8nextNotev+0x4e>
    1e46:	77 24       	eor	r7, r7
    1e48:	73 94       	inc	r7
    1e4a:	b0 ec       	ldi	r27, 0xC0	; 192
    1e4c:	ab 2e       	mov	r10, r27
    1e4e:	bd e5       	ldi	r27, 0x5D	; 93
    1e50:	bb 2e       	mov	r11, r27
    1e52:	1a e0       	ldi	r17, 0x0A	; 10
    1e54:	61 2e       	mov	r6, r17
    1e56:	04 e0       	ldi	r16, 0x04	; 4
    1e58:	80 2e       	mov	r8, r16
    1e5a:	80 ed       	ldi	r24, 0xD0	; 208
    1e5c:	c8 2e       	mov	r12, r24
    1e5e:	87 e0       	ldi	r24, 0x07	; 7
    1e60:	d8 2e       	mov	r13, r24
    1e62:	94 e0       	ldi	r25, 0x04	; 4
    1e64:	e9 2e       	mov	r14, r25
    1e66:	f1 2c       	mov	r15, r1
    1e68:	04 ef       	ldi	r16, 0xF4	; 244
    1e6a:	11 e0       	ldi	r17, 0x01	; 1
    1e6c:	2f e0       	ldi	r18, 0x0F	; 15
    1e6e:	42 2e       	mov	r4, r18
    1e70:	51 2c       	mov	r5, r1
    1e72:	15 c0       	rjmp	.+42     	; 0x1e9e <_ZL8nextNotev+0x78>
    1e74:	70 e0       	ldi	r23, 0x00	; 0
    1e76:	40 e0       	ldi	r20, 0x00	; 0
    1e78:	88 ee       	ldi	r24, 0xE8	; 232
    1e7a:	93 e0       	ldi	r25, 0x03	; 3
    1e7c:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1e80:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <_ZL22staccato_rest_duration>
    1e84:	17 c1       	rjmp	.+558    	; 0x20b4 <_ZL8nextNotev+0x28e>
    1e86:	86 36       	cpi	r24, 0x66	; 102
    1e88:	d4 f5       	brge	.+116    	; 0x1efe <_ZL8nextNotev+0xd8>
    1e8a:	81 36       	cpi	r24, 0x61	; 97
    1e8c:	09 f4       	brne	.+2      	; 0x1e90 <_ZL8nextNotev+0x6a>
    1e8e:	a9 c0       	rjmp	.+338    	; 0x1fe2 <_ZL8nextNotev+0x1bc>
    1e90:	7c f5       	brge	.+94     	; 0x1ef0 <_ZL8nextNotev+0xca>
    1e92:	8c 33       	cpi	r24, 0x3C	; 60
    1e94:	09 f4       	brne	.+2      	; 0x1e98 <_ZL8nextNotev+0x72>
    1e96:	60 c0       	rjmp	.+192    	; 0x1f58 <_ZL8nextNotev+0x132>
    1e98:	8e 33       	cpi	r24, 0x3E	; 62
    1e9a:	81 f4       	brne	.+32     	; 0x1ebc <_ZL8nextNotev+0x96>
    1e9c:	93 94       	inc	r9
    1e9e:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <_ZL16currentCharacterv>
    1ea2:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <__data_end>
    1ea6:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <__data_end+0x1>
    1eaa:	2f 5f       	subi	r18, 0xFF	; 255
    1eac:	3f 4f       	sbci	r19, 0xFF	; 255
    1eae:	30 93 2b 01 	sts	0x012B, r19	; 0x80012b <__data_end+0x1>
    1eb2:	20 93 2a 01 	sts	0x012A, r18	; 0x80012a <__data_end>
    1eb6:	85 36       	cpi	r24, 0x65	; 101
    1eb8:	31 f7       	brne	.-52     	; 0x1e86 <_ZL8nextNotev+0x60>
    1eba:	52 c0       	rjmp	.+164    	; 0x1f60 <_ZL8nextNotev+0x13a>
    1ebc:	81 32       	cpi	r24, 0x21	; 33
    1ebe:	09 f0       	breq	.+2      	; 0x1ec2 <_ZL8nextNotev+0x9c>
    1ec0:	8b c0       	rjmp	.+278    	; 0x1fd8 <_ZL8nextNotev+0x1b2>
    1ec2:	80 92 08 01 	sts	0x0108, r8	; 0x800108 <_ZL6octave>
    1ec6:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_ZL19whole_note_duration+0x1>
    1eca:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_ZL19whole_note_duration>
    1ece:	f0 92 05 01 	sts	0x0105, r15	; 0x800105 <_ZL9note_type+0x1>
    1ed2:	e0 92 04 01 	sts	0x0104, r14	; 0x800104 <_ZL9note_type>
    1ed6:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <_ZL8duration+0x1>
    1eda:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <_ZL8duration>
    1ede:	50 92 01 01 	sts	0x0101, r5	; 0x800101 <__data_start+0x1>
    1ee2:	40 92 00 01 	sts	0x0100, r4	; 0x800100 <__data_start>
    1ee6:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <_ZL8staccato>
    1eea:	a4 e0       	ldi	r26, 0x04	; 4
    1eec:	9a 2e       	mov	r9, r26
    1eee:	d7 cf       	rjmp	.-82     	; 0x1e9e <_ZL8nextNotev+0x78>
    1ef0:	83 36       	cpi	r24, 0x63	; 99
    1ef2:	a1 f1       	breq	.+104    	; 0x1f5c <_ZL8nextNotev+0x136>
    1ef4:	0c f4       	brge	.+2      	; 0x1ef8 <_ZL8nextNotev+0xd2>
    1ef6:	78 c0       	rjmp	.+240    	; 0x1fe8 <_ZL8nextNotev+0x1c2>
    1ef8:	10 e0       	ldi	r17, 0x00	; 0
    1efa:	82 e0       	ldi	r24, 0x02	; 2
    1efc:	77 c0       	rjmp	.+238    	; 0x1fec <_ZL8nextNotev+0x1c6>
    1efe:	8d 36       	cpi	r24, 0x6D	; 109
    1f00:	c1 f1       	breq	.+112    	; 0x1f72 <_ZL8nextNotev+0x14c>
    1f02:	94 f4       	brge	.+36     	; 0x1f28 <_ZL8nextNotev+0x102>
    1f04:	87 36       	cpi	r24, 0x67	; 103
    1f06:	91 f1       	breq	.+100    	; 0x1f6c <_ZL8nextNotev+0x146>
    1f08:	74 f1       	brlt	.+92     	; 0x1f66 <_ZL8nextNotev+0x140>
    1f0a:	8c 36       	cpi	r24, 0x6C	; 108
    1f0c:	09 f0       	breq	.+2      	; 0x1f10 <_ZL8nextNotev+0xea>
    1f0e:	64 c0       	rjmp	.+200    	; 0x1fd8 <_ZL8nextNotev+0x1b2>
    1f10:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <_ZL9getNumberv>
    1f14:	bc 01       	movw	r22, r24
    1f16:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_ZL9note_type+0x1>
    1f1a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_ZL9note_type>
    1f1e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL19whole_note_duration>
    1f22:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL19whole_note_duration+0x1>
    1f26:	51 c0       	rjmp	.+162    	; 0x1fca <_ZL8nextNotev+0x1a4>
    1f28:	82 37       	cpi	r24, 0x72	; 114
    1f2a:	c9 f1       	breq	.+114    	; 0x1f9e <_ZL8nextNotev+0x178>
    1f2c:	4c f4       	brge	.+18     	; 0x1f40 <_ZL8nextNotev+0x11a>
    1f2e:	8f 36       	cpi	r24, 0x6F	; 111
    1f30:	09 f0       	breq	.+2      	; 0x1f34 <_ZL8nextNotev+0x10e>
    1f32:	52 c0       	rjmp	.+164    	; 0x1fd8 <_ZL8nextNotev+0x1b2>
    1f34:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <_ZL9getNumberv>
    1f38:	98 2e       	mov	r9, r24
    1f3a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL6octave>
    1f3e:	af cf       	rjmp	.-162    	; 0x1e9e <_ZL8nextNotev+0x78>
    1f40:	84 37       	cpi	r24, 0x74	; 116
    1f42:	81 f1       	breq	.+96     	; 0x1fa4 <_ZL8nextNotev+0x17e>
    1f44:	86 37       	cpi	r24, 0x76	; 118
    1f46:	09 f0       	breq	.+2      	; 0x1f4a <_ZL8nextNotev+0x124>
    1f48:	47 c0       	rjmp	.+142    	; 0x1fd8 <_ZL8nextNotev+0x1b2>
    1f4a:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <_ZL9getNumberv>
    1f4e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1f52:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1f56:	a3 cf       	rjmp	.-186    	; 0x1e9e <_ZL8nextNotev+0x78>
    1f58:	9a 94       	dec	r9
    1f5a:	a1 cf       	rjmp	.-190    	; 0x1e9e <_ZL8nextNotev+0x78>
    1f5c:	10 e0       	ldi	r17, 0x00	; 0
    1f5e:	20 c0       	rjmp	.+64     	; 0x1fa0 <_ZL8nextNotev+0x17a>
    1f60:	10 e0       	ldi	r17, 0x00	; 0
    1f62:	84 e0       	ldi	r24, 0x04	; 4
    1f64:	43 c0       	rjmp	.+134    	; 0x1fec <_ZL8nextNotev+0x1c6>
    1f66:	10 e0       	ldi	r17, 0x00	; 0
    1f68:	85 e0       	ldi	r24, 0x05	; 5
    1f6a:	40 c0       	rjmp	.+128    	; 0x1fec <_ZL8nextNotev+0x1c6>
    1f6c:	10 e0       	ldi	r17, 0x00	; 0
    1f6e:	87 e0       	ldi	r24, 0x07	; 7
    1f70:	3d c0       	rjmp	.+122    	; 0x1fec <_ZL8nextNotev+0x1c6>
    1f72:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <_ZL16currentCharacterv>
    1f76:	8c 36       	cpi	r24, 0x6C	; 108
    1f78:	19 f4       	brne	.+6      	; 0x1f80 <_ZL8nextNotev+0x15a>
    1f7a:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <_ZL8staccato>
    1f7e:	04 c0       	rjmp	.+8      	; 0x1f88 <_ZL8nextNotev+0x162>
    1f80:	70 92 2e 01 	sts	0x012E, r7	; 0x80012e <_ZL8staccato>
    1f84:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <_ZL22staccato_rest_duration>
    1f88:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <__data_end>
    1f8c:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <__data_end+0x1>
    1f90:	2f 5f       	subi	r18, 0xFF	; 255
    1f92:	3f 4f       	sbci	r19, 0xFF	; 255
    1f94:	30 93 2b 01 	sts	0x012B, r19	; 0x80012b <__data_end+0x1>
    1f98:	20 93 2a 01 	sts	0x012A, r18	; 0x80012a <__data_end>
    1f9c:	80 cf       	rjmp	.-256    	; 0x1e9e <_ZL8nextNotev+0x78>
    1f9e:	11 e0       	ldi	r17, 0x01	; 1
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	24 c0       	rjmp	.+72     	; 0x1fec <_ZL8nextNotev+0x1c6>
    1fa4:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <_ZL9getNumberv>
    1fa8:	bc 01       	movw	r22, r24
    1faa:	c5 01       	movw	r24, r10
    1fac:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <__udivmodhi4>
    1fb0:	66 9e       	mul	r6, r22
    1fb2:	c0 01       	movw	r24, r0
    1fb4:	67 9e       	mul	r6, r23
    1fb6:	90 0d       	add	r25, r0
    1fb8:	11 24       	eor	r1, r1
    1fba:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL19whole_note_duration+0x1>
    1fbe:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL19whole_note_duration>
    1fc2:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_ZL9note_type>
    1fc6:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_ZL9note_type+0x1>
    1fca:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <__udivmodhi4>
    1fce:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <_ZL8duration+0x1>
    1fd2:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <_ZL8duration>
    1fd6:	63 cf       	rjmp	.-314    	; 0x1e9e <_ZL8nextNotev+0x78>
    1fd8:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__data_end+0x1>
    1fdc:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end>
    1fe0:	69 c0       	rjmp	.+210    	; 0x20b4 <_ZL8nextNotev+0x28e>
    1fe2:	10 e0       	ldi	r17, 0x00	; 0
    1fe4:	89 e0       	ldi	r24, 0x09	; 9
    1fe6:	02 c0       	rjmp	.+4      	; 0x1fec <_ZL8nextNotev+0x1c6>
    1fe8:	10 e0       	ldi	r17, 0x00	; 0
    1fea:	8b e0       	ldi	r24, 0x0B	; 11
    1fec:	08 2f       	mov	r16, r24
    1fee:	9c e0       	ldi	r25, 0x0C	; 12
    1ff0:	99 9e       	mul	r9, r25
    1ff2:	00 0d       	add	r16, r0
    1ff4:	11 24       	eor	r1, r1
    1ff6:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <_ZL16currentCharacterv>
    1ffa:	98 2f       	mov	r25, r24
    1ffc:	97 7f       	andi	r25, 0xF7	; 247
    1ffe:	93 32       	cpi	r25, 0x23	; 35
    2000:	61 f4       	brne	.+24     	; 0x201a <_ZL8nextNotev+0x1f4>
    2002:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <__data_end>
    2006:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <__data_end+0x1>
    200a:	2f 5f       	subi	r18, 0xFF	; 255
    200c:	3f 4f       	sbci	r19, 0xFF	; 255
    200e:	30 93 2b 01 	sts	0x012B, r19	; 0x80012b <__data_end+0x1>
    2012:	20 93 2a 01 	sts	0x012A, r18	; 0x80012a <__data_end>
    2016:	0f 5f       	subi	r16, 0xFF	; 255
    2018:	ee cf       	rjmp	.-36     	; 0x1ff6 <_ZL8nextNotev+0x1d0>
    201a:	8d 32       	cpi	r24, 0x2D	; 45
    201c:	71 f4       	brne	.+28     	; 0x203a <_ZL8nextNotev+0x214>
    201e:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <__data_end>
    2022:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <__data_end+0x1>
    2026:	2f 5f       	subi	r18, 0xFF	; 255
    2028:	3f 4f       	sbci	r19, 0xFF	; 255
    202a:	30 93 2b 01 	sts	0x012B, r19	; 0x80012b <__data_end+0x1>
    202e:	20 93 2a 01 	sts	0x012A, r18	; 0x80012a <__data_end>
    2032:	01 50       	subi	r16, 0x01	; 1
    2034:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <_ZL16currentCharacterv>
    2038:	f0 cf       	rjmp	.-32     	; 0x201a <_ZL8nextNotev+0x1f4>
    203a:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <_ZL8duration>
    203e:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <_ZL8duration+0x1>
    2042:	81 53       	subi	r24, 0x31	; 49
    2044:	88 30       	cpi	r24, 0x08	; 8
    2046:	50 f4       	brcc	.+20     	; 0x205c <_ZL8nextNotev+0x236>
    2048:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <_ZL19whole_note_duration>
    204c:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <_ZL19whole_note_duration+0x1>
    2050:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <_ZL9getNumberv>
    2054:	bc 01       	movw	r22, r24
    2056:	c7 01       	movw	r24, r14
    2058:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <__udivmodhi4>
    205c:	7b 01       	movw	r14, r22
    205e:	f6 94       	lsr	r15
    2060:	e7 94       	ror	r14
    2062:	69 83       	std	Y+1, r22	; 0x01
    2064:	7a 83       	std	Y+2, r23	; 0x02
    2066:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <_ZL16currentCharacterv>
    206a:	69 81       	ldd	r22, Y+1	; 0x01
    206c:	7a 81       	ldd	r23, Y+2	; 0x02
    206e:	8e 32       	cpi	r24, 0x2E	; 46
    2070:	69 f4       	brne	.+26     	; 0x208c <_ZL8nextNotev+0x266>
    2072:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <__data_end>
    2076:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <__data_end+0x1>
    207a:	2f 5f       	subi	r18, 0xFF	; 255
    207c:	3f 4f       	sbci	r19, 0xFF	; 255
    207e:	30 93 2b 01 	sts	0x012B, r19	; 0x80012b <__data_end+0x1>
    2082:	20 93 2a 01 	sts	0x012A, r18	; 0x80012a <__data_end>
    2086:	6e 0d       	add	r22, r14
    2088:	7f 1d       	adc	r23, r15
    208a:	e9 cf       	rjmp	.-46     	; 0x205e <_ZL8nextNotev+0x238>
    208c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <_ZL8staccato>
    2090:	88 23       	and	r24, r24
    2092:	39 f0       	breq	.+14     	; 0x20a2 <_ZL8nextNotev+0x27c>
    2094:	9b 01       	movw	r18, r22
    2096:	36 95       	lsr	r19
    2098:	27 95       	ror	r18
    209a:	20 93 2d 01 	sts	0x012D, r18	; 0x80012d <_ZL22staccato_rest_duration>
    209e:	62 1b       	sub	r22, r18
    20a0:	71 09       	sbc	r23, r1
    20a2:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
    20a6:	11 23       	and	r17, r17
    20a8:	11 f0       	breq	.+4      	; 0x20ae <_ZL8nextNotev+0x288>
    20aa:	8f ef       	ldi	r24, 0xFF	; 255
    20ac:	01 c0       	rjmp	.+2      	; 0x20b0 <_ZL8nextNotev+0x28a>
    20ae:	80 2f       	mov	r24, r16
    20b0:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <_ZN15OrangutanBuzzer8playNoteEhjh>
    20b4:	22 96       	adiw	r28, 0x02	; 2
    20b6:	e0 e1       	ldi	r30, 0x10	; 16
    20b8:	0c 94 87 17 	jmp	0x2f0e	; 0x2f0e <__epilogue_restores__+0x4>

000020bc <__vector_13>:
    20bc:	1f 92       	push	r1
    20be:	0f 92       	push	r0
    20c0:	0f b6       	in	r0, 0x3f	; 63
    20c2:	0f 92       	push	r0
    20c4:	11 24       	eor	r1, r1
    20c6:	2f 93       	push	r18
    20c8:	3f 93       	push	r19
    20ca:	4f 93       	push	r20
    20cc:	5f 93       	push	r21
    20ce:	6f 93       	push	r22
    20d0:	7f 93       	push	r23
    20d2:	8f 93       	push	r24
    20d4:	9f 93       	push	r25
    20d6:	af 93       	push	r26
    20d8:	bf 93       	push	r27
    20da:	ef 93       	push	r30
    20dc:	ff 93       	push	r31
    20de:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <_ZL13buzzerTimeout>
    20e2:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <_ZL13buzzerTimeout+0x1>
    20e6:	9c 01       	movw	r18, r24
    20e8:	21 50       	subi	r18, 0x01	; 1
    20ea:	31 09       	sbc	r19, r1
    20ec:	30 93 32 01 	sts	0x0132, r19	; 0x800132 <_ZL13buzzerTimeout+0x1>
    20f0:	20 93 31 01 	sts	0x0131, r18	; 0x800131 <_ZL13buzzerTimeout>
    20f4:	89 2b       	or	r24, r25
    20f6:	11 f5       	brne	.+68     	; 0x213c <__vector_13+0x80>
    20f8:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    20fc:	78 94       	sei
    20fe:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    2102:	88 7f       	andi	r24, 0xF8	; 248
    2104:	81 60       	ori	r24, 0x01	; 1
    2106:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    210a:	80 e1       	ldi	r24, 0x10	; 16
    210c:	97 e2       	ldi	r25, 0x27	; 39
    210e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    2112:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    2116:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    211a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <buzzerFinished>
    2124:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
    2128:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0x1>
    212c:	89 2b       	or	r24, r25
    212e:	31 f0       	breq	.+12     	; 0x213c <__vector_13+0x80>
    2130:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <_ZL17play_mode_setting>
    2134:	81 11       	cpse	r24, r1
    2136:	02 c0       	rjmp	.+4      	; 0x213c <__vector_13+0x80>
    2138:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <_ZL8nextNotev>
    213c:	ff 91       	pop	r31
    213e:	ef 91       	pop	r30
    2140:	bf 91       	pop	r27
    2142:	af 91       	pop	r26
    2144:	9f 91       	pop	r25
    2146:	8f 91       	pop	r24
    2148:	7f 91       	pop	r23
    214a:	6f 91       	pop	r22
    214c:	5f 91       	pop	r21
    214e:	4f 91       	pop	r20
    2150:	3f 91       	pop	r19
    2152:	2f 91       	pop	r18
    2154:	0f 90       	pop	r0
    2156:	0f be       	out	0x3f, r0	; 63
    2158:	0f 90       	pop	r0
    215a:	1f 90       	pop	r1
    215c:	18 95       	reti

0000215e <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    215e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    2162:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__data_end+0x1>
    2166:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <_ZL17use_program_space>
    2170:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <_ZL22staccato_rest_duration>
    2174:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <_ZL8nextNotev>
    2178:	08 95       	ret

0000217a <play_from_program_space>:
    217a:	0e 94 af 10 	call	0x215e	; 0x215e <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    217e:	08 95       	ret

00002180 <delay_us.constprop.0>:
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	6f 93       	push	r22
    2186:	64 e0       	ldi	r22, 0x04	; 4
    2188:	6a 95       	dec	r22
    218a:	f1 f7       	brne	.-4      	; 0x2188 <delay_us.constprop.0+0x8>
    218c:	6f 91       	pop	r22
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	c9 f7       	brne	.-14     	; 0x2184 <delay_us.constprop.0+0x4>
    2192:	08 95       	ret

00002194 <_ZN12OrangutanLCD8busyWaitEv>:
    2194:	0f 93       	push	r16
    2196:	1f 93       	push	r17
    2198:	cf 93       	push	r28
    219a:	df 93       	push	r29
    219c:	1a b1       	in	r17, 0x0a	; 10
    219e:	57 98       	cbi	0x0a, 7	; 10
    21a0:	5a 98       	cbi	0x0b, 2	; 11
    21a2:	28 9a       	sbi	0x05, 0	; 5
    21a4:	c0 e0       	ldi	r28, 0x00	; 0
    21a6:	d0 e0       	ldi	r29, 0x00	; 0
    21a8:	0e 94 c0 10 	call	0x2180	; 0x2180 <delay_us.constprop.0>
    21ac:	5c 9a       	sbi	0x0b, 4	; 11
    21ae:	0e 94 c0 10 	call	0x2180	; 0x2180 <delay_us.constprop.0>
    21b2:	09 b1       	in	r16, 0x09	; 9
    21b4:	5c 98       	cbi	0x0b, 4	; 11
    21b6:	0e 94 c0 10 	call	0x2180	; 0x2180 <delay_us.constprop.0>
    21ba:	5c 9a       	sbi	0x0b, 4	; 11
    21bc:	0e 94 c0 10 	call	0x2180	; 0x2180 <delay_us.constprop.0>
    21c0:	5c 98       	cbi	0x0b, 4	; 11
    21c2:	24 96       	adiw	r28, 0x04	; 4
    21c4:	07 ff       	sbrs	r16, 7
    21c6:	10 c0       	rjmp	.+32     	; 0x21e8 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    21c8:	ae 01       	movw	r20, r28
    21ca:	60 e0       	ldi	r22, 0x00	; 0
    21cc:	70 e0       	ldi	r23, 0x00	; 0
    21ce:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <lcdTimeout>
    21d2:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <lcdTimeout+0x1>
    21d6:	a0 91 35 01 	lds	r26, 0x0135	; 0x800135 <lcdTimeout+0x2>
    21da:	b0 91 36 01 	lds	r27, 0x0136	; 0x800136 <lcdTimeout+0x3>
    21de:	48 17       	cp	r20, r24
    21e0:	59 07       	cpc	r21, r25
    21e2:	6a 07       	cpc	r22, r26
    21e4:	7b 07       	cpc	r23, r27
    21e6:	00 f3       	brcs	.-64     	; 0x21a8 <_ZN12OrangutanLCD8busyWaitEv+0x14>
    21e8:	1a b9       	out	0x0a, r17	; 10
    21ea:	df 91       	pop	r29
    21ec:	cf 91       	pop	r28
    21ee:	1f 91       	pop	r17
    21f0:	0f 91       	pop	r16
    21f2:	08 95       	ret

000021f4 <_ZN12OrangutanLCD8sendDataEh>:
    21f4:	95 b1       	in	r25, 0x05	; 5
    21f6:	28 2f       	mov	r18, r24
    21f8:	21 70       	andi	r18, 0x01	; 1
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	22 0f       	add	r18, r18
    21fe:	33 1f       	adc	r19, r19
    2200:	48 2f       	mov	r20, r24
    2202:	46 70       	andi	r20, 0x06	; 6
    2204:	68 e0       	ldi	r22, 0x08	; 8
    2206:	46 9f       	mul	r20, r22
    2208:	a0 01       	movw	r20, r0
    220a:	11 24       	eor	r1, r1
    220c:	24 2b       	or	r18, r20
    220e:	9d 7c       	andi	r25, 0xCD	; 205
    2210:	29 2b       	or	r18, r25
    2212:	25 b9       	out	0x05, r18	; 5
    2214:	9b b1       	in	r25, 0x0b	; 11
    2216:	88 70       	andi	r24, 0x08	; 8
    2218:	82 95       	swap	r24
    221a:	80 7f       	andi	r24, 0xF0	; 240
    221c:	9f 77       	andi	r25, 0x7F	; 127
    221e:	89 2b       	or	r24, r25
    2220:	8b b9       	out	0x0b, r24	; 11
    2222:	5c 9a       	sbi	0x0b, 4	; 11
    2224:	0e 94 c0 10 	call	0x2180	; 0x2180 <delay_us.constprop.0>
    2228:	5c 98       	cbi	0x0b, 4	; 11
    222a:	0e 94 c0 10 	call	0x2180	; 0x2180 <delay_us.constprop.0>
    222e:	08 95       	ret

00002230 <_ZN12OrangutanLCD4sendEhhh>:
    2230:	a0 e0       	ldi	r26, 0x00	; 0
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	ee e1       	ldi	r30, 0x1E	; 30
    2236:	f1 e1       	ldi	r31, 0x11	; 17
    2238:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__prologue_saves__+0x16>
    223c:	c8 2f       	mov	r28, r24
    223e:	d6 2e       	mov	r13, r22
    2240:	e4 2e       	mov	r14, r20
    2242:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <_ZZN12OrangutanLCD4initEvE11initialized>
    2246:	81 11       	cpse	r24, r1
    2248:	05 c0       	rjmp	.+10     	; 0x2254 <_ZN12OrangutanLCD4sendEhhh+0x24>
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <_ZZN12OrangutanLCD4initEvE11initialized>
    2250:	0e 94 59 11 	call	0x22b2	; 0x22b2 <_ZN12OrangutanLCD5init2Ev>
    2254:	0e 94 ca 10 	call	0x2194	; 0x2194 <_ZN12OrangutanLCD8busyWaitEv>
    2258:	14 b1       	in	r17, 0x04	; 4
    225a:	d5 b1       	in	r29, 0x05	; 5
    225c:	fa b0       	in	r15, 0x0a	; 10
    225e:	0b b1       	in	r16, 0x0b	; 11
    2260:	28 98       	cbi	0x05, 0	; 5
    2262:	dd 20       	and	r13, r13
    2264:	11 f0       	breq	.+4      	; 0x226a <_ZN12OrangutanLCD4sendEhhh+0x3a>
    2266:	5a 9a       	sbi	0x0b, 2	; 11
    2268:	01 c0       	rjmp	.+2      	; 0x226c <_ZN12OrangutanLCD4sendEhhh+0x3c>
    226a:	5a 98       	cbi	0x0b, 2	; 11
    226c:	94 b1       	in	r25, 0x04	; 4
    226e:	92 63       	ori	r25, 0x32	; 50
    2270:	94 b9       	out	0x04, r25	; 4
    2272:	57 9a       	sbi	0x0a, 7	; 10
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	e8 16       	cp	r14, r24
    2278:	29 f0       	breq	.+10     	; 0x2284 <_ZN12OrangutanLCD4sendEhhh+0x54>
    227a:	8c 2f       	mov	r24, r28
    227c:	82 95       	swap	r24
    227e:	8f 70       	andi	r24, 0x0F	; 15
    2280:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <_ZN12OrangutanLCD8sendDataEh>
    2284:	8c 2f       	mov	r24, r28
    2286:	8f 70       	andi	r24, 0x0F	; 15
    2288:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <_ZN12OrangutanLCD8sendDataEh>
    228c:	fa b8       	out	0x0a, r15	; 10
    228e:	0b b9       	out	0x0b, r16	; 11
    2290:	14 b9       	out	0x04, r17	; 4
    2292:	d5 b9       	out	0x05, r29	; 5
    2294:	cd b7       	in	r28, 0x3d	; 61
    2296:	de b7       	in	r29, 0x3e	; 62
    2298:	e7 e0       	ldi	r30, 0x07	; 7
    229a:	0c 94 90 17 	jmp	0x2f20	; 0x2f20 <__epilogue_restores__+0x16>

0000229e <_ZN12OrangutanLCD8send_cmdEh>:
    229e:	42 e0       	ldi	r20, 0x02	; 2
    22a0:	60 e0       	ldi	r22, 0x00	; 0
    22a2:	0e 94 18 11 	call	0x2230	; 0x2230 <_ZN12OrangutanLCD4sendEhhh>
    22a6:	08 95       	ret

000022a8 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    22a8:	41 e0       	ldi	r20, 0x01	; 1
    22aa:	60 e0       	ldi	r22, 0x00	; 0
    22ac:	0e 94 18 11 	call	0x2230	; 0x2230 <_ZN12OrangutanLCD4sendEhhh>
    22b0:	08 95       	ret

000022b2 <_ZN12OrangutanLCD5init2Ev>:
    22b2:	80 e1       	ldi	r24, 0x10	; 16
    22b4:	97 e2       	ldi	r25, 0x27	; 39
    22b6:	a0 e0       	ldi	r26, 0x00	; 0
    22b8:	b0 e0       	ldi	r27, 0x00	; 0
    22ba:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <lcdTimeout>
    22be:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <lcdTimeout+0x1>
    22c2:	a0 93 35 01 	sts	0x0135, r26	; 0x800135 <lcdTimeout+0x2>
    22c6:	b0 93 36 01 	sts	0x0136, r27	; 0x800136 <lcdTimeout+0x3>
    22ca:	52 9a       	sbi	0x0a, 2	; 10
    22cc:	20 9a       	sbi	0x04, 0	; 4
    22ce:	54 9a       	sbi	0x0a, 4	; 10
    22d0:	8e e1       	ldi	r24, 0x1E	; 30
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	0e 94 75 13 	call	0x26ea	; 0x26ea <delay_ms>
    22d8:	83 e0       	ldi	r24, 0x03	; 3
    22da:	0e 94 54 11 	call	0x22a8	; 0x22a8 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    22de:	86 e0       	ldi	r24, 0x06	; 6
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	0e 94 75 13 	call	0x26ea	; 0x26ea <delay_ms>
    22e6:	83 e0       	ldi	r24, 0x03	; 3
    22e8:	0e 94 54 11 	call	0x22a8	; 0x22a8 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    22ec:	82 e0       	ldi	r24, 0x02	; 2
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	0e 94 75 13 	call	0x26ea	; 0x26ea <delay_ms>
    22f4:	83 e0       	ldi	r24, 0x03	; 3
    22f6:	0e 94 54 11 	call	0x22a8	; 0x22a8 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    22fa:	82 e0       	ldi	r24, 0x02	; 2
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	0e 94 75 13 	call	0x26ea	; 0x26ea <delay_ms>
    2302:	82 e0       	ldi	r24, 0x02	; 2
    2304:	0e 94 54 11 	call	0x22a8	; 0x22a8 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2308:	82 e0       	ldi	r24, 0x02	; 2
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	0e 94 75 13 	call	0x26ea	; 0x26ea <delay_ms>
    2310:	88 e2       	ldi	r24, 0x28	; 40
    2312:	0e 94 4f 11 	call	0x229e	; 0x229e <_ZN12OrangutanLCD8send_cmdEh>
    2316:	88 e0       	ldi	r24, 0x08	; 8
    2318:	0e 94 4f 11 	call	0x229e	; 0x229e <_ZN12OrangutanLCD8send_cmdEh>
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	0e 94 4f 11 	call	0x229e	; 0x229e <_ZN12OrangutanLCD8send_cmdEh>
    2322:	86 e0       	ldi	r24, 0x06	; 6
    2324:	0e 94 4f 11 	call	0x229e	; 0x229e <_ZN12OrangutanLCD8send_cmdEh>
    2328:	8c e0       	ldi	r24, 0x0C	; 12
    232a:	0e 94 4f 11 	call	0x229e	; 0x229e <_ZN12OrangutanLCD8send_cmdEh>
    232e:	08 95       	ret

00002330 <_ZN12OrangutanLCD5clearEv>:
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	0e 94 4f 11 	call	0x229e	; 0x229e <_ZN12OrangutanLCD8send_cmdEh>
    2336:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <printf_chars>
    233a:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <printf_chars+0x1>
    233e:	89 2b       	or	r24, r25
    2340:	f9 f0       	breq	.+62     	; 0x2380 <_ZN12OrangutanLCD5clearEv+0x50>
    2342:	60 e0       	ldi	r22, 0x00	; 0
    2344:	a0 e2       	ldi	r26, 0x20	; 32
    2346:	26 2f       	mov	r18, r22
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <numLCDCols>
    234e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <numLCDRows>
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	01 97       	sbiw	r24, 0x01	; 1
    2356:	78 9f       	mul	r23, r24
    2358:	a0 01       	movw	r20, r0
    235a:	79 9f       	mul	r23, r25
    235c:	50 0d       	add	r21, r0
    235e:	11 24       	eor	r1, r1
    2360:	24 17       	cp	r18, r20
    2362:	35 07       	cpc	r19, r21
    2364:	4c f4       	brge	.+18     	; 0x2378 <_ZN12OrangutanLCD5clearEv+0x48>
    2366:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <printf_chars>
    236a:	f0 91 3a 01 	lds	r31, 0x013A	; 0x80013a <printf_chars+0x1>
    236e:	e2 0f       	add	r30, r18
    2370:	f3 1f       	adc	r31, r19
    2372:	a0 83       	st	Z, r26
    2374:	6f 5f       	subi	r22, 0xFF	; 255
    2376:	e7 cf       	rjmp	.-50     	; 0x2346 <_ZN12OrangutanLCD5clearEv+0x16>
    2378:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <col>
    237c:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <row>
    2380:	08 95       	ret

00002382 <clear>:
    2382:	0e 94 98 11 	call	0x2330	; 0x2330 <_ZN12OrangutanLCD5clearEv>
    2386:	08 95       	ret

00002388 <_ZN16OrangutanDigital9setOutputEhh>:
    2388:	88 30       	cpi	r24, 0x08	; 8
    238a:	58 f4       	brcc	.+22     	; 0x23a2 <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    238c:	91 e0       	ldi	r25, 0x01	; 1
    238e:	01 c0       	rjmp	.+2      	; 0x2392 <_ZN16OrangutanDigital9setOutputEhh+0xa>
    2390:	99 0f       	add	r25, r25
    2392:	8a 95       	dec	r24
    2394:	ea f7       	brpl	.-6      	; 0x2390 <_ZN16OrangutanDigital9setOutputEhh+0x8>
    2396:	89 2f       	mov	r24, r25
    2398:	aa e2       	ldi	r26, 0x2A	; 42
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	eb e2       	ldi	r30, 0x2B	; 43
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	21 c0       	rjmp	.+66     	; 0x23e4 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    23a2:	8e 30       	cpi	r24, 0x0E	; 14
    23a4:	60 f4       	brcc	.+24     	; 0x23be <_ZN16OrangutanDigital9setOutputEhh+0x36>
    23a6:	98 ef       	ldi	r25, 0xF8	; 248
    23a8:	98 0f       	add	r25, r24
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	01 c0       	rjmp	.+2      	; 0x23b0 <_ZN16OrangutanDigital9setOutputEhh+0x28>
    23ae:	88 0f       	add	r24, r24
    23b0:	9a 95       	dec	r25
    23b2:	ea f7       	brpl	.-6      	; 0x23ae <_ZN16OrangutanDigital9setOutputEhh+0x26>
    23b4:	a4 e2       	ldi	r26, 0x24	; 36
    23b6:	b0 e0       	ldi	r27, 0x00	; 0
    23b8:	e5 e2       	ldi	r30, 0x25	; 37
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	13 c0       	rjmp	.+38     	; 0x23e4 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    23be:	85 31       	cpi	r24, 0x15	; 21
    23c0:	60 f4       	brcc	.+24     	; 0x23da <_ZN16OrangutanDigital9setOutputEhh+0x52>
    23c2:	92 ef       	ldi	r25, 0xF2	; 242
    23c4:	98 0f       	add	r25, r24
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	01 c0       	rjmp	.+2      	; 0x23cc <_ZN16OrangutanDigital9setOutputEhh+0x44>
    23ca:	88 0f       	add	r24, r24
    23cc:	9a 95       	dec	r25
    23ce:	ea f7       	brpl	.-6      	; 0x23ca <_ZN16OrangutanDigital9setOutputEhh+0x42>
    23d0:	a7 e2       	ldi	r26, 0x27	; 39
    23d2:	b0 e0       	ldi	r27, 0x00	; 0
    23d4:	e8 e2       	ldi	r30, 0x28	; 40
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	05 c0       	rjmp	.+10     	; 0x23e4 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    23da:	80 e0       	ldi	r24, 0x00	; 0
    23dc:	a0 e0       	ldi	r26, 0x00	; 0
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	e0 e0       	ldi	r30, 0x00	; 0
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	6f 3f       	cpi	r22, 0xFF	; 255
    23e6:	19 f4       	brne	.+6      	; 0x23ee <_ZN16OrangutanDigital9setOutputEhh+0x66>
    23e8:	90 81       	ld	r25, Z
    23ea:	98 27       	eor	r25, r24
    23ec:	09 c0       	rjmp	.+18     	; 0x2400 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    23ee:	66 23       	and	r22, r22
    23f0:	19 f0       	breq	.+6      	; 0x23f8 <_ZN16OrangutanDigital9setOutputEhh+0x70>
    23f2:	90 81       	ld	r25, Z
    23f4:	98 2b       	or	r25, r24
    23f6:	04 c0       	rjmp	.+8      	; 0x2400 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    23f8:	20 81       	ld	r18, Z
    23fa:	98 2f       	mov	r25, r24
    23fc:	90 95       	com	r25
    23fe:	92 23       	and	r25, r18
    2400:	90 83       	st	Z, r25
    2402:	9c 91       	ld	r25, X
    2404:	98 2b       	or	r25, r24
    2406:	9c 93       	st	X, r25
    2408:	08 95       	ret

0000240a <_ZN15OrangutanMotors5init2Ev>:
    240a:	83 ef       	ldi	r24, 0xF3	; 243
    240c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2410:	84 bd       	out	0x24, r24	; 36
    2412:	82 e0       	ldi	r24, 0x02	; 2
    2414:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2418:	85 bd       	out	0x25, r24	; 37
    241a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    241e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    2422:	18 bc       	out	0x28, r1	; 40
    2424:	17 bc       	out	0x27, r1	; 39
    2426:	60 e0       	ldi	r22, 0x00	; 0
    2428:	86 e0       	ldi	r24, 0x06	; 6
    242a:	0e 94 c4 11 	call	0x2388	; 0x2388 <_ZN16OrangutanDigital9setOutputEhh>
    242e:	60 e0       	ldi	r22, 0x00	; 0
    2430:	85 e0       	ldi	r24, 0x05	; 5
    2432:	0e 94 c4 11 	call	0x2388	; 0x2388 <_ZN16OrangutanDigital9setOutputEhh>
    2436:	60 e0       	ldi	r22, 0x00	; 0
    2438:	8b e0       	ldi	r24, 0x0B	; 11
    243a:	0e 94 c4 11 	call	0x2388	; 0x2388 <_ZN16OrangutanDigital9setOutputEhh>
    243e:	60 e0       	ldi	r22, 0x00	; 0
    2440:	83 e0       	ldi	r24, 0x03	; 3
    2442:	0e 94 c4 11 	call	0x2388	; 0x2388 <_ZN16OrangutanDigital9setOutputEhh>
    2446:	08 95       	ret

00002448 <_ZN15OrangutanMotors4initEv>:
    2448:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <_ZZN15OrangutanMotors4initEvE11initialized>
    244c:	81 11       	cpse	r24, r1
    244e:	05 c0       	rjmp	.+10     	; 0x245a <_ZN15OrangutanMotors4initEv+0x12>
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <_ZZN15OrangutanMotors4initEvE11initialized>
    2456:	0e 94 05 12 	call	0x240a	; 0x240a <_ZN15OrangutanMotors5init2Ev>
    245a:	08 95       	ret

0000245c <_ZN15OrangutanMotors10setM1SpeedEi>:
    245c:	cf 93       	push	r28
    245e:	df 93       	push	r29
    2460:	ec 01       	movw	r28, r24
    2462:	0e 94 24 12 	call	0x2448	; 0x2448 <_ZN15OrangutanMotors4initEv>
    2466:	d7 ff       	sbrs	r29, 7
    2468:	05 c0       	rjmp	.+10     	; 0x2474 <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    246a:	d1 95       	neg	r29
    246c:	c1 95       	neg	r28
    246e:	d1 09       	sbc	r29, r1
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	01 c0       	rjmp	.+2      	; 0x2476 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    2474:	80 e0       	ldi	r24, 0x00	; 0
    2476:	cf 3f       	cpi	r28, 0xFF	; 255
    2478:	d1 05       	cpc	r29, r1
    247a:	19 f0       	breq	.+6      	; 0x2482 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    247c:	14 f0       	brlt	.+4      	; 0x2482 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    247e:	cf ef       	ldi	r28, 0xFF	; 255
    2480:	d0 e0       	ldi	r29, 0x00	; 0
    2482:	88 23       	and	r24, r24
    2484:	19 f0       	breq	.+6      	; 0x248c <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    2486:	18 bc       	out	0x28, r1	; 40
    2488:	c7 bd       	out	0x27, r28	; 39
    248a:	02 c0       	rjmp	.+4      	; 0x2490 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    248c:	c8 bd       	out	0x28, r28	; 40
    248e:	17 bc       	out	0x27, r1	; 39
    2490:	df 91       	pop	r29
    2492:	cf 91       	pop	r28
    2494:	08 95       	ret

00002496 <_ZN15OrangutanMotors10setM2SpeedEi>:
    2496:	cf 93       	push	r28
    2498:	df 93       	push	r29
    249a:	ec 01       	movw	r28, r24
    249c:	0e 94 24 12 	call	0x2448	; 0x2448 <_ZN15OrangutanMotors4initEv>
    24a0:	d7 ff       	sbrs	r29, 7
    24a2:	05 c0       	rjmp	.+10     	; 0x24ae <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    24a4:	d1 95       	neg	r29
    24a6:	c1 95       	neg	r28
    24a8:	d1 09       	sbc	r29, r1
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	01 c0       	rjmp	.+2      	; 0x24b0 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	cf 3f       	cpi	r28, 0xFF	; 255
    24b2:	d1 05       	cpc	r29, r1
    24b4:	19 f0       	breq	.+6      	; 0x24bc <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    24b6:	14 f0       	brlt	.+4      	; 0x24bc <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    24b8:	cf ef       	ldi	r28, 0xFF	; 255
    24ba:	d0 e0       	ldi	r29, 0x00	; 0
    24bc:	88 23       	and	r24, r24
    24be:	29 f0       	breq	.+10     	; 0x24ca <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    24c0:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    24c4:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    24c8:	04 c0       	rjmp	.+8      	; 0x24d2 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    24ca:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    24ce:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    24d2:	df 91       	pop	r29
    24d4:	cf 91       	pop	r28
    24d6:	08 95       	ret

000024d8 <_ZN15OrangutanMotors9setSpeedsEii>:
    24d8:	cf 93       	push	r28
    24da:	df 93       	push	r29
    24dc:	eb 01       	movw	r28, r22
    24de:	0e 94 2e 12 	call	0x245c	; 0x245c <_ZN15OrangutanMotors10setM1SpeedEi>
    24e2:	ce 01       	movw	r24, r28
    24e4:	0e 94 4b 12 	call	0x2496	; 0x2496 <_ZN15OrangutanMotors10setM2SpeedEi>
    24e8:	df 91       	pop	r29
    24ea:	cf 91       	pop	r28
    24ec:	08 95       	ret

000024ee <set_motors>:
    24ee:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <_ZN15OrangutanMotors9setSpeedsEii>
    24f2:	08 95       	ret

000024f4 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>:
    24f4:	28 2f       	mov	r18, r24
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	9a e0       	ldi	r25, 0x0A	; 10
    24fa:	89 9f       	mul	r24, r25
    24fc:	f0 01       	movw	r30, r0
    24fe:	11 24       	eor	r1, r1
    2500:	e5 5c       	subi	r30, 0xC5	; 197
    2502:	fe 4f       	sbci	r31, 0xFE	; 254
    2504:	80 85       	ldd	r24, Z+8	; 0x08
    2506:	91 85       	ldd	r25, Z+9	; 0x09
    2508:	00 97       	sbiw	r24, 0x00	; 0
    250a:	21 f0       	breq	.+8      	; 0x2514 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    250c:	52 81       	ldd	r21, Z+2	; 0x02
    250e:	44 81       	ldd	r20, Z+4	; 0x04
    2510:	54 17       	cp	r21, r20
    2512:	80 f0       	brcs	.+32     	; 0x2534 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x40>
    2514:	8a e0       	ldi	r24, 0x0A	; 10
    2516:	82 9f       	mul	r24, r18
    2518:	f0 01       	movw	r30, r0
    251a:	83 9f       	mul	r24, r19
    251c:	f0 0d       	add	r31, r0
    251e:	11 24       	eor	r1, r1
    2520:	e5 5c       	subi	r30, 0xC5	; 197
    2522:	fe 4f       	sbci	r31, 0xFE	; 254
    2524:	92 81       	ldd	r25, Z+2	; 0x02
    2526:	84 81       	ldd	r24, Z+4	; 0x04
    2528:	98 13       	cpse	r25, r24
    252a:	0e c0       	rjmp	.+28     	; 0x2548 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x54>
    252c:	85 81       	ldd	r24, Z+5	; 0x05
    252e:	81 11       	cpse	r24, r1
    2530:	0a c0       	rjmp	.+20     	; 0x2546 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x52>
    2532:	08 95       	ret
    2534:	42 81       	ldd	r20, Z+2	; 0x02
    2536:	dc 01       	movw	r26, r24
    2538:	a4 0f       	add	r26, r20
    253a:	b1 1d       	adc	r27, r1
    253c:	6c 93       	st	X, r22
    253e:	82 81       	ldd	r24, Z+2	; 0x02
    2540:	8f 5f       	subi	r24, 0xFF	; 255
    2542:	82 83       	std	Z+2, r24	; 0x02
    2544:	e7 cf       	rjmp	.-50     	; 0x2514 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    2546:	12 82       	std	Z+2, r1	; 0x02
    2548:	08 95       	ret

0000254a <__vector_18>:
    254a:	1f 92       	push	r1
    254c:	0f 92       	push	r0
    254e:	0f b6       	in	r0, 0x3f	; 63
    2550:	0f 92       	push	r0
    2552:	11 24       	eor	r1, r1
    2554:	2f 93       	push	r18
    2556:	3f 93       	push	r19
    2558:	4f 93       	push	r20
    255a:	5f 93       	push	r21
    255c:	6f 93       	push	r22
    255e:	7f 93       	push	r23
    2560:	8f 93       	push	r24
    2562:	9f 93       	push	r25
    2564:	af 93       	push	r26
    2566:	bf 93       	push	r27
    2568:	ef 93       	push	r30
    256a:	ff 93       	push	r31
    256c:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>
    2576:	ff 91       	pop	r31
    2578:	ef 91       	pop	r30
    257a:	bf 91       	pop	r27
    257c:	af 91       	pop	r26
    257e:	9f 91       	pop	r25
    2580:	8f 91       	pop	r24
    2582:	7f 91       	pop	r23
    2584:	6f 91       	pop	r22
    2586:	5f 91       	pop	r21
    2588:	4f 91       	pop	r20
    258a:	3f 91       	pop	r19
    258c:	2f 91       	pop	r18
    258e:	0f 90       	pop	r0
    2590:	0f be       	out	0x3f, r0	; 63
    2592:	0f 90       	pop	r0
    2594:	1f 90       	pop	r1
    2596:	18 95       	reti

00002598 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>:
    2598:	9a e0       	ldi	r25, 0x0A	; 10
    259a:	89 9f       	mul	r24, r25
    259c:	f0 01       	movw	r30, r0
    259e:	11 24       	eor	r1, r1
    25a0:	e5 5c       	subi	r30, 0xC5	; 197
    25a2:	fe 4f       	sbci	r31, 0xFE	; 254
    25a4:	86 81       	ldd	r24, Z+6	; 0x06
    25a6:	97 81       	ldd	r25, Z+7	; 0x07
    25a8:	89 2b       	or	r24, r25
    25aa:	59 f0       	breq	.+22     	; 0x25c2 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    25ac:	91 81       	ldd	r25, Z+1	; 0x01
    25ae:	83 81       	ldd	r24, Z+3	; 0x03
    25b0:	98 17       	cp	r25, r24
    25b2:	38 f4       	brcc	.+14     	; 0x25c2 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    25b4:	80 81       	ld	r24, Z
    25b6:	81 11       	cpse	r24, r1
    25b8:	04 c0       	rjmp	.+8      	; 0x25c2 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    25ba:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    25be:	80 62       	ori	r24, 0x20	; 32
    25c0:	03 c0       	rjmp	.+6      	; 0x25c8 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x30>
    25c2:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    25c6:	8f 7d       	andi	r24, 0xDF	; 223
    25c8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    25cc:	08 95       	ret

000025ce <_ZN15OrangutanSerial11uart_tx_isrEh>:
    25ce:	9a e0       	ldi	r25, 0x0A	; 10
    25d0:	89 9f       	mul	r24, r25
    25d2:	f0 01       	movw	r30, r0
    25d4:	11 24       	eor	r1, r1
    25d6:	e5 5c       	subi	r30, 0xC5	; 197
    25d8:	fe 4f       	sbci	r31, 0xFE	; 254
    25da:	26 81       	ldd	r18, Z+6	; 0x06
    25dc:	37 81       	ldd	r19, Z+7	; 0x07
    25de:	21 15       	cp	r18, r1
    25e0:	31 05       	cpc	r19, r1
    25e2:	41 f0       	breq	.+16     	; 0x25f4 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    25e4:	41 81       	ldd	r20, Z+1	; 0x01
    25e6:	93 81       	ldd	r25, Z+3	; 0x03
    25e8:	49 17       	cp	r20, r25
    25ea:	20 f4       	brcc	.+8      	; 0x25f4 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    25ec:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    25f0:	95 fd       	sbrc	r25, 5
    25f2:	03 c0       	rjmp	.+6      	; 0x25fa <_ZN15OrangutanSerial11uart_tx_isrEh+0x2c>
    25f4:	0e 94 cc 12 	call	0x2598	; 0x2598 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    25f8:	08 95       	ret
    25fa:	91 81       	ldd	r25, Z+1	; 0x01
    25fc:	d9 01       	movw	r26, r18
    25fe:	a9 0f       	add	r26, r25
    2600:	b1 1d       	adc	r27, r1
    2602:	9c 91       	ld	r25, X
    2604:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    2608:	91 81       	ldd	r25, Z+1	; 0x01
    260a:	9f 5f       	subi	r25, 0xFF	; 255
    260c:	91 83       	std	Z+1, r25	; 0x01
    260e:	f2 cf       	rjmp	.-28     	; 0x25f4 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>

00002610 <__vector_19>:
    2610:	1f 92       	push	r1
    2612:	0f 92       	push	r0
    2614:	0f b6       	in	r0, 0x3f	; 63
    2616:	0f 92       	push	r0
    2618:	11 24       	eor	r1, r1
    261a:	2f 93       	push	r18
    261c:	3f 93       	push	r19
    261e:	4f 93       	push	r20
    2620:	5f 93       	push	r21
    2622:	6f 93       	push	r22
    2624:	7f 93       	push	r23
    2626:	8f 93       	push	r24
    2628:	9f 93       	push	r25
    262a:	af 93       	push	r26
    262c:	bf 93       	push	r27
    262e:	ef 93       	push	r30
    2630:	ff 93       	push	r31
    2632:	80 e0       	ldi	r24, 0x00	; 0
    2634:	0e 94 e7 12 	call	0x25ce	; 0x25ce <_ZN15OrangutanSerial11uart_tx_isrEh>
    2638:	ff 91       	pop	r31
    263a:	ef 91       	pop	r30
    263c:	bf 91       	pop	r27
    263e:	af 91       	pop	r26
    2640:	9f 91       	pop	r25
    2642:	8f 91       	pop	r24
    2644:	7f 91       	pop	r23
    2646:	6f 91       	pop	r22
    2648:	5f 91       	pop	r21
    264a:	4f 91       	pop	r20
    264c:	3f 91       	pop	r19
    264e:	2f 91       	pop	r18
    2650:	0f 90       	pop	r0
    2652:	0f be       	out	0x3f, r0	; 63
    2654:	0f 90       	pop	r0
    2656:	1f 90       	pop	r1
    2658:	18 95       	reti

0000265a <__vector_9>:
    265a:	2f 92       	push	r2
    265c:	8f 93       	push	r24
    265e:	9f 93       	push	r25
    2660:	2f b6       	in	r2, 0x3f	; 63
    2662:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <tickCount+0x1>
    2666:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <tickCount+0x2>
    266a:	01 96       	adiw	r24, 0x01	; 1
    266c:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <tickCount+0x1>
    2670:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <tickCount+0x2>
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <tickCount+0x3>
    267a:	89 1f       	adc	r24, r25
    267c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <tickCount+0x3>
    2680:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <us_over_10+0x1>
    2684:	9c 5f       	subi	r25, 0xFC	; 252
    2686:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <us_over_10+0x1>
    268a:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <us_over_10>
    268e:	80 51       	subi	r24, 0x10	; 16
    2690:	97 42       	sbci	r25, 0x27	; 39
    2692:	c0 f0       	brcs	.+48     	; 0x26c4 <end>
    2694:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <us_over_10+0x1>
    2698:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <us_over_10>
    269c:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <msCounter>
    26a0:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <msCounter+0x1>
    26a4:	01 96       	adiw	r24, 0x01	; 1
    26a6:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <msCounter>
    26aa:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <msCounter+0x1>
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <msCounter+0x2>
    26b4:	89 1f       	adc	r24, r25
    26b6:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <msCounter+0x2>
    26ba:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <msCounter+0x3>
    26be:	89 1f       	adc	r24, r25
    26c0:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <msCounter+0x3>

000026c4 <end>:
    26c4:	2f be       	out	0x3f, r2	; 63
    26c6:	9f 91       	pop	r25
    26c8:	8f 91       	pop	r24
    26ca:	2f 90       	pop	r2
    26cc:	18 95       	reti

000026ce <_ZN13OrangutanTime17delayMillisecondsEj>:
    26ce:	28 ee       	ldi	r18, 0xE8	; 232
    26d0:	33 e0       	ldi	r19, 0x03	; 3
    26d2:	01 97       	sbiw	r24, 0x01	; 1
    26d4:	48 f0       	brcs	.+18     	; 0x26e8 <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    26d6:	f9 01       	movw	r30, r18
    26d8:	6f 93       	push	r22
    26da:	64 e0       	ldi	r22, 0x04	; 4
    26dc:	6a 95       	dec	r22
    26de:	f1 f7       	brne	.-4      	; 0x26dc <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    26e0:	6f 91       	pop	r22
    26e2:	31 97       	sbiw	r30, 0x01	; 1
    26e4:	c9 f7       	brne	.-14     	; 0x26d8 <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    26e6:	f5 cf       	rjmp	.-22     	; 0x26d2 <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    26e8:	08 95       	ret

000026ea <delay_ms>:
    26ea:	0e 94 67 13 	call	0x26ce	; 0x26ce <_ZN13OrangutanTime17delayMillisecondsEj>
    26ee:	08 95       	ret

000026f0 <_ZN13OrangutanTime5init2Ev>:
    26f0:	e0 e7       	ldi	r30, 0x70	; 112
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	80 81       	ld	r24, Z
    26f6:	8e 7f       	andi	r24, 0xFE	; 254
    26f8:	80 83       	st	Z, r24
    26fa:	a0 eb       	ldi	r26, 0xB0	; 176
    26fc:	b0 e0       	ldi	r27, 0x00	; 0
    26fe:	8c 91       	ld	r24, X
    2700:	83 60       	ori	r24, 0x03	; 3
    2702:	8c 93       	st	X, r24
    2704:	a1 eb       	ldi	r26, 0xB1	; 177
    2706:	b0 e0       	ldi	r27, 0x00	; 0
    2708:	8c 91       	ld	r24, X
    270a:	80 7f       	andi	r24, 0xF0	; 240
    270c:	8c 93       	st	X, r24
    270e:	8c 91       	ld	r24, X
    2710:	82 60       	ori	r24, 0x02	; 2
    2712:	8c 93       	st	X, r24
    2714:	b8 9a       	sbi	0x17, 0	; 23
    2716:	80 81       	ld	r24, Z
    2718:	81 60       	ori	r24, 0x01	; 1
    271a:	80 83       	st	Z, r24
    271c:	78 94       	sei
    271e:	08 95       	ret

00002720 <_ZN13OrangutanTime4initEv>:
    2720:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <_ZZN13OrangutanTime4initEvE11initialized>
    2724:	81 11       	cpse	r24, r1
    2726:	05 c0       	rjmp	.+10     	; 0x2732 <_ZN13OrangutanTime4initEv+0x12>
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <_ZZN13OrangutanTime4initEvE11initialized>
    272e:	0e 94 78 13 	call	0x26f0	; 0x26f0 <_ZN13OrangutanTime5init2Ev>
    2732:	08 95       	ret

00002734 <_ZN13OrangutanTime2msEv>:
    2734:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZN13OrangutanTime4initEv>
    2738:	e0 e7       	ldi	r30, 0x70	; 112
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	80 81       	ld	r24, Z
    273e:	8e 7f       	andi	r24, 0xFE	; 254
    2740:	80 83       	st	Z, r24
    2742:	60 91 47 01 	lds	r22, 0x0147	; 0x800147 <msCounter>
    2746:	70 91 48 01 	lds	r23, 0x0148	; 0x800148 <msCounter+0x1>
    274a:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <msCounter+0x2>
    274e:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <msCounter+0x3>
    2752:	20 81       	ld	r18, Z
    2754:	21 60       	ori	r18, 0x01	; 1
    2756:	20 83       	st	Z, r18
    2758:	08 95       	ret

0000275a <get_ms>:
    275a:	0e 94 9a 13 	call	0x2734	; 0x2734 <_ZN13OrangutanTime2msEv>
    275e:	08 95       	ret

00002760 <read_line>:
    2760:	46 2f       	mov	r20, r22
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	bc 01       	movw	r22, r24
    2766:	8f e4       	ldi	r24, 0x4F	; 79
    2768:	91 e0       	ldi	r25, 0x01	; 1
    276a:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <_ZN16PololuQTRSensors8readLineEPjhh>
    276e:	08 95       	ret

00002770 <_GLOBAL__sub_D_pololu_3pi_init>:
    2770:	8f e4       	ldi	r24, 0x4F	; 79
    2772:	91 e0       	ldi	r25, 0x01	; 1
    2774:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <_ZN16PololuQTRSensorsD1Ev>
    2778:	08 95       	ret

0000277a <delay_us>:
    277a:	6f 93       	push	r22
    277c:	64 e0       	ldi	r22, 0x04	; 4
    277e:	6a 95       	dec	r22
    2780:	f1 f7       	brne	.-4      	; 0x277e <delay_us+0x4>
    2782:	6f 91       	pop	r22
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	c9 f7       	brne	.-14     	; 0x277a <delay_us>
    2788:	08 95       	ret

0000278a <_ZN16PololuQTRSensors11emittersOffEv>:
    278a:	fc 01       	movw	r30, r24
    278c:	a4 85       	ldd	r26, Z+12	; 0x0c
    278e:	b5 85       	ldd	r27, Z+13	; 0x0d
    2790:	10 97       	sbiw	r26, 0x00	; 0
    2792:	79 f0       	breq	.+30     	; 0x27b2 <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    2794:	8c 91       	ld	r24, X
    2796:	91 85       	ldd	r25, Z+9	; 0x09
    2798:	89 2b       	or	r24, r25
    279a:	8c 93       	st	X, r24
    279c:	a2 85       	ldd	r26, Z+10	; 0x0a
    279e:	b3 85       	ldd	r27, Z+11	; 0x0b
    27a0:	9c 91       	ld	r25, X
    27a2:	81 85       	ldd	r24, Z+9	; 0x09
    27a4:	80 95       	com	r24
    27a6:	89 23       	and	r24, r25
    27a8:	8c 93       	st	X, r24
    27aa:	88 ec       	ldi	r24, 0xC8	; 200
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	0e 94 bd 13 	call	0x277a	; 0x277a <delay_us>
    27b2:	08 95       	ret

000027b4 <_ZN16PololuQTRSensors10emittersOnEv>:
    27b4:	fc 01       	movw	r30, r24
    27b6:	a4 85       	ldd	r26, Z+12	; 0x0c
    27b8:	b5 85       	ldd	r27, Z+13	; 0x0d
    27ba:	10 97       	sbiw	r26, 0x00	; 0
    27bc:	71 f0       	breq	.+28     	; 0x27da <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    27be:	8c 91       	ld	r24, X
    27c0:	91 85       	ldd	r25, Z+9	; 0x09
    27c2:	89 2b       	or	r24, r25
    27c4:	8c 93       	st	X, r24
    27c6:	a2 85       	ldd	r26, Z+10	; 0x0a
    27c8:	b3 85       	ldd	r27, Z+11	; 0x0b
    27ca:	8c 91       	ld	r24, X
    27cc:	91 85       	ldd	r25, Z+9	; 0x09
    27ce:	89 2b       	or	r24, r25
    27d0:	8c 93       	st	X, r24
    27d2:	88 ec       	ldi	r24, 0xC8	; 200
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	0e 94 bd 13 	call	0x277a	; 0x277a <delay_us>
    27da:	08 95       	ret

000027dc <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    27dc:	a0 e0       	ldi	r26, 0x00	; 0
    27de:	b0 e0       	ldi	r27, 0x00	; 0
    27e0:	e4 ef       	ldi	r30, 0xF4	; 244
    27e2:	f3 e1       	ldi	r31, 0x13	; 19
    27e4:	0c 94 6e 17 	jmp	0x2edc	; 0x2edc <__prologue_saves__+0xa>
    27e8:	ec 01       	movw	r28, r24
    27ea:	5b 01       	movw	r10, r22
    27ec:	6c 01       	movw	r12, r24
    27ee:	81 e4       	ldi	r24, 0x41	; 65
    27f0:	c8 0e       	add	r12, r24
    27f2:	d1 1c       	adc	r13, r1
    27f4:	f6 01       	movw	r30, r12
    27f6:	80 80       	ld	r8, Z
    27f8:	7e 01       	movw	r14, r28
    27fa:	f2 e4       	ldi	r31, 0x42	; 66
    27fc:	ef 0e       	add	r14, r31
    27fe:	f1 1c       	adc	r15, r1
    2800:	f7 01       	movw	r30, r14
    2802:	70 80       	ld	r7, Z
    2804:	8e 01       	movw	r16, r28
    2806:	0d 5b       	subi	r16, 0xBD	; 189
    2808:	1f 4f       	sbci	r17, 0xFF	; 255
    280a:	f8 01       	movw	r30, r16
    280c:	90 80       	ld	r9, Z
    280e:	80 e0       	ldi	r24, 0x00	; 0
    2810:	98 85       	ldd	r25, Y+8	; 0x08
    2812:	89 17       	cp	r24, r25
    2814:	48 f4       	brcc	.+18     	; 0x2828 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    2816:	f5 01       	movw	r30, r10
    2818:	e8 0f       	add	r30, r24
    281a:	f1 1d       	adc	r31, r1
    281c:	e8 0f       	add	r30, r24
    281e:	f1 1d       	adc	r31, r1
    2820:	11 82       	std	Z+1, r1	; 0x01
    2822:	10 82       	st	Z, r1
    2824:	8f 5f       	subi	r24, 0xFF	; 255
    2826:	f4 cf       	rjmp	.-24     	; 0x2810 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    2828:	84 b1       	in	r24, 0x04	; 4
    282a:	f6 01       	movw	r30, r12
    282c:	90 81       	ld	r25, Z
    282e:	89 2b       	or	r24, r25
    2830:	84 b9       	out	0x04, r24	; 4
    2832:	87 b1       	in	r24, 0x07	; 7
    2834:	f7 01       	movw	r30, r14
    2836:	90 81       	ld	r25, Z
    2838:	89 2b       	or	r24, r25
    283a:	87 b9       	out	0x07, r24	; 7
    283c:	8a b1       	in	r24, 0x0a	; 10
    283e:	f8 01       	movw	r30, r16
    2840:	90 81       	ld	r25, Z
    2842:	89 2b       	or	r24, r25
    2844:	8a b9       	out	0x0a, r24	; 10
    2846:	85 b1       	in	r24, 0x05	; 5
    2848:	f6 01       	movw	r30, r12
    284a:	90 81       	ld	r25, Z
    284c:	89 2b       	or	r24, r25
    284e:	85 b9       	out	0x05, r24	; 5
    2850:	88 b1       	in	r24, 0x08	; 8
    2852:	f7 01       	movw	r30, r14
    2854:	90 81       	ld	r25, Z
    2856:	89 2b       	or	r24, r25
    2858:	88 b9       	out	0x08, r24	; 8
    285a:	8b b1       	in	r24, 0x0b	; 11
    285c:	f8 01       	movw	r30, r16
    285e:	90 81       	ld	r25, Z
    2860:	89 2b       	or	r24, r25
    2862:	8b b9       	out	0x0b, r24	; 11
    2864:	8a e0       	ldi	r24, 0x0A	; 10
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	0e 94 bd 13 	call	0x277a	; 0x277a <delay_us>
    286c:	94 b1       	in	r25, 0x04	; 4
    286e:	f6 01       	movw	r30, r12
    2870:	80 81       	ld	r24, Z
    2872:	80 95       	com	r24
    2874:	89 23       	and	r24, r25
    2876:	84 b9       	out	0x04, r24	; 4
    2878:	97 b1       	in	r25, 0x07	; 7
    287a:	f7 01       	movw	r30, r14
    287c:	80 81       	ld	r24, Z
    287e:	80 95       	com	r24
    2880:	89 23       	and	r24, r25
    2882:	87 b9       	out	0x07, r24	; 7
    2884:	9a b1       	in	r25, 0x0a	; 10
    2886:	f8 01       	movw	r30, r16
    2888:	80 81       	ld	r24, Z
    288a:	80 95       	com	r24
    288c:	89 23       	and	r24, r25
    288e:	8a b9       	out	0x0a, r24	; 10
    2890:	95 b1       	in	r25, 0x05	; 5
    2892:	f6 01       	movw	r30, r12
    2894:	80 81       	ld	r24, Z
    2896:	80 95       	com	r24
    2898:	89 23       	and	r24, r25
    289a:	85 b9       	out	0x05, r24	; 5
    289c:	98 b1       	in	r25, 0x08	; 8
    289e:	f7 01       	movw	r30, r14
    28a0:	80 81       	ld	r24, Z
    28a2:	80 95       	com	r24
    28a4:	89 23       	and	r24, r25
    28a6:	88 b9       	out	0x08, r24	; 8
    28a8:	9b b1       	in	r25, 0x0b	; 11
    28aa:	f8 01       	movw	r30, r16
    28ac:	80 81       	ld	r24, Z
    28ae:	80 95       	com	r24
    28b0:	89 23       	and	r24, r25
    28b2:	8b b9       	out	0x0b, r24	; 11
    28b4:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    28b8:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    28bc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    28c0:	83 60       	ori	r24, 0x03	; 3
    28c2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    28c6:	82 e0       	ldi	r24, 0x02	; 2
    28c8:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    28cc:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    28d0:	80 e0       	ldi	r24, 0x00	; 0
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	2e 85       	ldd	r18, Y+14	; 0x0e
    28d6:	3f 85       	ldd	r19, Y+15	; 0x0f
    28d8:	82 17       	cp	r24, r18
    28da:	93 07       	cpc	r25, r19
    28dc:	20 f5       	brcc	.+72     	; 0x2926 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    28de:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    28e2:	2c 2d       	mov	r18, r12
    28e4:	24 1b       	sub	r18, r20
    28e6:	82 0f       	add	r24, r18
    28e8:	91 1d       	adc	r25, r1
    28ea:	03 b1       	in	r16, 0x03	; 3
    28ec:	08 11       	cpse	r16, r8
    28ee:	32 c0       	rjmp	.+100    	; 0x2954 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    28f0:	f6 b0       	in	r15, 0x06	; 6
    28f2:	f7 10       	cpse	r15, r7
    28f4:	2f c0       	rjmp	.+94     	; 0x2954 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    28f6:	29 b1       	in	r18, 0x09	; 9
    28f8:	29 11       	cpse	r18, r9
    28fa:	2c c0       	rjmp	.+88     	; 0x2954 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    28fc:	10 c0       	rjmp	.+32     	; 0x291e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    28fe:	21 2f       	mov	r18, r17
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	a9 01       	movw	r20, r18
    2904:	44 0f       	add	r20, r20
    2906:	55 1f       	adc	r21, r21
    2908:	f5 01       	movw	r30, r10
    290a:	e4 0f       	add	r30, r20
    290c:	f5 1f       	adc	r31, r21
    290e:	60 81       	ld	r22, Z
    2910:	71 81       	ldd	r23, Z+1	; 0x01
    2912:	67 2b       	or	r22, r23
    2914:	21 f1       	breq	.+72     	; 0x295e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    2916:	1f 5f       	subi	r17, 0xFF	; 255
    2918:	28 85       	ldd	r18, Y+8	; 0x08
    291a:	12 17       	cp	r17, r18
    291c:	80 f3       	brcs	.-32     	; 0x28fe <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    291e:	7f 2c       	mov	r7, r15
    2920:	80 2e       	mov	r8, r16
    2922:	4c 2d       	mov	r20, r12
    2924:	d7 cf       	rjmp	.-82     	; 0x28d4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    2926:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    292a:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	88 85       	ldd	r24, Y+8	; 0x08
    2932:	28 17       	cp	r18, r24
    2934:	30 f5       	brcc	.+76     	; 0x2982 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    2936:	f5 01       	movw	r30, r10
    2938:	e2 0f       	add	r30, r18
    293a:	f1 1d       	adc	r31, r1
    293c:	e2 0f       	add	r30, r18
    293e:	f1 1d       	adc	r31, r1
    2940:	80 81       	ld	r24, Z
    2942:	91 81       	ldd	r25, Z+1	; 0x01
    2944:	89 2b       	or	r24, r25
    2946:	21 f4       	brne	.+8      	; 0x2950 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    2948:	8e 85       	ldd	r24, Y+14	; 0x0e
    294a:	9f 85       	ldd	r25, Y+15	; 0x0f
    294c:	91 83       	std	Z+1, r25	; 0x01
    294e:	80 83       	st	Z, r24
    2950:	2f 5f       	subi	r18, 0xFF	; 255
    2952:	ee cf       	rjmp	.-36     	; 0x2930 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    2954:	03 b1       	in	r16, 0x03	; 3
    2956:	f6 b0       	in	r15, 0x06	; 6
    2958:	99 b0       	in	r9, 0x09	; 9
    295a:	10 e0       	ldi	r17, 0x00	; 0
    295c:	dd cf       	rjmp	.-70     	; 0x2918 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    295e:	de 01       	movw	r26, r28
    2960:	a4 0f       	add	r26, r20
    2962:	b5 1f       	adc	r27, r21
    2964:	91 96       	adiw	r26, 0x21	; 33
    2966:	0d 90       	ld	r0, X+
    2968:	bc 91       	ld	r27, X
    296a:	a0 2d       	mov	r26, r0
    296c:	4c 91       	ld	r20, X
    296e:	de 01       	movw	r26, r28
    2970:	a2 0f       	add	r26, r18
    2972:	b3 1f       	adc	r27, r19
    2974:	51 96       	adiw	r26, 0x11	; 17
    2976:	2c 91       	ld	r18, X
    2978:	42 23       	and	r20, r18
    297a:	69 f6       	brne	.-102    	; 0x2916 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    297c:	91 83       	std	Z+1, r25	; 0x01
    297e:	80 83       	st	Z, r24
    2980:	ca cf       	rjmp	.-108    	; 0x2916 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    2982:	cd b7       	in	r28, 0x3d	; 61
    2984:	de b7       	in	r29, 0x3e	; 62
    2986:	ed e0       	ldi	r30, 0x0D	; 13
    2988:	0c 94 8a 17 	jmp	0x2f14	; 0x2f14 <__epilogue_restores__+0xa>

0000298c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    298c:	ef 92       	push	r14
    298e:	ff 92       	push	r15
    2990:	0f 93       	push	r16
    2992:	1f 93       	push	r17
    2994:	cf 93       	push	r28
    2996:	df 93       	push	r29
    2998:	fc 01       	movw	r30, r24
    299a:	9b 01       	movw	r18, r22
    299c:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    29a0:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    29a4:	47 b1       	in	r20, 0x07	; 7
    29a6:	18 b1       	in	r17, 0x08	; 8
    29a8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    29ac:	86 fd       	sbrc	r24, 6
    29ae:	fc cf       	rjmp	.-8      	; 0x29a8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    29b0:	80 e0       	ldi	r24, 0x00	; 0
    29b2:	90 85       	ldd	r25, Z+8	; 0x08
    29b4:	89 17       	cp	r24, r25
    29b6:	48 f4       	brcc	.+18     	; 0x29ca <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    29b8:	d9 01       	movw	r26, r18
    29ba:	a8 0f       	add	r26, r24
    29bc:	b1 1d       	adc	r27, r1
    29be:	a8 0f       	add	r26, r24
    29c0:	b1 1d       	adc	r27, r1
    29c2:	1d 92       	st	X+, r1
    29c4:	1c 92       	st	X, r1
    29c6:	8f 5f       	subi	r24, 0xFF	; 255
    29c8:	f4 cf       	rjmp	.-24     	; 0x29b2 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    29ca:	97 b1       	in	r25, 0x07	; 7
    29cc:	82 a1       	ldd	r24, Z+34	; 0x22
    29ce:	80 95       	com	r24
    29d0:	89 23       	and	r24, r25
    29d2:	87 b9       	out	0x07, r24	; 7
    29d4:	98 b1       	in	r25, 0x08	; 8
    29d6:	82 a1       	ldd	r24, Z+34	; 0x22
    29d8:	80 95       	com	r24
    29da:	89 23       	and	r24, r25
    29dc:	88 b9       	out	0x08, r24	; 8
    29de:	87 e8       	ldi	r24, 0x87	; 135
    29e0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    29e4:	e1 2c       	mov	r14, r1
    29e6:	81 a1       	ldd	r24, Z+33	; 0x21
    29e8:	e8 16       	cp	r14, r24
    29ea:	10 f0       	brcs	.+4      	; 0x29f0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    29ec:	e1 2c       	mov	r14, r1
    29ee:	29 c0       	rjmp	.+82     	; 0x2a42 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    29f0:	50 e0       	ldi	r21, 0x00	; 0
    29f2:	80 85       	ldd	r24, Z+8	; 0x08
    29f4:	58 17       	cp	r21, r24
    29f6:	18 f5       	brcc	.+70     	; 0x2a3e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    29f8:	a5 2f       	mov	r26, r21
    29fa:	b0 e0       	ldi	r27, 0x00	; 0
    29fc:	ef 01       	movw	r28, r30
    29fe:	ca 0f       	add	r28, r26
    2a00:	db 1f       	adc	r29, r27
    2a02:	89 89       	ldd	r24, Y+17	; 0x11
    2a04:	80 64       	ori	r24, 0x40	; 64
    2a06:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2a0a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2a0e:	80 64       	ori	r24, 0x40	; 64
    2a10:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2a14:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2a18:	86 fd       	sbrc	r24, 6
    2a1a:	fc cf       	rjmp	.-8      	; 0x2a14 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    2a1c:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    2a20:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    2a24:	aa 0f       	add	r26, r26
    2a26:	bb 1f       	adc	r27, r27
    2a28:	a2 0f       	add	r26, r18
    2a2a:	b3 1f       	adc	r27, r19
    2a2c:	8d 91       	ld	r24, X+
    2a2e:	9c 91       	ld	r25, X
    2a30:	11 97       	sbiw	r26, 0x01	; 1
    2a32:	86 0f       	add	r24, r22
    2a34:	97 1f       	adc	r25, r23
    2a36:	8d 93       	st	X+, r24
    2a38:	9c 93       	st	X, r25
    2a3a:	5f 5f       	subi	r21, 0xFF	; 255
    2a3c:	da cf       	rjmp	.-76     	; 0x29f2 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    2a3e:	e3 94       	inc	r14
    2a40:	d2 cf       	rjmp	.-92     	; 0x29e6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    2a42:	80 85       	ldd	r24, Z+8	; 0x08
    2a44:	e8 16       	cp	r14, r24
    2a46:	a0 f4       	brcc	.+40     	; 0x2a70 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    2a48:	e9 01       	movw	r28, r18
    2a4a:	ce 0d       	add	r28, r14
    2a4c:	d1 1d       	adc	r29, r1
    2a4e:	ce 0d       	add	r28, r14
    2a50:	d1 1d       	adc	r29, r1
    2a52:	61 a1       	ldd	r22, Z+33	; 0x21
    2a54:	70 e0       	ldi	r23, 0x00	; 0
    2a56:	cb 01       	movw	r24, r22
    2a58:	95 95       	asr	r25
    2a5a:	87 95       	ror	r24
    2a5c:	a8 81       	ld	r26, Y
    2a5e:	b9 81       	ldd	r27, Y+1	; 0x01
    2a60:	8a 0f       	add	r24, r26
    2a62:	9b 1f       	adc	r25, r27
    2a64:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <__udivmodhi4>
    2a68:	79 83       	std	Y+1, r23	; 0x01
    2a6a:	68 83       	st	Y, r22
    2a6c:	e3 94       	inc	r14
    2a6e:	e9 cf       	rjmp	.-46     	; 0x2a42 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    2a70:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2a74:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2a78:	18 b9       	out	0x08, r17	; 8
    2a7a:	47 b9       	out	0x07, r20	; 7
    2a7c:	cd b7       	in	r28, 0x3d	; 61
    2a7e:	de b7       	in	r29, 0x3e	; 62
    2a80:	e6 e0       	ldi	r30, 0x06	; 6
    2a82:	0c 94 91 17 	jmp	0x2f22	; 0x2f22 <__epilogue_restores__+0x18>

00002a86 <_ZN16PololuQTRSensors4readEPjh>:
    2a86:	a0 e2       	ldi	r26, 0x20	; 32
    2a88:	b0 e0       	ldi	r27, 0x00	; 0
    2a8a:	e9 e4       	ldi	r30, 0x49	; 73
    2a8c:	f5 e1       	ldi	r31, 0x15	; 21
    2a8e:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__prologue_saves__+0x16>
    2a92:	8c 01       	movw	r16, r24
    2a94:	7b 01       	movw	r14, r22
    2a96:	d4 2e       	mov	r13, r20
    2a98:	8f ef       	ldi	r24, 0xFF	; 255
    2a9a:	84 0f       	add	r24, r20
    2a9c:	82 30       	cpi	r24, 0x02	; 2
    2a9e:	18 f4       	brcc	.+6      	; 0x2aa6 <_ZN16PololuQTRSensors4readEPjh+0x20>
    2aa0:	c8 01       	movw	r24, r16
    2aa2:	0e 94 da 13 	call	0x27b4	; 0x27b4 <_ZN16PololuQTRSensors10emittersOnEv>
    2aa6:	d8 01       	movw	r26, r16
    2aa8:	50 96       	adiw	r26, 0x10	; 16
    2aaa:	8c 91       	ld	r24, X
    2aac:	b7 01       	movw	r22, r14
    2aae:	81 11       	cpse	r24, r1
    2ab0:	10 c0       	rjmp	.+32     	; 0x2ad2 <_ZN16PololuQTRSensors4readEPjh+0x4c>
    2ab2:	c8 01       	movw	r24, r16
    2ab4:	0e 94 ee 13 	call	0x27dc	; 0x27dc <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2ab8:	c8 01       	movw	r24, r16
    2aba:	0e 94 c5 13 	call	0x278a	; 0x278a <_ZN16PololuQTRSensors11emittersOffEv>
    2abe:	b2 e0       	ldi	r27, 0x02	; 2
    2ac0:	db 12       	cpse	r13, r27
    2ac2:	3a c0       	rjmp	.+116    	; 0x2b38 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2ac4:	be 01       	movw	r22, r28
    2ac6:	6f 5f       	subi	r22, 0xFF	; 255
    2ac8:	7f 4f       	sbci	r23, 0xFF	; 255
    2aca:	c8 01       	movw	r24, r16
    2acc:	0e 94 ee 13 	call	0x27dc	; 0x27dc <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2ad0:	0f c0       	rjmp	.+30     	; 0x2af0 <_ZN16PololuQTRSensors4readEPjh+0x6a>
    2ad2:	c8 01       	movw	r24, r16
    2ad4:	0e 94 c6 14 	call	0x298c	; 0x298c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2ad8:	c8 01       	movw	r24, r16
    2ada:	0e 94 c5 13 	call	0x278a	; 0x278a <_ZN16PololuQTRSensors11emittersOffEv>
    2ade:	e2 e0       	ldi	r30, 0x02	; 2
    2ae0:	de 12       	cpse	r13, r30
    2ae2:	2a c0       	rjmp	.+84     	; 0x2b38 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2ae4:	be 01       	movw	r22, r28
    2ae6:	6f 5f       	subi	r22, 0xFF	; 255
    2ae8:	7f 4f       	sbci	r23, 0xFF	; 255
    2aea:	c8 01       	movw	r24, r16
    2aec:	0e 94 c6 14 	call	0x298c	; 0x298c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2af0:	40 e0       	ldi	r20, 0x00	; 0
    2af2:	f8 01       	movw	r30, r16
    2af4:	80 85       	ldd	r24, Z+8	; 0x08
    2af6:	48 17       	cp	r20, r24
    2af8:	f8 f4       	brcc	.+62     	; 0x2b38 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2afa:	84 2f       	mov	r24, r20
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	88 0f       	add	r24, r24
    2b00:	99 1f       	adc	r25, r25
    2b02:	f7 01       	movw	r30, r14
    2b04:	e8 0f       	add	r30, r24
    2b06:	f9 1f       	adc	r31, r25
    2b08:	21 e0       	ldi	r18, 0x01	; 1
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	2c 0f       	add	r18, r28
    2b0e:	3d 1f       	adc	r19, r29
    2b10:	82 0f       	add	r24, r18
    2b12:	93 1f       	adc	r25, r19
    2b14:	d8 01       	movw	r26, r16
    2b16:	1e 96       	adiw	r26, 0x0e	; 14
    2b18:	2d 91       	ld	r18, X+
    2b1a:	3c 91       	ld	r19, X
    2b1c:	1f 97       	sbiw	r26, 0x0f	; 15
    2b1e:	dc 01       	movw	r26, r24
    2b20:	8d 91       	ld	r24, X+
    2b22:	9c 91       	ld	r25, X
    2b24:	28 1b       	sub	r18, r24
    2b26:	39 0b       	sbc	r19, r25
    2b28:	80 81       	ld	r24, Z
    2b2a:	91 81       	ldd	r25, Z+1	; 0x01
    2b2c:	82 0f       	add	r24, r18
    2b2e:	93 1f       	adc	r25, r19
    2b30:	91 83       	std	Z+1, r25	; 0x01
    2b32:	80 83       	st	Z, r24
    2b34:	4f 5f       	subi	r20, 0xFF	; 255
    2b36:	dd cf       	rjmp	.-70     	; 0x2af2 <_ZN16PololuQTRSensors4readEPjh+0x6c>
    2b38:	a0 96       	adiw	r28, 0x20	; 32
    2b3a:	e7 e0       	ldi	r30, 0x07	; 7
    2b3c:	0c 94 90 17 	jmp	0x2f20	; 0x2f20 <__epilogue_restores__+0x16>

00002b40 <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    2b40:	a0 e0       	ldi	r26, 0x00	; 0
    2b42:	b0 e0       	ldi	r27, 0x00	; 0
    2b44:	e6 ea       	ldi	r30, 0xA6	; 166
    2b46:	f5 e1       	ldi	r31, 0x15	; 21
    2b48:	0c 94 72 17 	jmp	0x2ee4	; 0x2ee4 <__prologue_saves__+0x12>
    2b4c:	ec 01       	movw	r28, r24
    2b4e:	8b 01       	movw	r16, r22
    2b50:	b4 2e       	mov	r11, r20
    2b52:	84 2f       	mov	r24, r20
    2b54:	8d 7f       	andi	r24, 0xFD	; 253
    2b56:	51 f4       	brne	.+20     	; 0x2b6c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    2b58:	8c 81       	ldd	r24, Y+4	; 0x04
    2b5a:	9d 81       	ldd	r25, Y+5	; 0x05
    2b5c:	89 2b       	or	r24, r25
    2b5e:	09 f4       	brne	.+2      	; 0x2b62 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x22>
    2b60:	97 c0       	rjmp	.+302    	; 0x2c90 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2b62:	8e 81       	ldd	r24, Y+6	; 0x06
    2b64:	9f 81       	ldd	r25, Y+7	; 0x07
    2b66:	89 2b       	or	r24, r25
    2b68:	09 f4       	brne	.+2      	; 0x2b6c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    2b6a:	92 c0       	rjmp	.+292    	; 0x2c90 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2b6c:	8f ef       	ldi	r24, 0xFF	; 255
    2b6e:	8b 0d       	add	r24, r11
    2b70:	82 30       	cpi	r24, 0x02	; 2
    2b72:	50 f4       	brcc	.+20     	; 0x2b88 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    2b74:	88 81       	ld	r24, Y
    2b76:	99 81       	ldd	r25, Y+1	; 0x01
    2b78:	89 2b       	or	r24, r25
    2b7a:	09 f4       	brne	.+2      	; 0x2b7e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3e>
    2b7c:	89 c0       	rjmp	.+274    	; 0x2c90 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b80:	9b 81       	ldd	r25, Y+3	; 0x03
    2b82:	89 2b       	or	r24, r25
    2b84:	09 f4       	brne	.+2      	; 0x2b88 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    2b86:	84 c0       	rjmp	.+264    	; 0x2c90 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2b88:	4b 2d       	mov	r20, r11
    2b8a:	b8 01       	movw	r22, r16
    2b8c:	ce 01       	movw	r24, r28
    2b8e:	0e 94 43 15 	call	0x2a86	; 0x2a86 <_ZN16PololuQTRSensors4readEPjh>
    2b92:	78 01       	movw	r14, r16
    2b94:	00 e0       	ldi	r16, 0x00	; 0
    2b96:	10 e0       	ldi	r17, 0x00	; 0
    2b98:	c1 2c       	mov	r12, r1
    2b9a:	d1 2c       	mov	r13, r1
    2b9c:	88 85       	ldd	r24, Y+8	; 0x08
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	c8 16       	cp	r12, r24
    2ba2:	d9 06       	cpc	r13, r25
    2ba4:	0c f0       	brlt	.+2      	; 0x2ba8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x68>
    2ba6:	74 c0       	rjmp	.+232    	; 0x2c90 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	b8 12       	cpse	r11, r24
    2bac:	0a c0       	rjmp	.+20     	; 0x2bc2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x82>
    2bae:	ea 81       	ldd	r30, Y+2	; 0x02
    2bb0:	fb 81       	ldd	r31, Y+3	; 0x03
    2bb2:	e0 0f       	add	r30, r16
    2bb4:	f1 1f       	adc	r31, r17
    2bb6:	01 90       	ld	r0, Z+
    2bb8:	f0 81       	ld	r31, Z
    2bba:	e0 2d       	mov	r30, r0
    2bbc:	a8 81       	ld	r26, Y
    2bbe:	b9 81       	ldd	r27, Y+1	; 0x01
    2bc0:	0d c0       	rjmp	.+26     	; 0x2bdc <_ZN16PololuQTRSensors14readCalibratedEPjh+0x9c>
    2bc2:	8c 81       	ldd	r24, Y+4	; 0x04
    2bc4:	9d 81       	ldd	r25, Y+5	; 0x05
    2bc6:	2e 81       	ldd	r18, Y+6	; 0x06
    2bc8:	3f 81       	ldd	r19, Y+7	; 0x07
    2bca:	b1 10       	cpse	r11, r1
    2bcc:	0c c0       	rjmp	.+24     	; 0x2be6 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    2bce:	f9 01       	movw	r30, r18
    2bd0:	e0 0f       	add	r30, r16
    2bd2:	f1 1f       	adc	r31, r17
    2bd4:	01 90       	ld	r0, Z+
    2bd6:	f0 81       	ld	r31, Z
    2bd8:	e0 2d       	mov	r30, r0
    2bda:	dc 01       	movw	r26, r24
    2bdc:	a0 0f       	add	r26, r16
    2bde:	b1 1f       	adc	r27, r17
    2be0:	8d 91       	ld	r24, X+
    2be2:	9c 91       	ld	r25, X
    2be4:	28 c0       	rjmp	.+80     	; 0x2c36 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    2be6:	fc 01       	movw	r30, r24
    2be8:	e0 0f       	add	r30, r16
    2bea:	f1 1f       	adc	r31, r17
    2bec:	40 81       	ld	r20, Z
    2bee:	51 81       	ldd	r21, Z+1	; 0x01
    2bf0:	e8 81       	ld	r30, Y
    2bf2:	f9 81       	ldd	r31, Y+1	; 0x01
    2bf4:	e0 0f       	add	r30, r16
    2bf6:	f1 1f       	adc	r31, r17
    2bf8:	80 81       	ld	r24, Z
    2bfa:	91 81       	ldd	r25, Z+1	; 0x01
    2bfc:	ee 85       	ldd	r30, Y+14	; 0x0e
    2bfe:	ff 85       	ldd	r31, Y+15	; 0x0f
    2c00:	48 17       	cp	r20, r24
    2c02:	59 07       	cpc	r21, r25
    2c04:	10 f4       	brcc	.+4      	; 0x2c0a <_ZN16PololuQTRSensors14readCalibratedEPjh+0xca>
    2c06:	cf 01       	movw	r24, r30
    2c08:	04 c0       	rjmp	.+8      	; 0x2c12 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd2>
    2c0a:	8e 0f       	add	r24, r30
    2c0c:	9f 1f       	adc	r25, r31
    2c0e:	84 1b       	sub	r24, r20
    2c10:	95 0b       	sbc	r25, r21
    2c12:	d9 01       	movw	r26, r18
    2c14:	a0 0f       	add	r26, r16
    2c16:	b1 1f       	adc	r27, r17
    2c18:	2d 91       	ld	r18, X+
    2c1a:	3c 91       	ld	r19, X
    2c1c:	aa 81       	ldd	r26, Y+2	; 0x02
    2c1e:	bb 81       	ldd	r27, Y+3	; 0x03
    2c20:	a0 0f       	add	r26, r16
    2c22:	b1 1f       	adc	r27, r17
    2c24:	4d 91       	ld	r20, X+
    2c26:	5c 91       	ld	r21, X
    2c28:	24 17       	cp	r18, r20
    2c2a:	35 07       	cpc	r19, r21
    2c2c:	20 f0       	brcs	.+8      	; 0x2c36 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    2c2e:	e4 0f       	add	r30, r20
    2c30:	f5 1f       	adc	r31, r21
    2c32:	e2 1b       	sub	r30, r18
    2c34:	f3 0b       	sbc	r31, r19
    2c36:	e8 1b       	sub	r30, r24
    2c38:	f9 0b       	sbc	r31, r25
    2c3a:	a9 f0       	breq	.+42     	; 0x2c66 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x126>
    2c3c:	d7 01       	movw	r26, r14
    2c3e:	2d 91       	ld	r18, X+
    2c40:	3c 91       	ld	r19, X
    2c42:	40 e0       	ldi	r20, 0x00	; 0
    2c44:	50 e0       	ldi	r21, 0x00	; 0
    2c46:	28 1b       	sub	r18, r24
    2c48:	39 0b       	sbc	r19, r25
    2c4a:	41 09       	sbc	r20, r1
    2c4c:	51 09       	sbc	r21, r1
    2c4e:	a8 ee       	ldi	r26, 0xE8	; 232
    2c50:	b3 e0       	ldi	r27, 0x03	; 3
    2c52:	0e 94 56 17 	call	0x2eac	; 0x2eac <__muluhisi3>
    2c56:	9f 01       	movw	r18, r30
    2c58:	40 e0       	ldi	r20, 0x00	; 0
    2c5a:	50 e0       	ldi	r21, 0x00	; 0
    2c5c:	0e 94 22 17 	call	0x2e44	; 0x2e44 <__divmodsi4>
    2c60:	37 fd       	sbrc	r19, 7
    2c62:	0a c0       	rjmp	.+20     	; 0x2c78 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x138>
    2c64:	02 c0       	rjmp	.+4      	; 0x2c6a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x12a>
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	29 3e       	cpi	r18, 0xE9	; 233
    2c6c:	b3 e0       	ldi	r27, 0x03	; 3
    2c6e:	3b 07       	cpc	r19, r27
    2c70:	2c f0       	brlt	.+10     	; 0x2c7c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    2c72:	28 ee       	ldi	r18, 0xE8	; 232
    2c74:	33 e0       	ldi	r19, 0x03	; 3
    2c76:	02 c0       	rjmp	.+4      	; 0x2c7c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	f7 01       	movw	r30, r14
    2c7e:	21 93       	st	Z+, r18
    2c80:	31 93       	st	Z+, r19
    2c82:	7f 01       	movw	r14, r30
    2c84:	ff ef       	ldi	r31, 0xFF	; 255
    2c86:	cf 1a       	sub	r12, r31
    2c88:	df 0a       	sbc	r13, r31
    2c8a:	0e 5f       	subi	r16, 0xFE	; 254
    2c8c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c8e:	86 cf       	rjmp	.-244    	; 0x2b9c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x5c>
    2c90:	cd b7       	in	r28, 0x3d	; 61
    2c92:	de b7       	in	r29, 0x3e	; 62
    2c94:	e9 e0       	ldi	r30, 0x09	; 9
    2c96:	0c 94 8e 17 	jmp	0x2f1c	; 0x2f1c <__epilogue_restores__+0x12>

00002c9a <_ZN16PololuQTRSensors8readLineEPjhh>:
    2c9a:	a0 e0       	ldi	r26, 0x00	; 0
    2c9c:	b0 e0       	ldi	r27, 0x00	; 0
    2c9e:	e3 e5       	ldi	r30, 0x53	; 83
    2ca0:	f6 e1       	ldi	r31, 0x16	; 22
    2ca2:	0c 94 69 17 	jmp	0x2ed2	; 0x2ed2 <__prologue_saves__>
    2ca6:	ec 01       	movw	r28, r24
    2ca8:	8b 01       	movw	r16, r22
    2caa:	82 2e       	mov	r8, r18
    2cac:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <_ZN16PololuQTRSensors14readCalibratedEPjh>
    2cb0:	28 84       	ldd	r2, Y+8	; 0x08
    2cb2:	e8 01       	movw	r28, r16
    2cb4:	41 2c       	mov	r4, r1
    2cb6:	51 2c       	mov	r5, r1
    2cb8:	32 01       	movw	r6, r4
    2cba:	00 e0       	ldi	r16, 0x00	; 0
    2cbc:	10 e0       	ldi	r17, 0x00	; 0
    2cbe:	c1 2c       	mov	r12, r1
    2cc0:	d1 2c       	mov	r13, r1
    2cc2:	76 01       	movw	r14, r12
    2cc4:	31 2c       	mov	r3, r1
    2cc6:	91 2c       	mov	r9, r1
    2cc8:	58 ee       	ldi	r21, 0xE8	; 232
    2cca:	a5 2e       	mov	r10, r21
    2ccc:	53 e0       	ldi	r21, 0x03	; 3
    2cce:	b5 2e       	mov	r11, r21
    2cd0:	92 14       	cp	r9, r2
    2cd2:	21 f1       	breq	.+72     	; 0x2d1c <_ZN16PololuQTRSensors8readLineEPjhh+0x82>
    2cd4:	e9 91       	ld	r30, Y+
    2cd6:	f9 91       	ld	r31, Y+
    2cd8:	88 20       	and	r8, r8
    2cda:	21 f0       	breq	.+8      	; 0x2ce4 <_ZN16PololuQTRSensors8readLineEPjhh+0x4a>
    2cdc:	c5 01       	movw	r24, r10
    2cde:	8e 1b       	sub	r24, r30
    2ce0:	9f 0b       	sbc	r25, r31
    2ce2:	fc 01       	movw	r30, r24
    2ce4:	e9 3c       	cpi	r30, 0xC9	; 201
    2ce6:	f1 05       	cpc	r31, r1
    2ce8:	24 f4       	brge	.+8      	; 0x2cf2 <_ZN16PololuQTRSensors8readLineEPjhh+0x58>
    2cea:	e3 33       	cpi	r30, 0x33	; 51
    2cec:	f1 05       	cpc	r31, r1
    2cee:	74 f0       	brlt	.+28     	; 0x2d0c <_ZN16PololuQTRSensors8readLineEPjhh+0x72>
    2cf0:	02 c0       	rjmp	.+4      	; 0x2cf6 <_ZN16PololuQTRSensors8readLineEPjhh+0x5c>
    2cf2:	33 24       	eor	r3, r3
    2cf4:	33 94       	inc	r3
    2cf6:	df 01       	movw	r26, r30
    2cf8:	a3 01       	movw	r20, r6
    2cfa:	92 01       	movw	r18, r4
    2cfc:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <__mulshisi3>
    2d00:	c6 0e       	add	r12, r22
    2d02:	d7 1e       	adc	r13, r23
    2d04:	e8 1e       	adc	r14, r24
    2d06:	f9 1e       	adc	r15, r25
    2d08:	0e 0f       	add	r16, r30
    2d0a:	1f 1f       	adc	r17, r31
    2d0c:	93 94       	inc	r9
    2d0e:	98 ee       	ldi	r25, 0xE8	; 232
    2d10:	49 0e       	add	r4, r25
    2d12:	93 e0       	ldi	r25, 0x03	; 3
    2d14:	59 1e       	adc	r5, r25
    2d16:	61 1c       	adc	r6, r1
    2d18:	71 1c       	adc	r7, r1
    2d1a:	da cf       	rjmp	.-76     	; 0x2cd0 <_ZN16PololuQTRSensors8readLineEPjhh+0x36>
    2d1c:	31 10       	cpse	r3, r1
    2d1e:	1e c0       	rjmp	.+60     	; 0x2d5c <_ZN16PololuQTRSensors8readLineEPjhh+0xc2>
    2d20:	49 2d       	mov	r20, r9
    2d22:	50 e0       	ldi	r21, 0x00	; 0
    2d24:	41 50       	subi	r20, 0x01	; 1
    2d26:	51 09       	sbc	r21, r1
    2d28:	24 ef       	ldi	r18, 0xF4	; 244
    2d2a:	31 e0       	ldi	r19, 0x01	; 1
    2d2c:	42 9f       	mul	r20, r18
    2d2e:	c0 01       	movw	r24, r0
    2d30:	43 9f       	mul	r20, r19
    2d32:	90 0d       	add	r25, r0
    2d34:	52 9f       	mul	r21, r18
    2d36:	90 0d       	add	r25, r0
    2d38:	11 24       	eor	r1, r1
    2d3a:	20 91 93 01 	lds	r18, 0x0193	; 0x800193 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    2d3e:	30 91 94 01 	lds	r19, 0x0194	; 0x800194 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    2d42:	28 17       	cp	r18, r24
    2d44:	39 07       	cpc	r19, r25
    2d46:	b4 f0       	brlt	.+44     	; 0x2d74 <_ZN16PololuQTRSensors8readLineEPjhh+0xda>
    2d48:	88 ee       	ldi	r24, 0xE8	; 232
    2d4a:	93 e0       	ldi	r25, 0x03	; 3
    2d4c:	48 9f       	mul	r20, r24
    2d4e:	90 01       	movw	r18, r0
    2d50:	49 9f       	mul	r20, r25
    2d52:	30 0d       	add	r19, r0
    2d54:	58 9f       	mul	r21, r24
    2d56:	30 0d       	add	r19, r0
    2d58:	11 24       	eor	r1, r1
    2d5a:	0e c0       	rjmp	.+28     	; 0x2d78 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    2d5c:	98 01       	movw	r18, r16
    2d5e:	40 e0       	ldi	r20, 0x00	; 0
    2d60:	50 e0       	ldi	r21, 0x00	; 0
    2d62:	c7 01       	movw	r24, r14
    2d64:	b6 01       	movw	r22, r12
    2d66:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__udivmodsi4>
    2d6a:	30 93 94 01 	sts	0x0194, r19	; 0x800194 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    2d6e:	20 93 93 01 	sts	0x0193, r18	; 0x800193 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    2d72:	02 c0       	rjmp	.+4      	; 0x2d78 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    2d74:	20 e0       	ldi	r18, 0x00	; 0
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	c9 01       	movw	r24, r18
    2d7a:	cd b7       	in	r28, 0x3d	; 61
    2d7c:	de b7       	in	r29, 0x3e	; 62
    2d7e:	e2 e1       	ldi	r30, 0x12	; 18
    2d80:	0c 94 85 17 	jmp	0x2f0a	; 0x2f0a <__epilogue_restores__>

00002d84 <_ZN16PololuQTRSensorsD1Ev>:
    2d84:	cf 93       	push	r28
    2d86:	df 93       	push	r29
    2d88:	ec 01       	movw	r28, r24
    2d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d8e:	00 97       	sbiw	r24, 0x00	; 0
    2d90:	11 f0       	breq	.+4      	; 0x2d96 <_ZN16PololuQTRSensorsD1Ev+0x12>
    2d92:	0e 94 38 18 	call	0x3070	; 0x3070 <free>
    2d96:	8e 81       	ldd	r24, Y+6	; 0x06
    2d98:	9f 81       	ldd	r25, Y+7	; 0x07
    2d9a:	00 97       	sbiw	r24, 0x00	; 0
    2d9c:	11 f0       	breq	.+4      	; 0x2da2 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    2d9e:	0e 94 38 18 	call	0x3070	; 0x3070 <free>
    2da2:	88 81       	ld	r24, Y
    2da4:	99 81       	ldd	r25, Y+1	; 0x01
    2da6:	00 97       	sbiw	r24, 0x00	; 0
    2da8:	11 f0       	breq	.+4      	; 0x2dae <_ZN16PololuQTRSensorsD1Ev+0x2a>
    2daa:	0e 94 38 18 	call	0x3070	; 0x3070 <free>
    2dae:	8c 81       	ldd	r24, Y+4	; 0x04
    2db0:	9d 81       	ldd	r25, Y+5	; 0x05
    2db2:	00 97       	sbiw	r24, 0x00	; 0
    2db4:	11 f0       	breq	.+4      	; 0x2dba <_ZN16PololuQTRSensorsD1Ev+0x36>
    2db6:	0e 94 38 18 	call	0x3070	; 0x3070 <free>
    2dba:	df 91       	pop	r29
    2dbc:	cf 91       	pop	r28
    2dbe:	08 95       	ret

00002dc0 <__udivmodqi4>:
    2dc0:	99 1b       	sub	r25, r25
    2dc2:	79 e0       	ldi	r23, 0x09	; 9
    2dc4:	04 c0       	rjmp	.+8      	; 0x2dce <__udivmodqi4_ep>

00002dc6 <__udivmodqi4_loop>:
    2dc6:	99 1f       	adc	r25, r25
    2dc8:	96 17       	cp	r25, r22
    2dca:	08 f0       	brcs	.+2      	; 0x2dce <__udivmodqi4_ep>
    2dcc:	96 1b       	sub	r25, r22

00002dce <__udivmodqi4_ep>:
    2dce:	88 1f       	adc	r24, r24
    2dd0:	7a 95       	dec	r23
    2dd2:	c9 f7       	brne	.-14     	; 0x2dc6 <__udivmodqi4_loop>
    2dd4:	80 95       	com	r24
    2dd6:	08 95       	ret

00002dd8 <__udivmodhi4>:
    2dd8:	aa 1b       	sub	r26, r26
    2dda:	bb 1b       	sub	r27, r27
    2ddc:	51 e1       	ldi	r21, 0x11	; 17
    2dde:	07 c0       	rjmp	.+14     	; 0x2dee <__udivmodhi4_ep>

00002de0 <__udivmodhi4_loop>:
    2de0:	aa 1f       	adc	r26, r26
    2de2:	bb 1f       	adc	r27, r27
    2de4:	a6 17       	cp	r26, r22
    2de6:	b7 07       	cpc	r27, r23
    2de8:	10 f0       	brcs	.+4      	; 0x2dee <__udivmodhi4_ep>
    2dea:	a6 1b       	sub	r26, r22
    2dec:	b7 0b       	sbc	r27, r23

00002dee <__udivmodhi4_ep>:
    2dee:	88 1f       	adc	r24, r24
    2df0:	99 1f       	adc	r25, r25
    2df2:	5a 95       	dec	r21
    2df4:	a9 f7       	brne	.-22     	; 0x2de0 <__udivmodhi4_loop>
    2df6:	80 95       	com	r24
    2df8:	90 95       	com	r25
    2dfa:	bc 01       	movw	r22, r24
    2dfc:	cd 01       	movw	r24, r26
    2dfe:	08 95       	ret

00002e00 <__udivmodsi4>:
    2e00:	a1 e2       	ldi	r26, 0x21	; 33
    2e02:	1a 2e       	mov	r1, r26
    2e04:	aa 1b       	sub	r26, r26
    2e06:	bb 1b       	sub	r27, r27
    2e08:	fd 01       	movw	r30, r26
    2e0a:	0d c0       	rjmp	.+26     	; 0x2e26 <__udivmodsi4_ep>

00002e0c <__udivmodsi4_loop>:
    2e0c:	aa 1f       	adc	r26, r26
    2e0e:	bb 1f       	adc	r27, r27
    2e10:	ee 1f       	adc	r30, r30
    2e12:	ff 1f       	adc	r31, r31
    2e14:	a2 17       	cp	r26, r18
    2e16:	b3 07       	cpc	r27, r19
    2e18:	e4 07       	cpc	r30, r20
    2e1a:	f5 07       	cpc	r31, r21
    2e1c:	20 f0       	brcs	.+8      	; 0x2e26 <__udivmodsi4_ep>
    2e1e:	a2 1b       	sub	r26, r18
    2e20:	b3 0b       	sbc	r27, r19
    2e22:	e4 0b       	sbc	r30, r20
    2e24:	f5 0b       	sbc	r31, r21

00002e26 <__udivmodsi4_ep>:
    2e26:	66 1f       	adc	r22, r22
    2e28:	77 1f       	adc	r23, r23
    2e2a:	88 1f       	adc	r24, r24
    2e2c:	99 1f       	adc	r25, r25
    2e2e:	1a 94       	dec	r1
    2e30:	69 f7       	brne	.-38     	; 0x2e0c <__udivmodsi4_loop>
    2e32:	60 95       	com	r22
    2e34:	70 95       	com	r23
    2e36:	80 95       	com	r24
    2e38:	90 95       	com	r25
    2e3a:	9b 01       	movw	r18, r22
    2e3c:	ac 01       	movw	r20, r24
    2e3e:	bd 01       	movw	r22, r26
    2e40:	cf 01       	movw	r24, r30
    2e42:	08 95       	ret

00002e44 <__divmodsi4>:
    2e44:	05 2e       	mov	r0, r21
    2e46:	97 fb       	bst	r25, 7
    2e48:	1e f4       	brtc	.+6      	; 0x2e50 <__divmodsi4+0xc>
    2e4a:	00 94       	com	r0
    2e4c:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__negsi2>
    2e50:	57 fd       	sbrc	r21, 7
    2e52:	07 d0       	rcall	.+14     	; 0x2e62 <__divmodsi4_neg2>
    2e54:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__udivmodsi4>
    2e58:	07 fc       	sbrc	r0, 7
    2e5a:	03 d0       	rcall	.+6      	; 0x2e62 <__divmodsi4_neg2>
    2e5c:	4e f4       	brtc	.+18     	; 0x2e70 <__divmodsi4_exit>
    2e5e:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <__negsi2>

00002e62 <__divmodsi4_neg2>:
    2e62:	50 95       	com	r21
    2e64:	40 95       	com	r20
    2e66:	30 95       	com	r19
    2e68:	21 95       	neg	r18
    2e6a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e6c:	4f 4f       	sbci	r20, 0xFF	; 255
    2e6e:	5f 4f       	sbci	r21, 0xFF	; 255

00002e70 <__divmodsi4_exit>:
    2e70:	08 95       	ret

00002e72 <__negsi2>:
    2e72:	90 95       	com	r25
    2e74:	80 95       	com	r24
    2e76:	70 95       	com	r23
    2e78:	61 95       	neg	r22
    2e7a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e7c:	8f 4f       	sbci	r24, 0xFF	; 255
    2e7e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e80:	08 95       	ret

00002e82 <__tablejump2__>:
    2e82:	ee 0f       	add	r30, r30
    2e84:	ff 1f       	adc	r31, r31
    2e86:	05 90       	lpm	r0, Z+
    2e88:	f4 91       	lpm	r31, Z
    2e8a:	e0 2d       	mov	r30, r0
    2e8c:	09 94       	ijmp

00002e8e <__umulhisi3>:
    2e8e:	a2 9f       	mul	r26, r18
    2e90:	b0 01       	movw	r22, r0
    2e92:	b3 9f       	mul	r27, r19
    2e94:	c0 01       	movw	r24, r0
    2e96:	a3 9f       	mul	r26, r19
    2e98:	70 0d       	add	r23, r0
    2e9a:	81 1d       	adc	r24, r1
    2e9c:	11 24       	eor	r1, r1
    2e9e:	91 1d       	adc	r25, r1
    2ea0:	b2 9f       	mul	r27, r18
    2ea2:	70 0d       	add	r23, r0
    2ea4:	81 1d       	adc	r24, r1
    2ea6:	11 24       	eor	r1, r1
    2ea8:	91 1d       	adc	r25, r1
    2eaa:	08 95       	ret

00002eac <__muluhisi3>:
    2eac:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <__umulhisi3>
    2eb0:	a5 9f       	mul	r26, r21
    2eb2:	90 0d       	add	r25, r0
    2eb4:	b4 9f       	mul	r27, r20
    2eb6:	90 0d       	add	r25, r0
    2eb8:	a4 9f       	mul	r26, r20
    2eba:	80 0d       	add	r24, r0
    2ebc:	91 1d       	adc	r25, r1
    2ebe:	11 24       	eor	r1, r1
    2ec0:	08 95       	ret

00002ec2 <__mulshisi3>:
    2ec2:	b7 ff       	sbrs	r27, 7
    2ec4:	0c 94 56 17 	jmp	0x2eac	; 0x2eac <__muluhisi3>

00002ec8 <__mulohisi3>:
    2ec8:	0e 94 56 17 	call	0x2eac	; 0x2eac <__muluhisi3>
    2ecc:	82 1b       	sub	r24, r18
    2ece:	93 0b       	sbc	r25, r19
    2ed0:	08 95       	ret

00002ed2 <__prologue_saves__>:
    2ed2:	2f 92       	push	r2
    2ed4:	3f 92       	push	r3
    2ed6:	4f 92       	push	r4
    2ed8:	5f 92       	push	r5
    2eda:	6f 92       	push	r6
    2edc:	7f 92       	push	r7
    2ede:	8f 92       	push	r8
    2ee0:	9f 92       	push	r9
    2ee2:	af 92       	push	r10
    2ee4:	bf 92       	push	r11
    2ee6:	cf 92       	push	r12
    2ee8:	df 92       	push	r13
    2eea:	ef 92       	push	r14
    2eec:	ff 92       	push	r15
    2eee:	0f 93       	push	r16
    2ef0:	1f 93       	push	r17
    2ef2:	cf 93       	push	r28
    2ef4:	df 93       	push	r29
    2ef6:	cd b7       	in	r28, 0x3d	; 61
    2ef8:	de b7       	in	r29, 0x3e	; 62
    2efa:	ca 1b       	sub	r28, r26
    2efc:	db 0b       	sbc	r29, r27
    2efe:	0f b6       	in	r0, 0x3f	; 63
    2f00:	f8 94       	cli
    2f02:	de bf       	out	0x3e, r29	; 62
    2f04:	0f be       	out	0x3f, r0	; 63
    2f06:	cd bf       	out	0x3d, r28	; 61
    2f08:	09 94       	ijmp

00002f0a <__epilogue_restores__>:
    2f0a:	2a 88       	ldd	r2, Y+18	; 0x12
    2f0c:	39 88       	ldd	r3, Y+17	; 0x11
    2f0e:	48 88       	ldd	r4, Y+16	; 0x10
    2f10:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f12:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f14:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f16:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f18:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f1a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f1c:	b9 84       	ldd	r11, Y+9	; 0x09
    2f1e:	c8 84       	ldd	r12, Y+8	; 0x08
    2f20:	df 80       	ldd	r13, Y+7	; 0x07
    2f22:	ee 80       	ldd	r14, Y+6	; 0x06
    2f24:	fd 80       	ldd	r15, Y+5	; 0x05
    2f26:	0c 81       	ldd	r16, Y+4	; 0x04
    2f28:	1b 81       	ldd	r17, Y+3	; 0x03
    2f2a:	aa 81       	ldd	r26, Y+2	; 0x02
    2f2c:	b9 81       	ldd	r27, Y+1	; 0x01
    2f2e:	ce 0f       	add	r28, r30
    2f30:	d1 1d       	adc	r29, r1
    2f32:	0f b6       	in	r0, 0x3f	; 63
    2f34:	f8 94       	cli
    2f36:	de bf       	out	0x3e, r29	; 62
    2f38:	0f be       	out	0x3f, r0	; 63
    2f3a:	cd bf       	out	0x3d, r28	; 61
    2f3c:	ed 01       	movw	r28, r26
    2f3e:	08 95       	ret

00002f40 <malloc>:
    2f40:	0f 93       	push	r16
    2f42:	1f 93       	push	r17
    2f44:	cf 93       	push	r28
    2f46:	df 93       	push	r29
    2f48:	82 30       	cpi	r24, 0x02	; 2
    2f4a:	91 05       	cpc	r25, r1
    2f4c:	10 f4       	brcc	.+4      	; 0x2f52 <malloc+0x12>
    2f4e:	82 e0       	ldi	r24, 0x02	; 2
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <__flp>
    2f56:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <__flp+0x1>
    2f5a:	20 e0       	ldi	r18, 0x00	; 0
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	a0 e0       	ldi	r26, 0x00	; 0
    2f60:	b0 e0       	ldi	r27, 0x00	; 0
    2f62:	30 97       	sbiw	r30, 0x00	; 0
    2f64:	19 f1       	breq	.+70     	; 0x2fac <malloc+0x6c>
    2f66:	40 81       	ld	r20, Z
    2f68:	51 81       	ldd	r21, Z+1	; 0x01
    2f6a:	02 81       	ldd	r16, Z+2	; 0x02
    2f6c:	13 81       	ldd	r17, Z+3	; 0x03
    2f6e:	48 17       	cp	r20, r24
    2f70:	59 07       	cpc	r21, r25
    2f72:	c8 f0       	brcs	.+50     	; 0x2fa6 <malloc+0x66>
    2f74:	84 17       	cp	r24, r20
    2f76:	95 07       	cpc	r25, r21
    2f78:	69 f4       	brne	.+26     	; 0x2f94 <malloc+0x54>
    2f7a:	10 97       	sbiw	r26, 0x00	; 0
    2f7c:	31 f0       	breq	.+12     	; 0x2f8a <malloc+0x4a>
    2f7e:	12 96       	adiw	r26, 0x02	; 2
    2f80:	0c 93       	st	X, r16
    2f82:	12 97       	sbiw	r26, 0x02	; 2
    2f84:	13 96       	adiw	r26, 0x03	; 3
    2f86:	1c 93       	st	X, r17
    2f88:	27 c0       	rjmp	.+78     	; 0x2fd8 <malloc+0x98>
    2f8a:	00 93 04 02 	sts	0x0204, r16	; 0x800204 <__flp>
    2f8e:	10 93 05 02 	sts	0x0205, r17	; 0x800205 <__flp+0x1>
    2f92:	22 c0       	rjmp	.+68     	; 0x2fd8 <malloc+0x98>
    2f94:	21 15       	cp	r18, r1
    2f96:	31 05       	cpc	r19, r1
    2f98:	19 f0       	breq	.+6      	; 0x2fa0 <malloc+0x60>
    2f9a:	42 17       	cp	r20, r18
    2f9c:	53 07       	cpc	r21, r19
    2f9e:	18 f4       	brcc	.+6      	; 0x2fa6 <malloc+0x66>
    2fa0:	9a 01       	movw	r18, r20
    2fa2:	bd 01       	movw	r22, r26
    2fa4:	ef 01       	movw	r28, r30
    2fa6:	df 01       	movw	r26, r30
    2fa8:	f8 01       	movw	r30, r16
    2faa:	db cf       	rjmp	.-74     	; 0x2f62 <malloc+0x22>
    2fac:	21 15       	cp	r18, r1
    2fae:	31 05       	cpc	r19, r1
    2fb0:	f9 f0       	breq	.+62     	; 0x2ff0 <malloc+0xb0>
    2fb2:	28 1b       	sub	r18, r24
    2fb4:	39 0b       	sbc	r19, r25
    2fb6:	24 30       	cpi	r18, 0x04	; 4
    2fb8:	31 05       	cpc	r19, r1
    2fba:	80 f4       	brcc	.+32     	; 0x2fdc <malloc+0x9c>
    2fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2fbe:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc0:	61 15       	cp	r22, r1
    2fc2:	71 05       	cpc	r23, r1
    2fc4:	21 f0       	breq	.+8      	; 0x2fce <malloc+0x8e>
    2fc6:	fb 01       	movw	r30, r22
    2fc8:	93 83       	std	Z+3, r25	; 0x03
    2fca:	82 83       	std	Z+2, r24	; 0x02
    2fcc:	04 c0       	rjmp	.+8      	; 0x2fd6 <malloc+0x96>
    2fce:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <__flp+0x1>
    2fd2:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <__flp>
    2fd6:	fe 01       	movw	r30, r28
    2fd8:	32 96       	adiw	r30, 0x02	; 2
    2fda:	44 c0       	rjmp	.+136    	; 0x3064 <malloc+0x124>
    2fdc:	fe 01       	movw	r30, r28
    2fde:	e2 0f       	add	r30, r18
    2fe0:	f3 1f       	adc	r31, r19
    2fe2:	81 93       	st	Z+, r24
    2fe4:	91 93       	st	Z+, r25
    2fe6:	22 50       	subi	r18, 0x02	; 2
    2fe8:	31 09       	sbc	r19, r1
    2fea:	39 83       	std	Y+1, r19	; 0x01
    2fec:	28 83       	st	Y, r18
    2fee:	3a c0       	rjmp	.+116    	; 0x3064 <malloc+0x124>
    2ff0:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__brkval>
    2ff4:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__brkval+0x1>
    2ff8:	23 2b       	or	r18, r19
    2ffa:	41 f4       	brne	.+16     	; 0x300c <malloc+0xcc>
    2ffc:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__malloc_heap_start>
    3000:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__malloc_heap_start+0x1>
    3004:	30 93 03 02 	sts	0x0203, r19	; 0x800203 <__brkval+0x1>
    3008:	20 93 02 02 	sts	0x0202, r18	; 0x800202 <__brkval>
    300c:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__malloc_heap_end>
    3010:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__malloc_heap_end+0x1>
    3014:	21 15       	cp	r18, r1
    3016:	31 05       	cpc	r19, r1
    3018:	41 f4       	brne	.+16     	; 0x302a <malloc+0xea>
    301a:	2d b7       	in	r18, 0x3d	; 61
    301c:	3e b7       	in	r19, 0x3e	; 62
    301e:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <__malloc_margin>
    3022:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <__malloc_margin+0x1>
    3026:	24 1b       	sub	r18, r20
    3028:	35 0b       	sbc	r19, r21
    302a:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <__brkval>
    302e:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <__brkval+0x1>
    3032:	e2 17       	cp	r30, r18
    3034:	f3 07       	cpc	r31, r19
    3036:	a0 f4       	brcc	.+40     	; 0x3060 <malloc+0x120>
    3038:	2e 1b       	sub	r18, r30
    303a:	3f 0b       	sbc	r19, r31
    303c:	28 17       	cp	r18, r24
    303e:	39 07       	cpc	r19, r25
    3040:	78 f0       	brcs	.+30     	; 0x3060 <malloc+0x120>
    3042:	ac 01       	movw	r20, r24
    3044:	4e 5f       	subi	r20, 0xFE	; 254
    3046:	5f 4f       	sbci	r21, 0xFF	; 255
    3048:	24 17       	cp	r18, r20
    304a:	35 07       	cpc	r19, r21
    304c:	48 f0       	brcs	.+18     	; 0x3060 <malloc+0x120>
    304e:	4e 0f       	add	r20, r30
    3050:	5f 1f       	adc	r21, r31
    3052:	50 93 03 02 	sts	0x0203, r21	; 0x800203 <__brkval+0x1>
    3056:	40 93 02 02 	sts	0x0202, r20	; 0x800202 <__brkval>
    305a:	81 93       	st	Z+, r24
    305c:	91 93       	st	Z+, r25
    305e:	02 c0       	rjmp	.+4      	; 0x3064 <malloc+0x124>
    3060:	e0 e0       	ldi	r30, 0x00	; 0
    3062:	f0 e0       	ldi	r31, 0x00	; 0
    3064:	cf 01       	movw	r24, r30
    3066:	df 91       	pop	r29
    3068:	cf 91       	pop	r28
    306a:	1f 91       	pop	r17
    306c:	0f 91       	pop	r16
    306e:	08 95       	ret

00003070 <free>:
    3070:	cf 93       	push	r28
    3072:	df 93       	push	r29
    3074:	00 97       	sbiw	r24, 0x00	; 0
    3076:	09 f4       	brne	.+2      	; 0x307a <free+0xa>
    3078:	81 c0       	rjmp	.+258    	; 0x317c <free+0x10c>
    307a:	fc 01       	movw	r30, r24
    307c:	32 97       	sbiw	r30, 0x02	; 2
    307e:	13 82       	std	Z+3, r1	; 0x03
    3080:	12 82       	std	Z+2, r1	; 0x02
    3082:	a0 91 04 02 	lds	r26, 0x0204	; 0x800204 <__flp>
    3086:	b0 91 05 02 	lds	r27, 0x0205	; 0x800205 <__flp+0x1>
    308a:	10 97       	sbiw	r26, 0x00	; 0
    308c:	81 f4       	brne	.+32     	; 0x30ae <free+0x3e>
    308e:	20 81       	ld	r18, Z
    3090:	31 81       	ldd	r19, Z+1	; 0x01
    3092:	82 0f       	add	r24, r18
    3094:	93 1f       	adc	r25, r19
    3096:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__brkval>
    309a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__brkval+0x1>
    309e:	28 17       	cp	r18, r24
    30a0:	39 07       	cpc	r19, r25
    30a2:	51 f5       	brne	.+84     	; 0x30f8 <free+0x88>
    30a4:	f0 93 03 02 	sts	0x0203, r31	; 0x800203 <__brkval+0x1>
    30a8:	e0 93 02 02 	sts	0x0202, r30	; 0x800202 <__brkval>
    30ac:	67 c0       	rjmp	.+206    	; 0x317c <free+0x10c>
    30ae:	ed 01       	movw	r28, r26
    30b0:	20 e0       	ldi	r18, 0x00	; 0
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	ce 17       	cp	r28, r30
    30b6:	df 07       	cpc	r29, r31
    30b8:	40 f4       	brcc	.+16     	; 0x30ca <free+0x5a>
    30ba:	4a 81       	ldd	r20, Y+2	; 0x02
    30bc:	5b 81       	ldd	r21, Y+3	; 0x03
    30be:	9e 01       	movw	r18, r28
    30c0:	41 15       	cp	r20, r1
    30c2:	51 05       	cpc	r21, r1
    30c4:	f1 f0       	breq	.+60     	; 0x3102 <free+0x92>
    30c6:	ea 01       	movw	r28, r20
    30c8:	f5 cf       	rjmp	.-22     	; 0x30b4 <free+0x44>
    30ca:	d3 83       	std	Z+3, r29	; 0x03
    30cc:	c2 83       	std	Z+2, r28	; 0x02
    30ce:	40 81       	ld	r20, Z
    30d0:	51 81       	ldd	r21, Z+1	; 0x01
    30d2:	84 0f       	add	r24, r20
    30d4:	95 1f       	adc	r25, r21
    30d6:	c8 17       	cp	r28, r24
    30d8:	d9 07       	cpc	r29, r25
    30da:	59 f4       	brne	.+22     	; 0x30f2 <free+0x82>
    30dc:	88 81       	ld	r24, Y
    30de:	99 81       	ldd	r25, Y+1	; 0x01
    30e0:	84 0f       	add	r24, r20
    30e2:	95 1f       	adc	r25, r21
    30e4:	02 96       	adiw	r24, 0x02	; 2
    30e6:	91 83       	std	Z+1, r25	; 0x01
    30e8:	80 83       	st	Z, r24
    30ea:	8a 81       	ldd	r24, Y+2	; 0x02
    30ec:	9b 81       	ldd	r25, Y+3	; 0x03
    30ee:	93 83       	std	Z+3, r25	; 0x03
    30f0:	82 83       	std	Z+2, r24	; 0x02
    30f2:	21 15       	cp	r18, r1
    30f4:	31 05       	cpc	r19, r1
    30f6:	29 f4       	brne	.+10     	; 0x3102 <free+0x92>
    30f8:	f0 93 05 02 	sts	0x0205, r31	; 0x800205 <__flp+0x1>
    30fc:	e0 93 04 02 	sts	0x0204, r30	; 0x800204 <__flp>
    3100:	3d c0       	rjmp	.+122    	; 0x317c <free+0x10c>
    3102:	e9 01       	movw	r28, r18
    3104:	fb 83       	std	Y+3, r31	; 0x03
    3106:	ea 83       	std	Y+2, r30	; 0x02
    3108:	49 91       	ld	r20, Y+
    310a:	59 91       	ld	r21, Y+
    310c:	c4 0f       	add	r28, r20
    310e:	d5 1f       	adc	r29, r21
    3110:	ec 17       	cp	r30, r28
    3112:	fd 07       	cpc	r31, r29
    3114:	61 f4       	brne	.+24     	; 0x312e <free+0xbe>
    3116:	80 81       	ld	r24, Z
    3118:	91 81       	ldd	r25, Z+1	; 0x01
    311a:	84 0f       	add	r24, r20
    311c:	95 1f       	adc	r25, r21
    311e:	02 96       	adiw	r24, 0x02	; 2
    3120:	e9 01       	movw	r28, r18
    3122:	99 83       	std	Y+1, r25	; 0x01
    3124:	88 83       	st	Y, r24
    3126:	82 81       	ldd	r24, Z+2	; 0x02
    3128:	93 81       	ldd	r25, Z+3	; 0x03
    312a:	9b 83       	std	Y+3, r25	; 0x03
    312c:	8a 83       	std	Y+2, r24	; 0x02
    312e:	e0 e0       	ldi	r30, 0x00	; 0
    3130:	f0 e0       	ldi	r31, 0x00	; 0
    3132:	12 96       	adiw	r26, 0x02	; 2
    3134:	8d 91       	ld	r24, X+
    3136:	9c 91       	ld	r25, X
    3138:	13 97       	sbiw	r26, 0x03	; 3
    313a:	00 97       	sbiw	r24, 0x00	; 0
    313c:	19 f0       	breq	.+6      	; 0x3144 <free+0xd4>
    313e:	fd 01       	movw	r30, r26
    3140:	dc 01       	movw	r26, r24
    3142:	f7 cf       	rjmp	.-18     	; 0x3132 <free+0xc2>
    3144:	8d 91       	ld	r24, X+
    3146:	9c 91       	ld	r25, X
    3148:	11 97       	sbiw	r26, 0x01	; 1
    314a:	9d 01       	movw	r18, r26
    314c:	2e 5f       	subi	r18, 0xFE	; 254
    314e:	3f 4f       	sbci	r19, 0xFF	; 255
    3150:	82 0f       	add	r24, r18
    3152:	93 1f       	adc	r25, r19
    3154:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__brkval>
    3158:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__brkval+0x1>
    315c:	28 17       	cp	r18, r24
    315e:	39 07       	cpc	r19, r25
    3160:	69 f4       	brne	.+26     	; 0x317c <free+0x10c>
    3162:	30 97       	sbiw	r30, 0x00	; 0
    3164:	29 f4       	brne	.+10     	; 0x3170 <free+0x100>
    3166:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <__flp+0x1>
    316a:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <__flp>
    316e:	02 c0       	rjmp	.+4      	; 0x3174 <free+0x104>
    3170:	13 82       	std	Z+3, r1	; 0x03
    3172:	12 82       	std	Z+2, r1	; 0x02
    3174:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__brkval+0x1>
    3178:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__brkval>
    317c:	df 91       	pop	r29
    317e:	cf 91       	pop	r28
    3180:	08 95       	ret

00003182 <__do_global_dtors>:
    3182:	10 e0       	ldi	r17, 0x00	; 0
    3184:	c2 e6       	ldi	r28, 0x62	; 98
    3186:	d0 e0       	ldi	r29, 0x00	; 0
    3188:	04 c0       	rjmp	.+8      	; 0x3192 <__do_global_dtors+0x10>
    318a:	fe 01       	movw	r30, r28
    318c:	0e 94 41 17 	call	0x2e82	; 0x2e82 <__tablejump2__>
    3190:	21 96       	adiw	r28, 0x01	; 1
    3192:	c3 36       	cpi	r28, 0x63	; 99
    3194:	d1 07       	cpc	r29, r17
    3196:	c9 f7       	brne	.-14     	; 0x318a <__do_global_dtors+0x8>
    3198:	f8 94       	cli

0000319a <__stop_program>:
    319a:	ff cf       	rjmp	.-2      	; 0x319a <__stop_program>
