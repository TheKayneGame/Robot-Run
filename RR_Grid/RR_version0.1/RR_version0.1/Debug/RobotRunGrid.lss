
RobotRunGrid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008a  00800100  000030f0  00003184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000030f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ee  0080018a  0080018a  0000320e  2**0
                  ALLOC
  3 .stab         0000774c  00000000  00000000  00003210  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000a086  00000000  00000000  0000a95c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  000149e2  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00014a24  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000118  00000000  00000000  00014a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000025b2  00000000  00000000  00014b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000ce6  00000000  00000000  0001712e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001a71  00000000  00000000  00017e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000390  00000000  00000000  00019888  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000007fe  00000000  00000000  00019c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000fbf  00000000  00000000  0001a416  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000f0  00000000  00000000  0001b3d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__dtors_end>
       4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
       8:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
       c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      10:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      14:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      18:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      1c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      20:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      24:	0c 94 9f 10 	jmp	0x213e	; 0x213e <__vector_9>
      28:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      2c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      30:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      34:	0c 94 9a 0c 	jmp	0x1934	; 0x1934 <__vector_13>
      38:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      3c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      40:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      44:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      48:	0c 94 e1 0f 	jmp	0x1fc2	; 0x1fc2 <__vector_18>
      4c:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__vector_19>
      50:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      54:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      58:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      5c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      60:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      64:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      68:	d4 08       	sbc	r13, r4
      6a:	da 08       	sbc	r13, r10
      6c:	da 08       	sbc	r13, r10
      6e:	da 08       	sbc	r13, r10
      70:	da 08       	sbc	r13, r10
      72:	da 08       	sbc	r13, r10
      74:	da 08       	sbc	r13, r10
      76:	da 08       	sbc	r13, r10
      78:	c0 08       	sbc	r12, r0
      7a:	da 08       	sbc	r13, r10
      7c:	ca 08       	sbc	r12, r10
      7e:	da 08       	sbc	r13, r10
      80:	da 08       	sbc	r13, r10
      82:	da 08       	sbc	r13, r10
      84:	aa 08       	sbc	r10, r10
      86:	da 08       	sbc	r13, r10
      88:	da 08       	sbc	r13, r10
      8a:	b5 08       	sbc	r11, r5
      8c:	da 08       	sbc	r13, r10
      8e:	da 08       	sbc	r13, r10
      90:	da 08       	sbc	r13, r10
      92:	da 08       	sbc	r13, r10
      94:	da 08       	sbc	r13, r10
      96:	da 08       	sbc	r13, r10
      98:	da 08       	sbc	r13, r10
      9a:	da 08       	sbc	r13, r10
      9c:	da 08       	sbc	r13, r10
      9e:	da 08       	sbc	r13, r10
      a0:	da 08       	sbc	r13, r10
      a2:	da 08       	sbc	r13, r10
      a4:	da 08       	sbc	r13, r10
      a6:	da 08       	sbc	r13, r10
      a8:	9f 08       	sbc	r9, r15
      aa:	da 08       	sbc	r13, r10
      ac:	da 08       	sbc	r13, r10
      ae:	da 08       	sbc	r13, r10
      b0:	97 08       	sbc	r9, r7

000000b2 <__trampolines_end>:
      b2:	3e 66       	ori	r19, 0x6E	; 110
      b4:	33 32       	cpi	r19, 0x23	; 35
      b6:	3e 3e       	cpi	r19, 0xEE	; 238
      b8:	61 33       	cpi	r22, 0x31	; 49
      ba:	32 00       	.word	0x0032	; ????

000000bc <__ctors_end>:
      bc:	6a 11       	cpse	r22, r10

000000be <__dtors_end>:
      be:	11 24       	eor	r1, r1
      c0:	1f be       	out	0x3f, r1	; 63
      c2:	cf ef       	ldi	r28, 0xFF	; 255
      c4:	d8 e0       	ldi	r29, 0x08	; 8
      c6:	de bf       	out	0x3e, r29	; 62
      c8:	cd bf       	out	0x3d, r28	; 61

000000ca <__do_copy_data>:
      ca:	11 e0       	ldi	r17, 0x01	; 1
      cc:	a0 e0       	ldi	r26, 0x00	; 0
      ce:	b1 e0       	ldi	r27, 0x01	; 1
      d0:	e0 ef       	ldi	r30, 0xF0	; 240
      d2:	f0 e3       	ldi	r31, 0x30	; 48
      d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x10>
      d6:	05 90       	lpm	r0, Z+
      d8:	0d 92       	st	X+, r0
      da:	aa 38       	cpi	r26, 0x8A	; 138
      dc:	b1 07       	cpc	r27, r17
      de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0xc>

000000e0 <__do_clear_bss>:
      e0:	22 e0       	ldi	r18, 0x02	; 2
      e2:	aa e8       	ldi	r26, 0x8A	; 138
      e4:	b1 e0       	ldi	r27, 0x01	; 1
      e6:	01 c0       	rjmp	.+2      	; 0xea <.do_clear_bss_start>

000000e8 <.do_clear_bss_loop>:
      e8:	1d 92       	st	X+, r1

000000ea <.do_clear_bss_start>:
      ea:	a8 37       	cpi	r26, 0x78	; 120
      ec:	b2 07       	cpc	r27, r18
      ee:	e1 f7       	brne	.-8      	; 0xe8 <.do_clear_bss_loop>
      f0:	0e 94 b5 06 	call	0xd6a	; 0xd6a <main>
      f4:	0c 94 6b 18 	jmp	0x30d6	; 0x30d6 <__do_global_dtors>

000000f8 <__bad_interrupt>:
      f8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fc <sortOrder>:
	temp = *secondValue;
	*secondValue = *firstValue;
	*firstValue = temp;
}

void sortOrder(int XC[10], int YC[10]) {                                                                   //Sorting algorithm, this sorts the coordinates of the given order
      fc:	2f 92       	push	r2
      fe:	3f 92       	push	r3
     100:	4f 92       	push	r4
     102:	5f 92       	push	r5
     104:	6f 92       	push	r6
     106:	7f 92       	push	r7
     108:	8f 92       	push	r8
     10a:	9f 92       	push	r9
     10c:	af 92       	push	r10
     10e:	bf 92       	push	r11
     110:	cf 92       	push	r12
     112:	df 92       	push	r13
     114:	ef 92       	push	r14
     116:	ff 92       	push	r15
     118:	0f 93       	push	r16
     11a:	1f 93       	push	r17
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
     120:	00 d0       	rcall	.+0      	; 0x122 <sortOrder+0x26>
     122:	00 d0       	rcall	.+0      	; 0x124 <sortOrder+0x28>
     124:	00 d0       	rcall	.+0      	; 0x126 <sortOrder+0x2a>
     126:	cd b7       	in	r28, 0x3d	; 61
     128:	de b7       	in	r29, 0x3e	; 62
     12a:	9a 83       	std	Y+2, r25	; 0x02
     12c:	89 83       	std	Y+1, r24	; 0x01
     12e:	66 2e       	mov	r6, r22
     130:	77 2e       	mov	r7, r23
			check = 1;
		}

	}

}
     132:	2d b7       	in	r18, 0x3d	; 61
     134:	3e b7       	in	r19, 0x3e	; 62
     136:	3c 83       	std	Y+4, r19	; 0x04
     138:	2b 83       	std	Y+3, r18	; 0x03
	*firstValue = temp;
}

void sortOrder(int XC[10], int YC[10]) {                                                                   //Sorting algorithm, this sorts the coordinates of the given order
	int check = 0, orderCorrect;
	int sum[sizeOfOrder];
     13a:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <sizeOfOrder>
     13e:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <sizeOfOrder+0x1>
     142:	bc 01       	movw	r22, r24
     144:	66 0f       	add	r22, r22
     146:	77 1f       	adc	r23, r23
     148:	ad b7       	in	r26, 0x3d	; 61
     14a:	be b7       	in	r27, 0x3e	; 62
     14c:	a6 1b       	sub	r26, r22
     14e:	b7 0b       	sbc	r27, r23
     150:	0f b6       	in	r0, 0x3f	; 63
     152:	f8 94       	cli
     154:	be bf       	out	0x3e, r27	; 62
     156:	0f be       	out	0x3f, r0	; 63
     158:	ad bf       	out	0x3d, r26	; 61
     15a:	11 96       	adiw	r26, 0x01	; 1
     15c:	3a 2e       	mov	r3, r26
     15e:	4b 2e       	mov	r4, r27

	for (int j = 0; j < (sizeOfOrder-1); j++) {
     160:	01 97       	sbiw	r24, 0x01	; 1
     162:	18 16       	cp	r1, r24
     164:	19 06       	cpc	r1, r25
     166:	0c f0       	brlt	.+2      	; 0x16a <sortOrder+0x6e>
     168:	9f c0       	rjmp	.+318    	; 0x2a8 <sortOrder+0x1ac>
     16a:	e9 81       	ldd	r30, Y+1	; 0x01
     16c:	fa 81       	ldd	r31, Y+2	; 0x02
     16e:	46 2d       	mov	r20, r6
     170:	57 2d       	mov	r21, r7
     172:	62 50       	subi	r22, 0x02	; 2
     174:	71 09       	sbc	r23, r1
     176:	6e 0f       	add	r22, r30
     178:	7f 1f       	adc	r23, r31
     17a:	8d 01       	movw	r16, r26
		sum[j] = XC[j] + YC[j];
     17c:	21 91       	ld	r18, Z+
     17e:	31 91       	ld	r19, Z+
     180:	da 01       	movw	r26, r20
     182:	8d 91       	ld	r24, X+
     184:	9d 91       	ld	r25, X+
     186:	ad 01       	movw	r20, r26
     188:	82 0f       	add	r24, r18
     18a:	93 1f       	adc	r25, r19
     18c:	d8 01       	movw	r26, r16
     18e:	8d 93       	st	X+, r24
     190:	9d 93       	st	X+, r25
     192:	8d 01       	movw	r16, r26

void sortOrder(int XC[10], int YC[10]) {                                                                   //Sorting algorithm, this sorts the coordinates of the given order
	int check = 0, orderCorrect;
	int sum[sizeOfOrder];

	for (int j = 0; j < (sizeOfOrder-1); j++) {
     194:	e6 17       	cp	r30, r22
     196:	f7 07       	cpc	r31, r23
     198:	89 f7       	brne	.-30     	; 0x17c <sortOrder+0x80>
     19a:	86 c0       	rjmp	.+268    	; 0x2a8 <sortOrder+0x1ac>
		sum[j] = XC[j] + YC[j];
	}
	while (check != 1) {
		orderCorrect = 1;
		for (int i = 0; i < (sizeOfOrder-1); i++) {
			if (sum[i] > sum[i + 1]) {
     19c:	20 81       	ld	r18, Z
     19e:	31 81       	ldd	r19, Z+1	; 0x01
     1a0:	bf ef       	ldi	r27, 0xFF	; 255
     1a2:	cb 1a       	sub	r12, r27
     1a4:	db 0a       	sbc	r13, r27
     1a6:	42 81       	ldd	r20, Z+2	; 0x02
     1a8:	53 81       	ldd	r21, Z+3	; 0x03
     1aa:	42 17       	cp	r20, r18
     1ac:	53 07       	cpc	r21, r19
     1ae:	24 f5       	brge	.+72     	; 0x1f8 <sortOrder+0xfc>

void swapOne(int *firstValue, int *secondValue) {                                                  //Swap function for the distance array
	int temp;

	temp = *secondValue;
	*secondValue = *firstValue;
     1b0:	33 83       	std	Z+3, r19	; 0x03
     1b2:	22 83       	std	Z+2, r18	; 0x02
	*firstValue = temp;
     1b4:	51 83       	std	Z+1, r21	; 0x01
     1b6:	40 83       	st	Z, r20


void swapTwo( int *firstXValue, int *secondXValue, int *firstYValue, int *secondYValue){                //Swap function for the coordinates
	int temp;

	temp = *secondXValue;                                                                               //Swap X-Coordinates
     1b8:	dc 01       	movw	r26, r24
     1ba:	12 96       	adiw	r26, 0x02	; 2
     1bc:	2d 91       	ld	r18, X+
     1be:	3c 91       	ld	r19, X
     1c0:	13 97       	sbiw	r26, 0x03	; 3
	*secondXValue = *firstXValue;
     1c2:	4d 91       	ld	r20, X+
     1c4:	5c 91       	ld	r21, X
     1c6:	11 97       	sbiw	r26, 0x01	; 1
     1c8:	13 96       	adiw	r26, 0x03	; 3
     1ca:	5c 93       	st	X, r21
     1cc:	4e 93       	st	-X, r20
     1ce:	12 97       	sbiw	r26, 0x02	; 2
	*firstXValue = temp;
     1d0:	2d 93       	st	X+, r18
     1d2:	3c 93       	st	X, r19

	temp = *secondYValue;                                                                               //Swap Y-Coordinates
     1d4:	ad 81       	ldd	r26, Y+5	; 0x05
     1d6:	be 81       	ldd	r27, Y+6	; 0x06
     1d8:	12 96       	adiw	r26, 0x02	; 2
     1da:	2d 91       	ld	r18, X+
     1dc:	3c 91       	ld	r19, X
     1de:	13 97       	sbiw	r26, 0x03	; 3
	*secondYValue = *firstYValue;
     1e0:	4d 91       	ld	r20, X+
     1e2:	5c 91       	ld	r21, X
     1e4:	11 97       	sbiw	r26, 0x01	; 1
     1e6:	13 96       	adiw	r26, 0x03	; 3
     1e8:	5c 93       	st	X, r21
     1ea:	4e 93       	st	-X, r20
     1ec:	12 97       	sbiw	r26, 0x02	; 2
	*firstYValue = temp;
     1ee:	2d 93       	st	X+, r18
     1f0:	3c 93       	st	X, r19
		orderCorrect = 1;
		for (int i = 0; i < (sizeOfOrder-1); i++) {
			if (sum[i] > sum[i + 1]) {
				swapOne(&sum[i], &sum[i + 1]);
				swapTwo(&XC[i], &XC[i + 1], &YC[i], &YC[i + 1]);
				orderCorrect = 0;
     1f2:	a8 2c       	mov	r10, r8
     1f4:	b9 2c       	mov	r11, r9
     1f6:	36 c0       	rjmp	.+108    	; 0x264 <sortOrder+0x168>
				} else if ((sum[i] == sum[i + 1]) && (YC[i] == YC[i + 1])) {
     1f8:	24 17       	cp	r18, r20
     1fa:	35 07       	cpc	r19, r21
     1fc:	99 f5       	brne	.+102    	; 0x264 <sortOrder+0x168>
     1fe:	ed 80       	ldd	r14, Y+5	; 0x05
     200:	fe 80       	ldd	r15, Y+6	; 0x06
     202:	d7 01       	movw	r26, r14
     204:	0d 91       	ld	r16, X+
     206:	1c 91       	ld	r17, X
     208:	11 97       	sbiw	r26, 0x01	; 1
     20a:	12 96       	adiw	r26, 0x02	; 2
     20c:	4d 91       	ld	r20, X+
     20e:	5c 91       	ld	r21, X
     210:	13 97       	sbiw	r26, 0x03	; 3
     212:	04 17       	cp	r16, r20
     214:	15 07       	cpc	r17, r21
     216:	31 f5       	brne	.+76     	; 0x264 <sortOrder+0x168>
				if (XC[i] < XC[i + 1]) {
     218:	dc 01       	movw	r26, r24
     21a:	0d 91       	ld	r16, X+
     21c:	1c 91       	ld	r17, X
     21e:	11 97       	sbiw	r26, 0x01	; 1
     220:	12 96       	adiw	r26, 0x02	; 2
     222:	4d 91       	ld	r20, X+
     224:	5c 91       	ld	r21, X
     226:	13 97       	sbiw	r26, 0x03	; 3
     228:	04 17       	cp	r16, r20
     22a:	15 07       	cpc	r17, r21
     22c:	dc f4       	brge	.+54     	; 0x264 <sortOrder+0x168>

void swapOne(int *firstValue, int *secondValue) {                                                  //Swap function for the distance array
	int temp;

	temp = *secondValue;
	*secondValue = *firstValue;
     22e:	33 83       	std	Z+3, r19	; 0x03
     230:	22 83       	std	Z+2, r18	; 0x02
	*firstValue = temp;
     232:	31 83       	std	Z+1, r19	; 0x01
     234:	20 83       	st	Z, r18

void swapTwo( int *firstXValue, int *secondXValue, int *firstYValue, int *secondYValue){                //Swap function for the coordinates
	int temp;

	temp = *secondXValue;                                                                               //Swap X-Coordinates
	*secondXValue = *firstXValue;
     236:	dc 01       	movw	r26, r24
     238:	13 96       	adiw	r26, 0x03	; 3
     23a:	1c 93       	st	X, r17
     23c:	0e 93       	st	-X, r16
     23e:	12 97       	sbiw	r26, 0x02	; 2
	*firstXValue = temp;
     240:	4d 93       	st	X+, r20
     242:	5c 93       	st	X, r21

	temp = *secondYValue;                                                                               //Swap Y-Coordinates
     244:	d7 01       	movw	r26, r14
     246:	12 96       	adiw	r26, 0x02	; 2
     248:	2d 91       	ld	r18, X+
     24a:	3c 91       	ld	r19, X
     24c:	13 97       	sbiw	r26, 0x03	; 3
	*secondYValue = *firstYValue;
     24e:	4d 91       	ld	r20, X+
     250:	5c 91       	ld	r21, X
     252:	11 97       	sbiw	r26, 0x01	; 1
     254:	13 96       	adiw	r26, 0x03	; 3
     256:	5c 93       	st	X, r21
     258:	4e 93       	st	-X, r20
     25a:	12 97       	sbiw	r26, 0x02	; 2
	*firstYValue = temp;
     25c:	2d 93       	st	X+, r18
     25e:	3c 93       	st	X, r19
				orderCorrect = 0;
				} else if ((sum[i] == sum[i + 1]) && (YC[i] == YC[i + 1])) {
				if (XC[i] < XC[i + 1]) {
					swapOne(&sum[i], &sum[i + 1]);
					swapTwo(&XC[i], &XC[i + 1], &YC[i], &YC[i + 1]);
					orderCorrect = 0;
     260:	a8 2c       	mov	r10, r8
     262:	b9 2c       	mov	r11, r9
     264:	32 96       	adiw	r30, 0x02	; 2
     266:	02 96       	adiw	r24, 0x02	; 2
     268:	2d 81       	ldd	r18, Y+5	; 0x05
     26a:	3e 81       	ldd	r19, Y+6	; 0x06
     26c:	2e 5f       	subi	r18, 0xFE	; 254
     26e:	3f 4f       	sbci	r19, 0xFF	; 255
     270:	3e 83       	std	Y+6, r19	; 0x06
     272:	2d 83       	std	Y+5, r18	; 0x05
	for (int j = 0; j < (sizeOfOrder-1); j++) {
		sum[j] = XC[j] + YC[j];
	}
	while (check != 1) {
		orderCorrect = 1;
		for (int i = 0; i < (sizeOfOrder-1); i++) {
     274:	20 91 f7 01 	lds	r18, 0x01F7	; 0x8001f7 <sizeOfOrder>
     278:	30 91 f8 01 	lds	r19, 0x01F8	; 0x8001f8 <sizeOfOrder+0x1>
     27c:	21 50       	subi	r18, 0x01	; 1
     27e:	31 09       	sbc	r19, r1
     280:	c2 16       	cp	r12, r18
     282:	d3 06       	cpc	r13, r19
     284:	0c f4       	brge	.+2      	; 0x288 <sortOrder+0x18c>
     286:	8a cf       	rjmp	.-236    	; 0x19c <sortOrder+0xa0>
					swapTwo(&XC[i], &XC[i + 1], &YC[i], &YC[i + 1]);
					orderCorrect = 0;
				}
			}
		}
		if (orderCorrect == 1) {
     288:	aa 94       	dec	r10
     28a:	ab 28       	or	r10, r11
     28c:	99 f0       	breq	.+38     	; 0x2b4 <sortOrder+0x1b8>
     28e:	e3 2d       	mov	r30, r3
     290:	f4 2d       	mov	r31, r4
     292:	89 81       	ldd	r24, Y+1	; 0x01
     294:	9a 81       	ldd	r25, Y+2	; 0x02
     296:	a6 2d       	mov	r26, r6
     298:	b7 2d       	mov	r27, r7
				orderCorrect = 0;
				} else if ((sum[i] == sum[i + 1]) && (YC[i] == YC[i + 1])) {
				if (XC[i] < XC[i + 1]) {
					swapOne(&sum[i], &sum[i + 1]);
					swapTwo(&XC[i], &XC[i + 1], &YC[i], &YC[i + 1]);
					orderCorrect = 0;
     29a:	c1 2c       	mov	r12, r1
     29c:	d1 2c       	mov	r13, r1
     29e:	a5 2c       	mov	r10, r5
     2a0:	b2 2c       	mov	r11, r2
     2a2:	be 83       	std	Y+6, r27	; 0x06
     2a4:	ad 83       	std	Y+5, r26	; 0x05
     2a6:	e6 cf       	rjmp	.-52     	; 0x274 <sortOrder+0x178>
     2a8:	55 24       	eor	r5, r5
     2aa:	53 94       	inc	r5
     2ac:	21 2c       	mov	r2, r1
     2ae:	81 2c       	mov	r8, r1
     2b0:	91 2c       	mov	r9, r1
     2b2:	ed cf       	rjmp	.-38     	; 0x28e <sortOrder+0x192>
			check = 1;
		}

	}

}
     2b4:	8b 81       	ldd	r24, Y+3	; 0x03
     2b6:	9c 81       	ldd	r25, Y+4	; 0x04
     2b8:	0f b6       	in	r0, 0x3f	; 63
     2ba:	f8 94       	cli
     2bc:	9e bf       	out	0x3e, r25	; 62
     2be:	0f be       	out	0x3f, r0	; 63
     2c0:	8d bf       	out	0x3d, r24	; 61
     2c2:	26 96       	adiw	r28, 0x06	; 6
     2c4:	0f b6       	in	r0, 0x3f	; 63
     2c6:	f8 94       	cli
     2c8:	de bf       	out	0x3e, r29	; 62
     2ca:	0f be       	out	0x3f, r0	; 63
     2cc:	cd bf       	out	0x3d, r28	; 61
     2ce:	df 91       	pop	r29
     2d0:	cf 91       	pop	r28
     2d2:	1f 91       	pop	r17
     2d4:	0f 91       	pop	r16
     2d6:	ff 90       	pop	r15
     2d8:	ef 90       	pop	r14
     2da:	df 90       	pop	r13
     2dc:	cf 90       	pop	r12
     2de:	bf 90       	pop	r11
     2e0:	af 90       	pop	r10
     2e2:	9f 90       	pop	r9
     2e4:	8f 90       	pop	r8
     2e6:	7f 90       	pop	r7
     2e8:	6f 90       	pop	r6
     2ea:	5f 90       	pop	r5
     2ec:	4f 90       	pop	r4
     2ee:	3f 90       	pop	r3
     2f0:	2f 90       	pop	r2
     2f2:	08 95       	ret

000002f4 <readGrid>:

void readGrid(int routes[5][8]){
     2f4:	fc 01       	movw	r30, r24
	
	routes[0][0] = 2;                                                                         //Home to grid
     2f6:	42 e0       	ldi	r20, 0x02	; 2
     2f8:	50 e0       	ldi	r21, 0x00	; 0
     2fa:	51 83       	std	Z+1, r21	; 0x01
     2fc:	40 83       	st	Z, r20
	routes[0][1] = 1;
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	93 83       	std	Z+3, r25	; 0x03
     304:	82 83       	std	Z+2, r24	; 0x02
	routes[0][2] = 2;
     306:	55 83       	std	Z+5, r21	; 0x05
     308:	44 83       	std	Z+4, r20	; 0x04
	routes[0][3] = 1;
     30a:	97 83       	std	Z+7, r25	; 0x07
     30c:	86 83       	std	Z+6, r24	; 0x06
	routes[0][4] = 1;
     30e:	91 87       	std	Z+9, r25	; 0x09
     310:	80 87       	std	Z+8, r24	; 0x08
	routes[0][5] = 3;
     312:	23 e0       	ldi	r18, 0x03	; 3
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	33 87       	std	Z+11, r19	; 0x0b
     318:	22 87       	std	Z+10, r18	; 0x0a
	routes[0][6] = 2;
     31a:	55 87       	std	Z+13, r21	; 0x0d
     31c:	44 87       	std	Z+12, r20	; 0x0c
	routes[0][7] = 5;
     31e:	65 e0       	ldi	r22, 0x05	; 5
     320:	70 e0       	ldi	r23, 0x00	; 0
     322:	77 87       	std	Z+15, r23	; 0x0f
     324:	66 87       	std	Z+14, r22	; 0x0e
	
	routes[1][0] = 1;                                                                        //Home to charge point
     326:	91 8b       	std	Z+17, r25	; 0x11
     328:	80 8b       	std	Z+16, r24	; 0x10
	routes[1][1] = 1;
     32a:	93 8b       	std	Z+19, r25	; 0x13
     32c:	82 8b       	std	Z+18, r24	; 0x12
	routes[1][2] = 5;
     32e:	75 8b       	std	Z+21, r23	; 0x15
     330:	64 8b       	std	Z+20, r22	; 0x14
	
	routes[2][0] = 3;                                                                        //Grid to charge point
     332:	31 a3       	std	Z+33, r19	; 0x21
     334:	20 a3       	std	Z+32, r18	; 0x20
	routes[2][1] = 3;
     336:	33 a3       	std	Z+35, r19	; 0x23
     338:	22 a3       	std	Z+34, r18	; 0x22
	routes[2][2] = 5;
     33a:	75 a3       	std	Z+37, r23	; 0x25
     33c:	64 a3       	std	Z+36, r22	; 0x24
	
	routes[3][0] = 3;                                                                        //Grid to home
     33e:	31 ab       	std	Z+49, r19	; 0x31
     340:	20 ab       	std	Z+48, r18	; 0x30
	routes[3][1] = 1;
     342:	93 ab       	std	Z+51, r25	; 0x33
     344:	82 ab       	std	Z+50, r24	; 0x32
	routes[3][2] = 2;
     346:	55 ab       	std	Z+53, r21	; 0x35
     348:	44 ab       	std	Z+52, r20	; 0x34
	routes[3][3] = 1;
     34a:	97 ab       	std	Z+55, r25	; 0x37
     34c:	86 ab       	std	Z+54, r24	; 0x36
	routes[3][4] = 2;
     34e:	51 af       	std	Z+57, r21	; 0x39
     350:	40 af       	std	Z+56, r20	; 0x38
	routes[3][5] = 5;
     352:	73 af       	std	Z+59, r23	; 0x3b
     354:	62 af       	std	Z+58, r22	; 0x3a
	
	routes[4][0] = 3;                                                                       //Charge point to grid
     356:	e0 5c       	subi	r30, 0xC0	; 192
     358:	ff 4f       	sbci	r31, 0xFF	; 255
     35a:	31 83       	std	Z+1, r19	; 0x01
     35c:	20 83       	st	Z, r18
	routes[4][1] = 2;
     35e:	53 83       	std	Z+3, r21	; 0x03
     360:	42 83       	std	Z+2, r20	; 0x02
	routes[4][2] = 3;
     362:	35 83       	std	Z+5, r19	; 0x05
     364:	24 83       	std	Z+4, r18	; 0x04
	routes[4][3] = 5;
     366:	77 83       	std	Z+7, r23	; 0x07
     368:	66 83       	std	Z+6, r22	; 0x06
     36a:	08 95       	ret

0000036c <setDirection>:
	
}

void setDirection(direction directionDesired, direction *directionCurrent){
     36c:	ef 92       	push	r14
     36e:	ff 92       	push	r15
     370:	1f 93       	push	r17
     372:	cf 93       	push	r28
     374:	df 93       	push	r29
     376:	cd b7       	in	r28, 0x3d	; 61
     378:	de b7       	in	r29, 0x3e	; 62
     37a:	60 97       	sbiw	r28, 0x10	; 16
     37c:	0f b6       	in	r0, 0x3f	; 63
     37e:	f8 94       	cli
     380:	de bf       	out	0x3e, r29	; 62
     382:	0f be       	out	0x3f, r0	; 63
     384:	cd bf       	out	0x3d, r28	; 61
	rotation orientation[4][4] ={{X, R, T, L},
     386:	90 e1       	ldi	r25, 0x10	; 16
     388:	ec e1       	ldi	r30, 0x1C	; 28
     38a:	f1 e0       	ldi	r31, 0x01	; 1
     38c:	de 01       	movw	r26, r28
     38e:	11 96       	adiw	r26, 0x01	; 1
     390:	01 90       	ld	r0, Z+
     392:	0d 92       	st	X+, r0
     394:	9a 95       	dec	r25
     396:	e1 f7       	brne	.-8      	; 0x390 <setDirection+0x24>
	{L, X, R, T},
	{T, L, X, R},
	{R, T, L, X}};
	
	if(*directionCurrent != directionDesired){
     398:	fb 01       	movw	r30, r22
     39a:	90 81       	ld	r25, Z
     39c:	98 17       	cp	r25, r24
     39e:	09 f4       	brne	.+2      	; 0x3a2 <setDirection+0x36>
     3a0:	4c c0       	rjmp	.+152    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     3a2:	7b 01       	movw	r14, r22
     3a4:	18 2f       	mov	r17, r24
		switch(orientation[directionDesired][*directionCurrent]){
     3a6:	e1 e0       	ldi	r30, 0x01	; 1
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	ec 0f       	add	r30, r28
     3ac:	fd 1f       	adc	r31, r29
     3ae:	84 e0       	ldi	r24, 0x04	; 4
     3b0:	18 9f       	mul	r17, r24
     3b2:	e0 0d       	add	r30, r0
     3b4:	f1 1d       	adc	r31, r1
     3b6:	11 24       	eor	r1, r1
     3b8:	e9 0f       	add	r30, r25
     3ba:	f1 1d       	adc	r31, r1
     3bc:	80 81       	ld	r24, Z
     3be:	81 30       	cpi	r24, 0x01	; 1
     3c0:	21 f0       	breq	.+8      	; 0x3ca <setDirection+0x5e>
     3c2:	48 f1       	brcs	.+82     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     3c4:	82 30       	cpi	r24, 0x02	; 2
     3c6:	a1 f0       	breq	.+40     	; 0x3f0 <setDirection+0x84>
     3c8:	38 c0       	rjmp	.+112    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			case R:
			
			set_motors(60,-60);
     3ca:	64 ec       	ldi	r22, 0xC4	; 196
     3cc:	7f ef       	ldi	r23, 0xFF	; 255
     3ce:	8c e3       	ldi	r24, 0x3C	; 60
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <set_motors>
			delay_ms(270);
     3d6:	8e e0       	ldi	r24, 0x0E	; 14
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay_ms>
			set_motors(0,0);
     3de:	60 e0       	ldi	r22, 0x00	; 0
     3e0:	70 e0       	ldi	r23, 0x00	; 0
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <set_motors>
			
			//motorControl(60, 'R', 0.25);

			*directionCurrent = directionDesired;
     3ea:	f7 01       	movw	r30, r14
     3ec:	10 83       	st	Z, r17
			break;
     3ee:	25 c0       	rjmp	.+74     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			case L:
			
			set_motors(-60,60);
     3f0:	6c e3       	ldi	r22, 0x3C	; 60
     3f2:	70 e0       	ldi	r23, 0x00	; 0
     3f4:	84 ec       	ldi	r24, 0xC4	; 196
     3f6:	9f ef       	ldi	r25, 0xFF	; 255
     3f8:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <set_motors>
			delay_ms(270);
     3fc:	8e e0       	ldi	r24, 0x0E	; 14
     3fe:	91 e0       	ldi	r25, 0x01	; 1
     400:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay_ms>
			set_motors(0,0);
     404:	60 e0       	ldi	r22, 0x00	; 0
     406:	70 e0       	ldi	r23, 0x00	; 0
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <set_motors>
			
			//motorControl(60, 'L', 0.25);

			*directionCurrent = directionDesired;
     410:	f7 01       	movw	r30, r14
     412:	10 83       	st	Z, r17
			break;
     414:	12 c0       	rjmp	.+36     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			case T:
			
			set_motors(60,-60);
     416:	64 ec       	ldi	r22, 0xC4	; 196
     418:	7f ef       	ldi	r23, 0xFF	; 255
     41a:	8c e3       	ldi	r24, 0x3C	; 60
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <set_motors>
			delay_ms(540);
     422:	8c e1       	ldi	r24, 0x1C	; 28
     424:	92 e0       	ldi	r25, 0x02	; 2
     426:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay_ms>
			set_motors(0,0);
     42a:	60 e0       	ldi	r22, 0x00	; 0
     42c:	70 e0       	ldi	r23, 0x00	; 0
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <set_motors>
			
			//motorControl(60, 'R', 0.25);
			//motorControl(60, 'R', 0.25);

			*directionCurrent = directionDesired;
     436:	f7 01       	movw	r30, r14
     438:	10 83       	st	Z, r17
			break;
			clear();
		}
	}
	
}
     43a:	60 96       	adiw	r28, 0x10	; 16
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	f8 94       	cli
     440:	de bf       	out	0x3e, r29	; 62
     442:	0f be       	out	0x3f, r0	; 63
     444:	cd bf       	out	0x3d, r28	; 61
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	1f 91       	pop	r17
     44c:	ff 90       	pop	r15
     44e:	ef 90       	pop	r14
     450:	08 95       	ret

00000452 <driveRoute>:

void driveRoute(int routes[5][8], int route, int *intersectNum){
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
     456:	ea 01       	movw	r28, r20

	switch(routes[route][*intersectNum]){
     458:	62 95       	swap	r22
     45a:	72 95       	swap	r23
     45c:	70 7f       	andi	r23, 0xF0	; 240
     45e:	76 27       	eor	r23, r22
     460:	60 7f       	andi	r22, 0xF0	; 240
     462:	76 27       	eor	r23, r22
     464:	86 0f       	add	r24, r22
     466:	97 1f       	adc	r25, r23
     468:	28 81       	ld	r18, Y
     46a:	39 81       	ldd	r19, Y+1	; 0x01
     46c:	22 0f       	add	r18, r18
     46e:	33 1f       	adc	r19, r19
     470:	fc 01       	movw	r30, r24
     472:	e2 0f       	add	r30, r18
     474:	f3 1f       	adc	r31, r19
     476:	80 81       	ld	r24, Z
     478:	91 81       	ldd	r25, Z+1	; 0x01
     47a:	82 30       	cpi	r24, 0x02	; 2
     47c:	91 05       	cpc	r25, r1
     47e:	91 f1       	breq	.+100    	; 0x4e4 <driveRoute+0x92>
     480:	1c f4       	brge	.+6      	; 0x488 <driveRoute+0x36>
     482:	01 97       	sbiw	r24, 0x01	; 1
     484:	49 f0       	breq	.+18     	; 0x498 <driveRoute+0x46>
     486:	80 c0       	rjmp	.+256    	; 0x588 <driveRoute+0x136>
     488:	83 30       	cpi	r24, 0x03	; 3
     48a:	91 05       	cpc	r25, r1
     48c:	09 f4       	brne	.+2      	; 0x490 <driveRoute+0x3e>
     48e:	50 c0       	rjmp	.+160    	; 0x530 <driveRoute+0xde>
     490:	05 97       	sbiw	r24, 0x05	; 5
     492:	09 f4       	brne	.+2      	; 0x496 <driveRoute+0x44>
     494:	63 c0       	rjmp	.+198    	; 0x55c <driveRoute+0x10a>
     496:	78 c0       	rjmp	.+240    	; 0x588 <driveRoute+0x136>
		case 1:
		set_motors(60,60);
     498:	6c e3       	ldi	r22, 0x3C	; 60
     49a:	70 e0       	ldi	r23, 0x00	; 0
     49c:	8c e3       	ldi	r24, 0x3C	; 60
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <set_motors>
		delay_ms(180);
     4a4:	84 eb       	ldi	r24, 0xB4	; 180
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay_ms>
		set_motors(0,0);
     4ac:	60 e0       	ldi	r22, 0x00	; 0
     4ae:	70 e0       	ldi	r23, 0x00	; 0
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <set_motors>
		
		//motorControl(60, 'R', 0.25);
		
		set_motors(60,-60);
     4b8:	64 ec       	ldi	r22, 0xC4	; 196
     4ba:	7f ef       	ldi	r23, 0xFF	; 255
     4bc:	8c e3       	ldi	r24, 0x3C	; 60
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <set_motors>
		delay_ms(280);
     4c4:	88 e1       	ldi	r24, 0x18	; 24
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay_ms>
		set_motors(0,0);
     4cc:	60 e0       	ldi	r22, 0x00	; 0
     4ce:	70 e0       	ldi	r23, 0x00	; 0
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <set_motors>
		
		*intersectNum = *intersectNum + 1;
     4d8:	88 81       	ld	r24, Y
     4da:	99 81       	ldd	r25, Y+1	; 0x01
     4dc:	01 96       	adiw	r24, 0x01	; 1
     4de:	99 83       	std	Y+1, r25	; 0x01
     4e0:	88 83       	st	Y, r24
		break;
     4e2:	52 c0       	rjmp	.+164    	; 0x588 <driveRoute+0x136>
		case 2:
		set_motors(60,60);
     4e4:	6c e3       	ldi	r22, 0x3C	; 60
     4e6:	70 e0       	ldi	r23, 0x00	; 0
     4e8:	8c e3       	ldi	r24, 0x3C	; 60
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <set_motors>
		delay_ms(180);
     4f0:	84 eb       	ldi	r24, 0xB4	; 180
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay_ms>
		set_motors(0,0);
     4f8:	60 e0       	ldi	r22, 0x00	; 0
     4fa:	70 e0       	ldi	r23, 0x00	; 0
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <set_motors>
		
		//motorControl(60, 'L', 0.25);
		
		set_motors(-60,60);
     504:	6c e3       	ldi	r22, 0x3C	; 60
     506:	70 e0       	ldi	r23, 0x00	; 0
     508:	84 ec       	ldi	r24, 0xC4	; 196
     50a:	9f ef       	ldi	r25, 0xFF	; 255
     50c:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <set_motors>
		delay_ms(280);
     510:	88 e1       	ldi	r24, 0x18	; 24
     512:	91 e0       	ldi	r25, 0x01	; 1
     514:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay_ms>
		set_motors(0,0);
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	70 e0       	ldi	r23, 0x00	; 0
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <set_motors>
		
		*intersectNum = *intersectNum + 1;
     524:	88 81       	ld	r24, Y
     526:	99 81       	ldd	r25, Y+1	; 0x01
     528:	01 96       	adiw	r24, 0x01	; 1
     52a:	99 83       	std	Y+1, r25	; 0x01
     52c:	88 83       	st	Y, r24
		break;
     52e:	2c c0       	rjmp	.+88     	; 0x588 <driveRoute+0x136>
		case 3:
		set_motors(60,60);
     530:	6c e3       	ldi	r22, 0x3C	; 60
     532:	70 e0       	ldi	r23, 0x00	; 0
     534:	8c e3       	ldi	r24, 0x3C	; 60
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <set_motors>
		delay_ms(180);
     53c:	84 eb       	ldi	r24, 0xB4	; 180
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay_ms>
		set_motors(0,0);
     544:	60 e0       	ldi	r22, 0x00	; 0
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <set_motors>
		*intersectNum = *intersectNum + 1;
     550:	88 81       	ld	r24, Y
     552:	99 81       	ldd	r25, Y+1	; 0x01
     554:	01 96       	adiw	r24, 0x01	; 1
     556:	99 83       	std	Y+1, r25	; 0x01
     558:	88 83       	st	Y, r24
		break;
     55a:	16 c0       	rjmp	.+44     	; 0x588 <driveRoute+0x136>
		case 5:
		set_motors(0,0);
     55c:	60 e0       	ldi	r22, 0x00	; 0
     55e:	70 e0       	ldi	r23, 0x00	; 0
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <set_motors>
		endOfRouteFlag = 1;
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <endOfRouteFlag+0x1>
     570:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <endOfRouteFlag>
		followLineFlag = 0;
     574:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <followLineFlag+0x1>
     578:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <followLineFlag>
		*intersectNum = 0;
     57c:	19 82       	std	Y+1, r1	; 0x01
     57e:	18 82       	st	Y, r1
		homeFlag = 1;
     580:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <homeFlag+0x1>
     584:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <homeFlag>

		break;
	}
}
     588:	df 91       	pop	r29
     58a:	cf 91       	pop	r28
     58c:	08 95       	ret

0000058e <getProduct>:

void getProduct(int orderX[10], int orderY[10], int *orderNum, int *xCoordinate, int *yCoordinate, int *x, direction *directionCurrent, direction *directionLast){
     58e:	2f 92       	push	r2
     590:	3f 92       	push	r3
     592:	4f 92       	push	r4
     594:	5f 92       	push	r5
     596:	6f 92       	push	r6
     598:	7f 92       	push	r7
     59a:	8f 92       	push	r8
     59c:	9f 92       	push	r9
     59e:	af 92       	push	r10
     5a0:	bf 92       	push	r11
     5a2:	cf 92       	push	r12
     5a4:	df 92       	push	r13
     5a6:	ef 92       	push	r14
     5a8:	ff 92       	push	r15
     5aa:	0f 93       	push	r16
     5ac:	1f 93       	push	r17
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
     5b2:	ec 01       	movw	r28, r24
     5b4:	3b 01       	movw	r6, r22
     5b6:	4a 01       	movw	r8, r20
     5b8:	59 01       	movw	r10, r18
     5ba:	27 01       	movw	r4, r14
     5bc:	16 01       	movw	r2, r12
	int endFlag = 0;
	clear();
     5be:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <clear>
	lcd_goto_xy(0,0);
     5c2:	60 e0       	ldi	r22, 0x00	; 0
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <lcd_goto_xy>
	print_long(*xCoordinate);
     5ca:	d5 01       	movw	r26, r10
     5cc:	6d 91       	ld	r22, X+
     5ce:	7c 91       	ld	r23, X
     5d0:	07 2e       	mov	r0, r23
     5d2:	00 0c       	add	r0, r0
     5d4:	88 0b       	sbc	r24, r24
     5d6:	99 0b       	sbc	r25, r25
     5d8:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <print_long>
	lcd_goto_xy(0,1);
     5dc:	61 e0       	ldi	r22, 0x01	; 1
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <lcd_goto_xy>
	print_long(*yCoordinate);
     5e4:	f8 01       	movw	r30, r16
     5e6:	60 81       	ld	r22, Z
     5e8:	71 81       	ldd	r23, Z+1	; 0x01
     5ea:	07 2e       	mov	r0, r23
     5ec:	00 0c       	add	r0, r0
     5ee:	88 0b       	sbc	r24, r24
     5f0:	99 0b       	sbc	r25, r25
     5f2:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <print_long>
	
	if (productCollectedFlag == 0){
     5f6:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <productCollectedFlag>
     5fa:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <productCollectedFlag+0x1>
     5fe:	89 2b       	or	r24, r25
     600:	81 f4       	brne	.+32     	; 0x622 <getProduct+0x94>
		set_motors(60,60);
     602:	6c e3       	ldi	r22, 0x3C	; 60
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	8c e3       	ldi	r24, 0x3C	; 60
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <set_motors>
		delay_ms(170);
     60e:	8a ea       	ldi	r24, 0xAA	; 170
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay_ms>
		set_motors(0,0);
     616:	60 e0       	ldi	r22, 0x00	; 0
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <set_motors>
	}

	if (productCollectedFlag == 1){
     622:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <productCollectedFlag>
     626:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <productCollectedFlag+0x1>
     62a:	01 97       	sbiw	r24, 0x01	; 1
     62c:	21 f4       	brne	.+8      	; 0x636 <getProduct+0xa8>
		productCollectedFlag = 0;
     62e:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <productCollectedFlag+0x1>
     632:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <productCollectedFlag>
	}
	
	if(*orderNum == sizeOfOrder){
     636:	d4 01       	movw	r26, r8
     638:	cd 90       	ld	r12, X+
     63a:	dc 90       	ld	r13, X
     63c:	e0 90 f7 01 	lds	r14, 0x01F7	; 0x8001f7 <sizeOfOrder>
     640:	f0 90 f8 01 	lds	r15, 0x01F8	; 0x8001f8 <sizeOfOrder+0x1>
		endFlag = 1;
	}

	if(((orderX[*orderNum] != *xCoordinate) && (*x == 0)) || ((endFlag == 1) && (*xCoordinate != 4))){
     644:	f6 01       	movw	r30, r12
     646:	ee 0f       	add	r30, r30
     648:	ff 1f       	adc	r31, r31
     64a:	ec 0f       	add	r30, r28
     64c:	fd 1f       	adc	r31, r29
     64e:	20 81       	ld	r18, Z
     650:	31 81       	ldd	r19, Z+1	; 0x01
     652:	f5 01       	movw	r30, r10
     654:	80 81       	ld	r24, Z
     656:	91 81       	ldd	r25, Z+1	; 0x01
     658:	28 17       	cp	r18, r24
     65a:	39 07       	cpc	r19, r25
     65c:	09 f4       	brne	.+2      	; 0x660 <getProduct+0xd2>
     65e:	9d c1       	rjmp	.+826    	; 0x99a <__stack+0x9b>
     660:	d2 01       	movw	r26, r4
     662:	4d 91       	ld	r20, X+
     664:	5c 91       	ld	r21, X
     666:	45 2b       	or	r20, r21
     668:	29 f0       	breq	.+10     	; 0x674 <getProduct+0xe6>
     66a:	9b c1       	rjmp	.+822    	; 0x9a2 <__stack+0xa3>
     66c:	84 30       	cpi	r24, 0x04	; 4
     66e:	91 05       	cpc	r25, r1
     670:	09 f4       	brne	.+2      	; 0x674 <getProduct+0xe6>
     672:	7d c0       	rjmp	.+250    	; 0x76e <getProduct+0x1e0>
		if((orderX[*orderNum] > *xCoordinate) || ((*xCoordinate < 4) && (endFlag == 1))){
     674:	82 17       	cp	r24, r18
     676:	93 07       	cpc	r25, r19
     678:	2c f0       	brlt	.+10     	; 0x684 <getProduct+0xf6>
     67a:	04 97       	sbiw	r24, 0x04	; 4
     67c:	9c f5       	brge	.+102    	; 0x6e4 <getProduct+0x156>
     67e:	ce 14       	cp	r12, r14
     680:	df 04       	cpc	r13, r15
     682:	81 f5       	brne	.+96     	; 0x6e4 <getProduct+0x156>
			directionLast = directionCurrent;
			setDirection(W, directionCurrent);
     684:	b1 01       	movw	r22, r2
     686:	83 e0       	ldi	r24, 0x03	; 3
     688:	0e 94 b6 01 	call	0x36c	; 0x36c <setDirection>
			if (followLineFlag == 1){
     68c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <followLineFlag>
     690:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <followLineFlag+0x1>
     694:	01 97       	sbiw	r24, 0x01	; 1
     696:	51 f4       	brne	.+20     	; 0x6ac <getProduct+0x11e>
				*xCoordinate = *xCoordinate + 1;
     698:	f5 01       	movw	r30, r10
     69a:	80 81       	ld	r24, Z
     69c:	91 81       	ldd	r25, Z+1	; 0x01
     69e:	01 96       	adiw	r24, 0x01	; 1
     6a0:	91 83       	std	Z+1, r25	; 0x01
     6a2:	80 83       	st	Z, r24
				followLineFlag = 0;
     6a4:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <followLineFlag+0x1>
     6a8:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <followLineFlag>
			}
			
			clear();
     6ac:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <clear>
			lcd_goto_xy(0,0);
     6b0:	60 e0       	ldi	r22, 0x00	; 0
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <lcd_goto_xy>
			print_long(*xCoordinate);
     6b8:	d5 01       	movw	r26, r10
     6ba:	6d 91       	ld	r22, X+
     6bc:	7c 91       	ld	r23, X
     6be:	07 2e       	mov	r0, r23
     6c0:	00 0c       	add	r0, r0
     6c2:	88 0b       	sbc	r24, r24
     6c4:	99 0b       	sbc	r25, r25
     6c6:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <print_long>
			lcd_goto_xy(0,1);
     6ca:	61 e0       	ldi	r22, 0x01	; 1
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <lcd_goto_xy>
			print_long(*yCoordinate);
     6d2:	f8 01       	movw	r30, r16
     6d4:	60 81       	ld	r22, Z
     6d6:	71 81       	ldd	r23, Z+1	; 0x01
     6d8:	07 2e       	mov	r0, r23
     6da:	00 0c       	add	r0, r0
     6dc:	88 0b       	sbc	r24, r24
     6de:	99 0b       	sbc	r25, r25
     6e0:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <print_long>

		}
		if(((orderX[*orderNum] < *xCoordinate)) || ((*xCoordinate > 4) && (endFlag == 1))){
     6e4:	d5 01       	movw	r26, r10
     6e6:	2d 91       	ld	r18, X+
     6e8:	3c 91       	ld	r19, X
     6ea:	d4 01       	movw	r26, r8
     6ec:	ed 91       	ld	r30, X+
     6ee:	fc 91       	ld	r31, X
     6f0:	ee 0f       	add	r30, r30
     6f2:	ff 1f       	adc	r31, r31
     6f4:	ec 0f       	add	r30, r28
     6f6:	fd 1f       	adc	r31, r29
     6f8:	80 81       	ld	r24, Z
     6fa:	91 81       	ldd	r25, Z+1	; 0x01
     6fc:	82 17       	cp	r24, r18
     6fe:	93 07       	cpc	r25, r19
     700:	34 f0       	brlt	.+12     	; 0x70e <getProduct+0x180>
     702:	25 30       	cpi	r18, 0x05	; 5
     704:	31 05       	cpc	r19, r1
     706:	9c f1       	brlt	.+102    	; 0x76e <getProduct+0x1e0>
     708:	ce 14       	cp	r12, r14
     70a:	df 04       	cpc	r13, r15
     70c:	81 f5       	brne	.+96     	; 0x76e <getProduct+0x1e0>
			directionLast = directionCurrent;
			setDirection(E, directionCurrent);
     70e:	b1 01       	movw	r22, r2
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	0e 94 b6 01 	call	0x36c	; 0x36c <setDirection>
			
			if (followLineFlag == 1){
     716:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <followLineFlag>
     71a:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <followLineFlag+0x1>
     71e:	01 97       	sbiw	r24, 0x01	; 1
     720:	51 f4       	brne	.+20     	; 0x736 <getProduct+0x1a8>
				*xCoordinate = *xCoordinate - 1;
     722:	f5 01       	movw	r30, r10
     724:	80 81       	ld	r24, Z
     726:	91 81       	ldd	r25, Z+1	; 0x01
     728:	01 97       	sbiw	r24, 0x01	; 1
     72a:	91 83       	std	Z+1, r25	; 0x01
     72c:	80 83       	st	Z, r24
				followLineFlag = 0;
     72e:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <followLineFlag+0x1>
     732:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <followLineFlag>
			}
			clear();
     736:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <clear>
			lcd_goto_xy(0,0);
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <lcd_goto_xy>
			print_long(*xCoordinate);
     742:	d5 01       	movw	r26, r10
     744:	6d 91       	ld	r22, X+
     746:	7c 91       	ld	r23, X
     748:	07 2e       	mov	r0, r23
     74a:	00 0c       	add	r0, r0
     74c:	88 0b       	sbc	r24, r24
     74e:	99 0b       	sbc	r25, r25
     750:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <print_long>
			lcd_goto_xy(0,1);
     754:	61 e0       	ldi	r22, 0x01	; 1
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <lcd_goto_xy>
			print_long(*yCoordinate);
     75c:	f8 01       	movw	r30, r16
     75e:	60 81       	ld	r22, Z
     760:	71 81       	ldd	r23, Z+1	; 0x01
     762:	07 2e       	mov	r0, r23
     764:	00 0c       	add	r0, r0
     766:	88 0b       	sbc	r24, r24
     768:	99 0b       	sbc	r25, r25
     76a:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <print_long>
		}
	}
	if(orderX[*orderNum] == *xCoordinate){
     76e:	d4 01       	movw	r26, r8
     770:	ed 91       	ld	r30, X+
     772:	fc 91       	ld	r31, X
     774:	ee 0f       	add	r30, r30
     776:	ff 1f       	adc	r31, r31
     778:	ec 0f       	add	r30, r28
     77a:	fd 1f       	adc	r31, r29
     77c:	20 81       	ld	r18, Z
     77e:	31 81       	ldd	r19, Z+1	; 0x01
     780:	f5 01       	movw	r30, r10
     782:	80 81       	ld	r24, Z
     784:	91 81       	ldd	r25, Z+1	; 0x01
     786:	28 17       	cp	r18, r24
     788:	39 07       	cpc	r19, r25
     78a:	b1 f4       	brne	.+44     	; 0x7b8 <getProduct+0x22a>
		*x = 1;
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	d2 01       	movw	r26, r4
     792:	8d 93       	st	X+, r24
     794:	9c 93       	st	X, r25
	}
	if(((orderY[*orderNum] != *yCoordinate) && (*x == 1)) || ((endFlag == 1) && (*yCoordinate != 0))){
     796:	d4 01       	movw	r26, r8
     798:	ed 91       	ld	r30, X+
     79a:	fc 91       	ld	r31, X
     79c:	ee 0f       	add	r30, r30
     79e:	ff 1f       	adc	r31, r31
     7a0:	e6 0d       	add	r30, r6
     7a2:	f7 1d       	adc	r31, r7
     7a4:	20 81       	ld	r18, Z
     7a6:	31 81       	ldd	r19, Z+1	; 0x01
     7a8:	f8 01       	movw	r30, r16
     7aa:	80 81       	ld	r24, Z
     7ac:	91 81       	ldd	r25, Z+1	; 0x01
     7ae:	28 17       	cp	r18, r24
     7b0:	39 07       	cpc	r19, r25
     7b2:	01 f5       	brne	.+64     	; 0x7f4 <getProduct+0x266>
     7b4:	9c 01       	movw	r18, r24
     7b6:	17 c0       	rjmp	.+46     	; 0x7e6 <getProduct+0x258>
     7b8:	d4 01       	movw	r26, r8
     7ba:	ed 91       	ld	r30, X+
     7bc:	fc 91       	ld	r31, X
     7be:	ee 0f       	add	r30, r30
     7c0:	ff 1f       	adc	r31, r31
     7c2:	e6 0d       	add	r30, r6
     7c4:	f7 1d       	adc	r31, r7
     7c6:	20 81       	ld	r18, Z
     7c8:	31 81       	ldd	r19, Z+1	; 0x01
     7ca:	f8 01       	movw	r30, r16
     7cc:	80 81       	ld	r24, Z
     7ce:	91 81       	ldd	r25, Z+1	; 0x01
     7d0:	28 17       	cp	r18, r24
     7d2:	39 07       	cpc	r19, r25
     7d4:	39 f0       	breq	.+14     	; 0x7e4 <getProduct+0x256>
     7d6:	d2 01       	movw	r26, r4
     7d8:	4d 91       	ld	r20, X+
     7da:	5c 91       	ld	r21, X
     7dc:	41 30       	cpi	r20, 0x01	; 1
     7de:	51 05       	cpc	r21, r1
     7e0:	11 f4       	brne	.+4      	; 0x7e6 <getProduct+0x258>
     7e2:	08 c0       	rjmp	.+16     	; 0x7f4 <getProduct+0x266>
     7e4:	9c 01       	movw	r18, r24
     7e6:	ce 14       	cp	r12, r14
     7e8:	df 04       	cpc	r13, r15
     7ea:	09 f0       	breq	.+2      	; 0x7ee <getProduct+0x260>
     7ec:	f0 c0       	rjmp	.+480    	; 0x9ce <__stack+0xcf>
     7ee:	00 97       	sbiw	r24, 0x00	; 0
     7f0:	09 f4       	brne	.+2      	; 0x7f4 <getProduct+0x266>
     7f2:	dc c0       	rjmp	.+440    	; 0x9ac <__stack+0xad>
		if((orderY[*orderNum] > *yCoordinate) || ((*yCoordinate < 0) && (endFlag == 1))){
     7f4:	82 17       	cp	r24, r18
     7f6:	93 07       	cpc	r25, r19
     7f8:	2c f0       	brlt	.+10     	; 0x804 <getProduct+0x276>
     7fa:	99 23       	and	r25, r25
     7fc:	9c f5       	brge	.+102    	; 0x864 <getProduct+0x2d6>
     7fe:	ce 14       	cp	r12, r14
     800:	df 04       	cpc	r13, r15
     802:	81 f5       	brne	.+96     	; 0x864 <getProduct+0x2d6>
			directionLast = directionCurrent;
			setDirection(N, directionCurrent);
     804:	b1 01       	movw	r22, r2
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	0e 94 b6 01 	call	0x36c	; 0x36c <setDirection>
			
			if (followLineFlag == 1){
     80c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <followLineFlag>
     810:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <followLineFlag+0x1>
     814:	01 97       	sbiw	r24, 0x01	; 1
     816:	51 f4       	brne	.+20     	; 0x82c <getProduct+0x29e>
				*yCoordinate = *yCoordinate + 1;
     818:	f8 01       	movw	r30, r16
     81a:	80 81       	ld	r24, Z
     81c:	91 81       	ldd	r25, Z+1	; 0x01
     81e:	01 96       	adiw	r24, 0x01	; 1
     820:	91 83       	std	Z+1, r25	; 0x01
     822:	80 83       	st	Z, r24
				followLineFlag = 0;
     824:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <followLineFlag+0x1>
     828:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <followLineFlag>
			}
			clear();
     82c:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <clear>
			lcd_goto_xy(0,0);
     830:	60 e0       	ldi	r22, 0x00	; 0
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <lcd_goto_xy>
			print_long(*xCoordinate);
     838:	d5 01       	movw	r26, r10
     83a:	6d 91       	ld	r22, X+
     83c:	7c 91       	ld	r23, X
     83e:	07 2e       	mov	r0, r23
     840:	00 0c       	add	r0, r0
     842:	88 0b       	sbc	r24, r24
     844:	99 0b       	sbc	r25, r25
     846:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <print_long>
			lcd_goto_xy(0,1);
     84a:	61 e0       	ldi	r22, 0x01	; 1
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <lcd_goto_xy>
			print_long(*yCoordinate);
     852:	f8 01       	movw	r30, r16
     854:	60 81       	ld	r22, Z
     856:	71 81       	ldd	r23, Z+1	; 0x01
     858:	07 2e       	mov	r0, r23
     85a:	00 0c       	add	r0, r0
     85c:	88 0b       	sbc	r24, r24
     85e:	99 0b       	sbc	r25, r25
     860:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <print_long>

		}
		if((orderY[*orderNum] < *yCoordinate) || ((*yCoordinate > 0) && (endFlag == 1))){
     864:	d8 01       	movw	r26, r16
     866:	2d 91       	ld	r18, X+
     868:	3c 91       	ld	r19, X
     86a:	d4 01       	movw	r26, r8
     86c:	ed 91       	ld	r30, X+
     86e:	fc 91       	ld	r31, X
     870:	ee 0f       	add	r30, r30
     872:	ff 1f       	adc	r31, r31
     874:	e6 0d       	add	r30, r6
     876:	f7 1d       	adc	r31, r7
     878:	80 81       	ld	r24, Z
     87a:	91 81       	ldd	r25, Z+1	; 0x01
     87c:	82 17       	cp	r24, r18
     87e:	93 07       	cpc	r25, r19
     880:	3c f0       	brlt	.+14     	; 0x890 <getProduct+0x302>
     882:	12 16       	cp	r1, r18
     884:	13 06       	cpc	r1, r19
     886:	a4 f5       	brge	.+104    	; 0x8f0 <getProduct+0x362>
     888:	ce 14       	cp	r12, r14
     88a:	df 04       	cpc	r13, r15
     88c:	09 f0       	breq	.+2      	; 0x890 <getProduct+0x302>
     88e:	9f c0       	rjmp	.+318    	; 0x9ce <__stack+0xcf>
			directionLast = directionCurrent;
			setDirection(S, directionCurrent);
     890:	b1 01       	movw	r22, r2
     892:	82 e0       	ldi	r24, 0x02	; 2
     894:	0e 94 b6 01 	call	0x36c	; 0x36c <setDirection>
			
			if (followLineFlag == 1){
     898:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <followLineFlag>
     89c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <followLineFlag+0x1>
     8a0:	01 97       	sbiw	r24, 0x01	; 1
     8a2:	51 f4       	brne	.+20     	; 0x8b8 <getProduct+0x32a>
				*yCoordinate = *yCoordinate- 1;
     8a4:	f8 01       	movw	r30, r16
     8a6:	80 81       	ld	r24, Z
     8a8:	91 81       	ldd	r25, Z+1	; 0x01
     8aa:	01 97       	sbiw	r24, 0x01	; 1
     8ac:	91 83       	std	Z+1, r25	; 0x01
     8ae:	80 83       	st	Z, r24
				followLineFlag = 0;
     8b0:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <followLineFlag+0x1>
     8b4:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <followLineFlag>
			}
			clear();
     8b8:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <clear>
			lcd_goto_xy(0,0);
     8bc:	60 e0       	ldi	r22, 0x00	; 0
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <lcd_goto_xy>
			print_long(*xCoordinate);
     8c4:	d5 01       	movw	r26, r10
     8c6:	6d 91       	ld	r22, X+
     8c8:	7c 91       	ld	r23, X
     8ca:	07 2e       	mov	r0, r23
     8cc:	00 0c       	add	r0, r0
     8ce:	88 0b       	sbc	r24, r24
     8d0:	99 0b       	sbc	r25, r25
     8d2:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <print_long>
			lcd_goto_xy(0,1);
     8d6:	61 e0       	ldi	r22, 0x01	; 1
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <lcd_goto_xy>
			print_long(*yCoordinate);
     8de:	f8 01       	movw	r30, r16
     8e0:	60 81       	ld	r22, Z
     8e2:	71 81       	ldd	r23, Z+1	; 0x01
     8e4:	07 2e       	mov	r0, r23
     8e6:	00 0c       	add	r0, r0
     8e8:	88 0b       	sbc	r24, r24
     8ea:	99 0b       	sbc	r25, r25
     8ec:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <print_long>

		}
	}

	if(((orderX[*orderNum] == *xCoordinate) && (orderY[*orderNum] == *yCoordinate)) || (((endFlag == 1) && (*xCoordinate == 4) && (*yCoordinate == 0)))){
     8f0:	d4 01       	movw	r26, r8
     8f2:	8d 91       	ld	r24, X+
     8f4:	9c 91       	ld	r25, X
     8f6:	88 0f       	add	r24, r24
     8f8:	99 1f       	adc	r25, r25
     8fa:	f5 01       	movw	r30, r10
     8fc:	20 81       	ld	r18, Z
     8fe:	31 81       	ldd	r19, Z+1	; 0x01
     900:	c8 0f       	add	r28, r24
     902:	d9 1f       	adc	r29, r25
     904:	48 81       	ld	r20, Y
     906:	59 81       	ldd	r21, Y+1	; 0x01
     908:	42 17       	cp	r20, r18
     90a:	53 07       	cpc	r21, r19
     90c:	59 f4       	brne	.+22     	; 0x924 <__stack+0x25>
     90e:	f3 01       	movw	r30, r6
     910:	e8 0f       	add	r30, r24
     912:	f9 1f       	adc	r31, r25
     914:	40 81       	ld	r20, Z
     916:	51 81       	ldd	r21, Z+1	; 0x01
     918:	d8 01       	movw	r26, r16
     91a:	8d 91       	ld	r24, X+
     91c:	9c 91       	ld	r25, X
     91e:	48 17       	cp	r20, r24
     920:	59 07       	cpc	r21, r25
     922:	79 f0       	breq	.+30     	; 0x942 <__stack+0x43>
     924:	ce 14       	cp	r12, r14
     926:	df 04       	cpc	r13, r15
     928:	09 f0       	breq	.+2      	; 0x92c <__stack+0x2d>
     92a:	c3 c0       	rjmp	.+390    	; 0xab2 <__stack+0x1b3>
     92c:	24 30       	cpi	r18, 0x04	; 4
     92e:	31 05       	cpc	r19, r1
     930:	09 f0       	breq	.+2      	; 0x934 <__stack+0x35>
     932:	bf c0       	rjmp	.+382    	; 0xab2 <__stack+0x1b3>
     934:	f8 01       	movw	r30, r16
     936:	80 81       	ld	r24, Z
     938:	91 81       	ldd	r25, Z+1	; 0x01
     93a:	89 2b       	or	r24, r25
     93c:	09 f4       	brne	.+2      	; 0x940 <__stack+0x41>
     93e:	58 c0       	rjmp	.+176    	; 0x9f0 <__stack+0xf1>
     940:	b8 c0       	rjmp	.+368    	; 0xab2 <__stack+0x1b3>
		set_motors(0,0);               //moeten we nog even naar kijken, hij moet gelijk stilstaan
     942:	60 e0       	ldi	r22, 0x00	; 0
     944:	70 e0       	ldi	r23, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <set_motors>
		clear();
     94e:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <clear>
		print("Product");
     952:	89 e4       	ldi	r24, 0x49	; 73
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <print>
		*orderNum = *orderNum + 1;
     95a:	d4 01       	movw	r26, r8
     95c:	8d 91       	ld	r24, X+
     95e:	9c 91       	ld	r25, X
     960:	11 97       	sbiw	r26, 0x01	; 1
     962:	01 96       	adiw	r24, 0x01	; 1
     964:	8d 93       	st	X+, r24
     966:	9c 93       	st	X, r25

		if (endFlag){
     968:	ce 14       	cp	r12, r14
     96a:	df 04       	cpc	r13, r15
     96c:	21 f4       	brne	.+8      	; 0x976 <__stack+0x77>
			setDirection('S', directionCurrent);
     96e:	b1 01       	movw	r22, r2
     970:	83 e5       	ldi	r24, 0x53	; 83
     972:	0e 94 b6 01 	call	0x36c	; 0x36c <setDirection>
		}
		play_from_program_space(PSTR(">f32>>a32"));
     976:	82 eb       	ldi	r24, 0xB2	; 178
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <play_from_program_space>
		    : "0" ( microseconds )
		    );  
}

// These are alternative aliases:
static inline void delay(unsigned int milliseconds) { delay_ms(milliseconds); }
     97e:	88 ee       	ldi	r24, 0xE8	; 232
     980:	93 e0       	ldi	r25, 0x03	; 3
     982:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay_ms>
		delay(1000);
		*x = 0;
     986:	f2 01       	movw	r30, r4
     988:	11 82       	std	Z+1, r1	; 0x01
     98a:	10 82       	st	Z, r1
		productCollectedFlag = 1;
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <productCollectedFlag+0x1>
     994:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <productCollectedFlag>
	}
}
     998:	8c c0       	rjmp	.+280    	; 0xab2 <__stack+0x1b3>
	
	if(*orderNum == sizeOfOrder){
		endFlag = 1;
	}

	if(((orderX[*orderNum] != *xCoordinate) && (*x == 0)) || ((endFlag == 1) && (*xCoordinate != 4))){
     99a:	ce 14       	cp	r12, r14
     99c:	df 04       	cpc	r13, r15
     99e:	e1 f1       	breq	.+120    	; 0xa18 <__stack+0x119>
     9a0:	40 c0       	rjmp	.+128    	; 0xa22 <__stack+0x123>
     9a2:	ce 14       	cp	r12, r14
     9a4:	df 04       	cpc	r13, r15
     9a6:	09 f0       	breq	.+2      	; 0x9aa <__stack+0xab>
     9a8:	52 c0       	rjmp	.+164    	; 0xa4e <__stack+0x14f>
     9aa:	60 ce       	rjmp	.-832    	; 0x66c <getProduct+0xde>
			print_long(*yCoordinate);

		}
	}

	if(((orderX[*orderNum] == *xCoordinate) && (orderY[*orderNum] == *yCoordinate)) || (((endFlag == 1) && (*xCoordinate == 4) && (*yCoordinate == 0)))){
     9ac:	d4 01       	movw	r26, r8
     9ae:	8d 91       	ld	r24, X+
     9b0:	9c 91       	ld	r25, X
     9b2:	88 0f       	add	r24, r24
     9b4:	99 1f       	adc	r25, r25
     9b6:	f5 01       	movw	r30, r10
     9b8:	20 81       	ld	r18, Z
     9ba:	31 81       	ldd	r19, Z+1	; 0x01
     9bc:	c8 0f       	add	r28, r24
     9be:	d9 1f       	adc	r29, r25
     9c0:	48 81       	ld	r20, Y
     9c2:	59 81       	ldd	r21, Y+1	; 0x01
     9c4:	42 17       	cp	r20, r18
     9c6:	53 07       	cpc	r21, r19
     9c8:	09 f0       	breq	.+2      	; 0x9cc <__stack+0xcd>
     9ca:	b0 cf       	rjmp	.-160    	; 0x92c <__stack+0x2d>
     9cc:	65 c0       	rjmp	.+202    	; 0xa98 <__stack+0x199>
     9ce:	d4 01       	movw	r26, r8
     9d0:	8d 91       	ld	r24, X+
     9d2:	9c 91       	ld	r25, X
     9d4:	88 0f       	add	r24, r24
     9d6:	99 1f       	adc	r25, r25
     9d8:	f5 01       	movw	r30, r10
     9da:	20 81       	ld	r18, Z
     9dc:	31 81       	ldd	r19, Z+1	; 0x01
     9de:	c8 0f       	add	r28, r24
     9e0:	d9 1f       	adc	r29, r25
     9e2:	48 81       	ld	r20, Y
     9e4:	59 81       	ldd	r21, Y+1	; 0x01
     9e6:	42 17       	cp	r20, r18
     9e8:	53 07       	cpc	r21, r19
     9ea:	09 f0       	breq	.+2      	; 0x9ee <__stack+0xef>
     9ec:	62 c0       	rjmp	.+196    	; 0xab2 <__stack+0x1b3>
     9ee:	8f cf       	rjmp	.-226    	; 0x90e <__stack+0xf>
		set_motors(0,0);               //moeten we nog even naar kijken, hij moet gelijk stilstaan
     9f0:	60 e0       	ldi	r22, 0x00	; 0
     9f2:	70 e0       	ldi	r23, 0x00	; 0
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <set_motors>
		clear();
     9fc:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <clear>
		print("Product");
     a00:	89 e4       	ldi	r24, 0x49	; 73
     a02:	91 e0       	ldi	r25, 0x01	; 1
     a04:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <print>
		*orderNum = *orderNum + 1;
     a08:	d4 01       	movw	r26, r8
     a0a:	8d 91       	ld	r24, X+
     a0c:	9c 91       	ld	r25, X
     a0e:	11 97       	sbiw	r26, 0x01	; 1
     a10:	01 96       	adiw	r24, 0x01	; 1
     a12:	8d 93       	st	X+, r24
     a14:	9c 93       	st	X, r25
     a16:	ab cf       	rjmp	.-170    	; 0x96e <__stack+0x6f>
	
	if(*orderNum == sizeOfOrder){
		endFlag = 1;
	}

	if(((orderX[*orderNum] != *xCoordinate) && (*x == 0)) || ((endFlag == 1) && (*xCoordinate != 4))){
     a18:	84 30       	cpi	r24, 0x04	; 4
     a1a:	91 05       	cpc	r25, r1
     a1c:	09 f0       	breq	.+2      	; 0xa20 <__stack+0x121>
     a1e:	2d ce       	rjmp	.-934    	; 0x67a <getProduct+0xec>
     a20:	a6 ce       	rjmp	.-692    	; 0x76e <getProduct+0x1e0>
			lcd_goto_xy(0,1);
			print_long(*yCoordinate);
		}
	}
	if(orderX[*orderNum] == *xCoordinate){
		*x = 1;
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	f2 01       	movw	r30, r4
     a28:	91 83       	std	Z+1, r25	; 0x01
     a2a:	80 83       	st	Z, r24
	}
	if(((orderY[*orderNum] != *yCoordinate) && (*x == 1)) || ((endFlag == 1) && (*yCoordinate != 0))){
     a2c:	d4 01       	movw	r26, r8
     a2e:	ed 91       	ld	r30, X+
     a30:	fc 91       	ld	r31, X
     a32:	ee 0f       	add	r30, r30
     a34:	ff 1f       	adc	r31, r31
     a36:	e6 0d       	add	r30, r6
     a38:	f7 1d       	adc	r31, r7
     a3a:	20 81       	ld	r18, Z
     a3c:	31 81       	ldd	r19, Z+1	; 0x01
     a3e:	f8 01       	movw	r30, r16
     a40:	80 81       	ld	r24, Z
     a42:	91 81       	ldd	r25, Z+1	; 0x01
     a44:	28 17       	cp	r18, r24
     a46:	39 07       	cpc	r19, r25
     a48:	09 f0       	breq	.+2      	; 0xa4c <__stack+0x14d>
     a4a:	d4 ce       	rjmp	.-600    	; 0x7f4 <getProduct+0x266>
     a4c:	c0 cf       	rjmp	.-128    	; 0x9ce <__stack+0xcf>
     a4e:	d4 01       	movw	r26, r8
     a50:	ed 91       	ld	r30, X+
     a52:	fc 91       	ld	r31, X
     a54:	ee 0f       	add	r30, r30
     a56:	ff 1f       	adc	r31, r31
     a58:	e6 0d       	add	r30, r6
     a5a:	f7 1d       	adc	r31, r7
     a5c:	20 81       	ld	r18, Z
     a5e:	31 81       	ldd	r19, Z+1	; 0x01
     a60:	f8 01       	movw	r30, r16
     a62:	80 81       	ld	r24, Z
     a64:	91 81       	ldd	r25, Z+1	; 0x01
     a66:	28 17       	cp	r18, r24
     a68:	39 07       	cpc	r19, r25
     a6a:	09 f0       	breq	.+2      	; 0xa6e <__stack+0x16f>
     a6c:	b4 ce       	rjmp	.-664    	; 0x7d6 <getProduct+0x248>
     a6e:	af cf       	rjmp	.-162    	; 0x9ce <__stack+0xcf>

		}
	}

	if(((orderX[*orderNum] == *xCoordinate) && (orderY[*orderNum] == *yCoordinate)) || (((endFlag == 1) && (*xCoordinate == 4) && (*yCoordinate == 0)))){
		set_motors(0,0);               //moeten we nog even naar kijken, hij moet gelijk stilstaan
     a70:	60 e0       	ldi	r22, 0x00	; 0
     a72:	70 e0       	ldi	r23, 0x00	; 0
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <set_motors>
		clear();
     a7c:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <clear>
		print("Product");
     a80:	89 e4       	ldi	r24, 0x49	; 73
     a82:	91 e0       	ldi	r25, 0x01	; 1
     a84:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <print>
		*orderNum = *orderNum + 1;
     a88:	d4 01       	movw	r26, r8
     a8a:	8d 91       	ld	r24, X+
     a8c:	9c 91       	ld	r25, X
     a8e:	11 97       	sbiw	r26, 0x01	; 1
     a90:	01 96       	adiw	r24, 0x01	; 1
     a92:	8d 93       	st	X+, r24
     a94:	9c 93       	st	X, r25
     a96:	6b cf       	rjmp	.-298    	; 0x96e <__stack+0x6f>
			print_long(*yCoordinate);

		}
	}

	if(((orderX[*orderNum] == *xCoordinate) && (orderY[*orderNum] == *yCoordinate)) || (((endFlag == 1) && (*xCoordinate == 4) && (*yCoordinate == 0)))){
     a98:	f3 01       	movw	r30, r6
     a9a:	e8 0f       	add	r30, r24
     a9c:	f9 1f       	adc	r31, r25
     a9e:	40 81       	ld	r20, Z
     aa0:	51 81       	ldd	r21, Z+1	; 0x01
     aa2:	f8 01       	movw	r30, r16
     aa4:	80 81       	ld	r24, Z
     aa6:	91 81       	ldd	r25, Z+1	; 0x01
     aa8:	48 17       	cp	r20, r24
     aaa:	59 07       	cpc	r21, r25
     aac:	09 f0       	breq	.+2      	; 0xab0 <__stack+0x1b1>
     aae:	3a cf       	rjmp	.-396    	; 0x924 <__stack+0x25>
     ab0:	df cf       	rjmp	.-66     	; 0xa70 <__stack+0x171>
		play_from_program_space(PSTR(">f32>>a32"));
		delay(1000);
		*x = 0;
		productCollectedFlag = 1;
	}
}
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	1f 91       	pop	r17
     ab8:	0f 91       	pop	r16
     aba:	ff 90       	pop	r15
     abc:	ef 90       	pop	r14
     abe:	df 90       	pop	r13
     ac0:	cf 90       	pop	r12
     ac2:	bf 90       	pop	r11
     ac4:	af 90       	pop	r10
     ac6:	9f 90       	pop	r9
     ac8:	8f 90       	pop	r8
     aca:	7f 90       	pop	r7
     acc:	6f 90       	pop	r6
     ace:	5f 90       	pop	r5
     ad0:	4f 90       	pop	r4
     ad2:	3f 90       	pop	r3
     ad4:	2f 90       	pop	r2
     ad6:	08 95       	ret

00000ad8 <warehouseMode>:

void warehouseMode(){
     ad8:	8f 92       	push	r8
     ada:	9f 92       	push	r9
     adc:	af 92       	push	r10
     ade:	bf 92       	push	r11
     ae0:	cf 92       	push	r12
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
     af0:	cd b7       	in	r28, 0x3d	; 61
     af2:	de b7       	in	r29, 0x3e	; 62
     af4:	c4 58       	subi	r28, 0x84	; 132
     af6:	d1 09       	sbc	r29, r1
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	f8 94       	cli
     afc:	de bf       	out	0x3e, r29	; 62
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	cd bf       	out	0x3d, r28	; 61
	int orderX[10];
	int orderY[10];
	
	wirCoord(orderX, orderY, &sizeOfOrder);
     b02:	47 ef       	ldi	r20, 0xF7	; 247
     b04:	51 e0       	ldi	r21, 0x01	; 1
     b06:	be 01       	movw	r22, r28
     b08:	6b 5e       	subi	r22, 0xEB	; 235
     b0a:	7f 4f       	sbci	r23, 0xFF	; 255
     b0c:	ce 01       	movw	r24, r28
     b0e:	01 96       	adiw	r24, 0x01	; 1
     b10:	0e 94 b0 07 	call	0xf60	; 0xf60 <wirCoord>

	int xCoordinate = 0, yCoordinate = 0, x = 0;
     b14:	1a a6       	std	Y+42, r1	; 0x2a
     b16:	19 a6       	std	Y+41, r1	; 0x29
     b18:	1c a6       	std	Y+44, r1	; 0x2c
     b1a:	1b a6       	std	Y+43, r1	; 0x2b
     b1c:	1e a6       	std	Y+46, r1	; 0x2e
     b1e:	1d a6       	std	Y+45, r1	; 0x2d
	direction directionCurrent = N;
     b20:	1f a6       	std	Y+47, r1	; 0x2f
	direction directionLast;
	
	//wirOrder(&orderX, &orderY);
	
	sortOrder(orderX, orderY);
     b22:	be 01       	movw	r22, r28
     b24:	6b 5e       	subi	r22, 0xEB	; 235
     b26:	7f 4f       	sbci	r23, 0xFF	; 255
     b28:	ce 01       	movw	r24, r28
     b2a:	01 96       	adiw	r24, 0x01	; 1
     b2c:	0e 94 7e 00 	call	0xfc	; 0xfc <sortOrder>
	
	int routes[5][8];
	int intersectNum = 0;
     b30:	cf 57       	subi	r28, 0x7F	; 127
     b32:	df 4f       	sbci	r29, 0xFF	; 255
     b34:	19 82       	std	Y+1, r1	; 0x01
     b36:	18 82       	st	Y, r1
     b38:	c1 58       	subi	r28, 0x81	; 129
     b3a:	d0 40       	sbci	r29, 0x00	; 0
	readGrid(routes);
     b3c:	ce 01       	movw	r24, r28
     b3e:	c1 96       	adiw	r24, 0x31	; 49
     b40:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <readGrid>
	
	int orderNum = 0;
     b44:	cd 57       	subi	r28, 0x7D	; 125
     b46:	df 4f       	sbci	r29, 0xFF	; 255
     b48:	19 82       	std	Y+1, r1	; 0x01
     b4a:	18 82       	st	Y, r1
     b4c:	c3 58       	subi	r28, 0x83	; 131
     b4e:	d0 40       	sbci	r29, 0x00	; 0
		read_line_sensors(sensors,IR_EMITTERS_ON);

		if (checkAfslag() != 1 && productCollectedFlag == 0){
			//checkDistance();
			followLine();
			followLineFlag = 1;
     b50:	88 24       	eor	r8, r8
     b52:	83 94       	inc	r8
     b54:	91 2c       	mov	r9, r1
	int intersectNum = 0;
	readGrid(routes);
	
	int orderNum = 0;
	
	while (orderNum != sizeOfOrder)
     b56:	4e c0       	rjmp	.+156    	; 0xbf4 <warehouseMode+0x11c>
	{
		
		read_line_sensors(sensors,IR_EMITTERS_ON);
     b58:	61 e0       	ldi	r22, 0x01	; 1
     b5a:	82 e6       	ldi	r24, 0x62	; 98
     b5c:	92 e0       	ldi	r25, 0x02	; 2
     b5e:	0e 94 23 11 	call	0x2246	; 0x2246 <read_line_sensors>

		if (checkAfslag() != 1 && productCollectedFlag == 0){
     b62:	0e 94 44 07 	call	0xe88	; 0xe88 <checkAfslag>
     b66:	01 97       	sbiw	r24, 0x01	; 1
     b68:	61 f0       	breq	.+24     	; 0xb82 <warehouseMode+0xaa>
     b6a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <productCollectedFlag>
     b6e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <productCollectedFlag+0x1>
     b72:	89 2b       	or	r24, r25
     b74:	31 f4       	brne	.+12     	; 0xb82 <warehouseMode+0xaa>
			//checkDistance();
			followLine();
     b76:	0e 94 59 07 	call	0xeb2	; 0xeb2 <followLine>
			followLineFlag = 1;
     b7a:	90 92 07 02 	sts	0x0207, r9	; 0x800207 <followLineFlag+0x1>
     b7e:	80 92 06 02 	sts	0x0206, r8	; 0x800206 <followLineFlag>

		}
		
		if (endOfRouteFlag == 0 && checkAfslag() == 1){
     b82:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <endOfRouteFlag>
     b86:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <endOfRouteFlag+0x1>
     b8a:	89 2b       	or	r24, r25
     b8c:	69 f4       	brne	.+26     	; 0xba8 <warehouseMode+0xd0>
     b8e:	0e 94 44 07 	call	0xe88	; 0xe88 <checkAfslag>
     b92:	01 97       	sbiw	r24, 0x01	; 1
     b94:	49 f4       	brne	.+18     	; 0xba8 <warehouseMode+0xd0>

			driveRoute(routes, 0, &intersectNum);
     b96:	ae 01       	movw	r20, r28
     b98:	4f 57       	subi	r20, 0x7F	; 127
     b9a:	5f 4f       	sbci	r21, 0xFF	; 255
     b9c:	60 e0       	ldi	r22, 0x00	; 0
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	ce 01       	movw	r24, r28
     ba2:	c1 96       	adiw	r24, 0x31	; 49
     ba4:	0e 94 29 02 	call	0x452	; 0x452 <driveRoute>
			
		}
		
		if ((endOfRouteFlag == 1 && checkAfslag() == 1) || productCollectedFlag == 1){
     ba8:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <endOfRouteFlag>
     bac:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <endOfRouteFlag+0x1>
     bb0:	01 97       	sbiw	r24, 0x01	; 1
     bb2:	21 f4       	brne	.+8      	; 0xbbc <warehouseMode+0xe4>
     bb4:	0e 94 44 07 	call	0xe88	; 0xe88 <checkAfslag>
     bb8:	01 97       	sbiw	r24, 0x01	; 1
     bba:	31 f0       	breq	.+12     	; 0xbc8 <warehouseMode+0xf0>
     bbc:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <productCollectedFlag>
     bc0:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <productCollectedFlag+0x1>
     bc4:	01 97       	sbiw	r24, 0x01	; 1
     bc6:	b1 f4       	brne	.+44     	; 0xbf4 <warehouseMode+0x11c>
			
			getProduct(orderX, orderY, &orderNum, &xCoordinate, &yCoordinate, &x, &directionCurrent, &directionLast);
     bc8:	ce 01       	movw	r24, r28
     bca:	c0 96       	adiw	r24, 0x30	; 48
     bcc:	5c 01       	movw	r10, r24
     bce:	01 97       	sbiw	r24, 0x01	; 1
     bd0:	6c 01       	movw	r12, r24
     bd2:	02 97       	sbiw	r24, 0x02	; 2
     bd4:	7c 01       	movw	r14, r24
     bd6:	8e 01       	movw	r16, r28
     bd8:	05 5d       	subi	r16, 0xD5	; 213
     bda:	1f 4f       	sbci	r17, 0xFF	; 255
     bdc:	9e 01       	movw	r18, r28
     bde:	27 5d       	subi	r18, 0xD7	; 215
     be0:	3f 4f       	sbci	r19, 0xFF	; 255
     be2:	ae 01       	movw	r20, r28
     be4:	4d 57       	subi	r20, 0x7D	; 125
     be6:	5f 4f       	sbci	r21, 0xFF	; 255
     be8:	be 01       	movw	r22, r28
     bea:	6b 5e       	subi	r22, 0xEB	; 235
     bec:	7f 4f       	sbci	r23, 0xFF	; 255
     bee:	8c 97       	sbiw	r24, 0x2c	; 44
     bf0:	0e 94 c7 02 	call	0x58e	; 0x58e <getProduct>
	int intersectNum = 0;
	readGrid(routes);
	
	int orderNum = 0;
	
	while (orderNum != sizeOfOrder)
     bf4:	cd 57       	subi	r28, 0x7D	; 125
     bf6:	df 4f       	sbci	r29, 0xFF	; 255
     bf8:	28 81       	ld	r18, Y
     bfa:	39 81       	ldd	r19, Y+1	; 0x01
     bfc:	c3 58       	subi	r28, 0x83	; 131
     bfe:	d0 40       	sbci	r29, 0x00	; 0
     c00:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <sizeOfOrder>
     c04:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <sizeOfOrder+0x1>
     c08:	28 17       	cp	r18, r24
     c0a:	39 07       	cpc	r19, r25
     c0c:	09 f0       	breq	.+2      	; 0xc10 <warehouseMode+0x138>
     c0e:	a4 cf       	rjmp	.-184    	; 0xb58 <warehouseMode+0x80>
			getProduct(orderX, orderY, &orderNum, &xCoordinate, &yCoordinate, &x, &directionCurrent, &directionLast);

		}
	}

	homeFlag = 0;
     c10:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <homeFlag+0x1>
     c14:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <homeFlag>
	intersectNum = 0;
     c18:	cf 57       	subi	r28, 0x7F	; 127
     c1a:	df 4f       	sbci	r29, 0xFF	; 255
     c1c:	19 82       	std	Y+1, r1	; 0x01
     c1e:	18 82       	st	Y, r1
     c20:	c1 58       	subi	r28, 0x81	; 129
     c22:	d0 40       	sbci	r29, 0x00	; 0
	
	while (homeFlag != 1){

		read_line_sensors(sensors,IR_EMITTERS_ON);
     c24:	61 e0       	ldi	r22, 0x01	; 1
     c26:	82 e6       	ldi	r24, 0x62	; 98
     c28:	92 e0       	ldi	r25, 0x02	; 2
     c2a:	0e 94 23 11 	call	0x2246	; 0x2246 <read_line_sensors>

		if (checkAfslag() != 1){
     c2e:	0e 94 44 07 	call	0xe88	; 0xe88 <checkAfslag>
     c32:	01 97       	sbiw	r24, 0x01	; 1
     c34:	19 f0       	breq	.+6      	; 0xc3c <warehouseMode+0x164>
			//checkDistance();
			followLine();
     c36:	0e 94 59 07 	call	0xeb2	; 0xeb2 <followLine>
     c3a:	0d c0       	rjmp	.+26     	; 0xc56 <warehouseMode+0x17e>

		}
		else if (checkAfslag() == 1){
     c3c:	0e 94 44 07 	call	0xe88	; 0xe88 <checkAfslag>
     c40:	01 97       	sbiw	r24, 0x01	; 1
     c42:	49 f4       	brne	.+18     	; 0xc56 <warehouseMode+0x17e>
			driveRoute(routes, 3, &intersectNum);
     c44:	ae 01       	movw	r20, r28
     c46:	4f 57       	subi	r20, 0x7F	; 127
     c48:	5f 4f       	sbci	r21, 0xFF	; 255
     c4a:	63 e0       	ldi	r22, 0x03	; 3
     c4c:	70 e0       	ldi	r23, 0x00	; 0
     c4e:	ce 01       	movw	r24, r28
     c50:	c1 96       	adiw	r24, 0x31	; 49
     c52:	0e 94 29 02 	call	0x452	; 0x452 <driveRoute>
	}

	homeFlag = 0;
	intersectNum = 0;
	
	while (homeFlag != 1){
     c56:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <homeFlag>
     c5a:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <homeFlag+0x1>
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	09 f7       	brne	.-62     	; 0xc24 <warehouseMode+0x14c>
		else if (checkAfslag() == 1){
			driveRoute(routes, 3, &intersectNum);
		}

	}
     c62:	cc 57       	subi	r28, 0x7C	; 124
     c64:	df 4f       	sbci	r29, 0xFF	; 255
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	f8 94       	cli
     c6a:	de bf       	out	0x3e, r29	; 62
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	cd bf       	out	0x3d, r28	; 61
     c70:	df 91       	pop	r29
     c72:	cf 91       	pop	r28
     c74:	1f 91       	pop	r17
     c76:	0f 91       	pop	r16
     c78:	ff 90       	pop	r15
     c7a:	ef 90       	pop	r14
     c7c:	df 90       	pop	r13
     c7e:	cf 90       	pop	r12
     c80:	bf 90       	pop	r11
     c82:	af 90       	pop	r10
     c84:	9f 90       	pop	r9
     c86:	8f 90       	pop	r8
     c88:	08 95       	ret

00000c8a <run>:

char *functions[3] = {"Handm.","WirC.","Volger"}; //menu texts


void run(int i){
	switch(i){
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	19 f0       	breq	.+6      	; 0xc94 <run+0xa>
     c8e:	01 97       	sbiw	r24, 0x01	; 1
     c90:	21 f0       	breq	.+8      	; 0xc9a <run+0x10>
     c92:	08 95       	ret
		case 0:
		wirManual();
     c94:	0e 94 db 08 	call	0x11b6	; 0x11b6 <wirManual>
		break;
     c98:	08 95       	ret
		case 1:
		warehouseMode();
     c9a:	0e 94 6c 05 	call	0xad8	; 0xad8 <warehouseMode>
     c9e:	08 95       	ret

00000ca0 <menu>:

	}
}
void menu(){

	unsigned char button = (button_is_pressed(ANY_BUTTON));
     ca0:	82 e3       	ldi	r24, 0x32	; 50
     ca2:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <button_is_pressed>

	switch(button)
     ca6:	80 31       	cpi	r24, 0x10	; 16
     ca8:	09 f1       	breq	.+66     	; 0xcec <menu+0x4c>
     caa:	80 32       	cpi	r24, 0x20	; 32
     cac:	d9 f1       	breq	.+118    	; 0xd24 <menu+0x84>
     cae:	82 30       	cpi	r24, 0x02	; 2
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <menu+0x14>
     cb2:	5a c0       	rjmp	.+180    	; 0xd68 <menu+0xc8>
	{
		case (BUTTON_A) :
		clear();
     cb4:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <clear>

		if(--selected < 0){selected = 2;}
     cb8:	e0 91 f9 01 	lds	r30, 0x01F9	; 0x8001f9 <selected>
     cbc:	e1 50       	subi	r30, 0x01	; 1
     cbe:	e0 93 f9 01 	sts	0x01F9, r30	; 0x8001f9 <selected>
		print(functions[selected]);
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	ee 0f       	add	r30, r30
     cc6:	ff 1f       	adc	r31, r31
     cc8:	ec 5e       	subi	r30, 0xEC	; 236
     cca:	fe 4f       	sbci	r31, 0xFE	; 254
     ccc:	80 81       	ld	r24, Z
     cce:	91 81       	ldd	r25, Z+1	; 0x01
     cd0:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <print>
		play_frequency(400, 100, 15);// Beep
     cd4:	4f e0       	ldi	r20, 0x0F	; 15
     cd6:	64 e6       	ldi	r22, 0x64	; 100
     cd8:	70 e0       	ldi	r23, 0x00	; 0
     cda:	80 e9       	ldi	r24, 0x90	; 144
     cdc:	91 e0       	ldi	r25, 0x01	; 1
     cde:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <play_frequency>
		delay_ms(200);
     ce2:	88 ec       	ldi	r24, 0xC8	; 200
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay_ms>
		break;
     cea:	08 95       	ret
		case (BUTTON_B) :
		play_frequency(660, 100, 15);// Beep
     cec:	4f e0       	ldi	r20, 0x0F	; 15
     cee:	64 e6       	ldi	r22, 0x64	; 100
     cf0:	70 e0       	ldi	r23, 0x00	; 0
     cf2:	84 e9       	ldi	r24, 0x94	; 148
     cf4:	92 e0       	ldi	r25, 0x02	; 2
     cf6:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <play_frequency>
		delay_ms(150);
     cfa:	86 e9       	ldi	r24, 0x96	; 150
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay_ms>
		play_frequency(660, 100, 15);
     d02:	4f e0       	ldi	r20, 0x0F	; 15
     d04:	64 e6       	ldi	r22, 0x64	; 100
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	84 e9       	ldi	r24, 0x94	; 148
     d0a:	92 e0       	ldi	r25, 0x02	; 2
     d0c:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <play_frequency>
		delay_ms(50);
     d10:	82 e3       	ldi	r24, 0x32	; 50
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay_ms>
		run(selected);
     d18:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <selected>
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	0e 94 45 06 	call	0xc8a	; 0xc8a <run>
		break;
     d22:	08 95       	ret

		case (BUTTON_C) :
		clear();
     d24:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <clear>
		if(++selected > 2){selected = 0;}
     d28:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <selected>
     d2c:	8f 5f       	subi	r24, 0xFF	; 255
     d2e:	83 30       	cpi	r24, 0x03	; 3
     d30:	18 f4       	brcc	.+6      	; 0xd38 <menu+0x98>
     d32:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <selected>
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <menu+0x9c>
     d38:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <selected>
		print(functions[selected]);
     d3c:	e0 91 f9 01 	lds	r30, 0x01F9	; 0x8001f9 <selected>
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	ee 0f       	add	r30, r30
     d44:	ff 1f       	adc	r31, r31
     d46:	ec 5e       	subi	r30, 0xEC	; 236
     d48:	fe 4f       	sbci	r31, 0xFE	; 254
     d4a:	80 81       	ld	r24, Z
     d4c:	91 81       	ldd	r25, Z+1	; 0x01
     d4e:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <print>
		play_frequency(800, 100, 15);// Beep
     d52:	4f e0       	ldi	r20, 0x0F	; 15
     d54:	64 e6       	ldi	r22, 0x64	; 100
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	80 e2       	ldi	r24, 0x20	; 32
     d5a:	93 e0       	ldi	r25, 0x03	; 3
     d5c:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <play_frequency>
		delay_ms(200);
     d60:	88 ec       	ldi	r24, 0xC8	; 200
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay_ms>
     d68:	08 95       	ret

00000d6a <main>:
#include <avr/pgmspace.h>
#include <avr/io.h>
#include <avr/interrupt.h>

int main(){
	initialize();
     d6a:	0e 94 ba 06 	call	0xd74	; 0xd74 <initialize>
	//warehouseMode();	
	
	while(1){
		menu();
     d6e:	0e 94 50 06 	call	0xca0	; 0xca0 <menu>
     d72:	fd cf       	rjmp	.-6      	; 0xd6e <main+0x4>

00000d74 <initialize>:
int last_proportional;
int proportional;
int derivative;

void initialize()
{
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
	productCollectedFlag = 0;
     d78:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <productCollectedFlag+0x1>
     d7c:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <productCollectedFlag>
	followLineFlag = 0;
     d80:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <followLineFlag+0x1>
     d84:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <followLineFlag>
	endOfRouteFlag = 0;
     d88:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <endOfRouteFlag+0x1>
     d8c:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <endOfRouteFlag>
	homeFlag = 0;
     d90:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <homeFlag+0x1>
     d94:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <homeFlag>


	unsigned int counter;
	pololu_3pi_init(2000);								//initialize sensor value from 0 to 2000
     d98:	80 ed       	ldi	r24, 0xD0	; 208
     d9a:	97 e0       	ldi	r25, 0x07	; 7
     d9c:	0e 94 66 11 	call	0x22cc	; 0x22cc <pololu_3pi_init>
	
	while(!button_is_pressed(BUTTON_B))					//this function is activated until button B is pressed.
     da0:	1b c0       	rjmp	.+54     	; 0xdd8 <initialize+0x64>
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
     da2:	0e 94 dd 09 	call	0x13ba	; 0x13ba <read_battery_millivolts_3pi>
     da6:	ec 01       	movw	r28, r24
	{
		int bat = read_battery_millivolts();
		clear();
     da8:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <clear>
		print_long(bat);								//print battery voltage in millivolts on the LCD
     dac:	be 01       	movw	r22, r28
     dae:	dd 0f       	add	r29, r29
     db0:	88 0b       	sbc	r24, r24
     db2:	99 0b       	sbc	r25, r25
     db4:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <print_long>
		print("mV");
     db8:	85 e6       	ldi	r24, 0x65	; 101
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <print>
		lcd_goto_xy(0,1);
     dc0:	61 e0       	ldi	r22, 0x01	; 1
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <lcd_goto_xy>
		print("druk B");								//print instruction to continue
     dc8:	88 e6       	ldi	r24, 0x68	; 104
     dca:	91 e0       	ldi	r25, 0x01	; 1
     dcc:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <print>
		delay_ms(100);
     dd0:	84 e6       	ldi	r24, 0x64	; 100
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay_ms>


	unsigned int counter;
	pololu_3pi_init(2000);								//initialize sensor value from 0 to 2000
	
	while(!button_is_pressed(BUTTON_B))					//this function is activated until button B is pressed.
     dd8:	80 e1       	ldi	r24, 0x10	; 16
     dda:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <button_is_pressed>
     dde:	88 23       	and	r24, r24
     de0:	01 f3       	breq	.-64     	; 0xda2 <initialize+0x2e>
		lcd_goto_xy(0,1);
		print("druk B");								//print instruction to continue
		delay_ms(100);
	}
	
	wait_for_button_release(BUTTON_B);					//button B is pressed
     de2:	80 e1       	ldi	r24, 0x10	; 16
     de4:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <wait_for_button_release>
	delay_ms(1000);
     de8:	88 ee       	ldi	r24, 0xE8	; 232
     dea:	93 e0       	ldi	r25, 0x03	; 3
     dec:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay_ms>
     df0:	cc ee       	ldi	r28, 0xEC	; 236
     df2:	df ef       	ldi	r29, 0xFF	; 255
	
	for(counter=0;counter<80;counter++)					//calibrating line sensors
	{
		if(counter < 20 || counter >= 60)
     df4:	c8 32       	cpi	r28, 0x28	; 40
     df6:	d1 05       	cpc	r29, r1
     df8:	38 f0       	brcs	.+14     	; 0xe08 <initialize+0x94>
		set_motors(40,-40);
     dfa:	68 ed       	ldi	r22, 0xD8	; 216
     dfc:	7f ef       	ldi	r23, 0xFF	; 255
     dfe:	88 e2       	ldi	r24, 0x28	; 40
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <set_motors>
     e06:	06 c0       	rjmp	.+12     	; 0xe14 <initialize+0xa0>
		else
		set_motors(-40,40);
     e08:	68 e2       	ldi	r22, 0x28	; 40
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	88 ed       	ldi	r24, 0xD8	; 216
     e0e:	9f ef       	ldi	r25, 0xFF	; 255
     e10:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <set_motors>
		calibrate_line_sensors(IR_EMITTERS_ON);
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	0e 94 2a 11 	call	0x2254	; 0x2254 <calibrate_line_sensors>
		delay_ms(20);
     e1a:	84 e1       	ldi	r24, 0x14	; 20
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay_ms>
     e22:	21 96       	adiw	r28, 0x01	; 1
	}
	
	wait_for_button_release(BUTTON_B);					//button B is pressed
	delay_ms(1000);
	
	for(counter=0;counter<80;counter++)					//calibrating line sensors
     e24:	cc 33       	cpi	r28, 0x3C	; 60
     e26:	d1 05       	cpc	r29, r1
     e28:	29 f7       	brne	.-54     	; 0xdf4 <initialize+0x80>
		set_motors(-40,40);
		calibrate_line_sensors(IR_EMITTERS_ON);
		delay_ms(20);
	}
	
	set_motors(0,0);
     e2a:	60 e0       	ldi	r22, 0x00	; 0
     e2c:	70 e0       	ldi	r23, 0x00	; 0
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <set_motors>
	
	while(!button_is_pressed(BUTTON_B))										//function is activated until button B is pressed
     e36:	15 c0       	rjmp	.+42     	; 0xe62 <initialize+0xee>
	{
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);			//reading the sensors to determine the position of the robot
     e38:	61 e0       	ldi	r22, 0x01	; 1
     e3a:	82 e6       	ldi	r24, 0x62	; 98
     e3c:	92 e0       	ldi	r25, 0x02	; 2
     e3e:	0e 94 30 11 	call	0x2260	; 0x2260 <read_line>
     e42:	ec 01       	movw	r28, r24
		clear();															//clear LCD
     e44:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <clear>
		print("  ");
     e48:	8f e6       	ldi	r24, 0x6F	; 111
     e4a:	91 e0       	ldi	r25, 0x01	; 1
     e4c:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <print>
		print_long(position);												//print position of the robot compared to the line
     e50:	be 01       	movw	r22, r28
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <print_long>
		delay_ms(100);
     e5a:	84 e6       	ldi	r24, 0x64	; 100
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay_ms>
		delay_ms(20);
	}
	
	set_motors(0,0);
	
	while(!button_is_pressed(BUTTON_B))										//function is activated until button B is pressed
     e62:	80 e1       	ldi	r24, 0x10	; 16
     e64:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <button_is_pressed>
     e68:	88 23       	and	r24, r24
     e6a:	31 f3       	breq	.-52     	; 0xe38 <initialize+0xc4>
		print("  ");
		print_long(position);												//print position of the robot compared to the line
		delay_ms(100);
	}
	
	wait_for_button_release(BUTTON_B);										//button B is pressed
     e6c:	80 e1       	ldi	r24, 0x10	; 16
     e6e:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <wait_for_button_release>
	clear();																//clear LCD
     e72:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <clear>
	
	serial_set_baud_rate(9600);
     e76:	60 e8       	ldi	r22, 0x80	; 128
     e78:	75 e2       	ldi	r23, 0x25	; 37
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0e 94 35 10 	call	0x206a	; 0x206a <serial_set_baud_rate>

}
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	08 95       	ret

00000e88 <checkAfslag>:

int checkAfslag(){
	int flag;
	if(SENSOR_L < 800 && SENSOR_R < 800){
     e88:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <sensors>
     e8c:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <sensors+0x1>
     e90:	80 32       	cpi	r24, 0x20	; 32
     e92:	93 40       	sbci	r25, 0x03	; 3
     e94:	58 f4       	brcc	.+22     	; 0xeac <checkAfslag+0x24>
		flag = 0;
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	20 91 6a 02 	lds	r18, 0x026A	; 0x80026a <sensors+0x8>
     e9e:	30 91 6b 02 	lds	r19, 0x026B	; 0x80026b <sensors+0x9>
     ea2:	20 32       	cpi	r18, 0x20	; 32
     ea4:	33 40       	sbci	r19, 0x03	; 3
     ea6:	20 f4       	brcc	.+8      	; 0xeb0 <checkAfslag+0x28>
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	08 95       	ret
	}
	else{
		flag = 1;
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
	}
	return flag;
}
     eb0:	08 95       	ret

00000eb2 <followLine>:

void followLine(){
     eb2:	cf 93       	push	r28
     eb4:	df 93       	push	r29
	// Get the position of the line.  Note that we *must* provide
	// the "sensors" argument to read_line() here, even though we
	// are not interested in the individual sensor readings.
	unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     eb6:	61 e0       	ldi	r22, 0x01	; 1
     eb8:	82 e6       	ldi	r24, 0x62	; 98
     eba:	92 e0       	ldi	r25, 0x02	; 2
     ebc:	0e 94 30 11 	call	0x2260	; 0x2260 <read_line>
	
	// The "proportional" term should be 0 when we are on the line.
	int proportional = ((int)position) - 2000;
     ec0:	80 5d       	subi	r24, 0xD0	; 208
     ec2:	97 40       	sbci	r25, 0x07	; 7
	
	// Compute the derivative (change) and integral (sum) of the
	// position.
	int derivative = proportional - last_proportional;
     ec4:	20 91 6e 02 	lds	r18, 0x026E	; 0x80026e <last_proportional>
     ec8:	30 91 6f 02 	lds	r19, 0x026F	; 0x80026f <last_proportional+0x1>
     ecc:	ac 01       	movw	r20, r24
     ece:	42 1b       	sub	r20, r18
     ed0:	53 0b       	sbc	r21, r19
     ed2:	9a 01       	movw	r18, r20
	integral += proportional;
     ed4:	e0 91 72 02 	lds	r30, 0x0272	; 0x800272 <integral>
     ed8:	f0 91 73 02 	lds	r31, 0x0273	; 0x800273 <integral+0x1>
     edc:	e8 0f       	add	r30, r24
     ede:	f9 1f       	adc	r31, r25
     ee0:	f0 93 73 02 	sts	0x0273, r31	; 0x800273 <integral+0x1>
     ee4:	e0 93 72 02 	sts	0x0272, r30	; 0x800272 <integral>
	
	// Remember the last position.
	last_proportional = proportional;
     ee8:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <last_proportional+0x1>
     eec:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <last_proportional>
	// Compute the difference between the two motor power settings,
	// m1 - m2.  If this is a positive number the robot will turn
	// to the right.  If it is a negative number, the robot will
	// turn to the left, and the magnitude of the number determines
	// the sharpness of the turn.
	int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     ef0:	64 e1       	ldi	r22, 0x14	; 20
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <__divmodhi4>
     ef8:	eb 01       	movw	r28, r22
     efa:	cf 01       	movw	r24, r30
     efc:	60 e1       	ldi	r22, 0x10	; 16
     efe:	77 e2       	ldi	r23, 0x27	; 39
     f00:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <__divmodhi4>
     f04:	ce 01       	movw	r24, r28
     f06:	86 0f       	add	r24, r22
     f08:	97 1f       	adc	r25, r23
     f0a:	b9 01       	movw	r22, r18
     f0c:	66 0f       	add	r22, r22
     f0e:	77 1f       	adc	r23, r23
     f10:	26 0f       	add	r18, r22
     f12:	37 1f       	adc	r19, r23
     f14:	33 23       	and	r19, r19
     f16:	14 f4       	brge	.+4      	; 0xf1c <followLine+0x6a>
     f18:	2f 5f       	subi	r18, 0xFF	; 255
     f1a:	3f 4f       	sbci	r19, 0xFF	; 255
     f1c:	35 95       	asr	r19
     f1e:	27 95       	ror	r18
     f20:	82 0f       	add	r24, r18
     f22:	93 1f       	adc	r25, r19
     f24:	8d 33       	cpi	r24, 0x3D	; 61
     f26:	91 05       	cpc	r25, r1
     f28:	14 f0       	brlt	.+4      	; 0xf2e <followLine+0x7c>
     f2a:	8c e3       	ldi	r24, 0x3C	; 60
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	84 3c       	cpi	r24, 0xC4	; 196
     f30:	5f ef       	ldi	r21, 0xFF	; 255
     f32:	95 07       	cpc	r25, r21
     f34:	14 f4       	brge	.+4      	; 0xf3a <followLine+0x88>
     f36:	84 ec       	ldi	r24, 0xC4	; 196
     f38:	9f ef       	ldi	r25, 0xFF	; 255
	if(power_difference > max)
	power_difference = max;
	if(power_difference < -max)
	power_difference = -max;
	
	if(power_difference < 0)
     f3a:	99 23       	and	r25, r25
     f3c:	34 f4       	brge	.+12     	; 0xf4a <followLine+0x98>
	set_motors(max+power_difference, max);
     f3e:	6c e3       	ldi	r22, 0x3C	; 60
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	cc 96       	adiw	r24, 0x3c	; 60
     f44:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <set_motors>
     f48:	08 c0       	rjmp	.+16     	; 0xf5a <followLine+0xa8>
	else
	set_motors(max, max-power_difference);
     f4a:	6c e3       	ldi	r22, 0x3C	; 60
     f4c:	70 e0       	ldi	r23, 0x00	; 0
     f4e:	68 1b       	sub	r22, r24
     f50:	79 0b       	sbc	r23, r25
     f52:	8c e3       	ldi	r24, 0x3C	; 60
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <set_motors>
}
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	08 95       	ret

00000f60 <wirCoord>:
		break;
	}
}*/

//start accepting DATA  for coords
void wirCoord(int orderX[], int orderY[], int *numItems){
     f60:	2f 92       	push	r2
     f62:	3f 92       	push	r3
     f64:	4f 92       	push	r4
     f66:	5f 92       	push	r5
     f68:	6f 92       	push	r6
     f6a:	7f 92       	push	r7
     f6c:	8f 92       	push	r8
     f6e:	9f 92       	push	r9
     f70:	af 92       	push	r10
     f72:	bf 92       	push	r11
     f74:	cf 92       	push	r12
     f76:	df 92       	push	r13
     f78:	ef 92       	push	r14
     f7a:	ff 92       	push	r15
     f7c:	0f 93       	push	r16
     f7e:	1f 93       	push	r17
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	00 d0       	rcall	.+0      	; 0xf86 <wirCoord+0x26>
     f86:	1f 92       	push	r1
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	e8 2e       	mov	r14, r24
     f8e:	f9 2e       	mov	r15, r25
     f90:	c6 2e       	mov	r12, r22
     f92:	d7 2e       	mov	r13, r23
     f94:	8a 01       	movw	r16, r20
	clear();
     f96:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <clear>
     f9a:	ea 82       	std	Y+2, r14	; 0x02
     f9c:	fb 82       	std	Y+3, r15	; 0x03
     f9e:	6c 2c       	mov	r6, r12
     fa0:	7d 2c       	mov	r7, r13
     fa2:	8c 2c       	mov	r8, r12
     fa4:	9d 2c       	mov	r9, r13
     fa6:	ae 2c       	mov	r10, r14
     fa8:	bf 2c       	mov	r11, r15
	//declare working values
	int numItemCount = 0;
     faa:	c1 2c       	mov	r12, r1
     fac:	d1 2c       	mov	r13, r1
		//redeclare and reinitialize looping values
		int x = 10;
		int y = 10;
		
		char data[1];
		data[0] = 'e'; //set to unused variable
     fae:	0f 2e       	mov	r0, r31
     fb0:	f5 e6       	ldi	r31, 0x65	; 101
     fb2:	5f 2e       	mov	r5, r31
     fb4:	f0 2d       	mov	r31, r0
	
	//start loop
	do{
		//redeclare and reinitialize looping values
		int x = 10;
		int y = 10;
     fb6:	21 2c       	mov	r2, r1
     fb8:	0f 2e       	mov	r0, r31
     fba:	fa e0       	ldi	r31, 0x0A	; 10
     fbc:	3f 2e       	mov	r3, r31
     fbe:	f0 2d       	mov	r31, r0
     fc0:	42 2c       	mov	r4, r2
		
		char data[1];
		data[0] = 'e'; //set to unused variable
     fc2:	59 82       	std	Y+1, r5	; 0x01
	
	//start loop
	do{
		//redeclare and reinitialize looping values
		int x = 10;
		int y = 10;
     fc4:	0f 2e       	mov	r0, r31
     fc6:	fa e0       	ldi	r31, 0x0A	; 10
     fc8:	ef 2e       	mov	r14, r31
     fca:	f0 2d       	mov	r31, r0
     fcc:	f2 2c       	mov	r15, r2
		char data[1];
		data[0] = 'e'; //set to unused variable
		do
		{
			
			serial_receive( data, 1 );// Start receiving data
     fce:	61 e0       	ldi	r22, 0x01	; 1
     fd0:	ce 01       	movw	r24, r28
     fd2:	01 96       	adiw	r24, 0x01	; 1
     fd4:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <serial_receive>
			
			if(*numItems == 0 && data[0] != 'e'){//first byte is number items
     fd8:	f8 01       	movw	r30, r16
     fda:	80 81       	ld	r24, Z
     fdc:	91 81       	ldd	r25, Z+1	; 0x01
     fde:	89 2b       	or	r24, r25
     fe0:	41 f4       	brne	.+16     	; 0xff2 <wirCoord+0x92>
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	85 36       	cpi	r24, 0x65	; 101
     fe6:	c9 f0       	breq	.+50     	; 0x101a <wirCoord+0xba>
				
				*numItems = data[0];
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	91 83       	std	Z+1, r25	; 0x01
     fec:	80 83       	st	Z, r24
				data[0] = 'e'; //reset value
     fee:	59 82       	std	Y+1, r5	; 0x01
     ff0:	ee cf       	rjmp	.-36     	; 0xfce <wirCoord+0x6e>
				continue;
			}
			
			if( data[0] != 'e' && data[0] != 'c' ) //all the other bytes are X/Y values
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	85 36       	cpi	r24, 0x65	; 101
     ff6:	a1 f0       	breq	.+40     	; 0x1020 <wirCoord+0xc0>
     ff8:	83 36       	cpi	r24, 0x63	; 99
     ffa:	a9 f0       	breq	.+42     	; 0x1026 <wirCoord+0xc6>
			{
				if( y == 10 ){
     ffc:	fa e0       	ldi	r31, 0x0A	; 10
     ffe:	ef 16       	cp	r14, r31
    1000:	f1 04       	cpc	r15, r1
    1002:	41 f4       	brne	.+16     	; 0x1014 <wirCoord+0xb4>
					y = data[0] - '0';
    1004:	e8 2e       	mov	r14, r24
    1006:	f1 2c       	mov	r15, r1
    1008:	80 e3       	ldi	r24, 0x30	; 48
    100a:	e8 1a       	sub	r14, r24
    100c:	f1 08       	sbc	r15, r1
    100e:	83 2d       	mov	r24, r3
    1010:	94 2d       	mov	r25, r4
    1012:	0b c0       	rjmp	.+22     	; 0x102a <wirCoord+0xca>
				}
				else if( x == 10 ){
					x = data[0] - '0';
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	c0 97       	sbiw	r24, 0x30	; 48
    1018:	08 c0       	rjmp	.+16     	; 0x102a <wirCoord+0xca>
    101a:	83 2d       	mov	r24, r3
    101c:	94 2d       	mov	r25, r4
    101e:	05 c0       	rjmp	.+10     	; 0x102a <wirCoord+0xca>
    1020:	83 2d       	mov	r24, r3
    1022:	94 2d       	mov	r25, r4
    1024:	02 c0       	rjmp	.+4      	; 0x102a <wirCoord+0xca>
    1026:	83 2d       	mov	r24, r3
    1028:	94 2d       	mov	r25, r4
				}
			}
			
			data[0] = 'e';
    102a:	59 82       	std	Y+1, r5	; 0x01
		} while ( x == 10 );//loop als x waarde oningevuld is
    102c:	8a 30       	cpi	r24, 0x0A	; 10
    102e:	91 05       	cpc	r25, r1
    1030:	71 f2       	breq	.-100    	; 0xfce <wirCoord+0x6e>
		orderX[numItemCount] = x; //loads value after acquisition
    1032:	f5 01       	movw	r30, r10
    1034:	81 93       	st	Z+, r24
    1036:	91 93       	st	Z+, r25
    1038:	5f 01       	movw	r10, r30
		orderY[numItemCount] = y; //loads value after acquisition
    103a:	f4 01       	movw	r30, r8
    103c:	e1 92       	st	Z+, r14
    103e:	f1 92       	st	Z+, r15
    1040:	4f 01       	movw	r8, r30
		numItemCount++;
    1042:	ff ef       	ldi	r31, 0xFF	; 255
    1044:	cf 1a       	sub	r12, r31
    1046:	df 0a       	sbc	r13, r31
	}while(numItemCount < *numItems);
    1048:	f8 01       	movw	r30, r16
    104a:	80 81       	ld	r24, Z
    104c:	91 81       	ldd	r25, Z+1	; 0x01
    104e:	c8 16       	cp	r12, r24
    1050:	d9 06       	cpc	r13, r25
    1052:	0c f4       	brge	.+2      	; 0x1056 <wirCoord+0xf6>
    1054:	b6 cf       	rjmp	.-148    	; 0xfc2 <wirCoord+0x62>
	
	//debug
	
	print("Exit yes");
    1056:	81 e8       	ldi	r24, 0x81	; 129
    1058:	91 e0       	ldi	r25, 0x01	; 1
    105a:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <print>
	delay_ms(1000);
    105e:	88 ee       	ldi	r24, 0xE8	; 232
    1060:	93 e0       	ldi	r25, 0x03	; 3
    1062:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay_ms>
	print(numItems);
    1066:	c8 01       	movw	r24, r16
    1068:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <print>
	delay_ms(1000);
    106c:	88 ee       	ldi	r24, 0xE8	; 232
    106e:	93 e0       	ldi	r25, 0x03	; 3
    1070:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay_ms>
	clear();
    1074:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <clear>
	for (int i=0; i < *numItems; i++)
    1078:	f8 01       	movw	r30, r16
    107a:	80 81       	ld	r24, Z
    107c:	91 81       	ldd	r25, Z+1	; 0x01
    107e:	18 16       	cp	r1, r24
    1080:	19 06       	cpc	r1, r25
    1082:	9c f5       	brge	.+102    	; 0x10ea <wirCoord+0x18a>
    1084:	e1 2c       	mov	r14, r1
    1086:	f1 2c       	mov	r15, r1
	{		
	lcd_goto_xy(0, 1);
    1088:	61 e0       	ldi	r22, 0x01	; 1
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <lcd_goto_xy>
	print_long(orderX[i]);
    1090:	ea 81       	ldd	r30, Y+2	; 0x02
    1092:	fb 81       	ldd	r31, Y+3	; 0x03
    1094:	61 91       	ld	r22, Z+
    1096:	71 91       	ld	r23, Z+
    1098:	fb 83       	std	Y+3, r31	; 0x03
    109a:	ea 83       	std	Y+2, r30	; 0x02
    109c:	07 2e       	mov	r0, r23
    109e:	00 0c       	add	r0, r0
    10a0:	88 0b       	sbc	r24, r24
    10a2:	99 0b       	sbc	r25, r25
    10a4:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <print_long>
	delay_ms(1000);
    10a8:	88 ee       	ldi	r24, 0xE8	; 232
    10aa:	93 e0       	ldi	r25, 0x03	; 3
    10ac:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay_ms>
	lcd_goto_xy(0,0);
    10b0:	60 e0       	ldi	r22, 0x00	; 0
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <lcd_goto_xy>
	print_long(orderY[i]);
    10b8:	f3 01       	movw	r30, r6
    10ba:	61 91       	ld	r22, Z+
    10bc:	71 91       	ld	r23, Z+
    10be:	3f 01       	movw	r6, r30
    10c0:	07 2e       	mov	r0, r23
    10c2:	00 0c       	add	r0, r0
    10c4:	88 0b       	sbc	r24, r24
    10c6:	99 0b       	sbc	r25, r25
    10c8:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <print_long>
	delay_ms(1000);
    10cc:	88 ee       	ldi	r24, 0xE8	; 232
    10ce:	93 e0       	ldi	r25, 0x03	; 3
    10d0:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay_ms>
	clear();
    10d4:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <clear>
	print("Exit yes");
	delay_ms(1000);
	print(numItems);
	delay_ms(1000);
	clear();
	for (int i=0; i < *numItems; i++)
    10d8:	ff ef       	ldi	r31, 0xFF	; 255
    10da:	ef 1a       	sub	r14, r31
    10dc:	ff 0a       	sbc	r15, r31
    10de:	f8 01       	movw	r30, r16
    10e0:	80 81       	ld	r24, Z
    10e2:	91 81       	ldd	r25, Z+1	; 0x01
    10e4:	e8 16       	cp	r14, r24
    10e6:	f9 06       	cpc	r15, r25
    10e8:	7c f2       	brlt	.-98     	; 0x1088 <wirCoord+0x128>
	lcd_goto_xy(0,0);
	print_long(orderY[i]);
	delay_ms(1000);
	clear();
	}	
}
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	df 91       	pop	r29
    10f2:	cf 91       	pop	r28
    10f4:	1f 91       	pop	r17
    10f6:	0f 91       	pop	r16
    10f8:	ff 90       	pop	r15
    10fa:	ef 90       	pop	r14
    10fc:	df 90       	pop	r13
    10fe:	cf 90       	pop	r12
    1100:	bf 90       	pop	r11
    1102:	af 90       	pop	r10
    1104:	9f 90       	pop	r9
    1106:	8f 90       	pop	r8
    1108:	7f 90       	pop	r7
    110a:	6f 90       	pop	r6
    110c:	5f 90       	pop	r5
    110e:	4f 90       	pop	r4
    1110:	3f 90       	pop	r3
    1112:	2f 90       	pop	r2
    1114:	08 95       	ret

00001116 <wirMove>:

} while(count1 < items);
}
*/
void wirMove( char data){//parse data to moving command
	switch( data )
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	fc 01       	movw	r30, r24
    111a:	e3 55       	subi	r30, 0x53	; 83
    111c:	f1 09       	sbc	r31, r1
    111e:	e5 32       	cpi	r30, 0x25	; 37
    1120:	f1 05       	cpc	r31, r1
    1122:	08 f0       	brcs	.+2      	; 0x1126 <wirMove+0x10>
    1124:	47 c0       	rjmp	.+142    	; 0x11b4 <wirMove+0x9e>
    1126:	ec 5c       	subi	r30, 0xCC	; 204
    1128:	ff 4f       	sbci	r31, 0xFF	; 255
    112a:	0c 94 eb 16 	jmp	0x2dd6	; 0x2dd6 <__tablejump2__>
	{
		case 'w':
		set_motors( speed, speed );//forward
    112e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <speed>
    1132:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <speed+0x1>
    1136:	bc 01       	movw	r22, r24
    1138:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <set_motors>
		break;
    113c:	08 95       	ret
		case 's':
		set_motors( -speed, -speed );//backward
    113e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <speed>
    1142:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <speed+0x1>
    1146:	91 95       	neg	r25
    1148:	81 95       	neg	r24
    114a:	91 09       	sbc	r25, r1
    114c:	bc 01       	movw	r22, r24
    114e:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <set_motors>
		break;
    1152:	08 95       	ret
		case 'a':
		set_motors( -speed, speed );//left
    1154:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <speed>
    1158:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <speed+0x1>
    115c:	bc 01       	movw	r22, r24
    115e:	91 95       	neg	r25
    1160:	81 95       	neg	r24
    1162:	91 09       	sbc	r25, r1
    1164:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <set_motors>
		break;
    1168:	08 95       	ret
		case 'd':
		set_motors( speed, -speed );//right
    116a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <speed>
    116e:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <speed+0x1>
    1172:	66 27       	eor	r22, r22
    1174:	77 27       	eor	r23, r23
    1176:	68 1b       	sub	r22, r24
    1178:	79 0b       	sbc	r23, r25
    117a:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <set_motors>
		break;
    117e:	08 95       	ret
		case '[':
		speed+=10;//decrease sped
    1180:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <speed>
    1184:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <speed+0x1>
    1188:	0a 96       	adiw	r24, 0x0a	; 10
    118a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <speed+0x1>
    118e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <speed>
		break;
    1192:	08 95       	ret
		case ']':
		speed+=10;// inscrease speed
    1194:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <speed>
    1198:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <speed+0x1>
    119c:	0a 96       	adiw	r24, 0x0a	; 10
    119e:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <speed+0x1>
    11a2:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <speed>
		break;
    11a6:	08 95       	ret
		case 'S':
		set_motors( 0, 0 );//emergency stop
    11a8:	60 e0       	ldi	r22, 0x00	; 0
    11aa:	70 e0       	ldi	r23, 0x00	; 0
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <set_motors>
    11b4:	08 95       	ret

000011b6 <wirManual>:
		set_motors( 0, 0 );//stop as default
		*/
	}
}

void wirManual(){//manual mode init
    11b6:	ff 92       	push	r15
    11b8:	0f 93       	push	r16
    11ba:	1f 93       	push	r17
    11bc:	cf 93       	push	r28
    11be:	df 93       	push	r29
    11c0:	1f 92       	push	r1
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
	char data[1];
	int speed = 50;
	
	while (data[0] != 'S'){//loop as long as emergency stop is depressed
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	83 35       	cpi	r24, 0x53	; 83
    11ca:	b9 f0       	breq	.+46     	; 0x11fa <wirManual+0x44>
		serial_receive( data, 1 );
    11cc:	8e 01       	movw	r16, r28
    11ce:	0f 5f       	subi	r16, 0xFF	; 255
    11d0:	1f 4f       	sbci	r17, 0xFF	; 255
		clear();
		data[0] = 'e'; //reset data.		
    11d2:	0f 2e       	mov	r0, r31
    11d4:	f5 e6       	ldi	r31, 0x65	; 101
    11d6:	ff 2e       	mov	r15, r31
    11d8:	f0 2d       	mov	r31, r0
void wirManual(){//manual mode init
	char data[1];
	int speed = 50;
	
	while (data[0] != 'S'){//loop as long as emergency stop is depressed
		serial_receive( data, 1 );
    11da:	61 e0       	ldi	r22, 0x01	; 1
    11dc:	c8 01       	movw	r24, r16
    11de:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <serial_receive>
		clear();
    11e2:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <clear>
		data[0] = 'e'; //reset data.		
    11e6:	f9 82       	std	Y+1, r15	; 0x01
		print_character(data);
    11e8:	80 2f       	mov	r24, r16
    11ea:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <print_character>
		wirMove(data[0]);//parse data
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	0e 94 8b 08 	call	0x1116	; 0x1116 <wirMove>

void wirManual(){//manual mode init
	char data[1];
	int speed = 50;
	
	while (data[0] != 'S'){//loop as long as emergency stop is depressed
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	83 35       	cpi	r24, 0x53	; 83
    11f8:	81 f7       	brne	.-32     	; 0x11da <wirManual+0x24>
		clear();
		data[0] = 'e'; //reset data.		
		print_character(data);
		wirMove(data[0]);//parse data
	}
	set_motors( 0, 0 );
    11fa:	60 e0       	ldi	r22, 0x00	; 0
    11fc:	70 e0       	ldi	r23, 0x00	; 0
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <set_motors>
	serial_cancel_receive();
    1206:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <serial_cancel_receive>
}
    120a:	0f 90       	pop	r0
    120c:	df 91       	pop	r29
    120e:	cf 91       	pop	r28
    1210:	1f 91       	pop	r17
    1212:	0f 91       	pop	r16
    1214:	ff 90       	pop	r15
    1216:	08 95       	ret

00001218 <_ZN15OrangutanAnalog7setModeEh.part.0>:
    1218:	ec e7       	ldi	r30, 0x7C	; 124
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	8f 7d       	andi	r24, 0xDF	; 223
    1220:	80 83       	st	Z, r24
    1222:	08 95       	ret

00001224 <_ZN15OrangutanAnalog7setModeEh>:
    1224:	81 11       	cpse	r24, r1
    1226:	03 c0       	rjmp	.+6      	; 0x122e <_ZN15OrangutanAnalog7setModeEh+0xa>
    1228:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZN15OrangutanAnalog7setModeEh.part.0>
    122c:	08 95       	ret
    122e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1232:	80 62       	ori	r24, 0x20	; 32
    1234:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1238:	08 95       	ret

0000123a <_ZN15OrangutanAnalog7getModeEv>:
    123a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    123e:	85 fb       	bst	r24, 5
    1240:	88 27       	eor	r24, r24
    1242:	80 f9       	bld	r24, 0
    1244:	08 95       	ret

00001246 <_ZN15OrangutanAnalog16conversionResultEv>:
    1246:	0e 94 1d 09 	call	0x123a	; 0x123a <_ZN15OrangutanAnalog7getModeEv>
    124a:	88 23       	and	r24, r24
    124c:	21 f0       	breq	.+8      	; 0x1256 <_ZN15OrangutanAnalog16conversionResultEv+0x10>
    124e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	08 95       	ret
    1256:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    125a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    125e:	08 95       	ret

00001260 <_ZN15OrangutanAnalog15startConversionEhh>:
    1260:	80 32       	cpi	r24, 0x20	; 32
    1262:	a0 f4       	brcc	.+40     	; 0x128c <_ZN15OrangutanAnalog15startConversionEhh+0x2c>
    1264:	97 e8       	ldi	r25, 0x87	; 135
    1266:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    126a:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    126e:	66 23       	and	r22, r22
    1270:	11 f0       	breq	.+4      	; 0x1276 <_ZN15OrangutanAnalog15startConversionEhh+0x16>
    1272:	90 6c       	ori	r25, 0xC0	; 192
    1274:	02 c0       	rjmp	.+4      	; 0x127a <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
    1276:	9f 77       	andi	r25, 0x7F	; 127
    1278:	90 64       	ori	r25, 0x40	; 64
    127a:	90 7e       	andi	r25, 0xE0	; 224
    127c:	98 2b       	or	r25, r24
    127e:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1282:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1286:	80 64       	ori	r24, 0x40	; 64
    1288:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    128c:	08 95       	ret

0000128e <_ZN15OrangutanAnalog11readAverageEhj>:
    128e:	a0 e0       	ldi	r26, 0x00	; 0
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	ed e4       	ldi	r30, 0x4D	; 77
    1294:	f9 e0       	ldi	r31, 0x09	; 9
    1296:	0c 94 1d 17 	jmp	0x2e3a	; 0x2e3a <__prologue_saves__+0x14>
    129a:	eb 01       	movw	r28, r22
    129c:	60 e0       	ldi	r22, 0x00	; 0
    129e:	0e 94 30 09 	call	0x1260	; 0x1260 <_ZN15OrangutanAnalog15startConversionEhh>
    12a2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    12a6:	86 fd       	sbrc	r24, 6
    12a8:	fc cf       	rjmp	.-8      	; 0x12a2 <_ZN15OrangutanAnalog11readAverageEhj+0x14>
    12aa:	8e 01       	movw	r16, r28
    12ac:	c1 2c       	mov	r12, r1
    12ae:	d1 2c       	mov	r13, r1
    12b0:	76 01       	movw	r14, r12
    12b2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    12b6:	80 64       	ori	r24, 0x40	; 64
    12b8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    12bc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    12c0:	86 fd       	sbrc	r24, 6
    12c2:	fc cf       	rjmp	.-8      	; 0x12bc <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
    12c4:	0e 94 23 09 	call	0x1246	; 0x1246 <_ZN15OrangutanAnalog16conversionResultEv>
    12c8:	c8 0e       	add	r12, r24
    12ca:	d9 1e       	adc	r13, r25
    12cc:	e1 1c       	adc	r14, r1
    12ce:	f1 1c       	adc	r15, r1
    12d0:	01 50       	subi	r16, 0x01	; 1
    12d2:	11 09       	sbc	r17, r1
    12d4:	01 15       	cp	r16, r1
    12d6:	11 05       	cpc	r17, r1
    12d8:	61 f7       	brne	.-40     	; 0x12b2 <_ZN15OrangutanAnalog11readAverageEhj+0x24>
    12da:	ce 01       	movw	r24, r28
    12dc:	96 95       	lsr	r25
    12de:	87 95       	ror	r24
    12e0:	c0 34       	cpi	r28, 0x40	; 64
    12e2:	d1 05       	cpc	r29, r1
    12e4:	38 f4       	brcc	.+14     	; 0x12f4 <_ZN15OrangutanAnalog11readAverageEhj+0x66>
    12e6:	8c 0d       	add	r24, r12
    12e8:	9d 1d       	adc	r25, r13
    12ea:	be 01       	movw	r22, r28
    12ec:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__udivmodhi4>
    12f0:	cb 01       	movw	r24, r22
    12f2:	0e c0       	rjmp	.+28     	; 0x1310 <_ZN15OrangutanAnalog11readAverageEhj+0x82>
    12f4:	a7 01       	movw	r20, r14
    12f6:	96 01       	movw	r18, r12
    12f8:	28 0f       	add	r18, r24
    12fa:	39 1f       	adc	r19, r25
    12fc:	41 1d       	adc	r20, r1
    12fe:	51 1d       	adc	r21, r1
    1300:	ca 01       	movw	r24, r20
    1302:	b9 01       	movw	r22, r18
    1304:	9e 01       	movw	r18, r28
    1306:	40 e0       	ldi	r20, 0x00	; 0
    1308:	50 e0       	ldi	r21, 0x00	; 0
    130a:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <__udivmodsi4>
    130e:	c9 01       	movw	r24, r18
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
    1314:	e8 e0       	ldi	r30, 0x08	; 8
    1316:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <__epilogue_restores__+0x14>

0000131a <_ZN15OrangutanAnalog12toMillivoltsEj>:
    131a:	cf 92       	push	r12
    131c:	df 92       	push	r13
    131e:	ef 92       	push	r14
    1320:	ff 92       	push	r15
    1322:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
    1326:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
    132a:	9c 01       	movw	r18, r24
    132c:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <__umulhisi3>
    1330:	6b 01       	movw	r12, r22
    1332:	7c 01       	movw	r14, r24
    1334:	0e 94 1d 09 	call	0x123a	; 0x123a <_ZN15OrangutanAnalog7getModeEv>
    1338:	88 23       	and	r24, r24
    133a:	59 f0       	breq	.+22     	; 0x1352 <_ZN15OrangutanAnalog12toMillivoltsEj+0x38>
    133c:	c7 01       	movw	r24, r14
    133e:	b6 01       	movw	r22, r12
    1340:	61 58       	subi	r22, 0x81	; 129
    1342:	7f 4f       	sbci	r23, 0xFF	; 255
    1344:	8f 4f       	sbci	r24, 0xFF	; 255
    1346:	9f 4f       	sbci	r25, 0xFF	; 255
    1348:	2f ef       	ldi	r18, 0xFF	; 255
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	40 e0       	ldi	r20, 0x00	; 0
    134e:	50 e0       	ldi	r21, 0x00	; 0
    1350:	0a c0       	rjmp	.+20     	; 0x1366 <_ZN15OrangutanAnalog12toMillivoltsEj+0x4c>
    1352:	c7 01       	movw	r24, r14
    1354:	b6 01       	movw	r22, r12
    1356:	61 50       	subi	r22, 0x01	; 1
    1358:	7e 4f       	sbci	r23, 0xFE	; 254
    135a:	8f 4f       	sbci	r24, 0xFF	; 255
    135c:	9f 4f       	sbci	r25, 0xFF	; 255
    135e:	2f ef       	ldi	r18, 0xFF	; 255
    1360:	33 e0       	ldi	r19, 0x03	; 3
    1362:	40 e0       	ldi	r20, 0x00	; 0
    1364:	50 e0       	ldi	r21, 0x00	; 0
    1366:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <__udivmodsi4>
    136a:	c9 01       	movw	r24, r18
    136c:	ff 90       	pop	r15
    136e:	ef 90       	pop	r14
    1370:	df 90       	pop	r13
    1372:	cf 90       	pop	r12
    1374:	08 95       	ret

00001376 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
    1376:	0e 94 47 09 	call	0x128e	; 0x128e <_ZN15OrangutanAnalog11readAverageEhj>
    137a:	0e 94 8d 09 	call	0x131a	; 0x131a <_ZN15OrangutanAnalog12toMillivoltsEj>
    137e:	08 95       	ret

00001380 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
    1380:	1f 93       	push	r17
    1382:	cf 93       	push	r28
    1384:	df 93       	push	r29
    1386:	0e 94 1d 09 	call	0x123a	; 0x123a <_ZN15OrangutanAnalog7getModeEv>
    138a:	18 2f       	mov	r17, r24
    138c:	0e 94 0c 09 	call	0x1218	; 0x1218 <_ZN15OrangutanAnalog7setModeEh.part.0>
    1390:	6a e0       	ldi	r22, 0x0A	; 10
    1392:	70 e0       	ldi	r23, 0x00	; 0
    1394:	86 e0       	ldi	r24, 0x06	; 6
    1396:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
    139a:	ec 01       	movw	r28, r24
    139c:	81 2f       	mov	r24, r17
    139e:	0e 94 12 09 	call	0x1224	; 0x1224 <_ZN15OrangutanAnalog7setModeEh>
    13a2:	ce 01       	movw	r24, r28
    13a4:	88 0f       	add	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	8c 0f       	add	r24, r28
    13aa:	9d 1f       	adc	r25, r29
    13ac:	01 96       	adiw	r24, 0x01	; 1
    13ae:	96 95       	lsr	r25
    13b0:	87 95       	ror	r24
    13b2:	df 91       	pop	r29
    13b4:	cf 91       	pop	r28
    13b6:	1f 91       	pop	r17
    13b8:	08 95       	ret

000013ba <read_battery_millivolts_3pi>:
    13ba:	0e 94 c0 09 	call	0x1380	; 0x1380 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
    13be:	08 95       	ret

000013c0 <_ZL16currentCharacterv>:
    13c0:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <_ZL17use_program_space>
    13c4:	e0 91 8a 01 	lds	r30, 0x018A	; 0x80018a <__data_end>
    13c8:	f0 91 8b 01 	lds	r31, 0x018B	; 0x80018b <__data_end+0x1>
    13cc:	99 23       	and	r25, r25
    13ce:	11 f0       	breq	.+4      	; 0x13d4 <_ZL16currentCharacterv+0x14>
    13d0:	84 91       	lpm	r24, Z
    13d2:	01 c0       	rjmp	.+2      	; 0x13d6 <_ZL16currentCharacterv+0x16>
    13d4:	80 81       	ld	r24, Z
    13d6:	2f eb       	ldi	r18, 0xBF	; 191
    13d8:	28 0f       	add	r18, r24
    13da:	2a 31       	cpi	r18, 0x1A	; 26
    13dc:	10 f4       	brcc	.+4      	; 0x13e2 <_ZL16currentCharacterv+0x22>
    13de:	80 5e       	subi	r24, 0xE0	; 224
    13e0:	08 95       	ret
    13e2:	80 32       	cpi	r24, 0x20	; 32
    13e4:	49 f4       	brne	.+18     	; 0x13f8 <_ZL16currentCharacterv+0x38>
    13e6:	9f 01       	movw	r18, r30
    13e8:	2f 5f       	subi	r18, 0xFF	; 255
    13ea:	3f 4f       	sbci	r19, 0xFF	; 255
    13ec:	30 93 8b 01 	sts	0x018B, r19	; 0x80018b <__data_end+0x1>
    13f0:	20 93 8a 01 	sts	0x018A, r18	; 0x80018a <__data_end>
    13f4:	ef 2b       	or	r30, r31
    13f6:	31 f7       	brne	.-52     	; 0x13c4 <_ZL16currentCharacterv+0x4>
    13f8:	08 95       	ret

000013fa <_ZL9getNumberv>:
    13fa:	1f 93       	push	r17
    13fc:	cf 93       	push	r28
    13fe:	df 93       	push	r29
    1400:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <_ZL16currentCharacterv>
    1404:	c0 e0       	ldi	r28, 0x00	; 0
    1406:	d0 e0       	ldi	r29, 0x00	; 0
    1408:	1a e0       	ldi	r17, 0x0A	; 10
    140a:	90 ed       	ldi	r25, 0xD0	; 208
    140c:	98 0f       	add	r25, r24
    140e:	9a 30       	cpi	r25, 0x0A	; 10
    1410:	b8 f4       	brcc	.+46     	; 0x1440 <_ZL9getNumberv+0x46>
    1412:	9e 01       	movw	r18, r28
    1414:	12 9f       	mul	r17, r18
    1416:	e0 01       	movw	r28, r0
    1418:	13 9f       	mul	r17, r19
    141a:	d0 0d       	add	r29, r0
    141c:	11 24       	eor	r1, r1
    141e:	c8 0f       	add	r28, r24
    1420:	d1 1d       	adc	r29, r1
    1422:	87 fd       	sbrc	r24, 7
    1424:	da 95       	dec	r29
    1426:	e0 97       	sbiw	r28, 0x30	; 48
    1428:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <__data_end>
    142c:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <__data_end+0x1>
    1430:	01 96       	adiw	r24, 0x01	; 1
    1432:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <__data_end+0x1>
    1436:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <__data_end>
    143a:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <_ZL16currentCharacterv>
    143e:	e5 cf       	rjmp	.-54     	; 0x140a <_ZL9getNumberv+0x10>
    1440:	ce 01       	movw	r24, r28
    1442:	df 91       	pop	r29
    1444:	cf 91       	pop	r28
    1446:	1f 91       	pop	r17
    1448:	08 95       	ret

0000144a <_ZN15OrangutanBuzzer5init2Ev>:
    144a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    144e:	83 e2       	ldi	r24, 0x23	; 35
    1450:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1454:	81 e1       	ldi	r24, 0x11	; 17
    1456:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    145a:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    145e:	80 e1       	ldi	r24, 0x10	; 16
    1460:	97 e2       	ldi	r25, 0x27	; 39
    1462:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1466:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    146a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    146e:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1472:	22 9a       	sbi	0x04, 2	; 4
    1474:	78 94       	sei
    1476:	08 95       	ret

00001478 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
    1478:	8f 92       	push	r8
    147a:	9f 92       	push	r9
    147c:	af 92       	push	r10
    147e:	bf 92       	push	r11
    1480:	df 92       	push	r13
    1482:	ef 92       	push	r14
    1484:	ff 92       	push	r15
    1486:	0f 93       	push	r16
    1488:	1f 93       	push	r17
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
    148e:	5c 01       	movw	r10, r24
    1490:	8b 01       	movw	r16, r22
    1492:	d4 2e       	mov	r13, r20
    1494:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <buzzerInitialized>
    1498:	81 11       	cpse	r24, r1
    149a:	05 c0       	rjmp	.+10     	; 0x14a6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <buzzerInitialized>
    14a2:	0e 94 25 0a 	call	0x144a	; 0x144a <_ZN15OrangutanBuzzer5init2Ev>
    14a6:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <buzzerFinished>
    14aa:	b7 fe       	sbrs	r11, 7
    14ac:	05 c0       	rjmp	.+10     	; 0x14b8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
    14ae:	e8 94       	clt
    14b0:	b7 f8       	bld	r11, 7
    14b2:	2a e0       	ldi	r18, 0x0A	; 10
    14b4:	f2 2e       	mov	r15, r18
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
    14b8:	ff 24       	eor	r15, r15
    14ba:	f3 94       	inc	r15
    14bc:	e0 90 81 00 	lds	r14, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    14c0:	2e 2d       	mov	r18, r14
    14c2:	28 7f       	andi	r18, 0xF8	; 248
    14c4:	e2 2e       	mov	r14, r18
    14c6:	48 ec       	ldi	r20, 0xC8	; 200
    14c8:	f4 9e       	mul	r15, r20
    14ca:	c0 01       	movw	r24, r0
    14cc:	11 24       	eor	r1, r1
    14ce:	8a 15       	cp	r24, r10
    14d0:	9b 05       	cpc	r25, r11
    14d2:	e0 f4       	brcc	.+56     	; 0x150c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
    14d4:	e5 01       	movw	r28, r10
    14d6:	51 e1       	ldi	r21, 0x11	; 17
    14d8:	a5 16       	cp	r10, r21
    14da:	57 e2       	ldi	r21, 0x27	; 39
    14dc:	b5 06       	cpc	r11, r21
    14de:	10 f0       	brcs	.+4      	; 0x14e4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
    14e0:	c0 e1       	ldi	r28, 0x10	; 16
    14e2:	d7 e2       	ldi	r29, 0x27	; 39
    14e4:	be 01       	movw	r22, r28
    14e6:	76 95       	lsr	r23
    14e8:	67 95       	ror	r22
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	60 58       	subi	r22, 0x80	; 128
    14f0:	79 46       	sbci	r23, 0x69	; 105
    14f2:	87 46       	sbci	r24, 0x67	; 103
    14f4:	9f 4f       	sbci	r25, 0xFF	; 255
    14f6:	4e 01       	movw	r8, r28
    14f8:	a1 2c       	mov	r10, r1
    14fa:	b1 2c       	mov	r11, r1
    14fc:	a5 01       	movw	r20, r10
    14fe:	94 01       	movw	r18, r8
    1500:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <__udivmodsi4>
    1504:	59 01       	movw	r10, r18
    1506:	8e 2d       	mov	r24, r14
    1508:	81 60       	ori	r24, 0x01	; 1
    150a:	24 c0       	rjmp	.+72     	; 0x1554 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
    150c:	c8 e2       	ldi	r28, 0x28	; 40
    150e:	fc 9e       	mul	r15, r28
    1510:	c0 2d       	mov	r28, r0
    1512:	11 24       	eor	r1, r1
    1514:	d0 e0       	ldi	r29, 0x00	; 0
    1516:	ca 15       	cp	r28, r10
    1518:	db 05       	cpc	r29, r11
    151a:	08 f4       	brcc	.+2      	; 0x151e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
    151c:	e5 01       	movw	r28, r10
    151e:	be 01       	movw	r22, r28
    1520:	76 95       	lsr	r23
    1522:	67 95       	ror	r22
    1524:	9e 01       	movw	r18, r28
    1526:	40 e0       	ldi	r20, 0x00	; 0
    1528:	50 e0       	ldi	r21, 0x00	; 0
    152a:	8a e0       	ldi	r24, 0x0A	; 10
    152c:	f8 12       	cpse	r15, r24
    152e:	07 c0       	rjmp	.+14     	; 0x153e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	60 5e       	subi	r22, 0xE0	; 224
    1536:	73 44       	sbci	r23, 0x43	; 67
    1538:	81 44       	sbci	r24, 0x41	; 65
    153a:	9f 4f       	sbci	r25, 0xFF	; 255
    153c:	06 c0       	rjmp	.+12     	; 0x154a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	60 53       	subi	r22, 0x30	; 48
    1544:	7d 4e       	sbci	r23, 0xED	; 237
    1546:	8c 4e       	sbci	r24, 0xEC	; 236
    1548:	9f 4f       	sbci	r25, 0xFF	; 255
    154a:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <__udivmodsi4>
    154e:	59 01       	movw	r10, r18
    1550:	8e 2d       	mov	r24, r14
    1552:	82 60       	ori	r24, 0x02	; 2
    1554:	88 2e       	mov	r8, r24
    1556:	2a e0       	ldi	r18, 0x0A	; 10
    1558:	f2 12       	cpse	r15, r18
    155a:	07 c0       	rjmp	.+14     	; 0x156a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
    155c:	ce 01       	movw	r24, r28
    155e:	05 96       	adiw	r24, 0x05	; 5
    1560:	6a e0       	ldi	r22, 0x0A	; 10
    1562:	70 e0       	ldi	r23, 0x00	; 0
    1564:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__udivmodhi4>
    1568:	eb 01       	movw	r28, r22
    156a:	c8 3e       	cpi	r28, 0xE8	; 232
    156c:	43 e0       	ldi	r20, 0x03	; 3
    156e:	d4 07       	cpc	r29, r20
    1570:	59 f0       	breq	.+22     	; 0x1588 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    1572:	98 01       	movw	r18, r16
    1574:	de 01       	movw	r26, r28
    1576:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <__umulhisi3>
    157a:	28 ee       	ldi	r18, 0xE8	; 232
    157c:	33 e0       	ldi	r19, 0x03	; 3
    157e:	40 e0       	ldi	r20, 0x00	; 0
    1580:	50 e0       	ldi	r21, 0x00	; 0
    1582:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__divmodsi4>
    1586:	89 01       	movw	r16, r18
    1588:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    158c:	80 92 81 00 	sts	0x0081, r8	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1590:	b0 92 89 00 	sts	0x0089, r11	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1594:	a0 92 88 00 	sts	0x0088, r10	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1598:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    159c:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    15a0:	4d 2d       	mov	r20, r13
    15a2:	40 31       	cpi	r20, 0x10	; 16
    15a4:	08 f0       	brcs	.+2      	; 0x15a8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    15a6:	4f e0       	ldi	r20, 0x0F	; 15
    15a8:	80 e1       	ldi	r24, 0x10	; 16
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	84 1b       	sub	r24, r20
    15ae:	91 09       	sbc	r25, r1
    15b0:	a9 01       	movw	r20, r18
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    15b4:	56 95       	lsr	r21
    15b6:	47 95       	ror	r20
    15b8:	8a 95       	dec	r24
    15ba:	e2 f7       	brpl	.-8      	; 0x15b4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    15bc:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    15c0:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    15c4:	10 93 92 01 	sts	0x0192, r17	; 0x800192 <_ZL13buzzerTimeout+0x1>
    15c8:	00 93 91 01 	sts	0x0191, r16	; 0x800191 <_ZL13buzzerTimeout>
    15cc:	86 b3       	in	r24, 0x16	; 22
    15ce:	8f ef       	ldi	r24, 0xFF	; 255
    15d0:	86 bb       	out	0x16, r24	; 22
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    15d8:	df 91       	pop	r29
    15da:	cf 91       	pop	r28
    15dc:	1f 91       	pop	r17
    15de:	0f 91       	pop	r16
    15e0:	ff 90       	pop	r15
    15e2:	ef 90       	pop	r14
    15e4:	df 90       	pop	r13
    15e6:	bf 90       	pop	r11
    15e8:	af 90       	pop	r10
    15ea:	9f 90       	pop	r9
    15ec:	8f 90       	pop	r8
    15ee:	08 95       	ret

000015f0 <play_frequency>:
    15f0:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    15f4:	08 95       	ret

000015f6 <_ZN15OrangutanBuzzer8playNoteEhjh>:
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	eb 01       	movw	r28, r22
    15fc:	8f 3f       	cpi	r24, 0xFF	; 255
    15fe:	11 f0       	breq	.+4      	; 0x1604 <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
    1600:	41 11       	cpse	r20, r1
    1602:	05 c0       	rjmp	.+10     	; 0x160e <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
    1604:	40 e0       	ldi	r20, 0x00	; 0
    1606:	be 01       	movw	r22, r28
    1608:	88 ee       	ldi	r24, 0xE8	; 232
    160a:	93 e0       	ldi	r25, 0x03	; 3
    160c:	43 c0       	rjmp	.+134    	; 0x1694 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
    160e:	81 31       	cpi	r24, 0x11	; 17
    1610:	30 f0       	brcs	.+12     	; 0x161e <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
    1612:	50 ef       	ldi	r21, 0xF0	; 240
    1614:	58 0f       	add	r21, r24
    1616:	50 36       	cpi	r21, 0x60	; 96
    1618:	18 f0       	brcs	.+6      	; 0x1620 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    161a:	5f e5       	ldi	r21, 0x5F	; 95
    161c:	01 c0       	rjmp	.+2      	; 0x1620 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    161e:	50 e0       	ldi	r21, 0x00	; 0
    1620:	85 2f       	mov	r24, r21
    1622:	6c e0       	ldi	r22, 0x0C	; 12
    1624:	0e 94 76 16 	call	0x2cec	; 0x2cec <__udivmodqi4>
    1628:	68 2f       	mov	r22, r24
    162a:	74 ef       	ldi	r23, 0xF4	; 244
    162c:	76 03       	mulsu	r23, r22
    162e:	90 01       	movw	r18, r0
    1630:	11 24       	eor	r1, r1
    1632:	25 0f       	add	r18, r21
    1634:	31 1d       	adc	r19, r1
    1636:	2c 30       	cpi	r18, 0x0C	; 12
    1638:	31 05       	cpc	r19, r1
    163a:	40 f4       	brcc	.+16     	; 0x164c <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
    163c:	f9 01       	movw	r30, r18
    163e:	ee 0f       	add	r30, r30
    1640:	ff 1f       	adc	r31, r31
    1642:	e4 5d       	subi	r30, 0xD4	; 212
    1644:	fe 4f       	sbci	r31, 0xFE	; 254
    1646:	20 81       	ld	r18, Z
    1648:	31 81       	ldd	r19, Z+1	; 0x01
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	87 30       	cpi	r24, 0x07	; 7
    1652:	81 f0       	breq	.+32     	; 0x1674 <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
    1654:	08 2e       	mov	r0, r24
    1656:	02 c0       	rjmp	.+4      	; 0x165c <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
    1658:	22 0f       	add	r18, r18
    165a:	33 1f       	adc	r19, r19
    165c:	0a 94       	dec	r0
    165e:	e2 f7       	brpl	.-8      	; 0x1658 <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    1660:	82 30       	cpi	r24, 0x02	; 2
    1662:	28 f0       	brcs	.+10     	; 0x166e <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
    1664:	c9 01       	movw	r24, r18
    1666:	05 96       	adiw	r24, 0x05	; 5
    1668:	6a e0       	ldi	r22, 0x0A	; 10
    166a:	70 e0       	ldi	r23, 0x00	; 0
    166c:	0c c0       	rjmp	.+24     	; 0x1686 <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
    166e:	c9 01       	movw	r24, r18
    1670:	90 58       	subi	r25, 0x80	; 128
    1672:	0c c0       	rjmp	.+24     	; 0x168c <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
    1674:	c9 01       	movw	r24, r18
    1676:	36 e0       	ldi	r19, 0x06	; 6
    1678:	88 0f       	add	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	3a 95       	dec	r19
    167e:	e1 f7       	brne	.-8      	; 0x1678 <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
    1680:	02 96       	adiw	r24, 0x02	; 2
    1682:	65 e0       	ldi	r22, 0x05	; 5
    1684:	70 e0       	ldi	r23, 0x00	; 0
    1686:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__udivmodhi4>
    168a:	cb 01       	movw	r24, r22
    168c:	40 31       	cpi	r20, 0x10	; 16
    168e:	08 f0       	brcs	.+2      	; 0x1692 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    1690:	4f e0       	ldi	r20, 0x0F	; 15
    1692:	be 01       	movw	r22, r28
    1694:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1698:	df 91       	pop	r29
    169a:	cf 91       	pop	r28
    169c:	08 95       	ret

0000169e <_ZL8nextNotev>:
    169e:	a2 e0       	ldi	r26, 0x02	; 2
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	e5 e5       	ldi	r30, 0x55	; 85
    16a4:	fb e0       	ldi	r31, 0x0B	; 11
    16a6:	0c 94 15 17 	jmp	0x2e2a	; 0x2e2a <__prologue_saves__+0x4>
    16aa:	90 90 0a 01 	lds	r9, 0x010A	; 0x80010a <_ZL6octave>
    16ae:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <_ZL8staccato>
    16b2:	88 23       	and	r24, r24
    16b4:	21 f0       	breq	.+8      	; 0x16be <_ZL8nextNotev+0x20>
    16b6:	60 91 8d 01 	lds	r22, 0x018D	; 0x80018d <_ZL22staccato_rest_duration>
    16ba:	61 11       	cpse	r22, r1
    16bc:	17 c0       	rjmp	.+46     	; 0x16ec <_ZL8nextNotev+0x4e>
    16be:	77 24       	eor	r7, r7
    16c0:	73 94       	inc	r7
    16c2:	b0 ec       	ldi	r27, 0xC0	; 192
    16c4:	ab 2e       	mov	r10, r27
    16c6:	bd e5       	ldi	r27, 0x5D	; 93
    16c8:	bb 2e       	mov	r11, r27
    16ca:	1a e0       	ldi	r17, 0x0A	; 10
    16cc:	61 2e       	mov	r6, r17
    16ce:	04 e0       	ldi	r16, 0x04	; 4
    16d0:	80 2e       	mov	r8, r16
    16d2:	80 ed       	ldi	r24, 0xD0	; 208
    16d4:	c8 2e       	mov	r12, r24
    16d6:	87 e0       	ldi	r24, 0x07	; 7
    16d8:	d8 2e       	mov	r13, r24
    16da:	94 e0       	ldi	r25, 0x04	; 4
    16dc:	e9 2e       	mov	r14, r25
    16de:	f1 2c       	mov	r15, r1
    16e0:	04 ef       	ldi	r16, 0xF4	; 244
    16e2:	11 e0       	ldi	r17, 0x01	; 1
    16e4:	2f e0       	ldi	r18, 0x0F	; 15
    16e6:	42 2e       	mov	r4, r18
    16e8:	51 2c       	mov	r5, r1
    16ea:	15 c0       	rjmp	.+42     	; 0x1716 <_ZL8nextNotev+0x78>
    16ec:	70 e0       	ldi	r23, 0x00	; 0
    16ee:	40 e0       	ldi	r20, 0x00	; 0
    16f0:	88 ee       	ldi	r24, 0xE8	; 232
    16f2:	93 e0       	ldi	r25, 0x03	; 3
    16f4:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    16f8:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <_ZL22staccato_rest_duration>
    16fc:	17 c1       	rjmp	.+558    	; 0x192c <_ZL8nextNotev+0x28e>
    16fe:	86 36       	cpi	r24, 0x66	; 102
    1700:	d4 f5       	brge	.+116    	; 0x1776 <_ZL8nextNotev+0xd8>
    1702:	81 36       	cpi	r24, 0x61	; 97
    1704:	09 f4       	brne	.+2      	; 0x1708 <_ZL8nextNotev+0x6a>
    1706:	a9 c0       	rjmp	.+338    	; 0x185a <_ZL8nextNotev+0x1bc>
    1708:	7c f5       	brge	.+94     	; 0x1768 <_ZL8nextNotev+0xca>
    170a:	8c 33       	cpi	r24, 0x3C	; 60
    170c:	09 f4       	brne	.+2      	; 0x1710 <_ZL8nextNotev+0x72>
    170e:	60 c0       	rjmp	.+192    	; 0x17d0 <_ZL8nextNotev+0x132>
    1710:	8e 33       	cpi	r24, 0x3E	; 62
    1712:	81 f4       	brne	.+32     	; 0x1734 <_ZL8nextNotev+0x96>
    1714:	93 94       	inc	r9
    1716:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <_ZL16currentCharacterv>
    171a:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <__data_end>
    171e:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <__data_end+0x1>
    1722:	2f 5f       	subi	r18, 0xFF	; 255
    1724:	3f 4f       	sbci	r19, 0xFF	; 255
    1726:	30 93 8b 01 	sts	0x018B, r19	; 0x80018b <__data_end+0x1>
    172a:	20 93 8a 01 	sts	0x018A, r18	; 0x80018a <__data_end>
    172e:	85 36       	cpi	r24, 0x65	; 101
    1730:	31 f7       	brne	.-52     	; 0x16fe <_ZL8nextNotev+0x60>
    1732:	52 c0       	rjmp	.+164    	; 0x17d8 <_ZL8nextNotev+0x13a>
    1734:	81 32       	cpi	r24, 0x21	; 33
    1736:	09 f0       	breq	.+2      	; 0x173a <_ZL8nextNotev+0x9c>
    1738:	8b c0       	rjmp	.+278    	; 0x1850 <_ZL8nextNotev+0x1b2>
    173a:	80 92 0a 01 	sts	0x010A, r8	; 0x80010a <_ZL6octave>
    173e:	d0 92 09 01 	sts	0x0109, r13	; 0x800109 <_ZL19whole_note_duration+0x1>
    1742:	c0 92 08 01 	sts	0x0108, r12	; 0x800108 <_ZL19whole_note_duration>
    1746:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <_ZL9note_type+0x1>
    174a:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <_ZL9note_type>
    174e:	10 93 05 01 	sts	0x0105, r17	; 0x800105 <_ZL8duration+0x1>
    1752:	00 93 04 01 	sts	0x0104, r16	; 0x800104 <_ZL8duration>
    1756:	50 92 03 01 	sts	0x0103, r5	; 0x800103 <_ZL6volume+0x1>
    175a:	40 92 02 01 	sts	0x0102, r4	; 0x800102 <_ZL6volume>
    175e:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <_ZL8staccato>
    1762:	a4 e0       	ldi	r26, 0x04	; 4
    1764:	9a 2e       	mov	r9, r26
    1766:	d7 cf       	rjmp	.-82     	; 0x1716 <_ZL8nextNotev+0x78>
    1768:	83 36       	cpi	r24, 0x63	; 99
    176a:	a1 f1       	breq	.+104    	; 0x17d4 <_ZL8nextNotev+0x136>
    176c:	0c f4       	brge	.+2      	; 0x1770 <_ZL8nextNotev+0xd2>
    176e:	78 c0       	rjmp	.+240    	; 0x1860 <_ZL8nextNotev+0x1c2>
    1770:	10 e0       	ldi	r17, 0x00	; 0
    1772:	82 e0       	ldi	r24, 0x02	; 2
    1774:	77 c0       	rjmp	.+238    	; 0x1864 <_ZL8nextNotev+0x1c6>
    1776:	8d 36       	cpi	r24, 0x6D	; 109
    1778:	c1 f1       	breq	.+112    	; 0x17ea <_ZL8nextNotev+0x14c>
    177a:	94 f4       	brge	.+36     	; 0x17a0 <_ZL8nextNotev+0x102>
    177c:	87 36       	cpi	r24, 0x67	; 103
    177e:	91 f1       	breq	.+100    	; 0x17e4 <_ZL8nextNotev+0x146>
    1780:	74 f1       	brlt	.+92     	; 0x17de <_ZL8nextNotev+0x140>
    1782:	8c 36       	cpi	r24, 0x6C	; 108
    1784:	09 f0       	breq	.+2      	; 0x1788 <_ZL8nextNotev+0xea>
    1786:	64 c0       	rjmp	.+200    	; 0x1850 <_ZL8nextNotev+0x1b2>
    1788:	0e 94 fd 09 	call	0x13fa	; 0x13fa <_ZL9getNumberv>
    178c:	bc 01       	movw	r22, r24
    178e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL9note_type+0x1>
    1792:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL9note_type>
    1796:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    179a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    179e:	51 c0       	rjmp	.+162    	; 0x1842 <_ZL8nextNotev+0x1a4>
    17a0:	82 37       	cpi	r24, 0x72	; 114
    17a2:	c9 f1       	breq	.+114    	; 0x1816 <_ZL8nextNotev+0x178>
    17a4:	4c f4       	brge	.+18     	; 0x17b8 <_ZL8nextNotev+0x11a>
    17a6:	8f 36       	cpi	r24, 0x6F	; 111
    17a8:	09 f0       	breq	.+2      	; 0x17ac <_ZL8nextNotev+0x10e>
    17aa:	52 c0       	rjmp	.+164    	; 0x1850 <_ZL8nextNotev+0x1b2>
    17ac:	0e 94 fd 09 	call	0x13fa	; 0x13fa <_ZL9getNumberv>
    17b0:	98 2e       	mov	r9, r24
    17b2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZL6octave>
    17b6:	af cf       	rjmp	.-162    	; 0x1716 <_ZL8nextNotev+0x78>
    17b8:	84 37       	cpi	r24, 0x74	; 116
    17ba:	81 f1       	breq	.+96     	; 0x181c <_ZL8nextNotev+0x17e>
    17bc:	86 37       	cpi	r24, 0x76	; 118
    17be:	09 f0       	breq	.+2      	; 0x17c2 <_ZL8nextNotev+0x124>
    17c0:	47 c0       	rjmp	.+142    	; 0x1850 <_ZL8nextNotev+0x1b2>
    17c2:	0e 94 fd 09 	call	0x13fa	; 0x13fa <_ZL9getNumberv>
    17c6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_ZL6volume+0x1>
    17ca:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_ZL6volume>
    17ce:	a3 cf       	rjmp	.-186    	; 0x1716 <_ZL8nextNotev+0x78>
    17d0:	9a 94       	dec	r9
    17d2:	a1 cf       	rjmp	.-190    	; 0x1716 <_ZL8nextNotev+0x78>
    17d4:	10 e0       	ldi	r17, 0x00	; 0
    17d6:	20 c0       	rjmp	.+64     	; 0x1818 <_ZL8nextNotev+0x17a>
    17d8:	10 e0       	ldi	r17, 0x00	; 0
    17da:	84 e0       	ldi	r24, 0x04	; 4
    17dc:	43 c0       	rjmp	.+134    	; 0x1864 <_ZL8nextNotev+0x1c6>
    17de:	10 e0       	ldi	r17, 0x00	; 0
    17e0:	85 e0       	ldi	r24, 0x05	; 5
    17e2:	40 c0       	rjmp	.+128    	; 0x1864 <_ZL8nextNotev+0x1c6>
    17e4:	10 e0       	ldi	r17, 0x00	; 0
    17e6:	87 e0       	ldi	r24, 0x07	; 7
    17e8:	3d c0       	rjmp	.+122    	; 0x1864 <_ZL8nextNotev+0x1c6>
    17ea:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <_ZL16currentCharacterv>
    17ee:	8c 36       	cpi	r24, 0x6C	; 108
    17f0:	19 f4       	brne	.+6      	; 0x17f8 <_ZL8nextNotev+0x15a>
    17f2:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <_ZL8staccato>
    17f6:	04 c0       	rjmp	.+8      	; 0x1800 <_ZL8nextNotev+0x162>
    17f8:	70 92 8e 01 	sts	0x018E, r7	; 0x80018e <_ZL8staccato>
    17fc:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <_ZL22staccato_rest_duration>
    1800:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <__data_end>
    1804:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <__data_end+0x1>
    1808:	2f 5f       	subi	r18, 0xFF	; 255
    180a:	3f 4f       	sbci	r19, 0xFF	; 255
    180c:	30 93 8b 01 	sts	0x018B, r19	; 0x80018b <__data_end+0x1>
    1810:	20 93 8a 01 	sts	0x018A, r18	; 0x80018a <__data_end>
    1814:	80 cf       	rjmp	.-256    	; 0x1716 <_ZL8nextNotev+0x78>
    1816:	11 e0       	ldi	r17, 0x01	; 1
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	24 c0       	rjmp	.+72     	; 0x1864 <_ZL8nextNotev+0x1c6>
    181c:	0e 94 fd 09 	call	0x13fa	; 0x13fa <_ZL9getNumberv>
    1820:	bc 01       	movw	r22, r24
    1822:	c5 01       	movw	r24, r10
    1824:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__udivmodhi4>
    1828:	66 9e       	mul	r6, r22
    182a:	c0 01       	movw	r24, r0
    182c:	67 9e       	mul	r6, r23
    182e:	90 0d       	add	r25, r0
    1830:	11 24       	eor	r1, r1
    1832:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZL19whole_note_duration+0x1>
    1836:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL19whole_note_duration>
    183a:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <_ZL9note_type>
    183e:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <_ZL9note_type+0x1>
    1842:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__udivmodhi4>
    1846:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_ZL8duration+0x1>
    184a:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_ZL8duration>
    184e:	63 cf       	rjmp	.-314    	; 0x1716 <_ZL8nextNotev+0x78>
    1850:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <__data_end+0x1>
    1854:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <__data_end>
    1858:	69 c0       	rjmp	.+210    	; 0x192c <_ZL8nextNotev+0x28e>
    185a:	10 e0       	ldi	r17, 0x00	; 0
    185c:	89 e0       	ldi	r24, 0x09	; 9
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <_ZL8nextNotev+0x1c6>
    1860:	10 e0       	ldi	r17, 0x00	; 0
    1862:	8b e0       	ldi	r24, 0x0B	; 11
    1864:	08 2f       	mov	r16, r24
    1866:	9c e0       	ldi	r25, 0x0C	; 12
    1868:	99 9e       	mul	r9, r25
    186a:	00 0d       	add	r16, r0
    186c:	11 24       	eor	r1, r1
    186e:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <_ZL16currentCharacterv>
    1872:	98 2f       	mov	r25, r24
    1874:	97 7f       	andi	r25, 0xF7	; 247
    1876:	93 32       	cpi	r25, 0x23	; 35
    1878:	61 f4       	brne	.+24     	; 0x1892 <_ZL8nextNotev+0x1f4>
    187a:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <__data_end>
    187e:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <__data_end+0x1>
    1882:	2f 5f       	subi	r18, 0xFF	; 255
    1884:	3f 4f       	sbci	r19, 0xFF	; 255
    1886:	30 93 8b 01 	sts	0x018B, r19	; 0x80018b <__data_end+0x1>
    188a:	20 93 8a 01 	sts	0x018A, r18	; 0x80018a <__data_end>
    188e:	0f 5f       	subi	r16, 0xFF	; 255
    1890:	ee cf       	rjmp	.-36     	; 0x186e <_ZL8nextNotev+0x1d0>
    1892:	8d 32       	cpi	r24, 0x2D	; 45
    1894:	71 f4       	brne	.+28     	; 0x18b2 <_ZL8nextNotev+0x214>
    1896:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <__data_end>
    189a:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <__data_end+0x1>
    189e:	2f 5f       	subi	r18, 0xFF	; 255
    18a0:	3f 4f       	sbci	r19, 0xFF	; 255
    18a2:	30 93 8b 01 	sts	0x018B, r19	; 0x80018b <__data_end+0x1>
    18a6:	20 93 8a 01 	sts	0x018A, r18	; 0x80018a <__data_end>
    18aa:	01 50       	subi	r16, 0x01	; 1
    18ac:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <_ZL16currentCharacterv>
    18b0:	f0 cf       	rjmp	.-32     	; 0x1892 <_ZL8nextNotev+0x1f4>
    18b2:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_ZL8duration>
    18b6:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_ZL8duration+0x1>
    18ba:	81 53       	subi	r24, 0x31	; 49
    18bc:	88 30       	cpi	r24, 0x08	; 8
    18be:	50 f4       	brcc	.+20     	; 0x18d4 <_ZL8nextNotev+0x236>
    18c0:	e0 90 08 01 	lds	r14, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    18c4:	f0 90 09 01 	lds	r15, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    18c8:	0e 94 fd 09 	call	0x13fa	; 0x13fa <_ZL9getNumberv>
    18cc:	bc 01       	movw	r22, r24
    18ce:	c7 01       	movw	r24, r14
    18d0:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__udivmodhi4>
    18d4:	7b 01       	movw	r14, r22
    18d6:	f6 94       	lsr	r15
    18d8:	e7 94       	ror	r14
    18da:	69 83       	std	Y+1, r22	; 0x01
    18dc:	7a 83       	std	Y+2, r23	; 0x02
    18de:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <_ZL16currentCharacterv>
    18e2:	69 81       	ldd	r22, Y+1	; 0x01
    18e4:	7a 81       	ldd	r23, Y+2	; 0x02
    18e6:	8e 32       	cpi	r24, 0x2E	; 46
    18e8:	69 f4       	brne	.+26     	; 0x1904 <_ZL8nextNotev+0x266>
    18ea:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <__data_end>
    18ee:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <__data_end+0x1>
    18f2:	2f 5f       	subi	r18, 0xFF	; 255
    18f4:	3f 4f       	sbci	r19, 0xFF	; 255
    18f6:	30 93 8b 01 	sts	0x018B, r19	; 0x80018b <__data_end+0x1>
    18fa:	20 93 8a 01 	sts	0x018A, r18	; 0x80018a <__data_end>
    18fe:	6e 0d       	add	r22, r14
    1900:	7f 1d       	adc	r23, r15
    1902:	e9 cf       	rjmp	.-46     	; 0x18d6 <_ZL8nextNotev+0x238>
    1904:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <_ZL8staccato>
    1908:	88 23       	and	r24, r24
    190a:	39 f0       	breq	.+14     	; 0x191a <_ZL8nextNotev+0x27c>
    190c:	9b 01       	movw	r18, r22
    190e:	36 95       	lsr	r19
    1910:	27 95       	ror	r18
    1912:	20 93 8d 01 	sts	0x018D, r18	; 0x80018d <_ZL22staccato_rest_duration>
    1916:	62 1b       	sub	r22, r18
    1918:	71 09       	sbc	r23, r1
    191a:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <_ZL6volume>
    191e:	11 23       	and	r17, r17
    1920:	11 f0       	breq	.+4      	; 0x1926 <_ZL8nextNotev+0x288>
    1922:	8f ef       	ldi	r24, 0xFF	; 255
    1924:	01 c0       	rjmp	.+2      	; 0x1928 <_ZL8nextNotev+0x28a>
    1926:	80 2f       	mov	r24, r16
    1928:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <_ZN15OrangutanBuzzer8playNoteEhjh>
    192c:	22 96       	adiw	r28, 0x02	; 2
    192e:	e0 e1       	ldi	r30, 0x10	; 16
    1930:	0c 94 31 17 	jmp	0x2e62	; 0x2e62 <__epilogue_restores__+0x4>

00001934 <__vector_13>:
    1934:	1f 92       	push	r1
    1936:	0f 92       	push	r0
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	0f 92       	push	r0
    193c:	11 24       	eor	r1, r1
    193e:	2f 93       	push	r18
    1940:	3f 93       	push	r19
    1942:	4f 93       	push	r20
    1944:	5f 93       	push	r21
    1946:	6f 93       	push	r22
    1948:	7f 93       	push	r23
    194a:	8f 93       	push	r24
    194c:	9f 93       	push	r25
    194e:	af 93       	push	r26
    1950:	bf 93       	push	r27
    1952:	ef 93       	push	r30
    1954:	ff 93       	push	r31
    1956:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <_ZL13buzzerTimeout>
    195a:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <_ZL13buzzerTimeout+0x1>
    195e:	9c 01       	movw	r18, r24
    1960:	21 50       	subi	r18, 0x01	; 1
    1962:	31 09       	sbc	r19, r1
    1964:	30 93 92 01 	sts	0x0192, r19	; 0x800192 <_ZL13buzzerTimeout+0x1>
    1968:	20 93 91 01 	sts	0x0191, r18	; 0x800191 <_ZL13buzzerTimeout>
    196c:	89 2b       	or	r24, r25
    196e:	11 f5       	brne	.+68     	; 0x19b4 <__vector_13+0x80>
    1970:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1974:	78 94       	sei
    1976:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    197a:	88 7f       	andi	r24, 0xF8	; 248
    197c:	81 60       	ori	r24, 0x01	; 1
    197e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1982:	80 e1       	ldi	r24, 0x10	; 16
    1984:	97 e2       	ldi	r25, 0x27	; 39
    1986:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    198a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    198e:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1992:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <buzzerFinished>
    199c:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <__data_end>
    19a0:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <__data_end+0x1>
    19a4:	89 2b       	or	r24, r25
    19a6:	31 f0       	breq	.+12     	; 0x19b4 <__vector_13+0x80>
    19a8:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <_ZL17play_mode_setting>
    19ac:	81 11       	cpse	r24, r1
    19ae:	02 c0       	rjmp	.+4      	; 0x19b4 <__vector_13+0x80>
    19b0:	0e 94 4f 0b 	call	0x169e	; 0x169e <_ZL8nextNotev>
    19b4:	ff 91       	pop	r31
    19b6:	ef 91       	pop	r30
    19b8:	bf 91       	pop	r27
    19ba:	af 91       	pop	r26
    19bc:	9f 91       	pop	r25
    19be:	8f 91       	pop	r24
    19c0:	7f 91       	pop	r23
    19c2:	6f 91       	pop	r22
    19c4:	5f 91       	pop	r21
    19c6:	4f 91       	pop	r20
    19c8:	3f 91       	pop	r19
    19ca:	2f 91       	pop	r18
    19cc:	0f 90       	pop	r0
    19ce:	0f be       	out	0x3f, r0	; 63
    19d0:	0f 90       	pop	r0
    19d2:	1f 90       	pop	r1
    19d4:	18 95       	reti

000019d6 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    19d6:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    19da:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <__data_end+0x1>
    19de:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <__data_end>
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <_ZL17use_program_space>
    19e8:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <_ZL22staccato_rest_duration>
    19ec:	0e 94 4f 0b 	call	0x169e	; 0x169e <_ZL8nextNotev>
    19f0:	08 95       	ret

000019f2 <play_from_program_space>:
    19f2:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    19f6:	08 95       	ret

000019f8 <delay_us.constprop.0>:
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	6f 93       	push	r22
    19fe:	64 e0       	ldi	r22, 0x04	; 4
    1a00:	6a 95       	dec	r22
    1a02:	f1 f7       	brne	.-4      	; 0x1a00 <delay_us.constprop.0+0x8>
    1a04:	6f 91       	pop	r22
    1a06:	01 97       	sbiw	r24, 0x01	; 1
    1a08:	c9 f7       	brne	.-14     	; 0x19fc <delay_us.constprop.0+0x4>
    1a0a:	08 95       	ret

00001a0c <_ZN12OrangutanLCD8busyWaitEv>:
    1a0c:	0f 93       	push	r16
    1a0e:	1f 93       	push	r17
    1a10:	cf 93       	push	r28
    1a12:	df 93       	push	r29
    1a14:	1a b1       	in	r17, 0x0a	; 10
    1a16:	57 98       	cbi	0x0a, 7	; 10
    1a18:	5a 98       	cbi	0x0b, 2	; 11
    1a1a:	28 9a       	sbi	0x05, 0	; 5
    1a1c:	c0 e0       	ldi	r28, 0x00	; 0
    1a1e:	d0 e0       	ldi	r29, 0x00	; 0
    1a20:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <delay_us.constprop.0>
    1a24:	5c 9a       	sbi	0x0b, 4	; 11
    1a26:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <delay_us.constprop.0>
    1a2a:	09 b1       	in	r16, 0x09	; 9
    1a2c:	5c 98       	cbi	0x0b, 4	; 11
    1a2e:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <delay_us.constprop.0>
    1a32:	5c 9a       	sbi	0x0b, 4	; 11
    1a34:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <delay_us.constprop.0>
    1a38:	5c 98       	cbi	0x0b, 4	; 11
    1a3a:	24 96       	adiw	r28, 0x04	; 4
    1a3c:	07 ff       	sbrs	r16, 7
    1a3e:	10 c0       	rjmp	.+32     	; 0x1a60 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    1a40:	ae 01       	movw	r20, r28
    1a42:	60 e0       	ldi	r22, 0x00	; 0
    1a44:	70 e0       	ldi	r23, 0x00	; 0
    1a46:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <lcdTimeout>
    1a4a:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <lcdTimeout+0x1>
    1a4e:	a0 91 95 01 	lds	r26, 0x0195	; 0x800195 <lcdTimeout+0x2>
    1a52:	b0 91 96 01 	lds	r27, 0x0196	; 0x800196 <lcdTimeout+0x3>
    1a56:	48 17       	cp	r20, r24
    1a58:	59 07       	cpc	r21, r25
    1a5a:	6a 07       	cpc	r22, r26
    1a5c:	7b 07       	cpc	r23, r27
    1a5e:	00 f3       	brcs	.-64     	; 0x1a20 <_ZN12OrangutanLCD8busyWaitEv+0x14>
    1a60:	1a b9       	out	0x0a, r17	; 10
    1a62:	df 91       	pop	r29
    1a64:	cf 91       	pop	r28
    1a66:	1f 91       	pop	r17
    1a68:	0f 91       	pop	r16
    1a6a:	08 95       	ret

00001a6c <_ZN12OrangutanLCD8sendDataEh>:
    1a6c:	95 b1       	in	r25, 0x05	; 5
    1a6e:	28 2f       	mov	r18, r24
    1a70:	21 70       	andi	r18, 0x01	; 1
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	22 0f       	add	r18, r18
    1a76:	33 1f       	adc	r19, r19
    1a78:	48 2f       	mov	r20, r24
    1a7a:	46 70       	andi	r20, 0x06	; 6
    1a7c:	68 e0       	ldi	r22, 0x08	; 8
    1a7e:	46 9f       	mul	r20, r22
    1a80:	a0 01       	movw	r20, r0
    1a82:	11 24       	eor	r1, r1
    1a84:	24 2b       	or	r18, r20
    1a86:	9d 7c       	andi	r25, 0xCD	; 205
    1a88:	29 2b       	or	r18, r25
    1a8a:	25 b9       	out	0x05, r18	; 5
    1a8c:	9b b1       	in	r25, 0x0b	; 11
    1a8e:	88 70       	andi	r24, 0x08	; 8
    1a90:	82 95       	swap	r24
    1a92:	80 7f       	andi	r24, 0xF0	; 240
    1a94:	9f 77       	andi	r25, 0x7F	; 127
    1a96:	89 2b       	or	r24, r25
    1a98:	8b b9       	out	0x0b, r24	; 11
    1a9a:	5c 9a       	sbi	0x0b, 4	; 11
    1a9c:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <delay_us.constprop.0>
    1aa0:	5c 98       	cbi	0x0b, 4	; 11
    1aa2:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <delay_us.constprop.0>
    1aa6:	08 95       	ret

00001aa8 <_ZN12OrangutanLCD4sendEhhh>:
    1aa8:	a0 e0       	ldi	r26, 0x00	; 0
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	ea e5       	ldi	r30, 0x5A	; 90
    1aae:	fd e0       	ldi	r31, 0x0D	; 13
    1ab0:	0c 94 1e 17 	jmp	0x2e3c	; 0x2e3c <__prologue_saves__+0x16>
    1ab4:	c8 2f       	mov	r28, r24
    1ab6:	d6 2e       	mov	r13, r22
    1ab8:	e4 2e       	mov	r14, r20
    1aba:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <_ZZN12OrangutanLCD4initEvE11initialized>
    1abe:	81 11       	cpse	r24, r1
    1ac0:	05 c0       	rjmp	.+10     	; 0x1acc <_ZN12OrangutanLCD4sendEhhh+0x24>
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <_ZZN12OrangutanLCD4initEvE11initialized>
    1ac8:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <_ZN12OrangutanLCD5init2Ev>
    1acc:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <_ZN12OrangutanLCD8busyWaitEv>
    1ad0:	14 b1       	in	r17, 0x04	; 4
    1ad2:	d5 b1       	in	r29, 0x05	; 5
    1ad4:	fa b0       	in	r15, 0x0a	; 10
    1ad6:	0b b1       	in	r16, 0x0b	; 11
    1ad8:	28 98       	cbi	0x05, 0	; 5
    1ada:	dd 20       	and	r13, r13
    1adc:	11 f0       	breq	.+4      	; 0x1ae2 <_ZN12OrangutanLCD4sendEhhh+0x3a>
    1ade:	5a 9a       	sbi	0x0b, 2	; 11
    1ae0:	01 c0       	rjmp	.+2      	; 0x1ae4 <_ZN12OrangutanLCD4sendEhhh+0x3c>
    1ae2:	5a 98       	cbi	0x0b, 2	; 11
    1ae4:	94 b1       	in	r25, 0x04	; 4
    1ae6:	92 63       	ori	r25, 0x32	; 50
    1ae8:	94 b9       	out	0x04, r25	; 4
    1aea:	57 9a       	sbi	0x0a, 7	; 10
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	e8 16       	cp	r14, r24
    1af0:	29 f0       	breq	.+10     	; 0x1afc <_ZN12OrangutanLCD4sendEhhh+0x54>
    1af2:	8c 2f       	mov	r24, r28
    1af4:	82 95       	swap	r24
    1af6:	8f 70       	andi	r24, 0x0F	; 15
    1af8:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <_ZN12OrangutanLCD8sendDataEh>
    1afc:	8c 2f       	mov	r24, r28
    1afe:	8f 70       	andi	r24, 0x0F	; 15
    1b00:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <_ZN12OrangutanLCD8sendDataEh>
    1b04:	fa b8       	out	0x0a, r15	; 10
    1b06:	0b b9       	out	0x0b, r16	; 11
    1b08:	14 b9       	out	0x04, r17	; 4
    1b0a:	d5 b9       	out	0x05, r29	; 5
    1b0c:	cd b7       	in	r28, 0x3d	; 61
    1b0e:	de b7       	in	r29, 0x3e	; 62
    1b10:	e7 e0       	ldi	r30, 0x07	; 7
    1b12:	0c 94 3a 17 	jmp	0x2e74	; 0x2e74 <__epilogue_restores__+0x16>

00001b16 <_ZN12OrangutanLCD8send_cmdEh>:
    1b16:	42 e0       	ldi	r20, 0x02	; 2
    1b18:	60 e0       	ldi	r22, 0x00	; 0
    1b1a:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <_ZN12OrangutanLCD4sendEhhh>
    1b1e:	08 95       	ret

00001b20 <_ZN12OrangutanLCD9send_dataEh>:
    1b20:	42 e0       	ldi	r20, 0x02	; 2
    1b22:	61 e0       	ldi	r22, 0x01	; 1
    1b24:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <_ZN12OrangutanLCD4sendEhhh>
    1b28:	08 95       	ret

00001b2a <print_character>:
    1b2a:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <_ZN12OrangutanLCD9send_dataEh>
    1b2e:	08 95       	ret

00001b30 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    1b30:	41 e0       	ldi	r20, 0x01	; 1
    1b32:	60 e0       	ldi	r22, 0x00	; 0
    1b34:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <_ZN12OrangutanLCD4sendEhhh>
    1b38:	08 95       	ret

00001b3a <_ZN12OrangutanLCD5init2Ev>:
    1b3a:	80 e1       	ldi	r24, 0x10	; 16
    1b3c:	97 e2       	ldi	r25, 0x27	; 39
    1b3e:	a0 e0       	ldi	r26, 0x00	; 0
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <lcdTimeout>
    1b46:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <lcdTimeout+0x1>
    1b4a:	a0 93 95 01 	sts	0x0195, r26	; 0x800195 <lcdTimeout+0x2>
    1b4e:	b0 93 96 01 	sts	0x0196, r27	; 0x800196 <lcdTimeout+0x3>
    1b52:	52 9a       	sbi	0x0a, 2	; 10
    1b54:	20 9a       	sbi	0x04, 0	; 4
    1b56:	54 9a       	sbi	0x0a, 4	; 10
    1b58:	8e e1       	ldi	r24, 0x1E	; 30
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay_ms>
    1b60:	83 e0       	ldi	r24, 0x03	; 3
    1b62:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1b66:	86 e0       	ldi	r24, 0x06	; 6
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay_ms>
    1b6e:	83 e0       	ldi	r24, 0x03	; 3
    1b70:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1b74:	82 e0       	ldi	r24, 0x02	; 2
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay_ms>
    1b7c:	83 e0       	ldi	r24, 0x03	; 3
    1b7e:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1b82:	82 e0       	ldi	r24, 0x02	; 2
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay_ms>
    1b8a:	82 e0       	ldi	r24, 0x02	; 2
    1b8c:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1b90:	82 e0       	ldi	r24, 0x02	; 2
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay_ms>
    1b98:	88 e2       	ldi	r24, 0x28	; 40
    1b9a:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <_ZN12OrangutanLCD8send_cmdEh>
    1b9e:	88 e0       	ldi	r24, 0x08	; 8
    1ba0:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <_ZN12OrangutanLCD8send_cmdEh>
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <_ZN12OrangutanLCD8send_cmdEh>
    1baa:	86 e0       	ldi	r24, 0x06	; 6
    1bac:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <_ZN12OrangutanLCD8send_cmdEh>
    1bb0:	8c e0       	ldi	r24, 0x0C	; 12
    1bb2:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <_ZN12OrangutanLCD8send_cmdEh>
    1bb6:	08 95       	ret

00001bb8 <_ZN12OrangutanLCD5clearEv>:
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <_ZN12OrangutanLCD8send_cmdEh>
    1bbe:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <printf_chars>
    1bc2:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <printf_chars+0x1>
    1bc6:	89 2b       	or	r24, r25
    1bc8:	f9 f0       	breq	.+62     	; 0x1c08 <_ZN12OrangutanLCD5clearEv+0x50>
    1bca:	60 e0       	ldi	r22, 0x00	; 0
    1bcc:	a0 e2       	ldi	r26, 0x20	; 32
    1bce:	26 2f       	mov	r18, r22
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <numLCDCols>
    1bd6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <numLCDRows>
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	78 9f       	mul	r23, r24
    1be0:	a0 01       	movw	r20, r0
    1be2:	79 9f       	mul	r23, r25
    1be4:	50 0d       	add	r21, r0
    1be6:	11 24       	eor	r1, r1
    1be8:	24 17       	cp	r18, r20
    1bea:	35 07       	cpc	r19, r21
    1bec:	4c f4       	brge	.+18     	; 0x1c00 <_ZN12OrangutanLCD5clearEv+0x48>
    1bee:	e0 91 99 01 	lds	r30, 0x0199	; 0x800199 <printf_chars>
    1bf2:	f0 91 9a 01 	lds	r31, 0x019A	; 0x80019a <printf_chars+0x1>
    1bf6:	e2 0f       	add	r30, r18
    1bf8:	f3 1f       	adc	r31, r19
    1bfa:	a0 83       	st	Z, r26
    1bfc:	6f 5f       	subi	r22, 0xFF	; 255
    1bfe:	e7 cf       	rjmp	.-50     	; 0x1bce <_ZN12OrangutanLCD5clearEv+0x16>
    1c00:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <col>
    1c04:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <row>
    1c08:	08 95       	ret

00001c0a <clear>:
    1c0a:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <_ZN12OrangutanLCD5clearEv>
    1c0e:	08 95       	ret

00001c10 <_ZN12OrangutanLCD5printEPKc>:
    1c10:	cf 93       	push	r28
    1c12:	df 93       	push	r29
    1c14:	ec 01       	movw	r28, r24
    1c16:	89 91       	ld	r24, Y+
    1c18:	88 23       	and	r24, r24
    1c1a:	19 f0       	breq	.+6      	; 0x1c22 <_ZN12OrangutanLCD5printEPKc+0x12>
    1c1c:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <_ZN12OrangutanLCD9send_dataEh>
    1c20:	fa cf       	rjmp	.-12     	; 0x1c16 <_ZN12OrangutanLCD5printEPKc+0x6>
    1c22:	df 91       	pop	r29
    1c24:	cf 91       	pop	r28
    1c26:	08 95       	ret

00001c28 <print>:
    1c28:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <_ZN12OrangutanLCD5printEPKc>
    1c2c:	08 95       	ret

00001c2e <_ZN12OrangutanLCD5printEm>:
    1c2e:	aa e0       	ldi	r26, 0x0A	; 10
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	ed e1       	ldi	r30, 0x1D	; 29
    1c34:	fe e0       	ldi	r31, 0x0E	; 14
    1c36:	0c 94 1d 17 	jmp	0x2e3a	; 0x2e3a <__prologue_saves__+0x14>
    1c3a:	1a e0       	ldi	r17, 0x0A	; 10
    1c3c:	5a e0       	ldi	r21, 0x0A	; 10
    1c3e:	c5 2e       	mov	r12, r21
    1c40:	d1 2c       	mov	r13, r1
    1c42:	e1 2c       	mov	r14, r1
    1c44:	f1 2c       	mov	r15, r1
    1c46:	06 2f       	mov	r16, r22
    1c48:	a7 01       	movw	r20, r14
    1c4a:	96 01       	movw	r18, r12
    1c4c:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <__udivmodsi4>
    1c50:	ca 01       	movw	r24, r20
    1c52:	b9 01       	movw	r22, r18
    1c54:	11 50       	subi	r17, 0x01	; 1
    1c56:	e1 e0       	ldi	r30, 0x01	; 1
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	ec 0f       	add	r30, r28
    1c5c:	fd 1f       	adc	r31, r29
    1c5e:	e1 0f       	add	r30, r17
    1c60:	f1 1d       	adc	r31, r1
    1c62:	00 5d       	subi	r16, 0xD0	; 208
    1c64:	2a e0       	ldi	r18, 0x0A	; 10
    1c66:	62 9f       	mul	r22, r18
    1c68:	00 19       	sub	r16, r0
    1c6a:	11 24       	eor	r1, r1
    1c6c:	00 83       	st	Z, r16
    1c6e:	61 15       	cp	r22, r1
    1c70:	71 05       	cpc	r23, r1
    1c72:	81 05       	cpc	r24, r1
    1c74:	91 05       	cpc	r25, r1
    1c76:	39 f7       	brne	.-50     	; 0x1c46 <_ZN12OrangutanLCD5printEm+0x18>
    1c78:	1a 30       	cpi	r17, 0x0A	; 10
    1c7a:	58 f4       	brcc	.+22     	; 0x1c92 <_ZN12OrangutanLCD5printEm+0x64>
    1c7c:	e1 e0       	ldi	r30, 0x01	; 1
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	ec 0f       	add	r30, r28
    1c82:	fd 1f       	adc	r31, r29
    1c84:	e1 0f       	add	r30, r17
    1c86:	f1 1d       	adc	r31, r1
    1c88:	80 81       	ld	r24, Z
    1c8a:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <_ZN12OrangutanLCD9send_dataEh>
    1c8e:	1f 5f       	subi	r17, 0xFF	; 255
    1c90:	f3 cf       	rjmp	.-26     	; 0x1c78 <_ZN12OrangutanLCD5printEm+0x4a>
    1c92:	2a 96       	adiw	r28, 0x0a	; 10
    1c94:	e8 e0       	ldi	r30, 0x08	; 8
    1c96:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <__epilogue_restores__+0x14>

00001c9a <_ZN12OrangutanLCD5printEl>:
    1c9a:	cf 92       	push	r12
    1c9c:	df 92       	push	r13
    1c9e:	ef 92       	push	r14
    1ca0:	ff 92       	push	r15
    1ca2:	6b 01       	movw	r12, r22
    1ca4:	7c 01       	movw	r14, r24
    1ca6:	97 ff       	sbrs	r25, 7
    1ca8:	0b c0       	rjmp	.+22     	; 0x1cc0 <_ZN12OrangutanLCD5printEl+0x26>
    1caa:	f0 94       	com	r15
    1cac:	e0 94       	com	r14
    1cae:	d0 94       	com	r13
    1cb0:	c0 94       	com	r12
    1cb2:	c1 1c       	adc	r12, r1
    1cb4:	d1 1c       	adc	r13, r1
    1cb6:	e1 1c       	adc	r14, r1
    1cb8:	f1 1c       	adc	r15, r1
    1cba:	8d e2       	ldi	r24, 0x2D	; 45
    1cbc:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <_ZN12OrangutanLCD9send_dataEh>
    1cc0:	c7 01       	movw	r24, r14
    1cc2:	b6 01       	movw	r22, r12
    1cc4:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <_ZN12OrangutanLCD5printEm>
    1cc8:	ff 90       	pop	r15
    1cca:	ef 90       	pop	r14
    1ccc:	df 90       	pop	r13
    1cce:	cf 90       	pop	r12
    1cd0:	08 95       	ret

00001cd2 <print_long>:
    1cd2:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <_ZN12OrangutanLCD5printEl>
    1cd6:	08 95       	ret

00001cd8 <_ZN12OrangutanLCD6gotoXYEhh>:
    1cd8:	a5 e0       	ldi	r26, 0x05	; 5
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	e2 e7       	ldi	r30, 0x72	; 114
    1cde:	fe e0       	ldi	r31, 0x0E	; 14
    1ce0:	0c 94 22 17 	jmp	0x2e44	; 0x2e44 <__prologue_saves__+0x1e>
    1ce4:	18 2f       	mov	r17, r24
    1ce6:	80 e8       	ldi	r24, 0x80	; 128
    1ce8:	89 83       	std	Y+1, r24	; 0x01
    1cea:	80 ec       	ldi	r24, 0xC0	; 192
    1cec:	8a 83       	std	Y+2, r24	; 0x02
    1cee:	84 e9       	ldi	r24, 0x94	; 148
    1cf0:	8b 83       	std	Y+3, r24	; 0x03
    1cf2:	84 ed       	ldi	r24, 0xD4	; 212
    1cf4:	8c 83       	std	Y+4, r24	; 0x04
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	e6 0f       	add	r30, r22
    1cfa:	f1 1d       	adc	r31, r1
    1cfc:	81 81       	ldd	r24, Z+1	; 0x01
    1cfe:	81 0f       	add	r24, r17
    1d00:	6d 83       	std	Y+5, r22	; 0x05
    1d02:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <_ZN12OrangutanLCD8send_cmdEh>
    1d06:	10 93 97 01 	sts	0x0197, r17	; 0x800197 <col>
    1d0a:	6d 81       	ldd	r22, Y+5	; 0x05
    1d0c:	60 93 98 01 	sts	0x0198, r22	; 0x800198 <row>
    1d10:	25 96       	adiw	r28, 0x05	; 5
    1d12:	e3 e0       	ldi	r30, 0x03	; 3
    1d14:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <__epilogue_restores__+0x1e>

00001d18 <lcd_goto_xy>:
    1d18:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <_ZN12OrangutanLCD6gotoXYEhh>
    1d1c:	08 95       	ret

00001d1e <_ZN16OrangutanDigital9setOutputEhh>:
    1d1e:	88 30       	cpi	r24, 0x08	; 8
    1d20:	58 f4       	brcc	.+22     	; 0x1d38 <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    1d22:	91 e0       	ldi	r25, 0x01	; 1
    1d24:	01 c0       	rjmp	.+2      	; 0x1d28 <_ZN16OrangutanDigital9setOutputEhh+0xa>
    1d26:	99 0f       	add	r25, r25
    1d28:	8a 95       	dec	r24
    1d2a:	ea f7       	brpl	.-6      	; 0x1d26 <_ZN16OrangutanDigital9setOutputEhh+0x8>
    1d2c:	89 2f       	mov	r24, r25
    1d2e:	aa e2       	ldi	r26, 0x2A	; 42
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	eb e2       	ldi	r30, 0x2B	; 43
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	21 c0       	rjmp	.+66     	; 0x1d7a <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    1d38:	8e 30       	cpi	r24, 0x0E	; 14
    1d3a:	60 f4       	brcc	.+24     	; 0x1d54 <_ZN16OrangutanDigital9setOutputEhh+0x36>
    1d3c:	98 ef       	ldi	r25, 0xF8	; 248
    1d3e:	98 0f       	add	r25, r24
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	01 c0       	rjmp	.+2      	; 0x1d46 <_ZN16OrangutanDigital9setOutputEhh+0x28>
    1d44:	88 0f       	add	r24, r24
    1d46:	9a 95       	dec	r25
    1d48:	ea f7       	brpl	.-6      	; 0x1d44 <_ZN16OrangutanDigital9setOutputEhh+0x26>
    1d4a:	a4 e2       	ldi	r26, 0x24	; 36
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	e5 e2       	ldi	r30, 0x25	; 37
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	13 c0       	rjmp	.+38     	; 0x1d7a <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    1d54:	85 31       	cpi	r24, 0x15	; 21
    1d56:	60 f4       	brcc	.+24     	; 0x1d70 <_ZN16OrangutanDigital9setOutputEhh+0x52>
    1d58:	92 ef       	ldi	r25, 0xF2	; 242
    1d5a:	98 0f       	add	r25, r24
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	01 c0       	rjmp	.+2      	; 0x1d62 <_ZN16OrangutanDigital9setOutputEhh+0x44>
    1d60:	88 0f       	add	r24, r24
    1d62:	9a 95       	dec	r25
    1d64:	ea f7       	brpl	.-6      	; 0x1d60 <_ZN16OrangutanDigital9setOutputEhh+0x42>
    1d66:	a7 e2       	ldi	r26, 0x27	; 39
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	e8 e2       	ldi	r30, 0x28	; 40
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	05 c0       	rjmp	.+10     	; 0x1d7a <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	a0 e0       	ldi	r26, 0x00	; 0
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	e0 e0       	ldi	r30, 0x00	; 0
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	6f 3f       	cpi	r22, 0xFF	; 255
    1d7c:	19 f4       	brne	.+6      	; 0x1d84 <_ZN16OrangutanDigital9setOutputEhh+0x66>
    1d7e:	90 81       	ld	r25, Z
    1d80:	98 27       	eor	r25, r24
    1d82:	09 c0       	rjmp	.+18     	; 0x1d96 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    1d84:	66 23       	and	r22, r22
    1d86:	19 f0       	breq	.+6      	; 0x1d8e <_ZN16OrangutanDigital9setOutputEhh+0x70>
    1d88:	90 81       	ld	r25, Z
    1d8a:	98 2b       	or	r25, r24
    1d8c:	04 c0       	rjmp	.+8      	; 0x1d96 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    1d8e:	20 81       	ld	r18, Z
    1d90:	98 2f       	mov	r25, r24
    1d92:	90 95       	com	r25
    1d94:	92 23       	and	r25, r18
    1d96:	90 83       	st	Z, r25
    1d98:	9c 91       	ld	r25, X
    1d9a:	98 2b       	or	r25, r24
    1d9c:	9c 93       	st	X, r25
    1d9e:	08 95       	ret

00001da0 <_ZN15OrangutanMotors5init2Ev>:
    1da0:	83 ef       	ldi	r24, 0xF3	; 243
    1da2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1da6:	84 bd       	out	0x24, r24	; 36
    1da8:	82 e0       	ldi	r24, 0x02	; 2
    1daa:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    1dae:	85 bd       	out	0x25, r24	; 37
    1db0:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    1db4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    1db8:	18 bc       	out	0x28, r1	; 40
    1dba:	17 bc       	out	0x27, r1	; 39
    1dbc:	60 e0       	ldi	r22, 0x00	; 0
    1dbe:	86 e0       	ldi	r24, 0x06	; 6
    1dc0:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <_ZN16OrangutanDigital9setOutputEhh>
    1dc4:	60 e0       	ldi	r22, 0x00	; 0
    1dc6:	85 e0       	ldi	r24, 0x05	; 5
    1dc8:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <_ZN16OrangutanDigital9setOutputEhh>
    1dcc:	60 e0       	ldi	r22, 0x00	; 0
    1dce:	8b e0       	ldi	r24, 0x0B	; 11
    1dd0:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <_ZN16OrangutanDigital9setOutputEhh>
    1dd4:	60 e0       	ldi	r22, 0x00	; 0
    1dd6:	83 e0       	ldi	r24, 0x03	; 3
    1dd8:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <_ZN16OrangutanDigital9setOutputEhh>
    1ddc:	08 95       	ret

00001dde <_ZN15OrangutanMotors4initEv>:
    1dde:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <_ZZN15OrangutanMotors4initEvE11initialized>
    1de2:	81 11       	cpse	r24, r1
    1de4:	05 c0       	rjmp	.+10     	; 0x1df0 <_ZN15OrangutanMotors4initEv+0x12>
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <_ZZN15OrangutanMotors4initEvE11initialized>
    1dec:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <_ZN15OrangutanMotors5init2Ev>
    1df0:	08 95       	ret

00001df2 <_ZN15OrangutanMotors10setM1SpeedEi>:
    1df2:	cf 93       	push	r28
    1df4:	df 93       	push	r29
    1df6:	ec 01       	movw	r28, r24
    1df8:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <_ZN15OrangutanMotors4initEv>
    1dfc:	d7 ff       	sbrs	r29, 7
    1dfe:	05 c0       	rjmp	.+10     	; 0x1e0a <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    1e00:	d1 95       	neg	r29
    1e02:	c1 95       	neg	r28
    1e04:	d1 09       	sbc	r29, r1
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	01 c0       	rjmp	.+2      	; 0x1e0c <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    1e0a:	80 e0       	ldi	r24, 0x00	; 0
    1e0c:	cf 3f       	cpi	r28, 0xFF	; 255
    1e0e:	d1 05       	cpc	r29, r1
    1e10:	19 f0       	breq	.+6      	; 0x1e18 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    1e12:	14 f0       	brlt	.+4      	; 0x1e18 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    1e14:	cf ef       	ldi	r28, 0xFF	; 255
    1e16:	d0 e0       	ldi	r29, 0x00	; 0
    1e18:	88 23       	and	r24, r24
    1e1a:	19 f0       	breq	.+6      	; 0x1e22 <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    1e1c:	18 bc       	out	0x28, r1	; 40
    1e1e:	c7 bd       	out	0x27, r28	; 39
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    1e22:	c8 bd       	out	0x28, r28	; 40
    1e24:	17 bc       	out	0x27, r1	; 39
    1e26:	df 91       	pop	r29
    1e28:	cf 91       	pop	r28
    1e2a:	08 95       	ret

00001e2c <_ZN15OrangutanMotors10setM2SpeedEi>:
    1e2c:	cf 93       	push	r28
    1e2e:	df 93       	push	r29
    1e30:	ec 01       	movw	r28, r24
    1e32:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <_ZN15OrangutanMotors4initEv>
    1e36:	d7 ff       	sbrs	r29, 7
    1e38:	05 c0       	rjmp	.+10     	; 0x1e44 <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    1e3a:	d1 95       	neg	r29
    1e3c:	c1 95       	neg	r28
    1e3e:	d1 09       	sbc	r29, r1
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	01 c0       	rjmp	.+2      	; 0x1e46 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	cf 3f       	cpi	r28, 0xFF	; 255
    1e48:	d1 05       	cpc	r29, r1
    1e4a:	19 f0       	breq	.+6      	; 0x1e52 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1e4c:	14 f0       	brlt	.+4      	; 0x1e52 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1e4e:	cf ef       	ldi	r28, 0xFF	; 255
    1e50:	d0 e0       	ldi	r29, 0x00	; 0
    1e52:	88 23       	and	r24, r24
    1e54:	29 f0       	breq	.+10     	; 0x1e60 <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    1e56:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    1e5a:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    1e5e:	04 c0       	rjmp	.+8      	; 0x1e68 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    1e60:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    1e64:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    1e68:	df 91       	pop	r29
    1e6a:	cf 91       	pop	r28
    1e6c:	08 95       	ret

00001e6e <_ZN15OrangutanMotors9setSpeedsEii>:
    1e6e:	cf 93       	push	r28
    1e70:	df 93       	push	r29
    1e72:	eb 01       	movw	r28, r22
    1e74:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <_ZN15OrangutanMotors10setM1SpeedEi>
    1e78:	ce 01       	movw	r24, r28
    1e7a:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <_ZN15OrangutanMotors10setM2SpeedEi>
    1e7e:	df 91       	pop	r29
    1e80:	cf 91       	pop	r28
    1e82:	08 95       	ret

00001e84 <set_motors>:
    1e84:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <_ZN15OrangutanMotors9setSpeedsEii>
    1e88:	08 95       	ret

00001e8a <_ZN20OrangutanPushbuttons5init2Ev>:
    1e8a:	84 b1       	in	r24, 0x04	; 4
    1e8c:	8d 7c       	andi	r24, 0xCD	; 205
    1e8e:	84 b9       	out	0x04, r24	; 4
    1e90:	85 b1       	in	r24, 0x05	; 5
    1e92:	82 63       	ori	r24, 0x32	; 50
    1e94:	85 b9       	out	0x05, r24	; 5
    1e96:	85 e0       	ldi	r24, 0x05	; 5
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	6f 93       	push	r22
    1e9c:	64 e0       	ldi	r22, 0x04	; 4
    1e9e:	6a 95       	dec	r22
    1ea0:	f1 f7       	brne	.-4      	; 0x1e9e <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    1ea2:	6f 91       	pop	r22
    1ea4:	01 97       	sbiw	r24, 0x01	; 1
    1ea6:	c9 f7       	brne	.-14     	; 0x1e9a <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    1ea8:	08 95       	ret

00001eaa <_ZN20OrangutanPushbuttons4initEv>:
    1eaa:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    1eae:	81 11       	cpse	r24, r1
    1eb0:	05 c0       	rjmp	.+10     	; 0x1ebc <_ZN20OrangutanPushbuttons4initEv+0x12>
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    1eb8:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_ZN20OrangutanPushbuttons5init2Ev>
    1ebc:	08 95       	ret

00001ebe <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    1ebe:	cf 93       	push	r28
    1ec0:	c8 2f       	mov	r28, r24
    1ec2:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <_ZN20OrangutanPushbuttons4initEv>
    1ec6:	83 b1       	in	r24, 0x03	; 3
    1ec8:	8c 23       	and	r24, r28
    1eca:	e9 f3       	breq	.-6      	; 0x1ec6 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1ecc:	8a e0       	ldi	r24, 0x0A	; 10
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	0e 94 e7 10 	call	0x21ce	; 0x21ce <delay_ms>
    1ed4:	83 b1       	in	r24, 0x03	; 3
    1ed6:	8c 23       	and	r24, r28
    1ed8:	b1 f3       	breq	.-20     	; 0x1ec6 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1eda:	83 b1       	in	r24, 0x03	; 3
    1edc:	8c 23       	and	r24, r28
    1ede:	cf 91       	pop	r28
    1ee0:	08 95       	ret

00001ee2 <wait_for_button_release>:
    1ee2:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    1ee6:	08 95       	ret

00001ee8 <_ZN20OrangutanPushbuttons9isPressedEh>:
    1ee8:	a1 e0       	ldi	r26, 0x01	; 1
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	ea e7       	ldi	r30, 0x7A	; 122
    1eee:	ff e0       	ldi	r31, 0x0F	; 15
    1ef0:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <__prologue_saves__+0x20>
    1ef4:	89 83       	std	Y+1, r24	; 0x01
    1ef6:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <_ZN20OrangutanPushbuttons4initEv>
    1efa:	93 b1       	in	r25, 0x03	; 3
    1efc:	90 95       	com	r25
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	89 23       	and	r24, r25
    1f02:	21 96       	adiw	r28, 0x01	; 1
    1f04:	e2 e0       	ldi	r30, 0x02	; 2
    1f06:	0c 94 3f 17 	jmp	0x2e7e	; 0x2e7e <__epilogue_restores__+0x20>

00001f0a <button_is_pressed>:
    1f0a:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <_ZN20OrangutanPushbuttons9isPressedEh>
    1f0e:	08 95       	ret

00001f10 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>:
    1f10:	28 2f       	mov	r18, r24
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	9a e0       	ldi	r25, 0x0A	; 10
    1f16:	89 9f       	mul	r24, r25
    1f18:	f0 01       	movw	r30, r0
    1f1a:	11 24       	eor	r1, r1
    1f1c:	e5 56       	subi	r30, 0x65	; 101
    1f1e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f20:	80 85       	ldd	r24, Z+8	; 0x08
    1f22:	91 85       	ldd	r25, Z+9	; 0x09
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	21 f0       	breq	.+8      	; 0x1f30 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    1f28:	52 81       	ldd	r21, Z+2	; 0x02
    1f2a:	44 81       	ldd	r20, Z+4	; 0x04
    1f2c:	54 17       	cp	r21, r20
    1f2e:	80 f0       	brcs	.+32     	; 0x1f50 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x40>
    1f30:	8a e0       	ldi	r24, 0x0A	; 10
    1f32:	82 9f       	mul	r24, r18
    1f34:	f0 01       	movw	r30, r0
    1f36:	83 9f       	mul	r24, r19
    1f38:	f0 0d       	add	r31, r0
    1f3a:	11 24       	eor	r1, r1
    1f3c:	e5 56       	subi	r30, 0x65	; 101
    1f3e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f40:	92 81       	ldd	r25, Z+2	; 0x02
    1f42:	84 81       	ldd	r24, Z+4	; 0x04
    1f44:	98 13       	cpse	r25, r24
    1f46:	0e c0       	rjmp	.+28     	; 0x1f64 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x54>
    1f48:	85 81       	ldd	r24, Z+5	; 0x05
    1f4a:	81 11       	cpse	r24, r1
    1f4c:	0a c0       	rjmp	.+20     	; 0x1f62 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x52>
    1f4e:	08 95       	ret
    1f50:	42 81       	ldd	r20, Z+2	; 0x02
    1f52:	dc 01       	movw	r26, r24
    1f54:	a4 0f       	add	r26, r20
    1f56:	b1 1d       	adc	r27, r1
    1f58:	6c 93       	st	X, r22
    1f5a:	82 81       	ldd	r24, Z+2	; 0x02
    1f5c:	8f 5f       	subi	r24, 0xFF	; 255
    1f5e:	82 83       	std	Z+2, r24	; 0x02
    1f60:	e7 cf       	rjmp	.-50     	; 0x1f30 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    1f62:	12 82       	std	Z+2, r1	; 0x02
    1f64:	08 95       	ret

00001f66 <_ZN15OrangutanSerial14receive_inlineEhPchh>:
    1f66:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1f6a:	9f 77       	andi	r25, 0x7F	; 127
    1f6c:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1f70:	9a e0       	ldi	r25, 0x0A	; 10
    1f72:	89 9f       	mul	r24, r25
    1f74:	f0 01       	movw	r30, r0
    1f76:	11 24       	eor	r1, r1
    1f78:	e5 56       	subi	r30, 0x65	; 101
    1f7a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f7c:	71 87       	std	Z+9, r23	; 0x09
    1f7e:	60 87       	std	Z+8, r22	; 0x08
    1f80:	12 82       	std	Z+2, r1	; 0x02
    1f82:	44 83       	std	Z+4, r20	; 0x04
    1f84:	25 83       	std	Z+5, r18	; 0x05
    1f86:	80 81       	ld	r24, Z
    1f88:	81 11       	cpse	r24, r1
    1f8a:	05 c0       	rjmp	.+10     	; 0x1f96 <_ZN15OrangutanSerial14receive_inlineEhPchh+0x30>
    1f8c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1f90:	80 68       	ori	r24, 0x80	; 128
    1f92:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1f96:	08 95       	ret

00001f98 <_ZN15OrangutanSerial13cancelReceiveEv>:
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	40 e0       	ldi	r20, 0x00	; 0
    1f9c:	60 e0       	ldi	r22, 0x00	; 0
    1f9e:	70 e0       	ldi	r23, 0x00	; 0
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <_ZN15OrangutanSerial14receive_inlineEhPchh>
    1fa6:	08 95       	ret

00001fa8 <serial_cancel_receive>:
    1fa8:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <_ZN15OrangutanSerial13cancelReceiveEv>
    1fac:	08 95       	ret

00001fae <_ZN15OrangutanSerial7receiveEPch>:
    1fae:	46 2f       	mov	r20, r22
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	bc 01       	movw	r22, r24
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <_ZN15OrangutanSerial14receive_inlineEhPchh>
    1fba:	08 95       	ret

00001fbc <serial_receive>:
    1fbc:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <_ZN15OrangutanSerial7receiveEPch>
    1fc0:	08 95       	ret

00001fc2 <__vector_18>:
    1fc2:	1f 92       	push	r1
    1fc4:	0f 92       	push	r0
    1fc6:	0f b6       	in	r0, 0x3f	; 63
    1fc8:	0f 92       	push	r0
    1fca:	11 24       	eor	r1, r1
    1fcc:	2f 93       	push	r18
    1fce:	3f 93       	push	r19
    1fd0:	4f 93       	push	r20
    1fd2:	5f 93       	push	r21
    1fd4:	6f 93       	push	r22
    1fd6:	7f 93       	push	r23
    1fd8:	8f 93       	push	r24
    1fda:	9f 93       	push	r25
    1fdc:	af 93       	push	r26
    1fde:	bf 93       	push	r27
    1fe0:	ef 93       	push	r30
    1fe2:	ff 93       	push	r31
    1fe4:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1fe8:	80 e0       	ldi	r24, 0x00	; 0
    1fea:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>
    1fee:	ff 91       	pop	r31
    1ff0:	ef 91       	pop	r30
    1ff2:	bf 91       	pop	r27
    1ff4:	af 91       	pop	r26
    1ff6:	9f 91       	pop	r25
    1ff8:	8f 91       	pop	r24
    1ffa:	7f 91       	pop	r23
    1ffc:	6f 91       	pop	r22
    1ffe:	5f 91       	pop	r21
    2000:	4f 91       	pop	r20
    2002:	3f 91       	pop	r19
    2004:	2f 91       	pop	r18
    2006:	0f 90       	pop	r0
    2008:	0f be       	out	0x3f, r0	; 63
    200a:	0f 90       	pop	r0
    200c:	1f 90       	pop	r1
    200e:	18 95       	reti

00002010 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>:
    2010:	9a e0       	ldi	r25, 0x0A	; 10
    2012:	89 9f       	mul	r24, r25
    2014:	f0 01       	movw	r30, r0
    2016:	11 24       	eor	r1, r1
    2018:	e5 56       	subi	r30, 0x65	; 101
    201a:	fe 4f       	sbci	r31, 0xFE	; 254
    201c:	86 81       	ldd	r24, Z+6	; 0x06
    201e:	97 81       	ldd	r25, Z+7	; 0x07
    2020:	89 2b       	or	r24, r25
    2022:	59 f0       	breq	.+22     	; 0x203a <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    2024:	91 81       	ldd	r25, Z+1	; 0x01
    2026:	83 81       	ldd	r24, Z+3	; 0x03
    2028:	98 17       	cp	r25, r24
    202a:	38 f4       	brcc	.+14     	; 0x203a <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    202c:	80 81       	ld	r24, Z
    202e:	81 11       	cpse	r24, r1
    2030:	04 c0       	rjmp	.+8      	; 0x203a <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    2032:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2036:	80 62       	ori	r24, 0x20	; 32
    2038:	03 c0       	rjmp	.+6      	; 0x2040 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x30>
    203a:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    203e:	8f 7d       	andi	r24, 0xDF	; 223
    2040:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2044:	08 95       	ret

00002046 <_ZN15OrangutanSerial15initUART_inlineEh>:
    2046:	9a e0       	ldi	r25, 0x0A	; 10
    2048:	89 9f       	mul	r24, r25
    204a:	f0 01       	movw	r30, r0
    204c:	11 24       	eor	r1, r1
    204e:	e5 56       	subi	r30, 0x65	; 101
    2050:	fe 4f       	sbci	r31, 0xFE	; 254
    2052:	90 81       	ld	r25, Z
    2054:	91 11       	cpse	r25, r1
    2056:	02 c0       	rjmp	.+4      	; 0x205c <_ZN15OrangutanSerial15initUART_inlineEh+0x16>
    2058:	98 e9       	ldi	r25, 0x98	; 152
    205a:	01 c0       	rjmp	.+2      	; 0x205e <_ZN15OrangutanSerial15initUART_inlineEh+0x18>
    205c:	98 e1       	ldi	r25, 0x18	; 24
    205e:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2062:	0e 94 08 10 	call	0x2010	; 0x2010 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    2066:	78 94       	sei
    2068:	08 95       	ret

0000206a <serial_set_baud_rate>:
    206a:	cf 92       	push	r12
    206c:	df 92       	push	r13
    206e:	ef 92       	push	r14
    2070:	ff 92       	push	r15
    2072:	6b 01       	movw	r12, r22
    2074:	7c 01       	movw	r14, r24
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	0e 94 23 10 	call	0x2046	; 0x2046 <_ZN15OrangutanSerial15initUART_inlineEh>
    207c:	a8 ef       	ldi	r26, 0xF8	; 248
    207e:	bf ef       	ldi	r27, 0xFF	; 255
    2080:	a7 01       	movw	r20, r14
    2082:	96 01       	movw	r18, r12
    2084:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <__mulohisi3>
    2088:	73 5d       	subi	r23, 0xD3	; 211
    208a:	8e 4c       	sbci	r24, 0xCE	; 206
    208c:	9e 4f       	sbci	r25, 0xFE	; 254
    208e:	e4 e0       	ldi	r30, 0x04	; 4
    2090:	22 0f       	add	r18, r18
    2092:	33 1f       	adc	r19, r19
    2094:	44 1f       	adc	r20, r20
    2096:	55 1f       	adc	r21, r21
    2098:	ea 95       	dec	r30
    209a:	d1 f7       	brne	.-12     	; 0x2090 <serial_set_baud_rate+0x26>
    209c:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <__udivmodsi4>
    20a0:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    20a4:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    20a8:	ff 90       	pop	r15
    20aa:	ef 90       	pop	r14
    20ac:	df 90       	pop	r13
    20ae:	cf 90       	pop	r12
    20b0:	08 95       	ret

000020b2 <_ZN15OrangutanSerial11uart_tx_isrEh>:
    20b2:	9a e0       	ldi	r25, 0x0A	; 10
    20b4:	89 9f       	mul	r24, r25
    20b6:	f0 01       	movw	r30, r0
    20b8:	11 24       	eor	r1, r1
    20ba:	e5 56       	subi	r30, 0x65	; 101
    20bc:	fe 4f       	sbci	r31, 0xFE	; 254
    20be:	26 81       	ldd	r18, Z+6	; 0x06
    20c0:	37 81       	ldd	r19, Z+7	; 0x07
    20c2:	21 15       	cp	r18, r1
    20c4:	31 05       	cpc	r19, r1
    20c6:	41 f0       	breq	.+16     	; 0x20d8 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    20c8:	41 81       	ldd	r20, Z+1	; 0x01
    20ca:	93 81       	ldd	r25, Z+3	; 0x03
    20cc:	49 17       	cp	r20, r25
    20ce:	20 f4       	brcc	.+8      	; 0x20d8 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    20d0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    20d4:	95 fd       	sbrc	r25, 5
    20d6:	03 c0       	rjmp	.+6      	; 0x20de <_ZN15OrangutanSerial11uart_tx_isrEh+0x2c>
    20d8:	0e 94 08 10 	call	0x2010	; 0x2010 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    20dc:	08 95       	ret
    20de:	91 81       	ldd	r25, Z+1	; 0x01
    20e0:	d9 01       	movw	r26, r18
    20e2:	a9 0f       	add	r26, r25
    20e4:	b1 1d       	adc	r27, r1
    20e6:	9c 91       	ld	r25, X
    20e8:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    20ec:	91 81       	ldd	r25, Z+1	; 0x01
    20ee:	9f 5f       	subi	r25, 0xFF	; 255
    20f0:	91 83       	std	Z+1, r25	; 0x01
    20f2:	f2 cf       	rjmp	.-28     	; 0x20d8 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>

000020f4 <__vector_19>:
    20f4:	1f 92       	push	r1
    20f6:	0f 92       	push	r0
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	0f 92       	push	r0
    20fc:	11 24       	eor	r1, r1
    20fe:	2f 93       	push	r18
    2100:	3f 93       	push	r19
    2102:	4f 93       	push	r20
    2104:	5f 93       	push	r21
    2106:	6f 93       	push	r22
    2108:	7f 93       	push	r23
    210a:	8f 93       	push	r24
    210c:	9f 93       	push	r25
    210e:	af 93       	push	r26
    2110:	bf 93       	push	r27
    2112:	ef 93       	push	r30
    2114:	ff 93       	push	r31
    2116:	80 e0       	ldi	r24, 0x00	; 0
    2118:	0e 94 59 10 	call	0x20b2	; 0x20b2 <_ZN15OrangutanSerial11uart_tx_isrEh>
    211c:	ff 91       	pop	r31
    211e:	ef 91       	pop	r30
    2120:	bf 91       	pop	r27
    2122:	af 91       	pop	r26
    2124:	9f 91       	pop	r25
    2126:	8f 91       	pop	r24
    2128:	7f 91       	pop	r23
    212a:	6f 91       	pop	r22
    212c:	5f 91       	pop	r21
    212e:	4f 91       	pop	r20
    2130:	3f 91       	pop	r19
    2132:	2f 91       	pop	r18
    2134:	0f 90       	pop	r0
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	0f 90       	pop	r0
    213a:	1f 90       	pop	r1
    213c:	18 95       	reti

0000213e <__vector_9>:
    213e:	2f 92       	push	r2
    2140:	8f 93       	push	r24
    2142:	9f 93       	push	r25
    2144:	2f b6       	in	r2, 0x3f	; 63
    2146:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <tickCount+0x1>
    214a:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <tickCount+0x2>
    214e:	01 96       	adiw	r24, 0x01	; 1
    2150:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <tickCount+0x1>
    2154:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <tickCount+0x2>
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <tickCount+0x3>
    215e:	89 1f       	adc	r24, r25
    2160:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <tickCount+0x3>
    2164:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <us_over_10+0x1>
    2168:	9c 5f       	subi	r25, 0xFC	; 252
    216a:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <us_over_10+0x1>
    216e:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <us_over_10>
    2172:	80 51       	subi	r24, 0x10	; 16
    2174:	97 42       	sbci	r25, 0x27	; 39
    2176:	c0 f0       	brcs	.+48     	; 0x21a8 <end>
    2178:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <us_over_10+0x1>
    217c:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <us_over_10>
    2180:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <msCounter>
    2184:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <msCounter+0x1>
    2188:	01 96       	adiw	r24, 0x01	; 1
    218a:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <msCounter>
    218e:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <msCounter+0x1>
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <msCounter+0x2>
    2198:	89 1f       	adc	r24, r25
    219a:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <msCounter+0x2>
    219e:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <msCounter+0x3>
    21a2:	89 1f       	adc	r24, r25
    21a4:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <msCounter+0x3>

000021a8 <end>:
    21a8:	2f be       	out	0x3f, r2	; 63
    21aa:	9f 91       	pop	r25
    21ac:	8f 91       	pop	r24
    21ae:	2f 90       	pop	r2
    21b0:	18 95       	reti

000021b2 <_ZN13OrangutanTime17delayMillisecondsEj>:
    21b2:	28 ee       	ldi	r18, 0xE8	; 232
    21b4:	33 e0       	ldi	r19, 0x03	; 3
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	48 f0       	brcs	.+18     	; 0x21cc <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    21ba:	f9 01       	movw	r30, r18
    21bc:	6f 93       	push	r22
    21be:	64 e0       	ldi	r22, 0x04	; 4
    21c0:	6a 95       	dec	r22
    21c2:	f1 f7       	brne	.-4      	; 0x21c0 <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    21c4:	6f 91       	pop	r22
    21c6:	31 97       	sbiw	r30, 0x01	; 1
    21c8:	c9 f7       	brne	.-14     	; 0x21bc <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    21ca:	f5 cf       	rjmp	.-22     	; 0x21b6 <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    21cc:	08 95       	ret

000021ce <delay_ms>:
    21ce:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <_ZN13OrangutanTime17delayMillisecondsEj>
    21d2:	08 95       	ret

000021d4 <_ZN13OrangutanTime5init2Ev>:
    21d4:	e0 e7       	ldi	r30, 0x70	; 112
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	8e 7f       	andi	r24, 0xFE	; 254
    21dc:	80 83       	st	Z, r24
    21de:	a0 eb       	ldi	r26, 0xB0	; 176
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	8c 91       	ld	r24, X
    21e4:	83 60       	ori	r24, 0x03	; 3
    21e6:	8c 93       	st	X, r24
    21e8:	a1 eb       	ldi	r26, 0xB1	; 177
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	8c 91       	ld	r24, X
    21ee:	80 7f       	andi	r24, 0xF0	; 240
    21f0:	8c 93       	st	X, r24
    21f2:	8c 91       	ld	r24, X
    21f4:	82 60       	ori	r24, 0x02	; 2
    21f6:	8c 93       	st	X, r24
    21f8:	b8 9a       	sbi	0x17, 0	; 23
    21fa:	80 81       	ld	r24, Z
    21fc:	81 60       	ori	r24, 0x01	; 1
    21fe:	80 83       	st	Z, r24
    2200:	78 94       	sei
    2202:	08 95       	ret

00002204 <_ZN13OrangutanTime4initEv>:
    2204:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <_ZZN13OrangutanTime4initEvE11initialized>
    2208:	81 11       	cpse	r24, r1
    220a:	05 c0       	rjmp	.+10     	; 0x2216 <_ZN13OrangutanTime4initEv+0x12>
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <_ZZN13OrangutanTime4initEvE11initialized>
    2212:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <_ZN13OrangutanTime5init2Ev>
    2216:	08 95       	ret

00002218 <_ZN13OrangutanTime5resetEv>:
    2218:	0e 94 02 11 	call	0x2204	; 0x2204 <_ZN13OrangutanTime4initEv>
    221c:	e0 e7       	ldi	r30, 0x70	; 112
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	8e 7f       	andi	r24, 0xFE	; 254
    2224:	80 83       	st	Z, r24
    2226:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <msCounter>
    222a:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <msCounter+0x1>
    222e:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <msCounter+0x2>
    2232:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <msCounter+0x3>
    2236:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <us_over_10+0x1>
    223a:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <us_over_10>
    223e:	80 81       	ld	r24, Z
    2240:	81 60       	ori	r24, 0x01	; 1
    2242:	80 83       	st	Z, r24
    2244:	08 95       	ret

00002246 <read_line_sensors>:
    2246:	46 2f       	mov	r20, r22
    2248:	bc 01       	movw	r22, r24
    224a:	8f ea       	ldi	r24, 0xAF	; 175
    224c:	91 e0       	ldi	r25, 0x01	; 1
    224e:	0e 94 b4 13 	call	0x2768	; 0x2768 <_ZN16PololuQTRSensors4readEPjh>
    2252:	08 95       	ret

00002254 <calibrate_line_sensors>:
    2254:	68 2f       	mov	r22, r24
    2256:	8f ea       	ldi	r24, 0xAF	; 175
    2258:	91 e0       	ldi	r25, 0x01	; 1
    225a:	0e 94 12 15 	call	0x2a24	; 0x2a24 <_ZN16PololuQTRSensors9calibrateEh>
    225e:	08 95       	ret

00002260 <read_line>:
    2260:	46 2f       	mov	r20, r22
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	bc 01       	movw	r22, r24
    2266:	8f ea       	ldi	r24, 0xAF	; 175
    2268:	91 e0       	ldi	r25, 0x01	; 1
    226a:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <_ZN16PololuQTRSensors8readLineEPjhh>
    226e:	08 95       	ret

00002270 <_ZN9Pololu3pi4initEjh>:
    2270:	0f 93       	push	r16
    2272:	cf 93       	push	r28
    2274:	df 93       	push	r29
    2276:	00 d0       	rcall	.+0      	; 0x2278 <_ZN9Pololu3pi4initEjh+0x8>
    2278:	00 d0       	rcall	.+0      	; 0x227a <_ZN9Pololu3pi4initEjh+0xa>
    227a:	1f 92       	push	r1
    227c:	cd b7       	in	r28, 0x3d	; 61
    227e:	de b7       	in	r29, 0x3e	; 62
    2280:	9c 01       	movw	r18, r24
    2282:	85 e0       	ldi	r24, 0x05	; 5
    2284:	e4 e4       	ldi	r30, 0x44	; 68
    2286:	f1 e0       	ldi	r31, 0x01	; 1
    2288:	de 01       	movw	r26, r28
    228a:	11 96       	adiw	r26, 0x01	; 1
    228c:	01 90       	ld	r0, Z+
    228e:	0d 92       	st	X+, r0
    2290:	8a 95       	dec	r24
    2292:	e1 f7       	brne	.-8      	; 0x228c <_ZN9Pololu3pi4initEjh+0x1c>
    2294:	66 23       	and	r22, r22
    2296:	11 f0       	breq	.+4      	; 0x229c <_ZN9Pololu3pi4initEjh+0x2c>
    2298:	0f ef       	ldi	r16, 0xFF	; 255
    229a:	01 c0       	rjmp	.+2      	; 0x229e <_ZN9Pololu3pi4initEjh+0x2e>
    229c:	03 e1       	ldi	r16, 0x13	; 19
    229e:	45 e0       	ldi	r20, 0x05	; 5
    22a0:	be 01       	movw	r22, r28
    22a2:	6f 5f       	subi	r22, 0xFF	; 255
    22a4:	7f 4f       	sbci	r23, 0xFF	; 255
    22a6:	8f ea       	ldi	r24, 0xAF	; 175
    22a8:	91 e0       	ldi	r25, 0x01	; 1
    22aa:	0e 94 0a 12 	call	0x2414	; 0x2414 <_ZN18PololuQTRSensorsRC4initEPhhjh>
    22ae:	8f ea       	ldi	r24, 0xAF	; 175
    22b0:	91 e0       	ldi	r25, 0x01	; 1
    22b2:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <_ZN16PololuQTRSensors11emittersOffEv>
    22b6:	0e 94 0c 11 	call	0x2218	; 0x2218 <_ZN13OrangutanTime5resetEv>
    22ba:	0f 90       	pop	r0
    22bc:	0f 90       	pop	r0
    22be:	0f 90       	pop	r0
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	df 91       	pop	r29
    22c6:	cf 91       	pop	r28
    22c8:	0f 91       	pop	r16
    22ca:	08 95       	ret

000022cc <pololu_3pi_init>:
    22cc:	60 e0       	ldi	r22, 0x00	; 0
    22ce:	0e 94 38 11 	call	0x2270	; 0x2270 <_ZN9Pololu3pi4initEjh>
    22d2:	08 95       	ret

000022d4 <_GLOBAL__sub_D_pololu_3pi_init>:
    22d4:	8f ea       	ldi	r24, 0xAF	; 175
    22d6:	91 e0       	ldi	r25, 0x01	; 1
    22d8:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <_ZN16PololuQTRSensorsD1Ev>
    22dc:	08 95       	ret

000022de <delay_us>:
    22de:	6f 93       	push	r22
    22e0:	64 e0       	ldi	r22, 0x04	; 4
    22e2:	6a 95       	dec	r22
    22e4:	f1 f7       	brne	.-4      	; 0x22e2 <delay_us+0x4>
    22e6:	6f 91       	pop	r22
    22e8:	01 97       	sbiw	r24, 0x01	; 1
    22ea:	c9 f7       	brne	.-14     	; 0x22de <delay_us>
    22ec:	08 95       	ret

000022ee <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    22ee:	fc 01       	movw	r30, r24
    22f0:	11 82       	std	Z+1, r1	; 0x01
    22f2:	10 82       	st	Z, r1
    22f4:	13 82       	std	Z+3, r1	; 0x03
    22f6:	12 82       	std	Z+2, r1	; 0x02
    22f8:	15 82       	std	Z+5, r1	; 0x05
    22fa:	14 82       	std	Z+4, r1	; 0x04
    22fc:	16 82       	std	Z+6, r1	; 0x06
    22fe:	68 30       	cpi	r22, 0x08	; 8
    2300:	68 f4       	brcc	.+26     	; 0x231c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    2302:	89 e2       	ldi	r24, 0x29	; 41
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	91 83       	std	Z+1, r25	; 0x01
    2308:	80 83       	st	Z, r24
    230a:	8b e2       	ldi	r24, 0x2B	; 43
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	93 83       	std	Z+3, r25	; 0x03
    2310:	82 83       	std	Z+2, r24	; 0x02
    2312:	8a e2       	ldi	r24, 0x2A	; 42
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	95 83       	std	Z+5, r25	; 0x05
    2318:	84 83       	std	Z+4, r24	; 0x04
    231a:	1f c0       	rjmp	.+62     	; 0x235a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    231c:	6e 30       	cpi	r22, 0x0E	; 14
    231e:	70 f4       	brcc	.+28     	; 0x233c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    2320:	83 e2       	ldi	r24, 0x23	; 35
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	91 83       	std	Z+1, r25	; 0x01
    2326:	80 83       	st	Z, r24
    2328:	85 e2       	ldi	r24, 0x25	; 37
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	93 83       	std	Z+3, r25	; 0x03
    232e:	82 83       	std	Z+2, r24	; 0x02
    2330:	84 e2       	ldi	r24, 0x24	; 36
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	95 83       	std	Z+5, r25	; 0x05
    2336:	84 83       	std	Z+4, r24	; 0x04
    2338:	68 50       	subi	r22, 0x08	; 8
    233a:	0f c0       	rjmp	.+30     	; 0x235a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    233c:	65 31       	cpi	r22, 0x15	; 21
    233e:	98 f4       	brcc	.+38     	; 0x2366 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    2340:	86 e2       	ldi	r24, 0x26	; 38
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	91 83       	std	Z+1, r25	; 0x01
    2346:	80 83       	st	Z, r24
    2348:	88 e2       	ldi	r24, 0x28	; 40
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	93 83       	std	Z+3, r25	; 0x03
    234e:	82 83       	std	Z+2, r24	; 0x02
    2350:	87 e2       	ldi	r24, 0x27	; 39
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	95 83       	std	Z+5, r25	; 0x05
    2356:	84 83       	std	Z+4, r24	; 0x04
    2358:	6e 50       	subi	r22, 0x0E	; 14
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	01 c0       	rjmp	.+2      	; 0x2360 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    235e:	88 0f       	add	r24, r24
    2360:	6a 95       	dec	r22
    2362:	ea f7       	brpl	.-6      	; 0x235e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    2364:	86 83       	std	Z+6, r24	; 0x06
    2366:	08 95       	ret

00002368 <_ZN16PololuQTRSensors4initEhhh>:
    2368:	a7 e0       	ldi	r26, 0x07	; 7
    236a:	b0 e0       	ldi	r27, 0x00	; 0
    236c:	ea eb       	ldi	r30, 0xBA	; 186
    236e:	f1 e1       	ldi	r31, 0x11	; 17
    2370:	0c 94 21 17 	jmp	0x2e42	; 0x2e42 <__prologue_saves__+0x1c>
    2374:	8c 01       	movw	r16, r24
    2376:	fc 01       	movw	r30, r24
    2378:	11 82       	std	Z+1, r1	; 0x01
    237a:	10 82       	st	Z, r1
    237c:	13 82       	std	Z+3, r1	; 0x03
    237e:	12 82       	std	Z+2, r1	; 0x02
    2380:	15 82       	std	Z+5, r1	; 0x05
    2382:	14 82       	std	Z+4, r1	; 0x04
    2384:	17 82       	std	Z+7, r1	; 0x07
    2386:	16 82       	std	Z+6, r1	; 0x06
    2388:	61 31       	cpi	r22, 0x11	; 17
    238a:	18 f0       	brcs	.+6      	; 0x2392 <_ZN16PololuQTRSensors4initEhhh+0x2a>
    238c:	80 e1       	ldi	r24, 0x10	; 16
    238e:	80 87       	std	Z+8, r24	; 0x08
    2390:	02 c0       	rjmp	.+4      	; 0x2396 <_ZN16PololuQTRSensors4initEhhh+0x2e>
    2392:	fc 01       	movw	r30, r24
    2394:	60 87       	std	Z+8, r22	; 0x08
    2396:	f8 01       	movw	r30, r16
    2398:	20 8b       	std	Z+16, r18	; 0x10
    239a:	64 2f       	mov	r22, r20
    239c:	ce 01       	movw	r24, r28
    239e:	01 96       	adiw	r24, 0x01	; 1
    23a0:	0e 94 77 11 	call	0x22ee	; 0x22ee <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    23a4:	8f 81       	ldd	r24, Y+7	; 0x07
    23a6:	f8 01       	movw	r30, r16
    23a8:	81 87       	std	Z+9, r24	; 0x09
    23aa:	8b 81       	ldd	r24, Y+3	; 0x03
    23ac:	9c 81       	ldd	r25, Y+4	; 0x04
    23ae:	93 87       	std	Z+11, r25	; 0x0b
    23b0:	82 87       	std	Z+10, r24	; 0x0a
    23b2:	8d 81       	ldd	r24, Y+5	; 0x05
    23b4:	9e 81       	ldd	r25, Y+6	; 0x06
    23b6:	95 87       	std	Z+13, r25	; 0x0d
    23b8:	84 87       	std	Z+12, r24	; 0x0c
    23ba:	27 96       	adiw	r28, 0x07	; 7
    23bc:	e4 e0       	ldi	r30, 0x04	; 4
    23be:	0c 94 3d 17 	jmp	0x2e7a	; 0x2e7a <__epilogue_restores__+0x1c>

000023c2 <_ZN16PololuQTRSensors11emittersOffEv>:
    23c2:	fc 01       	movw	r30, r24
    23c4:	a4 85       	ldd	r26, Z+12	; 0x0c
    23c6:	b5 85       	ldd	r27, Z+13	; 0x0d
    23c8:	10 97       	sbiw	r26, 0x00	; 0
    23ca:	79 f0       	breq	.+30     	; 0x23ea <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    23cc:	8c 91       	ld	r24, X
    23ce:	91 85       	ldd	r25, Z+9	; 0x09
    23d0:	89 2b       	or	r24, r25
    23d2:	8c 93       	st	X, r24
    23d4:	a2 85       	ldd	r26, Z+10	; 0x0a
    23d6:	b3 85       	ldd	r27, Z+11	; 0x0b
    23d8:	9c 91       	ld	r25, X
    23da:	81 85       	ldd	r24, Z+9	; 0x09
    23dc:	80 95       	com	r24
    23de:	89 23       	and	r24, r25
    23e0:	8c 93       	st	X, r24
    23e2:	88 ec       	ldi	r24, 0xC8	; 200
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	0e 94 6f 11 	call	0x22de	; 0x22de <delay_us>
    23ea:	08 95       	ret

000023ec <_ZN16PololuQTRSensors10emittersOnEv>:
    23ec:	fc 01       	movw	r30, r24
    23ee:	a4 85       	ldd	r26, Z+12	; 0x0c
    23f0:	b5 85       	ldd	r27, Z+13	; 0x0d
    23f2:	10 97       	sbiw	r26, 0x00	; 0
    23f4:	71 f0       	breq	.+28     	; 0x2412 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    23f6:	8c 91       	ld	r24, X
    23f8:	91 85       	ldd	r25, Z+9	; 0x09
    23fa:	89 2b       	or	r24, r25
    23fc:	8c 93       	st	X, r24
    23fe:	a2 85       	ldd	r26, Z+10	; 0x0a
    2400:	b3 85       	ldd	r27, Z+11	; 0x0b
    2402:	8c 91       	ld	r24, X
    2404:	91 85       	ldd	r25, Z+9	; 0x09
    2406:	89 2b       	or	r24, r25
    2408:	8c 93       	st	X, r24
    240a:	88 ec       	ldi	r24, 0xC8	; 200
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	0e 94 6f 11 	call	0x22de	; 0x22de <delay_us>
    2412:	08 95       	ret

00002414 <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    2414:	a7 e0       	ldi	r26, 0x07	; 7
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	e0 e1       	ldi	r30, 0x10	; 16
    241a:	f2 e1       	ldi	r31, 0x12	; 18
    241c:	0c 94 16 17 	jmp	0x2e2c	; 0x2e2c <__prologue_saves__+0x6>
    2420:	7c 01       	movw	r14, r24
    2422:	4b 01       	movw	r8, r22
    2424:	64 2f       	mov	r22, r20
    2426:	39 01       	movw	r6, r18
    2428:	40 2f       	mov	r20, r16
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	0e 94 b4 11 	call	0x2368	; 0x2368 <_ZN16PololuQTRSensors4initEhhh>
    2430:	87 01       	movw	r16, r14
    2432:	0f 5b       	subi	r16, 0xBF	; 191
    2434:	1f 4f       	sbci	r17, 0xFF	; 255
    2436:	f8 01       	movw	r30, r16
    2438:	10 82       	st	Z, r1
    243a:	67 01       	movw	r12, r14
    243c:	f2 e4       	ldi	r31, 0x42	; 66
    243e:	cf 0e       	add	r12, r31
    2440:	d1 1c       	adc	r13, r1
    2442:	f6 01       	movw	r30, r12
    2444:	10 82       	st	Z, r1
    2446:	57 01       	movw	r10, r14
    2448:	f3 e4       	ldi	r31, 0x43	; 67
    244a:	af 0e       	add	r10, r31
    244c:	b1 1c       	adc	r11, r1
    244e:	f5 01       	movw	r30, r10
    2450:	10 82       	st	Z, r1
    2452:	f7 01       	movw	r30, r14
    2454:	77 86       	std	Z+15, r7	; 0x0f
    2456:	66 86       	std	Z+14, r6	; 0x0e
    2458:	51 2c       	mov	r5, r1
    245a:	f7 01       	movw	r30, r14
    245c:	80 85       	ldd	r24, Z+8	; 0x08
    245e:	58 16       	cp	r5, r24
    2460:	50 f5       	brcc	.+84     	; 0x24b6 <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    2462:	65 2c       	mov	r6, r5
    2464:	71 2c       	mov	r7, r1
    2466:	f4 01       	movw	r30, r8
    2468:	e6 0d       	add	r30, r6
    246a:	f7 1d       	adc	r31, r7
    246c:	60 81       	ld	r22, Z
    246e:	ce 01       	movw	r24, r28
    2470:	01 96       	adiw	r24, 0x01	; 1
    2472:	0e 94 77 11 	call	0x22ee	; 0x22ee <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    2476:	2f 81       	ldd	r18, Y+7	; 0x07
    2478:	f7 01       	movw	r30, r14
    247a:	e6 0d       	add	r30, r6
    247c:	f7 1d       	adc	r31, r7
    247e:	21 8b       	std	Z+17, r18	; 0x11
    2480:	89 81       	ldd	r24, Y+1	; 0x01
    2482:	9a 81       	ldd	r25, Y+2	; 0x02
    2484:	f3 01       	movw	r30, r6
    2486:	ee 0f       	add	r30, r30
    2488:	ff 1f       	adc	r31, r31
    248a:	ee 0d       	add	r30, r14
    248c:	ff 1d       	adc	r31, r15
    248e:	92 a3       	std	Z+34, r25	; 0x22
    2490:	81 a3       	std	Z+33, r24	; 0x21
    2492:	83 32       	cpi	r24, 0x23	; 35
    2494:	91 05       	cpc	r25, r1
    2496:	11 f4       	brne	.+4      	; 0x249c <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    2498:	f8 01       	movw	r30, r16
    249a:	08 c0       	rjmp	.+16     	; 0x24ac <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    249c:	86 32       	cpi	r24, 0x26	; 38
    249e:	91 05       	cpc	r25, r1
    24a0:	11 f4       	brne	.+4      	; 0x24a6 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    24a2:	f6 01       	movw	r30, r12
    24a4:	03 c0       	rjmp	.+6      	; 0x24ac <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    24a6:	89 97       	sbiw	r24, 0x29	; 41
    24a8:	21 f4       	brne	.+8      	; 0x24b2 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    24aa:	f5 01       	movw	r30, r10
    24ac:	80 81       	ld	r24, Z
    24ae:	82 2b       	or	r24, r18
    24b0:	80 83       	st	Z, r24
    24b2:	53 94       	inc	r5
    24b4:	d2 cf       	rjmp	.-92     	; 0x245a <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    24b6:	27 96       	adiw	r28, 0x07	; 7
    24b8:	ef e0       	ldi	r30, 0x0F	; 15
    24ba:	0c 94 32 17 	jmp	0x2e64	; 0x2e64 <__epilogue_restores__+0x6>

000024be <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    24be:	a0 e0       	ldi	r26, 0x00	; 0
    24c0:	b0 e0       	ldi	r27, 0x00	; 0
    24c2:	e5 e6       	ldi	r30, 0x65	; 101
    24c4:	f2 e1       	ldi	r31, 0x12	; 18
    24c6:	0c 94 18 17 	jmp	0x2e30	; 0x2e30 <__prologue_saves__+0xa>
    24ca:	ec 01       	movw	r28, r24
    24cc:	5b 01       	movw	r10, r22
    24ce:	6c 01       	movw	r12, r24
    24d0:	81 e4       	ldi	r24, 0x41	; 65
    24d2:	c8 0e       	add	r12, r24
    24d4:	d1 1c       	adc	r13, r1
    24d6:	f6 01       	movw	r30, r12
    24d8:	80 80       	ld	r8, Z
    24da:	7e 01       	movw	r14, r28
    24dc:	f2 e4       	ldi	r31, 0x42	; 66
    24de:	ef 0e       	add	r14, r31
    24e0:	f1 1c       	adc	r15, r1
    24e2:	f7 01       	movw	r30, r14
    24e4:	70 80       	ld	r7, Z
    24e6:	8e 01       	movw	r16, r28
    24e8:	0d 5b       	subi	r16, 0xBD	; 189
    24ea:	1f 4f       	sbci	r17, 0xFF	; 255
    24ec:	f8 01       	movw	r30, r16
    24ee:	90 80       	ld	r9, Z
    24f0:	80 e0       	ldi	r24, 0x00	; 0
    24f2:	98 85       	ldd	r25, Y+8	; 0x08
    24f4:	89 17       	cp	r24, r25
    24f6:	48 f4       	brcc	.+18     	; 0x250a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    24f8:	f5 01       	movw	r30, r10
    24fa:	e8 0f       	add	r30, r24
    24fc:	f1 1d       	adc	r31, r1
    24fe:	e8 0f       	add	r30, r24
    2500:	f1 1d       	adc	r31, r1
    2502:	11 82       	std	Z+1, r1	; 0x01
    2504:	10 82       	st	Z, r1
    2506:	8f 5f       	subi	r24, 0xFF	; 255
    2508:	f4 cf       	rjmp	.-24     	; 0x24f2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    250a:	84 b1       	in	r24, 0x04	; 4
    250c:	f6 01       	movw	r30, r12
    250e:	90 81       	ld	r25, Z
    2510:	89 2b       	or	r24, r25
    2512:	84 b9       	out	0x04, r24	; 4
    2514:	87 b1       	in	r24, 0x07	; 7
    2516:	f7 01       	movw	r30, r14
    2518:	90 81       	ld	r25, Z
    251a:	89 2b       	or	r24, r25
    251c:	87 b9       	out	0x07, r24	; 7
    251e:	8a b1       	in	r24, 0x0a	; 10
    2520:	f8 01       	movw	r30, r16
    2522:	90 81       	ld	r25, Z
    2524:	89 2b       	or	r24, r25
    2526:	8a b9       	out	0x0a, r24	; 10
    2528:	85 b1       	in	r24, 0x05	; 5
    252a:	f6 01       	movw	r30, r12
    252c:	90 81       	ld	r25, Z
    252e:	89 2b       	or	r24, r25
    2530:	85 b9       	out	0x05, r24	; 5
    2532:	88 b1       	in	r24, 0x08	; 8
    2534:	f7 01       	movw	r30, r14
    2536:	90 81       	ld	r25, Z
    2538:	89 2b       	or	r24, r25
    253a:	88 b9       	out	0x08, r24	; 8
    253c:	8b b1       	in	r24, 0x0b	; 11
    253e:	f8 01       	movw	r30, r16
    2540:	90 81       	ld	r25, Z
    2542:	89 2b       	or	r24, r25
    2544:	8b b9       	out	0x0b, r24	; 11
    2546:	8a e0       	ldi	r24, 0x0A	; 10
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	0e 94 6f 11 	call	0x22de	; 0x22de <delay_us>
    254e:	94 b1       	in	r25, 0x04	; 4
    2550:	f6 01       	movw	r30, r12
    2552:	80 81       	ld	r24, Z
    2554:	80 95       	com	r24
    2556:	89 23       	and	r24, r25
    2558:	84 b9       	out	0x04, r24	; 4
    255a:	97 b1       	in	r25, 0x07	; 7
    255c:	f7 01       	movw	r30, r14
    255e:	80 81       	ld	r24, Z
    2560:	80 95       	com	r24
    2562:	89 23       	and	r24, r25
    2564:	87 b9       	out	0x07, r24	; 7
    2566:	9a b1       	in	r25, 0x0a	; 10
    2568:	f8 01       	movw	r30, r16
    256a:	80 81       	ld	r24, Z
    256c:	80 95       	com	r24
    256e:	89 23       	and	r24, r25
    2570:	8a b9       	out	0x0a, r24	; 10
    2572:	95 b1       	in	r25, 0x05	; 5
    2574:	f6 01       	movw	r30, r12
    2576:	80 81       	ld	r24, Z
    2578:	80 95       	com	r24
    257a:	89 23       	and	r24, r25
    257c:	85 b9       	out	0x05, r24	; 5
    257e:	98 b1       	in	r25, 0x08	; 8
    2580:	f7 01       	movw	r30, r14
    2582:	80 81       	ld	r24, Z
    2584:	80 95       	com	r24
    2586:	89 23       	and	r24, r25
    2588:	88 b9       	out	0x08, r24	; 8
    258a:	9b b1       	in	r25, 0x0b	; 11
    258c:	f8 01       	movw	r30, r16
    258e:	80 81       	ld	r24, Z
    2590:	80 95       	com	r24
    2592:	89 23       	and	r24, r25
    2594:	8b b9       	out	0x0b, r24	; 11
    2596:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    259a:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    259e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    25a2:	83 60       	ori	r24, 0x03	; 3
    25a4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    25a8:	82 e0       	ldi	r24, 0x02	; 2
    25aa:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    25ae:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	2e 85       	ldd	r18, Y+14	; 0x0e
    25b8:	3f 85       	ldd	r19, Y+15	; 0x0f
    25ba:	82 17       	cp	r24, r18
    25bc:	93 07       	cpc	r25, r19
    25be:	20 f5       	brcc	.+72     	; 0x2608 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    25c0:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    25c4:	2c 2d       	mov	r18, r12
    25c6:	24 1b       	sub	r18, r20
    25c8:	82 0f       	add	r24, r18
    25ca:	91 1d       	adc	r25, r1
    25cc:	03 b1       	in	r16, 0x03	; 3
    25ce:	08 11       	cpse	r16, r8
    25d0:	32 c0       	rjmp	.+100    	; 0x2636 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    25d2:	f6 b0       	in	r15, 0x06	; 6
    25d4:	f7 10       	cpse	r15, r7
    25d6:	2f c0       	rjmp	.+94     	; 0x2636 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    25d8:	29 b1       	in	r18, 0x09	; 9
    25da:	29 11       	cpse	r18, r9
    25dc:	2c c0       	rjmp	.+88     	; 0x2636 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    25de:	10 c0       	rjmp	.+32     	; 0x2600 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    25e0:	21 2f       	mov	r18, r17
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	a9 01       	movw	r20, r18
    25e6:	44 0f       	add	r20, r20
    25e8:	55 1f       	adc	r21, r21
    25ea:	f5 01       	movw	r30, r10
    25ec:	e4 0f       	add	r30, r20
    25ee:	f5 1f       	adc	r31, r21
    25f0:	60 81       	ld	r22, Z
    25f2:	71 81       	ldd	r23, Z+1	; 0x01
    25f4:	67 2b       	or	r22, r23
    25f6:	21 f1       	breq	.+72     	; 0x2640 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    25f8:	1f 5f       	subi	r17, 0xFF	; 255
    25fa:	28 85       	ldd	r18, Y+8	; 0x08
    25fc:	12 17       	cp	r17, r18
    25fe:	80 f3       	brcs	.-32     	; 0x25e0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    2600:	7f 2c       	mov	r7, r15
    2602:	80 2e       	mov	r8, r16
    2604:	4c 2d       	mov	r20, r12
    2606:	d7 cf       	rjmp	.-82     	; 0x25b6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    2608:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    260c:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	88 85       	ldd	r24, Y+8	; 0x08
    2614:	28 17       	cp	r18, r24
    2616:	30 f5       	brcc	.+76     	; 0x2664 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    2618:	f5 01       	movw	r30, r10
    261a:	e2 0f       	add	r30, r18
    261c:	f1 1d       	adc	r31, r1
    261e:	e2 0f       	add	r30, r18
    2620:	f1 1d       	adc	r31, r1
    2622:	80 81       	ld	r24, Z
    2624:	91 81       	ldd	r25, Z+1	; 0x01
    2626:	89 2b       	or	r24, r25
    2628:	21 f4       	brne	.+8      	; 0x2632 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    262a:	8e 85       	ldd	r24, Y+14	; 0x0e
    262c:	9f 85       	ldd	r25, Y+15	; 0x0f
    262e:	91 83       	std	Z+1, r25	; 0x01
    2630:	80 83       	st	Z, r24
    2632:	2f 5f       	subi	r18, 0xFF	; 255
    2634:	ee cf       	rjmp	.-36     	; 0x2612 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    2636:	03 b1       	in	r16, 0x03	; 3
    2638:	f6 b0       	in	r15, 0x06	; 6
    263a:	99 b0       	in	r9, 0x09	; 9
    263c:	10 e0       	ldi	r17, 0x00	; 0
    263e:	dd cf       	rjmp	.-70     	; 0x25fa <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    2640:	de 01       	movw	r26, r28
    2642:	a4 0f       	add	r26, r20
    2644:	b5 1f       	adc	r27, r21
    2646:	91 96       	adiw	r26, 0x21	; 33
    2648:	0d 90       	ld	r0, X+
    264a:	bc 91       	ld	r27, X
    264c:	a0 2d       	mov	r26, r0
    264e:	4c 91       	ld	r20, X
    2650:	de 01       	movw	r26, r28
    2652:	a2 0f       	add	r26, r18
    2654:	b3 1f       	adc	r27, r19
    2656:	51 96       	adiw	r26, 0x11	; 17
    2658:	2c 91       	ld	r18, X
    265a:	42 23       	and	r20, r18
    265c:	69 f6       	brne	.-102    	; 0x25f8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    265e:	91 83       	std	Z+1, r25	; 0x01
    2660:	80 83       	st	Z, r24
    2662:	ca cf       	rjmp	.-108    	; 0x25f8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    2664:	cd b7       	in	r28, 0x3d	; 61
    2666:	de b7       	in	r29, 0x3e	; 62
    2668:	ed e0       	ldi	r30, 0x0D	; 13
    266a:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__epilogue_restores__+0xa>

0000266e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    266e:	ef 92       	push	r14
    2670:	ff 92       	push	r15
    2672:	0f 93       	push	r16
    2674:	1f 93       	push	r17
    2676:	cf 93       	push	r28
    2678:	df 93       	push	r29
    267a:	fc 01       	movw	r30, r24
    267c:	9b 01       	movw	r18, r22
    267e:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2682:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2686:	47 b1       	in	r20, 0x07	; 7
    2688:	18 b1       	in	r17, 0x08	; 8
    268a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    268e:	86 fd       	sbrc	r24, 6
    2690:	fc cf       	rjmp	.-8      	; 0x268a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	90 85       	ldd	r25, Z+8	; 0x08
    2696:	89 17       	cp	r24, r25
    2698:	48 f4       	brcc	.+18     	; 0x26ac <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    269a:	d9 01       	movw	r26, r18
    269c:	a8 0f       	add	r26, r24
    269e:	b1 1d       	adc	r27, r1
    26a0:	a8 0f       	add	r26, r24
    26a2:	b1 1d       	adc	r27, r1
    26a4:	1d 92       	st	X+, r1
    26a6:	1c 92       	st	X, r1
    26a8:	8f 5f       	subi	r24, 0xFF	; 255
    26aa:	f4 cf       	rjmp	.-24     	; 0x2694 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    26ac:	97 b1       	in	r25, 0x07	; 7
    26ae:	82 a1       	ldd	r24, Z+34	; 0x22
    26b0:	80 95       	com	r24
    26b2:	89 23       	and	r24, r25
    26b4:	87 b9       	out	0x07, r24	; 7
    26b6:	98 b1       	in	r25, 0x08	; 8
    26b8:	82 a1       	ldd	r24, Z+34	; 0x22
    26ba:	80 95       	com	r24
    26bc:	89 23       	and	r24, r25
    26be:	88 b9       	out	0x08, r24	; 8
    26c0:	87 e8       	ldi	r24, 0x87	; 135
    26c2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    26c6:	e1 2c       	mov	r14, r1
    26c8:	81 a1       	ldd	r24, Z+33	; 0x21
    26ca:	e8 16       	cp	r14, r24
    26cc:	10 f0       	brcs	.+4      	; 0x26d2 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    26ce:	e1 2c       	mov	r14, r1
    26d0:	29 c0       	rjmp	.+82     	; 0x2724 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    26d2:	50 e0       	ldi	r21, 0x00	; 0
    26d4:	80 85       	ldd	r24, Z+8	; 0x08
    26d6:	58 17       	cp	r21, r24
    26d8:	18 f5       	brcc	.+70     	; 0x2720 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    26da:	a5 2f       	mov	r26, r21
    26dc:	b0 e0       	ldi	r27, 0x00	; 0
    26de:	ef 01       	movw	r28, r30
    26e0:	ca 0f       	add	r28, r26
    26e2:	db 1f       	adc	r29, r27
    26e4:	89 89       	ldd	r24, Y+17	; 0x11
    26e6:	80 64       	ori	r24, 0x40	; 64
    26e8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    26ec:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    26f0:	80 64       	ori	r24, 0x40	; 64
    26f2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    26f6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    26fa:	86 fd       	sbrc	r24, 6
    26fc:	fc cf       	rjmp	.-8      	; 0x26f6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    26fe:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    2702:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    2706:	aa 0f       	add	r26, r26
    2708:	bb 1f       	adc	r27, r27
    270a:	a2 0f       	add	r26, r18
    270c:	b3 1f       	adc	r27, r19
    270e:	8d 91       	ld	r24, X+
    2710:	9c 91       	ld	r25, X
    2712:	11 97       	sbiw	r26, 0x01	; 1
    2714:	86 0f       	add	r24, r22
    2716:	97 1f       	adc	r25, r23
    2718:	8d 93       	st	X+, r24
    271a:	9c 93       	st	X, r25
    271c:	5f 5f       	subi	r21, 0xFF	; 255
    271e:	da cf       	rjmp	.-76     	; 0x26d4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    2720:	e3 94       	inc	r14
    2722:	d2 cf       	rjmp	.-92     	; 0x26c8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    2724:	80 85       	ldd	r24, Z+8	; 0x08
    2726:	e8 16       	cp	r14, r24
    2728:	a0 f4       	brcc	.+40     	; 0x2752 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    272a:	e9 01       	movw	r28, r18
    272c:	ce 0d       	add	r28, r14
    272e:	d1 1d       	adc	r29, r1
    2730:	ce 0d       	add	r28, r14
    2732:	d1 1d       	adc	r29, r1
    2734:	61 a1       	ldd	r22, Z+33	; 0x21
    2736:	70 e0       	ldi	r23, 0x00	; 0
    2738:	cb 01       	movw	r24, r22
    273a:	95 95       	asr	r25
    273c:	87 95       	ror	r24
    273e:	a8 81       	ld	r26, Y
    2740:	b9 81       	ldd	r27, Y+1	; 0x01
    2742:	8a 0f       	add	r24, r26
    2744:	9b 1f       	adc	r25, r27
    2746:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__udivmodhi4>
    274a:	79 83       	std	Y+1, r23	; 0x01
    274c:	68 83       	st	Y, r22
    274e:	e3 94       	inc	r14
    2750:	e9 cf       	rjmp	.-46     	; 0x2724 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    2752:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2756:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    275a:	18 b9       	out	0x08, r17	; 8
    275c:	47 b9       	out	0x07, r20	; 7
    275e:	cd b7       	in	r28, 0x3d	; 61
    2760:	de b7       	in	r29, 0x3e	; 62
    2762:	e6 e0       	ldi	r30, 0x06	; 6
    2764:	0c 94 3b 17 	jmp	0x2e76	; 0x2e76 <__epilogue_restores__+0x18>

00002768 <_ZN16PololuQTRSensors4readEPjh>:
    2768:	a0 e2       	ldi	r26, 0x20	; 32
    276a:	b0 e0       	ldi	r27, 0x00	; 0
    276c:	ea eb       	ldi	r30, 0xBA	; 186
    276e:	f3 e1       	ldi	r31, 0x13	; 19
    2770:	0c 94 1e 17 	jmp	0x2e3c	; 0x2e3c <__prologue_saves__+0x16>
    2774:	8c 01       	movw	r16, r24
    2776:	7b 01       	movw	r14, r22
    2778:	d4 2e       	mov	r13, r20
    277a:	8f ef       	ldi	r24, 0xFF	; 255
    277c:	84 0f       	add	r24, r20
    277e:	82 30       	cpi	r24, 0x02	; 2
    2780:	18 f4       	brcc	.+6      	; 0x2788 <_ZN16PololuQTRSensors4readEPjh+0x20>
    2782:	c8 01       	movw	r24, r16
    2784:	0e 94 f6 11 	call	0x23ec	; 0x23ec <_ZN16PololuQTRSensors10emittersOnEv>
    2788:	d8 01       	movw	r26, r16
    278a:	50 96       	adiw	r26, 0x10	; 16
    278c:	8c 91       	ld	r24, X
    278e:	b7 01       	movw	r22, r14
    2790:	81 11       	cpse	r24, r1
    2792:	10 c0       	rjmp	.+32     	; 0x27b4 <_ZN16PololuQTRSensors4readEPjh+0x4c>
    2794:	c8 01       	movw	r24, r16
    2796:	0e 94 5f 12 	call	0x24be	; 0x24be <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    279a:	c8 01       	movw	r24, r16
    279c:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <_ZN16PololuQTRSensors11emittersOffEv>
    27a0:	b2 e0       	ldi	r27, 0x02	; 2
    27a2:	db 12       	cpse	r13, r27
    27a4:	3a c0       	rjmp	.+116    	; 0x281a <_ZN16PololuQTRSensors4readEPjh+0xb2>
    27a6:	be 01       	movw	r22, r28
    27a8:	6f 5f       	subi	r22, 0xFF	; 255
    27aa:	7f 4f       	sbci	r23, 0xFF	; 255
    27ac:	c8 01       	movw	r24, r16
    27ae:	0e 94 5f 12 	call	0x24be	; 0x24be <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    27b2:	0f c0       	rjmp	.+30     	; 0x27d2 <_ZN16PololuQTRSensors4readEPjh+0x6a>
    27b4:	c8 01       	movw	r24, r16
    27b6:	0e 94 37 13 	call	0x266e	; 0x266e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    27ba:	c8 01       	movw	r24, r16
    27bc:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <_ZN16PololuQTRSensors11emittersOffEv>
    27c0:	e2 e0       	ldi	r30, 0x02	; 2
    27c2:	de 12       	cpse	r13, r30
    27c4:	2a c0       	rjmp	.+84     	; 0x281a <_ZN16PololuQTRSensors4readEPjh+0xb2>
    27c6:	be 01       	movw	r22, r28
    27c8:	6f 5f       	subi	r22, 0xFF	; 255
    27ca:	7f 4f       	sbci	r23, 0xFF	; 255
    27cc:	c8 01       	movw	r24, r16
    27ce:	0e 94 37 13 	call	0x266e	; 0x266e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    27d2:	40 e0       	ldi	r20, 0x00	; 0
    27d4:	f8 01       	movw	r30, r16
    27d6:	80 85       	ldd	r24, Z+8	; 0x08
    27d8:	48 17       	cp	r20, r24
    27da:	f8 f4       	brcc	.+62     	; 0x281a <_ZN16PololuQTRSensors4readEPjh+0xb2>
    27dc:	84 2f       	mov	r24, r20
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	88 0f       	add	r24, r24
    27e2:	99 1f       	adc	r25, r25
    27e4:	f7 01       	movw	r30, r14
    27e6:	e8 0f       	add	r30, r24
    27e8:	f9 1f       	adc	r31, r25
    27ea:	21 e0       	ldi	r18, 0x01	; 1
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	2c 0f       	add	r18, r28
    27f0:	3d 1f       	adc	r19, r29
    27f2:	82 0f       	add	r24, r18
    27f4:	93 1f       	adc	r25, r19
    27f6:	d8 01       	movw	r26, r16
    27f8:	1e 96       	adiw	r26, 0x0e	; 14
    27fa:	2d 91       	ld	r18, X+
    27fc:	3c 91       	ld	r19, X
    27fe:	1f 97       	sbiw	r26, 0x0f	; 15
    2800:	dc 01       	movw	r26, r24
    2802:	8d 91       	ld	r24, X+
    2804:	9c 91       	ld	r25, X
    2806:	28 1b       	sub	r18, r24
    2808:	39 0b       	sbc	r19, r25
    280a:	80 81       	ld	r24, Z
    280c:	91 81       	ldd	r25, Z+1	; 0x01
    280e:	82 0f       	add	r24, r18
    2810:	93 1f       	adc	r25, r19
    2812:	91 83       	std	Z+1, r25	; 0x01
    2814:	80 83       	st	Z, r24
    2816:	4f 5f       	subi	r20, 0xFF	; 255
    2818:	dd cf       	rjmp	.-70     	; 0x27d4 <_ZN16PololuQTRSensors4readEPjh+0x6c>
    281a:	a0 96       	adiw	r28, 0x20	; 32
    281c:	e7 e0       	ldi	r30, 0x07	; 7
    281e:	0c 94 3a 17 	jmp	0x2e74	; 0x2e74 <__epilogue_restores__+0x16>

00002822 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    2822:	2f 92       	push	r2
    2824:	3f 92       	push	r3
    2826:	5f 92       	push	r5
    2828:	6f 92       	push	r6
    282a:	7f 92       	push	r7
    282c:	8f 92       	push	r8
    282e:	9f 92       	push	r9
    2830:	af 92       	push	r10
    2832:	bf 92       	push	r11
    2834:	cf 92       	push	r12
    2836:	df 92       	push	r13
    2838:	ef 92       	push	r14
    283a:	ff 92       	push	r15
    283c:	0f 93       	push	r16
    283e:	1f 93       	push	r17
    2840:	cf 93       	push	r28
    2842:	df 93       	push	r29
    2844:	cd b7       	in	r28, 0x3d	; 61
    2846:	de b7       	in	r29, 0x3e	; 62
    2848:	c0 56       	subi	r28, 0x60	; 96
    284a:	d1 09       	sbc	r29, r1
    284c:	0f b6       	in	r0, 0x3f	; 63
    284e:	f8 94       	cli
    2850:	de bf       	out	0x3e, r29	; 62
    2852:	0f be       	out	0x3f, r0	; 63
    2854:	cd bf       	out	0x3d, r28	; 61
    2856:	8c 01       	movw	r16, r24
    2858:	4b 01       	movw	r8, r22
    285a:	5a 01       	movw	r10, r20
    285c:	52 2e       	mov	r5, r18
    285e:	da 01       	movw	r26, r20
    2860:	8d 91       	ld	r24, X+
    2862:	9c 91       	ld	r25, X
    2864:	89 2b       	or	r24, r25
    2866:	31 f0       	breq	.+12     	; 0x2874 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x52>
    2868:	f4 01       	movw	r30, r8
    286a:	80 81       	ld	r24, Z
    286c:	91 81       	ldd	r25, Z+1	; 0x01
    286e:	89 2b       	or	r24, r25
    2870:	f1 f4       	brne	.+60     	; 0x28ae <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    2872:	24 c0       	rjmp	.+72     	; 0x28bc <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x9a>
    2874:	d8 01       	movw	r26, r16
    2876:	18 96       	adiw	r26, 0x08	; 8
    2878:	8c 91       	ld	r24, X
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	88 0f       	add	r24, r24
    287e:	99 1f       	adc	r25, r25
    2880:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <malloc>
    2884:	f5 01       	movw	r30, r10
    2886:	91 83       	std	Z+1, r25	; 0x01
    2888:	80 83       	st	Z, r24
    288a:	00 97       	sbiw	r24, 0x00	; 0
    288c:	09 f4       	brne	.+2      	; 0x2890 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x6e>
    288e:	b1 c0       	rjmp	.+354    	; 0x29f2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    2890:	fc 01       	movw	r30, r24
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	d8 01       	movw	r26, r16
    2898:	18 96       	adiw	r26, 0x08	; 8
    289a:	8c 91       	ld	r24, X
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	28 17       	cp	r18, r24
    28a0:	39 07       	cpc	r19, r25
    28a2:	14 f7       	brge	.-60     	; 0x2868 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x46>
    28a4:	11 92       	st	Z+, r1
    28a6:	11 92       	st	Z+, r1
    28a8:	2f 5f       	subi	r18, 0xFF	; 255
    28aa:	3f 4f       	sbci	r19, 0xFF	; 255
    28ac:	f4 cf       	rjmp	.-24     	; 0x2896 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x74>
    28ae:	e1 2c       	mov	r14, r1
    28b0:	f1 2c       	mov	r15, r1
    28b2:	6e 01       	movw	r12, r28
    28b4:	b1 e2       	ldi	r27, 0x21	; 33
    28b6:	cb 0e       	add	r12, r27
    28b8:	d1 1c       	adc	r13, r1
    28ba:	21 c0       	rjmp	.+66     	; 0x28fe <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    28bc:	f8 01       	movw	r30, r16
    28be:	80 85       	ldd	r24, Z+8	; 0x08
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	88 0f       	add	r24, r24
    28c4:	99 1f       	adc	r25, r25
    28c6:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <malloc>
    28ca:	d4 01       	movw	r26, r8
    28cc:	8d 93       	st	X+, r24
    28ce:	9c 93       	st	X, r25
    28d0:	00 97       	sbiw	r24, 0x00	; 0
    28d2:	09 f4       	brne	.+2      	; 0x28d6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb4>
    28d4:	8e c0       	rjmp	.+284    	; 0x29f2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    28d6:	fc 01       	movw	r30, r24
    28d8:	20 e0       	ldi	r18, 0x00	; 0
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	d8 01       	movw	r26, r16
    28de:	18 96       	adiw	r26, 0x08	; 8
    28e0:	8c 91       	ld	r24, X
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	28 17       	cp	r18, r24
    28e6:	39 07       	cpc	r19, r25
    28e8:	14 f7       	brge	.-60     	; 0x28ae <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    28ea:	d8 01       	movw	r26, r16
    28ec:	1e 96       	adiw	r26, 0x0e	; 14
    28ee:	8d 91       	ld	r24, X+
    28f0:	9c 91       	ld	r25, X
    28f2:	1f 97       	sbiw	r26, 0x0f	; 15
    28f4:	81 93       	st	Z+, r24
    28f6:	91 93       	st	Z+, r25
    28f8:	2f 5f       	subi	r18, 0xFF	; 255
    28fa:	3f 4f       	sbci	r19, 0xFF	; 255
    28fc:	ef cf       	rjmp	.-34     	; 0x28dc <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xba>
    28fe:	45 2d       	mov	r20, r5
    2900:	be 01       	movw	r22, r28
    2902:	6f 5b       	subi	r22, 0xBF	; 191
    2904:	7f 4f       	sbci	r23, 0xFF	; 255
    2906:	c8 01       	movw	r24, r16
    2908:	0e 94 b4 13 	call	0x2768	; 0x2768 <_ZN16PololuQTRSensors4readEPjh>
    290c:	f8 01       	movw	r30, r16
    290e:	60 84       	ldd	r6, Z+8	; 0x08
    2910:	71 2c       	mov	r7, r1
    2912:	fe 01       	movw	r30, r28
    2914:	ef 5b       	subi	r30, 0xBF	; 191
    2916:	ff 4f       	sbci	r31, 0xFF	; 255
    2918:	c6 01       	movw	r24, r12
    291a:	9e 01       	movw	r18, r28
    291c:	2f 5f       	subi	r18, 0xFF	; 255
    291e:	3f 4f       	sbci	r19, 0xFF	; 255
    2920:	19 01       	movw	r2, r18
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	26 15       	cp	r18, r6
    2928:	37 05       	cpc	r19, r7
    292a:	4c f5       	brge	.+82     	; 0x297e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x15c>
    292c:	e1 14       	cp	r14, r1
    292e:	f1 04       	cpc	r15, r1
    2930:	89 f0       	breq	.+34     	; 0x2954 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    2932:	dc 01       	movw	r26, r24
    2934:	6d 91       	ld	r22, X+
    2936:	7c 91       	ld	r23, X
    2938:	40 81       	ld	r20, Z
    293a:	51 81       	ldd	r21, Z+1	; 0x01
    293c:	64 17       	cp	r22, r20
    293e:	75 07       	cpc	r23, r21
    2940:	48 f0       	brcs	.+18     	; 0x2954 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    2942:	d1 01       	movw	r26, r2
    2944:	6d 91       	ld	r22, X+
    2946:	7c 91       	ld	r23, X
    2948:	40 81       	ld	r20, Z
    294a:	51 81       	ldd	r21, Z+1	; 0x01
    294c:	46 17       	cp	r20, r22
    294e:	57 07       	cpc	r21, r23
    2950:	48 f0       	brcs	.+18     	; 0x2964 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x142>
    2952:	0d c0       	rjmp	.+26     	; 0x296e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x14c>
    2954:	40 81       	ld	r20, Z
    2956:	51 81       	ldd	r21, Z+1	; 0x01
    2958:	dc 01       	movw	r26, r24
    295a:	4d 93       	st	X+, r20
    295c:	5c 93       	st	X, r21
    295e:	e1 14       	cp	r14, r1
    2960:	f1 04       	cpc	r15, r1
    2962:	79 f7       	brne	.-34     	; 0x2942 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x120>
    2964:	40 81       	ld	r20, Z
    2966:	51 81       	ldd	r21, Z+1	; 0x01
    2968:	d1 01       	movw	r26, r2
    296a:	4d 93       	st	X+, r20
    296c:	5c 93       	st	X, r21
    296e:	2f 5f       	subi	r18, 0xFF	; 255
    2970:	3f 4f       	sbci	r19, 0xFF	; 255
    2972:	b2 e0       	ldi	r27, 0x02	; 2
    2974:	2b 0e       	add	r2, r27
    2976:	31 1c       	adc	r3, r1
    2978:	32 96       	adiw	r30, 0x02	; 2
    297a:	02 96       	adiw	r24, 0x02	; 2
    297c:	d4 cf       	rjmp	.-88     	; 0x2926 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x104>
    297e:	ef ef       	ldi	r30, 0xFF	; 255
    2980:	ee 1a       	sub	r14, r30
    2982:	fe 0a       	sbc	r15, r30
    2984:	fa e0       	ldi	r31, 0x0A	; 10
    2986:	ef 16       	cp	r14, r31
    2988:	f1 04       	cpc	r15, r1
    298a:	09 f0       	breq	.+2      	; 0x298e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x16c>
    298c:	b8 cf       	rjmp	.-144    	; 0x28fe <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    298e:	9e 01       	movw	r18, r28
    2990:	2f 5f       	subi	r18, 0xFF	; 255
    2992:	3f 4f       	sbci	r19, 0xFF	; 255
    2994:	79 01       	movw	r14, r18
    2996:	36 01       	movw	r6, r12
    2998:	80 e0       	ldi	r24, 0x00	; 0
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	f8 01       	movw	r30, r16
    299e:	20 85       	ldd	r18, Z+8	; 0x08
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	82 17       	cp	r24, r18
    29a4:	93 07       	cpc	r25, r19
    29a6:	2c f5       	brge	.+74     	; 0x29f2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    29a8:	d7 01       	movw	r26, r14
    29aa:	2d 91       	ld	r18, X+
    29ac:	3d 91       	ld	r19, X+
    29ae:	7d 01       	movw	r14, r26
    29b0:	b3 01       	movw	r22, r6
    29b2:	6c 19       	sub	r22, r12
    29b4:	7d 09       	sbc	r23, r13
    29b6:	d5 01       	movw	r26, r10
    29b8:	ed 91       	ld	r30, X+
    29ba:	fc 91       	ld	r31, X
    29bc:	e6 0f       	add	r30, r22
    29be:	f7 1f       	adc	r31, r23
    29c0:	40 81       	ld	r20, Z
    29c2:	51 81       	ldd	r21, Z+1	; 0x01
    29c4:	42 17       	cp	r20, r18
    29c6:	53 07       	cpc	r21, r19
    29c8:	10 f4       	brcc	.+4      	; 0x29ce <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1ac>
    29ca:	31 83       	std	Z+1, r19	; 0x01
    29cc:	20 83       	st	Z, r18
    29ce:	f3 01       	movw	r30, r6
    29d0:	21 91       	ld	r18, Z+
    29d2:	31 91       	ld	r19, Z+
    29d4:	3f 01       	movw	r6, r30
    29d6:	d4 01       	movw	r26, r8
    29d8:	ed 91       	ld	r30, X+
    29da:	fc 91       	ld	r31, X
    29dc:	e6 0f       	add	r30, r22
    29de:	f7 1f       	adc	r31, r23
    29e0:	40 81       	ld	r20, Z
    29e2:	51 81       	ldd	r21, Z+1	; 0x01
    29e4:	24 17       	cp	r18, r20
    29e6:	35 07       	cpc	r19, r21
    29e8:	10 f4       	brcc	.+4      	; 0x29ee <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1cc>
    29ea:	31 83       	std	Z+1, r19	; 0x01
    29ec:	20 83       	st	Z, r18
    29ee:	01 96       	adiw	r24, 0x01	; 1
    29f0:	d5 cf       	rjmp	.-86     	; 0x299c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17a>
    29f2:	c0 5a       	subi	r28, 0xA0	; 160
    29f4:	df 4f       	sbci	r29, 0xFF	; 255
    29f6:	0f b6       	in	r0, 0x3f	; 63
    29f8:	f8 94       	cli
    29fa:	de bf       	out	0x3e, r29	; 62
    29fc:	0f be       	out	0x3f, r0	; 63
    29fe:	cd bf       	out	0x3d, r28	; 61
    2a00:	df 91       	pop	r29
    2a02:	cf 91       	pop	r28
    2a04:	1f 91       	pop	r17
    2a06:	0f 91       	pop	r16
    2a08:	ff 90       	pop	r15
    2a0a:	ef 90       	pop	r14
    2a0c:	df 90       	pop	r13
    2a0e:	cf 90       	pop	r12
    2a10:	bf 90       	pop	r11
    2a12:	af 90       	pop	r10
    2a14:	9f 90       	pop	r9
    2a16:	8f 90       	pop	r8
    2a18:	7f 90       	pop	r7
    2a1a:	6f 90       	pop	r6
    2a1c:	5f 90       	pop	r5
    2a1e:	3f 90       	pop	r3
    2a20:	2f 90       	pop	r2
    2a22:	08 95       	ret

00002a24 <_ZN16PololuQTRSensors9calibrateEh>:
    2a24:	1f 93       	push	r17
    2a26:	cf 93       	push	r28
    2a28:	df 93       	push	r29
    2a2a:	ec 01       	movw	r28, r24
    2a2c:	16 2f       	mov	r17, r22
    2a2e:	8f ef       	ldi	r24, 0xFF	; 255
    2a30:	86 0f       	add	r24, r22
    2a32:	82 30       	cpi	r24, 0x02	; 2
    2a34:	18 f0       	brcs	.+6      	; 0x2a3c <_ZN16PololuQTRSensors9calibrateEh+0x18>
    2a36:	66 23       	and	r22, r22
    2a38:	59 f0       	breq	.+22     	; 0x2a50 <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    2a3a:	14 c0       	rjmp	.+40     	; 0x2a64 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    2a3c:	21 e0       	ldi	r18, 0x01	; 1
    2a3e:	ae 01       	movw	r20, r28
    2a40:	4e 5f       	subi	r20, 0xFE	; 254
    2a42:	5f 4f       	sbci	r21, 0xFF	; 255
    2a44:	be 01       	movw	r22, r28
    2a46:	ce 01       	movw	r24, r28
    2a48:	0e 94 11 14 	call	0x2822	; 0x2822 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    2a4c:	12 30       	cpi	r17, 0x02	; 2
    2a4e:	51 f4       	brne	.+20     	; 0x2a64 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    2a50:	ae 01       	movw	r20, r28
    2a52:	4a 5f       	subi	r20, 0xFA	; 250
    2a54:	5f 4f       	sbci	r21, 0xFF	; 255
    2a56:	be 01       	movw	r22, r28
    2a58:	6c 5f       	subi	r22, 0xFC	; 252
    2a5a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	ce 01       	movw	r24, r28
    2a60:	0e 94 11 14 	call	0x2822	; 0x2822 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    2a64:	df 91       	pop	r29
    2a66:	cf 91       	pop	r28
    2a68:	1f 91       	pop	r17
    2a6a:	08 95       	ret

00002a6c <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    2a6c:	a0 e0       	ldi	r26, 0x00	; 0
    2a6e:	b0 e0       	ldi	r27, 0x00	; 0
    2a70:	ec e3       	ldi	r30, 0x3C	; 60
    2a72:	f5 e1       	ldi	r31, 0x15	; 21
    2a74:	0c 94 1c 17 	jmp	0x2e38	; 0x2e38 <__prologue_saves__+0x12>
    2a78:	ec 01       	movw	r28, r24
    2a7a:	8b 01       	movw	r16, r22
    2a7c:	b4 2e       	mov	r11, r20
    2a7e:	84 2f       	mov	r24, r20
    2a80:	8d 7f       	andi	r24, 0xFD	; 253
    2a82:	51 f4       	brne	.+20     	; 0x2a98 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    2a84:	8c 81       	ldd	r24, Y+4	; 0x04
    2a86:	9d 81       	ldd	r25, Y+5	; 0x05
    2a88:	89 2b       	or	r24, r25
    2a8a:	09 f4       	brne	.+2      	; 0x2a8e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x22>
    2a8c:	97 c0       	rjmp	.+302    	; 0x2bbc <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2a8e:	8e 81       	ldd	r24, Y+6	; 0x06
    2a90:	9f 81       	ldd	r25, Y+7	; 0x07
    2a92:	89 2b       	or	r24, r25
    2a94:	09 f4       	brne	.+2      	; 0x2a98 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    2a96:	92 c0       	rjmp	.+292    	; 0x2bbc <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2a98:	8f ef       	ldi	r24, 0xFF	; 255
    2a9a:	8b 0d       	add	r24, r11
    2a9c:	82 30       	cpi	r24, 0x02	; 2
    2a9e:	50 f4       	brcc	.+20     	; 0x2ab4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    2aa0:	88 81       	ld	r24, Y
    2aa2:	99 81       	ldd	r25, Y+1	; 0x01
    2aa4:	89 2b       	or	r24, r25
    2aa6:	09 f4       	brne	.+2      	; 0x2aaa <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3e>
    2aa8:	89 c0       	rjmp	.+274    	; 0x2bbc <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    2aac:	9b 81       	ldd	r25, Y+3	; 0x03
    2aae:	89 2b       	or	r24, r25
    2ab0:	09 f4       	brne	.+2      	; 0x2ab4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    2ab2:	84 c0       	rjmp	.+264    	; 0x2bbc <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2ab4:	4b 2d       	mov	r20, r11
    2ab6:	b8 01       	movw	r22, r16
    2ab8:	ce 01       	movw	r24, r28
    2aba:	0e 94 b4 13 	call	0x2768	; 0x2768 <_ZN16PololuQTRSensors4readEPjh>
    2abe:	78 01       	movw	r14, r16
    2ac0:	00 e0       	ldi	r16, 0x00	; 0
    2ac2:	10 e0       	ldi	r17, 0x00	; 0
    2ac4:	c1 2c       	mov	r12, r1
    2ac6:	d1 2c       	mov	r13, r1
    2ac8:	88 85       	ldd	r24, Y+8	; 0x08
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	c8 16       	cp	r12, r24
    2ace:	d9 06       	cpc	r13, r25
    2ad0:	0c f0       	brlt	.+2      	; 0x2ad4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x68>
    2ad2:	74 c0       	rjmp	.+232    	; 0x2bbc <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	b8 12       	cpse	r11, r24
    2ad8:	0a c0       	rjmp	.+20     	; 0x2aee <_ZN16PololuQTRSensors14readCalibratedEPjh+0x82>
    2ada:	ea 81       	ldd	r30, Y+2	; 0x02
    2adc:	fb 81       	ldd	r31, Y+3	; 0x03
    2ade:	e0 0f       	add	r30, r16
    2ae0:	f1 1f       	adc	r31, r17
    2ae2:	01 90       	ld	r0, Z+
    2ae4:	f0 81       	ld	r31, Z
    2ae6:	e0 2d       	mov	r30, r0
    2ae8:	a8 81       	ld	r26, Y
    2aea:	b9 81       	ldd	r27, Y+1	; 0x01
    2aec:	0d c0       	rjmp	.+26     	; 0x2b08 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x9c>
    2aee:	8c 81       	ldd	r24, Y+4	; 0x04
    2af0:	9d 81       	ldd	r25, Y+5	; 0x05
    2af2:	2e 81       	ldd	r18, Y+6	; 0x06
    2af4:	3f 81       	ldd	r19, Y+7	; 0x07
    2af6:	b1 10       	cpse	r11, r1
    2af8:	0c c0       	rjmp	.+24     	; 0x2b12 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    2afa:	f9 01       	movw	r30, r18
    2afc:	e0 0f       	add	r30, r16
    2afe:	f1 1f       	adc	r31, r17
    2b00:	01 90       	ld	r0, Z+
    2b02:	f0 81       	ld	r31, Z
    2b04:	e0 2d       	mov	r30, r0
    2b06:	dc 01       	movw	r26, r24
    2b08:	a0 0f       	add	r26, r16
    2b0a:	b1 1f       	adc	r27, r17
    2b0c:	8d 91       	ld	r24, X+
    2b0e:	9c 91       	ld	r25, X
    2b10:	28 c0       	rjmp	.+80     	; 0x2b62 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    2b12:	fc 01       	movw	r30, r24
    2b14:	e0 0f       	add	r30, r16
    2b16:	f1 1f       	adc	r31, r17
    2b18:	40 81       	ld	r20, Z
    2b1a:	51 81       	ldd	r21, Z+1	; 0x01
    2b1c:	e8 81       	ld	r30, Y
    2b1e:	f9 81       	ldd	r31, Y+1	; 0x01
    2b20:	e0 0f       	add	r30, r16
    2b22:	f1 1f       	adc	r31, r17
    2b24:	80 81       	ld	r24, Z
    2b26:	91 81       	ldd	r25, Z+1	; 0x01
    2b28:	ee 85       	ldd	r30, Y+14	; 0x0e
    2b2a:	ff 85       	ldd	r31, Y+15	; 0x0f
    2b2c:	48 17       	cp	r20, r24
    2b2e:	59 07       	cpc	r21, r25
    2b30:	10 f4       	brcc	.+4      	; 0x2b36 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xca>
    2b32:	cf 01       	movw	r24, r30
    2b34:	04 c0       	rjmp	.+8      	; 0x2b3e <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd2>
    2b36:	8e 0f       	add	r24, r30
    2b38:	9f 1f       	adc	r25, r31
    2b3a:	84 1b       	sub	r24, r20
    2b3c:	95 0b       	sbc	r25, r21
    2b3e:	d9 01       	movw	r26, r18
    2b40:	a0 0f       	add	r26, r16
    2b42:	b1 1f       	adc	r27, r17
    2b44:	2d 91       	ld	r18, X+
    2b46:	3c 91       	ld	r19, X
    2b48:	aa 81       	ldd	r26, Y+2	; 0x02
    2b4a:	bb 81       	ldd	r27, Y+3	; 0x03
    2b4c:	a0 0f       	add	r26, r16
    2b4e:	b1 1f       	adc	r27, r17
    2b50:	4d 91       	ld	r20, X+
    2b52:	5c 91       	ld	r21, X
    2b54:	24 17       	cp	r18, r20
    2b56:	35 07       	cpc	r19, r21
    2b58:	20 f0       	brcs	.+8      	; 0x2b62 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    2b5a:	e4 0f       	add	r30, r20
    2b5c:	f5 1f       	adc	r31, r21
    2b5e:	e2 1b       	sub	r30, r18
    2b60:	f3 0b       	sbc	r31, r19
    2b62:	e8 1b       	sub	r30, r24
    2b64:	f9 0b       	sbc	r31, r25
    2b66:	a9 f0       	breq	.+42     	; 0x2b92 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x126>
    2b68:	d7 01       	movw	r26, r14
    2b6a:	2d 91       	ld	r18, X+
    2b6c:	3c 91       	ld	r19, X
    2b6e:	40 e0       	ldi	r20, 0x00	; 0
    2b70:	50 e0       	ldi	r21, 0x00	; 0
    2b72:	28 1b       	sub	r18, r24
    2b74:	39 0b       	sbc	r19, r25
    2b76:	41 09       	sbc	r20, r1
    2b78:	51 09       	sbc	r21, r1
    2b7a:	a8 ee       	ldi	r26, 0xE8	; 232
    2b7c:	b3 e0       	ldi	r27, 0x03	; 3
    2b7e:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__muluhisi3>
    2b82:	9f 01       	movw	r18, r30
    2b84:	40 e0       	ldi	r20, 0x00	; 0
    2b86:	50 e0       	ldi	r21, 0x00	; 0
    2b88:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__divmodsi4>
    2b8c:	37 fd       	sbrc	r19, 7
    2b8e:	0a c0       	rjmp	.+20     	; 0x2ba4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x138>
    2b90:	02 c0       	rjmp	.+4      	; 0x2b96 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x12a>
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	29 3e       	cpi	r18, 0xE9	; 233
    2b98:	b3 e0       	ldi	r27, 0x03	; 3
    2b9a:	3b 07       	cpc	r19, r27
    2b9c:	2c f0       	brlt	.+10     	; 0x2ba8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    2b9e:	28 ee       	ldi	r18, 0xE8	; 232
    2ba0:	33 e0       	ldi	r19, 0x03	; 3
    2ba2:	02 c0       	rjmp	.+4      	; 0x2ba8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	f7 01       	movw	r30, r14
    2baa:	21 93       	st	Z+, r18
    2bac:	31 93       	st	Z+, r19
    2bae:	7f 01       	movw	r14, r30
    2bb0:	ff ef       	ldi	r31, 0xFF	; 255
    2bb2:	cf 1a       	sub	r12, r31
    2bb4:	df 0a       	sbc	r13, r31
    2bb6:	0e 5f       	subi	r16, 0xFE	; 254
    2bb8:	1f 4f       	sbci	r17, 0xFF	; 255
    2bba:	86 cf       	rjmp	.-244    	; 0x2ac8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x5c>
    2bbc:	cd b7       	in	r28, 0x3d	; 61
    2bbe:	de b7       	in	r29, 0x3e	; 62
    2bc0:	e9 e0       	ldi	r30, 0x09	; 9
    2bc2:	0c 94 38 17 	jmp	0x2e70	; 0x2e70 <__epilogue_restores__+0x12>

00002bc6 <_ZN16PololuQTRSensors8readLineEPjhh>:
    2bc6:	a0 e0       	ldi	r26, 0x00	; 0
    2bc8:	b0 e0       	ldi	r27, 0x00	; 0
    2bca:	e9 ee       	ldi	r30, 0xE9	; 233
    2bcc:	f5 e1       	ldi	r31, 0x15	; 21
    2bce:	0c 94 13 17 	jmp	0x2e26	; 0x2e26 <__prologue_saves__>
    2bd2:	ec 01       	movw	r28, r24
    2bd4:	8b 01       	movw	r16, r22
    2bd6:	82 2e       	mov	r8, r18
    2bd8:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <_ZN16PololuQTRSensors14readCalibratedEPjh>
    2bdc:	28 84       	ldd	r2, Y+8	; 0x08
    2bde:	e8 01       	movw	r28, r16
    2be0:	41 2c       	mov	r4, r1
    2be2:	51 2c       	mov	r5, r1
    2be4:	32 01       	movw	r6, r4
    2be6:	00 e0       	ldi	r16, 0x00	; 0
    2be8:	10 e0       	ldi	r17, 0x00	; 0
    2bea:	c1 2c       	mov	r12, r1
    2bec:	d1 2c       	mov	r13, r1
    2bee:	76 01       	movw	r14, r12
    2bf0:	31 2c       	mov	r3, r1
    2bf2:	91 2c       	mov	r9, r1
    2bf4:	58 ee       	ldi	r21, 0xE8	; 232
    2bf6:	a5 2e       	mov	r10, r21
    2bf8:	53 e0       	ldi	r21, 0x03	; 3
    2bfa:	b5 2e       	mov	r11, r21
    2bfc:	92 14       	cp	r9, r2
    2bfe:	21 f1       	breq	.+72     	; 0x2c48 <_ZN16PololuQTRSensors8readLineEPjhh+0x82>
    2c00:	e9 91       	ld	r30, Y+
    2c02:	f9 91       	ld	r31, Y+
    2c04:	88 20       	and	r8, r8
    2c06:	21 f0       	breq	.+8      	; 0x2c10 <_ZN16PololuQTRSensors8readLineEPjhh+0x4a>
    2c08:	c5 01       	movw	r24, r10
    2c0a:	8e 1b       	sub	r24, r30
    2c0c:	9f 0b       	sbc	r25, r31
    2c0e:	fc 01       	movw	r30, r24
    2c10:	e9 3c       	cpi	r30, 0xC9	; 201
    2c12:	f1 05       	cpc	r31, r1
    2c14:	24 f4       	brge	.+8      	; 0x2c1e <_ZN16PololuQTRSensors8readLineEPjhh+0x58>
    2c16:	e3 33       	cpi	r30, 0x33	; 51
    2c18:	f1 05       	cpc	r31, r1
    2c1a:	74 f0       	brlt	.+28     	; 0x2c38 <_ZN16PololuQTRSensors8readLineEPjhh+0x72>
    2c1c:	02 c0       	rjmp	.+4      	; 0x2c22 <_ZN16PololuQTRSensors8readLineEPjhh+0x5c>
    2c1e:	33 24       	eor	r3, r3
    2c20:	33 94       	inc	r3
    2c22:	df 01       	movw	r26, r30
    2c24:	a3 01       	movw	r20, r6
    2c26:	92 01       	movw	r18, r4
    2c28:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <__mulshisi3>
    2c2c:	c6 0e       	add	r12, r22
    2c2e:	d7 1e       	adc	r13, r23
    2c30:	e8 1e       	adc	r14, r24
    2c32:	f9 1e       	adc	r15, r25
    2c34:	0e 0f       	add	r16, r30
    2c36:	1f 1f       	adc	r17, r31
    2c38:	93 94       	inc	r9
    2c3a:	98 ee       	ldi	r25, 0xE8	; 232
    2c3c:	49 0e       	add	r4, r25
    2c3e:	93 e0       	ldi	r25, 0x03	; 3
    2c40:	59 1e       	adc	r5, r25
    2c42:	61 1c       	adc	r6, r1
    2c44:	71 1c       	adc	r7, r1
    2c46:	da cf       	rjmp	.-76     	; 0x2bfc <_ZN16PololuQTRSensors8readLineEPjhh+0x36>
    2c48:	31 10       	cpse	r3, r1
    2c4a:	1e c0       	rjmp	.+60     	; 0x2c88 <_ZN16PololuQTRSensors8readLineEPjhh+0xc2>
    2c4c:	49 2d       	mov	r20, r9
    2c4e:	50 e0       	ldi	r21, 0x00	; 0
    2c50:	41 50       	subi	r20, 0x01	; 1
    2c52:	51 09       	sbc	r21, r1
    2c54:	24 ef       	ldi	r18, 0xF4	; 244
    2c56:	31 e0       	ldi	r19, 0x01	; 1
    2c58:	42 9f       	mul	r20, r18
    2c5a:	c0 01       	movw	r24, r0
    2c5c:	43 9f       	mul	r20, r19
    2c5e:	90 0d       	add	r25, r0
    2c60:	52 9f       	mul	r21, r18
    2c62:	90 0d       	add	r25, r0
    2c64:	11 24       	eor	r1, r1
    2c66:	20 91 f3 01 	lds	r18, 0x01F3	; 0x8001f3 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    2c6a:	30 91 f4 01 	lds	r19, 0x01F4	; 0x8001f4 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    2c6e:	28 17       	cp	r18, r24
    2c70:	39 07       	cpc	r19, r25
    2c72:	b4 f0       	brlt	.+44     	; 0x2ca0 <_ZN16PololuQTRSensors8readLineEPjhh+0xda>
    2c74:	88 ee       	ldi	r24, 0xE8	; 232
    2c76:	93 e0       	ldi	r25, 0x03	; 3
    2c78:	48 9f       	mul	r20, r24
    2c7a:	90 01       	movw	r18, r0
    2c7c:	49 9f       	mul	r20, r25
    2c7e:	30 0d       	add	r19, r0
    2c80:	58 9f       	mul	r21, r24
    2c82:	30 0d       	add	r19, r0
    2c84:	11 24       	eor	r1, r1
    2c86:	0e c0       	rjmp	.+28     	; 0x2ca4 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    2c88:	98 01       	movw	r18, r16
    2c8a:	40 e0       	ldi	r20, 0x00	; 0
    2c8c:	50 e0       	ldi	r21, 0x00	; 0
    2c8e:	c7 01       	movw	r24, r14
    2c90:	b6 01       	movw	r22, r12
    2c92:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <__udivmodsi4>
    2c96:	30 93 f4 01 	sts	0x01F4, r19	; 0x8001f4 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    2c9a:	20 93 f3 01 	sts	0x01F3, r18	; 0x8001f3 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    2c9e:	02 c0       	rjmp	.+4      	; 0x2ca4 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    2ca0:	20 e0       	ldi	r18, 0x00	; 0
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	c9 01       	movw	r24, r18
    2ca6:	cd b7       	in	r28, 0x3d	; 61
    2ca8:	de b7       	in	r29, 0x3e	; 62
    2caa:	e2 e1       	ldi	r30, 0x12	; 18
    2cac:	0c 94 2f 17 	jmp	0x2e5e	; 0x2e5e <__epilogue_restores__>

00002cb0 <_ZN16PololuQTRSensorsD1Ev>:
    2cb0:	cf 93       	push	r28
    2cb2:	df 93       	push	r29
    2cb4:	ec 01       	movw	r28, r24
    2cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb8:	9b 81       	ldd	r25, Y+3	; 0x03
    2cba:	00 97       	sbiw	r24, 0x00	; 0
    2cbc:	11 f0       	breq	.+4      	; 0x2cc2 <_ZN16PololuQTRSensorsD1Ev+0x12>
    2cbe:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <free>
    2cc2:	8e 81       	ldd	r24, Y+6	; 0x06
    2cc4:	9f 81       	ldd	r25, Y+7	; 0x07
    2cc6:	00 97       	sbiw	r24, 0x00	; 0
    2cc8:	11 f0       	breq	.+4      	; 0x2cce <_ZN16PololuQTRSensorsD1Ev+0x1e>
    2cca:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <free>
    2cce:	88 81       	ld	r24, Y
    2cd0:	99 81       	ldd	r25, Y+1	; 0x01
    2cd2:	00 97       	sbiw	r24, 0x00	; 0
    2cd4:	11 f0       	breq	.+4      	; 0x2cda <_ZN16PololuQTRSensorsD1Ev+0x2a>
    2cd6:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <free>
    2cda:	8c 81       	ldd	r24, Y+4	; 0x04
    2cdc:	9d 81       	ldd	r25, Y+5	; 0x05
    2cde:	00 97       	sbiw	r24, 0x00	; 0
    2ce0:	11 f0       	breq	.+4      	; 0x2ce6 <_ZN16PololuQTRSensorsD1Ev+0x36>
    2ce2:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <free>
    2ce6:	df 91       	pop	r29
    2ce8:	cf 91       	pop	r28
    2cea:	08 95       	ret

00002cec <__udivmodqi4>:
    2cec:	99 1b       	sub	r25, r25
    2cee:	79 e0       	ldi	r23, 0x09	; 9
    2cf0:	04 c0       	rjmp	.+8      	; 0x2cfa <__udivmodqi4_ep>

00002cf2 <__udivmodqi4_loop>:
    2cf2:	99 1f       	adc	r25, r25
    2cf4:	96 17       	cp	r25, r22
    2cf6:	08 f0       	brcs	.+2      	; 0x2cfa <__udivmodqi4_ep>
    2cf8:	96 1b       	sub	r25, r22

00002cfa <__udivmodqi4_ep>:
    2cfa:	88 1f       	adc	r24, r24
    2cfc:	7a 95       	dec	r23
    2cfe:	c9 f7       	brne	.-14     	; 0x2cf2 <__udivmodqi4_loop>
    2d00:	80 95       	com	r24
    2d02:	08 95       	ret

00002d04 <__udivmodhi4>:
    2d04:	aa 1b       	sub	r26, r26
    2d06:	bb 1b       	sub	r27, r27
    2d08:	51 e1       	ldi	r21, 0x11	; 17
    2d0a:	07 c0       	rjmp	.+14     	; 0x2d1a <__udivmodhi4_ep>

00002d0c <__udivmodhi4_loop>:
    2d0c:	aa 1f       	adc	r26, r26
    2d0e:	bb 1f       	adc	r27, r27
    2d10:	a6 17       	cp	r26, r22
    2d12:	b7 07       	cpc	r27, r23
    2d14:	10 f0       	brcs	.+4      	; 0x2d1a <__udivmodhi4_ep>
    2d16:	a6 1b       	sub	r26, r22
    2d18:	b7 0b       	sbc	r27, r23

00002d1a <__udivmodhi4_ep>:
    2d1a:	88 1f       	adc	r24, r24
    2d1c:	99 1f       	adc	r25, r25
    2d1e:	5a 95       	dec	r21
    2d20:	a9 f7       	brne	.-22     	; 0x2d0c <__udivmodhi4_loop>
    2d22:	80 95       	com	r24
    2d24:	90 95       	com	r25
    2d26:	bc 01       	movw	r22, r24
    2d28:	cd 01       	movw	r24, r26
    2d2a:	08 95       	ret

00002d2c <__divmodhi4>:
    2d2c:	97 fb       	bst	r25, 7
    2d2e:	07 2e       	mov	r0, r23
    2d30:	16 f4       	brtc	.+4      	; 0x2d36 <__divmodhi4+0xa>
    2d32:	00 94       	com	r0
    2d34:	07 d0       	rcall	.+14     	; 0x2d44 <__divmodhi4_neg1>
    2d36:	77 fd       	sbrc	r23, 7
    2d38:	09 d0       	rcall	.+18     	; 0x2d4c <__divmodhi4_neg2>
    2d3a:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__udivmodhi4>
    2d3e:	07 fc       	sbrc	r0, 7
    2d40:	05 d0       	rcall	.+10     	; 0x2d4c <__divmodhi4_neg2>
    2d42:	3e f4       	brtc	.+14     	; 0x2d52 <__divmodhi4_exit>

00002d44 <__divmodhi4_neg1>:
    2d44:	90 95       	com	r25
    2d46:	81 95       	neg	r24
    2d48:	9f 4f       	sbci	r25, 0xFF	; 255
    2d4a:	08 95       	ret

00002d4c <__divmodhi4_neg2>:
    2d4c:	70 95       	com	r23
    2d4e:	61 95       	neg	r22
    2d50:	7f 4f       	sbci	r23, 0xFF	; 255

00002d52 <__divmodhi4_exit>:
    2d52:	08 95       	ret

00002d54 <__udivmodsi4>:
    2d54:	a1 e2       	ldi	r26, 0x21	; 33
    2d56:	1a 2e       	mov	r1, r26
    2d58:	aa 1b       	sub	r26, r26
    2d5a:	bb 1b       	sub	r27, r27
    2d5c:	fd 01       	movw	r30, r26
    2d5e:	0d c0       	rjmp	.+26     	; 0x2d7a <__udivmodsi4_ep>

00002d60 <__udivmodsi4_loop>:
    2d60:	aa 1f       	adc	r26, r26
    2d62:	bb 1f       	adc	r27, r27
    2d64:	ee 1f       	adc	r30, r30
    2d66:	ff 1f       	adc	r31, r31
    2d68:	a2 17       	cp	r26, r18
    2d6a:	b3 07       	cpc	r27, r19
    2d6c:	e4 07       	cpc	r30, r20
    2d6e:	f5 07       	cpc	r31, r21
    2d70:	20 f0       	brcs	.+8      	; 0x2d7a <__udivmodsi4_ep>
    2d72:	a2 1b       	sub	r26, r18
    2d74:	b3 0b       	sbc	r27, r19
    2d76:	e4 0b       	sbc	r30, r20
    2d78:	f5 0b       	sbc	r31, r21

00002d7a <__udivmodsi4_ep>:
    2d7a:	66 1f       	adc	r22, r22
    2d7c:	77 1f       	adc	r23, r23
    2d7e:	88 1f       	adc	r24, r24
    2d80:	99 1f       	adc	r25, r25
    2d82:	1a 94       	dec	r1
    2d84:	69 f7       	brne	.-38     	; 0x2d60 <__udivmodsi4_loop>
    2d86:	60 95       	com	r22
    2d88:	70 95       	com	r23
    2d8a:	80 95       	com	r24
    2d8c:	90 95       	com	r25
    2d8e:	9b 01       	movw	r18, r22
    2d90:	ac 01       	movw	r20, r24
    2d92:	bd 01       	movw	r22, r26
    2d94:	cf 01       	movw	r24, r30
    2d96:	08 95       	ret

00002d98 <__divmodsi4>:
    2d98:	05 2e       	mov	r0, r21
    2d9a:	97 fb       	bst	r25, 7
    2d9c:	1e f4       	brtc	.+6      	; 0x2da4 <__divmodsi4+0xc>
    2d9e:	00 94       	com	r0
    2da0:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <__negsi2>
    2da4:	57 fd       	sbrc	r21, 7
    2da6:	07 d0       	rcall	.+14     	; 0x2db6 <__divmodsi4_neg2>
    2da8:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <__udivmodsi4>
    2dac:	07 fc       	sbrc	r0, 7
    2dae:	03 d0       	rcall	.+6      	; 0x2db6 <__divmodsi4_neg2>
    2db0:	4e f4       	brtc	.+18     	; 0x2dc4 <__divmodsi4_exit>
    2db2:	0c 94 e3 16 	jmp	0x2dc6	; 0x2dc6 <__negsi2>

00002db6 <__divmodsi4_neg2>:
    2db6:	50 95       	com	r21
    2db8:	40 95       	com	r20
    2dba:	30 95       	com	r19
    2dbc:	21 95       	neg	r18
    2dbe:	3f 4f       	sbci	r19, 0xFF	; 255
    2dc0:	4f 4f       	sbci	r20, 0xFF	; 255
    2dc2:	5f 4f       	sbci	r21, 0xFF	; 255

00002dc4 <__divmodsi4_exit>:
    2dc4:	08 95       	ret

00002dc6 <__negsi2>:
    2dc6:	90 95       	com	r25
    2dc8:	80 95       	com	r24
    2dca:	70 95       	com	r23
    2dcc:	61 95       	neg	r22
    2dce:	7f 4f       	sbci	r23, 0xFF	; 255
    2dd0:	8f 4f       	sbci	r24, 0xFF	; 255
    2dd2:	9f 4f       	sbci	r25, 0xFF	; 255
    2dd4:	08 95       	ret

00002dd6 <__tablejump2__>:
    2dd6:	ee 0f       	add	r30, r30
    2dd8:	ff 1f       	adc	r31, r31
    2dda:	05 90       	lpm	r0, Z+
    2ddc:	f4 91       	lpm	r31, Z
    2dde:	e0 2d       	mov	r30, r0
    2de0:	09 94       	ijmp

00002de2 <__umulhisi3>:
    2de2:	a2 9f       	mul	r26, r18
    2de4:	b0 01       	movw	r22, r0
    2de6:	b3 9f       	mul	r27, r19
    2de8:	c0 01       	movw	r24, r0
    2dea:	a3 9f       	mul	r26, r19
    2dec:	70 0d       	add	r23, r0
    2dee:	81 1d       	adc	r24, r1
    2df0:	11 24       	eor	r1, r1
    2df2:	91 1d       	adc	r25, r1
    2df4:	b2 9f       	mul	r27, r18
    2df6:	70 0d       	add	r23, r0
    2df8:	81 1d       	adc	r24, r1
    2dfa:	11 24       	eor	r1, r1
    2dfc:	91 1d       	adc	r25, r1
    2dfe:	08 95       	ret

00002e00 <__muluhisi3>:
    2e00:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <__umulhisi3>
    2e04:	a5 9f       	mul	r26, r21
    2e06:	90 0d       	add	r25, r0
    2e08:	b4 9f       	mul	r27, r20
    2e0a:	90 0d       	add	r25, r0
    2e0c:	a4 9f       	mul	r26, r20
    2e0e:	80 0d       	add	r24, r0
    2e10:	91 1d       	adc	r25, r1
    2e12:	11 24       	eor	r1, r1
    2e14:	08 95       	ret

00002e16 <__mulshisi3>:
    2e16:	b7 ff       	sbrs	r27, 7
    2e18:	0c 94 00 17 	jmp	0x2e00	; 0x2e00 <__muluhisi3>

00002e1c <__mulohisi3>:
    2e1c:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__muluhisi3>
    2e20:	82 1b       	sub	r24, r18
    2e22:	93 0b       	sbc	r25, r19
    2e24:	08 95       	ret

00002e26 <__prologue_saves__>:
    2e26:	2f 92       	push	r2
    2e28:	3f 92       	push	r3
    2e2a:	4f 92       	push	r4
    2e2c:	5f 92       	push	r5
    2e2e:	6f 92       	push	r6
    2e30:	7f 92       	push	r7
    2e32:	8f 92       	push	r8
    2e34:	9f 92       	push	r9
    2e36:	af 92       	push	r10
    2e38:	bf 92       	push	r11
    2e3a:	cf 92       	push	r12
    2e3c:	df 92       	push	r13
    2e3e:	ef 92       	push	r14
    2e40:	ff 92       	push	r15
    2e42:	0f 93       	push	r16
    2e44:	1f 93       	push	r17
    2e46:	cf 93       	push	r28
    2e48:	df 93       	push	r29
    2e4a:	cd b7       	in	r28, 0x3d	; 61
    2e4c:	de b7       	in	r29, 0x3e	; 62
    2e4e:	ca 1b       	sub	r28, r26
    2e50:	db 0b       	sbc	r29, r27
    2e52:	0f b6       	in	r0, 0x3f	; 63
    2e54:	f8 94       	cli
    2e56:	de bf       	out	0x3e, r29	; 62
    2e58:	0f be       	out	0x3f, r0	; 63
    2e5a:	cd bf       	out	0x3d, r28	; 61
    2e5c:	09 94       	ijmp

00002e5e <__epilogue_restores__>:
    2e5e:	2a 88       	ldd	r2, Y+18	; 0x12
    2e60:	39 88       	ldd	r3, Y+17	; 0x11
    2e62:	48 88       	ldd	r4, Y+16	; 0x10
    2e64:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e66:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e68:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e6a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e6c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e6e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e70:	b9 84       	ldd	r11, Y+9	; 0x09
    2e72:	c8 84       	ldd	r12, Y+8	; 0x08
    2e74:	df 80       	ldd	r13, Y+7	; 0x07
    2e76:	ee 80       	ldd	r14, Y+6	; 0x06
    2e78:	fd 80       	ldd	r15, Y+5	; 0x05
    2e7a:	0c 81       	ldd	r16, Y+4	; 0x04
    2e7c:	1b 81       	ldd	r17, Y+3	; 0x03
    2e7e:	aa 81       	ldd	r26, Y+2	; 0x02
    2e80:	b9 81       	ldd	r27, Y+1	; 0x01
    2e82:	ce 0f       	add	r28, r30
    2e84:	d1 1d       	adc	r29, r1
    2e86:	0f b6       	in	r0, 0x3f	; 63
    2e88:	f8 94       	cli
    2e8a:	de bf       	out	0x3e, r29	; 62
    2e8c:	0f be       	out	0x3f, r0	; 63
    2e8e:	cd bf       	out	0x3d, r28	; 61
    2e90:	ed 01       	movw	r28, r26
    2e92:	08 95       	ret

00002e94 <malloc>:
    2e94:	0f 93       	push	r16
    2e96:	1f 93       	push	r17
    2e98:	cf 93       	push	r28
    2e9a:	df 93       	push	r29
    2e9c:	82 30       	cpi	r24, 0x02	; 2
    2e9e:	91 05       	cpc	r25, r1
    2ea0:	10 f4       	brcc	.+4      	; 0x2ea6 <malloc+0x12>
    2ea2:	82 e0       	ldi	r24, 0x02	; 2
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	e0 91 76 02 	lds	r30, 0x0276	; 0x800276 <__flp>
    2eaa:	f0 91 77 02 	lds	r31, 0x0277	; 0x800277 <__flp+0x1>
    2eae:	20 e0       	ldi	r18, 0x00	; 0
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	a0 e0       	ldi	r26, 0x00	; 0
    2eb4:	b0 e0       	ldi	r27, 0x00	; 0
    2eb6:	30 97       	sbiw	r30, 0x00	; 0
    2eb8:	19 f1       	breq	.+70     	; 0x2f00 <malloc+0x6c>
    2eba:	40 81       	ld	r20, Z
    2ebc:	51 81       	ldd	r21, Z+1	; 0x01
    2ebe:	02 81       	ldd	r16, Z+2	; 0x02
    2ec0:	13 81       	ldd	r17, Z+3	; 0x03
    2ec2:	48 17       	cp	r20, r24
    2ec4:	59 07       	cpc	r21, r25
    2ec6:	c8 f0       	brcs	.+50     	; 0x2efa <malloc+0x66>
    2ec8:	84 17       	cp	r24, r20
    2eca:	95 07       	cpc	r25, r21
    2ecc:	69 f4       	brne	.+26     	; 0x2ee8 <malloc+0x54>
    2ece:	10 97       	sbiw	r26, 0x00	; 0
    2ed0:	31 f0       	breq	.+12     	; 0x2ede <malloc+0x4a>
    2ed2:	12 96       	adiw	r26, 0x02	; 2
    2ed4:	0c 93       	st	X, r16
    2ed6:	12 97       	sbiw	r26, 0x02	; 2
    2ed8:	13 96       	adiw	r26, 0x03	; 3
    2eda:	1c 93       	st	X, r17
    2edc:	27 c0       	rjmp	.+78     	; 0x2f2c <malloc+0x98>
    2ede:	00 93 76 02 	sts	0x0276, r16	; 0x800276 <__flp>
    2ee2:	10 93 77 02 	sts	0x0277, r17	; 0x800277 <__flp+0x1>
    2ee6:	22 c0       	rjmp	.+68     	; 0x2f2c <malloc+0x98>
    2ee8:	21 15       	cp	r18, r1
    2eea:	31 05       	cpc	r19, r1
    2eec:	19 f0       	breq	.+6      	; 0x2ef4 <malloc+0x60>
    2eee:	42 17       	cp	r20, r18
    2ef0:	53 07       	cpc	r21, r19
    2ef2:	18 f4       	brcc	.+6      	; 0x2efa <malloc+0x66>
    2ef4:	9a 01       	movw	r18, r20
    2ef6:	bd 01       	movw	r22, r26
    2ef8:	ef 01       	movw	r28, r30
    2efa:	df 01       	movw	r26, r30
    2efc:	f8 01       	movw	r30, r16
    2efe:	db cf       	rjmp	.-74     	; 0x2eb6 <malloc+0x22>
    2f00:	21 15       	cp	r18, r1
    2f02:	31 05       	cpc	r19, r1
    2f04:	f9 f0       	breq	.+62     	; 0x2f44 <malloc+0xb0>
    2f06:	28 1b       	sub	r18, r24
    2f08:	39 0b       	sbc	r19, r25
    2f0a:	24 30       	cpi	r18, 0x04	; 4
    2f0c:	31 05       	cpc	r19, r1
    2f0e:	80 f4       	brcc	.+32     	; 0x2f30 <malloc+0x9c>
    2f10:	8a 81       	ldd	r24, Y+2	; 0x02
    2f12:	9b 81       	ldd	r25, Y+3	; 0x03
    2f14:	61 15       	cp	r22, r1
    2f16:	71 05       	cpc	r23, r1
    2f18:	21 f0       	breq	.+8      	; 0x2f22 <malloc+0x8e>
    2f1a:	fb 01       	movw	r30, r22
    2f1c:	93 83       	std	Z+3, r25	; 0x03
    2f1e:	82 83       	std	Z+2, r24	; 0x02
    2f20:	04 c0       	rjmp	.+8      	; 0x2f2a <malloc+0x96>
    2f22:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <__flp+0x1>
    2f26:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <__flp>
    2f2a:	fe 01       	movw	r30, r28
    2f2c:	32 96       	adiw	r30, 0x02	; 2
    2f2e:	44 c0       	rjmp	.+136    	; 0x2fb8 <malloc+0x124>
    2f30:	fe 01       	movw	r30, r28
    2f32:	e2 0f       	add	r30, r18
    2f34:	f3 1f       	adc	r31, r19
    2f36:	81 93       	st	Z+, r24
    2f38:	91 93       	st	Z+, r25
    2f3a:	22 50       	subi	r18, 0x02	; 2
    2f3c:	31 09       	sbc	r19, r1
    2f3e:	39 83       	std	Y+1, r19	; 0x01
    2f40:	28 83       	st	Y, r18
    2f42:	3a c0       	rjmp	.+116    	; 0x2fb8 <malloc+0x124>
    2f44:	20 91 74 02 	lds	r18, 0x0274	; 0x800274 <__brkval>
    2f48:	30 91 75 02 	lds	r19, 0x0275	; 0x800275 <__brkval+0x1>
    2f4c:	23 2b       	or	r18, r19
    2f4e:	41 f4       	brne	.+16     	; 0x2f60 <malloc+0xcc>
    2f50:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__malloc_heap_start>
    2f54:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__malloc_heap_start+0x1>
    2f58:	30 93 75 02 	sts	0x0275, r19	; 0x800275 <__brkval+0x1>
    2f5c:	20 93 74 02 	sts	0x0274, r18	; 0x800274 <__brkval>
    2f60:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__malloc_heap_end>
    2f64:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__malloc_heap_end+0x1>
    2f68:	21 15       	cp	r18, r1
    2f6a:	31 05       	cpc	r19, r1
    2f6c:	41 f4       	brne	.+16     	; 0x2f7e <malloc+0xea>
    2f6e:	2d b7       	in	r18, 0x3d	; 61
    2f70:	3e b7       	in	r19, 0x3e	; 62
    2f72:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__malloc_margin>
    2f76:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__malloc_margin+0x1>
    2f7a:	24 1b       	sub	r18, r20
    2f7c:	35 0b       	sbc	r19, r21
    2f7e:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <__brkval>
    2f82:	f0 91 75 02 	lds	r31, 0x0275	; 0x800275 <__brkval+0x1>
    2f86:	e2 17       	cp	r30, r18
    2f88:	f3 07       	cpc	r31, r19
    2f8a:	a0 f4       	brcc	.+40     	; 0x2fb4 <malloc+0x120>
    2f8c:	2e 1b       	sub	r18, r30
    2f8e:	3f 0b       	sbc	r19, r31
    2f90:	28 17       	cp	r18, r24
    2f92:	39 07       	cpc	r19, r25
    2f94:	78 f0       	brcs	.+30     	; 0x2fb4 <malloc+0x120>
    2f96:	ac 01       	movw	r20, r24
    2f98:	4e 5f       	subi	r20, 0xFE	; 254
    2f9a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f9c:	24 17       	cp	r18, r20
    2f9e:	35 07       	cpc	r19, r21
    2fa0:	48 f0       	brcs	.+18     	; 0x2fb4 <malloc+0x120>
    2fa2:	4e 0f       	add	r20, r30
    2fa4:	5f 1f       	adc	r21, r31
    2fa6:	50 93 75 02 	sts	0x0275, r21	; 0x800275 <__brkval+0x1>
    2faa:	40 93 74 02 	sts	0x0274, r20	; 0x800274 <__brkval>
    2fae:	81 93       	st	Z+, r24
    2fb0:	91 93       	st	Z+, r25
    2fb2:	02 c0       	rjmp	.+4      	; 0x2fb8 <malloc+0x124>
    2fb4:	e0 e0       	ldi	r30, 0x00	; 0
    2fb6:	f0 e0       	ldi	r31, 0x00	; 0
    2fb8:	cf 01       	movw	r24, r30
    2fba:	df 91       	pop	r29
    2fbc:	cf 91       	pop	r28
    2fbe:	1f 91       	pop	r17
    2fc0:	0f 91       	pop	r16
    2fc2:	08 95       	ret

00002fc4 <free>:
    2fc4:	cf 93       	push	r28
    2fc6:	df 93       	push	r29
    2fc8:	00 97       	sbiw	r24, 0x00	; 0
    2fca:	09 f4       	brne	.+2      	; 0x2fce <free+0xa>
    2fcc:	81 c0       	rjmp	.+258    	; 0x30d0 <free+0x10c>
    2fce:	fc 01       	movw	r30, r24
    2fd0:	32 97       	sbiw	r30, 0x02	; 2
    2fd2:	13 82       	std	Z+3, r1	; 0x03
    2fd4:	12 82       	std	Z+2, r1	; 0x02
    2fd6:	a0 91 76 02 	lds	r26, 0x0276	; 0x800276 <__flp>
    2fda:	b0 91 77 02 	lds	r27, 0x0277	; 0x800277 <__flp+0x1>
    2fde:	10 97       	sbiw	r26, 0x00	; 0
    2fe0:	81 f4       	brne	.+32     	; 0x3002 <free+0x3e>
    2fe2:	20 81       	ld	r18, Z
    2fe4:	31 81       	ldd	r19, Z+1	; 0x01
    2fe6:	82 0f       	add	r24, r18
    2fe8:	93 1f       	adc	r25, r19
    2fea:	20 91 74 02 	lds	r18, 0x0274	; 0x800274 <__brkval>
    2fee:	30 91 75 02 	lds	r19, 0x0275	; 0x800275 <__brkval+0x1>
    2ff2:	28 17       	cp	r18, r24
    2ff4:	39 07       	cpc	r19, r25
    2ff6:	51 f5       	brne	.+84     	; 0x304c <free+0x88>
    2ff8:	f0 93 75 02 	sts	0x0275, r31	; 0x800275 <__brkval+0x1>
    2ffc:	e0 93 74 02 	sts	0x0274, r30	; 0x800274 <__brkval>
    3000:	67 c0       	rjmp	.+206    	; 0x30d0 <free+0x10c>
    3002:	ed 01       	movw	r28, r26
    3004:	20 e0       	ldi	r18, 0x00	; 0
    3006:	30 e0       	ldi	r19, 0x00	; 0
    3008:	ce 17       	cp	r28, r30
    300a:	df 07       	cpc	r29, r31
    300c:	40 f4       	brcc	.+16     	; 0x301e <free+0x5a>
    300e:	4a 81       	ldd	r20, Y+2	; 0x02
    3010:	5b 81       	ldd	r21, Y+3	; 0x03
    3012:	9e 01       	movw	r18, r28
    3014:	41 15       	cp	r20, r1
    3016:	51 05       	cpc	r21, r1
    3018:	f1 f0       	breq	.+60     	; 0x3056 <free+0x92>
    301a:	ea 01       	movw	r28, r20
    301c:	f5 cf       	rjmp	.-22     	; 0x3008 <free+0x44>
    301e:	d3 83       	std	Z+3, r29	; 0x03
    3020:	c2 83       	std	Z+2, r28	; 0x02
    3022:	40 81       	ld	r20, Z
    3024:	51 81       	ldd	r21, Z+1	; 0x01
    3026:	84 0f       	add	r24, r20
    3028:	95 1f       	adc	r25, r21
    302a:	c8 17       	cp	r28, r24
    302c:	d9 07       	cpc	r29, r25
    302e:	59 f4       	brne	.+22     	; 0x3046 <free+0x82>
    3030:	88 81       	ld	r24, Y
    3032:	99 81       	ldd	r25, Y+1	; 0x01
    3034:	84 0f       	add	r24, r20
    3036:	95 1f       	adc	r25, r21
    3038:	02 96       	adiw	r24, 0x02	; 2
    303a:	91 83       	std	Z+1, r25	; 0x01
    303c:	80 83       	st	Z, r24
    303e:	8a 81       	ldd	r24, Y+2	; 0x02
    3040:	9b 81       	ldd	r25, Y+3	; 0x03
    3042:	93 83       	std	Z+3, r25	; 0x03
    3044:	82 83       	std	Z+2, r24	; 0x02
    3046:	21 15       	cp	r18, r1
    3048:	31 05       	cpc	r19, r1
    304a:	29 f4       	brne	.+10     	; 0x3056 <free+0x92>
    304c:	f0 93 77 02 	sts	0x0277, r31	; 0x800277 <__flp+0x1>
    3050:	e0 93 76 02 	sts	0x0276, r30	; 0x800276 <__flp>
    3054:	3d c0       	rjmp	.+122    	; 0x30d0 <free+0x10c>
    3056:	e9 01       	movw	r28, r18
    3058:	fb 83       	std	Y+3, r31	; 0x03
    305a:	ea 83       	std	Y+2, r30	; 0x02
    305c:	49 91       	ld	r20, Y+
    305e:	59 91       	ld	r21, Y+
    3060:	c4 0f       	add	r28, r20
    3062:	d5 1f       	adc	r29, r21
    3064:	ec 17       	cp	r30, r28
    3066:	fd 07       	cpc	r31, r29
    3068:	61 f4       	brne	.+24     	; 0x3082 <free+0xbe>
    306a:	80 81       	ld	r24, Z
    306c:	91 81       	ldd	r25, Z+1	; 0x01
    306e:	84 0f       	add	r24, r20
    3070:	95 1f       	adc	r25, r21
    3072:	02 96       	adiw	r24, 0x02	; 2
    3074:	e9 01       	movw	r28, r18
    3076:	99 83       	std	Y+1, r25	; 0x01
    3078:	88 83       	st	Y, r24
    307a:	82 81       	ldd	r24, Z+2	; 0x02
    307c:	93 81       	ldd	r25, Z+3	; 0x03
    307e:	9b 83       	std	Y+3, r25	; 0x03
    3080:	8a 83       	std	Y+2, r24	; 0x02
    3082:	e0 e0       	ldi	r30, 0x00	; 0
    3084:	f0 e0       	ldi	r31, 0x00	; 0
    3086:	12 96       	adiw	r26, 0x02	; 2
    3088:	8d 91       	ld	r24, X+
    308a:	9c 91       	ld	r25, X
    308c:	13 97       	sbiw	r26, 0x03	; 3
    308e:	00 97       	sbiw	r24, 0x00	; 0
    3090:	19 f0       	breq	.+6      	; 0x3098 <free+0xd4>
    3092:	fd 01       	movw	r30, r26
    3094:	dc 01       	movw	r26, r24
    3096:	f7 cf       	rjmp	.-18     	; 0x3086 <free+0xc2>
    3098:	8d 91       	ld	r24, X+
    309a:	9c 91       	ld	r25, X
    309c:	11 97       	sbiw	r26, 0x01	; 1
    309e:	9d 01       	movw	r18, r26
    30a0:	2e 5f       	subi	r18, 0xFE	; 254
    30a2:	3f 4f       	sbci	r19, 0xFF	; 255
    30a4:	82 0f       	add	r24, r18
    30a6:	93 1f       	adc	r25, r19
    30a8:	20 91 74 02 	lds	r18, 0x0274	; 0x800274 <__brkval>
    30ac:	30 91 75 02 	lds	r19, 0x0275	; 0x800275 <__brkval+0x1>
    30b0:	28 17       	cp	r18, r24
    30b2:	39 07       	cpc	r19, r25
    30b4:	69 f4       	brne	.+26     	; 0x30d0 <free+0x10c>
    30b6:	30 97       	sbiw	r30, 0x00	; 0
    30b8:	29 f4       	brne	.+10     	; 0x30c4 <free+0x100>
    30ba:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <__flp+0x1>
    30be:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <__flp>
    30c2:	02 c0       	rjmp	.+4      	; 0x30c8 <free+0x104>
    30c4:	13 82       	std	Z+3, r1	; 0x03
    30c6:	12 82       	std	Z+2, r1	; 0x02
    30c8:	b0 93 75 02 	sts	0x0275, r27	; 0x800275 <__brkval+0x1>
    30cc:	a0 93 74 02 	sts	0x0274, r26	; 0x800274 <__brkval>
    30d0:	df 91       	pop	r29
    30d2:	cf 91       	pop	r28
    30d4:	08 95       	ret

000030d6 <__do_global_dtors>:
    30d6:	10 e0       	ldi	r17, 0x00	; 0
    30d8:	ce e5       	ldi	r28, 0x5E	; 94
    30da:	d0 e0       	ldi	r29, 0x00	; 0
    30dc:	04 c0       	rjmp	.+8      	; 0x30e6 <__do_global_dtors+0x10>
    30de:	fe 01       	movw	r30, r28
    30e0:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <__tablejump2__>
    30e4:	21 96       	adiw	r28, 0x01	; 1
    30e6:	cf 35       	cpi	r28, 0x5F	; 95
    30e8:	d1 07       	cpc	r29, r17
    30ea:	c9 f7       	brne	.-14     	; 0x30de <__do_global_dtors+0x8>
    30ec:	f8 94       	cli

000030ee <__stop_program>:
    30ee:	ff cf       	rjmp	.-2      	; 0x30ee <__stop_program>
