
RobotRunGrid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800100  00003704  00003798  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003704  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e9  00800182  00800182  0000381a  2**0
                  ALLOC
  3 .stab         000074b8  00000000  00000000  0000381c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000a086  00000000  00000000  0000acd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  00014d5a  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00014d9c  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000100  00000000  00000000  00014ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000024bf  00000000  00000000  00014edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000ddc  00000000  00000000  0001739b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001935  00000000  00000000  00018177  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000330  00000000  00000000  00019aac  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000008ea  00000000  00000000  00019ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001331  00000000  00000000  0001a6c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000c0  00000000  00000000  0001b9f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__dtors_end>
       4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
       8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
       c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      10:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      14:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      18:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      1c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      20:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      24:	0c 94 ea 10 	jmp	0x21d4	; 0x21d4 <__vector_9>
      28:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      2c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      30:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      34:	0c 94 4c 0d 	jmp	0x1a98	; 0x1a98 <__vector_13>
      38:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      3c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      40:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      44:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      48:	0c 94 62 10 	jmp	0x20c4	; 0x20c4 <__vector_18>
      4c:	0c 94 c5 10 	jmp	0x218a	; 0x218a <__vector_19>
      50:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      54:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      58:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      5c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      60:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      64:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      68:	05 a8       	ldd	r0, Z+53	; 0x35
      6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
      6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <motorControl+0xb4>
      6e:	4e b9       	out	0x0e, r20	; 14
      70:	38 36       	cpi	r19, 0x68	; 104
      72:	a9 02       	muls	r26, r25
      74:	0c 50       	subi	r16, 0x0C	; 12
      76:	b9 91       	ld	r27, Y+
      78:	86 88       	ldd	r8, Z+22	; 0x16
      7a:	08 3c       	cpi	r16, 0xC8	; 200
      7c:	a6 aa       	std	Z+54, r10	; 0x36
      7e:	aa 2a       	or	r10, r26
      80:	be 00       	.word	0x00be	; ????
      82:	00 00       	nop
      84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__trampolines_end>:
      86:	3e 66       	ori	r19, 0x6E	; 110
      88:	33 32       	cpi	r19, 0x23	; 35
      8a:	3e 3e       	cpi	r19, 0xEE	; 238
      8c:	61 33       	cpi	r22, 0x31	; 49
      8e:	32 00       	.word	0x0032	; ????

00000090 <__c.2364>:
      90:	3e 66 33 32 3e 3e 61 33 32 00                       >f32>>a32.

0000009a <__c.2261>:
      9a:	3e 66 33 32 3e 3e 61 33 32 00                       >f32>>a32.

000000a4 <__c.2259>:
      a4:	3e 66 33 32 3e 3e 61 33 32 00                       >f32>>a32.

000000ae <__c.2252>:
      ae:	3e 66 33 32 3e 3e 61 33 32 00                       >f32>>a32.

000000b8 <__ctors_end>:
      b8:	cb 11       	cpse	r28, r11

000000ba <__dtors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d8 e0       	ldi	r29, 0x08	; 8
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
      c6:	11 e0       	ldi	r17, 0x01	; 1
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	e4 e0       	ldi	r30, 0x04	; 4
      ce:	f7 e3       	ldi	r31, 0x37	; 55
      d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
      d2:	05 90       	lpm	r0, Z+
      d4:	0d 92       	st	X+, r0
      d6:	a2 38       	cpi	r26, 0x82	; 130
      d8:	b1 07       	cpc	r27, r17
      da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
      dc:	22 e0       	ldi	r18, 0x02	; 2
      de:	a2 e8       	ldi	r26, 0x82	; 130
      e0:	b1 e0       	ldi	r27, 0x01	; 1
      e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
      e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
      e6:	ab 36       	cpi	r26, 0x6B	; 107
      e8:	b2 07       	cpc	r27, r18
      ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>
      ec:	0e 94 87 02 	call	0x50e	; 0x50e <main>
      f0:	0c 94 75 1b 	jmp	0x36ea	; 0x36ea <__do_global_dtors>

000000f4 <__bad_interrupt>:
      f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f8 <swapOne>:
	temp = *secondYValue;                                                                               //Swap Y-Coordinates
	*secondYValue = *firstYValue;
	*firstYValue = temp;
}

void swapOne(float *firstValue, float *secondValue) {                                                  //Swap function for the distance array
      f8:	cf 92       	push	r12
      fa:	df 92       	push	r13
      fc:	ef 92       	push	r14
      fe:	ff 92       	push	r15
     100:	0f 93       	push	r16
     102:	1f 93       	push	r17
	float temp;

	temp = *secondValue;
     104:	fb 01       	movw	r30, r22
     106:	00 81       	ld	r16, Z
     108:	11 81       	ldd	r17, Z+1	; 0x01
     10a:	22 81       	ldd	r18, Z+2	; 0x02
     10c:	33 81       	ldd	r19, Z+3	; 0x03
	*secondValue = *firstValue;
     10e:	fc 01       	movw	r30, r24
     110:	c0 80       	ld	r12, Z
     112:	d1 80       	ldd	r13, Z+1	; 0x01
     114:	e2 80       	ldd	r14, Z+2	; 0x02
     116:	f3 80       	ldd	r15, Z+3	; 0x03
     118:	fb 01       	movw	r30, r22
     11a:	c0 82       	st	Z, r12
     11c:	d1 82       	std	Z+1, r13	; 0x01
     11e:	e2 82       	std	Z+2, r14	; 0x02
     120:	f3 82       	std	Z+3, r15	; 0x03
	*firstValue = temp;
     122:	fc 01       	movw	r30, r24
     124:	00 83       	st	Z, r16
     126:	11 83       	std	Z+1, r17	; 0x01
     128:	22 83       	std	Z+2, r18	; 0x02
     12a:	33 83       	std	Z+3, r19	; 0x03
}
     12c:	1f 91       	pop	r17
     12e:	0f 91       	pop	r16
     130:	ff 90       	pop	r15
     132:	ef 90       	pop	r14
     134:	df 90       	pop	r13
     136:	cf 90       	pop	r12
     138:	08 95       	ret

0000013a <sortOrder>:

void sortOrder(int X[], int Y[]) {                                                                   //Sorting algorithm, this sorts the coordinates of the given order
     13a:	2f 92       	push	r2
     13c:	3f 92       	push	r3
     13e:	4f 92       	push	r4
     140:	5f 92       	push	r5
     142:	6f 92       	push	r6
     144:	7f 92       	push	r7
     146:	8f 92       	push	r8
     148:	9f 92       	push	r9
     14a:	af 92       	push	r10
     14c:	bf 92       	push	r11
     14e:	cf 92       	push	r12
     150:	df 92       	push	r13
     152:	ef 92       	push	r14
     154:	ff 92       	push	r15
     156:	0f 93       	push	r16
     158:	1f 93       	push	r17
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
     15e:	cd b7       	in	r28, 0x3d	; 61
     160:	de b7       	in	r29, 0x3e	; 62
     162:	a5 97       	sbiw	r28, 0x25	; 37
     164:	0f b6       	in	r0, 0x3f	; 63
     166:	f8 94       	cli
     168:	de bf       	out	0x3e, r29	; 62
     16a:	0f be       	out	0x3f, r0	; 63
     16c:	cd bf       	out	0x3d, r28	; 61
     16e:	9b a3       	std	Y+35, r25	; 0x23
     170:	8a a3       	std	Y+34, r24	; 0x22
     172:	6c a3       	std	Y+36, r22	; 0x24
     174:	7d a3       	std	Y+37, r23	; 0x25
     176:	06 96       	adiw	r24, 0x06	; 6
     178:	98 a3       	std	Y+32, r25	; 0x20
     17a:	8f 8f       	std	Y+31, r24	; 0x1f
     17c:	b6 c0       	rjmp	.+364    	; 0x2ea <sortOrder+0x1b0>
     17e:	7e 8e       	std	Y+30, r7	; 0x1e
     180:	6d 8e       	std	Y+29, r6	; 0x1d

	while (check != 1) {
		orderCorrect = 1;

		for (int i = 0; i < (sizeOfOrder - 1); i++) {
			Distance[i] = sqrt((pow(X[i], 2)) + (pow(Y[i], 2)));                                    //Pythagoras
     182:	f3 01       	movw	r30, r6
     184:	01 90       	ld	r0, Z+
     186:	f0 81       	ld	r31, Z
     188:	e0 2d       	mov	r30, r0
     18a:	fa 8f       	std	Y+26, r31	; 0x1a
     18c:	e9 8f       	std	Y+25, r30	; 0x19
     18e:	bf 01       	movw	r22, r30
     190:	ff 0f       	add	r31, r31
     192:	88 0b       	sbc	r24, r24
     194:	99 0b       	sbc	r25, r25
     196:	0e 94 55 18 	call	0x30aa	; 0x30aa <__floatsisf>
     19a:	6b 01       	movw	r12, r22
     19c:	7c 01       	movw	r14, r24
     19e:	3c 8e       	std	Y+28, r3	; 0x1c
     1a0:	2b 8e       	std	Y+27, r2	; 0x1b
     1a2:	f1 01       	movw	r30, r2
     1a4:	00 81       	ld	r16, Z
     1a6:	11 81       	ldd	r17, Z+1	; 0x01
     1a8:	b8 01       	movw	r22, r16
     1aa:	01 2e       	mov	r0, r17
     1ac:	00 0c       	add	r0, r0
     1ae:	88 0b       	sbc	r24, r24
     1b0:	99 0b       	sbc	r25, r25
     1b2:	0e 94 55 18 	call	0x30aa	; 0x30aa <__floatsisf>
     1b6:	4b 01       	movw	r8, r22
     1b8:	5c 01       	movw	r10, r24
     1ba:	9b 01       	movw	r18, r22
     1bc:	ac 01       	movw	r20, r24
     1be:	0e 94 0a 19 	call	0x3214	; 0x3214 <__mulsf3>
     1c2:	69 8b       	std	Y+17, r22	; 0x11
     1c4:	7a 8b       	std	Y+18, r23	; 0x12
     1c6:	8b 8b       	std	Y+19, r24	; 0x13
     1c8:	9c 8b       	std	Y+20, r25	; 0x14
     1ca:	a5 01       	movw	r20, r10
     1cc:	94 01       	movw	r18, r8
     1ce:	c5 01       	movw	r24, r10
     1d0:	b4 01       	movw	r22, r8
     1d2:	0e 94 0a 19 	call	0x3214	; 0x3214 <__mulsf3>
     1d6:	4b 01       	movw	r8, r22
     1d8:	5c 01       	movw	r10, r24
     1da:	a7 01       	movw	r20, r14
     1dc:	96 01       	movw	r18, r12
     1de:	c7 01       	movw	r24, r14
     1e0:	b6 01       	movw	r22, r12
     1e2:	0e 94 0a 19 	call	0x3214	; 0x3214 <__mulsf3>
     1e6:	9b 01       	movw	r18, r22
     1e8:	ac 01       	movw	r20, r24
     1ea:	c5 01       	movw	r24, r10
     1ec:	b4 01       	movw	r22, r8
     1ee:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <__addsf3>
     1f2:	0e 94 85 19 	call	0x330a	; 0x330a <sqrt>
     1f6:	6b 01       	movw	r12, r22
     1f8:	7c 01       	movw	r14, r24
     1fa:	f2 01       	movw	r30, r4
     1fc:	61 93       	st	Z+, r22
     1fe:	71 93       	st	Z+, r23
     200:	81 93       	st	Z+, r24
     202:	91 93       	st	Z+, r25
     204:	2f 01       	movw	r4, r30
     206:	e9 8b       	std	Y+17, r30	; 0x11
     208:	59 a2       	std	Y+33, r5	; 0x21
			firstDistanceValue =  Distance[i];
			secondDistanceValue =  Distance[i + 1];
     20a:	80 80       	ld	r8, Z
     20c:	91 80       	ldd	r9, Z+1	; 0x01
     20e:	a2 80       	ldd	r10, Z+2	; 0x02
     210:	b3 80       	ldd	r11, Z+3	; 0x03

			if ( Distance[i] >  Distance[i + 1]) {                                                  //Compare the distance of two points to each other
     212:	a5 01       	movw	r20, r10
     214:	94 01       	movw	r18, r8
     216:	0e 94 05 19 	call	0x320a	; 0x320a <__gesf2>
     21a:	18 16       	cp	r1, r24
     21c:	d4 f4       	brge	.+52     	; 0x252 <sortOrder+0x118>
				swapOne(& Distance[i], & Distance[i + 1]);                                          //Place the biggest one further behind in the array
     21e:	b2 01       	movw	r22, r4
     220:	8d 89       	ldd	r24, Y+21	; 0x15
     222:	9e 89       	ldd	r25, Y+22	; 0x16
     224:	0e 94 7c 00 	call	0xf8	; 0xf8 <swapOne>


void swapTwo( int *firstXValue, int *secondXValue, int *firstYValue, int *secondYValue){                //Swap function for the coordinates
	int temp;

	temp = *secondXValue;                                                                               //Swap X-Coordinates
     228:	f3 01       	movw	r30, r6
     22a:	82 81       	ldd	r24, Z+2	; 0x02
     22c:	93 81       	ldd	r25, Z+3	; 0x03
	*secondXValue = *firstXValue;
     22e:	20 81       	ld	r18, Z
     230:	31 81       	ldd	r19, Z+1	; 0x01
     232:	33 83       	std	Z+3, r19	; 0x03
     234:	22 83       	std	Z+2, r18	; 0x02
	*firstXValue = temp;
     236:	91 83       	std	Z+1, r25	; 0x01
     238:	80 83       	st	Z, r24

	temp = *secondYValue;                                                                               //Swap Y-Coordinates
     23a:	f1 01       	movw	r30, r2
     23c:	82 81       	ldd	r24, Z+2	; 0x02
     23e:	93 81       	ldd	r25, Z+3	; 0x03
	*secondYValue = *firstYValue;
     240:	20 81       	ld	r18, Z
     242:	31 81       	ldd	r19, Z+1	; 0x01
     244:	33 83       	std	Z+3, r19	; 0x03
     246:	22 83       	std	Z+2, r18	; 0x02
	*firstYValue = temp;
     248:	91 83       	std	Z+1, r25	; 0x01
     24a:	80 83       	st	Z, r24
			secondDistanceValue =  Distance[i + 1];

			if ( Distance[i] >  Distance[i + 1]) {                                                  //Compare the distance of two points to each other
				swapOne(& Distance[i], & Distance[i + 1]);                                          //Place the biggest one further behind in the array
				swapTwo(&X[i], &X[i + 1], &Y[i], &Y[i + 1]);                                        //Swap the coordinates accordingly
				orderCorrect = 0;
     24c:	1f 8a       	std	Y+23, r1	; 0x17
     24e:	18 8e       	std	Y+24, r1	; 0x18
     250:	36 c0       	rjmp	.+108    	; 0x2be <sortOrder+0x184>
				} else if ((firstDistanceValue == secondDistanceValue) && (Y[i] == Y[i + 1])) {     //If the distance is the same and the Y values are the same
     252:	c7 01       	movw	r24, r14
     254:	b6 01       	movw	r22, r12
     256:	0e 94 1d 18 	call	0x303a	; 0x303a <__fixsfsi>
     25a:	7b 01       	movw	r14, r22
     25c:	c5 01       	movw	r24, r10
     25e:	b4 01       	movw	r22, r8
     260:	0e 94 1d 18 	call	0x303a	; 0x303a <__fixsfsi>
     264:	e6 16       	cp	r14, r22
     266:	f7 06       	cpc	r15, r23
     268:	51 f5       	brne	.+84     	; 0x2be <sortOrder+0x184>
     26a:	eb 8d       	ldd	r30, Y+27	; 0x1b
     26c:	fc 8d       	ldd	r31, Y+28	; 0x1c
     26e:	82 81       	ldd	r24, Z+2	; 0x02
     270:	93 81       	ldd	r25, Z+3	; 0x03
     272:	08 17       	cp	r16, r24
     274:	19 07       	cpc	r17, r25
     276:	19 f5       	brne	.+70     	; 0x2be <sortOrder+0x184>
				if (X[i] < X[i + 1]) {                                                              //Compare the X values
     278:	ed 8d       	ldd	r30, Y+29	; 0x1d
     27a:	fe 8d       	ldd	r31, Y+30	; 0x1e
     27c:	82 81       	ldd	r24, Z+2	; 0x02
     27e:	93 81       	ldd	r25, Z+3	; 0x03
     280:	29 8d       	ldd	r18, Y+25	; 0x19
     282:	3a 8d       	ldd	r19, Y+26	; 0x1a
     284:	28 17       	cp	r18, r24
     286:	39 07       	cpc	r19, r25
     288:	d4 f4       	brge	.+52     	; 0x2be <sortOrder+0x184>
					swapOne(& Distance[i], & Distance[i + 1]);
     28a:	69 89       	ldd	r22, Y+17	; 0x11
     28c:	79 a1       	ldd	r23, Y+33	; 0x21
     28e:	8d 89       	ldd	r24, Y+21	; 0x15
     290:	9e 89       	ldd	r25, Y+22	; 0x16
     292:	0e 94 7c 00 	call	0xf8	; 0xf8 <swapOne>


void swapTwo( int *firstXValue, int *secondXValue, int *firstYValue, int *secondYValue){                //Swap function for the coordinates
	int temp;

	temp = *secondXValue;                                                                               //Swap X-Coordinates
     296:	ed 8d       	ldd	r30, Y+29	; 0x1d
     298:	fe 8d       	ldd	r31, Y+30	; 0x1e
     29a:	82 81       	ldd	r24, Z+2	; 0x02
     29c:	93 81       	ldd	r25, Z+3	; 0x03
	*secondXValue = *firstXValue;
     29e:	20 81       	ld	r18, Z
     2a0:	31 81       	ldd	r19, Z+1	; 0x01
     2a2:	33 83       	std	Z+3, r19	; 0x03
     2a4:	22 83       	std	Z+2, r18	; 0x02
	*firstXValue = temp;
     2a6:	91 83       	std	Z+1, r25	; 0x01
     2a8:	80 83       	st	Z, r24

	temp = *secondYValue;                                                                               //Swap Y-Coordinates
     2aa:	eb 8d       	ldd	r30, Y+27	; 0x1b
     2ac:	fc 8d       	ldd	r31, Y+28	; 0x1c
     2ae:	82 81       	ldd	r24, Z+2	; 0x02
     2b0:	93 81       	ldd	r25, Z+3	; 0x03
	*secondYValue = *firstYValue;
     2b2:	20 81       	ld	r18, Z
     2b4:	31 81       	ldd	r19, Z+1	; 0x01
     2b6:	33 83       	std	Z+3, r19	; 0x03
     2b8:	22 83       	std	Z+2, r18	; 0x02
	*firstYValue = temp;
     2ba:	91 83       	std	Z+1, r25	; 0x01
     2bc:	80 83       	st	Z, r24
     2be:	f2 e0       	ldi	r31, 0x02	; 2
     2c0:	6f 0e       	add	r6, r31
     2c2:	71 1c       	adc	r7, r1
     2c4:	22 e0       	ldi	r18, 0x02	; 2
     2c6:	22 0e       	add	r2, r18
     2c8:	31 1c       	adc	r3, r1
     2ca:	8d 89       	ldd	r24, Y+21	; 0x15
     2cc:	9e 89       	ldd	r25, Y+22	; 0x16
     2ce:	04 96       	adiw	r24, 0x04	; 4
     2d0:	9e 8b       	std	Y+22, r25	; 0x16
     2d2:	8d 8b       	std	Y+21, r24	; 0x15
	float Distance[sizeOfOrder];

	while (check != 1) {
		orderCorrect = 1;

		for (int i = 0; i < (sizeOfOrder - 1); i++) {
     2d4:	ef 8d       	ldd	r30, Y+31	; 0x1f
     2d6:	f8 a1       	ldd	r31, Y+32	; 0x20
     2d8:	6e 16       	cp	r6, r30
     2da:	7f 06       	cpc	r7, r31
     2dc:	09 f0       	breq	.+2      	; 0x2e0 <sortOrder+0x1a6>
     2de:	4f cf       	rjmp	.-354    	; 0x17e <sortOrder+0x44>
					swapOne(& Distance[i], & Distance[i + 1]);
					swapTwo(&X[i], &X[i + 1], &Y[i], &Y[i + 1]);
				}
			}
		}
		if (orderCorrect == 1) {
     2e0:	2f 89       	ldd	r18, Y+23	; 0x17
     2e2:	38 8d       	ldd	r19, Y+24	; 0x18
     2e4:	21 30       	cpi	r18, 0x01	; 1
     2e6:	31 05       	cpc	r19, r1
     2e8:	69 f0       	breq	.+26     	; 0x304 <sortOrder+0x1ca>
     2ea:	6a a0       	ldd	r6, Y+34	; 0x22
     2ec:	7b a0       	ldd	r7, Y+35	; 0x23
     2ee:	2c a0       	ldd	r2, Y+36	; 0x24
     2f0:	3d a0       	ldd	r3, Y+37	; 0x25
     2f2:	ce 01       	movw	r24, r28
     2f4:	01 96       	adiw	r24, 0x01	; 1
     2f6:	2c 01       	movw	r4, r24
	temp = *secondValue;
	*secondValue = *firstValue;
	*firstValue = temp;
}

void sortOrder(int X[], int Y[]) {                                                                   //Sorting algorithm, this sorts the coordinates of the given order
     2f8:	9e 8b       	std	Y+22, r25	; 0x16
     2fa:	8d 8b       	std	Y+21, r24	; 0x15
     2fc:	91 e0       	ldi	r25, 0x01	; 1
     2fe:	9f 8b       	std	Y+23, r25	; 0x17
     300:	18 8e       	std	Y+24, r1	; 0x18
     302:	3d cf       	rjmp	.-390    	; 0x17e <sortOrder+0x44>
		}
		if (orderCorrect == 1) {
			check = 1;
		}
	}
}
     304:	a5 96       	adiw	r28, 0x25	; 37
     306:	0f b6       	in	r0, 0x3f	; 63
     308:	f8 94       	cli
     30a:	de bf       	out	0x3e, r29	; 62
     30c:	0f be       	out	0x3f, r0	; 63
     30e:	cd bf       	out	0x3d, r28	; 61
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	1f 91       	pop	r17
     316:	0f 91       	pop	r16
     318:	ff 90       	pop	r15
     31a:	ef 90       	pop	r14
     31c:	df 90       	pop	r13
     31e:	cf 90       	pop	r12
     320:	bf 90       	pop	r11
     322:	af 90       	pop	r10
     324:	9f 90       	pop	r9
     326:	8f 90       	pop	r8
     328:	7f 90       	pop	r7
     32a:	6f 90       	pop	r6
     32c:	5f 90       	pop	r5
     32e:	4f 90       	pop	r4
     330:	3f 90       	pop	r3
     332:	2f 90       	pop	r2
     334:	08 95       	ret

00000336 <readGrid>:



void readGrid(int routes[4][8]){
     336:	fc 01       	movw	r30, r24
	
	routes[0][0] = 2;                                                                         //Home to grid
     338:	62 e0       	ldi	r22, 0x02	; 2
     33a:	70 e0       	ldi	r23, 0x00	; 0
     33c:	71 83       	std	Z+1, r23	; 0x01
     33e:	60 83       	st	Z, r22
	routes[0][1] = 1;
     340:	21 e0       	ldi	r18, 0x01	; 1
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	33 83       	std	Z+3, r19	; 0x03
     346:	22 83       	std	Z+2, r18	; 0x02
	routes[0][2] = 2;
     348:	75 83       	std	Z+5, r23	; 0x05
     34a:	64 83       	std	Z+4, r22	; 0x04
	routes[0][3] = 1;
     34c:	37 83       	std	Z+7, r19	; 0x07
     34e:	26 83       	std	Z+6, r18	; 0x06
	routes[0][4] = 1;
     350:	31 87       	std	Z+9, r19	; 0x09
     352:	20 87       	std	Z+8, r18	; 0x08
	routes[0][5] = 3;
     354:	83 e0       	ldi	r24, 0x03	; 3
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	93 87       	std	Z+11, r25	; 0x0b
     35a:	82 87       	std	Z+10, r24	; 0x0a
	routes[0][6] = 2;
     35c:	75 87       	std	Z+13, r23	; 0x0d
     35e:	64 87       	std	Z+12, r22	; 0x0c
	routes[0][7] = 5;
     360:	45 e0       	ldi	r20, 0x05	; 5
     362:	50 e0       	ldi	r21, 0x00	; 0
     364:	57 87       	std	Z+15, r21	; 0x0f
     366:	46 87       	std	Z+14, r20	; 0x0e
	
	routes[1][0] = 1;                                                                        //Home to charge point
     368:	31 8b       	std	Z+17, r19	; 0x11
     36a:	20 8b       	std	Z+16, r18	; 0x10
	routes[1][1] = 1;
     36c:	33 8b       	std	Z+19, r19	; 0x13
     36e:	22 8b       	std	Z+18, r18	; 0x12
	routes[1][2] = 5;
     370:	55 8b       	std	Z+21, r21	; 0x15
     372:	44 8b       	std	Z+20, r20	; 0x14
	
	routes[2][0] = 3;                                                                        //Grid to charge point
     374:	91 a3       	std	Z+33, r25	; 0x21
     376:	80 a3       	std	Z+32, r24	; 0x20
	routes[2][1] = 3;
     378:	93 a3       	std	Z+35, r25	; 0x23
     37a:	82 a3       	std	Z+34, r24	; 0x22
	routes[2][2] = 5;
     37c:	55 a3       	std	Z+37, r21	; 0x25
     37e:	44 a3       	std	Z+36, r20	; 0x24
	
	routes[3][0] = 3;                                                                        //Grid to home
     380:	91 ab       	std	Z+49, r25	; 0x31
     382:	80 ab       	std	Z+48, r24	; 0x30
	routes[3][1] = 1;
     384:	33 ab       	std	Z+51, r19	; 0x33
     386:	22 ab       	std	Z+50, r18	; 0x32
	routes[3][2] = 2;
     388:	75 ab       	std	Z+53, r23	; 0x35
     38a:	64 ab       	std	Z+52, r22	; 0x34
	routes[3][3] = 5;
     38c:	57 ab       	std	Z+55, r21	; 0x37
     38e:	46 ab       	std	Z+54, r20	; 0x36
	
	routes[4][0] = 3;                                                                       //Charge point to grid
     390:	e0 5c       	subi	r30, 0xC0	; 192
     392:	ff 4f       	sbci	r31, 0xFF	; 255
     394:	91 83       	std	Z+1, r25	; 0x01
     396:	80 83       	st	Z, r24
	routes[4][1] = 2;
     398:	73 83       	std	Z+3, r23	; 0x03
     39a:	62 83       	std	Z+2, r22	; 0x02
	routes[4][2] = 3;
     39c:	95 83       	std	Z+5, r25	; 0x05
     39e:	84 83       	std	Z+4, r24	; 0x04
	routes[4][3] = 5;
     3a0:	57 83       	std	Z+7, r21	; 0x07
     3a2:	46 83       	std	Z+6, r20	; 0x06
     3a4:	08 95       	ret

000003a6 <followStraightLine>:
// 		play_from_program_space(PSTR(">f32>>a32"));
// 		delay(3000);
// 	}
// }

void followStraightLine(int *coordinate, int coordinateDesired){
     3a6:	ef 92       	push	r14
     3a8:	ff 92       	push	r15
     3aa:	0f 93       	push	r16
     3ac:	1f 93       	push	r17
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	8c 01       	movw	r16, r24
     3b4:	eb 01       	movw	r28, r22
	int biggerThan = 2;
	//print_long(*coordinate);
	if(*coordinate > coordinateDesired){
     3b6:	fc 01       	movw	r30, r24
     3b8:	e0 80       	ld	r14, Z
     3ba:	f1 80       	ldd	r15, Z+1	; 0x01
		biggerThan = 0;
	}
	else{
		biggerThan = 1;
	}
	while(*coordinate != coordinateDesired){
     3bc:	e6 16       	cp	r14, r22
     3be:	f7 06       	cpc	r15, r23
     3c0:	09 f4       	brne	.+2      	; 0x3c4 <followStraightLine+0x1e>
     3c2:	48 c0       	rjmp	.+144    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		do{
			followLine();
     3c4:	0e 94 69 09 	call	0x12d2	; 0x12d2 <followLine>
		}while(!checkAfslag());
     3c8:	0e 94 54 09 	call	0x12a8	; 0x12a8 <checkAfslag>
     3cc:	89 2b       	or	r24, r25
     3ce:	d1 f3       	breq	.-12     	; 0x3c4 <followStraightLine+0x1e>
		if(biggerThan == 1){
     3d0:	ce 15       	cp	r28, r14
     3d2:	df 05       	cpc	r29, r15
     3d4:	c4 f0       	brlt	.+48     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
			*coordinate = *coordinate + 1;
     3d6:	f8 01       	movw	r30, r16
     3d8:	60 81       	ld	r22, Z
     3da:	71 81       	ldd	r23, Z+1	; 0x01
     3dc:	6f 5f       	subi	r22, 0xFF	; 255
     3de:	7f 4f       	sbci	r23, 0xFF	; 255
     3e0:	71 83       	std	Z+1, r23	; 0x01
     3e2:	60 83       	st	Z, r22
			print_long(*coordinate);
     3e4:	07 2e       	mov	r0, r23
     3e6:	00 0c       	add	r0, r0
     3e8:	88 0b       	sbc	r24, r24
     3ea:	99 0b       	sbc	r25, r25
     3ec:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <print_long>
			play_from_program_space(PSTR(">f32>>a32"));
     3f0:	80 e9       	ldi	r24, 0x90	; 144
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <play_from_program_space>
		    : "0" ( microseconds )
		    );  
}

// These are alternative aliases:
static inline void delay(unsigned int milliseconds) { delay_ms(milliseconds); }
     3f8:	88 ec       	ldi	r24, 0xC8	; 200
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	0e 94 32 11 	call	0x2264	; 0x2264 <delay_ms>
			//print_long(*coordinate);
			delay(200);
			clear();
     400:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <clear>
     404:	17 c0       	rjmp	.+46     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		}
		else if(biggerThan == 0){
			*coordinate = *coordinate - 1;
     406:	f8 01       	movw	r30, r16
     408:	60 81       	ld	r22, Z
     40a:	71 81       	ldd	r23, Z+1	; 0x01
     40c:	61 50       	subi	r22, 0x01	; 1
     40e:	71 09       	sbc	r23, r1
     410:	71 83       	std	Z+1, r23	; 0x01
     412:	60 83       	st	Z, r22
			print_long(*coordinate);
     414:	07 2e       	mov	r0, r23
     416:	00 0c       	add	r0, r0
     418:	88 0b       	sbc	r24, r24
     41a:	99 0b       	sbc	r25, r25
     41c:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <print_long>
			play_from_program_space(PSTR(">f32>>a32"));
     420:	86 e8       	ldi	r24, 0x86	; 134
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <play_from_program_space>
     428:	88 ec       	ldi	r24, 0xC8	; 200
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	0e 94 32 11 	call	0x2264	; 0x2264 <delay_ms>
			//print_long(*coordinate);
			delay(200);
			clear();
     430:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <clear>
		}
		motorControl(50, 'F', 0.30);      //moet korte stoot geven zodat de robot over kruispunt heen komt, nog kijken hoe hard / lang
     434:	2a e9       	ldi	r18, 0x9A	; 154
     436:	39 e9       	ldi	r19, 0x99	; 153
     438:	49 e9       	ldi	r20, 0x99	; 153
     43a:	5e e3       	ldi	r21, 0x3E	; 62
     43c:	66 e4       	ldi	r22, 0x46	; 70
     43e:	82 e3       	ldi	r24, 0x32	; 50
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 8f 04 	call	0x91e	; 0x91e <motorControl>
		biggerThan = 0;
	}
	else{
		biggerThan = 1;
	}
	while(*coordinate != coordinateDesired){
     446:	f8 01       	movw	r30, r16
     448:	80 81       	ld	r24, Z
     44a:	91 81       	ldd	r25, Z+1	; 0x01
     44c:	c8 17       	cp	r28, r24
     44e:	d9 07       	cpc	r29, r25
     450:	09 f0       	breq	.+2      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     452:	b8 cf       	rjmp	.-144    	; 0x3c4 <followStraightLine+0x1e>
			delay(200);
			clear();
		}
		motorControl(50, 'F', 0.30);      //moet korte stoot geven zodat de robot over kruispunt heen komt, nog kijken hoe hard / lang
	}
}
     454:	df 91       	pop	r29
     456:	cf 91       	pop	r28
     458:	1f 91       	pop	r17
     45a:	0f 91       	pop	r16
     45c:	ff 90       	pop	r15
     45e:	ef 90       	pop	r14
     460:	08 95       	ret

00000462 <setDirection>:
// 	else{
// 		setDirection(S, directionCurrent);
// 	}
// }

void setDirection(direction directionDesired, direction directionCurrent){
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
     466:	cd b7       	in	r28, 0x3d	; 61
     468:	de b7       	in	r29, 0x3e	; 62
     46a:	60 97       	sbiw	r28, 0x10	; 16
     46c:	0f b6       	in	r0, 0x3f	; 63
     46e:	f8 94       	cli
     470:	de bf       	out	0x3e, r29	; 62
     472:	0f be       	out	0x3f, r0	; 63
     474:	cd bf       	out	0x3d, r28	; 61
	rotation orientation[4][4] ={{X, R, T, L},
     476:	90 e1       	ldi	r25, 0x10	; 16
     478:	e4 e1       	ldi	r30, 0x14	; 20
     47a:	f1 e0       	ldi	r31, 0x01	; 1
     47c:	de 01       	movw	r26, r28
     47e:	11 96       	adiw	r26, 0x01	; 1
     480:	01 90       	ld	r0, Z+
     482:	0d 92       	st	X+, r0
     484:	9a 95       	dec	r25
     486:	e1 f7       	brne	.-8      	; 0x480 <setDirection+0x1e>
	{L, X, R, T},
	{T, L, X, R},
	{R, T, L, X}};
	
	if(directionCurrent != directionDesired){
     488:	68 17       	cp	r22, r24
     48a:	c1 f1       	breq	.+112    	; 0x4fc <setDirection+0x9a>
		switch(orientation[directionDesired][directionCurrent]){
     48c:	e1 e0       	ldi	r30, 0x01	; 1
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	ec 0f       	add	r30, r28
     492:	fd 1f       	adc	r31, r29
     494:	94 e0       	ldi	r25, 0x04	; 4
     496:	89 9f       	mul	r24, r25
     498:	e0 0d       	add	r30, r0
     49a:	f1 1d       	adc	r31, r1
     49c:	11 24       	eor	r1, r1
     49e:	e6 0f       	add	r30, r22
     4a0:	f1 1d       	adc	r31, r1
     4a2:	80 81       	ld	r24, Z
     4a4:	81 30       	cpi	r24, 0x01	; 1
     4a6:	21 f0       	breq	.+8      	; 0x4b0 <setDirection+0x4e>
     4a8:	b8 f0       	brcs	.+46     	; 0x4d8 <setDirection+0x76>
     4aa:	82 30       	cpi	r24, 0x02	; 2
     4ac:	59 f0       	breq	.+22     	; 0x4c4 <setDirection+0x62>
     4ae:	26 c0       	rjmp	.+76     	; 0x4fc <setDirection+0x9a>
			case R:
			motorControl(60, 'R', 0.25);
     4b0:	20 e0       	ldi	r18, 0x00	; 0
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	40 e8       	ldi	r20, 0x80	; 128
     4b6:	5e e3       	ldi	r21, 0x3E	; 62
     4b8:	62 e5       	ldi	r22, 0x52	; 82
     4ba:	8c e3       	ldi	r24, 0x3C	; 60
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	0e 94 8f 04 	call	0x91e	; 0x91e <motorControl>
			directionCurrent = directionDesired;
			break;
     4c2:	1c c0       	rjmp	.+56     	; 0x4fc <setDirection+0x9a>
			case L:
			motorControl(60, 'L', 0.25);
     4c4:	20 e0       	ldi	r18, 0x00	; 0
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	40 e8       	ldi	r20, 0x80	; 128
     4ca:	5e e3       	ldi	r21, 0x3E	; 62
     4cc:	6c e4       	ldi	r22, 0x4C	; 76
     4ce:	8c e3       	ldi	r24, 0x3C	; 60
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	0e 94 8f 04 	call	0x91e	; 0x91e <motorControl>
			directionCurrent = directionDesired;
			break;
     4d6:	12 c0       	rjmp	.+36     	; 0x4fc <setDirection+0x9a>
			case T:
			motorControl(60, 'R', 0.25);
     4d8:	20 e0       	ldi	r18, 0x00	; 0
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	40 e8       	ldi	r20, 0x80	; 128
     4de:	5e e3       	ldi	r21, 0x3E	; 62
     4e0:	62 e5       	ldi	r22, 0x52	; 82
     4e2:	8c e3       	ldi	r24, 0x3C	; 60
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	0e 94 8f 04 	call	0x91e	; 0x91e <motorControl>
			motorControl(60, 'R', 0.25);
     4ea:	20 e0       	ldi	r18, 0x00	; 0
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	40 e8       	ldi	r20, 0x80	; 128
     4f0:	5e e3       	ldi	r21, 0x3E	; 62
     4f2:	62 e5       	ldi	r22, 0x52	; 82
     4f4:	8c e3       	ldi	r24, 0x3C	; 60
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 8f 04 	call	0x91e	; 0x91e <motorControl>
			break;
			clear();
		}
	}
	
}
     4fc:	60 96       	adiw	r28, 0x10	; 16
     4fe:	0f b6       	in	r0, 0x3f	; 63
     500:	f8 94       	cli
     502:	de bf       	out	0x3e, r29	; 62
     504:	0f be       	out	0x3f, r0	; 63
     506:	cd bf       	out	0x3d, r28	; 61
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	08 95       	ret

0000050e <main>:
#include <pololu/3pi.h>
#include <avr/pgmspace.h>
#include <avr/io.h>
#include <avr/interrupt.h>

int main(){
     50e:	6f 92       	push	r6
     510:	7f 92       	push	r7
     512:	8f 92       	push	r8
     514:	9f 92       	push	r9
     516:	af 92       	push	r10
     518:	bf 92       	push	r11
     51a:	cf 92       	push	r12
     51c:	df 92       	push	r13
     51e:	ef 92       	push	r14
     520:	ff 92       	push	r15
     522:	0f 93       	push	r16
     524:	1f 93       	push	r17
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	cd b7       	in	r28, 0x3d	; 61
     52c:	de b7       	in	r29, 0x3e	; 62
     52e:	c4 55       	subi	r28, 0x54	; 84
     530:	d1 09       	sbc	r29, r1
     532:	0f b6       	in	r0, 0x3f	; 63
     534:	f8 94       	cli
     536:	de bf       	out	0x3e, r29	; 62
     538:	0f be       	out	0x3f, r0	; 63
     53a:	cd bf       	out	0x3d, r28	; 61
	initialize();
     53c:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <initialize>
	
	int orderX[sizeOfOrder] ={1, 1, 1, 1};
     540:	88 e0       	ldi	r24, 0x08	; 8
     542:	e4 e2       	ldi	r30, 0x24	; 36
     544:	f1 e0       	ldi	r31, 0x01	; 1
     546:	de 01       	movw	r26, r28
     548:	11 96       	adiw	r26, 0x01	; 1
     54a:	01 90       	ld	r0, Z+
     54c:	0d 92       	st	X+, r0
     54e:	8a 95       	dec	r24
     550:	e1 f7       	brne	.-8      	; 0x54a <main+0x3c>
	int orderY[sizeOfOrder] ={4, 3, 3, 3};
     552:	88 e0       	ldi	r24, 0x08	; 8
     554:	ec e2       	ldi	r30, 0x2C	; 44
     556:	f1 e0       	ldi	r31, 0x01	; 1
     558:	de 01       	movw	r26, r28
     55a:	19 96       	adiw	r26, 0x09	; 9
     55c:	01 90       	ld	r0, Z+
     55e:	0d 92       	st	X+, r0
     560:	8a 95       	dec	r24
     562:	e1 f7       	brne	.-8      	; 0x55c <main+0x4e>
	//wirMain(orderX, orderY);
	sortOrder(orderX, orderY);
     564:	be 01       	movw	r22, r28
     566:	67 5f       	subi	r22, 0xF7	; 247
     568:	7f 4f       	sbci	r23, 0xFF	; 255
     56a:	ce 01       	movw	r24, r28
     56c:	01 96       	adiw	r24, 0x01	; 1
     56e:	0e 94 9d 00 	call	0x13a	; 0x13a <sortOrder>
	
	int routes[4][8];
	readGrid(routes);
     572:	ce 01       	movw	r24, r28
     574:	41 96       	adiw	r24, 0x11	; 17
     576:	0e 94 9b 01 	call	0x336	; 0x336 <readGrid>
	
	int intersectnum = 0, endOfRoute = 0, orderNum = 0, xCoordinate = 0, yCoordinate = 0, x = 0;
     57a:	63 96       	adiw	r28, 0x13	; 19
     57c:	1f ae       	std	Y+63, r1	; 0x3f
     57e:	1e ae       	std	Y+62, r1	; 0x3e
     580:	63 97       	sbiw	r28, 0x13	; 19
     582:	65 96       	adiw	r28, 0x15	; 21
     584:	1f ae       	std	Y+63, r1	; 0x3f
     586:	1e ae       	std	Y+62, r1	; 0x3e
     588:	65 97       	sbiw	r28, 0x15	; 21
     58a:	c1 2c       	mov	r12, r1
     58c:	d1 2c       	mov	r13, r1
     58e:	00 e0       	ldi	r16, 0x00	; 0
     590:	10 e0       	ldi	r17, 0x00	; 0
     592:	e1 2c       	mov	r14, r1
     594:	f1 2c       	mov	r15, r1
     596:	a1 2c       	mov	r10, r1
     598:	b1 2c       	mov	r11, r1
					delay_ms(250);
				}
				followStraightLine(&xCoordinate, orderX[orderNum]);
			}
			if(orderX[orderNum] == xCoordinate){
				x = 1;
     59a:	66 24       	eor	r6, r6
     59c:	63 94       	inc	r6
     59e:	71 2c       	mov	r7, r1
	}*/
	
	
	while (orderNum != sizeOfOrder)
	{
		read_line_sensors(sensors,IR_EMITTERS_ON);
     5a0:	61 e0       	ldi	r22, 0x01	; 1
     5a2:	85 e5       	ldi	r24, 0x55	; 85
     5a4:	92 e0       	ldi	r25, 0x02	; 2
     5a6:	0e 94 84 11 	call	0x2308	; 0x2308 <read_line_sensors>
		if (!checkAfslag()){
     5aa:	0e 94 54 09 	call	0x12a8	; 0x12a8 <checkAfslag>
     5ae:	89 2b       	or	r24, r25
     5b0:	19 f4       	brne	.+6      	; 0x5b8 <main+0xaa>
			followLine();
     5b2:	0e 94 69 09 	call	0x12d2	; 0x12d2 <followLine>
     5b6:	64 c0       	rjmp	.+200    	; 0x680 <main+0x172>
		}
		
		else if (!endOfRoute){
     5b8:	e1 14       	cp	r14, r1
     5ba:	f1 04       	cpc	r15, r1
     5bc:	09 f0       	breq	.+2      	; 0x5c0 <main+0xb2>
     5be:	64 c0       	rjmp	.+200    	; 0x688 <main+0x17a>
			set_motors(60,60);
     5c0:	6c e3       	ldi	r22, 0x3C	; 60
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	8c e3       	ldi	r24, 0x3C	; 60
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <set_motors>
			play_from_program_space(PSTR(">f32>>a32"));
     5cc:	8e ea       	ldi	r24, 0xAE	; 174
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <play_from_program_space>
			delay_ms(190);
     5d4:	8e eb       	ldi	r24, 0xBE	; 190
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	0e 94 32 11 	call	0x2264	; 0x2264 <delay_ms>
			set_motors(0,0);
     5dc:	60 e0       	ldi	r22, 0x00	; 0
     5de:	70 e0       	ldi	r23, 0x00	; 0
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <set_motors>
			
			switch(routes[0][intersectnum]){
     5e8:	f5 01       	movw	r30, r10
     5ea:	ee 0f       	add	r30, r30
     5ec:	ff 1f       	adc	r31, r31
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	8c 0f       	add	r24, r28
     5f4:	9d 1f       	adc	r25, r29
     5f6:	e8 0f       	add	r30, r24
     5f8:	f9 1f       	adc	r31, r25
     5fa:	80 89       	ldd	r24, Z+16	; 0x10
     5fc:	91 89       	ldd	r25, Z+17	; 0x11
     5fe:	82 30       	cpi	r24, 0x02	; 2
     600:	91 05       	cpc	r25, r1
     602:	b9 f0       	breq	.+46     	; 0x632 <main+0x124>
     604:	1c f4       	brge	.+6      	; 0x60c <main+0xfe>
     606:	01 97       	sbiw	r24, 0x01	; 1
     608:	39 f0       	breq	.+14     	; 0x618 <main+0x10a>
     60a:	3a c0       	rjmp	.+116    	; 0x680 <main+0x172>
     60c:	83 30       	cpi	r24, 0x03	; 3
     60e:	91 05       	cpc	r25, r1
     610:	e9 f0       	breq	.+58     	; 0x64c <main+0x13e>
     612:	05 97       	sbiw	r24, 0x05	; 5
     614:	f9 f0       	breq	.+62     	; 0x654 <main+0x146>
     616:	34 c0       	rjmp	.+104    	; 0x680 <main+0x172>
				case 1:
				motorControl(60, 'R', 0.25);
     618:	20 e0       	ldi	r18, 0x00	; 0
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	40 e8       	ldi	r20, 0x80	; 128
     61e:	5e e3       	ldi	r21, 0x3E	; 62
     620:	62 e5       	ldi	r22, 0x52	; 82
     622:	8c e3       	ldi	r24, 0x3C	; 60
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	0e 94 8f 04 	call	0x91e	; 0x91e <motorControl>
				intersectnum++;
     62a:	9f ef       	ldi	r25, 0xFF	; 255
     62c:	a9 1a       	sub	r10, r25
     62e:	b9 0a       	sbc	r11, r25
				break;
     630:	f3 c0       	rjmp	.+486    	; 0x818 <main+0x30a>
				case 2:
				motorControl(60, 'L', 0.25);
     632:	20 e0       	ldi	r18, 0x00	; 0
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	40 e8       	ldi	r20, 0x80	; 128
     638:	5e e3       	ldi	r21, 0x3E	; 62
     63a:	6c e4       	ldi	r22, 0x4C	; 76
     63c:	8c e3       	ldi	r24, 0x3C	; 60
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 8f 04 	call	0x91e	; 0x91e <motorControl>
				intersectnum++;
     644:	ef ef       	ldi	r30, 0xFF	; 255
     646:	ae 1a       	sub	r10, r30
     648:	be 0a       	sbc	r11, r30
				break;
     64a:	e6 c0       	rjmp	.+460    	; 0x818 <main+0x30a>
				case 3:
				//motorControl(60, 'F', 0.89);
				intersectnum++;
     64c:	ff ef       	ldi	r31, 0xFF	; 255
     64e:	af 1a       	sub	r10, r31
     650:	bf 0a       	sbc	r11, r31
				break;
     652:	e2 c0       	rjmp	.+452    	; 0x818 <main+0x30a>
				case 5:
				motorControl(0, 'F', 0.40);
     654:	2d ec       	ldi	r18, 0xCD	; 205
     656:	3c ec       	ldi	r19, 0xCC	; 204
     658:	4c ec       	ldi	r20, 0xCC	; 204
     65a:	5e e3       	ldi	r21, 0x3E	; 62
     65c:	66 e4       	ldi	r22, 0x46	; 70
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	0e 94 8f 04 	call	0x91e	; 0x91e <motorControl>
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
     666:	5f 9a       	sbi	0x0b, 7	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     668:	57 9a       	sbi	0x0a, 7	; 10
				green_led(1);                            //Robot has reached destination
				play_from_program_space(PSTR(">f32>>a32"));
     66a:	84 ea       	ldi	r24, 0xA4	; 164
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <play_from_program_space>
				delay_ms(1000);
     672:	88 ee       	ldi	r24, 0xE8	; 232
     674:	93 e0       	ldi	r25, 0x03	; 3
     676:	0e 94 32 11 	call	0x2264	; 0x2264 <delay_ms>
				endOfRoute = 1;
     67a:	e6 2c       	mov	r14, r6
     67c:	f7 2c       	mov	r15, r7
				break;
     67e:	04 c0       	rjmp	.+8      	; 0x688 <main+0x17a>
			}
		}
		if(endOfRoute){
     680:	e1 14       	cp	r14, r1
     682:	f1 04       	cpc	r15, r1
     684:	09 f4       	brne	.+2      	; 0x688 <main+0x17a>
     686:	c8 c0       	rjmp	.+400    	; 0x818 <main+0x30a>
			if((orderX[orderNum] != xCoordinate) && (x == 0)){
     688:	f8 01       	movw	r30, r16
     68a:	ee 0f       	add	r30, r30
     68c:	ff 1f       	adc	r31, r31
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	8c 0f       	add	r24, r28
     694:	9d 1f       	adc	r25, r29
     696:	e8 0f       	add	r30, r24
     698:	f9 1f       	adc	r31, r25
     69a:	20 81       	ld	r18, Z
     69c:	31 81       	ldd	r19, Z+1	; 0x01
     69e:	63 96       	adiw	r28, 0x13	; 19
     6a0:	8e ad       	ldd	r24, Y+62	; 0x3e
     6a2:	9f ad       	ldd	r25, Y+63	; 0x3f
     6a4:	63 97       	sbiw	r28, 0x13	; 19
     6a6:	28 17       	cp	r18, r24
     6a8:	39 07       	cpc	r19, r25
     6aa:	09 f4       	brne	.+2      	; 0x6ae <main+0x1a0>
     6ac:	e2 c0       	rjmp	.+452    	; 0x872 <main+0x364>
     6ae:	c1 14       	cp	r12, r1
     6b0:	d1 04       	cpc	r13, r1
     6b2:	09 f0       	breq	.+2      	; 0x6b6 <main+0x1a8>
     6b4:	08 c1       	rjmp	.+528    	; 0x8c6 <main+0x3b8>
				if(orderX[orderNum] > xCoordinate){
     6b6:	82 17       	cp	r24, r18
     6b8:	93 07       	cpc	r25, r19
     6ba:	44 f4       	brge	.+16     	; 0x6cc <main+0x1be>
					setDirection(W, directionCurrent);
     6bc:	60 e0       	ldi	r22, 0x00	; 0
     6be:	83 e0       	ldi	r24, 0x03	; 3
     6c0:	0e 94 31 02 	call	0x462	; 0x462 <setDirection>
					delay_ms(250);
     6c4:	8a ef       	ldi	r24, 0xFA	; 250
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	0e 94 32 11 	call	0x2264	; 0x2264 <delay_ms>
				}
				if(orderX[orderNum] < xCoordinate){
     6cc:	f8 01       	movw	r30, r16
     6ce:	ee 0f       	add	r30, r30
     6d0:	ff 1f       	adc	r31, r31
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	8c 0f       	add	r24, r28
     6d8:	9d 1f       	adc	r25, r29
     6da:	e8 0f       	add	r30, r24
     6dc:	f9 1f       	adc	r31, r25
     6de:	20 81       	ld	r18, Z
     6e0:	31 81       	ldd	r19, Z+1	; 0x01
     6e2:	63 96       	adiw	r28, 0x13	; 19
     6e4:	8e ad       	ldd	r24, Y+62	; 0x3e
     6e6:	9f ad       	ldd	r25, Y+63	; 0x3f
     6e8:	63 97       	sbiw	r28, 0x13	; 19
     6ea:	28 17       	cp	r18, r24
     6ec:	39 07       	cpc	r19, r25
     6ee:	44 f4       	brge	.+16     	; 0x700 <main+0x1f2>
					setDirection(E, directionCurrent);
     6f0:	60 e0       	ldi	r22, 0x00	; 0
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	0e 94 31 02 	call	0x462	; 0x462 <setDirection>
					delay_ms(250);
     6f8:	8a ef       	ldi	r24, 0xFA	; 250
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	0e 94 32 11 	call	0x2264	; 0x2264 <delay_ms>
				}
				followStraightLine(&xCoordinate, orderX[orderNum]);
     700:	48 01       	movw	r8, r16
     702:	88 0c       	add	r8, r8
     704:	99 1c       	adc	r9, r9
     706:	e1 e0       	ldi	r30, 0x01	; 1
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	ec 0f       	add	r30, r28
     70c:	fd 1f       	adc	r31, r29
     70e:	8e 0e       	add	r8, r30
     710:	9f 1e       	adc	r9, r31
     712:	f4 01       	movw	r30, r8
     714:	60 81       	ld	r22, Z
     716:	71 81       	ldd	r23, Z+1	; 0x01
     718:	ce 01       	movw	r24, r28
     71a:	8f 5a       	subi	r24, 0xAF	; 175
     71c:	9f 4f       	sbci	r25, 0xFF	; 255
     71e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <followStraightLine>
			}
			if(orderX[orderNum] == xCoordinate){
     722:	f4 01       	movw	r30, r8
     724:	20 81       	ld	r18, Z
     726:	31 81       	ldd	r19, Z+1	; 0x01
     728:	63 96       	adiw	r28, 0x13	; 19
     72a:	8e ad       	ldd	r24, Y+62	; 0x3e
     72c:	9f ad       	ldd	r25, Y+63	; 0x3f
     72e:	63 97       	sbiw	r28, 0x13	; 19
     730:	28 17       	cp	r18, r24
     732:	39 07       	cpc	r19, r25
     734:	09 f0       	breq	.+2      	; 0x738 <main+0x22a>
     736:	b3 c0       	rjmp	.+358    	; 0x89e <main+0x390>
     738:	74 c0       	rjmp	.+232    	; 0x822 <main+0x314>
				x = 1;
			}
			if((orderY[orderNum] != yCoordinate) && (x == 1)){
     73a:	f1 e0       	ldi	r31, 0x01	; 1
     73c:	cf 16       	cp	r12, r31
     73e:	d1 04       	cpc	r13, r1
     740:	09 f0       	breq	.+2      	; 0x744 <main+0x236>
     742:	6a c0       	rjmp	.+212    	; 0x818 <main+0x30a>
				if(orderY[orderNum] > yCoordinate){
     744:	82 17       	cp	r24, r18
     746:	93 07       	cpc	r25, r19
     748:	44 f4       	brge	.+16     	; 0x75a <main+0x24c>
					setDirection(N, directionCurrent);
     74a:	60 e0       	ldi	r22, 0x00	; 0
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	0e 94 31 02 	call	0x462	; 0x462 <setDirection>
					delay_ms(250);
     752:	8a ef       	ldi	r24, 0xFA	; 250
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	0e 94 32 11 	call	0x2264	; 0x2264 <delay_ms>
				}
				if(orderY[orderNum] < yCoordinate){
     75a:	f8 01       	movw	r30, r16
     75c:	ee 0f       	add	r30, r30
     75e:	ff 1f       	adc	r31, r31
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	8c 0f       	add	r24, r28
     766:	9d 1f       	adc	r25, r29
     768:	e8 0f       	add	r30, r24
     76a:	f9 1f       	adc	r31, r25
     76c:	20 85       	ldd	r18, Z+8	; 0x08
     76e:	31 85       	ldd	r19, Z+9	; 0x09
     770:	65 96       	adiw	r28, 0x15	; 21
     772:	8e ad       	ldd	r24, Y+62	; 0x3e
     774:	9f ad       	ldd	r25, Y+63	; 0x3f
     776:	65 97       	sbiw	r28, 0x15	; 21
     778:	28 17       	cp	r18, r24
     77a:	39 07       	cpc	r19, r25
     77c:	44 f4       	brge	.+16     	; 0x78e <main+0x280>
					setDirection(S, directionCurrent);
     77e:	60 e0       	ldi	r22, 0x00	; 0
     780:	82 e0       	ldi	r24, 0x02	; 2
     782:	0e 94 31 02 	call	0x462	; 0x462 <setDirection>
					delay_ms(250);
     786:	8a ef       	ldi	r24, 0xFA	; 250
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	0e 94 32 11 	call	0x2264	; 0x2264 <delay_ms>
				}
				followStraightLine(&yCoordinate, orderY[orderNum]);
     78e:	68 01       	movw	r12, r16
     790:	cc 0c       	add	r12, r12
     792:	dd 1c       	adc	r13, r13
     794:	e1 e0       	ldi	r30, 0x01	; 1
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	ec 0f       	add	r30, r28
     79a:	fd 1f       	adc	r31, r29
     79c:	ce 0e       	add	r12, r30
     79e:	df 1e       	adc	r13, r31
     7a0:	f6 01       	movw	r30, r12
     7a2:	60 85       	ldd	r22, Z+8	; 0x08
     7a4:	71 85       	ldd	r23, Z+9	; 0x09
     7a6:	ce 01       	movw	r24, r28
     7a8:	8d 5a       	subi	r24, 0xAD	; 173
     7aa:	9f 4f       	sbci	r25, 0xFF	; 255
     7ac:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <followStraightLine>
			}
			if((orderX[orderNum] == xCoordinate) && (orderY[orderNum] == yCoordinate)){
     7b0:	f6 01       	movw	r30, r12
     7b2:	20 81       	ld	r18, Z
     7b4:	31 81       	ldd	r19, Z+1	; 0x01
     7b6:	63 96       	adiw	r28, 0x13	; 19
     7b8:	8e ad       	ldd	r24, Y+62	; 0x3e
     7ba:	9f ad       	ldd	r25, Y+63	; 0x3f
     7bc:	63 97       	sbiw	r28, 0x13	; 19
     7be:	28 17       	cp	r18, r24
     7c0:	39 07       	cpc	r19, r25
     7c2:	29 f5       	brne	.+74     	; 0x80e <main+0x300>
     7c4:	f8 01       	movw	r30, r16
     7c6:	ee 0f       	add	r30, r30
     7c8:	ff 1f       	adc	r31, r31
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	8c 0f       	add	r24, r28
     7d0:	9d 1f       	adc	r25, r29
     7d2:	e8 0f       	add	r30, r24
     7d4:	f9 1f       	adc	r31, r25
     7d6:	20 85       	ldd	r18, Z+8	; 0x08
     7d8:	31 85       	ldd	r19, Z+9	; 0x09
     7da:	65 96       	adiw	r28, 0x15	; 21
     7dc:	8e ad       	ldd	r24, Y+62	; 0x3e
     7de:	9f ad       	ldd	r25, Y+63	; 0x3f
     7e0:	65 97       	sbiw	r28, 0x15	; 21
     7e2:	28 17       	cp	r18, r24
     7e4:	39 07       	cpc	r19, r25
     7e6:	b1 f4       	brne	.+44     	; 0x814 <main+0x306>
     7e8:	c6 2c       	mov	r12, r6
     7ea:	d7 2c       	mov	r13, r7
				set_motors(0,0);               //moeten we nog even naar kijken, hij moet gelijk stilstaan
     7ec:	60 e0       	ldi	r22, 0x00	; 0
     7ee:	70 e0       	ldi	r23, 0x00	; 0
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <set_motors>
				orderNum++;
     7f8:	0f 5f       	subi	r16, 0xFF	; 255
     7fa:	1f 4f       	sbci	r17, 0xFF	; 255
				play_from_program_space(PSTR(">f32>>a32"));
     7fc:	8a e9       	ldi	r24, 0x9A	; 154
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <play_from_program_space>
     804:	88 eb       	ldi	r24, 0xB8	; 184
     806:	9b e0       	ldi	r25, 0x0B	; 11
     808:	0e 94 32 11 	call	0x2264	; 0x2264 <delay_ms>
     80c:	05 c0       	rjmp	.+10     	; 0x818 <main+0x30a>
     80e:	c6 2c       	mov	r12, r6
     810:	d7 2c       	mov	r13, r7
     812:	02 c0       	rjmp	.+4      	; 0x818 <main+0x30a>
     814:	c6 2c       	mov	r12, r6
     816:	d7 2c       	mov	r13, r7
	delay_ms(1000);
	clear();
	}*/
	
	
	while (orderNum != sizeOfOrder)
     818:	04 30       	cpi	r16, 0x04	; 4
     81a:	11 05       	cpc	r17, r1
     81c:	09 f0       	breq	.+2      	; 0x820 <main+0x312>
     81e:	c0 ce       	rjmp	.-640    	; 0x5a0 <main+0x92>
     820:	66 c0       	rjmp	.+204    	; 0x8ee <main+0x3e0>
				followStraightLine(&xCoordinate, orderX[orderNum]);
			}
			if(orderX[orderNum] == xCoordinate){
				x = 1;
			}
			if((orderY[orderNum] != yCoordinate) && (x == 1)){
     822:	f8 01       	movw	r30, r16
     824:	ee 0f       	add	r30, r30
     826:	ff 1f       	adc	r31, r31
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	8c 0f       	add	r24, r28
     82e:	9d 1f       	adc	r25, r29
     830:	e8 0f       	add	r30, r24
     832:	f9 1f       	adc	r31, r25
     834:	20 85       	ldd	r18, Z+8	; 0x08
     836:	31 85       	ldd	r19, Z+9	; 0x09
     838:	65 96       	adiw	r28, 0x15	; 21
     83a:	8e ad       	ldd	r24, Y+62	; 0x3e
     83c:	9f ad       	ldd	r25, Y+63	; 0x3f
     83e:	65 97       	sbiw	r28, 0x15	; 21
     840:	82 17       	cp	r24, r18
     842:	93 07       	cpc	r25, r19
     844:	09 f0       	breq	.+2      	; 0x848 <main+0x33a>
     846:	7e cf       	rjmp	.-260    	; 0x744 <main+0x236>
     848:	bd cf       	rjmp	.-134    	; 0x7c4 <main+0x2b6>
					setDirection(S, directionCurrent);
					delay_ms(250);
				}
				followStraightLine(&yCoordinate, orderY[orderNum]);
			}
			if((orderX[orderNum] == xCoordinate) && (orderY[orderNum] == yCoordinate)){
     84a:	f8 01       	movw	r30, r16
     84c:	ee 0f       	add	r30, r30
     84e:	ff 1f       	adc	r31, r31
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	8c 0f       	add	r24, r28
     856:	9d 1f       	adc	r25, r29
     858:	e8 0f       	add	r30, r24
     85a:	f9 1f       	adc	r31, r25
     85c:	20 81       	ld	r18, Z
     85e:	31 81       	ldd	r19, Z+1	; 0x01
     860:	63 96       	adiw	r28, 0x13	; 19
     862:	8e ad       	ldd	r24, Y+62	; 0x3e
     864:	9f ad       	ldd	r25, Y+63	; 0x3f
     866:	63 97       	sbiw	r28, 0x13	; 19
     868:	28 17       	cp	r18, r24
     86a:	39 07       	cpc	r19, r25
     86c:	09 f4       	brne	.+2      	; 0x870 <main+0x362>
     86e:	be cf       	rjmp	.-132    	; 0x7ec <main+0x2de>
     870:	d3 cf       	rjmp	.-90     	; 0x818 <main+0x30a>
				followStraightLine(&xCoordinate, orderX[orderNum]);
			}
			if(orderX[orderNum] == xCoordinate){
				x = 1;
			}
			if((orderY[orderNum] != yCoordinate) && (x == 1)){
     872:	f8 01       	movw	r30, r16
     874:	ee 0f       	add	r30, r30
     876:	ff 1f       	adc	r31, r31
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	8c 0f       	add	r24, r28
     87e:	9d 1f       	adc	r25, r29
     880:	e8 0f       	add	r30, r24
     882:	f9 1f       	adc	r31, r25
     884:	20 85       	ldd	r18, Z+8	; 0x08
     886:	31 85       	ldd	r19, Z+9	; 0x09
     888:	65 96       	adiw	r28, 0x15	; 21
     88a:	8e ad       	ldd	r24, Y+62	; 0x3e
     88c:	9f ad       	ldd	r25, Y+63	; 0x3f
     88e:	65 97       	sbiw	r28, 0x15	; 21
     890:	82 17       	cp	r24, r18
     892:	93 07       	cpc	r25, r19
     894:	09 f0       	breq	.+2      	; 0x898 <main+0x38a>
     896:	56 cf       	rjmp	.-340    	; 0x744 <main+0x236>
					delay_ms(250);
				}
				followStraightLine(&xCoordinate, orderX[orderNum]);
			}
			if(orderX[orderNum] == xCoordinate){
				x = 1;
     898:	c6 2c       	mov	r12, r6
     89a:	d7 2c       	mov	r13, r7
     89c:	d6 cf       	rjmp	.-84     	; 0x84a <main+0x33c>
			}
			if((orderY[orderNum] != yCoordinate) && (x == 1)){
     89e:	f8 01       	movw	r30, r16
     8a0:	ee 0f       	add	r30, r30
     8a2:	ff 1f       	adc	r31, r31
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	8c 0f       	add	r24, r28
     8aa:	9d 1f       	adc	r25, r29
     8ac:	e8 0f       	add	r30, r24
     8ae:	f9 1f       	adc	r31, r25
     8b0:	20 85       	ldd	r18, Z+8	; 0x08
     8b2:	31 85       	ldd	r19, Z+9	; 0x09
     8b4:	65 96       	adiw	r28, 0x15	; 21
     8b6:	8e ad       	ldd	r24, Y+62	; 0x3e
     8b8:	9f ad       	ldd	r25, Y+63	; 0x3f
     8ba:	65 97       	sbiw	r28, 0x15	; 21
     8bc:	28 17       	cp	r18, r24
     8be:	39 07       	cpc	r19, r25
     8c0:	09 f0       	breq	.+2      	; 0x8c4 <main+0x3b6>
     8c2:	aa cf       	rjmp	.-172    	; 0x818 <main+0x30a>
     8c4:	c2 cf       	rjmp	.-124    	; 0x84a <main+0x33c>
     8c6:	f8 01       	movw	r30, r16
     8c8:	ee 0f       	add	r30, r30
     8ca:	ff 1f       	adc	r31, r31
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	8c 0f       	add	r24, r28
     8d2:	9d 1f       	adc	r25, r29
     8d4:	e8 0f       	add	r30, r24
     8d6:	f9 1f       	adc	r31, r25
     8d8:	20 85       	ldd	r18, Z+8	; 0x08
     8da:	31 85       	ldd	r19, Z+9	; 0x09
     8dc:	65 96       	adiw	r28, 0x15	; 21
     8de:	8e ad       	ldd	r24, Y+62	; 0x3e
     8e0:	9f ad       	ldd	r25, Y+63	; 0x3f
     8e2:	65 97       	sbiw	r28, 0x15	; 21
     8e4:	82 17       	cp	r24, r18
     8e6:	93 07       	cpc	r25, r19
     8e8:	09 f4       	brne	.+2      	; 0x8ec <main+0x3de>
     8ea:	96 cf       	rjmp	.-212    	; 0x818 <main+0x30a>
     8ec:	26 cf       	rjmp	.-436    	; 0x73a <main+0x22c>
				play_from_program_space(PSTR(">f32>>a32"));
				delay(3000);
			}			
		}
	}	
}
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	cc 5a       	subi	r28, 0xAC	; 172
     8f4:	df 4f       	sbci	r29, 0xFF	; 255
     8f6:	0f b6       	in	r0, 0x3f	; 63
     8f8:	f8 94       	cli
     8fa:	de bf       	out	0x3e, r29	; 62
     8fc:	0f be       	out	0x3f, r0	; 63
     8fe:	cd bf       	out	0x3d, r28	; 61
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	1f 91       	pop	r17
     906:	0f 91       	pop	r16
     908:	ff 90       	pop	r15
     90a:	ef 90       	pop	r14
     90c:	df 90       	pop	r13
     90e:	cf 90       	pop	r12
     910:	bf 90       	pop	r11
     912:	af 90       	pop	r10
     914:	9f 90       	pop	r9
     916:	8f 90       	pop	r8
     918:	7f 90       	pop	r7
     91a:	6f 90       	pop	r6
     91c:	08 95       	ret

0000091e <motorControl>:

int speedCurrent = 0;			//Defining the current speeds.
int speedCurrentRight = 0;
int speedCurrentLeft = 0;

void motorControl(int speed, char direction, float aggressionFactor){		//This function is an upgrade over the existing motor control function written by Pololu. This function moves the robot with an entered speed and acceleration time in a desired direction.
     91e:	2f 92       	push	r2
     920:	3f 92       	push	r3
     922:	4f 92       	push	r4
     924:	5f 92       	push	r5
     926:	6f 92       	push	r6
     928:	7f 92       	push	r7
     92a:	8f 92       	push	r8
     92c:	9f 92       	push	r9
     92e:	af 92       	push	r10
     930:	bf 92       	push	r11
     932:	cf 92       	push	r12
     934:	df 92       	push	r13
     936:	ef 92       	push	r14
     938:	ff 92       	push	r15
     93a:	0f 93       	push	r16
     93c:	1f 93       	push	r17
     93e:	cf 93       	push	r28
     940:	df 93       	push	r29
     942:	cd b7       	in	r28, 0x3d	; 61
     944:	de b7       	in	r29, 0x3e	; 62
     946:	66 97       	sbiw	r28, 0x16	; 22
     948:	0f b6       	in	r0, 0x3f	; 63
     94a:	f8 94       	cli
     94c:	de bf       	out	0x3e, r29	; 62
     94e:	0f be       	out	0x3f, r0	; 63
     950:	cd bf       	out	0x3d, r28	; 61
     952:	1c 01       	movw	r2, r24
     954:	29 83       	std	Y+1, r18	; 0x01
     956:	3a 83       	std	Y+2, r19	; 0x02
     958:	4b 83       	std	Y+3, r20	; 0x03
     95a:	5c 83       	std	Y+4, r21	; 0x04
	int setSpeedRight = 0;
	int setSpeedLeft = 0;
	
	//directions direction;

	switch (direction){														//This switch case switches between the directions based on the user input.
     95c:	66 34       	cpi	r22, 0x46	; 70
     95e:	61 f0       	breq	.+24     	; 0x978 <motorControl+0x5a>
     960:	20 f4       	brcc	.+8      	; 0x96a <motorControl+0x4c>
     962:	62 34       	cpi	r22, 0x42	; 66
     964:	09 f4       	brne	.+2      	; 0x968 <motorControl+0x4a>
     966:	95 c0       	rjmp	.+298    	; 0xa92 <motorControl+0x174>
     968:	08 c4       	rjmp	.+2064   	; 0x117a <motorControl+0x85c>
     96a:	6c 34       	cpi	r22, 0x4C	; 76
     96c:	09 f4       	brne	.+2      	; 0x970 <motorControl+0x52>
     96e:	a9 c2       	rjmp	.+1362   	; 0xec2 <motorControl+0x5a4>
     970:	62 35       	cpi	r22, 0x52	; 82
     972:	09 f4       	brne	.+2      	; 0x976 <motorControl+0x58>
     974:	1b c1       	rjmp	.+566    	; 0xbac <motorControl+0x28e>
     976:	01 c4       	rjmp	.+2050   	; 0x117a <motorControl+0x85c>
		case 'F':															//This case handles the forward movement of the 3PI robot.
		
		setSpeed = speed - speedCurrent;
     978:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <speedCurrent>
     97c:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <speedCurrent+0x1>
     980:	91 01       	movw	r18, r2
     982:	28 1b       	sub	r18, r24
     984:	39 0b       	sbc	r19, r25
     986:	45 e6       	ldi	r20, 0x65	; 101
     988:	50 e0       	ldi	r21, 0x00	; 0
     98a:	5a 87       	std	Y+10, r21	; 0x0a
     98c:	49 87       	std	Y+9, r20	; 0x09
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){	//This for loop increases the speed of the current speed to the desired speed with a total of a 100 increments.
     98e:	41 2c       	mov	r4, r1
     990:	51 2c       	mov	r5, r1
     992:	32 01       	movw	r6, r4
			timerStart = get_ms();
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2*M_PI ) ) * sin ( 2* M_PI * accelerationCounter ) ) );		//This function transfers the input speed to a segmented speed increase based on the swept sinusoidal curve.
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     994:	03 2e       	mov	r0, r19
     996:	00 0c       	add	r0, r0
     998:	44 0b       	sbc	r20, r20
     99a:	55 0b       	sbc	r21, r21
     99c:	2d 83       	std	Y+5, r18	; 0x05
     99e:	3e 83       	std	Y+6, r19	; 0x06
     9a0:	4f 83       	std	Y+7, r20	; 0x07
     9a2:	58 87       	std	Y+8, r21	; 0x08
		case 'F':															//This case handles the forward movement of the 3PI robot.
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){	//This for loop increases the speed of the current speed to the desired speed with a total of a 100 increments.
			timerStart = get_ms();
     9a4:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <get_ms>
     9a8:	8b 01       	movw	r16, r22
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2*M_PI ) ) * sin ( 2* M_PI * accelerationCounter ) ) );		//This function transfers the input speed to a segmented speed increase based on the swept sinusoidal curve.
     9aa:	2b ed       	ldi	r18, 0xDB	; 219
     9ac:	3f e0       	ldi	r19, 0x0F	; 15
     9ae:	49 ec       	ldi	r20, 0xC9	; 201
     9b0:	50 e4       	ldi	r21, 0x40	; 64
     9b2:	c3 01       	movw	r24, r6
     9b4:	b2 01       	movw	r22, r4
     9b6:	0e 94 0a 19 	call	0x3214	; 0x3214 <__mulsf3>
     9ba:	0e 94 77 19 	call	0x32ee	; 0x32ee <sin>
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     9be:	23 e8       	ldi	r18, 0x83	; 131
     9c0:	39 ef       	ldi	r19, 0xF9	; 249
     9c2:	42 e2       	ldi	r20, 0x22	; 34
     9c4:	5e e3       	ldi	r21, 0x3E	; 62
     9c6:	0e 94 0a 19 	call	0x3214	; 0x3214 <__mulsf3>
     9ca:	9b 01       	movw	r18, r22
     9cc:	ac 01       	movw	r20, r24
     9ce:	c3 01       	movw	r24, r6
     9d0:	b2 01       	movw	r22, r4
     9d2:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <__subsf3>
     9d6:	4b 01       	movw	r8, r22
     9d8:	5c 01       	movw	r10, r24
     9da:	6d 81       	ldd	r22, Y+5	; 0x05
     9dc:	7e 81       	ldd	r23, Y+6	; 0x06
     9de:	8f 81       	ldd	r24, Y+7	; 0x07
     9e0:	98 85       	ldd	r25, Y+8	; 0x08
     9e2:	0e 94 55 18 	call	0x30aa	; 0x30aa <__floatsisf>
     9e6:	9b 01       	movw	r18, r22
     9e8:	ac 01       	movw	r20, r24
     9ea:	c5 01       	movw	r24, r10
     9ec:	b4 01       	movw	r22, r8
     9ee:	0e 94 0a 19 	call	0x3214	; 0x3214 <__mulsf3>
     9f2:	4b 01       	movw	r8, r22
     9f4:	5c 01       	movw	r10, r24
     9f6:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <speedCurrent>
     9fa:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <speedCurrent+0x1>
     9fe:	07 2e       	mov	r0, r23
     a00:	00 0c       	add	r0, r0
     a02:	88 0b       	sbc	r24, r24
     a04:	99 0b       	sbc	r25, r25
     a06:	0e 94 55 18 	call	0x30aa	; 0x30aa <__floatsisf>
     a0a:	9b 01       	movw	r18, r22
     a0c:	ac 01       	movw	r20, r24
     a0e:	c5 01       	movw	r24, r10
     a10:	b4 01       	movw	r22, r8
     a12:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <__addsf3>
     a16:	0e 94 1d 18 	call	0x303a	; 0x303a <__fixsfsi>
     a1a:	dc 01       	movw	r26, r24
     a1c:	cb 01       	movw	r24, r22
     a1e:	bc 01       	movw	r22, r24
     a20:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {											//This while loop temporarily freezes the system to make sure that the increments are spaced properly to facilitate a fluent and consequent increase in speed.
     a24:	48 01       	movw	r8, r16
     a26:	11 0f       	add	r17, r17
     a28:	aa 08       	sbc	r10, r10
     a2a:	bb 08       	sbc	r11, r11
     a2c:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <get_ms>
     a30:	68 19       	sub	r22, r8
     a32:	79 09       	sbc	r23, r9
     a34:	8a 09       	sbc	r24, r10
     a36:	9b 09       	sbc	r25, r11
     a38:	0e 94 53 18 	call	0x30a6	; 0x30a6 <__floatunsisf>
     a3c:	6b 01       	movw	r12, r22
     a3e:	7c 01       	movw	r14, r24
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 e2       	ldi	r20, 0x20	; 32
     a46:	51 e4       	ldi	r21, 0x41	; 65
     a48:	69 81       	ldd	r22, Y+1	; 0x01
     a4a:	7a 81       	ldd	r23, Y+2	; 0x02
     a4c:	8b 81       	ldd	r24, Y+3	; 0x03
     a4e:	9c 81       	ldd	r25, Y+4	; 0x04
     a50:	0e 94 0a 19 	call	0x3214	; 0x3214 <__mulsf3>
     a54:	9b 01       	movw	r18, r22
     a56:	ac 01       	movw	r20, r24
     a58:	c7 01       	movw	r24, r14
     a5a:	b6 01       	movw	r22, r12
     a5c:	0e 94 18 18 	call	0x3030	; 0x3030 <__cmpsf2>
     a60:	88 23       	and	r24, r24
     a62:	24 f3       	brlt	.-56     	; 0xa2c <motorControl+0x10e>
	switch (direction){														//This switch case switches between the directions based on the user input.
		case 'F':															//This case handles the forward movement of the 3PI robot.
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){	//This for loop increases the speed of the current speed to the desired speed with a total of a 100 increments.
     a64:	2a e0       	ldi	r18, 0x0A	; 10
     a66:	37 ed       	ldi	r19, 0xD7	; 215
     a68:	43 e2       	ldi	r20, 0x23	; 35
     a6a:	5c e3       	ldi	r21, 0x3C	; 60
     a6c:	c3 01       	movw	r24, r6
     a6e:	b2 01       	movw	r22, r4
     a70:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <__addsf3>
     a74:	2b 01       	movw	r4, r22
     a76:	3c 01       	movw	r6, r24
     a78:	a9 85       	ldd	r26, Y+9	; 0x09
     a7a:	ba 85       	ldd	r27, Y+10	; 0x0a
     a7c:	11 97       	sbiw	r26, 0x01	; 1
     a7e:	ba 87       	std	Y+10, r27	; 0x0a
     a80:	a9 87       	std	Y+9, r26	; 0x09
     a82:	ab 2b       	or	r26, r27
     a84:	09 f0       	breq	.+2      	; 0xa88 <motorControl+0x16a>
     a86:	8e cf       	rjmp	.-228    	; 0x9a4 <motorControl+0x86>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {											//This while loop temporarily freezes the system to make sure that the increments are spaced properly to facilitate a fluent and consequent increase in speed.
				//Change the aggression factor to manipulate the acceleration time. A shorter time increases the overall jerk of the acceleration.
			}
		}
		speedCurrent = speed;
     a88:	30 92 f4 01 	sts	0x01F4, r3	; 0x8001f4 <speedCurrent+0x1>
     a8c:	20 92 f3 01 	sts	0x01F3, r2	; 0x8001f3 <speedCurrent>
		break;
     a90:	7a c3       	rjmp	.+1780   	; 0x1186 <motorControl+0x868>
		
		case 'B':		//This case handles the backward movement of the robot. While the robot does not require this function in the standard routine, it is desired when operating the robot in manual mode.
		
		setSpeed = speed - speedCurrent;
     a92:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <speedCurrent>
     a96:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <speedCurrent+0x1>
     a9a:	91 01       	movw	r18, r2
     a9c:	28 1b       	sub	r18, r24
     a9e:	39 0b       	sbc	r19, r25
     aa0:	45 e6       	ldi	r20, 0x65	; 101
     aa2:	50 e0       	ldi	r21, 0x00	; 0
     aa4:	5a 87       	std	Y+10, r21	; 0x0a
     aa6:	49 87       	std	Y+9, r20	; 0x09
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     aa8:	41 2c       	mov	r4, r1
     aaa:	51 2c       	mov	r5, r1
     aac:	32 01       	movw	r6, r4
			timerStart = get_ms();
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     aae:	03 2e       	mov	r0, r19
     ab0:	00 0c       	add	r0, r0
     ab2:	44 0b       	sbc	r20, r20
     ab4:	55 0b       	sbc	r21, r21
     ab6:	2d 83       	std	Y+5, r18	; 0x05
     ab8:	3e 83       	std	Y+6, r19	; 0x06
     aba:	4f 83       	std	Y+7, r20	; 0x07
     abc:	58 87       	std	Y+8, r21	; 0x08
		case 'B':		//This case handles the backward movement of the robot. While the robot does not require this function in the standard routine, it is desired when operating the robot in manual mode.
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     abe:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <get_ms>
     ac2:	8b 01       	movw	r16, r22
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) );
     ac4:	2b ed       	ldi	r18, 0xDB	; 219
     ac6:	3f e0       	ldi	r19, 0x0F	; 15
     ac8:	49 ec       	ldi	r20, 0xC9	; 201
     aca:	50 e4       	ldi	r21, 0x40	; 64
     acc:	c3 01       	movw	r24, r6
     ace:	b2 01       	movw	r22, r4
     ad0:	0e 94 0a 19 	call	0x3214	; 0x3214 <__mulsf3>
     ad4:	0e 94 77 19 	call	0x32ee	; 0x32ee <sin>
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     ad8:	23 e8       	ldi	r18, 0x83	; 131
     ada:	39 ef       	ldi	r19, 0xF9	; 249
     adc:	42 e2       	ldi	r20, 0x22	; 34
     ade:	5e e3       	ldi	r21, 0x3E	; 62
     ae0:	0e 94 0a 19 	call	0x3214	; 0x3214 <__mulsf3>
     ae4:	9b 01       	movw	r18, r22
     ae6:	ac 01       	movw	r20, r24
     ae8:	c3 01       	movw	r24, r6
     aea:	b2 01       	movw	r22, r4
     aec:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <__subsf3>
     af0:	4b 01       	movw	r8, r22
     af2:	5c 01       	movw	r10, r24
     af4:	6d 81       	ldd	r22, Y+5	; 0x05
     af6:	7e 81       	ldd	r23, Y+6	; 0x06
     af8:	8f 81       	ldd	r24, Y+7	; 0x07
     afa:	98 85       	ldd	r25, Y+8	; 0x08
     afc:	0e 94 55 18 	call	0x30aa	; 0x30aa <__floatsisf>
     b00:	9b 01       	movw	r18, r22
     b02:	ac 01       	movw	r20, r24
     b04:	c5 01       	movw	r24, r10
     b06:	b4 01       	movw	r22, r8
     b08:	0e 94 0a 19 	call	0x3214	; 0x3214 <__mulsf3>
     b0c:	4b 01       	movw	r8, r22
     b0e:	5c 01       	movw	r10, r24
     b10:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <speedCurrent>
     b14:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <speedCurrent+0x1>
     b18:	07 2e       	mov	r0, r23
     b1a:	00 0c       	add	r0, r0
     b1c:	88 0b       	sbc	r24, r24
     b1e:	99 0b       	sbc	r25, r25
     b20:	0e 94 55 18 	call	0x30aa	; 0x30aa <__floatsisf>
     b24:	9b 01       	movw	r18, r22
     b26:	ac 01       	movw	r20, r24
     b28:	c5 01       	movw	r24, r10
     b2a:	b4 01       	movw	r22, r8
     b2c:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <__addsf3>
     b30:	0e 94 1d 18 	call	0x303a	; 0x303a <__fixsfsi>
     b34:	dc 01       	movw	r26, r24
     b36:	cb 01       	movw	r24, r22
     b38:	bc 01       	movw	r22, r24
     b3a:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     b3e:	48 01       	movw	r8, r16
     b40:	11 0f       	add	r17, r17
     b42:	aa 08       	sbc	r10, r10
     b44:	bb 08       	sbc	r11, r11
     b46:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <get_ms>
     b4a:	68 19       	sub	r22, r8
     b4c:	79 09       	sbc	r23, r9
     b4e:	8a 09       	sbc	r24, r10
     b50:	9b 09       	sbc	r25, r11
     b52:	0e 94 53 18 	call	0x30a6	; 0x30a6 <__floatunsisf>
     b56:	6b 01       	movw	r12, r22
     b58:	7c 01       	movw	r14, r24
     b5a:	20 e0       	ldi	r18, 0x00	; 0
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	40 e2       	ldi	r20, 0x20	; 32
     b60:	51 e4       	ldi	r21, 0x41	; 65
     b62:	69 81       	ldd	r22, Y+1	; 0x01
     b64:	7a 81       	ldd	r23, Y+2	; 0x02
     b66:	8b 81       	ldd	r24, Y+3	; 0x03
     b68:	9c 81       	ldd	r25, Y+4	; 0x04
     b6a:	0e 94 0a 19 	call	0x3214	; 0x3214 <__mulsf3>
     b6e:	9b 01       	movw	r18, r22
     b70:	ac 01       	movw	r20, r24
     b72:	c7 01       	movw	r24, r14
     b74:	b6 01       	movw	r22, r12
     b76:	0e 94 18 18 	call	0x3030	; 0x3030 <__cmpsf2>
     b7a:	88 23       	and	r24, r24
     b7c:	24 f3       	brlt	.-56     	; 0xb46 <motorControl+0x228>
		
		case 'B':		//This case handles the backward movement of the robot. While the robot does not require this function in the standard routine, it is desired when operating the robot in manual mode.
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     b7e:	2a e0       	ldi	r18, 0x0A	; 10
     b80:	37 ed       	ldi	r19, 0xD7	; 215
     b82:	43 e2       	ldi	r20, 0x23	; 35
     b84:	5c e3       	ldi	r21, 0x3C	; 60
     b86:	c3 01       	movw	r24, r6
     b88:	b2 01       	movw	r22, r4
     b8a:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <__addsf3>
     b8e:	2b 01       	movw	r4, r22
     b90:	3c 01       	movw	r6, r24
     b92:	a9 85       	ldd	r26, Y+9	; 0x09
     b94:	ba 85       	ldd	r27, Y+10	; 0x0a
     b96:	11 97       	sbiw	r26, 0x01	; 1
     b98:	ba 87       	std	Y+10, r27	; 0x0a
     b9a:	a9 87       	std	Y+9, r26	; 0x09
     b9c:	ab 2b       	or	r26, r27
     b9e:	09 f0       	breq	.+2      	; 0xba2 <motorControl+0x284>
     ba0:	8e cf       	rjmp	.-228    	; 0xabe <motorControl+0x1a0>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrent = speed;
     ba2:	30 92 f4 01 	sts	0x01F4, r3	; 0x8001f4 <speedCurrent+0x1>
     ba6:	20 92 f3 01 	sts	0x01F3, r2	; 0x8001f3 <speedCurrent>
		break;
     baa:	ed c2       	rjmp	.+1498   	; 0x1186 <motorControl+0x868>

		case 'R':		//This case handles the rotation of the robot 90 degrees to the right. The robot accelerates and decelerates with the same method used with forward and backward movement.
		
		setSpeedRight = speed + speedCurrentRight;
     bac:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <speedCurrentRight>
     bb0:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <speedCurrentRight+0x1>
     bb4:	82 0d       	add	r24, r2
     bb6:	93 1d       	adc	r25, r3
		setSpeedLeft = speed - speedCurrentLeft;
     bb8:	20 91 ef 01 	lds	r18, 0x01EF	; 0x8001ef <speedCurrentLeft>
     bbc:	30 91 f0 01 	lds	r19, 0x01F0	; 0x8001f0 <speedCurrentLeft+0x1>
     bc0:	a1 01       	movw	r20, r2
     bc2:	42 1b       	sub	r20, r18
     bc4:	53 0b       	sbc	r21, r19
     bc6:	9a 01       	movw	r18, r20
     bc8:	05 e6       	ldi	r16, 0x65	; 101
     bca:	10 e0       	ldi	r17, 0x00	; 0
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     bcc:	1d 82       	std	Y+5, r1	; 0x05
     bce:	1e 82       	std	Y+6, r1	; 0x06
     bd0:	1f 82       	std	Y+7, r1	; 0x07
     bd2:	18 86       	std	Y+8, r1	; 0x08
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			motorLeftSpeed = speedCurrent + (speedCurrentLeft + (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     bd4:	ac 01       	movw	r20, r24
     bd6:	99 0f       	add	r25, r25
     bd8:	66 0b       	sbc	r22, r22
     bda:	77 0b       	sbc	r23, r23
     bdc:	4d 87       	std	Y+13, r20	; 0x0d
     bde:	5e 87       	std	Y+14, r21	; 0x0e
     be0:	6f 87       	std	Y+15, r22	; 0x0f
     be2:	78 8b       	std	Y+16, r23	; 0x10
     be4:	b9 01       	movw	r22, r18
     be6:	33 0f       	add	r19, r19
     be8:	88 0b       	sbc	r24, r24
     bea:	99 0b       	sbc	r25, r25
     bec:	69 8b       	std	Y+17, r22	; 0x11
     bee:	7a 8b       	std	Y+18, r23	; 0x12
     bf0:	8b 8b       	std	Y+19, r24	; 0x13
     bf2:	9c 8b       	std	Y+20, r25	; 0x14
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     bf4:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <get_ms>
     bf8:	7e 8b       	std	Y+22, r23	; 0x16
     bfa:	6d 8b       	std	Y+21, r22	; 0x15
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
     bfc:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <speedCurrent>
     c00:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <speedCurrent+0x1>
     c04:	07 2e       	mov	r0, r23
     c06:	00 0c       	add	r0, r0
     c08:	88 0b       	sbc	r24, r24
     c0a:	99 0b       	sbc	r25, r25
     c0c:	0e 94 55 18 	call	0x30aa	; 0x30aa <__floatsisf>
     c10:	69 87       	std	Y+9, r22	; 0x09
     c12:	7a 87       	std	Y+10, r23	; 0x0a
     c14:	8b 87       	std	Y+11, r24	; 0x0b
     c16:	9c 87       	std	Y+12, r25	; 0x0c
     c18:	2b ed       	ldi	r18, 0xDB	; 219
     c1a:	3f e0       	ldi	r19, 0x0F	; 15
     c1c:	49 ec       	ldi	r20, 0xC9	; 201
     c1e:	50 e4       	ldi	r21, 0x40	; 64
     c20:	6d 81       	ldd	r22, Y+5	; 0x05
     c22:	7e 81       	ldd	r23, Y+6	; 0x06
     c24:	8f 81       	ldd	r24, Y+7	; 0x07
     c26:	98 85       	ldd	r25, Y+8	; 0x08
     c28:	0e 94 0a 19 	call	0x3214	; 0x3214 <__mulsf3>
     c2c:	0e 94 77 19 	call	0x32ee	; 0x32ee <sin>
     c30:	23 e8       	ldi	r18, 0x83	; 131
     c32:	39 ef       	ldi	r19, 0xF9	; 249
     c34:	42 e2       	ldi	r20, 0x22	; 34
     c36:	5e e3       	ldi	r21, 0x3E	; 62
     c38:	0e 94 0a 19 	call	0x3214	; 0x3214 <__mulsf3>
     c3c:	2d 81       	ldd	r18, Y+5	; 0x05
     c3e:	3e 81       	ldd	r19, Y+6	; 0x06
     c40:	4f 81       	ldd	r20, Y+7	; 0x07
     c42:	58 85       	ldd	r21, Y+8	; 0x08
     c44:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <__addsf3>
     c48:	4b 01       	movw	r8, r22
     c4a:	5c 01       	movw	r10, r24
			
			motorLeftSpeed = speedCurrent + (speedCurrentLeft + (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     c4c:	60 91 f1 01 	lds	r22, 0x01F1	; 0x8001f1 <speedCurrentRight>
     c50:	70 91 f2 01 	lds	r23, 0x01F2	; 0x8001f2 <speedCurrentRight+0x1>
     c54:	07 2e       	mov	r0, r23
     c56:	00 0c       	add	r0, r0
     c58:	88 0b       	sbc	r24, r24
     c5a:	99 0b       	sbc	r25, r25
     c5c:	0e 94 55 18 	call	0x30aa	; 0x30aa <__floatsisf>
     c60:	2b 01       	movw	r4, r22
     c62:	3c 01       	movw	r6, r24
     c64:	6d 85       	ldd	r22, Y+13	; 0x0d
     c66:	7e 85       	ldd	r23, Y+14	; 0x0e
     c68:	8f 85       	ldd	r24, Y+15	; 0x0f
     c6a:	98 89       	ldd	r25, Y+16	; 0x10
     c6c:	0e 94 55 18 	call	0x30aa	; 0x30aa <__floatsisf>
     c70:	a5 01       	movw	r20, r10
     c72:	94 01       	movw	r18, r8
     c74:	0e 94 0a 19 	call	0x3214	; 0x3214 <__mulsf3>
     c78:	9b 01       	movw	r18, r22
     c7a:	ac 01       	movw	r20, r24
     c7c:	c3 01       	movw	r24, r6
     c7e:	b2 01       	movw	r22, r4
     c80:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <__subsf3>
     c84:	29 85       	ldd	r18, Y+9	; 0x09
     c86:	3a 85       	ldd	r19, Y+10	; 0x0a
     c88:	4b 85       	ldd	r20, Y+11	; 0x0b
     c8a:	5c 85       	ldd	r21, Y+12	; 0x0c
     c8c:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <__addsf3>
     c90:	0e 94 1d 18 	call	0x303a	; 0x303a <__fixsfsi>
     c94:	2b 01       	movw	r4, r22
     c96:	3c 01       	movw	r6, r24
     c98:	60 91 ef 01 	lds	r22, 0x01EF	; 0x8001ef <speedCurrentLeft>
     c9c:	70 91 f0 01 	lds	r23, 0x01F0	; 0x8001f0 <speedCurrentLeft+0x1>
     ca0:	07 2e       	mov	r0, r23
     ca2:	00 0c       	add	r0, r0
     ca4:	88 0b       	sbc	r24, r24
     ca6:	99 0b       	sbc	r25, r25
     ca8:	0e 94 55 18 	call	0x30aa	; 0x30aa <__floatsisf>
     cac:	6b 01       	movw	r12, r22
     cae:	7c 01       	movw	r14, r24
     cb0:	69 89       	ldd	r22, Y+17	; 0x11
     cb2:	7a 89       	ldd	r23, Y+18	; 0x12
     cb4:	8b 89       	ldd	r24, Y+19	; 0x13
     cb6:	9c 89       	ldd	r25, Y+20	; 0x14
     cb8:	0e 94 55 18 	call	0x30aa	; 0x30aa <__floatsisf>
     cbc:	a5 01       	movw	r20, r10
     cbe:	94 01       	movw	r18, r8
     cc0:	0e 94 0a 19 	call	0x3214	; 0x3214 <__mulsf3>
     cc4:	9b 01       	movw	r18, r22
     cc6:	ac 01       	movw	r20, r24
     cc8:	c7 01       	movw	r24, r14
     cca:	b6 01       	movw	r22, r12
     ccc:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <__addsf3>
     cd0:	29 85       	ldd	r18, Y+9	; 0x09
     cd2:	3a 85       	ldd	r19, Y+10	; 0x0a
     cd4:	4b 85       	ldd	r20, Y+11	; 0x0b
     cd6:	5c 85       	ldd	r21, Y+12	; 0x0c
     cd8:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <__addsf3>
     cdc:	0e 94 1d 18 	call	0x303a	; 0x303a <__fixsfsi>
     ce0:	dc 01       	movw	r26, r24
     ce2:	cb 01       	movw	r24, r22
     ce4:	b2 01       	movw	r22, r4
     ce6:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     cea:	8d 89       	ldd	r24, Y+21	; 0x15
     cec:	9e 89       	ldd	r25, Y+22	; 0x16
     cee:	4c 01       	movw	r8, r24
     cf0:	99 0f       	add	r25, r25
     cf2:	aa 08       	sbc	r10, r10
     cf4:	bb 08       	sbc	r11, r11
     cf6:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <get_ms>
     cfa:	6b 01       	movw	r12, r22
     cfc:	7c 01       	movw	r14, r24
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	40 e2       	ldi	r20, 0x20	; 32
     d04:	51 e4       	ldi	r21, 0x41	; 65
     d06:	69 81       	ldd	r22, Y+1	; 0x01
     d08:	7a 81       	ldd	r23, Y+2	; 0x02
     d0a:	8b 81       	ldd	r24, Y+3	; 0x03
     d0c:	9c 81       	ldd	r25, Y+4	; 0x04
     d0e:	0e 94 0a 19 	call	0x3214	; 0x3214 <__mulsf3>
     d12:	2b 01       	movw	r4, r22
     d14:	3c 01       	movw	r6, r24
     d16:	c7 01       	movw	r24, r14
     d18:	b6 01       	movw	r22, r12
     d1a:	68 19       	sub	r22, r8
     d1c:	79 09       	sbc	r23, r9
     d1e:	8a 09       	sbc	r24, r10
     d20:	9b 09       	sbc	r25, r11
     d22:	0e 94 53 18 	call	0x30a6	; 0x30a6 <__floatunsisf>
     d26:	a3 01       	movw	r20, r6
     d28:	92 01       	movw	r18, r4
     d2a:	0e 94 18 18 	call	0x3030	; 0x3030 <__cmpsf2>
     d2e:	88 23       	and	r24, r24
     d30:	14 f3       	brlt	.-60     	; 0xcf6 <motorControl+0x3d8>
		case 'R':		//This case handles the rotation of the robot 90 degrees to the right. The robot accelerates and decelerates with the same method used with forward and backward movement.
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     d32:	2a e0       	ldi	r18, 0x0A	; 10
     d34:	37 ed       	ldi	r19, 0xD7	; 215
     d36:	43 e2       	ldi	r20, 0x23	; 35
     d38:	5c e3       	ldi	r21, 0x3C	; 60
     d3a:	6d 81       	ldd	r22, Y+5	; 0x05
     d3c:	7e 81       	ldd	r23, Y+6	; 0x06
     d3e:	8f 81       	ldd	r24, Y+7	; 0x07
     d40:	98 85       	ldd	r25, Y+8	; 0x08
     d42:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <__addsf3>
     d46:	6d 83       	std	Y+5, r22	; 0x05
     d48:	7e 83       	std	Y+6, r23	; 0x06
     d4a:	8f 83       	std	Y+7, r24	; 0x07
     d4c:	98 87       	std	Y+8, r25	; 0x08
     d4e:	01 50       	subi	r16, 0x01	; 1
     d50:	11 09       	sbc	r17, r1
     d52:	09 f0       	breq	.+2      	; 0xd56 <motorControl+0x438>
     d54:	4f cf       	rjmp	.-354    	; 0xbf4 <motorControl+0x2d6>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = -speed;
     d56:	88 27       	eor	r24, r24
     d58:	99 27       	eor	r25, r25
     d5a:	82 19       	sub	r24, r2
     d5c:	93 09       	sbc	r25, r3
     d5e:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <speedCurrentRight+0x1>
     d62:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <speedCurrentRight>
		speedCurrentLeft = speed;
     d66:	30 92 f0 01 	sts	0x01F0, r3	; 0x8001f0 <speedCurrentLeft+0x1>
     d6a:	20 92 ef 01 	sts	0x01EF, r2	; 0x8001ef <speedCurrentLeft>
     d6e:	05 e6       	ldi	r16, 0x65	; 101
     d70:	10 e0       	ldi	r17, 0x00	; 0
		speed = 0;
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     d72:	19 82       	std	Y+1, r1	; 0x01
     d74:	1a 82       	std	Y+2, r1	; 0x02
     d76:	1b 82       	std	Y+3, r1	; 0x03
     d78:	1c 82       	std	Y+4, r1	; 0x04
			timerStart = get_ms();
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
     d7a:	9c 01       	movw	r18, r24
     d7c:	99 0f       	add	r25, r25
     d7e:	44 0b       	sbc	r20, r20
     d80:	55 0b       	sbc	r21, r21
     d82:	29 87       	std	Y+9, r18	; 0x09
     d84:	3a 87       	std	Y+10, r19	; 0x0a
     d86:	4b 87       	std	Y+11, r20	; 0x0b
     d88:	5c 87       	std	Y+12, r21	; 0x0c
     d8a:	c1 2c       	mov	r12, r1
     d8c:	d1 2c       	mov	r13, r1
     d8e:	76 01       	movw	r14, r12
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     d90:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <get_ms>
     d94:	7e 87       	std	Y+14, r23	; 0x0e
     d96:	6d 87       	std	Y+13, r22	; 0x0d
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
     d98:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <speedCurrent>
     d9c:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <speedCurrent+0x1>
     da0:	07 2e       	mov	r0, r23
     da2:	00 0c       	add	r0, r0
     da4:	88 0b       	sbc	r24, r24
     da6:	99 0b       	sbc	r25, r25
     da8:	0e 94 55 18 	call	0x30aa	; 0x30aa <__floatsisf>
     dac:	69 83       	std	Y+1, r22	; 0x01
     dae:	7a 83       	std	Y+2, r23	; 0x02
     db0:	8b 83       	std	Y+3, r24	; 0x03
     db2:	9c 83       	std	Y+4, r25	; 0x04
     db4:	2b ed       	ldi	r18, 0xDB	; 219
     db6:	3f e0       	ldi	r19, 0x0F	; 15
     db8:	49 ec       	ldi	r20, 0xC9	; 201
     dba:	50 e4       	ldi	r21, 0x40	; 64
     dbc:	c7 01       	movw	r24, r14
     dbe:	b6 01       	movw	r22, r12
     dc0:	0e 94 0a 19 	call	0x3214	; 0x3214 <__mulsf3>
     dc4:	0e 94 77 19 	call	0x32ee	; 0x32ee <sin>
     dc8:	23 e8       	ldi	r18, 0x83	; 131
     dca:	39 ef       	ldi	r19, 0xF9	; 249
     dcc:	42 e2       	ldi	r20, 0x22	; 34
     dce:	5e e3       	ldi	r21, 0x3E	; 62
     dd0:	0e 94 0a 19 	call	0x3214	; 0x3214 <__mulsf3>
     dd4:	a7 01       	movw	r20, r14
     dd6:	96 01       	movw	r18, r12
     dd8:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <__addsf3>
     ddc:	4b 01       	movw	r8, r22
     dde:	5c 01       	movw	r10, r24
     de0:	69 85       	ldd	r22, Y+9	; 0x09
     de2:	7a 85       	ldd	r23, Y+10	; 0x0a
     de4:	8b 85       	ldd	r24, Y+11	; 0x0b
     de6:	9c 85       	ldd	r25, Y+12	; 0x0c
     de8:	0e 94 55 18 	call	0x30aa	; 0x30aa <__floatsisf>
     dec:	9b 01       	movw	r18, r22
     dee:	ac 01       	movw	r20, r24
     df0:	c5 01       	movw	r24, r10
     df2:	b4 01       	movw	r22, r8
     df4:	0e 94 0a 19 	call	0x3214	; 0x3214 <__mulsf3>
     df8:	4b 01       	movw	r8, r22
     dfa:	5c 01       	movw	r10, r24
			
			motorLeftSpeed = speedCurrent + (speedCurrentLeft + (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     dfc:	60 91 f1 01 	lds	r22, 0x01F1	; 0x8001f1 <speedCurrentRight>
     e00:	70 91 f2 01 	lds	r23, 0x01F2	; 0x8001f2 <speedCurrentRight+0x1>
     e04:	07 2e       	mov	r0, r23
     e06:	00 0c       	add	r0, r0
     e08:	88 0b       	sbc	r24, r24
     e0a:	99 0b       	sbc	r25, r25
     e0c:	0e 94 55 18 	call	0x30aa	; 0x30aa <__floatsisf>
     e10:	a5 01       	movw	r20, r10
     e12:	94 01       	movw	r18, r8
     e14:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <__subsf3>
     e18:	29 81       	ldd	r18, Y+1	; 0x01
     e1a:	3a 81       	ldd	r19, Y+2	; 0x02
     e1c:	4b 81       	ldd	r20, Y+3	; 0x03
     e1e:	5c 81       	ldd	r21, Y+4	; 0x04
     e20:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <__addsf3>
     e24:	0e 94 1d 18 	call	0x303a	; 0x303a <__fixsfsi>
     e28:	6d 83       	std	Y+5, r22	; 0x05
     e2a:	7e 83       	std	Y+6, r23	; 0x06
     e2c:	8f 83       	std	Y+7, r24	; 0x07
     e2e:	98 87       	std	Y+8, r25	; 0x08
     e30:	60 91 ef 01 	lds	r22, 0x01EF	; 0x8001ef <speedCurrentLeft>
     e34:	70 91 f0 01 	lds	r23, 0x01F0	; 0x8001f0 <speedCurrentLeft+0x1>
     e38:	07 2e       	mov	r0, r23
     e3a:	00 0c       	add	r0, r0
     e3c:	88 0b       	sbc	r24, r24
     e3e:	99 0b       	sbc	r25, r25
     e40:	0e 94 55 18 	call	0x30aa	; 0x30aa <__floatsisf>
     e44:	a5 01       	movw	r20, r10
     e46:	94 01       	movw	r18, r8
     e48:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <__addsf3>
     e4c:	29 81       	ldd	r18, Y+1	; 0x01
     e4e:	3a 81       	ldd	r19, Y+2	; 0x02
     e50:	4b 81       	ldd	r20, Y+3	; 0x03
     e52:	5c 81       	ldd	r21, Y+4	; 0x04
     e54:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <__addsf3>
     e58:	0e 94 1d 18 	call	0x303a	; 0x303a <__fixsfsi>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	6d 81       	ldd	r22, Y+5	; 0x05
     e62:	7e 81       	ldd	r23, Y+6	; 0x06
     e64:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     e68:	4d 85       	ldd	r20, Y+13	; 0x0d
     e6a:	5e 85       	ldd	r21, Y+14	; 0x0e
     e6c:	4a 01       	movw	r8, r20
     e6e:	55 0f       	add	r21, r21
     e70:	aa 08       	sbc	r10, r10
     e72:	bb 08       	sbc	r11, r11
     e74:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <get_ms>
     e78:	68 19       	sub	r22, r8
     e7a:	79 09       	sbc	r23, r9
     e7c:	8a 09       	sbc	r24, r10
     e7e:	9b 09       	sbc	r25, r11
     e80:	0e 94 53 18 	call	0x30a6	; 0x30a6 <__floatunsisf>
     e84:	9b 01       	movw	r18, r22
     e86:	ac 01       	movw	r20, r24
     e88:	c3 01       	movw	r24, r6
     e8a:	b2 01       	movw	r22, r4
     e8c:	0e 94 05 19 	call	0x320a	; 0x320a <__gesf2>
     e90:	18 16       	cp	r1, r24
     e92:	84 f3       	brlt	.-32     	; 0xe74 <motorControl+0x556>
		speed = 0;
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     e94:	2a e0       	ldi	r18, 0x0A	; 10
     e96:	37 ed       	ldi	r19, 0xD7	; 215
     e98:	43 e2       	ldi	r20, 0x23	; 35
     e9a:	5c e3       	ldi	r21, 0x3C	; 60
     e9c:	c7 01       	movw	r24, r14
     e9e:	b6 01       	movw	r22, r12
     ea0:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <__addsf3>
     ea4:	6b 01       	movw	r12, r22
     ea6:	7c 01       	movw	r14, r24
     ea8:	01 50       	subi	r16, 0x01	; 1
     eaa:	11 09       	sbc	r17, r1
     eac:	09 f0       	breq	.+2      	; 0xeb0 <motorControl+0x592>
     eae:	70 cf       	rjmp	.-288    	; 0xd90 <motorControl+0x472>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = -speed;
     eb0:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <speedCurrentRight+0x1>
     eb4:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <speedCurrentRight>
		speedCurrentLeft = speed;
     eb8:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <speedCurrentLeft+0x1>
     ebc:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <speedCurrentLeft>
		
		break;
     ec0:	62 c1       	rjmp	.+708    	; 0x1186 <motorControl+0x868>

		case 'L': //This case handles the rotation of the robot 90 degrees to the left. The robot accelerates and decelerates with the same method used with forward and backward movement.
		
		setSpeedRight = speed - speedCurrentRight;
     ec2:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <speedCurrentRight>
     ec6:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <speedCurrentRight+0x1>
     eca:	91 01       	movw	r18, r2
     ecc:	28 1b       	sub	r18, r24
     ece:	39 0b       	sbc	r19, r25
		setSpeedLeft = speed + speedCurrentLeft;
     ed0:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <speedCurrentLeft>
     ed4:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <speedCurrentLeft+0x1>
     ed8:	82 0d       	add	r24, r2
     eda:	93 1d       	adc	r25, r3
     edc:	65 e6       	ldi	r22, 0x65	; 101
     ede:	70 e0       	ldi	r23, 0x00	; 0
     ee0:	7a 8b       	std	Y+18, r23	; 0x12
     ee2:	69 8b       	std	Y+17, r22	; 0x11
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     ee4:	1d 82       	std	Y+5, r1	; 0x05
     ee6:	1e 82       	std	Y+6, r1	; 0x06
     ee8:	1f 82       	std	Y+7, r1	; 0x07
     eea:	18 86       	std	Y+8, r1	; 0x08
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
			
			motorLeftSpeed = speedCurrentLeft - (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ));
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     eec:	a9 01       	movw	r20, r18
     eee:	33 0f       	add	r19, r19
     ef0:	66 0b       	sbc	r22, r22
     ef2:	77 0b       	sbc	r23, r23
     ef4:	49 87       	std	Y+9, r20	; 0x09
     ef6:	5a 87       	std	Y+10, r21	; 0x0a
     ef8:	6b 87       	std	Y+11, r22	; 0x0b
     efa:	7c 87       	std	Y+12, r23	; 0x0c
     efc:	9c 01       	movw	r18, r24
     efe:	99 0f       	add	r25, r25
     f00:	44 0b       	sbc	r20, r20
     f02:	55 0b       	sbc	r21, r21
     f04:	2d 87       	std	Y+13, r18	; 0x0d
     f06:	3e 87       	std	Y+14, r19	; 0x0e
     f08:	4f 87       	std	Y+15, r20	; 0x0f
     f0a:	58 8b       	std	Y+16, r21	; 0x10
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     f0c:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <get_ms>
     f10:	8b 01       	movw	r16, r22
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
     f12:	2b ed       	ldi	r18, 0xDB	; 219
     f14:	3f e0       	ldi	r19, 0x0F	; 15
     f16:	49 ec       	ldi	r20, 0xC9	; 201
     f18:	50 e4       	ldi	r21, 0x40	; 64
     f1a:	6d 81       	ldd	r22, Y+5	; 0x05
     f1c:	7e 81       	ldd	r23, Y+6	; 0x06
     f1e:	8f 81       	ldd	r24, Y+7	; 0x07
     f20:	98 85       	ldd	r25, Y+8	; 0x08
     f22:	0e 94 0a 19 	call	0x3214	; 0x3214 <__mulsf3>
     f26:	0e 94 77 19 	call	0x32ee	; 0x32ee <sin>
     f2a:	23 e8       	ldi	r18, 0x83	; 131
     f2c:	39 ef       	ldi	r19, 0xF9	; 249
     f2e:	42 e2       	ldi	r20, 0x22	; 34
     f30:	5e e3       	ldi	r21, 0x3E	; 62
     f32:	0e 94 0a 19 	call	0x3214	; 0x3214 <__mulsf3>
     f36:	2d 81       	ldd	r18, Y+5	; 0x05
     f38:	3e 81       	ldd	r19, Y+6	; 0x06
     f3a:	4f 81       	ldd	r20, Y+7	; 0x07
     f3c:	58 85       	ldd	r21, Y+8	; 0x08
     f3e:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <__addsf3>
     f42:	6b 01       	movw	r12, r22
     f44:	7c 01       	movw	r14, r24
			
			motorLeftSpeed = speedCurrentLeft - (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ));
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     f46:	60 91 f1 01 	lds	r22, 0x01F1	; 0x8001f1 <speedCurrentRight>
     f4a:	70 91 f2 01 	lds	r23, 0x01F2	; 0x8001f2 <speedCurrentRight+0x1>
     f4e:	07 2e       	mov	r0, r23
     f50:	00 0c       	add	r0, r0
     f52:	88 0b       	sbc	r24, r24
     f54:	99 0b       	sbc	r25, r25
     f56:	0e 94 55 18 	call	0x30aa	; 0x30aa <__floatsisf>
     f5a:	4b 01       	movw	r8, r22
     f5c:	5c 01       	movw	r10, r24
     f5e:	69 85       	ldd	r22, Y+9	; 0x09
     f60:	7a 85       	ldd	r23, Y+10	; 0x0a
     f62:	8b 85       	ldd	r24, Y+11	; 0x0b
     f64:	9c 85       	ldd	r25, Y+12	; 0x0c
     f66:	0e 94 55 18 	call	0x30aa	; 0x30aa <__floatsisf>
     f6a:	a7 01       	movw	r20, r14
     f6c:	96 01       	movw	r18, r12
     f6e:	0e 94 0a 19 	call	0x3214	; 0x3214 <__mulsf3>
     f72:	9b 01       	movw	r18, r22
     f74:	ac 01       	movw	r20, r24
     f76:	c5 01       	movw	r24, r10
     f78:	b4 01       	movw	r22, r8
     f7a:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <__addsf3>
     f7e:	0e 94 1d 18 	call	0x303a	; 0x303a <__fixsfsi>
     f82:	4b 01       	movw	r8, r22
     f84:	5c 01       	movw	r10, r24
     f86:	60 91 ef 01 	lds	r22, 0x01EF	; 0x8001ef <speedCurrentLeft>
     f8a:	70 91 f0 01 	lds	r23, 0x01F0	; 0x8001f0 <speedCurrentLeft+0x1>
     f8e:	07 2e       	mov	r0, r23
     f90:	00 0c       	add	r0, r0
     f92:	88 0b       	sbc	r24, r24
     f94:	99 0b       	sbc	r25, r25
     f96:	0e 94 55 18 	call	0x30aa	; 0x30aa <__floatsisf>
     f9a:	2b 01       	movw	r4, r22
     f9c:	3c 01       	movw	r6, r24
     f9e:	6d 85       	ldd	r22, Y+13	; 0x0d
     fa0:	7e 85       	ldd	r23, Y+14	; 0x0e
     fa2:	8f 85       	ldd	r24, Y+15	; 0x0f
     fa4:	98 89       	ldd	r25, Y+16	; 0x10
     fa6:	0e 94 55 18 	call	0x30aa	; 0x30aa <__floatsisf>
     faa:	a7 01       	movw	r20, r14
     fac:	96 01       	movw	r18, r12
     fae:	0e 94 0a 19 	call	0x3214	; 0x3214 <__mulsf3>
     fb2:	9b 01       	movw	r18, r22
     fb4:	ac 01       	movw	r20, r24
     fb6:	c3 01       	movw	r24, r6
     fb8:	b2 01       	movw	r22, r4
     fba:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <__subsf3>
     fbe:	0e 94 1d 18 	call	0x303a	; 0x303a <__fixsfsi>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	b4 01       	movw	r22, r8
     fc8:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     fcc:	48 01       	movw	r8, r16
     fce:	11 0f       	add	r17, r17
     fd0:	aa 08       	sbc	r10, r10
     fd2:	bb 08       	sbc	r11, r11
     fd4:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <get_ms>
     fd8:	2b 01       	movw	r4, r22
     fda:	3c 01       	movw	r6, r24
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	40 e2       	ldi	r20, 0x20	; 32
     fe2:	51 e4       	ldi	r21, 0x41	; 65
     fe4:	69 81       	ldd	r22, Y+1	; 0x01
     fe6:	7a 81       	ldd	r23, Y+2	; 0x02
     fe8:	8b 81       	ldd	r24, Y+3	; 0x03
     fea:	9c 81       	ldd	r25, Y+4	; 0x04
     fec:	0e 94 0a 19 	call	0x3214	; 0x3214 <__mulsf3>
     ff0:	6b 01       	movw	r12, r22
     ff2:	7c 01       	movw	r14, r24
     ff4:	c3 01       	movw	r24, r6
     ff6:	b2 01       	movw	r22, r4
     ff8:	68 19       	sub	r22, r8
     ffa:	79 09       	sbc	r23, r9
     ffc:	8a 09       	sbc	r24, r10
     ffe:	9b 09       	sbc	r25, r11
    1000:	0e 94 53 18 	call	0x30a6	; 0x30a6 <__floatunsisf>
    1004:	a7 01       	movw	r20, r14
    1006:	96 01       	movw	r18, r12
    1008:	0e 94 18 18 	call	0x3030	; 0x3030 <__cmpsf2>
    100c:	88 23       	and	r24, r24
    100e:	14 f3       	brlt	.-60     	; 0xfd4 <motorControl+0x6b6>
		case 'L': //This case handles the rotation of the robot 90 degrees to the left. The robot accelerates and decelerates with the same method used with forward and backward movement.
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
    1010:	2a e0       	ldi	r18, 0x0A	; 10
    1012:	37 ed       	ldi	r19, 0xD7	; 215
    1014:	43 e2       	ldi	r20, 0x23	; 35
    1016:	5c e3       	ldi	r21, 0x3C	; 60
    1018:	6d 81       	ldd	r22, Y+5	; 0x05
    101a:	7e 81       	ldd	r23, Y+6	; 0x06
    101c:	8f 81       	ldd	r24, Y+7	; 0x07
    101e:	98 85       	ldd	r25, Y+8	; 0x08
    1020:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <__addsf3>
    1024:	6d 83       	std	Y+5, r22	; 0x05
    1026:	7e 83       	std	Y+6, r23	; 0x06
    1028:	8f 83       	std	Y+7, r24	; 0x07
    102a:	98 87       	std	Y+8, r25	; 0x08
    102c:	a9 89       	ldd	r26, Y+17	; 0x11
    102e:	ba 89       	ldd	r27, Y+18	; 0x12
    1030:	11 97       	sbiw	r26, 0x01	; 1
    1032:	ba 8b       	std	Y+18, r27	; 0x12
    1034:	a9 8b       	std	Y+17, r26	; 0x11
    1036:	ab 2b       	or	r26, r27
    1038:	09 f0       	breq	.+2      	; 0x103c <motorControl+0x71e>
    103a:	68 cf       	rjmp	.-304    	; 0xf0c <motorControl+0x5ee>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = speed;
    103c:	30 92 f2 01 	sts	0x01F2, r3	; 0x8001f2 <speedCurrentRight+0x1>
    1040:	20 92 f1 01 	sts	0x01F1, r2	; 0x8001f1 <speedCurrentRight>
		speedCurrentLeft = -speed;
    1044:	31 94       	neg	r3
    1046:	21 94       	neg	r2
    1048:	31 08       	sbc	r3, r1
    104a:	30 92 f0 01 	sts	0x01F0, r3	; 0x8001f0 <speedCurrentLeft+0x1>
    104e:	20 92 ef 01 	sts	0x01EF, r2	; 0x8001ef <speedCurrentLeft>
    1052:	25 e6       	ldi	r18, 0x65	; 101
    1054:	30 e0       	ldi	r19, 0x00	; 0
		speed = 0;
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
    1056:	19 82       	std	Y+1, r1	; 0x01
    1058:	1a 82       	std	Y+2, r1	; 0x02
    105a:	1b 82       	std	Y+3, r1	; 0x03
    105c:	1c 82       	std	Y+4, r1	; 0x04
			timerStart = get_ms();
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
    105e:	a1 01       	movw	r20, r2
    1060:	33 0c       	add	r3, r3
    1062:	66 0b       	sbc	r22, r22
    1064:	77 0b       	sbc	r23, r23
    1066:	4d 83       	std	Y+5, r20	; 0x05
    1068:	5e 83       	std	Y+6, r21	; 0x06
    106a:	6f 83       	std	Y+7, r22	; 0x07
    106c:	78 87       	std	Y+8, r23	; 0x08
    106e:	3a 87       	std	Y+10, r19	; 0x0a
    1070:	29 87       	std	Y+9, r18	; 0x09
    1072:	81 2c       	mov	r8, r1
    1074:	91 2c       	mov	r9, r1
    1076:	54 01       	movw	r10, r8
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
    1078:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <get_ms>
    107c:	8b 01       	movw	r16, r22
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
    107e:	2b ed       	ldi	r18, 0xDB	; 219
    1080:	3f e0       	ldi	r19, 0x0F	; 15
    1082:	49 ec       	ldi	r20, 0xC9	; 201
    1084:	50 e4       	ldi	r21, 0x40	; 64
    1086:	c5 01       	movw	r24, r10
    1088:	b4 01       	movw	r22, r8
    108a:	0e 94 0a 19 	call	0x3214	; 0x3214 <__mulsf3>
    108e:	0e 94 77 19 	call	0x32ee	; 0x32ee <sin>
    1092:	23 e8       	ldi	r18, 0x83	; 131
    1094:	39 ef       	ldi	r19, 0xF9	; 249
    1096:	42 e2       	ldi	r20, 0x22	; 34
    1098:	5e e3       	ldi	r21, 0x3E	; 62
    109a:	0e 94 0a 19 	call	0x3214	; 0x3214 <__mulsf3>
    109e:	a5 01       	movw	r20, r10
    10a0:	94 01       	movw	r18, r8
    10a2:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <__addsf3>
    10a6:	2b 01       	movw	r4, r22
    10a8:	3c 01       	movw	r6, r24
    10aa:	6d 81       	ldd	r22, Y+5	; 0x05
    10ac:	7e 81       	ldd	r23, Y+6	; 0x06
    10ae:	8f 81       	ldd	r24, Y+7	; 0x07
    10b0:	98 85       	ldd	r25, Y+8	; 0x08
    10b2:	0e 94 55 18 	call	0x30aa	; 0x30aa <__floatsisf>
    10b6:	9b 01       	movw	r18, r22
    10b8:	ac 01       	movw	r20, r24
    10ba:	c3 01       	movw	r24, r6
    10bc:	b2 01       	movw	r22, r4
    10be:	0e 94 0a 19 	call	0x3214	; 0x3214 <__mulsf3>
    10c2:	2b 01       	movw	r4, r22
    10c4:	3c 01       	movw	r6, r24
			
			motorLeftSpeed = speedCurrentLeft - (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ));
			
			set_motors(motorLeftSpeed, motorRightSpeed);
    10c6:	60 91 f1 01 	lds	r22, 0x01F1	; 0x8001f1 <speedCurrentRight>
    10ca:	70 91 f2 01 	lds	r23, 0x01F2	; 0x8001f2 <speedCurrentRight+0x1>
    10ce:	07 2e       	mov	r0, r23
    10d0:	00 0c       	add	r0, r0
    10d2:	88 0b       	sbc	r24, r24
    10d4:	99 0b       	sbc	r25, r25
    10d6:	0e 94 55 18 	call	0x30aa	; 0x30aa <__floatsisf>
    10da:	a3 01       	movw	r20, r6
    10dc:	92 01       	movw	r18, r4
    10de:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <__addsf3>
    10e2:	0e 94 1d 18 	call	0x303a	; 0x303a <__fixsfsi>
    10e6:	69 83       	std	Y+1, r22	; 0x01
    10e8:	7a 83       	std	Y+2, r23	; 0x02
    10ea:	8b 83       	std	Y+3, r24	; 0x03
    10ec:	9c 83       	std	Y+4, r25	; 0x04
    10ee:	60 91 ef 01 	lds	r22, 0x01EF	; 0x8001ef <speedCurrentLeft>
    10f2:	70 91 f0 01 	lds	r23, 0x01F0	; 0x8001f0 <speedCurrentLeft+0x1>
    10f6:	07 2e       	mov	r0, r23
    10f8:	00 0c       	add	r0, r0
    10fa:	88 0b       	sbc	r24, r24
    10fc:	99 0b       	sbc	r25, r25
    10fe:	0e 94 55 18 	call	0x30aa	; 0x30aa <__floatsisf>
    1102:	a3 01       	movw	r20, r6
    1104:	92 01       	movw	r18, r4
    1106:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <__subsf3>
    110a:	0e 94 1d 18 	call	0x303a	; 0x303a <__fixsfsi>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	69 81       	ldd	r22, Y+1	; 0x01
    1114:	7a 81       	ldd	r23, Y+2	; 0x02
    1116:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
    111a:	28 01       	movw	r4, r16
    111c:	11 0f       	add	r17, r17
    111e:	66 08       	sbc	r6, r6
    1120:	77 08       	sbc	r7, r7
    1122:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <get_ms>
    1126:	64 19       	sub	r22, r4
    1128:	75 09       	sbc	r23, r5
    112a:	86 09       	sbc	r24, r6
    112c:	97 09       	sbc	r25, r7
    112e:	0e 94 53 18 	call	0x30a6	; 0x30a6 <__floatunsisf>
    1132:	9b 01       	movw	r18, r22
    1134:	ac 01       	movw	r20, r24
    1136:	c7 01       	movw	r24, r14
    1138:	b6 01       	movw	r22, r12
    113a:	0e 94 05 19 	call	0x320a	; 0x320a <__gesf2>
    113e:	18 16       	cp	r1, r24
    1140:	84 f3       	brlt	.-32     	; 0x1122 <motorControl+0x804>
		speed = 0;
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
    1142:	2a e0       	ldi	r18, 0x0A	; 10
    1144:	37 ed       	ldi	r19, 0xD7	; 215
    1146:	43 e2       	ldi	r20, 0x23	; 35
    1148:	5c e3       	ldi	r21, 0x3C	; 60
    114a:	c5 01       	movw	r24, r10
    114c:	b4 01       	movw	r22, r8
    114e:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <__addsf3>
    1152:	4b 01       	movw	r8, r22
    1154:	5c 01       	movw	r10, r24
    1156:	69 85       	ldd	r22, Y+9	; 0x09
    1158:	7a 85       	ldd	r23, Y+10	; 0x0a
    115a:	61 50       	subi	r22, 0x01	; 1
    115c:	71 09       	sbc	r23, r1
    115e:	7a 87       	std	Y+10, r23	; 0x0a
    1160:	69 87       	std	Y+9, r22	; 0x09
    1162:	67 2b       	or	r22, r23
    1164:	09 f0       	breq	.+2      	; 0x1168 <motorControl+0x84a>
    1166:	88 cf       	rjmp	.-240    	; 0x1078 <motorControl+0x75a>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = speed;
    1168:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <speedCurrentRight+0x1>
    116c:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <speedCurrentRight>
		speedCurrentLeft = -speed;
    1170:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <speedCurrentLeft+0x1>
    1174:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <speedCurrentLeft>
		break;
    1178:	06 c0       	rjmp	.+12     	; 0x1186 <motorControl+0x868>
		
		default:		//The default case puts the robot into a full stop and is only used in emergency situations. Using this case is not recommended as it applies the brakes instantaneously and therefore creates an extreme jerk in the acceleration curve.
		set_motors(0,0);
    117a:	60 e0       	ldi	r22, 0x00	; 0
    117c:	70 e0       	ldi	r23, 0x00	; 0
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <set_motors>
		break;
	}
}
    1186:	66 96       	adiw	r28, 0x16	; 22
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	de bf       	out	0x3e, r29	; 62
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	cd bf       	out	0x3d, r28	; 61
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	1f 91       	pop	r17
    1198:	0f 91       	pop	r16
    119a:	ff 90       	pop	r15
    119c:	ef 90       	pop	r14
    119e:	df 90       	pop	r13
    11a0:	cf 90       	pop	r12
    11a2:	bf 90       	pop	r11
    11a4:	af 90       	pop	r10
    11a6:	9f 90       	pop	r9
    11a8:	8f 90       	pop	r8
    11aa:	7f 90       	pop	r7
    11ac:	6f 90       	pop	r6
    11ae:	5f 90       	pop	r5
    11b0:	4f 90       	pop	r4
    11b2:	3f 90       	pop	r3
    11b4:	2f 90       	pop	r2
    11b6:	08 95       	ret

000011b8 <initialize>:
int proportional;
int derivative;


void initialize()
{
    11b8:	cf 93       	push	r28
    11ba:	df 93       	push	r29
	
	unsigned int counter;
	pololu_3pi_init(2000);								//initialize sensor value from 0 to 2000
    11bc:	80 ed       	ldi	r24, 0xD0	; 208
    11be:	97 e0       	ldi	r25, 0x07	; 7
    11c0:	0e 94 c7 11 	call	0x238e	; 0x238e <pololu_3pi_init>
	
	while(!button_is_pressed(BUTTON_B))					//this function is activated until button B is pressed.
    11c4:	1b c0       	rjmp	.+54     	; 0x11fc <initialize+0x44>
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
    11c6:	0e 94 92 0a 	call	0x1524	; 0x1524 <read_battery_millivolts_3pi>
    11ca:	ec 01       	movw	r28, r24
	{
		int bat = read_battery_millivolts();
		clear();
    11cc:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <clear>
		print_long(bat);								//print battery voltage in millivolts on the LCD
    11d0:	be 01       	movw	r22, r28
    11d2:	dd 0f       	add	r29, r29
    11d4:	88 0b       	sbc	r24, r24
    11d6:	99 0b       	sbc	r25, r25
    11d8:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <print_long>
		print("mV");
    11dc:	81 e5       	ldi	r24, 0x51	; 81
    11de:	91 e0       	ldi	r25, 0x01	; 1
    11e0:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <print>
		lcd_goto_xy(0,1);
    11e4:	61 e0       	ldi	r22, 0x01	; 1
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <lcd_goto_xy>
		print("druk B");								//print instruction to continue
    11ec:	84 e5       	ldi	r24, 0x54	; 84
    11ee:	91 e0       	ldi	r25, 0x01	; 1
    11f0:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <print>
		delay_ms(100);
    11f4:	84 e6       	ldi	r24, 0x64	; 100
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	0e 94 32 11 	call	0x2264	; 0x2264 <delay_ms>
{
	
	unsigned int counter;
	pololu_3pi_init(2000);								//initialize sensor value from 0 to 2000
	
	while(!button_is_pressed(BUTTON_B))					//this function is activated until button B is pressed.
    11fc:	80 e1       	ldi	r24, 0x10	; 16
    11fe:	0e 94 34 10 	call	0x2068	; 0x2068 <button_is_pressed>
    1202:	88 23       	and	r24, r24
    1204:	01 f3       	breq	.-64     	; 0x11c6 <initialize+0xe>
		lcd_goto_xy(0,1);
		print("druk B");								//print instruction to continue
		delay_ms(100);
	}
	
	wait_for_button_release(BUTTON_B);					//button B is pressed
    1206:	80 e1       	ldi	r24, 0x10	; 16
    1208:	0e 94 20 10 	call	0x2040	; 0x2040 <wait_for_button_release>
	delay_ms(1000);
    120c:	88 ee       	ldi	r24, 0xE8	; 232
    120e:	93 e0       	ldi	r25, 0x03	; 3
    1210:	0e 94 32 11 	call	0x2264	; 0x2264 <delay_ms>
    1214:	cc ee       	ldi	r28, 0xEC	; 236
    1216:	df ef       	ldi	r29, 0xFF	; 255
	
	for(counter=0;counter<80;counter++)					//calibrating line sensors
	{
		if(counter < 20 || counter >= 60)
    1218:	c8 32       	cpi	r28, 0x28	; 40
    121a:	d1 05       	cpc	r29, r1
    121c:	38 f0       	brcs	.+14     	; 0x122c <initialize+0x74>
		set_motors(40,-40);
    121e:	68 ed       	ldi	r22, 0xD8	; 216
    1220:	7f ef       	ldi	r23, 0xFF	; 255
    1222:	88 e2       	ldi	r24, 0x28	; 40
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <set_motors>
    122a:	06 c0       	rjmp	.+12     	; 0x1238 <initialize+0x80>
		else
		set_motors(-40,40);
    122c:	68 e2       	ldi	r22, 0x28	; 40
    122e:	70 e0       	ldi	r23, 0x00	; 0
    1230:	88 ed       	ldi	r24, 0xD8	; 216
    1232:	9f ef       	ldi	r25, 0xFF	; 255
    1234:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <set_motors>
		calibrate_line_sensors(IR_EMITTERS_ON);
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	0e 94 8b 11 	call	0x2316	; 0x2316 <calibrate_line_sensors>
		delay_ms(20);
    123e:	84 e1       	ldi	r24, 0x14	; 20
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	0e 94 32 11 	call	0x2264	; 0x2264 <delay_ms>
    1246:	21 96       	adiw	r28, 0x01	; 1
	}
	
	wait_for_button_release(BUTTON_B);					//button B is pressed
	delay_ms(1000);
	
	for(counter=0;counter<80;counter++)					//calibrating line sensors
    1248:	cc 33       	cpi	r28, 0x3C	; 60
    124a:	d1 05       	cpc	r29, r1
    124c:	29 f7       	brne	.-54     	; 0x1218 <initialize+0x60>
		set_motors(-40,40);
		calibrate_line_sensors(IR_EMITTERS_ON);
		delay_ms(20);
	}
	
	set_motors(0,0);
    124e:	60 e0       	ldi	r22, 0x00	; 0
    1250:	70 e0       	ldi	r23, 0x00	; 0
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <set_motors>
	
	while(!button_is_pressed(BUTTON_B))										//function is activated until button B is pressed
    125a:	15 c0       	rjmp	.+42     	; 0x1286 <initialize+0xce>
	{
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);			//reading the sensors to determine the position of the robot
    125c:	61 e0       	ldi	r22, 0x01	; 1
    125e:	85 e5       	ldi	r24, 0x55	; 85
    1260:	92 e0       	ldi	r25, 0x02	; 2
    1262:	0e 94 91 11 	call	0x2322	; 0x2322 <read_line>
    1266:	ec 01       	movw	r28, r24
		clear();															//clear LCD
    1268:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <clear>
		print("  ");
    126c:	8b e5       	ldi	r24, 0x5B	; 91
    126e:	91 e0       	ldi	r25, 0x01	; 1
    1270:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <print>
		print_long(position);												//print position of the robot compared to the line
    1274:	be 01       	movw	r22, r28
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <print_long>
		delay_ms(100);
    127e:	84 e6       	ldi	r24, 0x64	; 100
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	0e 94 32 11 	call	0x2264	; 0x2264 <delay_ms>
		delay_ms(20);
	}
	
	set_motors(0,0);
	
	while(!button_is_pressed(BUTTON_B))										//function is activated until button B is pressed
    1286:	80 e1       	ldi	r24, 0x10	; 16
    1288:	0e 94 34 10 	call	0x2068	; 0x2068 <button_is_pressed>
    128c:	88 23       	and	r24, r24
    128e:	31 f3       	breq	.-52     	; 0x125c <initialize+0xa4>
		print("  ");
		print_long(position);												//print position of the robot compared to the line
		delay_ms(100);
	}
	
	wait_for_button_release(BUTTON_B);										//button B is pressed
    1290:	80 e1       	ldi	r24, 0x10	; 16
    1292:	0e 94 20 10 	call	0x2040	; 0x2040 <wait_for_button_release>
	clear();																//clear LCD
    1296:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <clear>
	print("Go!");
    129a:	8e e5       	ldi	r24, 0x5E	; 94
    129c:	91 e0       	ldi	r25, 0x01	; 1
    129e:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <print>

}
    12a2:	df 91       	pop	r29
    12a4:	cf 91       	pop	r28
    12a6:	08 95       	ret

000012a8 <checkAfslag>:

int checkAfslag(){
	int flag;
	if(SENSOR_L < 800 && SENSOR_R < 800){
    12a8:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <sensors>
    12ac:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <sensors+0x1>
    12b0:	80 32       	cpi	r24, 0x20	; 32
    12b2:	93 40       	sbci	r25, 0x03	; 3
    12b4:	58 f4       	brcc	.+22     	; 0x12cc <checkAfslag+0x24>
		flag = 0;
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	20 91 5d 02 	lds	r18, 0x025D	; 0x80025d <sensors+0x8>
    12be:	30 91 5e 02 	lds	r19, 0x025E	; 0x80025e <sensors+0x9>
    12c2:	20 32       	cpi	r18, 0x20	; 32
    12c4:	33 40       	sbci	r19, 0x03	; 3
    12c6:	20 f4       	brcc	.+8      	; 0x12d0 <checkAfslag+0x28>
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	08 95       	ret
	}
	else{
		 flag = 1;
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
	}
	return flag;
}
    12d0:	08 95       	ret

000012d2 <followLine>:

void followLine(){
    12d2:	cf 93       	push	r28
    12d4:	df 93       	push	r29
	// Get the position of the line.  Note that we *must* provide
	// the "sensors" argument to read_line() here, even though we
	// are not interested in the individual sensor readings.
	unsigned int position = read_line(sensors,IR_EMITTERS_ON);
    12d6:	61 e0       	ldi	r22, 0x01	; 1
    12d8:	85 e5       	ldi	r24, 0x55	; 85
    12da:	92 e0       	ldi	r25, 0x02	; 2
    12dc:	0e 94 91 11 	call	0x2322	; 0x2322 <read_line>
	
	// The "proportional" term should be 0 when we are on the line.
	int proportional = ((int)position) - 2000;
    12e0:	80 5d       	subi	r24, 0xD0	; 208
    12e2:	97 40       	sbci	r25, 0x07	; 7
	
	// Compute the derivative (change) and integral (sum) of the
	// position.
	int derivative = proportional - last_proportional;
    12e4:	20 91 61 02 	lds	r18, 0x0261	; 0x800261 <last_proportional>
    12e8:	30 91 62 02 	lds	r19, 0x0262	; 0x800262 <last_proportional+0x1>
    12ec:	ac 01       	movw	r20, r24
    12ee:	42 1b       	sub	r20, r18
    12f0:	53 0b       	sbc	r21, r19
    12f2:	9a 01       	movw	r18, r20
	integral += proportional;
    12f4:	e0 91 65 02 	lds	r30, 0x0265	; 0x800265 <integral>
    12f8:	f0 91 66 02 	lds	r31, 0x0266	; 0x800266 <integral+0x1>
    12fc:	e8 0f       	add	r30, r24
    12fe:	f9 1f       	adc	r31, r25
    1300:	f0 93 66 02 	sts	0x0266, r31	; 0x800266 <integral+0x1>
    1304:	e0 93 65 02 	sts	0x0265, r30	; 0x800265 <integral>
	
	// Remember the last position.
	last_proportional = proportional;
    1308:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <last_proportional+0x1>
    130c:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <last_proportional>
	// Compute the difference between the two motor power settings,
	// m1 - m2.  If this is a positive number the robot will turn
	// to the right.  If it is a negative number, the robot will
	// turn to the left, and the magnitude of the number determines
	// the sharpness of the turn.
	int power_difference = proportional/20 + integral/10000 + derivative*3/2;
    1310:	64 e1       	ldi	r22, 0x14	; 20
    1312:	70 e0       	ldi	r23, 0x00	; 0
    1314:	0e 94 f7 16 	call	0x2dee	; 0x2dee <__divmodhi4>
    1318:	eb 01       	movw	r28, r22
    131a:	cf 01       	movw	r24, r30
    131c:	60 e1       	ldi	r22, 0x10	; 16
    131e:	77 e2       	ldi	r23, 0x27	; 39
    1320:	0e 94 f7 16 	call	0x2dee	; 0x2dee <__divmodhi4>
    1324:	ce 01       	movw	r24, r28
    1326:	86 0f       	add	r24, r22
    1328:	97 1f       	adc	r25, r23
    132a:	b9 01       	movw	r22, r18
    132c:	66 0f       	add	r22, r22
    132e:	77 1f       	adc	r23, r23
    1330:	26 0f       	add	r18, r22
    1332:	37 1f       	adc	r19, r23
    1334:	33 23       	and	r19, r19
    1336:	14 f4       	brge	.+4      	; 0x133c <followLine+0x6a>
    1338:	2f 5f       	subi	r18, 0xFF	; 255
    133a:	3f 4f       	sbci	r19, 0xFF	; 255
    133c:	35 95       	asr	r19
    133e:	27 95       	ror	r18
    1340:	82 0f       	add	r24, r18
    1342:	93 1f       	adc	r25, r19
    1344:	87 34       	cpi	r24, 0x47	; 71
    1346:	91 05       	cpc	r25, r1
    1348:	14 f0       	brlt	.+4      	; 0x134e <followLine+0x7c>
    134a:	86 e4       	ldi	r24, 0x46	; 70
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	8a 3b       	cpi	r24, 0xBA	; 186
    1350:	5f ef       	ldi	r21, 0xFF	; 255
    1352:	95 07       	cpc	r25, r21
    1354:	14 f4       	brge	.+4      	; 0x135a <followLine+0x88>
    1356:	8a eb       	ldi	r24, 0xBA	; 186
    1358:	9f ef       	ldi	r25, 0xFF	; 255
	if(power_difference > max)
	power_difference = max;
	if(power_difference < -max)
	power_difference = -max;
	
	if(power_difference < 0)
    135a:	99 23       	and	r25, r25
    135c:	3c f4       	brge	.+14     	; 0x136c <followLine+0x9a>
	set_motors(max+power_difference, max);
    135e:	66 e4       	ldi	r22, 0x46	; 70
    1360:	70 e0       	ldi	r23, 0x00	; 0
    1362:	8a 5b       	subi	r24, 0xBA	; 186
    1364:	9f 4f       	sbci	r25, 0xFF	; 255
    1366:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <set_motors>
    136a:	08 c0       	rjmp	.+16     	; 0x137c <followLine+0xaa>
	else
	set_motors(max, max-power_difference);
    136c:	66 e4       	ldi	r22, 0x46	; 70
    136e:	70 e0       	ldi	r23, 0x00	; 0
    1370:	68 1b       	sub	r22, r24
    1372:	79 0b       	sbc	r23, r25
    1374:	86 e4       	ldi	r24, 0x46	; 70
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <set_motors>
}
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	08 95       	ret

00001382 <_ZN15OrangutanAnalog7setModeEh.part.0>:
    1382:	ec e7       	ldi	r30, 0x7C	; 124
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	8f 7d       	andi	r24, 0xDF	; 223
    138a:	80 83       	st	Z, r24
    138c:	08 95       	ret

0000138e <_ZN15OrangutanAnalog7setModeEh>:
    138e:	81 11       	cpse	r24, r1
    1390:	03 c0       	rjmp	.+6      	; 0x1398 <_ZN15OrangutanAnalog7setModeEh+0xa>
    1392:	0e 94 c1 09 	call	0x1382	; 0x1382 <_ZN15OrangutanAnalog7setModeEh.part.0>
    1396:	08 95       	ret
    1398:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    139c:	80 62       	ori	r24, 0x20	; 32
    139e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    13a2:	08 95       	ret

000013a4 <_ZN15OrangutanAnalog7getModeEv>:
    13a4:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    13a8:	85 fb       	bst	r24, 5
    13aa:	88 27       	eor	r24, r24
    13ac:	80 f9       	bld	r24, 0
    13ae:	08 95       	ret

000013b0 <_ZN15OrangutanAnalog16conversionResultEv>:
    13b0:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <_ZN15OrangutanAnalog7getModeEv>
    13b4:	88 23       	and	r24, r24
    13b6:	21 f0       	breq	.+8      	; 0x13c0 <_ZN15OrangutanAnalog16conversionResultEv+0x10>
    13b8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	08 95       	ret
    13c0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    13c4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    13c8:	08 95       	ret

000013ca <_ZN15OrangutanAnalog15startConversionEhh>:
    13ca:	80 32       	cpi	r24, 0x20	; 32
    13cc:	a0 f4       	brcc	.+40     	; 0x13f6 <_ZN15OrangutanAnalog15startConversionEhh+0x2c>
    13ce:	97 e8       	ldi	r25, 0x87	; 135
    13d0:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    13d4:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    13d8:	66 23       	and	r22, r22
    13da:	11 f0       	breq	.+4      	; 0x13e0 <_ZN15OrangutanAnalog15startConversionEhh+0x16>
    13dc:	90 6c       	ori	r25, 0xC0	; 192
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
    13e0:	9f 77       	andi	r25, 0x7F	; 127
    13e2:	90 64       	ori	r25, 0x40	; 64
    13e4:	90 7e       	andi	r25, 0xE0	; 224
    13e6:	98 2b       	or	r25, r24
    13e8:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    13ec:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    13f0:	80 64       	ori	r24, 0x40	; 64
    13f2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    13f6:	08 95       	ret

000013f8 <_ZN15OrangutanAnalog11readAverageEhj>:
    13f8:	a0 e0       	ldi	r26, 0x00	; 0
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e2 e0       	ldi	r30, 0x02	; 2
    13fe:	fa e0       	ldi	r31, 0x0A	; 10
    1400:	0c 94 7e 17 	jmp	0x2efc	; 0x2efc <__prologue_saves__+0x14>
    1404:	eb 01       	movw	r28, r22
    1406:	60 e0       	ldi	r22, 0x00	; 0
    1408:	0e 94 e5 09 	call	0x13ca	; 0x13ca <_ZN15OrangutanAnalog15startConversionEhh>
    140c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1410:	86 fd       	sbrc	r24, 6
    1412:	fc cf       	rjmp	.-8      	; 0x140c <_ZN15OrangutanAnalog11readAverageEhj+0x14>
    1414:	8e 01       	movw	r16, r28
    1416:	c1 2c       	mov	r12, r1
    1418:	d1 2c       	mov	r13, r1
    141a:	76 01       	movw	r14, r12
    141c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1420:	80 64       	ori	r24, 0x40	; 64
    1422:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1426:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    142a:	86 fd       	sbrc	r24, 6
    142c:	fc cf       	rjmp	.-8      	; 0x1426 <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
    142e:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <_ZN15OrangutanAnalog16conversionResultEv>
    1432:	c8 0e       	add	r12, r24
    1434:	d9 1e       	adc	r13, r25
    1436:	e1 1c       	adc	r14, r1
    1438:	f1 1c       	adc	r15, r1
    143a:	01 50       	subi	r16, 0x01	; 1
    143c:	11 09       	sbc	r17, r1
    143e:	01 15       	cp	r16, r1
    1440:	11 05       	cpc	r17, r1
    1442:	61 f7       	brne	.-40     	; 0x141c <_ZN15OrangutanAnalog11readAverageEhj+0x24>
    1444:	ce 01       	movw	r24, r28
    1446:	96 95       	lsr	r25
    1448:	87 95       	ror	r24
    144a:	c0 34       	cpi	r28, 0x40	; 64
    144c:	d1 05       	cpc	r29, r1
    144e:	38 f4       	brcc	.+14     	; 0x145e <_ZN15OrangutanAnalog11readAverageEhj+0x66>
    1450:	8c 0d       	add	r24, r12
    1452:	9d 1d       	adc	r25, r13
    1454:	be 01       	movw	r22, r28
    1456:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <__udivmodhi4>
    145a:	cb 01       	movw	r24, r22
    145c:	0e c0       	rjmp	.+28     	; 0x147a <_ZN15OrangutanAnalog11readAverageEhj+0x82>
    145e:	a7 01       	movw	r20, r14
    1460:	96 01       	movw	r18, r12
    1462:	28 0f       	add	r18, r24
    1464:	39 1f       	adc	r19, r25
    1466:	41 1d       	adc	r20, r1
    1468:	51 1d       	adc	r21, r1
    146a:	ca 01       	movw	r24, r20
    146c:	b9 01       	movw	r22, r18
    146e:	9e 01       	movw	r18, r28
    1470:	40 e0       	ldi	r20, 0x00	; 0
    1472:	50 e0       	ldi	r21, 0x00	; 0
    1474:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <__udivmodsi4>
    1478:	c9 01       	movw	r24, r18
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
    147e:	e8 e0       	ldi	r30, 0x08	; 8
    1480:	0c 94 9a 17 	jmp	0x2f34	; 0x2f34 <__epilogue_restores__+0x14>

00001484 <_ZN15OrangutanAnalog12toMillivoltsEj>:
    1484:	cf 92       	push	r12
    1486:	df 92       	push	r13
    1488:	ef 92       	push	r14
    148a:	ff 92       	push	r15
    148c:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
    1490:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
    1494:	9c 01       	movw	r18, r24
    1496:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__umulhisi3>
    149a:	6b 01       	movw	r12, r22
    149c:	7c 01       	movw	r14, r24
    149e:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <_ZN15OrangutanAnalog7getModeEv>
    14a2:	88 23       	and	r24, r24
    14a4:	59 f0       	breq	.+22     	; 0x14bc <_ZN15OrangutanAnalog12toMillivoltsEj+0x38>
    14a6:	c7 01       	movw	r24, r14
    14a8:	b6 01       	movw	r22, r12
    14aa:	61 58       	subi	r22, 0x81	; 129
    14ac:	7f 4f       	sbci	r23, 0xFF	; 255
    14ae:	8f 4f       	sbci	r24, 0xFF	; 255
    14b0:	9f 4f       	sbci	r25, 0xFF	; 255
    14b2:	2f ef       	ldi	r18, 0xFF	; 255
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	40 e0       	ldi	r20, 0x00	; 0
    14b8:	50 e0       	ldi	r21, 0x00	; 0
    14ba:	0a c0       	rjmp	.+20     	; 0x14d0 <_ZN15OrangutanAnalog12toMillivoltsEj+0x4c>
    14bc:	c7 01       	movw	r24, r14
    14be:	b6 01       	movw	r22, r12
    14c0:	61 50       	subi	r22, 0x01	; 1
    14c2:	7e 4f       	sbci	r23, 0xFE	; 254
    14c4:	8f 4f       	sbci	r24, 0xFF	; 255
    14c6:	9f 4f       	sbci	r25, 0xFF	; 255
    14c8:	2f ef       	ldi	r18, 0xFF	; 255
    14ca:	33 e0       	ldi	r19, 0x03	; 3
    14cc:	40 e0       	ldi	r20, 0x00	; 0
    14ce:	50 e0       	ldi	r21, 0x00	; 0
    14d0:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <__udivmodsi4>
    14d4:	c9 01       	movw	r24, r18
    14d6:	ff 90       	pop	r15
    14d8:	ef 90       	pop	r14
    14da:	df 90       	pop	r13
    14dc:	cf 90       	pop	r12
    14de:	08 95       	ret

000014e0 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
    14e0:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <_ZN15OrangutanAnalog11readAverageEhj>
    14e4:	0e 94 42 0a 	call	0x1484	; 0x1484 <_ZN15OrangutanAnalog12toMillivoltsEj>
    14e8:	08 95       	ret

000014ea <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
    14ea:	1f 93       	push	r17
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <_ZN15OrangutanAnalog7getModeEv>
    14f4:	18 2f       	mov	r17, r24
    14f6:	0e 94 c1 09 	call	0x1382	; 0x1382 <_ZN15OrangutanAnalog7setModeEh.part.0>
    14fa:	6a e0       	ldi	r22, 0x0A	; 10
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	86 e0       	ldi	r24, 0x06	; 6
    1500:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
    1504:	ec 01       	movw	r28, r24
    1506:	81 2f       	mov	r24, r17
    1508:	0e 94 c7 09 	call	0x138e	; 0x138e <_ZN15OrangutanAnalog7setModeEh>
    150c:	ce 01       	movw	r24, r28
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	8c 0f       	add	r24, r28
    1514:	9d 1f       	adc	r25, r29
    1516:	01 96       	adiw	r24, 0x01	; 1
    1518:	96 95       	lsr	r25
    151a:	87 95       	ror	r24
    151c:	df 91       	pop	r29
    151e:	cf 91       	pop	r28
    1520:	1f 91       	pop	r17
    1522:	08 95       	ret

00001524 <read_battery_millivolts_3pi>:
    1524:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
    1528:	08 95       	ret

0000152a <_ZL16currentCharacterv>:
    152a:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <_ZL17use_program_space>
    152e:	e0 91 82 01 	lds	r30, 0x0182	; 0x800182 <__data_end>
    1532:	f0 91 83 01 	lds	r31, 0x0183	; 0x800183 <__data_end+0x1>
    1536:	99 23       	and	r25, r25
    1538:	11 f0       	breq	.+4      	; 0x153e <_ZL16currentCharacterv+0x14>
    153a:	84 91       	lpm	r24, Z
    153c:	01 c0       	rjmp	.+2      	; 0x1540 <_ZL16currentCharacterv+0x16>
    153e:	80 81       	ld	r24, Z
    1540:	2f eb       	ldi	r18, 0xBF	; 191
    1542:	28 0f       	add	r18, r24
    1544:	2a 31       	cpi	r18, 0x1A	; 26
    1546:	10 f4       	brcc	.+4      	; 0x154c <_ZL16currentCharacterv+0x22>
    1548:	80 5e       	subi	r24, 0xE0	; 224
    154a:	08 95       	ret
    154c:	80 32       	cpi	r24, 0x20	; 32
    154e:	49 f4       	brne	.+18     	; 0x1562 <_ZL16currentCharacterv+0x38>
    1550:	9f 01       	movw	r18, r30
    1552:	2f 5f       	subi	r18, 0xFF	; 255
    1554:	3f 4f       	sbci	r19, 0xFF	; 255
    1556:	30 93 83 01 	sts	0x0183, r19	; 0x800183 <__data_end+0x1>
    155a:	20 93 82 01 	sts	0x0182, r18	; 0x800182 <__data_end>
    155e:	ef 2b       	or	r30, r31
    1560:	31 f7       	brne	.-52     	; 0x152e <_ZL16currentCharacterv+0x4>
    1562:	08 95       	ret

00001564 <_ZL9getNumberv>:
    1564:	1f 93       	push	r17
    1566:	cf 93       	push	r28
    1568:	df 93       	push	r29
    156a:	0e 94 95 0a 	call	0x152a	; 0x152a <_ZL16currentCharacterv>
    156e:	c0 e0       	ldi	r28, 0x00	; 0
    1570:	d0 e0       	ldi	r29, 0x00	; 0
    1572:	1a e0       	ldi	r17, 0x0A	; 10
    1574:	90 ed       	ldi	r25, 0xD0	; 208
    1576:	98 0f       	add	r25, r24
    1578:	9a 30       	cpi	r25, 0x0A	; 10
    157a:	b8 f4       	brcc	.+46     	; 0x15aa <_ZL9getNumberv+0x46>
    157c:	9e 01       	movw	r18, r28
    157e:	12 9f       	mul	r17, r18
    1580:	e0 01       	movw	r28, r0
    1582:	13 9f       	mul	r17, r19
    1584:	d0 0d       	add	r29, r0
    1586:	11 24       	eor	r1, r1
    1588:	c8 0f       	add	r28, r24
    158a:	d1 1d       	adc	r29, r1
    158c:	87 fd       	sbrc	r24, 7
    158e:	da 95       	dec	r29
    1590:	e0 97       	sbiw	r28, 0x30	; 48
    1592:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <__data_end>
    1596:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <__data_end+0x1>
    159a:	01 96       	adiw	r24, 0x01	; 1
    159c:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <__data_end+0x1>
    15a0:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <__data_end>
    15a4:	0e 94 95 0a 	call	0x152a	; 0x152a <_ZL16currentCharacterv>
    15a8:	e5 cf       	rjmp	.-54     	; 0x1574 <_ZL9getNumberv+0x10>
    15aa:	ce 01       	movw	r24, r28
    15ac:	df 91       	pop	r29
    15ae:	cf 91       	pop	r28
    15b0:	1f 91       	pop	r17
    15b2:	08 95       	ret

000015b4 <_ZN15OrangutanBuzzer5init2Ev>:
    15b4:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    15b8:	83 e2       	ldi	r24, 0x23	; 35
    15ba:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    15be:	81 e1       	ldi	r24, 0x11	; 17
    15c0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    15c4:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    15c8:	80 e1       	ldi	r24, 0x10	; 16
    15ca:	97 e2       	ldi	r25, 0x27	; 39
    15cc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    15d0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    15d4:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    15d8:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    15dc:	22 9a       	sbi	0x04, 2	; 4
    15de:	78 94       	sei
    15e0:	08 95       	ret

000015e2 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
    15e2:	8f 92       	push	r8
    15e4:	9f 92       	push	r9
    15e6:	af 92       	push	r10
    15e8:	bf 92       	push	r11
    15ea:	df 92       	push	r13
    15ec:	ef 92       	push	r14
    15ee:	ff 92       	push	r15
    15f0:	0f 93       	push	r16
    15f2:	1f 93       	push	r17
    15f4:	cf 93       	push	r28
    15f6:	df 93       	push	r29
    15f8:	5c 01       	movw	r10, r24
    15fa:	8b 01       	movw	r16, r22
    15fc:	d4 2e       	mov	r13, r20
    15fe:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <buzzerInitialized>
    1602:	81 11       	cpse	r24, r1
    1604:	05 c0       	rjmp	.+10     	; 0x1610 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <buzzerInitialized>
    160c:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <_ZN15OrangutanBuzzer5init2Ev>
    1610:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <buzzerFinished>
    1614:	b7 fe       	sbrs	r11, 7
    1616:	05 c0       	rjmp	.+10     	; 0x1622 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
    1618:	e8 94       	clt
    161a:	b7 f8       	bld	r11, 7
    161c:	2a e0       	ldi	r18, 0x0A	; 10
    161e:	f2 2e       	mov	r15, r18
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
    1622:	ff 24       	eor	r15, r15
    1624:	f3 94       	inc	r15
    1626:	e0 90 81 00 	lds	r14, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    162a:	2e 2d       	mov	r18, r14
    162c:	28 7f       	andi	r18, 0xF8	; 248
    162e:	e2 2e       	mov	r14, r18
    1630:	48 ec       	ldi	r20, 0xC8	; 200
    1632:	f4 9e       	mul	r15, r20
    1634:	c0 01       	movw	r24, r0
    1636:	11 24       	eor	r1, r1
    1638:	8a 15       	cp	r24, r10
    163a:	9b 05       	cpc	r25, r11
    163c:	e0 f4       	brcc	.+56     	; 0x1676 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
    163e:	e5 01       	movw	r28, r10
    1640:	51 e1       	ldi	r21, 0x11	; 17
    1642:	a5 16       	cp	r10, r21
    1644:	57 e2       	ldi	r21, 0x27	; 39
    1646:	b5 06       	cpc	r11, r21
    1648:	10 f0       	brcs	.+4      	; 0x164e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
    164a:	c0 e1       	ldi	r28, 0x10	; 16
    164c:	d7 e2       	ldi	r29, 0x27	; 39
    164e:	be 01       	movw	r22, r28
    1650:	76 95       	lsr	r23
    1652:	67 95       	ror	r22
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	60 58       	subi	r22, 0x80	; 128
    165a:	79 46       	sbci	r23, 0x69	; 105
    165c:	87 46       	sbci	r24, 0x67	; 103
    165e:	9f 4f       	sbci	r25, 0xFF	; 255
    1660:	4e 01       	movw	r8, r28
    1662:	a1 2c       	mov	r10, r1
    1664:	b1 2c       	mov	r11, r1
    1666:	a5 01       	movw	r20, r10
    1668:	94 01       	movw	r18, r8
    166a:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <__udivmodsi4>
    166e:	59 01       	movw	r10, r18
    1670:	8e 2d       	mov	r24, r14
    1672:	81 60       	ori	r24, 0x01	; 1
    1674:	24 c0       	rjmp	.+72     	; 0x16be <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
    1676:	c8 e2       	ldi	r28, 0x28	; 40
    1678:	fc 9e       	mul	r15, r28
    167a:	c0 2d       	mov	r28, r0
    167c:	11 24       	eor	r1, r1
    167e:	d0 e0       	ldi	r29, 0x00	; 0
    1680:	ca 15       	cp	r28, r10
    1682:	db 05       	cpc	r29, r11
    1684:	08 f4       	brcc	.+2      	; 0x1688 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
    1686:	e5 01       	movw	r28, r10
    1688:	be 01       	movw	r22, r28
    168a:	76 95       	lsr	r23
    168c:	67 95       	ror	r22
    168e:	9e 01       	movw	r18, r28
    1690:	40 e0       	ldi	r20, 0x00	; 0
    1692:	50 e0       	ldi	r21, 0x00	; 0
    1694:	8a e0       	ldi	r24, 0x0A	; 10
    1696:	f8 12       	cpse	r15, r24
    1698:	07 c0       	rjmp	.+14     	; 0x16a8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	60 5e       	subi	r22, 0xE0	; 224
    16a0:	73 44       	sbci	r23, 0x43	; 67
    16a2:	81 44       	sbci	r24, 0x41	; 65
    16a4:	9f 4f       	sbci	r25, 0xFF	; 255
    16a6:	06 c0       	rjmp	.+12     	; 0x16b4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	60 53       	subi	r22, 0x30	; 48
    16ae:	7d 4e       	sbci	r23, 0xED	; 237
    16b0:	8c 4e       	sbci	r24, 0xEC	; 236
    16b2:	9f 4f       	sbci	r25, 0xFF	; 255
    16b4:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <__udivmodsi4>
    16b8:	59 01       	movw	r10, r18
    16ba:	8e 2d       	mov	r24, r14
    16bc:	82 60       	ori	r24, 0x02	; 2
    16be:	88 2e       	mov	r8, r24
    16c0:	2a e0       	ldi	r18, 0x0A	; 10
    16c2:	f2 12       	cpse	r15, r18
    16c4:	07 c0       	rjmp	.+14     	; 0x16d4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
    16c6:	ce 01       	movw	r24, r28
    16c8:	05 96       	adiw	r24, 0x05	; 5
    16ca:	6a e0       	ldi	r22, 0x0A	; 10
    16cc:	70 e0       	ldi	r23, 0x00	; 0
    16ce:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <__udivmodhi4>
    16d2:	eb 01       	movw	r28, r22
    16d4:	c8 3e       	cpi	r28, 0xE8	; 232
    16d6:	43 e0       	ldi	r20, 0x03	; 3
    16d8:	d4 07       	cpc	r29, r20
    16da:	59 f0       	breq	.+22     	; 0x16f2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    16dc:	98 01       	movw	r18, r16
    16de:	de 01       	movw	r26, r28
    16e0:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__umulhisi3>
    16e4:	28 ee       	ldi	r18, 0xE8	; 232
    16e6:	33 e0       	ldi	r19, 0x03	; 3
    16e8:	40 e0       	ldi	r20, 0x00	; 0
    16ea:	50 e0       	ldi	r21, 0x00	; 0
    16ec:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__divmodsi4>
    16f0:	89 01       	movw	r16, r18
    16f2:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    16f6:	80 92 81 00 	sts	0x0081, r8	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    16fa:	b0 92 89 00 	sts	0x0089, r11	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    16fe:	a0 92 88 00 	sts	0x0088, r10	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1702:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1706:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    170a:	4d 2d       	mov	r20, r13
    170c:	40 31       	cpi	r20, 0x10	; 16
    170e:	08 f0       	brcs	.+2      	; 0x1712 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    1710:	4f e0       	ldi	r20, 0x0F	; 15
    1712:	80 e1       	ldi	r24, 0x10	; 16
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	84 1b       	sub	r24, r20
    1718:	91 09       	sbc	r25, r1
    171a:	a9 01       	movw	r20, r18
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    171e:	56 95       	lsr	r21
    1720:	47 95       	ror	r20
    1722:	8a 95       	dec	r24
    1724:	e2 f7       	brpl	.-8      	; 0x171e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    1726:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    172a:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    172e:	10 93 8a 01 	sts	0x018A, r17	; 0x80018a <_ZL13buzzerTimeout+0x1>
    1732:	00 93 89 01 	sts	0x0189, r16	; 0x800189 <_ZL13buzzerTimeout>
    1736:	86 b3       	in	r24, 0x16	; 22
    1738:	8f ef       	ldi	r24, 0xFF	; 255
    173a:	86 bb       	out	0x16, r24	; 22
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1742:	df 91       	pop	r29
    1744:	cf 91       	pop	r28
    1746:	1f 91       	pop	r17
    1748:	0f 91       	pop	r16
    174a:	ff 90       	pop	r15
    174c:	ef 90       	pop	r14
    174e:	df 90       	pop	r13
    1750:	bf 90       	pop	r11
    1752:	af 90       	pop	r10
    1754:	9f 90       	pop	r9
    1756:	8f 90       	pop	r8
    1758:	08 95       	ret

0000175a <_ZN15OrangutanBuzzer8playNoteEhjh>:
    175a:	cf 93       	push	r28
    175c:	df 93       	push	r29
    175e:	eb 01       	movw	r28, r22
    1760:	8f 3f       	cpi	r24, 0xFF	; 255
    1762:	11 f0       	breq	.+4      	; 0x1768 <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
    1764:	41 11       	cpse	r20, r1
    1766:	05 c0       	rjmp	.+10     	; 0x1772 <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
    1768:	40 e0       	ldi	r20, 0x00	; 0
    176a:	be 01       	movw	r22, r28
    176c:	88 ee       	ldi	r24, 0xE8	; 232
    176e:	93 e0       	ldi	r25, 0x03	; 3
    1770:	43 c0       	rjmp	.+134    	; 0x17f8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
    1772:	81 31       	cpi	r24, 0x11	; 17
    1774:	30 f0       	brcs	.+12     	; 0x1782 <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
    1776:	50 ef       	ldi	r21, 0xF0	; 240
    1778:	58 0f       	add	r21, r24
    177a:	50 36       	cpi	r21, 0x60	; 96
    177c:	18 f0       	brcs	.+6      	; 0x1784 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    177e:	5f e5       	ldi	r21, 0x5F	; 95
    1780:	01 c0       	rjmp	.+2      	; 0x1784 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1782:	50 e0       	ldi	r21, 0x00	; 0
    1784:	85 2f       	mov	r24, r21
    1786:	6c e0       	ldi	r22, 0x0C	; 12
    1788:	0e 94 d7 16 	call	0x2dae	; 0x2dae <__udivmodqi4>
    178c:	68 2f       	mov	r22, r24
    178e:	74 ef       	ldi	r23, 0xF4	; 244
    1790:	76 03       	mulsu	r23, r22
    1792:	90 01       	movw	r18, r0
    1794:	11 24       	eor	r1, r1
    1796:	25 0f       	add	r18, r21
    1798:	31 1d       	adc	r19, r1
    179a:	2c 30       	cpi	r18, 0x0C	; 12
    179c:	31 05       	cpc	r19, r1
    179e:	40 f4       	brcc	.+16     	; 0x17b0 <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
    17a0:	f9 01       	movw	r30, r18
    17a2:	ee 0f       	add	r30, r30
    17a4:	ff 1f       	adc	r31, r31
    17a6:	ec 5c       	subi	r30, 0xCC	; 204
    17a8:	fe 4f       	sbci	r31, 0xFE	; 254
    17aa:	20 81       	ld	r18, Z
    17ac:	31 81       	ldd	r19, Z+1	; 0x01
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	87 30       	cpi	r24, 0x07	; 7
    17b6:	81 f0       	breq	.+32     	; 0x17d8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
    17b8:	08 2e       	mov	r0, r24
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
    17bc:	22 0f       	add	r18, r18
    17be:	33 1f       	adc	r19, r19
    17c0:	0a 94       	dec	r0
    17c2:	e2 f7       	brpl	.-8      	; 0x17bc <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    17c4:	82 30       	cpi	r24, 0x02	; 2
    17c6:	28 f0       	brcs	.+10     	; 0x17d2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
    17c8:	c9 01       	movw	r24, r18
    17ca:	05 96       	adiw	r24, 0x05	; 5
    17cc:	6a e0       	ldi	r22, 0x0A	; 10
    17ce:	70 e0       	ldi	r23, 0x00	; 0
    17d0:	0c c0       	rjmp	.+24     	; 0x17ea <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
    17d2:	c9 01       	movw	r24, r18
    17d4:	90 58       	subi	r25, 0x80	; 128
    17d6:	0c c0       	rjmp	.+24     	; 0x17f0 <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
    17d8:	c9 01       	movw	r24, r18
    17da:	36 e0       	ldi	r19, 0x06	; 6
    17dc:	88 0f       	add	r24, r24
    17de:	99 1f       	adc	r25, r25
    17e0:	3a 95       	dec	r19
    17e2:	e1 f7       	brne	.-8      	; 0x17dc <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
    17e4:	02 96       	adiw	r24, 0x02	; 2
    17e6:	65 e0       	ldi	r22, 0x05	; 5
    17e8:	70 e0       	ldi	r23, 0x00	; 0
    17ea:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <__udivmodhi4>
    17ee:	cb 01       	movw	r24, r22
    17f0:	40 31       	cpi	r20, 0x10	; 16
    17f2:	08 f0       	brcs	.+2      	; 0x17f6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    17f4:	4f e0       	ldi	r20, 0x0F	; 15
    17f6:	be 01       	movw	r22, r28
    17f8:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	08 95       	ret

00001802 <_ZL8nextNotev>:
    1802:	a2 e0       	ldi	r26, 0x02	; 2
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	e7 e0       	ldi	r30, 0x07	; 7
    1808:	fc e0       	ldi	r31, 0x0C	; 12
    180a:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <__prologue_saves__+0x4>
    180e:	90 90 0a 01 	lds	r9, 0x010A	; 0x80010a <_ZL6octave>
    1812:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <_ZL8staccato>
    1816:	88 23       	and	r24, r24
    1818:	21 f0       	breq	.+8      	; 0x1822 <_ZL8nextNotev+0x20>
    181a:	60 91 85 01 	lds	r22, 0x0185	; 0x800185 <_ZL22staccato_rest_duration>
    181e:	61 11       	cpse	r22, r1
    1820:	17 c0       	rjmp	.+46     	; 0x1850 <_ZL8nextNotev+0x4e>
    1822:	77 24       	eor	r7, r7
    1824:	73 94       	inc	r7
    1826:	b0 ec       	ldi	r27, 0xC0	; 192
    1828:	ab 2e       	mov	r10, r27
    182a:	bd e5       	ldi	r27, 0x5D	; 93
    182c:	bb 2e       	mov	r11, r27
    182e:	1a e0       	ldi	r17, 0x0A	; 10
    1830:	61 2e       	mov	r6, r17
    1832:	04 e0       	ldi	r16, 0x04	; 4
    1834:	80 2e       	mov	r8, r16
    1836:	80 ed       	ldi	r24, 0xD0	; 208
    1838:	c8 2e       	mov	r12, r24
    183a:	87 e0       	ldi	r24, 0x07	; 7
    183c:	d8 2e       	mov	r13, r24
    183e:	94 e0       	ldi	r25, 0x04	; 4
    1840:	e9 2e       	mov	r14, r25
    1842:	f1 2c       	mov	r15, r1
    1844:	04 ef       	ldi	r16, 0xF4	; 244
    1846:	11 e0       	ldi	r17, 0x01	; 1
    1848:	2f e0       	ldi	r18, 0x0F	; 15
    184a:	42 2e       	mov	r4, r18
    184c:	51 2c       	mov	r5, r1
    184e:	15 c0       	rjmp	.+42     	; 0x187a <_ZL8nextNotev+0x78>
    1850:	70 e0       	ldi	r23, 0x00	; 0
    1852:	40 e0       	ldi	r20, 0x00	; 0
    1854:	88 ee       	ldi	r24, 0xE8	; 232
    1856:	93 e0       	ldi	r25, 0x03	; 3
    1858:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    185c:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <_ZL22staccato_rest_duration>
    1860:	17 c1       	rjmp	.+558    	; 0x1a90 <_ZL8nextNotev+0x28e>
    1862:	86 36       	cpi	r24, 0x66	; 102
    1864:	d4 f5       	brge	.+116    	; 0x18da <_ZL8nextNotev+0xd8>
    1866:	81 36       	cpi	r24, 0x61	; 97
    1868:	09 f4       	brne	.+2      	; 0x186c <_ZL8nextNotev+0x6a>
    186a:	a9 c0       	rjmp	.+338    	; 0x19be <_ZL8nextNotev+0x1bc>
    186c:	7c f5       	brge	.+94     	; 0x18cc <_ZL8nextNotev+0xca>
    186e:	8c 33       	cpi	r24, 0x3C	; 60
    1870:	09 f4       	brne	.+2      	; 0x1874 <_ZL8nextNotev+0x72>
    1872:	60 c0       	rjmp	.+192    	; 0x1934 <_ZL8nextNotev+0x132>
    1874:	8e 33       	cpi	r24, 0x3E	; 62
    1876:	81 f4       	brne	.+32     	; 0x1898 <_ZL8nextNotev+0x96>
    1878:	93 94       	inc	r9
    187a:	0e 94 95 0a 	call	0x152a	; 0x152a <_ZL16currentCharacterv>
    187e:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <__data_end>
    1882:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <__data_end+0x1>
    1886:	2f 5f       	subi	r18, 0xFF	; 255
    1888:	3f 4f       	sbci	r19, 0xFF	; 255
    188a:	30 93 83 01 	sts	0x0183, r19	; 0x800183 <__data_end+0x1>
    188e:	20 93 82 01 	sts	0x0182, r18	; 0x800182 <__data_end>
    1892:	85 36       	cpi	r24, 0x65	; 101
    1894:	31 f7       	brne	.-52     	; 0x1862 <_ZL8nextNotev+0x60>
    1896:	52 c0       	rjmp	.+164    	; 0x193c <_ZL8nextNotev+0x13a>
    1898:	81 32       	cpi	r24, 0x21	; 33
    189a:	09 f0       	breq	.+2      	; 0x189e <_ZL8nextNotev+0x9c>
    189c:	8b c0       	rjmp	.+278    	; 0x19b4 <_ZL8nextNotev+0x1b2>
    189e:	80 92 0a 01 	sts	0x010A, r8	; 0x80010a <_ZL6octave>
    18a2:	d0 92 09 01 	sts	0x0109, r13	; 0x800109 <_ZL19whole_note_duration+0x1>
    18a6:	c0 92 08 01 	sts	0x0108, r12	; 0x800108 <_ZL19whole_note_duration>
    18aa:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <_ZL9note_type+0x1>
    18ae:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <_ZL9note_type>
    18b2:	10 93 05 01 	sts	0x0105, r17	; 0x800105 <_ZL8duration+0x1>
    18b6:	00 93 04 01 	sts	0x0104, r16	; 0x800104 <_ZL8duration>
    18ba:	50 92 03 01 	sts	0x0103, r5	; 0x800103 <_ZL6volume+0x1>
    18be:	40 92 02 01 	sts	0x0102, r4	; 0x800102 <_ZL6volume>
    18c2:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <_ZL8staccato>
    18c6:	a4 e0       	ldi	r26, 0x04	; 4
    18c8:	9a 2e       	mov	r9, r26
    18ca:	d7 cf       	rjmp	.-82     	; 0x187a <_ZL8nextNotev+0x78>
    18cc:	83 36       	cpi	r24, 0x63	; 99
    18ce:	a1 f1       	breq	.+104    	; 0x1938 <_ZL8nextNotev+0x136>
    18d0:	0c f4       	brge	.+2      	; 0x18d4 <_ZL8nextNotev+0xd2>
    18d2:	78 c0       	rjmp	.+240    	; 0x19c4 <_ZL8nextNotev+0x1c2>
    18d4:	10 e0       	ldi	r17, 0x00	; 0
    18d6:	82 e0       	ldi	r24, 0x02	; 2
    18d8:	77 c0       	rjmp	.+238    	; 0x19c8 <_ZL8nextNotev+0x1c6>
    18da:	8d 36       	cpi	r24, 0x6D	; 109
    18dc:	c1 f1       	breq	.+112    	; 0x194e <_ZL8nextNotev+0x14c>
    18de:	94 f4       	brge	.+36     	; 0x1904 <_ZL8nextNotev+0x102>
    18e0:	87 36       	cpi	r24, 0x67	; 103
    18e2:	91 f1       	breq	.+100    	; 0x1948 <_ZL8nextNotev+0x146>
    18e4:	74 f1       	brlt	.+92     	; 0x1942 <_ZL8nextNotev+0x140>
    18e6:	8c 36       	cpi	r24, 0x6C	; 108
    18e8:	09 f0       	breq	.+2      	; 0x18ec <_ZL8nextNotev+0xea>
    18ea:	64 c0       	rjmp	.+200    	; 0x19b4 <_ZL8nextNotev+0x1b2>
    18ec:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZL9getNumberv>
    18f0:	bc 01       	movw	r22, r24
    18f2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL9note_type+0x1>
    18f6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL9note_type>
    18fa:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    18fe:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    1902:	51 c0       	rjmp	.+162    	; 0x19a6 <_ZL8nextNotev+0x1a4>
    1904:	82 37       	cpi	r24, 0x72	; 114
    1906:	c9 f1       	breq	.+114    	; 0x197a <_ZL8nextNotev+0x178>
    1908:	4c f4       	brge	.+18     	; 0x191c <_ZL8nextNotev+0x11a>
    190a:	8f 36       	cpi	r24, 0x6F	; 111
    190c:	09 f0       	breq	.+2      	; 0x1910 <_ZL8nextNotev+0x10e>
    190e:	52 c0       	rjmp	.+164    	; 0x19b4 <_ZL8nextNotev+0x1b2>
    1910:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZL9getNumberv>
    1914:	98 2e       	mov	r9, r24
    1916:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZL6octave>
    191a:	af cf       	rjmp	.-162    	; 0x187a <_ZL8nextNotev+0x78>
    191c:	84 37       	cpi	r24, 0x74	; 116
    191e:	81 f1       	breq	.+96     	; 0x1980 <_ZL8nextNotev+0x17e>
    1920:	86 37       	cpi	r24, 0x76	; 118
    1922:	09 f0       	breq	.+2      	; 0x1926 <_ZL8nextNotev+0x124>
    1924:	47 c0       	rjmp	.+142    	; 0x19b4 <_ZL8nextNotev+0x1b2>
    1926:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZL9getNumberv>
    192a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_ZL6volume+0x1>
    192e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_ZL6volume>
    1932:	a3 cf       	rjmp	.-186    	; 0x187a <_ZL8nextNotev+0x78>
    1934:	9a 94       	dec	r9
    1936:	a1 cf       	rjmp	.-190    	; 0x187a <_ZL8nextNotev+0x78>
    1938:	10 e0       	ldi	r17, 0x00	; 0
    193a:	20 c0       	rjmp	.+64     	; 0x197c <_ZL8nextNotev+0x17a>
    193c:	10 e0       	ldi	r17, 0x00	; 0
    193e:	84 e0       	ldi	r24, 0x04	; 4
    1940:	43 c0       	rjmp	.+134    	; 0x19c8 <_ZL8nextNotev+0x1c6>
    1942:	10 e0       	ldi	r17, 0x00	; 0
    1944:	85 e0       	ldi	r24, 0x05	; 5
    1946:	40 c0       	rjmp	.+128    	; 0x19c8 <_ZL8nextNotev+0x1c6>
    1948:	10 e0       	ldi	r17, 0x00	; 0
    194a:	87 e0       	ldi	r24, 0x07	; 7
    194c:	3d c0       	rjmp	.+122    	; 0x19c8 <_ZL8nextNotev+0x1c6>
    194e:	0e 94 95 0a 	call	0x152a	; 0x152a <_ZL16currentCharacterv>
    1952:	8c 36       	cpi	r24, 0x6C	; 108
    1954:	19 f4       	brne	.+6      	; 0x195c <_ZL8nextNotev+0x15a>
    1956:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <_ZL8staccato>
    195a:	04 c0       	rjmp	.+8      	; 0x1964 <_ZL8nextNotev+0x162>
    195c:	70 92 86 01 	sts	0x0186, r7	; 0x800186 <_ZL8staccato>
    1960:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <_ZL22staccato_rest_duration>
    1964:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <__data_end>
    1968:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <__data_end+0x1>
    196c:	2f 5f       	subi	r18, 0xFF	; 255
    196e:	3f 4f       	sbci	r19, 0xFF	; 255
    1970:	30 93 83 01 	sts	0x0183, r19	; 0x800183 <__data_end+0x1>
    1974:	20 93 82 01 	sts	0x0182, r18	; 0x800182 <__data_end>
    1978:	80 cf       	rjmp	.-256    	; 0x187a <_ZL8nextNotev+0x78>
    197a:	11 e0       	ldi	r17, 0x01	; 1
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	24 c0       	rjmp	.+72     	; 0x19c8 <_ZL8nextNotev+0x1c6>
    1980:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZL9getNumberv>
    1984:	bc 01       	movw	r22, r24
    1986:	c5 01       	movw	r24, r10
    1988:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <__udivmodhi4>
    198c:	66 9e       	mul	r6, r22
    198e:	c0 01       	movw	r24, r0
    1990:	67 9e       	mul	r6, r23
    1992:	90 0d       	add	r25, r0
    1994:	11 24       	eor	r1, r1
    1996:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZL19whole_note_duration+0x1>
    199a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL19whole_note_duration>
    199e:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <_ZL9note_type>
    19a2:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <_ZL9note_type+0x1>
    19a6:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <__udivmodhi4>
    19aa:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_ZL8duration+0x1>
    19ae:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_ZL8duration>
    19b2:	63 cf       	rjmp	.-314    	; 0x187a <_ZL8nextNotev+0x78>
    19b4:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <__data_end+0x1>
    19b8:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <__data_end>
    19bc:	69 c0       	rjmp	.+210    	; 0x1a90 <_ZL8nextNotev+0x28e>
    19be:	10 e0       	ldi	r17, 0x00	; 0
    19c0:	89 e0       	ldi	r24, 0x09	; 9
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <_ZL8nextNotev+0x1c6>
    19c4:	10 e0       	ldi	r17, 0x00	; 0
    19c6:	8b e0       	ldi	r24, 0x0B	; 11
    19c8:	08 2f       	mov	r16, r24
    19ca:	9c e0       	ldi	r25, 0x0C	; 12
    19cc:	99 9e       	mul	r9, r25
    19ce:	00 0d       	add	r16, r0
    19d0:	11 24       	eor	r1, r1
    19d2:	0e 94 95 0a 	call	0x152a	; 0x152a <_ZL16currentCharacterv>
    19d6:	98 2f       	mov	r25, r24
    19d8:	97 7f       	andi	r25, 0xF7	; 247
    19da:	93 32       	cpi	r25, 0x23	; 35
    19dc:	61 f4       	brne	.+24     	; 0x19f6 <_ZL8nextNotev+0x1f4>
    19de:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <__data_end>
    19e2:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <__data_end+0x1>
    19e6:	2f 5f       	subi	r18, 0xFF	; 255
    19e8:	3f 4f       	sbci	r19, 0xFF	; 255
    19ea:	30 93 83 01 	sts	0x0183, r19	; 0x800183 <__data_end+0x1>
    19ee:	20 93 82 01 	sts	0x0182, r18	; 0x800182 <__data_end>
    19f2:	0f 5f       	subi	r16, 0xFF	; 255
    19f4:	ee cf       	rjmp	.-36     	; 0x19d2 <_ZL8nextNotev+0x1d0>
    19f6:	8d 32       	cpi	r24, 0x2D	; 45
    19f8:	71 f4       	brne	.+28     	; 0x1a16 <_ZL8nextNotev+0x214>
    19fa:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <__data_end>
    19fe:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <__data_end+0x1>
    1a02:	2f 5f       	subi	r18, 0xFF	; 255
    1a04:	3f 4f       	sbci	r19, 0xFF	; 255
    1a06:	30 93 83 01 	sts	0x0183, r19	; 0x800183 <__data_end+0x1>
    1a0a:	20 93 82 01 	sts	0x0182, r18	; 0x800182 <__data_end>
    1a0e:	01 50       	subi	r16, 0x01	; 1
    1a10:	0e 94 95 0a 	call	0x152a	; 0x152a <_ZL16currentCharacterv>
    1a14:	f0 cf       	rjmp	.-32     	; 0x19f6 <_ZL8nextNotev+0x1f4>
    1a16:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_ZL8duration>
    1a1a:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_ZL8duration+0x1>
    1a1e:	81 53       	subi	r24, 0x31	; 49
    1a20:	88 30       	cpi	r24, 0x08	; 8
    1a22:	50 f4       	brcc	.+20     	; 0x1a38 <_ZL8nextNotev+0x236>
    1a24:	e0 90 08 01 	lds	r14, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    1a28:	f0 90 09 01 	lds	r15, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    1a2c:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_ZL9getNumberv>
    1a30:	bc 01       	movw	r22, r24
    1a32:	c7 01       	movw	r24, r14
    1a34:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <__udivmodhi4>
    1a38:	7b 01       	movw	r14, r22
    1a3a:	f6 94       	lsr	r15
    1a3c:	e7 94       	ror	r14
    1a3e:	69 83       	std	Y+1, r22	; 0x01
    1a40:	7a 83       	std	Y+2, r23	; 0x02
    1a42:	0e 94 95 0a 	call	0x152a	; 0x152a <_ZL16currentCharacterv>
    1a46:	69 81       	ldd	r22, Y+1	; 0x01
    1a48:	7a 81       	ldd	r23, Y+2	; 0x02
    1a4a:	8e 32       	cpi	r24, 0x2E	; 46
    1a4c:	69 f4       	brne	.+26     	; 0x1a68 <_ZL8nextNotev+0x266>
    1a4e:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <__data_end>
    1a52:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <__data_end+0x1>
    1a56:	2f 5f       	subi	r18, 0xFF	; 255
    1a58:	3f 4f       	sbci	r19, 0xFF	; 255
    1a5a:	30 93 83 01 	sts	0x0183, r19	; 0x800183 <__data_end+0x1>
    1a5e:	20 93 82 01 	sts	0x0182, r18	; 0x800182 <__data_end>
    1a62:	6e 0d       	add	r22, r14
    1a64:	7f 1d       	adc	r23, r15
    1a66:	e9 cf       	rjmp	.-46     	; 0x1a3a <_ZL8nextNotev+0x238>
    1a68:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <_ZL8staccato>
    1a6c:	88 23       	and	r24, r24
    1a6e:	39 f0       	breq	.+14     	; 0x1a7e <_ZL8nextNotev+0x27c>
    1a70:	9b 01       	movw	r18, r22
    1a72:	36 95       	lsr	r19
    1a74:	27 95       	ror	r18
    1a76:	20 93 85 01 	sts	0x0185, r18	; 0x800185 <_ZL22staccato_rest_duration>
    1a7a:	62 1b       	sub	r22, r18
    1a7c:	71 09       	sbc	r23, r1
    1a7e:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <_ZL6volume>
    1a82:	11 23       	and	r17, r17
    1a84:	11 f0       	breq	.+4      	; 0x1a8a <_ZL8nextNotev+0x288>
    1a86:	8f ef       	ldi	r24, 0xFF	; 255
    1a88:	01 c0       	rjmp	.+2      	; 0x1a8c <_ZL8nextNotev+0x28a>
    1a8a:	80 2f       	mov	r24, r16
    1a8c:	0e 94 ad 0b 	call	0x175a	; 0x175a <_ZN15OrangutanBuzzer8playNoteEhjh>
    1a90:	22 96       	adiw	r28, 0x02	; 2
    1a92:	e0 e1       	ldi	r30, 0x10	; 16
    1a94:	0c 94 92 17 	jmp	0x2f24	; 0x2f24 <__epilogue_restores__+0x4>

00001a98 <__vector_13>:
    1a98:	1f 92       	push	r1
    1a9a:	0f 92       	push	r0
    1a9c:	0f b6       	in	r0, 0x3f	; 63
    1a9e:	0f 92       	push	r0
    1aa0:	11 24       	eor	r1, r1
    1aa2:	2f 93       	push	r18
    1aa4:	3f 93       	push	r19
    1aa6:	4f 93       	push	r20
    1aa8:	5f 93       	push	r21
    1aaa:	6f 93       	push	r22
    1aac:	7f 93       	push	r23
    1aae:	8f 93       	push	r24
    1ab0:	9f 93       	push	r25
    1ab2:	af 93       	push	r26
    1ab4:	bf 93       	push	r27
    1ab6:	ef 93       	push	r30
    1ab8:	ff 93       	push	r31
    1aba:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <_ZL13buzzerTimeout>
    1abe:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <_ZL13buzzerTimeout+0x1>
    1ac2:	9c 01       	movw	r18, r24
    1ac4:	21 50       	subi	r18, 0x01	; 1
    1ac6:	31 09       	sbc	r19, r1
    1ac8:	30 93 8a 01 	sts	0x018A, r19	; 0x80018a <_ZL13buzzerTimeout+0x1>
    1acc:	20 93 89 01 	sts	0x0189, r18	; 0x800189 <_ZL13buzzerTimeout>
    1ad0:	89 2b       	or	r24, r25
    1ad2:	11 f5       	brne	.+68     	; 0x1b18 <__vector_13+0x80>
    1ad4:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1ad8:	78 94       	sei
    1ada:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1ade:	88 7f       	andi	r24, 0xF8	; 248
    1ae0:	81 60       	ori	r24, 0x01	; 1
    1ae2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1ae6:	80 e1       	ldi	r24, 0x10	; 16
    1ae8:	97 e2       	ldi	r25, 0x27	; 39
    1aea:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1aee:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1af2:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1af6:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <buzzerFinished>
    1b00:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <__data_end>
    1b04:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <__data_end+0x1>
    1b08:	89 2b       	or	r24, r25
    1b0a:	31 f0       	breq	.+12     	; 0x1b18 <__vector_13+0x80>
    1b0c:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <_ZL17play_mode_setting>
    1b10:	81 11       	cpse	r24, r1
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <__vector_13+0x80>
    1b14:	0e 94 01 0c 	call	0x1802	; 0x1802 <_ZL8nextNotev>
    1b18:	ff 91       	pop	r31
    1b1a:	ef 91       	pop	r30
    1b1c:	bf 91       	pop	r27
    1b1e:	af 91       	pop	r26
    1b20:	9f 91       	pop	r25
    1b22:	8f 91       	pop	r24
    1b24:	7f 91       	pop	r23
    1b26:	6f 91       	pop	r22
    1b28:	5f 91       	pop	r21
    1b2a:	4f 91       	pop	r20
    1b2c:	3f 91       	pop	r19
    1b2e:	2f 91       	pop	r18
    1b30:	0f 90       	pop	r0
    1b32:	0f be       	out	0x3f, r0	; 63
    1b34:	0f 90       	pop	r0
    1b36:	1f 90       	pop	r1
    1b38:	18 95       	reti

00001b3a <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    1b3a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1b3e:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <__data_end+0x1>
    1b42:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <__data_end>
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <_ZL17use_program_space>
    1b4c:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <_ZL22staccato_rest_duration>
    1b50:	0e 94 01 0c 	call	0x1802	; 0x1802 <_ZL8nextNotev>
    1b54:	08 95       	ret

00001b56 <play_from_program_space>:
    1b56:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    1b5a:	08 95       	ret

00001b5c <delay_us.constprop.0>:
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	6f 93       	push	r22
    1b62:	64 e0       	ldi	r22, 0x04	; 4
    1b64:	6a 95       	dec	r22
    1b66:	f1 f7       	brne	.-4      	; 0x1b64 <delay_us.constprop.0+0x8>
    1b68:	6f 91       	pop	r22
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	c9 f7       	brne	.-14     	; 0x1b60 <delay_us.constprop.0+0x4>
    1b6e:	08 95       	ret

00001b70 <_ZN12OrangutanLCD8busyWaitEv>:
    1b70:	0f 93       	push	r16
    1b72:	1f 93       	push	r17
    1b74:	cf 93       	push	r28
    1b76:	df 93       	push	r29
    1b78:	1a b1       	in	r17, 0x0a	; 10
    1b7a:	57 98       	cbi	0x0a, 7	; 10
    1b7c:	5a 98       	cbi	0x0b, 2	; 11
    1b7e:	28 9a       	sbi	0x05, 0	; 5
    1b80:	c0 e0       	ldi	r28, 0x00	; 0
    1b82:	d0 e0       	ldi	r29, 0x00	; 0
    1b84:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <delay_us.constprop.0>
    1b88:	5c 9a       	sbi	0x0b, 4	; 11
    1b8a:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <delay_us.constprop.0>
    1b8e:	09 b1       	in	r16, 0x09	; 9
    1b90:	5c 98       	cbi	0x0b, 4	; 11
    1b92:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <delay_us.constprop.0>
    1b96:	5c 9a       	sbi	0x0b, 4	; 11
    1b98:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <delay_us.constprop.0>
    1b9c:	5c 98       	cbi	0x0b, 4	; 11
    1b9e:	24 96       	adiw	r28, 0x04	; 4
    1ba0:	07 ff       	sbrs	r16, 7
    1ba2:	10 c0       	rjmp	.+32     	; 0x1bc4 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    1ba4:	ae 01       	movw	r20, r28
    1ba6:	60 e0       	ldi	r22, 0x00	; 0
    1ba8:	70 e0       	ldi	r23, 0x00	; 0
    1baa:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <lcdTimeout>
    1bae:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <lcdTimeout+0x1>
    1bb2:	a0 91 8d 01 	lds	r26, 0x018D	; 0x80018d <lcdTimeout+0x2>
    1bb6:	b0 91 8e 01 	lds	r27, 0x018E	; 0x80018e <lcdTimeout+0x3>
    1bba:	48 17       	cp	r20, r24
    1bbc:	59 07       	cpc	r21, r25
    1bbe:	6a 07       	cpc	r22, r26
    1bc0:	7b 07       	cpc	r23, r27
    1bc2:	00 f3       	brcs	.-64     	; 0x1b84 <_ZN12OrangutanLCD8busyWaitEv+0x14>
    1bc4:	1a b9       	out	0x0a, r17	; 10
    1bc6:	df 91       	pop	r29
    1bc8:	cf 91       	pop	r28
    1bca:	1f 91       	pop	r17
    1bcc:	0f 91       	pop	r16
    1bce:	08 95       	ret

00001bd0 <_ZN12OrangutanLCD8sendDataEh>:
    1bd0:	95 b1       	in	r25, 0x05	; 5
    1bd2:	28 2f       	mov	r18, r24
    1bd4:	21 70       	andi	r18, 0x01	; 1
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	22 0f       	add	r18, r18
    1bda:	33 1f       	adc	r19, r19
    1bdc:	48 2f       	mov	r20, r24
    1bde:	46 70       	andi	r20, 0x06	; 6
    1be0:	68 e0       	ldi	r22, 0x08	; 8
    1be2:	46 9f       	mul	r20, r22
    1be4:	a0 01       	movw	r20, r0
    1be6:	11 24       	eor	r1, r1
    1be8:	24 2b       	or	r18, r20
    1bea:	9d 7c       	andi	r25, 0xCD	; 205
    1bec:	29 2b       	or	r18, r25
    1bee:	25 b9       	out	0x05, r18	; 5
    1bf0:	9b b1       	in	r25, 0x0b	; 11
    1bf2:	88 70       	andi	r24, 0x08	; 8
    1bf4:	82 95       	swap	r24
    1bf6:	80 7f       	andi	r24, 0xF0	; 240
    1bf8:	9f 77       	andi	r25, 0x7F	; 127
    1bfa:	89 2b       	or	r24, r25
    1bfc:	8b b9       	out	0x0b, r24	; 11
    1bfe:	5c 9a       	sbi	0x0b, 4	; 11
    1c00:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <delay_us.constprop.0>
    1c04:	5c 98       	cbi	0x0b, 4	; 11
    1c06:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <delay_us.constprop.0>
    1c0a:	08 95       	ret

00001c0c <_ZN12OrangutanLCD4sendEhhh>:
    1c0c:	a0 e0       	ldi	r26, 0x00	; 0
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	ec e0       	ldi	r30, 0x0C	; 12
    1c12:	fe e0       	ldi	r31, 0x0E	; 14
    1c14:	0c 94 7f 17 	jmp	0x2efe	; 0x2efe <__prologue_saves__+0x16>
    1c18:	c8 2f       	mov	r28, r24
    1c1a:	d6 2e       	mov	r13, r22
    1c1c:	e4 2e       	mov	r14, r20
    1c1e:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <_ZZN12OrangutanLCD4initEvE11initialized>
    1c22:	81 11       	cpse	r24, r1
    1c24:	05 c0       	rjmp	.+10     	; 0x1c30 <_ZN12OrangutanLCD4sendEhhh+0x24>
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <_ZZN12OrangutanLCD4initEvE11initialized>
    1c2c:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <_ZN12OrangutanLCD5init2Ev>
    1c30:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <_ZN12OrangutanLCD8busyWaitEv>
    1c34:	14 b1       	in	r17, 0x04	; 4
    1c36:	d5 b1       	in	r29, 0x05	; 5
    1c38:	fa b0       	in	r15, 0x0a	; 10
    1c3a:	0b b1       	in	r16, 0x0b	; 11
    1c3c:	28 98       	cbi	0x05, 0	; 5
    1c3e:	dd 20       	and	r13, r13
    1c40:	11 f0       	breq	.+4      	; 0x1c46 <_ZN12OrangutanLCD4sendEhhh+0x3a>
    1c42:	5a 9a       	sbi	0x0b, 2	; 11
    1c44:	01 c0       	rjmp	.+2      	; 0x1c48 <_ZN12OrangutanLCD4sendEhhh+0x3c>
    1c46:	5a 98       	cbi	0x0b, 2	; 11
    1c48:	94 b1       	in	r25, 0x04	; 4
    1c4a:	92 63       	ori	r25, 0x32	; 50
    1c4c:	94 b9       	out	0x04, r25	; 4
    1c4e:	57 9a       	sbi	0x0a, 7	; 10
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	e8 16       	cp	r14, r24
    1c54:	29 f0       	breq	.+10     	; 0x1c60 <_ZN12OrangutanLCD4sendEhhh+0x54>
    1c56:	8c 2f       	mov	r24, r28
    1c58:	82 95       	swap	r24
    1c5a:	8f 70       	andi	r24, 0x0F	; 15
    1c5c:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <_ZN12OrangutanLCD8sendDataEh>
    1c60:	8c 2f       	mov	r24, r28
    1c62:	8f 70       	andi	r24, 0x0F	; 15
    1c64:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <_ZN12OrangutanLCD8sendDataEh>
    1c68:	fa b8       	out	0x0a, r15	; 10
    1c6a:	0b b9       	out	0x0b, r16	; 11
    1c6c:	14 b9       	out	0x04, r17	; 4
    1c6e:	d5 b9       	out	0x05, r29	; 5
    1c70:	cd b7       	in	r28, 0x3d	; 61
    1c72:	de b7       	in	r29, 0x3e	; 62
    1c74:	e7 e0       	ldi	r30, 0x07	; 7
    1c76:	0c 94 9b 17 	jmp	0x2f36	; 0x2f36 <__epilogue_restores__+0x16>

00001c7a <_ZN12OrangutanLCD8send_cmdEh>:
    1c7a:	42 e0       	ldi	r20, 0x02	; 2
    1c7c:	60 e0       	ldi	r22, 0x00	; 0
    1c7e:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <_ZN12OrangutanLCD4sendEhhh>
    1c82:	08 95       	ret

00001c84 <_ZN12OrangutanLCD9send_dataEh>:
    1c84:	42 e0       	ldi	r20, 0x02	; 2
    1c86:	61 e0       	ldi	r22, 0x01	; 1
    1c88:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <_ZN12OrangutanLCD4sendEhhh>
    1c8c:	08 95       	ret

00001c8e <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    1c8e:	41 e0       	ldi	r20, 0x01	; 1
    1c90:	60 e0       	ldi	r22, 0x00	; 0
    1c92:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <_ZN12OrangutanLCD4sendEhhh>
    1c96:	08 95       	ret

00001c98 <_ZN12OrangutanLCD5init2Ev>:
    1c98:	80 e1       	ldi	r24, 0x10	; 16
    1c9a:	97 e2       	ldi	r25, 0x27	; 39
    1c9c:	a0 e0       	ldi	r26, 0x00	; 0
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <lcdTimeout>
    1ca4:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <lcdTimeout+0x1>
    1ca8:	a0 93 8d 01 	sts	0x018D, r26	; 0x80018d <lcdTimeout+0x2>
    1cac:	b0 93 8e 01 	sts	0x018E, r27	; 0x80018e <lcdTimeout+0x3>
    1cb0:	52 9a       	sbi	0x0a, 2	; 10
    1cb2:	20 9a       	sbi	0x04, 0	; 4
    1cb4:	54 9a       	sbi	0x0a, 4	; 10
    1cb6:	8e e1       	ldi	r24, 0x1E	; 30
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	0e 94 32 11 	call	0x2264	; 0x2264 <delay_ms>
    1cbe:	83 e0       	ldi	r24, 0x03	; 3
    1cc0:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1cc4:	86 e0       	ldi	r24, 0x06	; 6
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	0e 94 32 11 	call	0x2264	; 0x2264 <delay_ms>
    1ccc:	83 e0       	ldi	r24, 0x03	; 3
    1cce:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1cd2:	82 e0       	ldi	r24, 0x02	; 2
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	0e 94 32 11 	call	0x2264	; 0x2264 <delay_ms>
    1cda:	83 e0       	ldi	r24, 0x03	; 3
    1cdc:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1ce0:	82 e0       	ldi	r24, 0x02	; 2
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	0e 94 32 11 	call	0x2264	; 0x2264 <delay_ms>
    1ce8:	82 e0       	ldi	r24, 0x02	; 2
    1cea:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1cee:	82 e0       	ldi	r24, 0x02	; 2
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	0e 94 32 11 	call	0x2264	; 0x2264 <delay_ms>
    1cf6:	88 e2       	ldi	r24, 0x28	; 40
    1cf8:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <_ZN12OrangutanLCD8send_cmdEh>
    1cfc:	88 e0       	ldi	r24, 0x08	; 8
    1cfe:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <_ZN12OrangutanLCD8send_cmdEh>
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <_ZN12OrangutanLCD8send_cmdEh>
    1d08:	86 e0       	ldi	r24, 0x06	; 6
    1d0a:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <_ZN12OrangutanLCD8send_cmdEh>
    1d0e:	8c e0       	ldi	r24, 0x0C	; 12
    1d10:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <_ZN12OrangutanLCD8send_cmdEh>
    1d14:	08 95       	ret

00001d16 <_ZN12OrangutanLCD5clearEv>:
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <_ZN12OrangutanLCD8send_cmdEh>
    1d1c:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <printf_chars>
    1d20:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <printf_chars+0x1>
    1d24:	89 2b       	or	r24, r25
    1d26:	f9 f0       	breq	.+62     	; 0x1d66 <_ZN12OrangutanLCD5clearEv+0x50>
    1d28:	60 e0       	ldi	r22, 0x00	; 0
    1d2a:	a0 e2       	ldi	r26, 0x20	; 32
    1d2c:	26 2f       	mov	r18, r22
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <numLCDCols>
    1d34:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <numLCDRows>
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	78 9f       	mul	r23, r24
    1d3e:	a0 01       	movw	r20, r0
    1d40:	79 9f       	mul	r23, r25
    1d42:	50 0d       	add	r21, r0
    1d44:	11 24       	eor	r1, r1
    1d46:	24 17       	cp	r18, r20
    1d48:	35 07       	cpc	r19, r21
    1d4a:	4c f4       	brge	.+18     	; 0x1d5e <_ZN12OrangutanLCD5clearEv+0x48>
    1d4c:	e0 91 91 01 	lds	r30, 0x0191	; 0x800191 <printf_chars>
    1d50:	f0 91 92 01 	lds	r31, 0x0192	; 0x800192 <printf_chars+0x1>
    1d54:	e2 0f       	add	r30, r18
    1d56:	f3 1f       	adc	r31, r19
    1d58:	a0 83       	st	Z, r26
    1d5a:	6f 5f       	subi	r22, 0xFF	; 255
    1d5c:	e7 cf       	rjmp	.-50     	; 0x1d2c <_ZN12OrangutanLCD5clearEv+0x16>
    1d5e:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <col>
    1d62:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <row>
    1d66:	08 95       	ret

00001d68 <clear>:
    1d68:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <_ZN12OrangutanLCD5clearEv>
    1d6c:	08 95       	ret

00001d6e <_ZN12OrangutanLCD5printEPKc>:
    1d6e:	cf 93       	push	r28
    1d70:	df 93       	push	r29
    1d72:	ec 01       	movw	r28, r24
    1d74:	89 91       	ld	r24, Y+
    1d76:	88 23       	and	r24, r24
    1d78:	19 f0       	breq	.+6      	; 0x1d80 <_ZN12OrangutanLCD5printEPKc+0x12>
    1d7a:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <_ZN12OrangutanLCD9send_dataEh>
    1d7e:	fa cf       	rjmp	.-12     	; 0x1d74 <_ZN12OrangutanLCD5printEPKc+0x6>
    1d80:	df 91       	pop	r29
    1d82:	cf 91       	pop	r28
    1d84:	08 95       	ret

00001d86 <print>:
    1d86:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <_ZN12OrangutanLCD5printEPKc>
    1d8a:	08 95       	ret

00001d8c <_ZN12OrangutanLCD5printEm>:
    1d8c:	aa e0       	ldi	r26, 0x0A	; 10
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	ec ec       	ldi	r30, 0xCC	; 204
    1d92:	fe e0       	ldi	r31, 0x0E	; 14
    1d94:	0c 94 7e 17 	jmp	0x2efc	; 0x2efc <__prologue_saves__+0x14>
    1d98:	1a e0       	ldi	r17, 0x0A	; 10
    1d9a:	5a e0       	ldi	r21, 0x0A	; 10
    1d9c:	c5 2e       	mov	r12, r21
    1d9e:	d1 2c       	mov	r13, r1
    1da0:	e1 2c       	mov	r14, r1
    1da2:	f1 2c       	mov	r15, r1
    1da4:	06 2f       	mov	r16, r22
    1da6:	a7 01       	movw	r20, r14
    1da8:	96 01       	movw	r18, r12
    1daa:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <__udivmodsi4>
    1dae:	ca 01       	movw	r24, r20
    1db0:	b9 01       	movw	r22, r18
    1db2:	11 50       	subi	r17, 0x01	; 1
    1db4:	e1 e0       	ldi	r30, 0x01	; 1
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	ec 0f       	add	r30, r28
    1dba:	fd 1f       	adc	r31, r29
    1dbc:	e1 0f       	add	r30, r17
    1dbe:	f1 1d       	adc	r31, r1
    1dc0:	00 5d       	subi	r16, 0xD0	; 208
    1dc2:	2a e0       	ldi	r18, 0x0A	; 10
    1dc4:	62 9f       	mul	r22, r18
    1dc6:	00 19       	sub	r16, r0
    1dc8:	11 24       	eor	r1, r1
    1dca:	00 83       	st	Z, r16
    1dcc:	61 15       	cp	r22, r1
    1dce:	71 05       	cpc	r23, r1
    1dd0:	81 05       	cpc	r24, r1
    1dd2:	91 05       	cpc	r25, r1
    1dd4:	39 f7       	brne	.-50     	; 0x1da4 <_ZN12OrangutanLCD5printEm+0x18>
    1dd6:	1a 30       	cpi	r17, 0x0A	; 10
    1dd8:	58 f4       	brcc	.+22     	; 0x1df0 <_ZN12OrangutanLCD5printEm+0x64>
    1dda:	e1 e0       	ldi	r30, 0x01	; 1
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	ec 0f       	add	r30, r28
    1de0:	fd 1f       	adc	r31, r29
    1de2:	e1 0f       	add	r30, r17
    1de4:	f1 1d       	adc	r31, r1
    1de6:	80 81       	ld	r24, Z
    1de8:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <_ZN12OrangutanLCD9send_dataEh>
    1dec:	1f 5f       	subi	r17, 0xFF	; 255
    1dee:	f3 cf       	rjmp	.-26     	; 0x1dd6 <_ZN12OrangutanLCD5printEm+0x4a>
    1df0:	2a 96       	adiw	r28, 0x0a	; 10
    1df2:	e8 e0       	ldi	r30, 0x08	; 8
    1df4:	0c 94 9a 17 	jmp	0x2f34	; 0x2f34 <__epilogue_restores__+0x14>

00001df8 <_ZN12OrangutanLCD5printEl>:
    1df8:	cf 92       	push	r12
    1dfa:	df 92       	push	r13
    1dfc:	ef 92       	push	r14
    1dfe:	ff 92       	push	r15
    1e00:	6b 01       	movw	r12, r22
    1e02:	7c 01       	movw	r14, r24
    1e04:	97 ff       	sbrs	r25, 7
    1e06:	0b c0       	rjmp	.+22     	; 0x1e1e <_ZN12OrangutanLCD5printEl+0x26>
    1e08:	f0 94       	com	r15
    1e0a:	e0 94       	com	r14
    1e0c:	d0 94       	com	r13
    1e0e:	c0 94       	com	r12
    1e10:	c1 1c       	adc	r12, r1
    1e12:	d1 1c       	adc	r13, r1
    1e14:	e1 1c       	adc	r14, r1
    1e16:	f1 1c       	adc	r15, r1
    1e18:	8d e2       	ldi	r24, 0x2D	; 45
    1e1a:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <_ZN12OrangutanLCD9send_dataEh>
    1e1e:	c7 01       	movw	r24, r14
    1e20:	b6 01       	movw	r22, r12
    1e22:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <_ZN12OrangutanLCD5printEm>
    1e26:	ff 90       	pop	r15
    1e28:	ef 90       	pop	r14
    1e2a:	df 90       	pop	r13
    1e2c:	cf 90       	pop	r12
    1e2e:	08 95       	ret

00001e30 <print_long>:
    1e30:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <_ZN12OrangutanLCD5printEl>
    1e34:	08 95       	ret

00001e36 <_ZN12OrangutanLCD6gotoXYEhh>:
    1e36:	a5 e0       	ldi	r26, 0x05	; 5
    1e38:	b0 e0       	ldi	r27, 0x00	; 0
    1e3a:	e1 e2       	ldi	r30, 0x21	; 33
    1e3c:	ff e0       	ldi	r31, 0x0F	; 15
    1e3e:	0c 94 83 17 	jmp	0x2f06	; 0x2f06 <__prologue_saves__+0x1e>
    1e42:	18 2f       	mov	r17, r24
    1e44:	80 e8       	ldi	r24, 0x80	; 128
    1e46:	89 83       	std	Y+1, r24	; 0x01
    1e48:	80 ec       	ldi	r24, 0xC0	; 192
    1e4a:	8a 83       	std	Y+2, r24	; 0x02
    1e4c:	84 e9       	ldi	r24, 0x94	; 148
    1e4e:	8b 83       	std	Y+3, r24	; 0x03
    1e50:	84 ed       	ldi	r24, 0xD4	; 212
    1e52:	8c 83       	std	Y+4, r24	; 0x04
    1e54:	fe 01       	movw	r30, r28
    1e56:	e6 0f       	add	r30, r22
    1e58:	f1 1d       	adc	r31, r1
    1e5a:	81 81       	ldd	r24, Z+1	; 0x01
    1e5c:	81 0f       	add	r24, r17
    1e5e:	6d 83       	std	Y+5, r22	; 0x05
    1e60:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <_ZN12OrangutanLCD8send_cmdEh>
    1e64:	10 93 8f 01 	sts	0x018F, r17	; 0x80018f <col>
    1e68:	6d 81       	ldd	r22, Y+5	; 0x05
    1e6a:	60 93 90 01 	sts	0x0190, r22	; 0x800190 <row>
    1e6e:	25 96       	adiw	r28, 0x05	; 5
    1e70:	e3 e0       	ldi	r30, 0x03	; 3
    1e72:	0c 94 9f 17 	jmp	0x2f3e	; 0x2f3e <__epilogue_restores__+0x1e>

00001e76 <lcd_goto_xy>:
    1e76:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <_ZN12OrangutanLCD6gotoXYEhh>
    1e7a:	08 95       	ret

00001e7c <_ZN16OrangutanDigital9setOutputEhh>:
    1e7c:	88 30       	cpi	r24, 0x08	; 8
    1e7e:	58 f4       	brcc	.+22     	; 0x1e96 <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    1e80:	91 e0       	ldi	r25, 0x01	; 1
    1e82:	01 c0       	rjmp	.+2      	; 0x1e86 <_ZN16OrangutanDigital9setOutputEhh+0xa>
    1e84:	99 0f       	add	r25, r25
    1e86:	8a 95       	dec	r24
    1e88:	ea f7       	brpl	.-6      	; 0x1e84 <_ZN16OrangutanDigital9setOutputEhh+0x8>
    1e8a:	89 2f       	mov	r24, r25
    1e8c:	aa e2       	ldi	r26, 0x2A	; 42
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	eb e2       	ldi	r30, 0x2B	; 43
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	21 c0       	rjmp	.+66     	; 0x1ed8 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    1e96:	8e 30       	cpi	r24, 0x0E	; 14
    1e98:	60 f4       	brcc	.+24     	; 0x1eb2 <_ZN16OrangutanDigital9setOutputEhh+0x36>
    1e9a:	98 ef       	ldi	r25, 0xF8	; 248
    1e9c:	98 0f       	add	r25, r24
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	01 c0       	rjmp	.+2      	; 0x1ea4 <_ZN16OrangutanDigital9setOutputEhh+0x28>
    1ea2:	88 0f       	add	r24, r24
    1ea4:	9a 95       	dec	r25
    1ea6:	ea f7       	brpl	.-6      	; 0x1ea2 <_ZN16OrangutanDigital9setOutputEhh+0x26>
    1ea8:	a4 e2       	ldi	r26, 0x24	; 36
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	e5 e2       	ldi	r30, 0x25	; 37
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	13 c0       	rjmp	.+38     	; 0x1ed8 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    1eb2:	85 31       	cpi	r24, 0x15	; 21
    1eb4:	60 f4       	brcc	.+24     	; 0x1ece <_ZN16OrangutanDigital9setOutputEhh+0x52>
    1eb6:	92 ef       	ldi	r25, 0xF2	; 242
    1eb8:	98 0f       	add	r25, r24
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	01 c0       	rjmp	.+2      	; 0x1ec0 <_ZN16OrangutanDigital9setOutputEhh+0x44>
    1ebe:	88 0f       	add	r24, r24
    1ec0:	9a 95       	dec	r25
    1ec2:	ea f7       	brpl	.-6      	; 0x1ebe <_ZN16OrangutanDigital9setOutputEhh+0x42>
    1ec4:	a7 e2       	ldi	r26, 0x27	; 39
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	e8 e2       	ldi	r30, 0x28	; 40
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	05 c0       	rjmp	.+10     	; 0x1ed8 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    1ece:	80 e0       	ldi	r24, 0x00	; 0
    1ed0:	a0 e0       	ldi	r26, 0x00	; 0
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	e0 e0       	ldi	r30, 0x00	; 0
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	6f 3f       	cpi	r22, 0xFF	; 255
    1eda:	19 f4       	brne	.+6      	; 0x1ee2 <_ZN16OrangutanDigital9setOutputEhh+0x66>
    1edc:	90 81       	ld	r25, Z
    1ede:	98 27       	eor	r25, r24
    1ee0:	09 c0       	rjmp	.+18     	; 0x1ef4 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    1ee2:	66 23       	and	r22, r22
    1ee4:	19 f0       	breq	.+6      	; 0x1eec <_ZN16OrangutanDigital9setOutputEhh+0x70>
    1ee6:	90 81       	ld	r25, Z
    1ee8:	98 2b       	or	r25, r24
    1eea:	04 c0       	rjmp	.+8      	; 0x1ef4 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    1eec:	20 81       	ld	r18, Z
    1eee:	98 2f       	mov	r25, r24
    1ef0:	90 95       	com	r25
    1ef2:	92 23       	and	r25, r18
    1ef4:	90 83       	st	Z, r25
    1ef6:	9c 91       	ld	r25, X
    1ef8:	98 2b       	or	r25, r24
    1efa:	9c 93       	st	X, r25
    1efc:	08 95       	ret

00001efe <_ZN15OrangutanMotors5init2Ev>:
    1efe:	83 ef       	ldi	r24, 0xF3	; 243
    1f00:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1f04:	84 bd       	out	0x24, r24	; 36
    1f06:	82 e0       	ldi	r24, 0x02	; 2
    1f08:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    1f0c:	85 bd       	out	0x25, r24	; 37
    1f0e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    1f12:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    1f16:	18 bc       	out	0x28, r1	; 40
    1f18:	17 bc       	out	0x27, r1	; 39
    1f1a:	60 e0       	ldi	r22, 0x00	; 0
    1f1c:	86 e0       	ldi	r24, 0x06	; 6
    1f1e:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <_ZN16OrangutanDigital9setOutputEhh>
    1f22:	60 e0       	ldi	r22, 0x00	; 0
    1f24:	85 e0       	ldi	r24, 0x05	; 5
    1f26:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <_ZN16OrangutanDigital9setOutputEhh>
    1f2a:	60 e0       	ldi	r22, 0x00	; 0
    1f2c:	8b e0       	ldi	r24, 0x0B	; 11
    1f2e:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <_ZN16OrangutanDigital9setOutputEhh>
    1f32:	60 e0       	ldi	r22, 0x00	; 0
    1f34:	83 e0       	ldi	r24, 0x03	; 3
    1f36:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <_ZN16OrangutanDigital9setOutputEhh>
    1f3a:	08 95       	ret

00001f3c <_ZN15OrangutanMotors4initEv>:
    1f3c:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <_ZZN15OrangutanMotors4initEvE11initialized>
    1f40:	81 11       	cpse	r24, r1
    1f42:	05 c0       	rjmp	.+10     	; 0x1f4e <_ZN15OrangutanMotors4initEv+0x12>
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <_ZZN15OrangutanMotors4initEvE11initialized>
    1f4a:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <_ZN15OrangutanMotors5init2Ev>
    1f4e:	08 95       	ret

00001f50 <_ZN15OrangutanMotors10setM1SpeedEi>:
    1f50:	cf 93       	push	r28
    1f52:	df 93       	push	r29
    1f54:	ec 01       	movw	r28, r24
    1f56:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_ZN15OrangutanMotors4initEv>
    1f5a:	d7 ff       	sbrs	r29, 7
    1f5c:	05 c0       	rjmp	.+10     	; 0x1f68 <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    1f5e:	d1 95       	neg	r29
    1f60:	c1 95       	neg	r28
    1f62:	d1 09       	sbc	r29, r1
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	01 c0       	rjmp	.+2      	; 0x1f6a <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	cf 3f       	cpi	r28, 0xFF	; 255
    1f6c:	d1 05       	cpc	r29, r1
    1f6e:	19 f0       	breq	.+6      	; 0x1f76 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    1f70:	14 f0       	brlt	.+4      	; 0x1f76 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    1f72:	cf ef       	ldi	r28, 0xFF	; 255
    1f74:	d0 e0       	ldi	r29, 0x00	; 0
    1f76:	88 23       	and	r24, r24
    1f78:	19 f0       	breq	.+6      	; 0x1f80 <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    1f7a:	18 bc       	out	0x28, r1	; 40
    1f7c:	c7 bd       	out	0x27, r28	; 39
    1f7e:	02 c0       	rjmp	.+4      	; 0x1f84 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    1f80:	c8 bd       	out	0x28, r28	; 40
    1f82:	17 bc       	out	0x27, r1	; 39
    1f84:	df 91       	pop	r29
    1f86:	cf 91       	pop	r28
    1f88:	08 95       	ret

00001f8a <_ZN15OrangutanMotors10setM2SpeedEi>:
    1f8a:	cf 93       	push	r28
    1f8c:	df 93       	push	r29
    1f8e:	ec 01       	movw	r28, r24
    1f90:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <_ZN15OrangutanMotors4initEv>
    1f94:	d7 ff       	sbrs	r29, 7
    1f96:	05 c0       	rjmp	.+10     	; 0x1fa2 <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    1f98:	d1 95       	neg	r29
    1f9a:	c1 95       	neg	r28
    1f9c:	d1 09       	sbc	r29, r1
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	01 c0       	rjmp	.+2      	; 0x1fa4 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	cf 3f       	cpi	r28, 0xFF	; 255
    1fa6:	d1 05       	cpc	r29, r1
    1fa8:	19 f0       	breq	.+6      	; 0x1fb0 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1faa:	14 f0       	brlt	.+4      	; 0x1fb0 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1fac:	cf ef       	ldi	r28, 0xFF	; 255
    1fae:	d0 e0       	ldi	r29, 0x00	; 0
    1fb0:	88 23       	and	r24, r24
    1fb2:	29 f0       	breq	.+10     	; 0x1fbe <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    1fb4:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    1fb8:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    1fbc:	04 c0       	rjmp	.+8      	; 0x1fc6 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    1fbe:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    1fc2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    1fc6:	df 91       	pop	r29
    1fc8:	cf 91       	pop	r28
    1fca:	08 95       	ret

00001fcc <_ZN15OrangutanMotors9setSpeedsEii>:
    1fcc:	cf 93       	push	r28
    1fce:	df 93       	push	r29
    1fd0:	eb 01       	movw	r28, r22
    1fd2:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <_ZN15OrangutanMotors10setM1SpeedEi>
    1fd6:	ce 01       	movw	r24, r28
    1fd8:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <_ZN15OrangutanMotors10setM2SpeedEi>
    1fdc:	df 91       	pop	r29
    1fde:	cf 91       	pop	r28
    1fe0:	08 95       	ret

00001fe2 <set_motors>:
    1fe2:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <_ZN15OrangutanMotors9setSpeedsEii>
    1fe6:	08 95       	ret

00001fe8 <_ZN20OrangutanPushbuttons5init2Ev>:
    1fe8:	84 b1       	in	r24, 0x04	; 4
    1fea:	8d 7c       	andi	r24, 0xCD	; 205
    1fec:	84 b9       	out	0x04, r24	; 4
    1fee:	85 b1       	in	r24, 0x05	; 5
    1ff0:	82 63       	ori	r24, 0x32	; 50
    1ff2:	85 b9       	out	0x05, r24	; 5
    1ff4:	85 e0       	ldi	r24, 0x05	; 5
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	6f 93       	push	r22
    1ffa:	64 e0       	ldi	r22, 0x04	; 4
    1ffc:	6a 95       	dec	r22
    1ffe:	f1 f7       	brne	.-4      	; 0x1ffc <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    2000:	6f 91       	pop	r22
    2002:	01 97       	sbiw	r24, 0x01	; 1
    2004:	c9 f7       	brne	.-14     	; 0x1ff8 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    2006:	08 95       	ret

00002008 <_ZN20OrangutanPushbuttons4initEv>:
    2008:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    200c:	81 11       	cpse	r24, r1
    200e:	05 c0       	rjmp	.+10     	; 0x201a <_ZN20OrangutanPushbuttons4initEv+0x12>
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    2016:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <_ZN20OrangutanPushbuttons5init2Ev>
    201a:	08 95       	ret

0000201c <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    201c:	cf 93       	push	r28
    201e:	c8 2f       	mov	r28, r24
    2020:	0e 94 04 10 	call	0x2008	; 0x2008 <_ZN20OrangutanPushbuttons4initEv>
    2024:	83 b1       	in	r24, 0x03	; 3
    2026:	8c 23       	and	r24, r28
    2028:	e9 f3       	breq	.-6      	; 0x2024 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    202a:	8a e0       	ldi	r24, 0x0A	; 10
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	0e 94 32 11 	call	0x2264	; 0x2264 <delay_ms>
    2032:	83 b1       	in	r24, 0x03	; 3
    2034:	8c 23       	and	r24, r28
    2036:	b1 f3       	breq	.-20     	; 0x2024 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    2038:	83 b1       	in	r24, 0x03	; 3
    203a:	8c 23       	and	r24, r28
    203c:	cf 91       	pop	r28
    203e:	08 95       	ret

00002040 <wait_for_button_release>:
    2040:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    2044:	08 95       	ret

00002046 <_ZN20OrangutanPushbuttons9isPressedEh>:
    2046:	a1 e0       	ldi	r26, 0x01	; 1
    2048:	b0 e0       	ldi	r27, 0x00	; 0
    204a:	e9 e2       	ldi	r30, 0x29	; 41
    204c:	f0 e1       	ldi	r31, 0x10	; 16
    204e:	0c 94 84 17 	jmp	0x2f08	; 0x2f08 <__prologue_saves__+0x20>
    2052:	89 83       	std	Y+1, r24	; 0x01
    2054:	0e 94 04 10 	call	0x2008	; 0x2008 <_ZN20OrangutanPushbuttons4initEv>
    2058:	93 b1       	in	r25, 0x03	; 3
    205a:	90 95       	com	r25
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	89 23       	and	r24, r25
    2060:	21 96       	adiw	r28, 0x01	; 1
    2062:	e2 e0       	ldi	r30, 0x02	; 2
    2064:	0c 94 a0 17 	jmp	0x2f40	; 0x2f40 <__epilogue_restores__+0x20>

00002068 <button_is_pressed>:
    2068:	0e 94 23 10 	call	0x2046	; 0x2046 <_ZN20OrangutanPushbuttons9isPressedEh>
    206c:	08 95       	ret

0000206e <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>:
    206e:	28 2f       	mov	r18, r24
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	9a e0       	ldi	r25, 0x0A	; 10
    2074:	89 9f       	mul	r24, r25
    2076:	f0 01       	movw	r30, r0
    2078:	11 24       	eor	r1, r1
    207a:	ed 56       	subi	r30, 0x6D	; 109
    207c:	fe 4f       	sbci	r31, 0xFE	; 254
    207e:	80 85       	ldd	r24, Z+8	; 0x08
    2080:	91 85       	ldd	r25, Z+9	; 0x09
    2082:	00 97       	sbiw	r24, 0x00	; 0
    2084:	21 f0       	breq	.+8      	; 0x208e <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    2086:	52 81       	ldd	r21, Z+2	; 0x02
    2088:	44 81       	ldd	r20, Z+4	; 0x04
    208a:	54 17       	cp	r21, r20
    208c:	80 f0       	brcs	.+32     	; 0x20ae <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x40>
    208e:	8a e0       	ldi	r24, 0x0A	; 10
    2090:	82 9f       	mul	r24, r18
    2092:	f0 01       	movw	r30, r0
    2094:	83 9f       	mul	r24, r19
    2096:	f0 0d       	add	r31, r0
    2098:	11 24       	eor	r1, r1
    209a:	ed 56       	subi	r30, 0x6D	; 109
    209c:	fe 4f       	sbci	r31, 0xFE	; 254
    209e:	92 81       	ldd	r25, Z+2	; 0x02
    20a0:	84 81       	ldd	r24, Z+4	; 0x04
    20a2:	98 13       	cpse	r25, r24
    20a4:	0e c0       	rjmp	.+28     	; 0x20c2 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x54>
    20a6:	85 81       	ldd	r24, Z+5	; 0x05
    20a8:	81 11       	cpse	r24, r1
    20aa:	0a c0       	rjmp	.+20     	; 0x20c0 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x52>
    20ac:	08 95       	ret
    20ae:	42 81       	ldd	r20, Z+2	; 0x02
    20b0:	dc 01       	movw	r26, r24
    20b2:	a4 0f       	add	r26, r20
    20b4:	b1 1d       	adc	r27, r1
    20b6:	6c 93       	st	X, r22
    20b8:	82 81       	ldd	r24, Z+2	; 0x02
    20ba:	8f 5f       	subi	r24, 0xFF	; 255
    20bc:	82 83       	std	Z+2, r24	; 0x02
    20be:	e7 cf       	rjmp	.-50     	; 0x208e <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    20c0:	12 82       	std	Z+2, r1	; 0x02
    20c2:	08 95       	ret

000020c4 <__vector_18>:
    20c4:	1f 92       	push	r1
    20c6:	0f 92       	push	r0
    20c8:	0f b6       	in	r0, 0x3f	; 63
    20ca:	0f 92       	push	r0
    20cc:	11 24       	eor	r1, r1
    20ce:	2f 93       	push	r18
    20d0:	3f 93       	push	r19
    20d2:	4f 93       	push	r20
    20d4:	5f 93       	push	r21
    20d6:	6f 93       	push	r22
    20d8:	7f 93       	push	r23
    20da:	8f 93       	push	r24
    20dc:	9f 93       	push	r25
    20de:	af 93       	push	r26
    20e0:	bf 93       	push	r27
    20e2:	ef 93       	push	r30
    20e4:	ff 93       	push	r31
    20e6:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	0e 94 37 10 	call	0x206e	; 0x206e <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>
    20f0:	ff 91       	pop	r31
    20f2:	ef 91       	pop	r30
    20f4:	bf 91       	pop	r27
    20f6:	af 91       	pop	r26
    20f8:	9f 91       	pop	r25
    20fa:	8f 91       	pop	r24
    20fc:	7f 91       	pop	r23
    20fe:	6f 91       	pop	r22
    2100:	5f 91       	pop	r21
    2102:	4f 91       	pop	r20
    2104:	3f 91       	pop	r19
    2106:	2f 91       	pop	r18
    2108:	0f 90       	pop	r0
    210a:	0f be       	out	0x3f, r0	; 63
    210c:	0f 90       	pop	r0
    210e:	1f 90       	pop	r1
    2110:	18 95       	reti

00002112 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>:
    2112:	9a e0       	ldi	r25, 0x0A	; 10
    2114:	89 9f       	mul	r24, r25
    2116:	f0 01       	movw	r30, r0
    2118:	11 24       	eor	r1, r1
    211a:	ed 56       	subi	r30, 0x6D	; 109
    211c:	fe 4f       	sbci	r31, 0xFE	; 254
    211e:	86 81       	ldd	r24, Z+6	; 0x06
    2120:	97 81       	ldd	r25, Z+7	; 0x07
    2122:	89 2b       	or	r24, r25
    2124:	59 f0       	breq	.+22     	; 0x213c <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    2126:	91 81       	ldd	r25, Z+1	; 0x01
    2128:	83 81       	ldd	r24, Z+3	; 0x03
    212a:	98 17       	cp	r25, r24
    212c:	38 f4       	brcc	.+14     	; 0x213c <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    212e:	80 81       	ld	r24, Z
    2130:	81 11       	cpse	r24, r1
    2132:	04 c0       	rjmp	.+8      	; 0x213c <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    2134:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2138:	80 62       	ori	r24, 0x20	; 32
    213a:	03 c0       	rjmp	.+6      	; 0x2142 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x30>
    213c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2140:	8f 7d       	andi	r24, 0xDF	; 223
    2142:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2146:	08 95       	ret

00002148 <_ZN15OrangutanSerial11uart_tx_isrEh>:
    2148:	9a e0       	ldi	r25, 0x0A	; 10
    214a:	89 9f       	mul	r24, r25
    214c:	f0 01       	movw	r30, r0
    214e:	11 24       	eor	r1, r1
    2150:	ed 56       	subi	r30, 0x6D	; 109
    2152:	fe 4f       	sbci	r31, 0xFE	; 254
    2154:	26 81       	ldd	r18, Z+6	; 0x06
    2156:	37 81       	ldd	r19, Z+7	; 0x07
    2158:	21 15       	cp	r18, r1
    215a:	31 05       	cpc	r19, r1
    215c:	41 f0       	breq	.+16     	; 0x216e <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    215e:	41 81       	ldd	r20, Z+1	; 0x01
    2160:	93 81       	ldd	r25, Z+3	; 0x03
    2162:	49 17       	cp	r20, r25
    2164:	20 f4       	brcc	.+8      	; 0x216e <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    2166:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    216a:	95 fd       	sbrc	r25, 5
    216c:	03 c0       	rjmp	.+6      	; 0x2174 <_ZN15OrangutanSerial11uart_tx_isrEh+0x2c>
    216e:	0e 94 89 10 	call	0x2112	; 0x2112 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    2172:	08 95       	ret
    2174:	91 81       	ldd	r25, Z+1	; 0x01
    2176:	d9 01       	movw	r26, r18
    2178:	a9 0f       	add	r26, r25
    217a:	b1 1d       	adc	r27, r1
    217c:	9c 91       	ld	r25, X
    217e:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    2182:	91 81       	ldd	r25, Z+1	; 0x01
    2184:	9f 5f       	subi	r25, 0xFF	; 255
    2186:	91 83       	std	Z+1, r25	; 0x01
    2188:	f2 cf       	rjmp	.-28     	; 0x216e <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>

0000218a <__vector_19>:
    218a:	1f 92       	push	r1
    218c:	0f 92       	push	r0
    218e:	0f b6       	in	r0, 0x3f	; 63
    2190:	0f 92       	push	r0
    2192:	11 24       	eor	r1, r1
    2194:	2f 93       	push	r18
    2196:	3f 93       	push	r19
    2198:	4f 93       	push	r20
    219a:	5f 93       	push	r21
    219c:	6f 93       	push	r22
    219e:	7f 93       	push	r23
    21a0:	8f 93       	push	r24
    21a2:	9f 93       	push	r25
    21a4:	af 93       	push	r26
    21a6:	bf 93       	push	r27
    21a8:	ef 93       	push	r30
    21aa:	ff 93       	push	r31
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	0e 94 a4 10 	call	0x2148	; 0x2148 <_ZN15OrangutanSerial11uart_tx_isrEh>
    21b2:	ff 91       	pop	r31
    21b4:	ef 91       	pop	r30
    21b6:	bf 91       	pop	r27
    21b8:	af 91       	pop	r26
    21ba:	9f 91       	pop	r25
    21bc:	8f 91       	pop	r24
    21be:	7f 91       	pop	r23
    21c0:	6f 91       	pop	r22
    21c2:	5f 91       	pop	r21
    21c4:	4f 91       	pop	r20
    21c6:	3f 91       	pop	r19
    21c8:	2f 91       	pop	r18
    21ca:	0f 90       	pop	r0
    21cc:	0f be       	out	0x3f, r0	; 63
    21ce:	0f 90       	pop	r0
    21d0:	1f 90       	pop	r1
    21d2:	18 95       	reti

000021d4 <__vector_9>:
    21d4:	2f 92       	push	r2
    21d6:	8f 93       	push	r24
    21d8:	9f 93       	push	r25
    21da:	2f b6       	in	r2, 0x3f	; 63
    21dc:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <tickCount+0x1>
    21e0:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <tickCount+0x2>
    21e4:	01 96       	adiw	r24, 0x01	; 1
    21e6:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <tickCount+0x1>
    21ea:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <tickCount+0x2>
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <tickCount+0x3>
    21f4:	89 1f       	adc	r24, r25
    21f6:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <tickCount+0x3>
    21fa:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <us_over_10+0x1>
    21fe:	9c 5f       	subi	r25, 0xFC	; 252
    2200:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <us_over_10+0x1>
    2204:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <us_over_10>
    2208:	80 51       	subi	r24, 0x10	; 16
    220a:	97 42       	sbci	r25, 0x27	; 39
    220c:	c0 f0       	brcs	.+48     	; 0x223e <end>
    220e:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <us_over_10+0x1>
    2212:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <us_over_10>
    2216:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <msCounter>
    221a:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <msCounter+0x1>
    221e:	01 96       	adiw	r24, 0x01	; 1
    2220:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <msCounter>
    2224:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <msCounter+0x1>
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <msCounter+0x2>
    222e:	89 1f       	adc	r24, r25
    2230:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <msCounter+0x2>
    2234:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <msCounter+0x3>
    2238:	89 1f       	adc	r24, r25
    223a:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <msCounter+0x3>

0000223e <end>:
    223e:	2f be       	out	0x3f, r2	; 63
    2240:	9f 91       	pop	r25
    2242:	8f 91       	pop	r24
    2244:	2f 90       	pop	r2
    2246:	18 95       	reti

00002248 <_ZN13OrangutanTime17delayMillisecondsEj>:
    2248:	28 ee       	ldi	r18, 0xE8	; 232
    224a:	33 e0       	ldi	r19, 0x03	; 3
    224c:	01 97       	sbiw	r24, 0x01	; 1
    224e:	48 f0       	brcs	.+18     	; 0x2262 <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    2250:	f9 01       	movw	r30, r18
    2252:	6f 93       	push	r22
    2254:	64 e0       	ldi	r22, 0x04	; 4
    2256:	6a 95       	dec	r22
    2258:	f1 f7       	brne	.-4      	; 0x2256 <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    225a:	6f 91       	pop	r22
    225c:	31 97       	sbiw	r30, 0x01	; 1
    225e:	c9 f7       	brne	.-14     	; 0x2252 <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    2260:	f5 cf       	rjmp	.-22     	; 0x224c <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    2262:	08 95       	ret

00002264 <delay_ms>:
    2264:	0e 94 24 11 	call	0x2248	; 0x2248 <_ZN13OrangutanTime17delayMillisecondsEj>
    2268:	08 95       	ret

0000226a <_ZN13OrangutanTime5init2Ev>:
    226a:	e0 e7       	ldi	r30, 0x70	; 112
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	8e 7f       	andi	r24, 0xFE	; 254
    2272:	80 83       	st	Z, r24
    2274:	a0 eb       	ldi	r26, 0xB0	; 176
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	8c 91       	ld	r24, X
    227a:	83 60       	ori	r24, 0x03	; 3
    227c:	8c 93       	st	X, r24
    227e:	a1 eb       	ldi	r26, 0xB1	; 177
    2280:	b0 e0       	ldi	r27, 0x00	; 0
    2282:	8c 91       	ld	r24, X
    2284:	80 7f       	andi	r24, 0xF0	; 240
    2286:	8c 93       	st	X, r24
    2288:	8c 91       	ld	r24, X
    228a:	82 60       	ori	r24, 0x02	; 2
    228c:	8c 93       	st	X, r24
    228e:	b8 9a       	sbi	0x17, 0	; 23
    2290:	80 81       	ld	r24, Z
    2292:	81 60       	ori	r24, 0x01	; 1
    2294:	80 83       	st	Z, r24
    2296:	78 94       	sei
    2298:	08 95       	ret

0000229a <_ZN13OrangutanTime4initEv>:
    229a:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <_ZZN13OrangutanTime4initEvE11initialized>
    229e:	81 11       	cpse	r24, r1
    22a0:	05 c0       	rjmp	.+10     	; 0x22ac <_ZN13OrangutanTime4initEv+0x12>
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <_ZZN13OrangutanTime4initEvE11initialized>
    22a8:	0e 94 35 11 	call	0x226a	; 0x226a <_ZN13OrangutanTime5init2Ev>
    22ac:	08 95       	ret

000022ae <_ZN13OrangutanTime2msEv>:
    22ae:	0e 94 4d 11 	call	0x229a	; 0x229a <_ZN13OrangutanTime4initEv>
    22b2:	e0 e7       	ldi	r30, 0x70	; 112
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	80 81       	ld	r24, Z
    22b8:	8e 7f       	andi	r24, 0xFE	; 254
    22ba:	80 83       	st	Z, r24
    22bc:	60 91 9f 01 	lds	r22, 0x019F	; 0x80019f <msCounter>
    22c0:	70 91 a0 01 	lds	r23, 0x01A0	; 0x8001a0 <msCounter+0x1>
    22c4:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <msCounter+0x2>
    22c8:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <msCounter+0x3>
    22cc:	20 81       	ld	r18, Z
    22ce:	21 60       	ori	r18, 0x01	; 1
    22d0:	20 83       	st	Z, r18
    22d2:	08 95       	ret

000022d4 <get_ms>:
    22d4:	0e 94 57 11 	call	0x22ae	; 0x22ae <_ZN13OrangutanTime2msEv>
    22d8:	08 95       	ret

000022da <_ZN13OrangutanTime5resetEv>:
    22da:	0e 94 4d 11 	call	0x229a	; 0x229a <_ZN13OrangutanTime4initEv>
    22de:	e0 e7       	ldi	r30, 0x70	; 112
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 81       	ld	r24, Z
    22e4:	8e 7f       	andi	r24, 0xFE	; 254
    22e6:	80 83       	st	Z, r24
    22e8:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <msCounter>
    22ec:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <msCounter+0x1>
    22f0:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <msCounter+0x2>
    22f4:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <msCounter+0x3>
    22f8:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <us_over_10+0x1>
    22fc:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <us_over_10>
    2300:	80 81       	ld	r24, Z
    2302:	81 60       	ori	r24, 0x01	; 1
    2304:	80 83       	st	Z, r24
    2306:	08 95       	ret

00002308 <read_line_sensors>:
    2308:	46 2f       	mov	r20, r22
    230a:	bc 01       	movw	r22, r24
    230c:	87 ea       	ldi	r24, 0xA7	; 167
    230e:	91 e0       	ldi	r25, 0x01	; 1
    2310:	0e 94 15 14 	call	0x282a	; 0x282a <_ZN16PololuQTRSensors4readEPjh>
    2314:	08 95       	ret

00002316 <calibrate_line_sensors>:
    2316:	68 2f       	mov	r22, r24
    2318:	87 ea       	ldi	r24, 0xA7	; 167
    231a:	91 e0       	ldi	r25, 0x01	; 1
    231c:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <_ZN16PololuQTRSensors9calibrateEh>
    2320:	08 95       	ret

00002322 <read_line>:
    2322:	46 2f       	mov	r20, r22
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	bc 01       	movw	r22, r24
    2328:	87 ea       	ldi	r24, 0xA7	; 167
    232a:	91 e0       	ldi	r25, 0x01	; 1
    232c:	0e 94 44 16 	call	0x2c88	; 0x2c88 <_ZN16PololuQTRSensors8readLineEPjhh>
    2330:	08 95       	ret

00002332 <_ZN9Pololu3pi4initEjh>:
    2332:	0f 93       	push	r16
    2334:	cf 93       	push	r28
    2336:	df 93       	push	r29
    2338:	00 d0       	rcall	.+0      	; 0x233a <_ZN9Pololu3pi4initEjh+0x8>
    233a:	00 d0       	rcall	.+0      	; 0x233c <_ZN9Pololu3pi4initEjh+0xa>
    233c:	1f 92       	push	r1
    233e:	cd b7       	in	r28, 0x3d	; 61
    2340:	de b7       	in	r29, 0x3e	; 62
    2342:	9c 01       	movw	r18, r24
    2344:	85 e0       	ldi	r24, 0x05	; 5
    2346:	ec e4       	ldi	r30, 0x4C	; 76
    2348:	f1 e0       	ldi	r31, 0x01	; 1
    234a:	de 01       	movw	r26, r28
    234c:	11 96       	adiw	r26, 0x01	; 1
    234e:	01 90       	ld	r0, Z+
    2350:	0d 92       	st	X+, r0
    2352:	8a 95       	dec	r24
    2354:	e1 f7       	brne	.-8      	; 0x234e <_ZN9Pololu3pi4initEjh+0x1c>
    2356:	66 23       	and	r22, r22
    2358:	11 f0       	breq	.+4      	; 0x235e <_ZN9Pololu3pi4initEjh+0x2c>
    235a:	0f ef       	ldi	r16, 0xFF	; 255
    235c:	01 c0       	rjmp	.+2      	; 0x2360 <_ZN9Pololu3pi4initEjh+0x2e>
    235e:	03 e1       	ldi	r16, 0x13	; 19
    2360:	45 e0       	ldi	r20, 0x05	; 5
    2362:	be 01       	movw	r22, r28
    2364:	6f 5f       	subi	r22, 0xFF	; 255
    2366:	7f 4f       	sbci	r23, 0xFF	; 255
    2368:	87 ea       	ldi	r24, 0xA7	; 167
    236a:	91 e0       	ldi	r25, 0x01	; 1
    236c:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <_ZN18PololuQTRSensorsRC4initEPhhjh>
    2370:	87 ea       	ldi	r24, 0xA7	; 167
    2372:	91 e0       	ldi	r25, 0x01	; 1
    2374:	0e 94 42 12 	call	0x2484	; 0x2484 <_ZN16PololuQTRSensors11emittersOffEv>
    2378:	0e 94 6d 11 	call	0x22da	; 0x22da <_ZN13OrangutanTime5resetEv>
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	0f 90       	pop	r0
    2384:	0f 90       	pop	r0
    2386:	df 91       	pop	r29
    2388:	cf 91       	pop	r28
    238a:	0f 91       	pop	r16
    238c:	08 95       	ret

0000238e <pololu_3pi_init>:
    238e:	60 e0       	ldi	r22, 0x00	; 0
    2390:	0e 94 99 11 	call	0x2332	; 0x2332 <_ZN9Pololu3pi4initEjh>
    2394:	08 95       	ret

00002396 <_GLOBAL__sub_D_pololu_3pi_init>:
    2396:	87 ea       	ldi	r24, 0xA7	; 167
    2398:	91 e0       	ldi	r25, 0x01	; 1
    239a:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <_ZN16PololuQTRSensorsD1Ev>
    239e:	08 95       	ret

000023a0 <delay_us>:
    23a0:	6f 93       	push	r22
    23a2:	64 e0       	ldi	r22, 0x04	; 4
    23a4:	6a 95       	dec	r22
    23a6:	f1 f7       	brne	.-4      	; 0x23a4 <delay_us+0x4>
    23a8:	6f 91       	pop	r22
    23aa:	01 97       	sbiw	r24, 0x01	; 1
    23ac:	c9 f7       	brne	.-14     	; 0x23a0 <delay_us>
    23ae:	08 95       	ret

000023b0 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    23b0:	fc 01       	movw	r30, r24
    23b2:	11 82       	std	Z+1, r1	; 0x01
    23b4:	10 82       	st	Z, r1
    23b6:	13 82       	std	Z+3, r1	; 0x03
    23b8:	12 82       	std	Z+2, r1	; 0x02
    23ba:	15 82       	std	Z+5, r1	; 0x05
    23bc:	14 82       	std	Z+4, r1	; 0x04
    23be:	16 82       	std	Z+6, r1	; 0x06
    23c0:	68 30       	cpi	r22, 0x08	; 8
    23c2:	68 f4       	brcc	.+26     	; 0x23de <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    23c4:	89 e2       	ldi	r24, 0x29	; 41
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	91 83       	std	Z+1, r25	; 0x01
    23ca:	80 83       	st	Z, r24
    23cc:	8b e2       	ldi	r24, 0x2B	; 43
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	93 83       	std	Z+3, r25	; 0x03
    23d2:	82 83       	std	Z+2, r24	; 0x02
    23d4:	8a e2       	ldi	r24, 0x2A	; 42
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	95 83       	std	Z+5, r25	; 0x05
    23da:	84 83       	std	Z+4, r24	; 0x04
    23dc:	1f c0       	rjmp	.+62     	; 0x241c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    23de:	6e 30       	cpi	r22, 0x0E	; 14
    23e0:	70 f4       	brcc	.+28     	; 0x23fe <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    23e2:	83 e2       	ldi	r24, 0x23	; 35
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	91 83       	std	Z+1, r25	; 0x01
    23e8:	80 83       	st	Z, r24
    23ea:	85 e2       	ldi	r24, 0x25	; 37
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	93 83       	std	Z+3, r25	; 0x03
    23f0:	82 83       	std	Z+2, r24	; 0x02
    23f2:	84 e2       	ldi	r24, 0x24	; 36
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	95 83       	std	Z+5, r25	; 0x05
    23f8:	84 83       	std	Z+4, r24	; 0x04
    23fa:	68 50       	subi	r22, 0x08	; 8
    23fc:	0f c0       	rjmp	.+30     	; 0x241c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    23fe:	65 31       	cpi	r22, 0x15	; 21
    2400:	98 f4       	brcc	.+38     	; 0x2428 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    2402:	86 e2       	ldi	r24, 0x26	; 38
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	91 83       	std	Z+1, r25	; 0x01
    2408:	80 83       	st	Z, r24
    240a:	88 e2       	ldi	r24, 0x28	; 40
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	93 83       	std	Z+3, r25	; 0x03
    2410:	82 83       	std	Z+2, r24	; 0x02
    2412:	87 e2       	ldi	r24, 0x27	; 39
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	95 83       	std	Z+5, r25	; 0x05
    2418:	84 83       	std	Z+4, r24	; 0x04
    241a:	6e 50       	subi	r22, 0x0E	; 14
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	01 c0       	rjmp	.+2      	; 0x2422 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    2420:	88 0f       	add	r24, r24
    2422:	6a 95       	dec	r22
    2424:	ea f7       	brpl	.-6      	; 0x2420 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    2426:	86 83       	std	Z+6, r24	; 0x06
    2428:	08 95       	ret

0000242a <_ZN16PololuQTRSensors4initEhhh>:
    242a:	a7 e0       	ldi	r26, 0x07	; 7
    242c:	b0 e0       	ldi	r27, 0x00	; 0
    242e:	eb e1       	ldi	r30, 0x1B	; 27
    2430:	f2 e1       	ldi	r31, 0x12	; 18
    2432:	0c 94 82 17 	jmp	0x2f04	; 0x2f04 <__prologue_saves__+0x1c>
    2436:	8c 01       	movw	r16, r24
    2438:	fc 01       	movw	r30, r24
    243a:	11 82       	std	Z+1, r1	; 0x01
    243c:	10 82       	st	Z, r1
    243e:	13 82       	std	Z+3, r1	; 0x03
    2440:	12 82       	std	Z+2, r1	; 0x02
    2442:	15 82       	std	Z+5, r1	; 0x05
    2444:	14 82       	std	Z+4, r1	; 0x04
    2446:	17 82       	std	Z+7, r1	; 0x07
    2448:	16 82       	std	Z+6, r1	; 0x06
    244a:	61 31       	cpi	r22, 0x11	; 17
    244c:	18 f0       	brcs	.+6      	; 0x2454 <_ZN16PololuQTRSensors4initEhhh+0x2a>
    244e:	80 e1       	ldi	r24, 0x10	; 16
    2450:	80 87       	std	Z+8, r24	; 0x08
    2452:	02 c0       	rjmp	.+4      	; 0x2458 <_ZN16PololuQTRSensors4initEhhh+0x2e>
    2454:	fc 01       	movw	r30, r24
    2456:	60 87       	std	Z+8, r22	; 0x08
    2458:	f8 01       	movw	r30, r16
    245a:	20 8b       	std	Z+16, r18	; 0x10
    245c:	64 2f       	mov	r22, r20
    245e:	ce 01       	movw	r24, r28
    2460:	01 96       	adiw	r24, 0x01	; 1
    2462:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    2466:	8f 81       	ldd	r24, Y+7	; 0x07
    2468:	f8 01       	movw	r30, r16
    246a:	81 87       	std	Z+9, r24	; 0x09
    246c:	8b 81       	ldd	r24, Y+3	; 0x03
    246e:	9c 81       	ldd	r25, Y+4	; 0x04
    2470:	93 87       	std	Z+11, r25	; 0x0b
    2472:	82 87       	std	Z+10, r24	; 0x0a
    2474:	8d 81       	ldd	r24, Y+5	; 0x05
    2476:	9e 81       	ldd	r25, Y+6	; 0x06
    2478:	95 87       	std	Z+13, r25	; 0x0d
    247a:	84 87       	std	Z+12, r24	; 0x0c
    247c:	27 96       	adiw	r28, 0x07	; 7
    247e:	e4 e0       	ldi	r30, 0x04	; 4
    2480:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__epilogue_restores__+0x1c>

00002484 <_ZN16PololuQTRSensors11emittersOffEv>:
    2484:	fc 01       	movw	r30, r24
    2486:	a4 85       	ldd	r26, Z+12	; 0x0c
    2488:	b5 85       	ldd	r27, Z+13	; 0x0d
    248a:	10 97       	sbiw	r26, 0x00	; 0
    248c:	79 f0       	breq	.+30     	; 0x24ac <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    248e:	8c 91       	ld	r24, X
    2490:	91 85       	ldd	r25, Z+9	; 0x09
    2492:	89 2b       	or	r24, r25
    2494:	8c 93       	st	X, r24
    2496:	a2 85       	ldd	r26, Z+10	; 0x0a
    2498:	b3 85       	ldd	r27, Z+11	; 0x0b
    249a:	9c 91       	ld	r25, X
    249c:	81 85       	ldd	r24, Z+9	; 0x09
    249e:	80 95       	com	r24
    24a0:	89 23       	and	r24, r25
    24a2:	8c 93       	st	X, r24
    24a4:	88 ec       	ldi	r24, 0xC8	; 200
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <delay_us>
    24ac:	08 95       	ret

000024ae <_ZN16PololuQTRSensors10emittersOnEv>:
    24ae:	fc 01       	movw	r30, r24
    24b0:	a4 85       	ldd	r26, Z+12	; 0x0c
    24b2:	b5 85       	ldd	r27, Z+13	; 0x0d
    24b4:	10 97       	sbiw	r26, 0x00	; 0
    24b6:	71 f0       	breq	.+28     	; 0x24d4 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    24b8:	8c 91       	ld	r24, X
    24ba:	91 85       	ldd	r25, Z+9	; 0x09
    24bc:	89 2b       	or	r24, r25
    24be:	8c 93       	st	X, r24
    24c0:	a2 85       	ldd	r26, Z+10	; 0x0a
    24c2:	b3 85       	ldd	r27, Z+11	; 0x0b
    24c4:	8c 91       	ld	r24, X
    24c6:	91 85       	ldd	r25, Z+9	; 0x09
    24c8:	89 2b       	or	r24, r25
    24ca:	8c 93       	st	X, r24
    24cc:	88 ec       	ldi	r24, 0xC8	; 200
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <delay_us>
    24d4:	08 95       	ret

000024d6 <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    24d6:	a7 e0       	ldi	r26, 0x07	; 7
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	e1 e7       	ldi	r30, 0x71	; 113
    24dc:	f2 e1       	ldi	r31, 0x12	; 18
    24de:	0c 94 77 17 	jmp	0x2eee	; 0x2eee <__prologue_saves__+0x6>
    24e2:	7c 01       	movw	r14, r24
    24e4:	4b 01       	movw	r8, r22
    24e6:	64 2f       	mov	r22, r20
    24e8:	39 01       	movw	r6, r18
    24ea:	40 2f       	mov	r20, r16
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	0e 94 15 12 	call	0x242a	; 0x242a <_ZN16PololuQTRSensors4initEhhh>
    24f2:	87 01       	movw	r16, r14
    24f4:	0f 5b       	subi	r16, 0xBF	; 191
    24f6:	1f 4f       	sbci	r17, 0xFF	; 255
    24f8:	f8 01       	movw	r30, r16
    24fa:	10 82       	st	Z, r1
    24fc:	67 01       	movw	r12, r14
    24fe:	f2 e4       	ldi	r31, 0x42	; 66
    2500:	cf 0e       	add	r12, r31
    2502:	d1 1c       	adc	r13, r1
    2504:	f6 01       	movw	r30, r12
    2506:	10 82       	st	Z, r1
    2508:	57 01       	movw	r10, r14
    250a:	f3 e4       	ldi	r31, 0x43	; 67
    250c:	af 0e       	add	r10, r31
    250e:	b1 1c       	adc	r11, r1
    2510:	f5 01       	movw	r30, r10
    2512:	10 82       	st	Z, r1
    2514:	f7 01       	movw	r30, r14
    2516:	77 86       	std	Z+15, r7	; 0x0f
    2518:	66 86       	std	Z+14, r6	; 0x0e
    251a:	51 2c       	mov	r5, r1
    251c:	f7 01       	movw	r30, r14
    251e:	80 85       	ldd	r24, Z+8	; 0x08
    2520:	58 16       	cp	r5, r24
    2522:	50 f5       	brcc	.+84     	; 0x2578 <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    2524:	65 2c       	mov	r6, r5
    2526:	71 2c       	mov	r7, r1
    2528:	f4 01       	movw	r30, r8
    252a:	e6 0d       	add	r30, r6
    252c:	f7 1d       	adc	r31, r7
    252e:	60 81       	ld	r22, Z
    2530:	ce 01       	movw	r24, r28
    2532:	01 96       	adiw	r24, 0x01	; 1
    2534:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    2538:	2f 81       	ldd	r18, Y+7	; 0x07
    253a:	f7 01       	movw	r30, r14
    253c:	e6 0d       	add	r30, r6
    253e:	f7 1d       	adc	r31, r7
    2540:	21 8b       	std	Z+17, r18	; 0x11
    2542:	89 81       	ldd	r24, Y+1	; 0x01
    2544:	9a 81       	ldd	r25, Y+2	; 0x02
    2546:	f3 01       	movw	r30, r6
    2548:	ee 0f       	add	r30, r30
    254a:	ff 1f       	adc	r31, r31
    254c:	ee 0d       	add	r30, r14
    254e:	ff 1d       	adc	r31, r15
    2550:	92 a3       	std	Z+34, r25	; 0x22
    2552:	81 a3       	std	Z+33, r24	; 0x21
    2554:	83 32       	cpi	r24, 0x23	; 35
    2556:	91 05       	cpc	r25, r1
    2558:	11 f4       	brne	.+4      	; 0x255e <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    255a:	f8 01       	movw	r30, r16
    255c:	08 c0       	rjmp	.+16     	; 0x256e <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    255e:	86 32       	cpi	r24, 0x26	; 38
    2560:	91 05       	cpc	r25, r1
    2562:	11 f4       	brne	.+4      	; 0x2568 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    2564:	f6 01       	movw	r30, r12
    2566:	03 c0       	rjmp	.+6      	; 0x256e <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    2568:	89 97       	sbiw	r24, 0x29	; 41
    256a:	21 f4       	brne	.+8      	; 0x2574 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    256c:	f5 01       	movw	r30, r10
    256e:	80 81       	ld	r24, Z
    2570:	82 2b       	or	r24, r18
    2572:	80 83       	st	Z, r24
    2574:	53 94       	inc	r5
    2576:	d2 cf       	rjmp	.-92     	; 0x251c <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    2578:	27 96       	adiw	r28, 0x07	; 7
    257a:	ef e0       	ldi	r30, 0x0F	; 15
    257c:	0c 94 93 17 	jmp	0x2f26	; 0x2f26 <__epilogue_restores__+0x6>

00002580 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    2580:	a0 e0       	ldi	r26, 0x00	; 0
    2582:	b0 e0       	ldi	r27, 0x00	; 0
    2584:	e6 ec       	ldi	r30, 0xC6	; 198
    2586:	f2 e1       	ldi	r31, 0x12	; 18
    2588:	0c 94 79 17 	jmp	0x2ef2	; 0x2ef2 <__prologue_saves__+0xa>
    258c:	ec 01       	movw	r28, r24
    258e:	5b 01       	movw	r10, r22
    2590:	6c 01       	movw	r12, r24
    2592:	81 e4       	ldi	r24, 0x41	; 65
    2594:	c8 0e       	add	r12, r24
    2596:	d1 1c       	adc	r13, r1
    2598:	f6 01       	movw	r30, r12
    259a:	80 80       	ld	r8, Z
    259c:	7e 01       	movw	r14, r28
    259e:	f2 e4       	ldi	r31, 0x42	; 66
    25a0:	ef 0e       	add	r14, r31
    25a2:	f1 1c       	adc	r15, r1
    25a4:	f7 01       	movw	r30, r14
    25a6:	70 80       	ld	r7, Z
    25a8:	8e 01       	movw	r16, r28
    25aa:	0d 5b       	subi	r16, 0xBD	; 189
    25ac:	1f 4f       	sbci	r17, 0xFF	; 255
    25ae:	f8 01       	movw	r30, r16
    25b0:	90 80       	ld	r9, Z
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	98 85       	ldd	r25, Y+8	; 0x08
    25b6:	89 17       	cp	r24, r25
    25b8:	48 f4       	brcc	.+18     	; 0x25cc <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    25ba:	f5 01       	movw	r30, r10
    25bc:	e8 0f       	add	r30, r24
    25be:	f1 1d       	adc	r31, r1
    25c0:	e8 0f       	add	r30, r24
    25c2:	f1 1d       	adc	r31, r1
    25c4:	11 82       	std	Z+1, r1	; 0x01
    25c6:	10 82       	st	Z, r1
    25c8:	8f 5f       	subi	r24, 0xFF	; 255
    25ca:	f4 cf       	rjmp	.-24     	; 0x25b4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    25cc:	84 b1       	in	r24, 0x04	; 4
    25ce:	f6 01       	movw	r30, r12
    25d0:	90 81       	ld	r25, Z
    25d2:	89 2b       	or	r24, r25
    25d4:	84 b9       	out	0x04, r24	; 4
    25d6:	87 b1       	in	r24, 0x07	; 7
    25d8:	f7 01       	movw	r30, r14
    25da:	90 81       	ld	r25, Z
    25dc:	89 2b       	or	r24, r25
    25de:	87 b9       	out	0x07, r24	; 7
    25e0:	8a b1       	in	r24, 0x0a	; 10
    25e2:	f8 01       	movw	r30, r16
    25e4:	90 81       	ld	r25, Z
    25e6:	89 2b       	or	r24, r25
    25e8:	8a b9       	out	0x0a, r24	; 10
    25ea:	85 b1       	in	r24, 0x05	; 5
    25ec:	f6 01       	movw	r30, r12
    25ee:	90 81       	ld	r25, Z
    25f0:	89 2b       	or	r24, r25
    25f2:	85 b9       	out	0x05, r24	; 5
    25f4:	88 b1       	in	r24, 0x08	; 8
    25f6:	f7 01       	movw	r30, r14
    25f8:	90 81       	ld	r25, Z
    25fa:	89 2b       	or	r24, r25
    25fc:	88 b9       	out	0x08, r24	; 8
    25fe:	8b b1       	in	r24, 0x0b	; 11
    2600:	f8 01       	movw	r30, r16
    2602:	90 81       	ld	r25, Z
    2604:	89 2b       	or	r24, r25
    2606:	8b b9       	out	0x0b, r24	; 11
    2608:	8a e0       	ldi	r24, 0x0A	; 10
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <delay_us>
    2610:	94 b1       	in	r25, 0x04	; 4
    2612:	f6 01       	movw	r30, r12
    2614:	80 81       	ld	r24, Z
    2616:	80 95       	com	r24
    2618:	89 23       	and	r24, r25
    261a:	84 b9       	out	0x04, r24	; 4
    261c:	97 b1       	in	r25, 0x07	; 7
    261e:	f7 01       	movw	r30, r14
    2620:	80 81       	ld	r24, Z
    2622:	80 95       	com	r24
    2624:	89 23       	and	r24, r25
    2626:	87 b9       	out	0x07, r24	; 7
    2628:	9a b1       	in	r25, 0x0a	; 10
    262a:	f8 01       	movw	r30, r16
    262c:	80 81       	ld	r24, Z
    262e:	80 95       	com	r24
    2630:	89 23       	and	r24, r25
    2632:	8a b9       	out	0x0a, r24	; 10
    2634:	95 b1       	in	r25, 0x05	; 5
    2636:	f6 01       	movw	r30, r12
    2638:	80 81       	ld	r24, Z
    263a:	80 95       	com	r24
    263c:	89 23       	and	r24, r25
    263e:	85 b9       	out	0x05, r24	; 5
    2640:	98 b1       	in	r25, 0x08	; 8
    2642:	f7 01       	movw	r30, r14
    2644:	80 81       	ld	r24, Z
    2646:	80 95       	com	r24
    2648:	89 23       	and	r24, r25
    264a:	88 b9       	out	0x08, r24	; 8
    264c:	9b b1       	in	r25, 0x0b	; 11
    264e:	f8 01       	movw	r30, r16
    2650:	80 81       	ld	r24, Z
    2652:	80 95       	com	r24
    2654:	89 23       	and	r24, r25
    2656:	8b b9       	out	0x0b, r24	; 11
    2658:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    265c:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2660:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2664:	83 60       	ori	r24, 0x03	; 3
    2666:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    266a:	82 e0       	ldi	r24, 0x02	; 2
    266c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2670:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	2e 85       	ldd	r18, Y+14	; 0x0e
    267a:	3f 85       	ldd	r19, Y+15	; 0x0f
    267c:	82 17       	cp	r24, r18
    267e:	93 07       	cpc	r25, r19
    2680:	20 f5       	brcc	.+72     	; 0x26ca <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    2682:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    2686:	2c 2d       	mov	r18, r12
    2688:	24 1b       	sub	r18, r20
    268a:	82 0f       	add	r24, r18
    268c:	91 1d       	adc	r25, r1
    268e:	03 b1       	in	r16, 0x03	; 3
    2690:	08 11       	cpse	r16, r8
    2692:	32 c0       	rjmp	.+100    	; 0x26f8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2694:	f6 b0       	in	r15, 0x06	; 6
    2696:	f7 10       	cpse	r15, r7
    2698:	2f c0       	rjmp	.+94     	; 0x26f8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    269a:	29 b1       	in	r18, 0x09	; 9
    269c:	29 11       	cpse	r18, r9
    269e:	2c c0       	rjmp	.+88     	; 0x26f8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    26a0:	10 c0       	rjmp	.+32     	; 0x26c2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    26a2:	21 2f       	mov	r18, r17
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	a9 01       	movw	r20, r18
    26a8:	44 0f       	add	r20, r20
    26aa:	55 1f       	adc	r21, r21
    26ac:	f5 01       	movw	r30, r10
    26ae:	e4 0f       	add	r30, r20
    26b0:	f5 1f       	adc	r31, r21
    26b2:	60 81       	ld	r22, Z
    26b4:	71 81       	ldd	r23, Z+1	; 0x01
    26b6:	67 2b       	or	r22, r23
    26b8:	21 f1       	breq	.+72     	; 0x2702 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    26ba:	1f 5f       	subi	r17, 0xFF	; 255
    26bc:	28 85       	ldd	r18, Y+8	; 0x08
    26be:	12 17       	cp	r17, r18
    26c0:	80 f3       	brcs	.-32     	; 0x26a2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    26c2:	7f 2c       	mov	r7, r15
    26c4:	80 2e       	mov	r8, r16
    26c6:	4c 2d       	mov	r20, r12
    26c8:	d7 cf       	rjmp	.-82     	; 0x2678 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    26ca:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    26ce:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	88 85       	ldd	r24, Y+8	; 0x08
    26d6:	28 17       	cp	r18, r24
    26d8:	30 f5       	brcc	.+76     	; 0x2726 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    26da:	f5 01       	movw	r30, r10
    26dc:	e2 0f       	add	r30, r18
    26de:	f1 1d       	adc	r31, r1
    26e0:	e2 0f       	add	r30, r18
    26e2:	f1 1d       	adc	r31, r1
    26e4:	80 81       	ld	r24, Z
    26e6:	91 81       	ldd	r25, Z+1	; 0x01
    26e8:	89 2b       	or	r24, r25
    26ea:	21 f4       	brne	.+8      	; 0x26f4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    26ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    26ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    26f0:	91 83       	std	Z+1, r25	; 0x01
    26f2:	80 83       	st	Z, r24
    26f4:	2f 5f       	subi	r18, 0xFF	; 255
    26f6:	ee cf       	rjmp	.-36     	; 0x26d4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    26f8:	03 b1       	in	r16, 0x03	; 3
    26fa:	f6 b0       	in	r15, 0x06	; 6
    26fc:	99 b0       	in	r9, 0x09	; 9
    26fe:	10 e0       	ldi	r17, 0x00	; 0
    2700:	dd cf       	rjmp	.-70     	; 0x26bc <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    2702:	de 01       	movw	r26, r28
    2704:	a4 0f       	add	r26, r20
    2706:	b5 1f       	adc	r27, r21
    2708:	91 96       	adiw	r26, 0x21	; 33
    270a:	0d 90       	ld	r0, X+
    270c:	bc 91       	ld	r27, X
    270e:	a0 2d       	mov	r26, r0
    2710:	4c 91       	ld	r20, X
    2712:	de 01       	movw	r26, r28
    2714:	a2 0f       	add	r26, r18
    2716:	b3 1f       	adc	r27, r19
    2718:	51 96       	adiw	r26, 0x11	; 17
    271a:	2c 91       	ld	r18, X
    271c:	42 23       	and	r20, r18
    271e:	69 f6       	brne	.-102    	; 0x26ba <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    2720:	91 83       	std	Z+1, r25	; 0x01
    2722:	80 83       	st	Z, r24
    2724:	ca cf       	rjmp	.-108    	; 0x26ba <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    2726:	cd b7       	in	r28, 0x3d	; 61
    2728:	de b7       	in	r29, 0x3e	; 62
    272a:	ed e0       	ldi	r30, 0x0D	; 13
    272c:	0c 94 95 17 	jmp	0x2f2a	; 0x2f2a <__epilogue_restores__+0xa>

00002730 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    2730:	ef 92       	push	r14
    2732:	ff 92       	push	r15
    2734:	0f 93       	push	r16
    2736:	1f 93       	push	r17
    2738:	cf 93       	push	r28
    273a:	df 93       	push	r29
    273c:	fc 01       	movw	r30, r24
    273e:	9b 01       	movw	r18, r22
    2740:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2744:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2748:	47 b1       	in	r20, 0x07	; 7
    274a:	18 b1       	in	r17, 0x08	; 8
    274c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2750:	86 fd       	sbrc	r24, 6
    2752:	fc cf       	rjmp	.-8      	; 0x274c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    2754:	80 e0       	ldi	r24, 0x00	; 0
    2756:	90 85       	ldd	r25, Z+8	; 0x08
    2758:	89 17       	cp	r24, r25
    275a:	48 f4       	brcc	.+18     	; 0x276e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    275c:	d9 01       	movw	r26, r18
    275e:	a8 0f       	add	r26, r24
    2760:	b1 1d       	adc	r27, r1
    2762:	a8 0f       	add	r26, r24
    2764:	b1 1d       	adc	r27, r1
    2766:	1d 92       	st	X+, r1
    2768:	1c 92       	st	X, r1
    276a:	8f 5f       	subi	r24, 0xFF	; 255
    276c:	f4 cf       	rjmp	.-24     	; 0x2756 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    276e:	97 b1       	in	r25, 0x07	; 7
    2770:	82 a1       	ldd	r24, Z+34	; 0x22
    2772:	80 95       	com	r24
    2774:	89 23       	and	r24, r25
    2776:	87 b9       	out	0x07, r24	; 7
    2778:	98 b1       	in	r25, 0x08	; 8
    277a:	82 a1       	ldd	r24, Z+34	; 0x22
    277c:	80 95       	com	r24
    277e:	89 23       	and	r24, r25
    2780:	88 b9       	out	0x08, r24	; 8
    2782:	87 e8       	ldi	r24, 0x87	; 135
    2784:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2788:	e1 2c       	mov	r14, r1
    278a:	81 a1       	ldd	r24, Z+33	; 0x21
    278c:	e8 16       	cp	r14, r24
    278e:	10 f0       	brcs	.+4      	; 0x2794 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    2790:	e1 2c       	mov	r14, r1
    2792:	29 c0       	rjmp	.+82     	; 0x27e6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    2794:	50 e0       	ldi	r21, 0x00	; 0
    2796:	80 85       	ldd	r24, Z+8	; 0x08
    2798:	58 17       	cp	r21, r24
    279a:	18 f5       	brcc	.+70     	; 0x27e2 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    279c:	a5 2f       	mov	r26, r21
    279e:	b0 e0       	ldi	r27, 0x00	; 0
    27a0:	ef 01       	movw	r28, r30
    27a2:	ca 0f       	add	r28, r26
    27a4:	db 1f       	adc	r29, r27
    27a6:	89 89       	ldd	r24, Y+17	; 0x11
    27a8:	80 64       	ori	r24, 0x40	; 64
    27aa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    27ae:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    27b2:	80 64       	ori	r24, 0x40	; 64
    27b4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    27b8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    27bc:	86 fd       	sbrc	r24, 6
    27be:	fc cf       	rjmp	.-8      	; 0x27b8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    27c0:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    27c4:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    27c8:	aa 0f       	add	r26, r26
    27ca:	bb 1f       	adc	r27, r27
    27cc:	a2 0f       	add	r26, r18
    27ce:	b3 1f       	adc	r27, r19
    27d0:	8d 91       	ld	r24, X+
    27d2:	9c 91       	ld	r25, X
    27d4:	11 97       	sbiw	r26, 0x01	; 1
    27d6:	86 0f       	add	r24, r22
    27d8:	97 1f       	adc	r25, r23
    27da:	8d 93       	st	X+, r24
    27dc:	9c 93       	st	X, r25
    27de:	5f 5f       	subi	r21, 0xFF	; 255
    27e0:	da cf       	rjmp	.-76     	; 0x2796 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    27e2:	e3 94       	inc	r14
    27e4:	d2 cf       	rjmp	.-92     	; 0x278a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    27e6:	80 85       	ldd	r24, Z+8	; 0x08
    27e8:	e8 16       	cp	r14, r24
    27ea:	a0 f4       	brcc	.+40     	; 0x2814 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    27ec:	e9 01       	movw	r28, r18
    27ee:	ce 0d       	add	r28, r14
    27f0:	d1 1d       	adc	r29, r1
    27f2:	ce 0d       	add	r28, r14
    27f4:	d1 1d       	adc	r29, r1
    27f6:	61 a1       	ldd	r22, Z+33	; 0x21
    27f8:	70 e0       	ldi	r23, 0x00	; 0
    27fa:	cb 01       	movw	r24, r22
    27fc:	95 95       	asr	r25
    27fe:	87 95       	ror	r24
    2800:	a8 81       	ld	r26, Y
    2802:	b9 81       	ldd	r27, Y+1	; 0x01
    2804:	8a 0f       	add	r24, r26
    2806:	9b 1f       	adc	r25, r27
    2808:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <__udivmodhi4>
    280c:	79 83       	std	Y+1, r23	; 0x01
    280e:	68 83       	st	Y, r22
    2810:	e3 94       	inc	r14
    2812:	e9 cf       	rjmp	.-46     	; 0x27e6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    2814:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2818:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    281c:	18 b9       	out	0x08, r17	; 8
    281e:	47 b9       	out	0x07, r20	; 7
    2820:	cd b7       	in	r28, 0x3d	; 61
    2822:	de b7       	in	r29, 0x3e	; 62
    2824:	e6 e0       	ldi	r30, 0x06	; 6
    2826:	0c 94 9c 17 	jmp	0x2f38	; 0x2f38 <__epilogue_restores__+0x18>

0000282a <_ZN16PololuQTRSensors4readEPjh>:
    282a:	a0 e2       	ldi	r26, 0x20	; 32
    282c:	b0 e0       	ldi	r27, 0x00	; 0
    282e:	eb e1       	ldi	r30, 0x1B	; 27
    2830:	f4 e1       	ldi	r31, 0x14	; 20
    2832:	0c 94 7f 17 	jmp	0x2efe	; 0x2efe <__prologue_saves__+0x16>
    2836:	8c 01       	movw	r16, r24
    2838:	7b 01       	movw	r14, r22
    283a:	d4 2e       	mov	r13, r20
    283c:	8f ef       	ldi	r24, 0xFF	; 255
    283e:	84 0f       	add	r24, r20
    2840:	82 30       	cpi	r24, 0x02	; 2
    2842:	18 f4       	brcc	.+6      	; 0x284a <_ZN16PololuQTRSensors4readEPjh+0x20>
    2844:	c8 01       	movw	r24, r16
    2846:	0e 94 57 12 	call	0x24ae	; 0x24ae <_ZN16PololuQTRSensors10emittersOnEv>
    284a:	d8 01       	movw	r26, r16
    284c:	50 96       	adiw	r26, 0x10	; 16
    284e:	8c 91       	ld	r24, X
    2850:	b7 01       	movw	r22, r14
    2852:	81 11       	cpse	r24, r1
    2854:	10 c0       	rjmp	.+32     	; 0x2876 <_ZN16PololuQTRSensors4readEPjh+0x4c>
    2856:	c8 01       	movw	r24, r16
    2858:	0e 94 c0 12 	call	0x2580	; 0x2580 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    285c:	c8 01       	movw	r24, r16
    285e:	0e 94 42 12 	call	0x2484	; 0x2484 <_ZN16PololuQTRSensors11emittersOffEv>
    2862:	b2 e0       	ldi	r27, 0x02	; 2
    2864:	db 12       	cpse	r13, r27
    2866:	3a c0       	rjmp	.+116    	; 0x28dc <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2868:	be 01       	movw	r22, r28
    286a:	6f 5f       	subi	r22, 0xFF	; 255
    286c:	7f 4f       	sbci	r23, 0xFF	; 255
    286e:	c8 01       	movw	r24, r16
    2870:	0e 94 c0 12 	call	0x2580	; 0x2580 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2874:	0f c0       	rjmp	.+30     	; 0x2894 <_ZN16PololuQTRSensors4readEPjh+0x6a>
    2876:	c8 01       	movw	r24, r16
    2878:	0e 94 98 13 	call	0x2730	; 0x2730 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    287c:	c8 01       	movw	r24, r16
    287e:	0e 94 42 12 	call	0x2484	; 0x2484 <_ZN16PololuQTRSensors11emittersOffEv>
    2882:	e2 e0       	ldi	r30, 0x02	; 2
    2884:	de 12       	cpse	r13, r30
    2886:	2a c0       	rjmp	.+84     	; 0x28dc <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2888:	be 01       	movw	r22, r28
    288a:	6f 5f       	subi	r22, 0xFF	; 255
    288c:	7f 4f       	sbci	r23, 0xFF	; 255
    288e:	c8 01       	movw	r24, r16
    2890:	0e 94 98 13 	call	0x2730	; 0x2730 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2894:	40 e0       	ldi	r20, 0x00	; 0
    2896:	f8 01       	movw	r30, r16
    2898:	80 85       	ldd	r24, Z+8	; 0x08
    289a:	48 17       	cp	r20, r24
    289c:	f8 f4       	brcc	.+62     	; 0x28dc <_ZN16PololuQTRSensors4readEPjh+0xb2>
    289e:	84 2f       	mov	r24, r20
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	88 0f       	add	r24, r24
    28a4:	99 1f       	adc	r25, r25
    28a6:	f7 01       	movw	r30, r14
    28a8:	e8 0f       	add	r30, r24
    28aa:	f9 1f       	adc	r31, r25
    28ac:	21 e0       	ldi	r18, 0x01	; 1
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	2c 0f       	add	r18, r28
    28b2:	3d 1f       	adc	r19, r29
    28b4:	82 0f       	add	r24, r18
    28b6:	93 1f       	adc	r25, r19
    28b8:	d8 01       	movw	r26, r16
    28ba:	1e 96       	adiw	r26, 0x0e	; 14
    28bc:	2d 91       	ld	r18, X+
    28be:	3c 91       	ld	r19, X
    28c0:	1f 97       	sbiw	r26, 0x0f	; 15
    28c2:	dc 01       	movw	r26, r24
    28c4:	8d 91       	ld	r24, X+
    28c6:	9c 91       	ld	r25, X
    28c8:	28 1b       	sub	r18, r24
    28ca:	39 0b       	sbc	r19, r25
    28cc:	80 81       	ld	r24, Z
    28ce:	91 81       	ldd	r25, Z+1	; 0x01
    28d0:	82 0f       	add	r24, r18
    28d2:	93 1f       	adc	r25, r19
    28d4:	91 83       	std	Z+1, r25	; 0x01
    28d6:	80 83       	st	Z, r24
    28d8:	4f 5f       	subi	r20, 0xFF	; 255
    28da:	dd cf       	rjmp	.-70     	; 0x2896 <_ZN16PololuQTRSensors4readEPjh+0x6c>
    28dc:	a0 96       	adiw	r28, 0x20	; 32
    28de:	e7 e0       	ldi	r30, 0x07	; 7
    28e0:	0c 94 9b 17 	jmp	0x2f36	; 0x2f36 <__epilogue_restores__+0x16>

000028e4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    28e4:	2f 92       	push	r2
    28e6:	3f 92       	push	r3
    28e8:	5f 92       	push	r5
    28ea:	6f 92       	push	r6
    28ec:	7f 92       	push	r7
    28ee:	8f 92       	push	r8
    28f0:	9f 92       	push	r9
    28f2:	af 92       	push	r10
    28f4:	bf 92       	push	r11
    28f6:	cf 92       	push	r12
    28f8:	df 92       	push	r13
    28fa:	ef 92       	push	r14
    28fc:	ff 92       	push	r15
    28fe:	0f 93       	push	r16
    2900:	1f 93       	push	r17
    2902:	cf 93       	push	r28
    2904:	df 93       	push	r29
    2906:	cd b7       	in	r28, 0x3d	; 61
    2908:	de b7       	in	r29, 0x3e	; 62
    290a:	c0 56       	subi	r28, 0x60	; 96
    290c:	d1 09       	sbc	r29, r1
    290e:	0f b6       	in	r0, 0x3f	; 63
    2910:	f8 94       	cli
    2912:	de bf       	out	0x3e, r29	; 62
    2914:	0f be       	out	0x3f, r0	; 63
    2916:	cd bf       	out	0x3d, r28	; 61
    2918:	8c 01       	movw	r16, r24
    291a:	4b 01       	movw	r8, r22
    291c:	5a 01       	movw	r10, r20
    291e:	52 2e       	mov	r5, r18
    2920:	da 01       	movw	r26, r20
    2922:	8d 91       	ld	r24, X+
    2924:	9c 91       	ld	r25, X
    2926:	89 2b       	or	r24, r25
    2928:	31 f0       	breq	.+12     	; 0x2936 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x52>
    292a:	f4 01       	movw	r30, r8
    292c:	80 81       	ld	r24, Z
    292e:	91 81       	ldd	r25, Z+1	; 0x01
    2930:	89 2b       	or	r24, r25
    2932:	f1 f4       	brne	.+60     	; 0x2970 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    2934:	24 c0       	rjmp	.+72     	; 0x297e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x9a>
    2936:	d8 01       	movw	r26, r16
    2938:	18 96       	adiw	r26, 0x08	; 8
    293a:	8c 91       	ld	r24, X
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	88 0f       	add	r24, r24
    2940:	99 1f       	adc	r25, r25
    2942:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <malloc>
    2946:	f5 01       	movw	r30, r10
    2948:	91 83       	std	Z+1, r25	; 0x01
    294a:	80 83       	st	Z, r24
    294c:	00 97       	sbiw	r24, 0x00	; 0
    294e:	09 f4       	brne	.+2      	; 0x2952 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x6e>
    2950:	b1 c0       	rjmp	.+354    	; 0x2ab4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    2952:	fc 01       	movw	r30, r24
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	d8 01       	movw	r26, r16
    295a:	18 96       	adiw	r26, 0x08	; 8
    295c:	8c 91       	ld	r24, X
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	28 17       	cp	r18, r24
    2962:	39 07       	cpc	r19, r25
    2964:	14 f7       	brge	.-60     	; 0x292a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x46>
    2966:	11 92       	st	Z+, r1
    2968:	11 92       	st	Z+, r1
    296a:	2f 5f       	subi	r18, 0xFF	; 255
    296c:	3f 4f       	sbci	r19, 0xFF	; 255
    296e:	f4 cf       	rjmp	.-24     	; 0x2958 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x74>
    2970:	e1 2c       	mov	r14, r1
    2972:	f1 2c       	mov	r15, r1
    2974:	6e 01       	movw	r12, r28
    2976:	b1 e2       	ldi	r27, 0x21	; 33
    2978:	cb 0e       	add	r12, r27
    297a:	d1 1c       	adc	r13, r1
    297c:	21 c0       	rjmp	.+66     	; 0x29c0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    297e:	f8 01       	movw	r30, r16
    2980:	80 85       	ldd	r24, Z+8	; 0x08
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	88 0f       	add	r24, r24
    2986:	99 1f       	adc	r25, r25
    2988:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <malloc>
    298c:	d4 01       	movw	r26, r8
    298e:	8d 93       	st	X+, r24
    2990:	9c 93       	st	X, r25
    2992:	00 97       	sbiw	r24, 0x00	; 0
    2994:	09 f4       	brne	.+2      	; 0x2998 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb4>
    2996:	8e c0       	rjmp	.+284    	; 0x2ab4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    2998:	fc 01       	movw	r30, r24
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	d8 01       	movw	r26, r16
    29a0:	18 96       	adiw	r26, 0x08	; 8
    29a2:	8c 91       	ld	r24, X
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	28 17       	cp	r18, r24
    29a8:	39 07       	cpc	r19, r25
    29aa:	14 f7       	brge	.-60     	; 0x2970 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    29ac:	d8 01       	movw	r26, r16
    29ae:	1e 96       	adiw	r26, 0x0e	; 14
    29b0:	8d 91       	ld	r24, X+
    29b2:	9c 91       	ld	r25, X
    29b4:	1f 97       	sbiw	r26, 0x0f	; 15
    29b6:	81 93       	st	Z+, r24
    29b8:	91 93       	st	Z+, r25
    29ba:	2f 5f       	subi	r18, 0xFF	; 255
    29bc:	3f 4f       	sbci	r19, 0xFF	; 255
    29be:	ef cf       	rjmp	.-34     	; 0x299e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xba>
    29c0:	45 2d       	mov	r20, r5
    29c2:	be 01       	movw	r22, r28
    29c4:	6f 5b       	subi	r22, 0xBF	; 191
    29c6:	7f 4f       	sbci	r23, 0xFF	; 255
    29c8:	c8 01       	movw	r24, r16
    29ca:	0e 94 15 14 	call	0x282a	; 0x282a <_ZN16PololuQTRSensors4readEPjh>
    29ce:	f8 01       	movw	r30, r16
    29d0:	60 84       	ldd	r6, Z+8	; 0x08
    29d2:	71 2c       	mov	r7, r1
    29d4:	fe 01       	movw	r30, r28
    29d6:	ef 5b       	subi	r30, 0xBF	; 191
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	c6 01       	movw	r24, r12
    29dc:	9e 01       	movw	r18, r28
    29de:	2f 5f       	subi	r18, 0xFF	; 255
    29e0:	3f 4f       	sbci	r19, 0xFF	; 255
    29e2:	19 01       	movw	r2, r18
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	26 15       	cp	r18, r6
    29ea:	37 05       	cpc	r19, r7
    29ec:	4c f5       	brge	.+82     	; 0x2a40 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x15c>
    29ee:	e1 14       	cp	r14, r1
    29f0:	f1 04       	cpc	r15, r1
    29f2:	89 f0       	breq	.+34     	; 0x2a16 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    29f4:	dc 01       	movw	r26, r24
    29f6:	6d 91       	ld	r22, X+
    29f8:	7c 91       	ld	r23, X
    29fa:	40 81       	ld	r20, Z
    29fc:	51 81       	ldd	r21, Z+1	; 0x01
    29fe:	64 17       	cp	r22, r20
    2a00:	75 07       	cpc	r23, r21
    2a02:	48 f0       	brcs	.+18     	; 0x2a16 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    2a04:	d1 01       	movw	r26, r2
    2a06:	6d 91       	ld	r22, X+
    2a08:	7c 91       	ld	r23, X
    2a0a:	40 81       	ld	r20, Z
    2a0c:	51 81       	ldd	r21, Z+1	; 0x01
    2a0e:	46 17       	cp	r20, r22
    2a10:	57 07       	cpc	r21, r23
    2a12:	48 f0       	brcs	.+18     	; 0x2a26 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x142>
    2a14:	0d c0       	rjmp	.+26     	; 0x2a30 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x14c>
    2a16:	40 81       	ld	r20, Z
    2a18:	51 81       	ldd	r21, Z+1	; 0x01
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	4d 93       	st	X+, r20
    2a1e:	5c 93       	st	X, r21
    2a20:	e1 14       	cp	r14, r1
    2a22:	f1 04       	cpc	r15, r1
    2a24:	79 f7       	brne	.-34     	; 0x2a04 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x120>
    2a26:	40 81       	ld	r20, Z
    2a28:	51 81       	ldd	r21, Z+1	; 0x01
    2a2a:	d1 01       	movw	r26, r2
    2a2c:	4d 93       	st	X+, r20
    2a2e:	5c 93       	st	X, r21
    2a30:	2f 5f       	subi	r18, 0xFF	; 255
    2a32:	3f 4f       	sbci	r19, 0xFF	; 255
    2a34:	b2 e0       	ldi	r27, 0x02	; 2
    2a36:	2b 0e       	add	r2, r27
    2a38:	31 1c       	adc	r3, r1
    2a3a:	32 96       	adiw	r30, 0x02	; 2
    2a3c:	02 96       	adiw	r24, 0x02	; 2
    2a3e:	d4 cf       	rjmp	.-88     	; 0x29e8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x104>
    2a40:	ef ef       	ldi	r30, 0xFF	; 255
    2a42:	ee 1a       	sub	r14, r30
    2a44:	fe 0a       	sbc	r15, r30
    2a46:	fa e0       	ldi	r31, 0x0A	; 10
    2a48:	ef 16       	cp	r14, r31
    2a4a:	f1 04       	cpc	r15, r1
    2a4c:	09 f0       	breq	.+2      	; 0x2a50 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x16c>
    2a4e:	b8 cf       	rjmp	.-144    	; 0x29c0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    2a50:	9e 01       	movw	r18, r28
    2a52:	2f 5f       	subi	r18, 0xFF	; 255
    2a54:	3f 4f       	sbci	r19, 0xFF	; 255
    2a56:	79 01       	movw	r14, r18
    2a58:	36 01       	movw	r6, r12
    2a5a:	80 e0       	ldi	r24, 0x00	; 0
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	f8 01       	movw	r30, r16
    2a60:	20 85       	ldd	r18, Z+8	; 0x08
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	82 17       	cp	r24, r18
    2a66:	93 07       	cpc	r25, r19
    2a68:	2c f5       	brge	.+74     	; 0x2ab4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    2a6a:	d7 01       	movw	r26, r14
    2a6c:	2d 91       	ld	r18, X+
    2a6e:	3d 91       	ld	r19, X+
    2a70:	7d 01       	movw	r14, r26
    2a72:	b3 01       	movw	r22, r6
    2a74:	6c 19       	sub	r22, r12
    2a76:	7d 09       	sbc	r23, r13
    2a78:	d5 01       	movw	r26, r10
    2a7a:	ed 91       	ld	r30, X+
    2a7c:	fc 91       	ld	r31, X
    2a7e:	e6 0f       	add	r30, r22
    2a80:	f7 1f       	adc	r31, r23
    2a82:	40 81       	ld	r20, Z
    2a84:	51 81       	ldd	r21, Z+1	; 0x01
    2a86:	42 17       	cp	r20, r18
    2a88:	53 07       	cpc	r21, r19
    2a8a:	10 f4       	brcc	.+4      	; 0x2a90 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1ac>
    2a8c:	31 83       	std	Z+1, r19	; 0x01
    2a8e:	20 83       	st	Z, r18
    2a90:	f3 01       	movw	r30, r6
    2a92:	21 91       	ld	r18, Z+
    2a94:	31 91       	ld	r19, Z+
    2a96:	3f 01       	movw	r6, r30
    2a98:	d4 01       	movw	r26, r8
    2a9a:	ed 91       	ld	r30, X+
    2a9c:	fc 91       	ld	r31, X
    2a9e:	e6 0f       	add	r30, r22
    2aa0:	f7 1f       	adc	r31, r23
    2aa2:	40 81       	ld	r20, Z
    2aa4:	51 81       	ldd	r21, Z+1	; 0x01
    2aa6:	24 17       	cp	r18, r20
    2aa8:	35 07       	cpc	r19, r21
    2aaa:	10 f4       	brcc	.+4      	; 0x2ab0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1cc>
    2aac:	31 83       	std	Z+1, r19	; 0x01
    2aae:	20 83       	st	Z, r18
    2ab0:	01 96       	adiw	r24, 0x01	; 1
    2ab2:	d5 cf       	rjmp	.-86     	; 0x2a5e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17a>
    2ab4:	c0 5a       	subi	r28, 0xA0	; 160
    2ab6:	df 4f       	sbci	r29, 0xFF	; 255
    2ab8:	0f b6       	in	r0, 0x3f	; 63
    2aba:	f8 94       	cli
    2abc:	de bf       	out	0x3e, r29	; 62
    2abe:	0f be       	out	0x3f, r0	; 63
    2ac0:	cd bf       	out	0x3d, r28	; 61
    2ac2:	df 91       	pop	r29
    2ac4:	cf 91       	pop	r28
    2ac6:	1f 91       	pop	r17
    2ac8:	0f 91       	pop	r16
    2aca:	ff 90       	pop	r15
    2acc:	ef 90       	pop	r14
    2ace:	df 90       	pop	r13
    2ad0:	cf 90       	pop	r12
    2ad2:	bf 90       	pop	r11
    2ad4:	af 90       	pop	r10
    2ad6:	9f 90       	pop	r9
    2ad8:	8f 90       	pop	r8
    2ada:	7f 90       	pop	r7
    2adc:	6f 90       	pop	r6
    2ade:	5f 90       	pop	r5
    2ae0:	3f 90       	pop	r3
    2ae2:	2f 90       	pop	r2
    2ae4:	08 95       	ret

00002ae6 <_ZN16PololuQTRSensors9calibrateEh>:
    2ae6:	1f 93       	push	r17
    2ae8:	cf 93       	push	r28
    2aea:	df 93       	push	r29
    2aec:	ec 01       	movw	r28, r24
    2aee:	16 2f       	mov	r17, r22
    2af0:	8f ef       	ldi	r24, 0xFF	; 255
    2af2:	86 0f       	add	r24, r22
    2af4:	82 30       	cpi	r24, 0x02	; 2
    2af6:	18 f0       	brcs	.+6      	; 0x2afe <_ZN16PololuQTRSensors9calibrateEh+0x18>
    2af8:	66 23       	and	r22, r22
    2afa:	59 f0       	breq	.+22     	; 0x2b12 <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    2afc:	14 c0       	rjmp	.+40     	; 0x2b26 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    2afe:	21 e0       	ldi	r18, 0x01	; 1
    2b00:	ae 01       	movw	r20, r28
    2b02:	4e 5f       	subi	r20, 0xFE	; 254
    2b04:	5f 4f       	sbci	r21, 0xFF	; 255
    2b06:	be 01       	movw	r22, r28
    2b08:	ce 01       	movw	r24, r28
    2b0a:	0e 94 72 14 	call	0x28e4	; 0x28e4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    2b0e:	12 30       	cpi	r17, 0x02	; 2
    2b10:	51 f4       	brne	.+20     	; 0x2b26 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    2b12:	ae 01       	movw	r20, r28
    2b14:	4a 5f       	subi	r20, 0xFA	; 250
    2b16:	5f 4f       	sbci	r21, 0xFF	; 255
    2b18:	be 01       	movw	r22, r28
    2b1a:	6c 5f       	subi	r22, 0xFC	; 252
    2b1c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	ce 01       	movw	r24, r28
    2b22:	0e 94 72 14 	call	0x28e4	; 0x28e4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    2b26:	df 91       	pop	r29
    2b28:	cf 91       	pop	r28
    2b2a:	1f 91       	pop	r17
    2b2c:	08 95       	ret

00002b2e <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    2b2e:	a0 e0       	ldi	r26, 0x00	; 0
    2b30:	b0 e0       	ldi	r27, 0x00	; 0
    2b32:	ed e9       	ldi	r30, 0x9D	; 157
    2b34:	f5 e1       	ldi	r31, 0x15	; 21
    2b36:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__prologue_saves__+0x12>
    2b3a:	ec 01       	movw	r28, r24
    2b3c:	8b 01       	movw	r16, r22
    2b3e:	b4 2e       	mov	r11, r20
    2b40:	84 2f       	mov	r24, r20
    2b42:	8d 7f       	andi	r24, 0xFD	; 253
    2b44:	51 f4       	brne	.+20     	; 0x2b5a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    2b46:	8c 81       	ldd	r24, Y+4	; 0x04
    2b48:	9d 81       	ldd	r25, Y+5	; 0x05
    2b4a:	89 2b       	or	r24, r25
    2b4c:	09 f4       	brne	.+2      	; 0x2b50 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x22>
    2b4e:	97 c0       	rjmp	.+302    	; 0x2c7e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2b50:	8e 81       	ldd	r24, Y+6	; 0x06
    2b52:	9f 81       	ldd	r25, Y+7	; 0x07
    2b54:	89 2b       	or	r24, r25
    2b56:	09 f4       	brne	.+2      	; 0x2b5a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    2b58:	92 c0       	rjmp	.+292    	; 0x2c7e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2b5a:	8f ef       	ldi	r24, 0xFF	; 255
    2b5c:	8b 0d       	add	r24, r11
    2b5e:	82 30       	cpi	r24, 0x02	; 2
    2b60:	50 f4       	brcc	.+20     	; 0x2b76 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    2b62:	88 81       	ld	r24, Y
    2b64:	99 81       	ldd	r25, Y+1	; 0x01
    2b66:	89 2b       	or	r24, r25
    2b68:	09 f4       	brne	.+2      	; 0x2b6c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3e>
    2b6a:	89 c0       	rjmp	.+274    	; 0x2c7e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b70:	89 2b       	or	r24, r25
    2b72:	09 f4       	brne	.+2      	; 0x2b76 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    2b74:	84 c0       	rjmp	.+264    	; 0x2c7e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2b76:	4b 2d       	mov	r20, r11
    2b78:	b8 01       	movw	r22, r16
    2b7a:	ce 01       	movw	r24, r28
    2b7c:	0e 94 15 14 	call	0x282a	; 0x282a <_ZN16PololuQTRSensors4readEPjh>
    2b80:	78 01       	movw	r14, r16
    2b82:	00 e0       	ldi	r16, 0x00	; 0
    2b84:	10 e0       	ldi	r17, 0x00	; 0
    2b86:	c1 2c       	mov	r12, r1
    2b88:	d1 2c       	mov	r13, r1
    2b8a:	88 85       	ldd	r24, Y+8	; 0x08
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	c8 16       	cp	r12, r24
    2b90:	d9 06       	cpc	r13, r25
    2b92:	0c f0       	brlt	.+2      	; 0x2b96 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x68>
    2b94:	74 c0       	rjmp	.+232    	; 0x2c7e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2b96:	81 e0       	ldi	r24, 0x01	; 1
    2b98:	b8 12       	cpse	r11, r24
    2b9a:	0a c0       	rjmp	.+20     	; 0x2bb0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x82>
    2b9c:	ea 81       	ldd	r30, Y+2	; 0x02
    2b9e:	fb 81       	ldd	r31, Y+3	; 0x03
    2ba0:	e0 0f       	add	r30, r16
    2ba2:	f1 1f       	adc	r31, r17
    2ba4:	01 90       	ld	r0, Z+
    2ba6:	f0 81       	ld	r31, Z
    2ba8:	e0 2d       	mov	r30, r0
    2baa:	a8 81       	ld	r26, Y
    2bac:	b9 81       	ldd	r27, Y+1	; 0x01
    2bae:	0d c0       	rjmp	.+26     	; 0x2bca <_ZN16PololuQTRSensors14readCalibratedEPjh+0x9c>
    2bb0:	8c 81       	ldd	r24, Y+4	; 0x04
    2bb2:	9d 81       	ldd	r25, Y+5	; 0x05
    2bb4:	2e 81       	ldd	r18, Y+6	; 0x06
    2bb6:	3f 81       	ldd	r19, Y+7	; 0x07
    2bb8:	b1 10       	cpse	r11, r1
    2bba:	0c c0       	rjmp	.+24     	; 0x2bd4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    2bbc:	f9 01       	movw	r30, r18
    2bbe:	e0 0f       	add	r30, r16
    2bc0:	f1 1f       	adc	r31, r17
    2bc2:	01 90       	ld	r0, Z+
    2bc4:	f0 81       	ld	r31, Z
    2bc6:	e0 2d       	mov	r30, r0
    2bc8:	dc 01       	movw	r26, r24
    2bca:	a0 0f       	add	r26, r16
    2bcc:	b1 1f       	adc	r27, r17
    2bce:	8d 91       	ld	r24, X+
    2bd0:	9c 91       	ld	r25, X
    2bd2:	28 c0       	rjmp	.+80     	; 0x2c24 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    2bd4:	fc 01       	movw	r30, r24
    2bd6:	e0 0f       	add	r30, r16
    2bd8:	f1 1f       	adc	r31, r17
    2bda:	40 81       	ld	r20, Z
    2bdc:	51 81       	ldd	r21, Z+1	; 0x01
    2bde:	e8 81       	ld	r30, Y
    2be0:	f9 81       	ldd	r31, Y+1	; 0x01
    2be2:	e0 0f       	add	r30, r16
    2be4:	f1 1f       	adc	r31, r17
    2be6:	80 81       	ld	r24, Z
    2be8:	91 81       	ldd	r25, Z+1	; 0x01
    2bea:	ee 85       	ldd	r30, Y+14	; 0x0e
    2bec:	ff 85       	ldd	r31, Y+15	; 0x0f
    2bee:	48 17       	cp	r20, r24
    2bf0:	59 07       	cpc	r21, r25
    2bf2:	10 f4       	brcc	.+4      	; 0x2bf8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xca>
    2bf4:	cf 01       	movw	r24, r30
    2bf6:	04 c0       	rjmp	.+8      	; 0x2c00 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd2>
    2bf8:	8e 0f       	add	r24, r30
    2bfa:	9f 1f       	adc	r25, r31
    2bfc:	84 1b       	sub	r24, r20
    2bfe:	95 0b       	sbc	r25, r21
    2c00:	d9 01       	movw	r26, r18
    2c02:	a0 0f       	add	r26, r16
    2c04:	b1 1f       	adc	r27, r17
    2c06:	2d 91       	ld	r18, X+
    2c08:	3c 91       	ld	r19, X
    2c0a:	aa 81       	ldd	r26, Y+2	; 0x02
    2c0c:	bb 81       	ldd	r27, Y+3	; 0x03
    2c0e:	a0 0f       	add	r26, r16
    2c10:	b1 1f       	adc	r27, r17
    2c12:	4d 91       	ld	r20, X+
    2c14:	5c 91       	ld	r21, X
    2c16:	24 17       	cp	r18, r20
    2c18:	35 07       	cpc	r19, r21
    2c1a:	20 f0       	brcs	.+8      	; 0x2c24 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    2c1c:	e4 0f       	add	r30, r20
    2c1e:	f5 1f       	adc	r31, r21
    2c20:	e2 1b       	sub	r30, r18
    2c22:	f3 0b       	sbc	r31, r19
    2c24:	e8 1b       	sub	r30, r24
    2c26:	f9 0b       	sbc	r31, r25
    2c28:	a9 f0       	breq	.+42     	; 0x2c54 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x126>
    2c2a:	d7 01       	movw	r26, r14
    2c2c:	2d 91       	ld	r18, X+
    2c2e:	3c 91       	ld	r19, X
    2c30:	40 e0       	ldi	r20, 0x00	; 0
    2c32:	50 e0       	ldi	r21, 0x00	; 0
    2c34:	28 1b       	sub	r18, r24
    2c36:	39 0b       	sbc	r19, r25
    2c38:	41 09       	sbc	r20, r1
    2c3a:	51 09       	sbc	r21, r1
    2c3c:	a8 ee       	ldi	r26, 0xE8	; 232
    2c3e:	b3 e0       	ldi	r27, 0x03	; 3
    2c40:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <__muluhisi3>
    2c44:	9f 01       	movw	r18, r30
    2c46:	40 e0       	ldi	r20, 0x00	; 0
    2c48:	50 e0       	ldi	r21, 0x00	; 0
    2c4a:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__divmodsi4>
    2c4e:	37 fd       	sbrc	r19, 7
    2c50:	0a c0       	rjmp	.+20     	; 0x2c66 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x138>
    2c52:	02 c0       	rjmp	.+4      	; 0x2c58 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x12a>
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	29 3e       	cpi	r18, 0xE9	; 233
    2c5a:	b3 e0       	ldi	r27, 0x03	; 3
    2c5c:	3b 07       	cpc	r19, r27
    2c5e:	2c f0       	brlt	.+10     	; 0x2c6a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    2c60:	28 ee       	ldi	r18, 0xE8	; 232
    2c62:	33 e0       	ldi	r19, 0x03	; 3
    2c64:	02 c0       	rjmp	.+4      	; 0x2c6a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	f7 01       	movw	r30, r14
    2c6c:	21 93       	st	Z+, r18
    2c6e:	31 93       	st	Z+, r19
    2c70:	7f 01       	movw	r14, r30
    2c72:	ff ef       	ldi	r31, 0xFF	; 255
    2c74:	cf 1a       	sub	r12, r31
    2c76:	df 0a       	sbc	r13, r31
    2c78:	0e 5f       	subi	r16, 0xFE	; 254
    2c7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c7c:	86 cf       	rjmp	.-244    	; 0x2b8a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x5c>
    2c7e:	cd b7       	in	r28, 0x3d	; 61
    2c80:	de b7       	in	r29, 0x3e	; 62
    2c82:	e9 e0       	ldi	r30, 0x09	; 9
    2c84:	0c 94 99 17 	jmp	0x2f32	; 0x2f32 <__epilogue_restores__+0x12>

00002c88 <_ZN16PololuQTRSensors8readLineEPjhh>:
    2c88:	a0 e0       	ldi	r26, 0x00	; 0
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	ea e4       	ldi	r30, 0x4A	; 74
    2c8e:	f6 e1       	ldi	r31, 0x16	; 22
    2c90:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__prologue_saves__>
    2c94:	ec 01       	movw	r28, r24
    2c96:	8b 01       	movw	r16, r22
    2c98:	82 2e       	mov	r8, r18
    2c9a:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <_ZN16PololuQTRSensors14readCalibratedEPjh>
    2c9e:	28 84       	ldd	r2, Y+8	; 0x08
    2ca0:	e8 01       	movw	r28, r16
    2ca2:	41 2c       	mov	r4, r1
    2ca4:	51 2c       	mov	r5, r1
    2ca6:	32 01       	movw	r6, r4
    2ca8:	00 e0       	ldi	r16, 0x00	; 0
    2caa:	10 e0       	ldi	r17, 0x00	; 0
    2cac:	c1 2c       	mov	r12, r1
    2cae:	d1 2c       	mov	r13, r1
    2cb0:	76 01       	movw	r14, r12
    2cb2:	31 2c       	mov	r3, r1
    2cb4:	91 2c       	mov	r9, r1
    2cb6:	58 ee       	ldi	r21, 0xE8	; 232
    2cb8:	a5 2e       	mov	r10, r21
    2cba:	53 e0       	ldi	r21, 0x03	; 3
    2cbc:	b5 2e       	mov	r11, r21
    2cbe:	92 14       	cp	r9, r2
    2cc0:	21 f1       	breq	.+72     	; 0x2d0a <_ZN16PololuQTRSensors8readLineEPjhh+0x82>
    2cc2:	e9 91       	ld	r30, Y+
    2cc4:	f9 91       	ld	r31, Y+
    2cc6:	88 20       	and	r8, r8
    2cc8:	21 f0       	breq	.+8      	; 0x2cd2 <_ZN16PololuQTRSensors8readLineEPjhh+0x4a>
    2cca:	c5 01       	movw	r24, r10
    2ccc:	8e 1b       	sub	r24, r30
    2cce:	9f 0b       	sbc	r25, r31
    2cd0:	fc 01       	movw	r30, r24
    2cd2:	e9 3c       	cpi	r30, 0xC9	; 201
    2cd4:	f1 05       	cpc	r31, r1
    2cd6:	24 f4       	brge	.+8      	; 0x2ce0 <_ZN16PololuQTRSensors8readLineEPjhh+0x58>
    2cd8:	e3 33       	cpi	r30, 0x33	; 51
    2cda:	f1 05       	cpc	r31, r1
    2cdc:	74 f0       	brlt	.+28     	; 0x2cfa <_ZN16PololuQTRSensors8readLineEPjhh+0x72>
    2cde:	02 c0       	rjmp	.+4      	; 0x2ce4 <_ZN16PololuQTRSensors8readLineEPjhh+0x5c>
    2ce0:	33 24       	eor	r3, r3
    2ce2:	33 94       	inc	r3
    2ce4:	df 01       	movw	r26, r30
    2ce6:	a3 01       	movw	r20, r6
    2ce8:	92 01       	movw	r18, r4
    2cea:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__mulshisi3>
    2cee:	c6 0e       	add	r12, r22
    2cf0:	d7 1e       	adc	r13, r23
    2cf2:	e8 1e       	adc	r14, r24
    2cf4:	f9 1e       	adc	r15, r25
    2cf6:	0e 0f       	add	r16, r30
    2cf8:	1f 1f       	adc	r17, r31
    2cfa:	93 94       	inc	r9
    2cfc:	98 ee       	ldi	r25, 0xE8	; 232
    2cfe:	49 0e       	add	r4, r25
    2d00:	93 e0       	ldi	r25, 0x03	; 3
    2d02:	59 1e       	adc	r5, r25
    2d04:	61 1c       	adc	r6, r1
    2d06:	71 1c       	adc	r7, r1
    2d08:	da cf       	rjmp	.-76     	; 0x2cbe <_ZN16PololuQTRSensors8readLineEPjhh+0x36>
    2d0a:	31 10       	cpse	r3, r1
    2d0c:	1e c0       	rjmp	.+60     	; 0x2d4a <_ZN16PololuQTRSensors8readLineEPjhh+0xc2>
    2d0e:	49 2d       	mov	r20, r9
    2d10:	50 e0       	ldi	r21, 0x00	; 0
    2d12:	41 50       	subi	r20, 0x01	; 1
    2d14:	51 09       	sbc	r21, r1
    2d16:	24 ef       	ldi	r18, 0xF4	; 244
    2d18:	31 e0       	ldi	r19, 0x01	; 1
    2d1a:	42 9f       	mul	r20, r18
    2d1c:	c0 01       	movw	r24, r0
    2d1e:	43 9f       	mul	r20, r19
    2d20:	90 0d       	add	r25, r0
    2d22:	52 9f       	mul	r21, r18
    2d24:	90 0d       	add	r25, r0
    2d26:	11 24       	eor	r1, r1
    2d28:	20 91 eb 01 	lds	r18, 0x01EB	; 0x8001eb <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    2d2c:	30 91 ec 01 	lds	r19, 0x01EC	; 0x8001ec <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    2d30:	28 17       	cp	r18, r24
    2d32:	39 07       	cpc	r19, r25
    2d34:	b4 f0       	brlt	.+44     	; 0x2d62 <_ZN16PololuQTRSensors8readLineEPjhh+0xda>
    2d36:	88 ee       	ldi	r24, 0xE8	; 232
    2d38:	93 e0       	ldi	r25, 0x03	; 3
    2d3a:	48 9f       	mul	r20, r24
    2d3c:	90 01       	movw	r18, r0
    2d3e:	49 9f       	mul	r20, r25
    2d40:	30 0d       	add	r19, r0
    2d42:	58 9f       	mul	r21, r24
    2d44:	30 0d       	add	r19, r0
    2d46:	11 24       	eor	r1, r1
    2d48:	0e c0       	rjmp	.+28     	; 0x2d66 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    2d4a:	98 01       	movw	r18, r16
    2d4c:	40 e0       	ldi	r20, 0x00	; 0
    2d4e:	50 e0       	ldi	r21, 0x00	; 0
    2d50:	c7 01       	movw	r24, r14
    2d52:	b6 01       	movw	r22, r12
    2d54:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <__udivmodsi4>
    2d58:	30 93 ec 01 	sts	0x01EC, r19	; 0x8001ec <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    2d5c:	20 93 eb 01 	sts	0x01EB, r18	; 0x8001eb <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    2d60:	02 c0       	rjmp	.+4      	; 0x2d66 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    2d62:	20 e0       	ldi	r18, 0x00	; 0
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	c9 01       	movw	r24, r18
    2d68:	cd b7       	in	r28, 0x3d	; 61
    2d6a:	de b7       	in	r29, 0x3e	; 62
    2d6c:	e2 e1       	ldi	r30, 0x12	; 18
    2d6e:	0c 94 90 17 	jmp	0x2f20	; 0x2f20 <__epilogue_restores__>

00002d72 <_ZN16PololuQTRSensorsD1Ev>:
    2d72:	cf 93       	push	r28
    2d74:	df 93       	push	r29
    2d76:	ec 01       	movw	r28, r24
    2d78:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d7c:	00 97       	sbiw	r24, 0x00	; 0
    2d7e:	11 f0       	breq	.+4      	; 0x2d84 <_ZN16PololuQTRSensorsD1Ev+0x12>
    2d80:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <free>
    2d84:	8e 81       	ldd	r24, Y+6	; 0x06
    2d86:	9f 81       	ldd	r25, Y+7	; 0x07
    2d88:	00 97       	sbiw	r24, 0x00	; 0
    2d8a:	11 f0       	breq	.+4      	; 0x2d90 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    2d8c:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <free>
    2d90:	88 81       	ld	r24, Y
    2d92:	99 81       	ldd	r25, Y+1	; 0x01
    2d94:	00 97       	sbiw	r24, 0x00	; 0
    2d96:	11 f0       	breq	.+4      	; 0x2d9c <_ZN16PololuQTRSensorsD1Ev+0x2a>
    2d98:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <free>
    2d9c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d9e:	9d 81       	ldd	r25, Y+5	; 0x05
    2da0:	00 97       	sbiw	r24, 0x00	; 0
    2da2:	11 f0       	breq	.+4      	; 0x2da8 <_ZN16PololuQTRSensorsD1Ev+0x36>
    2da4:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <free>
    2da8:	df 91       	pop	r29
    2daa:	cf 91       	pop	r28
    2dac:	08 95       	ret

00002dae <__udivmodqi4>:
    2dae:	99 1b       	sub	r25, r25
    2db0:	79 e0       	ldi	r23, 0x09	; 9
    2db2:	04 c0       	rjmp	.+8      	; 0x2dbc <__udivmodqi4_ep>

00002db4 <__udivmodqi4_loop>:
    2db4:	99 1f       	adc	r25, r25
    2db6:	96 17       	cp	r25, r22
    2db8:	08 f0       	brcs	.+2      	; 0x2dbc <__udivmodqi4_ep>
    2dba:	96 1b       	sub	r25, r22

00002dbc <__udivmodqi4_ep>:
    2dbc:	88 1f       	adc	r24, r24
    2dbe:	7a 95       	dec	r23
    2dc0:	c9 f7       	brne	.-14     	; 0x2db4 <__udivmodqi4_loop>
    2dc2:	80 95       	com	r24
    2dc4:	08 95       	ret

00002dc6 <__udivmodhi4>:
    2dc6:	aa 1b       	sub	r26, r26
    2dc8:	bb 1b       	sub	r27, r27
    2dca:	51 e1       	ldi	r21, 0x11	; 17
    2dcc:	07 c0       	rjmp	.+14     	; 0x2ddc <__udivmodhi4_ep>

00002dce <__udivmodhi4_loop>:
    2dce:	aa 1f       	adc	r26, r26
    2dd0:	bb 1f       	adc	r27, r27
    2dd2:	a6 17       	cp	r26, r22
    2dd4:	b7 07       	cpc	r27, r23
    2dd6:	10 f0       	brcs	.+4      	; 0x2ddc <__udivmodhi4_ep>
    2dd8:	a6 1b       	sub	r26, r22
    2dda:	b7 0b       	sbc	r27, r23

00002ddc <__udivmodhi4_ep>:
    2ddc:	88 1f       	adc	r24, r24
    2dde:	99 1f       	adc	r25, r25
    2de0:	5a 95       	dec	r21
    2de2:	a9 f7       	brne	.-22     	; 0x2dce <__udivmodhi4_loop>
    2de4:	80 95       	com	r24
    2de6:	90 95       	com	r25
    2de8:	bc 01       	movw	r22, r24
    2dea:	cd 01       	movw	r24, r26
    2dec:	08 95       	ret

00002dee <__divmodhi4>:
    2dee:	97 fb       	bst	r25, 7
    2df0:	07 2e       	mov	r0, r23
    2df2:	16 f4       	brtc	.+4      	; 0x2df8 <__divmodhi4+0xa>
    2df4:	00 94       	com	r0
    2df6:	07 d0       	rcall	.+14     	; 0x2e06 <__divmodhi4_neg1>
    2df8:	77 fd       	sbrc	r23, 7
    2dfa:	09 d0       	rcall	.+18     	; 0x2e0e <__divmodhi4_neg2>
    2dfc:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <__udivmodhi4>
    2e00:	07 fc       	sbrc	r0, 7
    2e02:	05 d0       	rcall	.+10     	; 0x2e0e <__divmodhi4_neg2>
    2e04:	3e f4       	brtc	.+14     	; 0x2e14 <__divmodhi4_exit>

00002e06 <__divmodhi4_neg1>:
    2e06:	90 95       	com	r25
    2e08:	81 95       	neg	r24
    2e0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e0c:	08 95       	ret

00002e0e <__divmodhi4_neg2>:
    2e0e:	70 95       	com	r23
    2e10:	61 95       	neg	r22
    2e12:	7f 4f       	sbci	r23, 0xFF	; 255

00002e14 <__divmodhi4_exit>:
    2e14:	08 95       	ret

00002e16 <__udivmodsi4>:
    2e16:	a1 e2       	ldi	r26, 0x21	; 33
    2e18:	1a 2e       	mov	r1, r26
    2e1a:	aa 1b       	sub	r26, r26
    2e1c:	bb 1b       	sub	r27, r27
    2e1e:	fd 01       	movw	r30, r26
    2e20:	0d c0       	rjmp	.+26     	; 0x2e3c <__udivmodsi4_ep>

00002e22 <__udivmodsi4_loop>:
    2e22:	aa 1f       	adc	r26, r26
    2e24:	bb 1f       	adc	r27, r27
    2e26:	ee 1f       	adc	r30, r30
    2e28:	ff 1f       	adc	r31, r31
    2e2a:	a2 17       	cp	r26, r18
    2e2c:	b3 07       	cpc	r27, r19
    2e2e:	e4 07       	cpc	r30, r20
    2e30:	f5 07       	cpc	r31, r21
    2e32:	20 f0       	brcs	.+8      	; 0x2e3c <__udivmodsi4_ep>
    2e34:	a2 1b       	sub	r26, r18
    2e36:	b3 0b       	sbc	r27, r19
    2e38:	e4 0b       	sbc	r30, r20
    2e3a:	f5 0b       	sbc	r31, r21

00002e3c <__udivmodsi4_ep>:
    2e3c:	66 1f       	adc	r22, r22
    2e3e:	77 1f       	adc	r23, r23
    2e40:	88 1f       	adc	r24, r24
    2e42:	99 1f       	adc	r25, r25
    2e44:	1a 94       	dec	r1
    2e46:	69 f7       	brne	.-38     	; 0x2e22 <__udivmodsi4_loop>
    2e48:	60 95       	com	r22
    2e4a:	70 95       	com	r23
    2e4c:	80 95       	com	r24
    2e4e:	90 95       	com	r25
    2e50:	9b 01       	movw	r18, r22
    2e52:	ac 01       	movw	r20, r24
    2e54:	bd 01       	movw	r22, r26
    2e56:	cf 01       	movw	r24, r30
    2e58:	08 95       	ret

00002e5a <__divmodsi4>:
    2e5a:	05 2e       	mov	r0, r21
    2e5c:	97 fb       	bst	r25, 7
    2e5e:	1e f4       	brtc	.+6      	; 0x2e66 <__divmodsi4+0xc>
    2e60:	00 94       	com	r0
    2e62:	0e 94 44 17 	call	0x2e88	; 0x2e88 <__negsi2>
    2e66:	57 fd       	sbrc	r21, 7
    2e68:	07 d0       	rcall	.+14     	; 0x2e78 <__divmodsi4_neg2>
    2e6a:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <__udivmodsi4>
    2e6e:	07 fc       	sbrc	r0, 7
    2e70:	03 d0       	rcall	.+6      	; 0x2e78 <__divmodsi4_neg2>
    2e72:	4e f4       	brtc	.+18     	; 0x2e86 <__divmodsi4_exit>
    2e74:	0c 94 44 17 	jmp	0x2e88	; 0x2e88 <__negsi2>

00002e78 <__divmodsi4_neg2>:
    2e78:	50 95       	com	r21
    2e7a:	40 95       	com	r20
    2e7c:	30 95       	com	r19
    2e7e:	21 95       	neg	r18
    2e80:	3f 4f       	sbci	r19, 0xFF	; 255
    2e82:	4f 4f       	sbci	r20, 0xFF	; 255
    2e84:	5f 4f       	sbci	r21, 0xFF	; 255

00002e86 <__divmodsi4_exit>:
    2e86:	08 95       	ret

00002e88 <__negsi2>:
    2e88:	90 95       	com	r25
    2e8a:	80 95       	com	r24
    2e8c:	70 95       	com	r23
    2e8e:	61 95       	neg	r22
    2e90:	7f 4f       	sbci	r23, 0xFF	; 255
    2e92:	8f 4f       	sbci	r24, 0xFF	; 255
    2e94:	9f 4f       	sbci	r25, 0xFF	; 255
    2e96:	08 95       	ret

00002e98 <__tablejump2__>:
    2e98:	ee 0f       	add	r30, r30
    2e9a:	ff 1f       	adc	r31, r31
    2e9c:	05 90       	lpm	r0, Z+
    2e9e:	f4 91       	lpm	r31, Z
    2ea0:	e0 2d       	mov	r30, r0
    2ea2:	09 94       	ijmp

00002ea4 <__umulhisi3>:
    2ea4:	a2 9f       	mul	r26, r18
    2ea6:	b0 01       	movw	r22, r0
    2ea8:	b3 9f       	mul	r27, r19
    2eaa:	c0 01       	movw	r24, r0
    2eac:	a3 9f       	mul	r26, r19
    2eae:	70 0d       	add	r23, r0
    2eb0:	81 1d       	adc	r24, r1
    2eb2:	11 24       	eor	r1, r1
    2eb4:	91 1d       	adc	r25, r1
    2eb6:	b2 9f       	mul	r27, r18
    2eb8:	70 0d       	add	r23, r0
    2eba:	81 1d       	adc	r24, r1
    2ebc:	11 24       	eor	r1, r1
    2ebe:	91 1d       	adc	r25, r1
    2ec0:	08 95       	ret

00002ec2 <__muluhisi3>:
    2ec2:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__umulhisi3>
    2ec6:	a5 9f       	mul	r26, r21
    2ec8:	90 0d       	add	r25, r0
    2eca:	b4 9f       	mul	r27, r20
    2ecc:	90 0d       	add	r25, r0
    2ece:	a4 9f       	mul	r26, r20
    2ed0:	80 0d       	add	r24, r0
    2ed2:	91 1d       	adc	r25, r1
    2ed4:	11 24       	eor	r1, r1
    2ed6:	08 95       	ret

00002ed8 <__mulshisi3>:
    2ed8:	b7 ff       	sbrs	r27, 7
    2eda:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__muluhisi3>

00002ede <__mulohisi3>:
    2ede:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <__muluhisi3>
    2ee2:	82 1b       	sub	r24, r18
    2ee4:	93 0b       	sbc	r25, r19
    2ee6:	08 95       	ret

00002ee8 <__prologue_saves__>:
    2ee8:	2f 92       	push	r2
    2eea:	3f 92       	push	r3
    2eec:	4f 92       	push	r4
    2eee:	5f 92       	push	r5
    2ef0:	6f 92       	push	r6
    2ef2:	7f 92       	push	r7
    2ef4:	8f 92       	push	r8
    2ef6:	9f 92       	push	r9
    2ef8:	af 92       	push	r10
    2efa:	bf 92       	push	r11
    2efc:	cf 92       	push	r12
    2efe:	df 92       	push	r13
    2f00:	ef 92       	push	r14
    2f02:	ff 92       	push	r15
    2f04:	0f 93       	push	r16
    2f06:	1f 93       	push	r17
    2f08:	cf 93       	push	r28
    2f0a:	df 93       	push	r29
    2f0c:	cd b7       	in	r28, 0x3d	; 61
    2f0e:	de b7       	in	r29, 0x3e	; 62
    2f10:	ca 1b       	sub	r28, r26
    2f12:	db 0b       	sbc	r29, r27
    2f14:	0f b6       	in	r0, 0x3f	; 63
    2f16:	f8 94       	cli
    2f18:	de bf       	out	0x3e, r29	; 62
    2f1a:	0f be       	out	0x3f, r0	; 63
    2f1c:	cd bf       	out	0x3d, r28	; 61
    2f1e:	09 94       	ijmp

00002f20 <__epilogue_restores__>:
    2f20:	2a 88       	ldd	r2, Y+18	; 0x12
    2f22:	39 88       	ldd	r3, Y+17	; 0x11
    2f24:	48 88       	ldd	r4, Y+16	; 0x10
    2f26:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f28:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f2a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f2c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f2e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f30:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f32:	b9 84       	ldd	r11, Y+9	; 0x09
    2f34:	c8 84       	ldd	r12, Y+8	; 0x08
    2f36:	df 80       	ldd	r13, Y+7	; 0x07
    2f38:	ee 80       	ldd	r14, Y+6	; 0x06
    2f3a:	fd 80       	ldd	r15, Y+5	; 0x05
    2f3c:	0c 81       	ldd	r16, Y+4	; 0x04
    2f3e:	1b 81       	ldd	r17, Y+3	; 0x03
    2f40:	aa 81       	ldd	r26, Y+2	; 0x02
    2f42:	b9 81       	ldd	r27, Y+1	; 0x01
    2f44:	ce 0f       	add	r28, r30
    2f46:	d1 1d       	adc	r29, r1
    2f48:	0f b6       	in	r0, 0x3f	; 63
    2f4a:	f8 94       	cli
    2f4c:	de bf       	out	0x3e, r29	; 62
    2f4e:	0f be       	out	0x3f, r0	; 63
    2f50:	cd bf       	out	0x3d, r28	; 61
    2f52:	ed 01       	movw	r28, r26
    2f54:	08 95       	ret

00002f56 <__subsf3>:
    2f56:	50 58       	subi	r21, 0x80	; 128

00002f58 <__addsf3>:
    2f58:	bb 27       	eor	r27, r27
    2f5a:	aa 27       	eor	r26, r26
    2f5c:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <__addsf3x>
    2f60:	0c 94 cb 18 	jmp	0x3196	; 0x3196 <__fp_round>
    2f64:	0e 94 bd 18 	call	0x317a	; 0x317a <__fp_pscA>
    2f68:	38 f0       	brcs	.+14     	; 0x2f78 <__addsf3+0x20>
    2f6a:	0e 94 c4 18 	call	0x3188	; 0x3188 <__fp_pscB>
    2f6e:	20 f0       	brcs	.+8      	; 0x2f78 <__addsf3+0x20>
    2f70:	39 f4       	brne	.+14     	; 0x2f80 <__addsf3+0x28>
    2f72:	9f 3f       	cpi	r25, 0xFF	; 255
    2f74:	19 f4       	brne	.+6      	; 0x2f7c <__addsf3+0x24>
    2f76:	26 f4       	brtc	.+8      	; 0x2f80 <__addsf3+0x28>
    2f78:	0c 94 ba 18 	jmp	0x3174	; 0x3174 <__fp_nan>
    2f7c:	0e f4       	brtc	.+2      	; 0x2f80 <__addsf3+0x28>
    2f7e:	e0 95       	com	r30
    2f80:	e7 fb       	bst	r30, 7
    2f82:	0c 94 b4 18 	jmp	0x3168	; 0x3168 <__fp_inf>

00002f86 <__addsf3x>:
    2f86:	e9 2f       	mov	r30, r25
    2f88:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__fp_split3>
    2f8c:	58 f3       	brcs	.-42     	; 0x2f64 <__addsf3+0xc>
    2f8e:	ba 17       	cp	r27, r26
    2f90:	62 07       	cpc	r22, r18
    2f92:	73 07       	cpc	r23, r19
    2f94:	84 07       	cpc	r24, r20
    2f96:	95 07       	cpc	r25, r21
    2f98:	20 f0       	brcs	.+8      	; 0x2fa2 <__addsf3x+0x1c>
    2f9a:	79 f4       	brne	.+30     	; 0x2fba <__addsf3x+0x34>
    2f9c:	a6 f5       	brtc	.+104    	; 0x3006 <__addsf3x+0x80>
    2f9e:	0c 94 fe 18 	jmp	0x31fc	; 0x31fc <__fp_zero>
    2fa2:	0e f4       	brtc	.+2      	; 0x2fa6 <__addsf3x+0x20>
    2fa4:	e0 95       	com	r30
    2fa6:	0b 2e       	mov	r0, r27
    2fa8:	ba 2f       	mov	r27, r26
    2faa:	a0 2d       	mov	r26, r0
    2fac:	0b 01       	movw	r0, r22
    2fae:	b9 01       	movw	r22, r18
    2fb0:	90 01       	movw	r18, r0
    2fb2:	0c 01       	movw	r0, r24
    2fb4:	ca 01       	movw	r24, r20
    2fb6:	a0 01       	movw	r20, r0
    2fb8:	11 24       	eor	r1, r1
    2fba:	ff 27       	eor	r31, r31
    2fbc:	59 1b       	sub	r21, r25
    2fbe:	99 f0       	breq	.+38     	; 0x2fe6 <__addsf3x+0x60>
    2fc0:	59 3f       	cpi	r21, 0xF9	; 249
    2fc2:	50 f4       	brcc	.+20     	; 0x2fd8 <__addsf3x+0x52>
    2fc4:	50 3e       	cpi	r21, 0xE0	; 224
    2fc6:	68 f1       	brcs	.+90     	; 0x3022 <__addsf3x+0x9c>
    2fc8:	1a 16       	cp	r1, r26
    2fca:	f0 40       	sbci	r31, 0x00	; 0
    2fcc:	a2 2f       	mov	r26, r18
    2fce:	23 2f       	mov	r18, r19
    2fd0:	34 2f       	mov	r19, r20
    2fd2:	44 27       	eor	r20, r20
    2fd4:	58 5f       	subi	r21, 0xF8	; 248
    2fd6:	f3 cf       	rjmp	.-26     	; 0x2fbe <__addsf3x+0x38>
    2fd8:	46 95       	lsr	r20
    2fda:	37 95       	ror	r19
    2fdc:	27 95       	ror	r18
    2fde:	a7 95       	ror	r26
    2fe0:	f0 40       	sbci	r31, 0x00	; 0
    2fe2:	53 95       	inc	r21
    2fe4:	c9 f7       	brne	.-14     	; 0x2fd8 <__addsf3x+0x52>
    2fe6:	7e f4       	brtc	.+30     	; 0x3006 <__addsf3x+0x80>
    2fe8:	1f 16       	cp	r1, r31
    2fea:	ba 0b       	sbc	r27, r26
    2fec:	62 0b       	sbc	r22, r18
    2fee:	73 0b       	sbc	r23, r19
    2ff0:	84 0b       	sbc	r24, r20
    2ff2:	ba f0       	brmi	.+46     	; 0x3022 <__addsf3x+0x9c>
    2ff4:	91 50       	subi	r25, 0x01	; 1
    2ff6:	a1 f0       	breq	.+40     	; 0x3020 <__addsf3x+0x9a>
    2ff8:	ff 0f       	add	r31, r31
    2ffa:	bb 1f       	adc	r27, r27
    2ffc:	66 1f       	adc	r22, r22
    2ffe:	77 1f       	adc	r23, r23
    3000:	88 1f       	adc	r24, r24
    3002:	c2 f7       	brpl	.-16     	; 0x2ff4 <__addsf3x+0x6e>
    3004:	0e c0       	rjmp	.+28     	; 0x3022 <__addsf3x+0x9c>
    3006:	ba 0f       	add	r27, r26
    3008:	62 1f       	adc	r22, r18
    300a:	73 1f       	adc	r23, r19
    300c:	84 1f       	adc	r24, r20
    300e:	48 f4       	brcc	.+18     	; 0x3022 <__addsf3x+0x9c>
    3010:	87 95       	ror	r24
    3012:	77 95       	ror	r23
    3014:	67 95       	ror	r22
    3016:	b7 95       	ror	r27
    3018:	f7 95       	ror	r31
    301a:	9e 3f       	cpi	r25, 0xFE	; 254
    301c:	08 f0       	brcs	.+2      	; 0x3020 <__addsf3x+0x9a>
    301e:	b0 cf       	rjmp	.-160    	; 0x2f80 <__addsf3+0x28>
    3020:	93 95       	inc	r25
    3022:	88 0f       	add	r24, r24
    3024:	08 f0       	brcs	.+2      	; 0x3028 <__addsf3x+0xa2>
    3026:	99 27       	eor	r25, r25
    3028:	ee 0f       	add	r30, r30
    302a:	97 95       	ror	r25
    302c:	87 95       	ror	r24
    302e:	08 95       	ret

00003030 <__cmpsf2>:
    3030:	0e 94 90 18 	call	0x3120	; 0x3120 <__fp_cmp>
    3034:	08 f4       	brcc	.+2      	; 0x3038 <__cmpsf2+0x8>
    3036:	81 e0       	ldi	r24, 0x01	; 1
    3038:	08 95       	ret

0000303a <__fixsfsi>:
    303a:	0e 94 24 18 	call	0x3048	; 0x3048 <__fixunssfsi>
    303e:	68 94       	set
    3040:	b1 11       	cpse	r27, r1
    3042:	0c 94 ff 18 	jmp	0x31fe	; 0x31fe <__fp_szero>
    3046:	08 95       	ret

00003048 <__fixunssfsi>:
    3048:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <__fp_splitA>
    304c:	88 f0       	brcs	.+34     	; 0x3070 <__fixunssfsi+0x28>
    304e:	9f 57       	subi	r25, 0x7F	; 127
    3050:	98 f0       	brcs	.+38     	; 0x3078 <__fixunssfsi+0x30>
    3052:	b9 2f       	mov	r27, r25
    3054:	99 27       	eor	r25, r25
    3056:	b7 51       	subi	r27, 0x17	; 23
    3058:	b0 f0       	brcs	.+44     	; 0x3086 <__fixunssfsi+0x3e>
    305a:	e1 f0       	breq	.+56     	; 0x3094 <__fixunssfsi+0x4c>
    305c:	66 0f       	add	r22, r22
    305e:	77 1f       	adc	r23, r23
    3060:	88 1f       	adc	r24, r24
    3062:	99 1f       	adc	r25, r25
    3064:	1a f0       	brmi	.+6      	; 0x306c <__fixunssfsi+0x24>
    3066:	ba 95       	dec	r27
    3068:	c9 f7       	brne	.-14     	; 0x305c <__fixunssfsi+0x14>
    306a:	14 c0       	rjmp	.+40     	; 0x3094 <__fixunssfsi+0x4c>
    306c:	b1 30       	cpi	r27, 0x01	; 1
    306e:	91 f0       	breq	.+36     	; 0x3094 <__fixunssfsi+0x4c>
    3070:	0e 94 fe 18 	call	0x31fc	; 0x31fc <__fp_zero>
    3074:	b1 e0       	ldi	r27, 0x01	; 1
    3076:	08 95       	ret
    3078:	0c 94 fe 18 	jmp	0x31fc	; 0x31fc <__fp_zero>
    307c:	67 2f       	mov	r22, r23
    307e:	78 2f       	mov	r23, r24
    3080:	88 27       	eor	r24, r24
    3082:	b8 5f       	subi	r27, 0xF8	; 248
    3084:	39 f0       	breq	.+14     	; 0x3094 <__fixunssfsi+0x4c>
    3086:	b9 3f       	cpi	r27, 0xF9	; 249
    3088:	cc f3       	brlt	.-14     	; 0x307c <__fixunssfsi+0x34>
    308a:	86 95       	lsr	r24
    308c:	77 95       	ror	r23
    308e:	67 95       	ror	r22
    3090:	b3 95       	inc	r27
    3092:	d9 f7       	brne	.-10     	; 0x308a <__fixunssfsi+0x42>
    3094:	3e f4       	brtc	.+14     	; 0x30a4 <__fixunssfsi+0x5c>
    3096:	90 95       	com	r25
    3098:	80 95       	com	r24
    309a:	70 95       	com	r23
    309c:	61 95       	neg	r22
    309e:	7f 4f       	sbci	r23, 0xFF	; 255
    30a0:	8f 4f       	sbci	r24, 0xFF	; 255
    30a2:	9f 4f       	sbci	r25, 0xFF	; 255
    30a4:	08 95       	ret

000030a6 <__floatunsisf>:
    30a6:	e8 94       	clt
    30a8:	09 c0       	rjmp	.+18     	; 0x30bc <__floatsisf+0x12>

000030aa <__floatsisf>:
    30aa:	97 fb       	bst	r25, 7
    30ac:	3e f4       	brtc	.+14     	; 0x30bc <__floatsisf+0x12>
    30ae:	90 95       	com	r25
    30b0:	80 95       	com	r24
    30b2:	70 95       	com	r23
    30b4:	61 95       	neg	r22
    30b6:	7f 4f       	sbci	r23, 0xFF	; 255
    30b8:	8f 4f       	sbci	r24, 0xFF	; 255
    30ba:	9f 4f       	sbci	r25, 0xFF	; 255
    30bc:	99 23       	and	r25, r25
    30be:	a9 f0       	breq	.+42     	; 0x30ea <__floatsisf+0x40>
    30c0:	f9 2f       	mov	r31, r25
    30c2:	96 e9       	ldi	r25, 0x96	; 150
    30c4:	bb 27       	eor	r27, r27
    30c6:	93 95       	inc	r25
    30c8:	f6 95       	lsr	r31
    30ca:	87 95       	ror	r24
    30cc:	77 95       	ror	r23
    30ce:	67 95       	ror	r22
    30d0:	b7 95       	ror	r27
    30d2:	f1 11       	cpse	r31, r1
    30d4:	f8 cf       	rjmp	.-16     	; 0x30c6 <__floatsisf+0x1c>
    30d6:	fa f4       	brpl	.+62     	; 0x3116 <__floatsisf+0x6c>
    30d8:	bb 0f       	add	r27, r27
    30da:	11 f4       	brne	.+4      	; 0x30e0 <__floatsisf+0x36>
    30dc:	60 ff       	sbrs	r22, 0
    30de:	1b c0       	rjmp	.+54     	; 0x3116 <__floatsisf+0x6c>
    30e0:	6f 5f       	subi	r22, 0xFF	; 255
    30e2:	7f 4f       	sbci	r23, 0xFF	; 255
    30e4:	8f 4f       	sbci	r24, 0xFF	; 255
    30e6:	9f 4f       	sbci	r25, 0xFF	; 255
    30e8:	16 c0       	rjmp	.+44     	; 0x3116 <__floatsisf+0x6c>
    30ea:	88 23       	and	r24, r24
    30ec:	11 f0       	breq	.+4      	; 0x30f2 <__floatsisf+0x48>
    30ee:	96 e9       	ldi	r25, 0x96	; 150
    30f0:	11 c0       	rjmp	.+34     	; 0x3114 <__floatsisf+0x6a>
    30f2:	77 23       	and	r23, r23
    30f4:	21 f0       	breq	.+8      	; 0x30fe <__floatsisf+0x54>
    30f6:	9e e8       	ldi	r25, 0x8E	; 142
    30f8:	87 2f       	mov	r24, r23
    30fa:	76 2f       	mov	r23, r22
    30fc:	05 c0       	rjmp	.+10     	; 0x3108 <__floatsisf+0x5e>
    30fe:	66 23       	and	r22, r22
    3100:	71 f0       	breq	.+28     	; 0x311e <__floatsisf+0x74>
    3102:	96 e8       	ldi	r25, 0x86	; 134
    3104:	86 2f       	mov	r24, r22
    3106:	70 e0       	ldi	r23, 0x00	; 0
    3108:	60 e0       	ldi	r22, 0x00	; 0
    310a:	2a f0       	brmi	.+10     	; 0x3116 <__floatsisf+0x6c>
    310c:	9a 95       	dec	r25
    310e:	66 0f       	add	r22, r22
    3110:	77 1f       	adc	r23, r23
    3112:	88 1f       	adc	r24, r24
    3114:	da f7       	brpl	.-10     	; 0x310c <__floatsisf+0x62>
    3116:	88 0f       	add	r24, r24
    3118:	96 95       	lsr	r25
    311a:	87 95       	ror	r24
    311c:	97 f9       	bld	r25, 7
    311e:	08 95       	ret

00003120 <__fp_cmp>:
    3120:	99 0f       	add	r25, r25
    3122:	00 08       	sbc	r0, r0
    3124:	55 0f       	add	r21, r21
    3126:	aa 0b       	sbc	r26, r26
    3128:	e0 e8       	ldi	r30, 0x80	; 128
    312a:	fe ef       	ldi	r31, 0xFE	; 254
    312c:	16 16       	cp	r1, r22
    312e:	17 06       	cpc	r1, r23
    3130:	e8 07       	cpc	r30, r24
    3132:	f9 07       	cpc	r31, r25
    3134:	c0 f0       	brcs	.+48     	; 0x3166 <__fp_cmp+0x46>
    3136:	12 16       	cp	r1, r18
    3138:	13 06       	cpc	r1, r19
    313a:	e4 07       	cpc	r30, r20
    313c:	f5 07       	cpc	r31, r21
    313e:	98 f0       	brcs	.+38     	; 0x3166 <__fp_cmp+0x46>
    3140:	62 1b       	sub	r22, r18
    3142:	73 0b       	sbc	r23, r19
    3144:	84 0b       	sbc	r24, r20
    3146:	95 0b       	sbc	r25, r21
    3148:	39 f4       	brne	.+14     	; 0x3158 <__fp_cmp+0x38>
    314a:	0a 26       	eor	r0, r26
    314c:	61 f0       	breq	.+24     	; 0x3166 <__fp_cmp+0x46>
    314e:	23 2b       	or	r18, r19
    3150:	24 2b       	or	r18, r20
    3152:	25 2b       	or	r18, r21
    3154:	21 f4       	brne	.+8      	; 0x315e <__fp_cmp+0x3e>
    3156:	08 95       	ret
    3158:	0a 26       	eor	r0, r26
    315a:	09 f4       	brne	.+2      	; 0x315e <__fp_cmp+0x3e>
    315c:	a1 40       	sbci	r26, 0x01	; 1
    315e:	a6 95       	lsr	r26
    3160:	8f ef       	ldi	r24, 0xFF	; 255
    3162:	81 1d       	adc	r24, r1
    3164:	81 1d       	adc	r24, r1
    3166:	08 95       	ret

00003168 <__fp_inf>:
    3168:	97 f9       	bld	r25, 7
    316a:	9f 67       	ori	r25, 0x7F	; 127
    316c:	80 e8       	ldi	r24, 0x80	; 128
    316e:	70 e0       	ldi	r23, 0x00	; 0
    3170:	60 e0       	ldi	r22, 0x00	; 0
    3172:	08 95       	ret

00003174 <__fp_nan>:
    3174:	9f ef       	ldi	r25, 0xFF	; 255
    3176:	80 ec       	ldi	r24, 0xC0	; 192
    3178:	08 95       	ret

0000317a <__fp_pscA>:
    317a:	00 24       	eor	r0, r0
    317c:	0a 94       	dec	r0
    317e:	16 16       	cp	r1, r22
    3180:	17 06       	cpc	r1, r23
    3182:	18 06       	cpc	r1, r24
    3184:	09 06       	cpc	r0, r25
    3186:	08 95       	ret

00003188 <__fp_pscB>:
    3188:	00 24       	eor	r0, r0
    318a:	0a 94       	dec	r0
    318c:	12 16       	cp	r1, r18
    318e:	13 06       	cpc	r1, r19
    3190:	14 06       	cpc	r1, r20
    3192:	05 06       	cpc	r0, r21
    3194:	08 95       	ret

00003196 <__fp_round>:
    3196:	09 2e       	mov	r0, r25
    3198:	03 94       	inc	r0
    319a:	00 0c       	add	r0, r0
    319c:	11 f4       	brne	.+4      	; 0x31a2 <__fp_round+0xc>
    319e:	88 23       	and	r24, r24
    31a0:	52 f0       	brmi	.+20     	; 0x31b6 <__fp_round+0x20>
    31a2:	bb 0f       	add	r27, r27
    31a4:	40 f4       	brcc	.+16     	; 0x31b6 <__fp_round+0x20>
    31a6:	bf 2b       	or	r27, r31
    31a8:	11 f4       	brne	.+4      	; 0x31ae <__fp_round+0x18>
    31aa:	60 ff       	sbrs	r22, 0
    31ac:	04 c0       	rjmp	.+8      	; 0x31b6 <__fp_round+0x20>
    31ae:	6f 5f       	subi	r22, 0xFF	; 255
    31b0:	7f 4f       	sbci	r23, 0xFF	; 255
    31b2:	8f 4f       	sbci	r24, 0xFF	; 255
    31b4:	9f 4f       	sbci	r25, 0xFF	; 255
    31b6:	08 95       	ret

000031b8 <__fp_split3>:
    31b8:	57 fd       	sbrc	r21, 7
    31ba:	90 58       	subi	r25, 0x80	; 128
    31bc:	44 0f       	add	r20, r20
    31be:	55 1f       	adc	r21, r21
    31c0:	59 f0       	breq	.+22     	; 0x31d8 <__fp_splitA+0x10>
    31c2:	5f 3f       	cpi	r21, 0xFF	; 255
    31c4:	71 f0       	breq	.+28     	; 0x31e2 <__fp_splitA+0x1a>
    31c6:	47 95       	ror	r20

000031c8 <__fp_splitA>:
    31c8:	88 0f       	add	r24, r24
    31ca:	97 fb       	bst	r25, 7
    31cc:	99 1f       	adc	r25, r25
    31ce:	61 f0       	breq	.+24     	; 0x31e8 <__fp_splitA+0x20>
    31d0:	9f 3f       	cpi	r25, 0xFF	; 255
    31d2:	79 f0       	breq	.+30     	; 0x31f2 <__fp_splitA+0x2a>
    31d4:	87 95       	ror	r24
    31d6:	08 95       	ret
    31d8:	12 16       	cp	r1, r18
    31da:	13 06       	cpc	r1, r19
    31dc:	14 06       	cpc	r1, r20
    31de:	55 1f       	adc	r21, r21
    31e0:	f2 cf       	rjmp	.-28     	; 0x31c6 <__fp_split3+0xe>
    31e2:	46 95       	lsr	r20
    31e4:	f1 df       	rcall	.-30     	; 0x31c8 <__fp_splitA>
    31e6:	08 c0       	rjmp	.+16     	; 0x31f8 <__fp_splitA+0x30>
    31e8:	16 16       	cp	r1, r22
    31ea:	17 06       	cpc	r1, r23
    31ec:	18 06       	cpc	r1, r24
    31ee:	99 1f       	adc	r25, r25
    31f0:	f1 cf       	rjmp	.-30     	; 0x31d4 <__fp_splitA+0xc>
    31f2:	86 95       	lsr	r24
    31f4:	71 05       	cpc	r23, r1
    31f6:	61 05       	cpc	r22, r1
    31f8:	08 94       	sec
    31fa:	08 95       	ret

000031fc <__fp_zero>:
    31fc:	e8 94       	clt

000031fe <__fp_szero>:
    31fe:	bb 27       	eor	r27, r27
    3200:	66 27       	eor	r22, r22
    3202:	77 27       	eor	r23, r23
    3204:	cb 01       	movw	r24, r22
    3206:	97 f9       	bld	r25, 7
    3208:	08 95       	ret

0000320a <__gesf2>:
    320a:	0e 94 90 18 	call	0x3120	; 0x3120 <__fp_cmp>
    320e:	08 f4       	brcc	.+2      	; 0x3212 <__gesf2+0x8>
    3210:	8f ef       	ldi	r24, 0xFF	; 255
    3212:	08 95       	ret

00003214 <__mulsf3>:
    3214:	0e 94 1d 19 	call	0x323a	; 0x323a <__mulsf3x>
    3218:	0c 94 cb 18 	jmp	0x3196	; 0x3196 <__fp_round>
    321c:	0e 94 bd 18 	call	0x317a	; 0x317a <__fp_pscA>
    3220:	38 f0       	brcs	.+14     	; 0x3230 <__mulsf3+0x1c>
    3222:	0e 94 c4 18 	call	0x3188	; 0x3188 <__fp_pscB>
    3226:	20 f0       	brcs	.+8      	; 0x3230 <__mulsf3+0x1c>
    3228:	95 23       	and	r25, r21
    322a:	11 f0       	breq	.+4      	; 0x3230 <__mulsf3+0x1c>
    322c:	0c 94 b4 18 	jmp	0x3168	; 0x3168 <__fp_inf>
    3230:	0c 94 ba 18 	jmp	0x3174	; 0x3174 <__fp_nan>
    3234:	11 24       	eor	r1, r1
    3236:	0c 94 ff 18 	jmp	0x31fe	; 0x31fe <__fp_szero>

0000323a <__mulsf3x>:
    323a:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__fp_split3>
    323e:	70 f3       	brcs	.-36     	; 0x321c <__mulsf3+0x8>

00003240 <__mulsf3_pse>:
    3240:	95 9f       	mul	r25, r21
    3242:	c1 f3       	breq	.-16     	; 0x3234 <__mulsf3+0x20>
    3244:	95 0f       	add	r25, r21
    3246:	50 e0       	ldi	r21, 0x00	; 0
    3248:	55 1f       	adc	r21, r21
    324a:	62 9f       	mul	r22, r18
    324c:	f0 01       	movw	r30, r0
    324e:	72 9f       	mul	r23, r18
    3250:	bb 27       	eor	r27, r27
    3252:	f0 0d       	add	r31, r0
    3254:	b1 1d       	adc	r27, r1
    3256:	63 9f       	mul	r22, r19
    3258:	aa 27       	eor	r26, r26
    325a:	f0 0d       	add	r31, r0
    325c:	b1 1d       	adc	r27, r1
    325e:	aa 1f       	adc	r26, r26
    3260:	64 9f       	mul	r22, r20
    3262:	66 27       	eor	r22, r22
    3264:	b0 0d       	add	r27, r0
    3266:	a1 1d       	adc	r26, r1
    3268:	66 1f       	adc	r22, r22
    326a:	82 9f       	mul	r24, r18
    326c:	22 27       	eor	r18, r18
    326e:	b0 0d       	add	r27, r0
    3270:	a1 1d       	adc	r26, r1
    3272:	62 1f       	adc	r22, r18
    3274:	73 9f       	mul	r23, r19
    3276:	b0 0d       	add	r27, r0
    3278:	a1 1d       	adc	r26, r1
    327a:	62 1f       	adc	r22, r18
    327c:	83 9f       	mul	r24, r19
    327e:	a0 0d       	add	r26, r0
    3280:	61 1d       	adc	r22, r1
    3282:	22 1f       	adc	r18, r18
    3284:	74 9f       	mul	r23, r20
    3286:	33 27       	eor	r19, r19
    3288:	a0 0d       	add	r26, r0
    328a:	61 1d       	adc	r22, r1
    328c:	23 1f       	adc	r18, r19
    328e:	84 9f       	mul	r24, r20
    3290:	60 0d       	add	r22, r0
    3292:	21 1d       	adc	r18, r1
    3294:	82 2f       	mov	r24, r18
    3296:	76 2f       	mov	r23, r22
    3298:	6a 2f       	mov	r22, r26
    329a:	11 24       	eor	r1, r1
    329c:	9f 57       	subi	r25, 0x7F	; 127
    329e:	50 40       	sbci	r21, 0x00	; 0
    32a0:	9a f0       	brmi	.+38     	; 0x32c8 <__mulsf3_pse+0x88>
    32a2:	f1 f0       	breq	.+60     	; 0x32e0 <__mulsf3_pse+0xa0>
    32a4:	88 23       	and	r24, r24
    32a6:	4a f0       	brmi	.+18     	; 0x32ba <__mulsf3_pse+0x7a>
    32a8:	ee 0f       	add	r30, r30
    32aa:	ff 1f       	adc	r31, r31
    32ac:	bb 1f       	adc	r27, r27
    32ae:	66 1f       	adc	r22, r22
    32b0:	77 1f       	adc	r23, r23
    32b2:	88 1f       	adc	r24, r24
    32b4:	91 50       	subi	r25, 0x01	; 1
    32b6:	50 40       	sbci	r21, 0x00	; 0
    32b8:	a9 f7       	brne	.-22     	; 0x32a4 <__mulsf3_pse+0x64>
    32ba:	9e 3f       	cpi	r25, 0xFE	; 254
    32bc:	51 05       	cpc	r21, r1
    32be:	80 f0       	brcs	.+32     	; 0x32e0 <__mulsf3_pse+0xa0>
    32c0:	0c 94 b4 18 	jmp	0x3168	; 0x3168 <__fp_inf>
    32c4:	0c 94 ff 18 	jmp	0x31fe	; 0x31fe <__fp_szero>
    32c8:	5f 3f       	cpi	r21, 0xFF	; 255
    32ca:	e4 f3       	brlt	.-8      	; 0x32c4 <__mulsf3_pse+0x84>
    32cc:	98 3e       	cpi	r25, 0xE8	; 232
    32ce:	d4 f3       	brlt	.-12     	; 0x32c4 <__mulsf3_pse+0x84>
    32d0:	86 95       	lsr	r24
    32d2:	77 95       	ror	r23
    32d4:	67 95       	ror	r22
    32d6:	b7 95       	ror	r27
    32d8:	f7 95       	ror	r31
    32da:	e7 95       	ror	r30
    32dc:	9f 5f       	subi	r25, 0xFF	; 255
    32de:	c1 f7       	brne	.-16     	; 0x32d0 <__mulsf3_pse+0x90>
    32e0:	fe 2b       	or	r31, r30
    32e2:	88 0f       	add	r24, r24
    32e4:	91 1d       	adc	r25, r1
    32e6:	96 95       	lsr	r25
    32e8:	87 95       	ror	r24
    32ea:	97 f9       	bld	r25, 7
    32ec:	08 95       	ret

000032ee <sin>:
    32ee:	9f 93       	push	r25
    32f0:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <__fp_rempio2>
    32f4:	0f 90       	pop	r0
    32f6:	07 fc       	sbrc	r0, 7
    32f8:	ee 5f       	subi	r30, 0xFE	; 254
    32fa:	0c 94 05 1a 	jmp	0x340a	; 0x340a <__fp_sinus>
    32fe:	19 f4       	brne	.+6      	; 0x3306 <sin+0x18>
    3300:	16 f4       	brtc	.+4      	; 0x3306 <sin+0x18>
    3302:	0c 94 ba 18 	jmp	0x3174	; 0x3174 <__fp_nan>
    3306:	0c 94 c5 19 	jmp	0x338a	; 0x338a <__fp_mpack>

0000330a <sqrt>:
    330a:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <__fp_splitA>
    330e:	b8 f3       	brcs	.-18     	; 0x32fe <sin+0x10>
    3310:	99 23       	and	r25, r25
    3312:	c9 f3       	breq	.-14     	; 0x3306 <sin+0x18>
    3314:	b6 f3       	brts	.-20     	; 0x3302 <sin+0x14>
    3316:	9f 57       	subi	r25, 0x7F	; 127
    3318:	55 0b       	sbc	r21, r21
    331a:	87 ff       	sbrs	r24, 7
    331c:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <__fp_norm2>
    3320:	00 24       	eor	r0, r0
    3322:	a0 e6       	ldi	r26, 0x60	; 96
    3324:	40 ea       	ldi	r20, 0xA0	; 160
    3326:	90 01       	movw	r18, r0
    3328:	80 58       	subi	r24, 0x80	; 128
    332a:	56 95       	lsr	r21
    332c:	97 95       	ror	r25
    332e:	28 f4       	brcc	.+10     	; 0x333a <sqrt+0x30>
    3330:	80 5c       	subi	r24, 0xC0	; 192
    3332:	66 0f       	add	r22, r22
    3334:	77 1f       	adc	r23, r23
    3336:	88 1f       	adc	r24, r24
    3338:	20 f0       	brcs	.+8      	; 0x3342 <sqrt+0x38>
    333a:	26 17       	cp	r18, r22
    333c:	37 07       	cpc	r19, r23
    333e:	48 07       	cpc	r20, r24
    3340:	30 f4       	brcc	.+12     	; 0x334e <sqrt+0x44>
    3342:	62 1b       	sub	r22, r18
    3344:	73 0b       	sbc	r23, r19
    3346:	84 0b       	sbc	r24, r20
    3348:	20 29       	or	r18, r0
    334a:	31 29       	or	r19, r1
    334c:	4a 2b       	or	r20, r26
    334e:	a6 95       	lsr	r26
    3350:	17 94       	ror	r1
    3352:	07 94       	ror	r0
    3354:	20 25       	eor	r18, r0
    3356:	31 25       	eor	r19, r1
    3358:	4a 27       	eor	r20, r26
    335a:	58 f7       	brcc	.-42     	; 0x3332 <sqrt+0x28>
    335c:	66 0f       	add	r22, r22
    335e:	77 1f       	adc	r23, r23
    3360:	88 1f       	adc	r24, r24
    3362:	20 f0       	brcs	.+8      	; 0x336c <sqrt+0x62>
    3364:	26 17       	cp	r18, r22
    3366:	37 07       	cpc	r19, r23
    3368:	48 07       	cpc	r20, r24
    336a:	30 f4       	brcc	.+12     	; 0x3378 <sqrt+0x6e>
    336c:	62 0b       	sbc	r22, r18
    336e:	73 0b       	sbc	r23, r19
    3370:	84 0b       	sbc	r24, r20
    3372:	20 0d       	add	r18, r0
    3374:	31 1d       	adc	r19, r1
    3376:	41 1d       	adc	r20, r1
    3378:	a0 95       	com	r26
    337a:	81 f7       	brne	.-32     	; 0x335c <sqrt+0x52>
    337c:	b9 01       	movw	r22, r18
    337e:	84 2f       	mov	r24, r20
    3380:	91 58       	subi	r25, 0x81	; 129
    3382:	88 0f       	add	r24, r24
    3384:	96 95       	lsr	r25
    3386:	87 95       	ror	r24
    3388:	08 95       	ret

0000338a <__fp_mpack>:
    338a:	9f 3f       	cpi	r25, 0xFF	; 255
    338c:	31 f0       	breq	.+12     	; 0x339a <__fp_mpack_finite+0xc>

0000338e <__fp_mpack_finite>:
    338e:	91 50       	subi	r25, 0x01	; 1
    3390:	20 f4       	brcc	.+8      	; 0x339a <__fp_mpack_finite+0xc>
    3392:	87 95       	ror	r24
    3394:	77 95       	ror	r23
    3396:	67 95       	ror	r22
    3398:	b7 95       	ror	r27
    339a:	88 0f       	add	r24, r24
    339c:	91 1d       	adc	r25, r1
    339e:	96 95       	lsr	r25
    33a0:	87 95       	ror	r24
    33a2:	97 f9       	bld	r25, 7
    33a4:	08 95       	ret

000033a6 <__fp_norm2>:
    33a6:	91 50       	subi	r25, 0x01	; 1
    33a8:	50 40       	sbci	r21, 0x00	; 0
    33aa:	66 0f       	add	r22, r22
    33ac:	77 1f       	adc	r23, r23
    33ae:	88 1f       	adc	r24, r24
    33b0:	d2 f7       	brpl	.-12     	; 0x33a6 <__fp_norm2>
    33b2:	08 95       	ret
    33b4:	0c 94 ba 18 	jmp	0x3174	; 0x3174 <__fp_nan>

000033b8 <__fp_rempio2>:
    33b8:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <__fp_splitA>
    33bc:	d8 f3       	brcs	.-10     	; 0x33b4 <__fp_norm2+0xe>
    33be:	e8 94       	clt
    33c0:	e0 e0       	ldi	r30, 0x00	; 0
    33c2:	bb 27       	eor	r27, r27
    33c4:	9f 57       	subi	r25, 0x7F	; 127
    33c6:	f0 f0       	brcs	.+60     	; 0x3404 <__fp_rempio2+0x4c>
    33c8:	2a ed       	ldi	r18, 0xDA	; 218
    33ca:	3f e0       	ldi	r19, 0x0F	; 15
    33cc:	49 ec       	ldi	r20, 0xC9	; 201
    33ce:	06 c0       	rjmp	.+12     	; 0x33dc <__fp_rempio2+0x24>
    33d0:	ee 0f       	add	r30, r30
    33d2:	bb 0f       	add	r27, r27
    33d4:	66 1f       	adc	r22, r22
    33d6:	77 1f       	adc	r23, r23
    33d8:	88 1f       	adc	r24, r24
    33da:	28 f0       	brcs	.+10     	; 0x33e6 <__fp_rempio2+0x2e>
    33dc:	b2 3a       	cpi	r27, 0xA2	; 162
    33de:	62 07       	cpc	r22, r18
    33e0:	73 07       	cpc	r23, r19
    33e2:	84 07       	cpc	r24, r20
    33e4:	28 f0       	brcs	.+10     	; 0x33f0 <__fp_rempio2+0x38>
    33e6:	b2 5a       	subi	r27, 0xA2	; 162
    33e8:	62 0b       	sbc	r22, r18
    33ea:	73 0b       	sbc	r23, r19
    33ec:	84 0b       	sbc	r24, r20
    33ee:	e3 95       	inc	r30
    33f0:	9a 95       	dec	r25
    33f2:	72 f7       	brpl	.-36     	; 0x33d0 <__fp_rempio2+0x18>
    33f4:	80 38       	cpi	r24, 0x80	; 128
    33f6:	30 f4       	brcc	.+12     	; 0x3404 <__fp_rempio2+0x4c>
    33f8:	9a 95       	dec	r25
    33fa:	bb 0f       	add	r27, r27
    33fc:	66 1f       	adc	r22, r22
    33fe:	77 1f       	adc	r23, r23
    3400:	88 1f       	adc	r24, r24
    3402:	d2 f7       	brpl	.-12     	; 0x33f8 <__fp_rempio2+0x40>
    3404:	90 48       	sbci	r25, 0x80	; 128
    3406:	0c 94 c7 19 	jmp	0x338e	; 0x338e <__fp_mpack_finite>

0000340a <__fp_sinus>:
    340a:	ef 93       	push	r30
    340c:	e0 ff       	sbrs	r30, 0
    340e:	07 c0       	rjmp	.+14     	; 0x341e <__fp_sinus+0x14>
    3410:	a2 ea       	ldi	r26, 0xA2	; 162
    3412:	2a ed       	ldi	r18, 0xDA	; 218
    3414:	3f e0       	ldi	r19, 0x0F	; 15
    3416:	49 ec       	ldi	r20, 0xC9	; 201
    3418:	5f eb       	ldi	r21, 0xBF	; 191
    341a:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <__addsf3x>
    341e:	0e 94 cb 18 	call	0x3196	; 0x3196 <__fp_round>
    3422:	0f 90       	pop	r0
    3424:	03 94       	inc	r0
    3426:	01 fc       	sbrc	r0, 1
    3428:	90 58       	subi	r25, 0x80	; 128
    342a:	e8 e6       	ldi	r30, 0x68	; 104
    342c:	f0 e0       	ldi	r31, 0x00	; 0
    342e:	0c 94 19 1a 	jmp	0x3432	; 0x3432 <__fp_powsodd>

00003432 <__fp_powsodd>:
    3432:	9f 93       	push	r25
    3434:	8f 93       	push	r24
    3436:	7f 93       	push	r23
    3438:	6f 93       	push	r22
    343a:	ff 93       	push	r31
    343c:	ef 93       	push	r30
    343e:	9b 01       	movw	r18, r22
    3440:	ac 01       	movw	r20, r24
    3442:	0e 94 0a 19 	call	0x3214	; 0x3214 <__mulsf3>
    3446:	ef 91       	pop	r30
    3448:	ff 91       	pop	r31
    344a:	0e 94 2d 1a 	call	0x345a	; 0x345a <__fp_powser>
    344e:	2f 91       	pop	r18
    3450:	3f 91       	pop	r19
    3452:	4f 91       	pop	r20
    3454:	5f 91       	pop	r21
    3456:	0c 94 0a 19 	jmp	0x3214	; 0x3214 <__mulsf3>

0000345a <__fp_powser>:
    345a:	df 93       	push	r29
    345c:	cf 93       	push	r28
    345e:	1f 93       	push	r17
    3460:	0f 93       	push	r16
    3462:	ff 92       	push	r15
    3464:	ef 92       	push	r14
    3466:	df 92       	push	r13
    3468:	7b 01       	movw	r14, r22
    346a:	8c 01       	movw	r16, r24
    346c:	68 94       	set
    346e:	06 c0       	rjmp	.+12     	; 0x347c <__fp_powser+0x22>
    3470:	da 2e       	mov	r13, r26
    3472:	ef 01       	movw	r28, r30
    3474:	0e 94 1d 19 	call	0x323a	; 0x323a <__mulsf3x>
    3478:	fe 01       	movw	r30, r28
    347a:	e8 94       	clt
    347c:	a5 91       	lpm	r26, Z+
    347e:	25 91       	lpm	r18, Z+
    3480:	35 91       	lpm	r19, Z+
    3482:	45 91       	lpm	r20, Z+
    3484:	55 91       	lpm	r21, Z+
    3486:	a6 f3       	brts	.-24     	; 0x3470 <__fp_powser+0x16>
    3488:	ef 01       	movw	r28, r30
    348a:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <__addsf3x>
    348e:	fe 01       	movw	r30, r28
    3490:	97 01       	movw	r18, r14
    3492:	a8 01       	movw	r20, r16
    3494:	da 94       	dec	r13
    3496:	69 f7       	brne	.-38     	; 0x3472 <__fp_powser+0x18>
    3498:	df 90       	pop	r13
    349a:	ef 90       	pop	r14
    349c:	ff 90       	pop	r15
    349e:	0f 91       	pop	r16
    34a0:	1f 91       	pop	r17
    34a2:	cf 91       	pop	r28
    34a4:	df 91       	pop	r29
    34a6:	08 95       	ret

000034a8 <malloc>:
    34a8:	0f 93       	push	r16
    34aa:	1f 93       	push	r17
    34ac:	cf 93       	push	r28
    34ae:	df 93       	push	r29
    34b0:	82 30       	cpi	r24, 0x02	; 2
    34b2:	91 05       	cpc	r25, r1
    34b4:	10 f4       	brcc	.+4      	; 0x34ba <malloc+0x12>
    34b6:	82 e0       	ldi	r24, 0x02	; 2
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	e0 91 69 02 	lds	r30, 0x0269	; 0x800269 <__flp>
    34be:	f0 91 6a 02 	lds	r31, 0x026A	; 0x80026a <__flp+0x1>
    34c2:	20 e0       	ldi	r18, 0x00	; 0
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	a0 e0       	ldi	r26, 0x00	; 0
    34c8:	b0 e0       	ldi	r27, 0x00	; 0
    34ca:	30 97       	sbiw	r30, 0x00	; 0
    34cc:	19 f1       	breq	.+70     	; 0x3514 <malloc+0x6c>
    34ce:	40 81       	ld	r20, Z
    34d0:	51 81       	ldd	r21, Z+1	; 0x01
    34d2:	02 81       	ldd	r16, Z+2	; 0x02
    34d4:	13 81       	ldd	r17, Z+3	; 0x03
    34d6:	48 17       	cp	r20, r24
    34d8:	59 07       	cpc	r21, r25
    34da:	c8 f0       	brcs	.+50     	; 0x350e <malloc+0x66>
    34dc:	84 17       	cp	r24, r20
    34de:	95 07       	cpc	r25, r21
    34e0:	69 f4       	brne	.+26     	; 0x34fc <malloc+0x54>
    34e2:	10 97       	sbiw	r26, 0x00	; 0
    34e4:	31 f0       	breq	.+12     	; 0x34f2 <malloc+0x4a>
    34e6:	12 96       	adiw	r26, 0x02	; 2
    34e8:	0c 93       	st	X, r16
    34ea:	12 97       	sbiw	r26, 0x02	; 2
    34ec:	13 96       	adiw	r26, 0x03	; 3
    34ee:	1c 93       	st	X, r17
    34f0:	27 c0       	rjmp	.+78     	; 0x3540 <malloc+0x98>
    34f2:	00 93 69 02 	sts	0x0269, r16	; 0x800269 <__flp>
    34f6:	10 93 6a 02 	sts	0x026A, r17	; 0x80026a <__flp+0x1>
    34fa:	22 c0       	rjmp	.+68     	; 0x3540 <malloc+0x98>
    34fc:	21 15       	cp	r18, r1
    34fe:	31 05       	cpc	r19, r1
    3500:	19 f0       	breq	.+6      	; 0x3508 <malloc+0x60>
    3502:	42 17       	cp	r20, r18
    3504:	53 07       	cpc	r21, r19
    3506:	18 f4       	brcc	.+6      	; 0x350e <malloc+0x66>
    3508:	9a 01       	movw	r18, r20
    350a:	bd 01       	movw	r22, r26
    350c:	ef 01       	movw	r28, r30
    350e:	df 01       	movw	r26, r30
    3510:	f8 01       	movw	r30, r16
    3512:	db cf       	rjmp	.-74     	; 0x34ca <malloc+0x22>
    3514:	21 15       	cp	r18, r1
    3516:	31 05       	cpc	r19, r1
    3518:	f9 f0       	breq	.+62     	; 0x3558 <malloc+0xb0>
    351a:	28 1b       	sub	r18, r24
    351c:	39 0b       	sbc	r19, r25
    351e:	24 30       	cpi	r18, 0x04	; 4
    3520:	31 05       	cpc	r19, r1
    3522:	80 f4       	brcc	.+32     	; 0x3544 <malloc+0x9c>
    3524:	8a 81       	ldd	r24, Y+2	; 0x02
    3526:	9b 81       	ldd	r25, Y+3	; 0x03
    3528:	61 15       	cp	r22, r1
    352a:	71 05       	cpc	r23, r1
    352c:	21 f0       	breq	.+8      	; 0x3536 <malloc+0x8e>
    352e:	fb 01       	movw	r30, r22
    3530:	93 83       	std	Z+3, r25	; 0x03
    3532:	82 83       	std	Z+2, r24	; 0x02
    3534:	04 c0       	rjmp	.+8      	; 0x353e <malloc+0x96>
    3536:	90 93 6a 02 	sts	0x026A, r25	; 0x80026a <__flp+0x1>
    353a:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <__flp>
    353e:	fe 01       	movw	r30, r28
    3540:	32 96       	adiw	r30, 0x02	; 2
    3542:	44 c0       	rjmp	.+136    	; 0x35cc <malloc+0x124>
    3544:	fe 01       	movw	r30, r28
    3546:	e2 0f       	add	r30, r18
    3548:	f3 1f       	adc	r31, r19
    354a:	81 93       	st	Z+, r24
    354c:	91 93       	st	Z+, r25
    354e:	22 50       	subi	r18, 0x02	; 2
    3550:	31 09       	sbc	r19, r1
    3552:	39 83       	std	Y+1, r19	; 0x01
    3554:	28 83       	st	Y, r18
    3556:	3a c0       	rjmp	.+116    	; 0x35cc <malloc+0x124>
    3558:	20 91 67 02 	lds	r18, 0x0267	; 0x800267 <__brkval>
    355c:	30 91 68 02 	lds	r19, 0x0268	; 0x800268 <__brkval+0x1>
    3560:	23 2b       	or	r18, r19
    3562:	41 f4       	brne	.+16     	; 0x3574 <malloc+0xcc>
    3564:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__malloc_heap_start>
    3568:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__malloc_heap_start+0x1>
    356c:	30 93 68 02 	sts	0x0268, r19	; 0x800268 <__brkval+0x1>
    3570:	20 93 67 02 	sts	0x0267, r18	; 0x800267 <__brkval>
    3574:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__malloc_heap_end>
    3578:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__malloc_heap_end+0x1>
    357c:	21 15       	cp	r18, r1
    357e:	31 05       	cpc	r19, r1
    3580:	41 f4       	brne	.+16     	; 0x3592 <malloc+0xea>
    3582:	2d b7       	in	r18, 0x3d	; 61
    3584:	3e b7       	in	r19, 0x3e	; 62
    3586:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__malloc_margin>
    358a:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__malloc_margin+0x1>
    358e:	24 1b       	sub	r18, r20
    3590:	35 0b       	sbc	r19, r21
    3592:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <__brkval>
    3596:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <__brkval+0x1>
    359a:	e2 17       	cp	r30, r18
    359c:	f3 07       	cpc	r31, r19
    359e:	a0 f4       	brcc	.+40     	; 0x35c8 <malloc+0x120>
    35a0:	2e 1b       	sub	r18, r30
    35a2:	3f 0b       	sbc	r19, r31
    35a4:	28 17       	cp	r18, r24
    35a6:	39 07       	cpc	r19, r25
    35a8:	78 f0       	brcs	.+30     	; 0x35c8 <malloc+0x120>
    35aa:	ac 01       	movw	r20, r24
    35ac:	4e 5f       	subi	r20, 0xFE	; 254
    35ae:	5f 4f       	sbci	r21, 0xFF	; 255
    35b0:	24 17       	cp	r18, r20
    35b2:	35 07       	cpc	r19, r21
    35b4:	48 f0       	brcs	.+18     	; 0x35c8 <malloc+0x120>
    35b6:	4e 0f       	add	r20, r30
    35b8:	5f 1f       	adc	r21, r31
    35ba:	50 93 68 02 	sts	0x0268, r21	; 0x800268 <__brkval+0x1>
    35be:	40 93 67 02 	sts	0x0267, r20	; 0x800267 <__brkval>
    35c2:	81 93       	st	Z+, r24
    35c4:	91 93       	st	Z+, r25
    35c6:	02 c0       	rjmp	.+4      	; 0x35cc <malloc+0x124>
    35c8:	e0 e0       	ldi	r30, 0x00	; 0
    35ca:	f0 e0       	ldi	r31, 0x00	; 0
    35cc:	cf 01       	movw	r24, r30
    35ce:	df 91       	pop	r29
    35d0:	cf 91       	pop	r28
    35d2:	1f 91       	pop	r17
    35d4:	0f 91       	pop	r16
    35d6:	08 95       	ret

000035d8 <free>:
    35d8:	cf 93       	push	r28
    35da:	df 93       	push	r29
    35dc:	00 97       	sbiw	r24, 0x00	; 0
    35de:	09 f4       	brne	.+2      	; 0x35e2 <free+0xa>
    35e0:	81 c0       	rjmp	.+258    	; 0x36e4 <free+0x10c>
    35e2:	fc 01       	movw	r30, r24
    35e4:	32 97       	sbiw	r30, 0x02	; 2
    35e6:	13 82       	std	Z+3, r1	; 0x03
    35e8:	12 82       	std	Z+2, r1	; 0x02
    35ea:	a0 91 69 02 	lds	r26, 0x0269	; 0x800269 <__flp>
    35ee:	b0 91 6a 02 	lds	r27, 0x026A	; 0x80026a <__flp+0x1>
    35f2:	10 97       	sbiw	r26, 0x00	; 0
    35f4:	81 f4       	brne	.+32     	; 0x3616 <free+0x3e>
    35f6:	20 81       	ld	r18, Z
    35f8:	31 81       	ldd	r19, Z+1	; 0x01
    35fa:	82 0f       	add	r24, r18
    35fc:	93 1f       	adc	r25, r19
    35fe:	20 91 67 02 	lds	r18, 0x0267	; 0x800267 <__brkval>
    3602:	30 91 68 02 	lds	r19, 0x0268	; 0x800268 <__brkval+0x1>
    3606:	28 17       	cp	r18, r24
    3608:	39 07       	cpc	r19, r25
    360a:	51 f5       	brne	.+84     	; 0x3660 <free+0x88>
    360c:	f0 93 68 02 	sts	0x0268, r31	; 0x800268 <__brkval+0x1>
    3610:	e0 93 67 02 	sts	0x0267, r30	; 0x800267 <__brkval>
    3614:	67 c0       	rjmp	.+206    	; 0x36e4 <free+0x10c>
    3616:	ed 01       	movw	r28, r26
    3618:	20 e0       	ldi	r18, 0x00	; 0
    361a:	30 e0       	ldi	r19, 0x00	; 0
    361c:	ce 17       	cp	r28, r30
    361e:	df 07       	cpc	r29, r31
    3620:	40 f4       	brcc	.+16     	; 0x3632 <free+0x5a>
    3622:	4a 81       	ldd	r20, Y+2	; 0x02
    3624:	5b 81       	ldd	r21, Y+3	; 0x03
    3626:	9e 01       	movw	r18, r28
    3628:	41 15       	cp	r20, r1
    362a:	51 05       	cpc	r21, r1
    362c:	f1 f0       	breq	.+60     	; 0x366a <free+0x92>
    362e:	ea 01       	movw	r28, r20
    3630:	f5 cf       	rjmp	.-22     	; 0x361c <free+0x44>
    3632:	d3 83       	std	Z+3, r29	; 0x03
    3634:	c2 83       	std	Z+2, r28	; 0x02
    3636:	40 81       	ld	r20, Z
    3638:	51 81       	ldd	r21, Z+1	; 0x01
    363a:	84 0f       	add	r24, r20
    363c:	95 1f       	adc	r25, r21
    363e:	c8 17       	cp	r28, r24
    3640:	d9 07       	cpc	r29, r25
    3642:	59 f4       	brne	.+22     	; 0x365a <free+0x82>
    3644:	88 81       	ld	r24, Y
    3646:	99 81       	ldd	r25, Y+1	; 0x01
    3648:	84 0f       	add	r24, r20
    364a:	95 1f       	adc	r25, r21
    364c:	02 96       	adiw	r24, 0x02	; 2
    364e:	91 83       	std	Z+1, r25	; 0x01
    3650:	80 83       	st	Z, r24
    3652:	8a 81       	ldd	r24, Y+2	; 0x02
    3654:	9b 81       	ldd	r25, Y+3	; 0x03
    3656:	93 83       	std	Z+3, r25	; 0x03
    3658:	82 83       	std	Z+2, r24	; 0x02
    365a:	21 15       	cp	r18, r1
    365c:	31 05       	cpc	r19, r1
    365e:	29 f4       	brne	.+10     	; 0x366a <free+0x92>
    3660:	f0 93 6a 02 	sts	0x026A, r31	; 0x80026a <__flp+0x1>
    3664:	e0 93 69 02 	sts	0x0269, r30	; 0x800269 <__flp>
    3668:	3d c0       	rjmp	.+122    	; 0x36e4 <free+0x10c>
    366a:	e9 01       	movw	r28, r18
    366c:	fb 83       	std	Y+3, r31	; 0x03
    366e:	ea 83       	std	Y+2, r30	; 0x02
    3670:	49 91       	ld	r20, Y+
    3672:	59 91       	ld	r21, Y+
    3674:	c4 0f       	add	r28, r20
    3676:	d5 1f       	adc	r29, r21
    3678:	ec 17       	cp	r30, r28
    367a:	fd 07       	cpc	r31, r29
    367c:	61 f4       	brne	.+24     	; 0x3696 <free+0xbe>
    367e:	80 81       	ld	r24, Z
    3680:	91 81       	ldd	r25, Z+1	; 0x01
    3682:	84 0f       	add	r24, r20
    3684:	95 1f       	adc	r25, r21
    3686:	02 96       	adiw	r24, 0x02	; 2
    3688:	e9 01       	movw	r28, r18
    368a:	99 83       	std	Y+1, r25	; 0x01
    368c:	88 83       	st	Y, r24
    368e:	82 81       	ldd	r24, Z+2	; 0x02
    3690:	93 81       	ldd	r25, Z+3	; 0x03
    3692:	9b 83       	std	Y+3, r25	; 0x03
    3694:	8a 83       	std	Y+2, r24	; 0x02
    3696:	e0 e0       	ldi	r30, 0x00	; 0
    3698:	f0 e0       	ldi	r31, 0x00	; 0
    369a:	12 96       	adiw	r26, 0x02	; 2
    369c:	8d 91       	ld	r24, X+
    369e:	9c 91       	ld	r25, X
    36a0:	13 97       	sbiw	r26, 0x03	; 3
    36a2:	00 97       	sbiw	r24, 0x00	; 0
    36a4:	19 f0       	breq	.+6      	; 0x36ac <free+0xd4>
    36a6:	fd 01       	movw	r30, r26
    36a8:	dc 01       	movw	r26, r24
    36aa:	f7 cf       	rjmp	.-18     	; 0x369a <free+0xc2>
    36ac:	8d 91       	ld	r24, X+
    36ae:	9c 91       	ld	r25, X
    36b0:	11 97       	sbiw	r26, 0x01	; 1
    36b2:	9d 01       	movw	r18, r26
    36b4:	2e 5f       	subi	r18, 0xFE	; 254
    36b6:	3f 4f       	sbci	r19, 0xFF	; 255
    36b8:	82 0f       	add	r24, r18
    36ba:	93 1f       	adc	r25, r19
    36bc:	20 91 67 02 	lds	r18, 0x0267	; 0x800267 <__brkval>
    36c0:	30 91 68 02 	lds	r19, 0x0268	; 0x800268 <__brkval+0x1>
    36c4:	28 17       	cp	r18, r24
    36c6:	39 07       	cpc	r19, r25
    36c8:	69 f4       	brne	.+26     	; 0x36e4 <free+0x10c>
    36ca:	30 97       	sbiw	r30, 0x00	; 0
    36cc:	29 f4       	brne	.+10     	; 0x36d8 <free+0x100>
    36ce:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <__flp+0x1>
    36d2:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <__flp>
    36d6:	02 c0       	rjmp	.+4      	; 0x36dc <free+0x104>
    36d8:	13 82       	std	Z+3, r1	; 0x03
    36da:	12 82       	std	Z+2, r1	; 0x02
    36dc:	b0 93 68 02 	sts	0x0268, r27	; 0x800268 <__brkval+0x1>
    36e0:	a0 93 67 02 	sts	0x0267, r26	; 0x800267 <__brkval>
    36e4:	df 91       	pop	r29
    36e6:	cf 91       	pop	r28
    36e8:	08 95       	ret

000036ea <__do_global_dtors>:
    36ea:	10 e0       	ldi	r17, 0x00	; 0
    36ec:	cc e5       	ldi	r28, 0x5C	; 92
    36ee:	d0 e0       	ldi	r29, 0x00	; 0
    36f0:	04 c0       	rjmp	.+8      	; 0x36fa <__do_global_dtors+0x10>
    36f2:	fe 01       	movw	r30, r28
    36f4:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <__tablejump2__>
    36f8:	21 96       	adiw	r28, 0x01	; 1
    36fa:	cd 35       	cpi	r28, 0x5D	; 93
    36fc:	d1 07       	cpc	r29, r17
    36fe:	c9 f7       	brne	.-14     	; 0x36f2 <__do_global_dtors+0x8>
    3700:	f8 94       	cli

00003702 <__stop_program>:
    3702:	ff cf       	rjmp	.-2      	; 0x3702 <__stop_program>
