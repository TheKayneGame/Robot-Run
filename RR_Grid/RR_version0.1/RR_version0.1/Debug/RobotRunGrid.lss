
RobotRunGrid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000094  00800100  000035dc  00003670  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000035dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e8  00800194  00800194  00003704  2**0
                  ALLOC
  3 .stab         000074b8  00000000  00000000  00003704  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000a086  00000000  00000000  0000abbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  00014c42  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00014c84  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000110  00000000  00000000  00014cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002407  00000000  00000000  00014dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000cfe  00000000  00000000  000171db  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001705  00000000  00000000  00017ed9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000348  00000000  00000000  000195e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000008b0  00000000  00000000  00019928  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000012ea  00000000  00000000  0001a1d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000d0  00000000  00000000  0001b4c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__dtors_end>
       4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      24:	0c 94 13 13 	jmp	0x2626	; 0x2626 <__vector_9>
      28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      34:	0c 94 75 0f 	jmp	0x1eea	; 0x1eea <__vector_13>
      38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      48:	0c 94 8b 12 	jmp	0x2516	; 0x2516 <__vector_18>
      4c:	0c 94 ee 12 	jmp	0x25dc	; 0x25dc <__vector_19>
      50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      68:	05 a8       	ldd	r0, Z+53	; 0x35
      6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
      6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <__stack+0xd3>
      6e:	4e b9       	out	0x0e, r20	; 14
      70:	38 36       	cpi	r19, 0x68	; 104
      72:	a9 02       	muls	r26, r25
      74:	0c 50       	subi	r16, 0x0C	; 12
      76:	b9 91       	ld	r27, Y+
      78:	86 88       	ldd	r8, Z+22	; 0x16
      7a:	08 3c       	cpi	r16, 0xC8	; 200
      7c:	a6 aa       	std	Z+54, r10	; 0x36
      7e:	aa 2a       	or	r10, r26
      80:	be 00       	.word	0x00be	; ????
      82:	00 00       	nop
      84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__trampolines_end>:
      86:	3e 66       	ori	r19, 0x6E	; 110
      88:	33 32       	cpi	r19, 0x23	; 35
      8a:	3e 3e       	cpi	r19, 0xEE	; 238
      8c:	61 33       	cpi	r22, 0x31	; 49
      8e:	32 00       	.word	0x0032	; ????

00000090 <__ctors_end>:
      90:	f4 13       	cpse	r31, r20

00000092 <__dtors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf ef       	ldi	r28, 0xFF	; 255
      98:	d8 e0       	ldi	r29, 0x08	; 8
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
      9e:	11 e0       	ldi	r17, 0x01	; 1
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	ec ed       	ldi	r30, 0xDC	; 220
      a6:	f5 e3       	ldi	r31, 0x35	; 53
      a8:	02 c0       	rjmp	.+4      	; 0xae <__do_copy_data+0x10>
      aa:	05 90       	lpm	r0, Z+
      ac:	0d 92       	st	X+, r0
      ae:	a4 39       	cpi	r26, 0x94	; 148
      b0:	b1 07       	cpc	r27, r17
      b2:	d9 f7       	brne	.-10     	; 0xaa <__do_copy_data+0xc>

000000b4 <__do_clear_bss>:
      b4:	22 e0       	ldi	r18, 0x02	; 2
      b6:	a4 e9       	ldi	r26, 0x94	; 148
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
      bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
      be:	ac 37       	cpi	r26, 0x7C	; 124
      c0:	b2 07       	cpc	r27, r18
      c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
      c4:	0e 94 8a 03 	call	0x714	; 0x714 <main>
      c8:	0c 94 e1 1a 	jmp	0x35c2	; 0x35c2 <__do_global_dtors>

000000cc <__bad_interrupt>:
      cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <swapOne>:
	temp = *secondYValue;                                                                               //Swap Y-Coordinates
	*secondYValue = *firstYValue;
	*firstYValue = temp;
}

void swapOne(float *firstValue, float *secondValue) {                                                  //Swap function for the distance array
      d0:	cf 92       	push	r12
      d2:	df 92       	push	r13
      d4:	ef 92       	push	r14
      d6:	ff 92       	push	r15
      d8:	0f 93       	push	r16
      da:	1f 93       	push	r17
	float temp;

	temp = *secondValue;
      dc:	fb 01       	movw	r30, r22
      de:	00 81       	ld	r16, Z
      e0:	11 81       	ldd	r17, Z+1	; 0x01
      e2:	22 81       	ldd	r18, Z+2	; 0x02
      e4:	33 81       	ldd	r19, Z+3	; 0x03
	*secondValue = *firstValue;
      e6:	fc 01       	movw	r30, r24
      e8:	c0 80       	ld	r12, Z
      ea:	d1 80       	ldd	r13, Z+1	; 0x01
      ec:	e2 80       	ldd	r14, Z+2	; 0x02
      ee:	f3 80       	ldd	r15, Z+3	; 0x03
      f0:	fb 01       	movw	r30, r22
      f2:	c0 82       	st	Z, r12
      f4:	d1 82       	std	Z+1, r13	; 0x01
      f6:	e2 82       	std	Z+2, r14	; 0x02
      f8:	f3 82       	std	Z+3, r15	; 0x03
	*firstValue = temp;
      fa:	fc 01       	movw	r30, r24
      fc:	00 83       	st	Z, r16
      fe:	11 83       	std	Z+1, r17	; 0x01
     100:	22 83       	std	Z+2, r18	; 0x02
     102:	33 83       	std	Z+3, r19	; 0x03
}
     104:	1f 91       	pop	r17
     106:	0f 91       	pop	r16
     108:	ff 90       	pop	r15
     10a:	ef 90       	pop	r14
     10c:	df 90       	pop	r13
     10e:	cf 90       	pop	r12
     110:	08 95       	ret

00000112 <sortOrder>:

void sortOrder(int X[], int Y[]) {                                                                   //Sorting algorithm, this sorts the coordinates of the given order
     112:	2f 92       	push	r2
     114:	3f 92       	push	r3
     116:	4f 92       	push	r4
     118:	5f 92       	push	r5
     11a:	6f 92       	push	r6
     11c:	7f 92       	push	r7
     11e:	8f 92       	push	r8
     120:	9f 92       	push	r9
     122:	af 92       	push	r10
     124:	bf 92       	push	r11
     126:	cf 92       	push	r12
     128:	df 92       	push	r13
     12a:	ef 92       	push	r14
     12c:	ff 92       	push	r15
     12e:	0f 93       	push	r16
     130:	1f 93       	push	r17
     132:	cf 93       	push	r28
     134:	df 93       	push	r29
     136:	cd b7       	in	r28, 0x3d	; 61
     138:	de b7       	in	r29, 0x3e	; 62
     13a:	a5 97       	sbiw	r28, 0x25	; 37
     13c:	0f b6       	in	r0, 0x3f	; 63
     13e:	f8 94       	cli
     140:	de bf       	out	0x3e, r29	; 62
     142:	0f be       	out	0x3f, r0	; 63
     144:	cd bf       	out	0x3d, r28	; 61
     146:	9b a3       	std	Y+35, r25	; 0x23
     148:	8a a3       	std	Y+34, r24	; 0x22
     14a:	6c a3       	std	Y+36, r22	; 0x24
     14c:	7d a3       	std	Y+37, r23	; 0x25
     14e:	06 96       	adiw	r24, 0x06	; 6
     150:	98 a3       	std	Y+32, r25	; 0x20
     152:	8f 8f       	std	Y+31, r24	; 0x1f
     154:	b6 c0       	rjmp	.+364    	; 0x2c2 <sortOrder+0x1b0>
     156:	7e 8e       	std	Y+30, r7	; 0x1e
     158:	6d 8e       	std	Y+29, r6	; 0x1d

	while (check != 1) {
		orderCorrect = 1;

		for (int i = 0; i < (sizeOfOrder - 1); i++) {
			Distance[i] = sqrt((pow(X[i], 2)) + (pow(Y[i], 2)));                                    //Pythagoras
     15a:	f3 01       	movw	r30, r6
     15c:	01 90       	ld	r0, Z+
     15e:	f0 81       	ld	r31, Z
     160:	e0 2d       	mov	r30, r0
     162:	fa 8f       	std	Y+26, r31	; 0x1a
     164:	e9 8f       	std	Y+25, r30	; 0x19
     166:	bf 01       	movw	r22, r30
     168:	ff 0f       	add	r31, r31
     16a:	88 0b       	sbc	r24, r24
     16c:	99 0b       	sbc	r25, r25
     16e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__floatsisf>
     172:	6b 01       	movw	r12, r22
     174:	7c 01       	movw	r14, r24
     176:	3c 8e       	std	Y+28, r3	; 0x1c
     178:	2b 8e       	std	Y+27, r2	; 0x1b
     17a:	f1 01       	movw	r30, r2
     17c:	00 81       	ld	r16, Z
     17e:	11 81       	ldd	r17, Z+1	; 0x01
     180:	b8 01       	movw	r22, r16
     182:	01 2e       	mov	r0, r17
     184:	00 0c       	add	r0, r0
     186:	88 0b       	sbc	r24, r24
     188:	99 0b       	sbc	r25, r25
     18a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__floatsisf>
     18e:	4b 01       	movw	r8, r22
     190:	5c 01       	movw	r10, r24
     192:	9b 01       	movw	r18, r22
     194:	ac 01       	movw	r20, r24
     196:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__mulsf3>
     19a:	69 8b       	std	Y+17, r22	; 0x11
     19c:	7a 8b       	std	Y+18, r23	; 0x12
     19e:	8b 8b       	std	Y+19, r24	; 0x13
     1a0:	9c 8b       	std	Y+20, r25	; 0x14
     1a2:	a5 01       	movw	r20, r10
     1a4:	94 01       	movw	r18, r8
     1a6:	c5 01       	movw	r24, r10
     1a8:	b4 01       	movw	r22, r8
     1aa:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__mulsf3>
     1ae:	4b 01       	movw	r8, r22
     1b0:	5c 01       	movw	r10, r24
     1b2:	a7 01       	movw	r20, r14
     1b4:	96 01       	movw	r18, r12
     1b6:	c7 01       	movw	r24, r14
     1b8:	b6 01       	movw	r22, r12
     1ba:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__mulsf3>
     1be:	9b 01       	movw	r18, r22
     1c0:	ac 01       	movw	r20, r24
     1c2:	c5 01       	movw	r24, r10
     1c4:	b4 01       	movw	r22, r8
     1c6:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     1ca:	0e 94 1b 0b 	call	0x1636	; 0x1636 <sqrt>
     1ce:	6b 01       	movw	r12, r22
     1d0:	7c 01       	movw	r14, r24
     1d2:	f2 01       	movw	r30, r4
     1d4:	61 93       	st	Z+, r22
     1d6:	71 93       	st	Z+, r23
     1d8:	81 93       	st	Z+, r24
     1da:	91 93       	st	Z+, r25
     1dc:	2f 01       	movw	r4, r30
     1de:	e9 8b       	std	Y+17, r30	; 0x11
     1e0:	59 a2       	std	Y+33, r5	; 0x21
			firstDistanceValue =  Distance[i];
			secondDistanceValue =  Distance[i + 1];
     1e2:	80 80       	ld	r8, Z
     1e4:	91 80       	ldd	r9, Z+1	; 0x01
     1e6:	a2 80       	ldd	r10, Z+2	; 0x02
     1e8:	b3 80       	ldd	r11, Z+3	; 0x03

			if ( Distance[i] >  Distance[i + 1]) {                                                  //Compare the distance of two points to each other
     1ea:	a5 01       	movw	r20, r10
     1ec:	94 01       	movw	r18, r8
     1ee:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__gesf2>
     1f2:	18 16       	cp	r1, r24
     1f4:	d4 f4       	brge	.+52     	; 0x22a <sortOrder+0x118>
				swapOne(& Distance[i], & Distance[i + 1]);                                          //Place the biggest one further behind in the array
     1f6:	b2 01       	movw	r22, r4
     1f8:	8d 89       	ldd	r24, Y+21	; 0x15
     1fa:	9e 89       	ldd	r25, Y+22	; 0x16
     1fc:	0e 94 68 00 	call	0xd0	; 0xd0 <swapOne>


void swapTwo( int *firstXValue, int *secondXValue, int *firstYValue, int *secondYValue){                //Swap function for the coordinates
	int temp;

	temp = *secondXValue;                                                                               //Swap X-Coordinates
     200:	f3 01       	movw	r30, r6
     202:	82 81       	ldd	r24, Z+2	; 0x02
     204:	93 81       	ldd	r25, Z+3	; 0x03
	*secondXValue = *firstXValue;
     206:	20 81       	ld	r18, Z
     208:	31 81       	ldd	r19, Z+1	; 0x01
     20a:	33 83       	std	Z+3, r19	; 0x03
     20c:	22 83       	std	Z+2, r18	; 0x02
	*firstXValue = temp;
     20e:	91 83       	std	Z+1, r25	; 0x01
     210:	80 83       	st	Z, r24

	temp = *secondYValue;                                                                               //Swap Y-Coordinates
     212:	f1 01       	movw	r30, r2
     214:	82 81       	ldd	r24, Z+2	; 0x02
     216:	93 81       	ldd	r25, Z+3	; 0x03
	*secondYValue = *firstYValue;
     218:	20 81       	ld	r18, Z
     21a:	31 81       	ldd	r19, Z+1	; 0x01
     21c:	33 83       	std	Z+3, r19	; 0x03
     21e:	22 83       	std	Z+2, r18	; 0x02
	*firstYValue = temp;
     220:	91 83       	std	Z+1, r25	; 0x01
     222:	80 83       	st	Z, r24
			secondDistanceValue =  Distance[i + 1];

			if ( Distance[i] >  Distance[i + 1]) {                                                  //Compare the distance of two points to each other
				swapOne(& Distance[i], & Distance[i + 1]);                                          //Place the biggest one further behind in the array
				swapTwo(&X[i], &X[i + 1], &Y[i], &Y[i + 1]);                                        //Swap the coordinates accordingly
				orderCorrect = 0;
     224:	1f 8a       	std	Y+23, r1	; 0x17
     226:	18 8e       	std	Y+24, r1	; 0x18
     228:	36 c0       	rjmp	.+108    	; 0x296 <sortOrder+0x184>
				} else if ((firstDistanceValue == secondDistanceValue) && (Y[i] == Y[i + 1])) {     //If the distance is the same and the Y values are the same
     22a:	c7 01       	movw	r24, r14
     22c:	b6 01       	movw	r22, r12
     22e:	0e 94 b3 09 	call	0x1366	; 0x1366 <__fixsfsi>
     232:	7b 01       	movw	r14, r22
     234:	c5 01       	movw	r24, r10
     236:	b4 01       	movw	r22, r8
     238:	0e 94 b3 09 	call	0x1366	; 0x1366 <__fixsfsi>
     23c:	e6 16       	cp	r14, r22
     23e:	f7 06       	cpc	r15, r23
     240:	51 f5       	brne	.+84     	; 0x296 <sortOrder+0x184>
     242:	eb 8d       	ldd	r30, Y+27	; 0x1b
     244:	fc 8d       	ldd	r31, Y+28	; 0x1c
     246:	82 81       	ldd	r24, Z+2	; 0x02
     248:	93 81       	ldd	r25, Z+3	; 0x03
     24a:	08 17       	cp	r16, r24
     24c:	19 07       	cpc	r17, r25
     24e:	19 f5       	brne	.+70     	; 0x296 <sortOrder+0x184>
				if (X[i] < X[i + 1]) {                                                              //Compare the X values
     250:	ed 8d       	ldd	r30, Y+29	; 0x1d
     252:	fe 8d       	ldd	r31, Y+30	; 0x1e
     254:	82 81       	ldd	r24, Z+2	; 0x02
     256:	93 81       	ldd	r25, Z+3	; 0x03
     258:	29 8d       	ldd	r18, Y+25	; 0x19
     25a:	3a 8d       	ldd	r19, Y+26	; 0x1a
     25c:	28 17       	cp	r18, r24
     25e:	39 07       	cpc	r19, r25
     260:	d4 f4       	brge	.+52     	; 0x296 <sortOrder+0x184>
					swapOne(& Distance[i], & Distance[i + 1]);
     262:	69 89       	ldd	r22, Y+17	; 0x11
     264:	79 a1       	ldd	r23, Y+33	; 0x21
     266:	8d 89       	ldd	r24, Y+21	; 0x15
     268:	9e 89       	ldd	r25, Y+22	; 0x16
     26a:	0e 94 68 00 	call	0xd0	; 0xd0 <swapOne>


void swapTwo( int *firstXValue, int *secondXValue, int *firstYValue, int *secondYValue){                //Swap function for the coordinates
	int temp;

	temp = *secondXValue;                                                                               //Swap X-Coordinates
     26e:	ed 8d       	ldd	r30, Y+29	; 0x1d
     270:	fe 8d       	ldd	r31, Y+30	; 0x1e
     272:	82 81       	ldd	r24, Z+2	; 0x02
     274:	93 81       	ldd	r25, Z+3	; 0x03
	*secondXValue = *firstXValue;
     276:	20 81       	ld	r18, Z
     278:	31 81       	ldd	r19, Z+1	; 0x01
     27a:	33 83       	std	Z+3, r19	; 0x03
     27c:	22 83       	std	Z+2, r18	; 0x02
	*firstXValue = temp;
     27e:	91 83       	std	Z+1, r25	; 0x01
     280:	80 83       	st	Z, r24

	temp = *secondYValue;                                                                               //Swap Y-Coordinates
     282:	eb 8d       	ldd	r30, Y+27	; 0x1b
     284:	fc 8d       	ldd	r31, Y+28	; 0x1c
     286:	82 81       	ldd	r24, Z+2	; 0x02
     288:	93 81       	ldd	r25, Z+3	; 0x03
	*secondYValue = *firstYValue;
     28a:	20 81       	ld	r18, Z
     28c:	31 81       	ldd	r19, Z+1	; 0x01
     28e:	33 83       	std	Z+3, r19	; 0x03
     290:	22 83       	std	Z+2, r18	; 0x02
	*firstYValue = temp;
     292:	91 83       	std	Z+1, r25	; 0x01
     294:	80 83       	st	Z, r24
     296:	f2 e0       	ldi	r31, 0x02	; 2
     298:	6f 0e       	add	r6, r31
     29a:	71 1c       	adc	r7, r1
     29c:	22 e0       	ldi	r18, 0x02	; 2
     29e:	22 0e       	add	r2, r18
     2a0:	31 1c       	adc	r3, r1
     2a2:	8d 89       	ldd	r24, Y+21	; 0x15
     2a4:	9e 89       	ldd	r25, Y+22	; 0x16
     2a6:	04 96       	adiw	r24, 0x04	; 4
     2a8:	9e 8b       	std	Y+22, r25	; 0x16
     2aa:	8d 8b       	std	Y+21, r24	; 0x15
	float Distance[sizeOfOrder];

	while (check != 1) {
		orderCorrect = 1;

		for (int i = 0; i < (sizeOfOrder - 1); i++) {
     2ac:	ef 8d       	ldd	r30, Y+31	; 0x1f
     2ae:	f8 a1       	ldd	r31, Y+32	; 0x20
     2b0:	6e 16       	cp	r6, r30
     2b2:	7f 06       	cpc	r7, r31
     2b4:	09 f0       	breq	.+2      	; 0x2b8 <sortOrder+0x1a6>
     2b6:	4f cf       	rjmp	.-354    	; 0x156 <sortOrder+0x44>
					swapOne(& Distance[i], & Distance[i + 1]);
					swapTwo(&X[i], &X[i + 1], &Y[i], &Y[i + 1]);
				}
			}
		}
		if (orderCorrect == 1) {
     2b8:	2f 89       	ldd	r18, Y+23	; 0x17
     2ba:	38 8d       	ldd	r19, Y+24	; 0x18
     2bc:	21 30       	cpi	r18, 0x01	; 1
     2be:	31 05       	cpc	r19, r1
     2c0:	69 f0       	breq	.+26     	; 0x2dc <sortOrder+0x1ca>
     2c2:	6a a0       	ldd	r6, Y+34	; 0x22
     2c4:	7b a0       	ldd	r7, Y+35	; 0x23
     2c6:	2c a0       	ldd	r2, Y+36	; 0x24
     2c8:	3d a0       	ldd	r3, Y+37	; 0x25
     2ca:	ce 01       	movw	r24, r28
     2cc:	01 96       	adiw	r24, 0x01	; 1
     2ce:	2c 01       	movw	r4, r24
	temp = *secondValue;
	*secondValue = *firstValue;
	*firstValue = temp;
}

void sortOrder(int X[], int Y[]) {                                                                   //Sorting algorithm, this sorts the coordinates of the given order
     2d0:	9e 8b       	std	Y+22, r25	; 0x16
     2d2:	8d 8b       	std	Y+21, r24	; 0x15
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	9f 8b       	std	Y+23, r25	; 0x17
     2d8:	18 8e       	std	Y+24, r1	; 0x18
     2da:	3d cf       	rjmp	.-390    	; 0x156 <sortOrder+0x44>
		}
		if (orderCorrect == 1) {
			check = 1;
		}
	}
}
     2dc:	a5 96       	adiw	r28, 0x25	; 37
     2de:	0f b6       	in	r0, 0x3f	; 63
     2e0:	f8 94       	cli
     2e2:	de bf       	out	0x3e, r29	; 62
     2e4:	0f be       	out	0x3f, r0	; 63
     2e6:	cd bf       	out	0x3d, r28	; 61
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	1f 91       	pop	r17
     2ee:	0f 91       	pop	r16
     2f0:	ff 90       	pop	r15
     2f2:	ef 90       	pop	r14
     2f4:	df 90       	pop	r13
     2f6:	cf 90       	pop	r12
     2f8:	bf 90       	pop	r11
     2fa:	af 90       	pop	r10
     2fc:	9f 90       	pop	r9
     2fe:	8f 90       	pop	r8
     300:	7f 90       	pop	r7
     302:	6f 90       	pop	r6
     304:	5f 90       	pop	r5
     306:	4f 90       	pop	r4
     308:	3f 90       	pop	r3
     30a:	2f 90       	pop	r2
     30c:	08 95       	ret

0000030e <readGrid>:



void readGrid(int routes[4][4]){
     30e:	fc 01       	movw	r30, r24
	
	//routes[0][0] = 2;                                                                         //Home to grid
	routes[0][0] = 3;
     310:	83 e0       	ldi	r24, 0x03	; 3
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	91 83       	std	Z+1, r25	; 0x01
     316:	80 83       	st	Z, r24
	routes[0][1] = 2;
     318:	42 e0       	ldi	r20, 0x02	; 2
     31a:	50 e0       	ldi	r21, 0x00	; 0
     31c:	53 83       	std	Z+3, r21	; 0x03
     31e:	42 83       	std	Z+2, r20	; 0x02
	routes[0][2] = 5;
     320:	25 e0       	ldi	r18, 0x05	; 5
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	35 83       	std	Z+5, r19	; 0x05
     326:	24 83       	std	Z+4, r18	; 0x04
	
	routes[1][0] = 1;                                                                        //Home to charge point
     328:	61 e0       	ldi	r22, 0x01	; 1
     32a:	70 e0       	ldi	r23, 0x00	; 0
     32c:	71 87       	std	Z+9, r23	; 0x09
     32e:	60 87       	std	Z+8, r22	; 0x08
	routes[1][1] = 1;
     330:	73 87       	std	Z+11, r23	; 0x0b
     332:	62 87       	std	Z+10, r22	; 0x0a
	routes[1][2] = 5;
     334:	35 87       	std	Z+13, r19	; 0x0d
     336:	24 87       	std	Z+12, r18	; 0x0c
	
	routes[2][0] = 3;                                                                        //Grid to charge point
     338:	91 8b       	std	Z+17, r25	; 0x11
     33a:	80 8b       	std	Z+16, r24	; 0x10
	routes[2][1] = 3;
     33c:	93 8b       	std	Z+19, r25	; 0x13
     33e:	82 8b       	std	Z+18, r24	; 0x12
	routes[2][2] = 5;
     340:	35 8b       	std	Z+21, r19	; 0x15
     342:	24 8b       	std	Z+20, r18	; 0x14
	
	routes[3][0] = 3;                                                                        //Grid to home
     344:	91 8f       	std	Z+25, r25	; 0x19
     346:	80 8f       	std	Z+24, r24	; 0x18
	routes[3][1] = 1;
     348:	73 8f       	std	Z+27, r23	; 0x1b
     34a:	62 8f       	std	Z+26, r22	; 0x1a
	routes[3][2] = 2;
     34c:	55 8f       	std	Z+29, r21	; 0x1d
     34e:	44 8f       	std	Z+28, r20	; 0x1c
	routes[3][3] = 5;
     350:	37 8f       	std	Z+31, r19	; 0x1f
     352:	26 8f       	std	Z+30, r18	; 0x1e
	
	routes[4][0] = 3;                                                                       //Charge point to grid
     354:	91 a3       	std	Z+33, r25	; 0x21
     356:	80 a3       	std	Z+32, r24	; 0x20
	routes[4][1] = 2;
     358:	53 a3       	std	Z+35, r21	; 0x23
     35a:	42 a3       	std	Z+34, r20	; 0x22
	routes[4][2] = 3;
     35c:	95 a3       	std	Z+37, r25	; 0x25
     35e:	84 a3       	std	Z+36, r24	; 0x24
	routes[4][3] = 5;
     360:	37 a3       	std	Z+39, r19	; 0x27
     362:	26 a3       	std	Z+38, r18	; 0x26
     364:	08 95       	ret

00000366 <setDirection>:
	else{
		setDirection(S, directionCurrent);
	}
}

void setDirection(direction directionDesired, direction directionCurrent){
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	cd b7       	in	r28, 0x3d	; 61
     36c:	de b7       	in	r29, 0x3e	; 62
     36e:	60 97       	sbiw	r28, 0x10	; 16
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	f8 94       	cli
     374:	de bf       	out	0x3e, r29	; 62
     376:	0f be       	out	0x3f, r0	; 63
     378:	cd bf       	out	0x3d, r28	; 61
	rotation orientation[4][4] ={{X, R, T, L},
     37a:	90 e1       	ldi	r25, 0x10	; 16
     37c:	e4 e1       	ldi	r30, 0x14	; 20
     37e:	f1 e0       	ldi	r31, 0x01	; 1
     380:	de 01       	movw	r26, r28
     382:	11 96       	adiw	r26, 0x01	; 1
     384:	01 90       	ld	r0, Z+
     386:	0d 92       	st	X+, r0
     388:	9a 95       	dec	r25
     38a:	e1 f7       	brne	.-8      	; 0x384 <setDirection+0x1e>
	{L, X, R, T},
	{T, L, X, R},
	{R, T, L, X}};
	
	switch(orientation[directionDesired][directionCurrent]){
     38c:	e1 e0       	ldi	r30, 0x01	; 1
     38e:	f0 e0       	ldi	r31, 0x00	; 0
     390:	ec 0f       	add	r30, r28
     392:	fd 1f       	adc	r31, r29
     394:	94 e0       	ldi	r25, 0x04	; 4
     396:	89 9f       	mul	r24, r25
     398:	e0 0d       	add	r30, r0
     39a:	f1 1d       	adc	r31, r1
     39c:	11 24       	eor	r1, r1
     39e:	e6 0f       	add	r30, r22
     3a0:	f1 1d       	adc	r31, r1
     3a2:	80 81       	ld	r24, Z
     3a4:	81 30       	cpi	r24, 0x01	; 1
     3a6:	21 f0       	breq	.+8      	; 0x3b0 <setDirection+0x4a>
     3a8:	f8 f0       	brcs	.+62     	; 0x3e8 <setDirection+0x82>
     3aa:	82 30       	cpi	r24, 0x02	; 2
     3ac:	79 f0       	breq	.+30     	; 0x3cc <setDirection+0x66>
     3ae:	32 c0       	rjmp	.+100    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		case R:
		motorControl(70, 'R', 0.30);
     3b0:	2a e9       	ldi	r18, 0x9A	; 154
     3b2:	39 e9       	ldi	r19, 0x99	; 153
     3b4:	49 e9       	ldi	r20, 0x99	; 153
     3b6:	5e e3       	ldi	r21, 0x3E	; 62
     3b8:	62 e5       	ldi	r22, 0x52	; 82
     3ba:	86 e4       	ldi	r24, 0x46	; 70
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	0e 94 ca 03 	call	0x794	; 0x794 <motorControl>
		directionCurrent = directionDesired;
		print("R");
     3c2:	81 e5       	ldi	r24, 0x51	; 81
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <print>
		break;
     3ca:	24 c0       	rjmp	.+72     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		case L:
		motorControl(70, 'L', 0.30);
     3cc:	2a e9       	ldi	r18, 0x9A	; 154
     3ce:	39 e9       	ldi	r19, 0x99	; 153
     3d0:	49 e9       	ldi	r20, 0x99	; 153
     3d2:	5e e3       	ldi	r21, 0x3E	; 62
     3d4:	6c e4       	ldi	r22, 0x4C	; 76
     3d6:	86 e4       	ldi	r24, 0x46	; 70
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 ca 03 	call	0x794	; 0x794 <motorControl>
		directionCurrent = directionDesired;
		print("L");
     3de:	83 e5       	ldi	r24, 0x53	; 83
     3e0:	91 e0       	ldi	r25, 0x01	; 1
     3e2:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <print>
		break;
     3e6:	16 c0       	rjmp	.+44     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		case T:
		motorControl(70, 'R', 0.30);
     3e8:	2a e9       	ldi	r18, 0x9A	; 154
     3ea:	39 e9       	ldi	r19, 0x99	; 153
     3ec:	49 e9       	ldi	r20, 0x99	; 153
     3ee:	5e e3       	ldi	r21, 0x3E	; 62
     3f0:	62 e5       	ldi	r22, 0x52	; 82
     3f2:	86 e4       	ldi	r24, 0x46	; 70
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	0e 94 ca 03 	call	0x794	; 0x794 <motorControl>
		motorControl(70, 'R', 0.30);
     3fa:	2a e9       	ldi	r18, 0x9A	; 154
     3fc:	39 e9       	ldi	r19, 0x99	; 153
     3fe:	49 e9       	ldi	r20, 0x99	; 153
     400:	5e e3       	ldi	r21, 0x3E	; 62
     402:	62 e5       	ldi	r22, 0x52	; 82
     404:	86 e4       	ldi	r24, 0x46	; 70
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	0e 94 ca 03 	call	0x794	; 0x794 <motorControl>
		directionCurrent = directionDesired;
		print("B");
     40c:	8c e6       	ldi	r24, 0x6C	; 108
     40e:	91 e0       	ldi	r25, 0x01	; 1
     410:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <print>
		break;
		default:
		break;
	}
}
     414:	60 96       	adiw	r28, 0x10	; 16
     416:	0f b6       	in	r0, 0x3f	; 63
     418:	f8 94       	cli
     41a:	de bf       	out	0x3e, r29	; 62
     41c:	0f be       	out	0x3f, r0	; 63
     41e:	cd bf       	out	0x3d, r28	; 61
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	08 95       	ret

00000426 <getInstructionsX>:
		
	}
}

void getInstructionsX(int gridZero, int orderX){
	if(gridZero){
     426:	89 2b       	or	r24, r25
     428:	31 f0       	breq	.+12     	; 0x436 <getInstructionsX+0x10>
		positionCurrentX = 0;
     42a:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <positionCurrentX+0x1>
     42e:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <positionCurrentX>
		directionCurrent = N;
     432:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <directionCurrent>
	}
	
	if(orderX > positionCurrentX){
     436:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <positionCurrentX>
     43a:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <positionCurrentX+0x1>
     43e:	86 17       	cp	r24, r22
     440:	97 07       	cpc	r25, r23
     442:	34 f4       	brge	.+12     	; 0x450 <getInstructionsX+0x2a>
		setDirection(E, directionCurrent);
     444:	60 91 13 02 	lds	r22, 0x0213	; 0x800213 <directionCurrent>
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	0e 94 b3 01 	call	0x366	; 0x366 <setDirection>
     44e:	08 95       	ret
	}
	else{
		setDirection(W, directionCurrent);
     450:	60 91 13 02 	lds	r22, 0x0213	; 0x800213 <directionCurrent>
     454:	83 e0       	ldi	r24, 0x03	; 3
     456:	0e 94 b3 01 	call	0x366	; 0x366 <setDirection>
     45a:	08 95       	ret

0000045c <getInstructionsY>:
	}
}

void getInstructionsY(int gridZero, int orderY){
	if(gridZero){
     45c:	89 2b       	or	r24, r25
     45e:	31 f0       	breq	.+12     	; 0x46c <getInstructionsY+0x10>
		positionCurrentY = 0;
     460:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <positionCurrentY+0x1>
     464:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <positionCurrentY>
		directionCurrent = N;
     468:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <directionCurrent>
	}
	
	if(orderY > positionCurrentY){
     46c:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <positionCurrentY>
     470:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <positionCurrentY+0x1>
     474:	86 17       	cp	r24, r22
     476:	97 07       	cpc	r25, r23
     478:	34 f4       	brge	.+12     	; 0x486 <getInstructionsY+0x2a>
		setDirection(N, directionCurrent);
     47a:	60 91 13 02 	lds	r22, 0x0213	; 0x800213 <directionCurrent>
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	0e 94 b3 01 	call	0x366	; 0x366 <setDirection>
     484:	08 95       	ret
	}
	else{
		setDirection(S, directionCurrent);
     486:	60 91 13 02 	lds	r22, 0x0213	; 0x800213 <directionCurrent>
     48a:	82 e0       	ldi	r24, 0x02	; 2
     48c:	0e 94 b3 01 	call	0x366	; 0x366 <setDirection>
     490:	08 95       	ret

00000492 <driveRoute>:
		default:
		break;
	}
}

void driveRoute(int route[4][4], int flag){                          //Drive the given route
     492:	ef 92       	push	r14
     494:	ff 92       	push	r15
     496:	0f 93       	push	r16
     498:	1f 93       	push	r17
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
		decision = checkDecision();
		
		if(checkAfslag() != 0){
			
			if(decision == HIGH){                                                          //If there is more than one turn, the robot makes a decision depending on the values in the route array
				switch(route[flag][intersectnum]){
     49e:	8b 01       	movw	r16, r22
     4a0:	00 0f       	add	r16, r16
     4a2:	11 1f       	adc	r17, r17
     4a4:	00 0f       	add	r16, r16
     4a6:	11 1f       	adc	r17, r17
     4a8:	00 0f       	add	r16, r16
     4aa:	11 1f       	adc	r17, r17
     4ac:	08 0f       	add	r16, r24
     4ae:	19 1f       	adc	r17, r25
		break;
	}
}

void driveRoute(int route[4][4], int flag){                          //Drive the given route
	int intersectnum = 0, decision = LOW, endOfRoute = 0;            //Flag selects the route
     4b0:	e1 2c       	mov	r14, r1
     4b2:	f1 2c       	mov	r15, r1
	
	do{
		decision = checkDecision();
     4b4:	0e 94 1a 09 	call	0x1234	; 0x1234 <checkDecision>
     4b8:	ec 01       	movw	r28, r24
		
		if(checkAfslag() != 0){
     4ba:	0e 94 d5 08 	call	0x11aa	; 0x11aa <checkAfslag>
     4be:	89 2b       	or	r24, r25
     4c0:	c9 f3       	breq	.-14     	; 0x4b4 <driveRoute+0x22>
			
			if(decision == HIGH){                                                          //If there is more than one turn, the robot makes a decision depending on the values in the route array
     4c2:	21 97       	sbiw	r28, 0x01	; 1
     4c4:	b9 f7       	brne	.-18     	; 0x4b4 <driveRoute+0x22>
				switch(route[flag][intersectnum]){
     4c6:	f7 01       	movw	r30, r14
     4c8:	ee 0f       	add	r30, r30
     4ca:	ff 1f       	adc	r31, r31
     4cc:	e0 0f       	add	r30, r16
     4ce:	f1 1f       	adc	r31, r17
     4d0:	80 81       	ld	r24, Z
     4d2:	91 81       	ldd	r25, Z+1	; 0x01
     4d4:	82 30       	cpi	r24, 0x02	; 2
     4d6:	91 05       	cpc	r25, r1
     4d8:	f9 f0       	breq	.+62     	; 0x518 <driveRoute+0x86>
     4da:	1c f4       	brge	.+6      	; 0x4e2 <driveRoute+0x50>
     4dc:	01 97       	sbiw	r24, 0x01	; 1
     4de:	39 f0       	breq	.+14     	; 0x4ee <driveRoute+0x5c>
     4e0:	e9 cf       	rjmp	.-46     	; 0x4b4 <driveRoute+0x22>
     4e2:	83 30       	cpi	r24, 0x03	; 3
     4e4:	91 05       	cpc	r25, r1
     4e6:	49 f1       	breq	.+82     	; 0x53a <driveRoute+0xa8>
     4e8:	05 97       	sbiw	r24, 0x05	; 5
     4ea:	c1 f1       	breq	.+112    	; 0x55c <driveRoute+0xca>
     4ec:	e3 cf       	rjmp	.-58     	; 0x4b4 <driveRoute+0x22>
		    : "0" ( microseconds )
		    );  
}

// These are alternative aliases:
static inline void delay(unsigned int milliseconds) { delay_ms(milliseconds); }
     4ee:	86 e9       	ldi	r24, 0x96	; 150
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <delay_ms>
					case 1:
					delay(150);
					motorControl(70, 'R', 0.30);
     4f6:	2a e9       	ldi	r18, 0x9A	; 154
     4f8:	39 e9       	ldi	r19, 0x99	; 153
     4fa:	49 e9       	ldi	r20, 0x99	; 153
     4fc:	5e e3       	ldi	r21, 0x3E	; 62
     4fe:	62 e5       	ldi	r22, 0x52	; 82
     500:	86 e4       	ldi	r24, 0x46	; 70
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	0e 94 ca 03 	call	0x794	; 0x794 <motorControl>
					intersectnum++;
     508:	8f ef       	ldi	r24, 0xFF	; 255
     50a:	e8 1a       	sub	r14, r24
     50c:	f8 0a       	sbc	r15, r24
					print("R");
     50e:	81 e5       	ldi	r24, 0x51	; 81
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <print>
					break;
     516:	ce cf       	rjmp	.-100    	; 0x4b4 <driveRoute+0x22>
					case 2:
					motorControl(70, 'L', 0.30);
     518:	2a e9       	ldi	r18, 0x9A	; 154
     51a:	39 e9       	ldi	r19, 0x99	; 153
     51c:	49 e9       	ldi	r20, 0x99	; 153
     51e:	5e e3       	ldi	r21, 0x3E	; 62
     520:	6c e4       	ldi	r22, 0x4C	; 76
     522:	86 e4       	ldi	r24, 0x46	; 70
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	0e 94 ca 03 	call	0x794	; 0x794 <motorControl>
					intersectnum++;
     52a:	8f ef       	ldi	r24, 0xFF	; 255
     52c:	e8 1a       	sub	r14, r24
     52e:	f8 0a       	sbc	r15, r24
					print("R");
     530:	81 e5       	ldi	r24, 0x51	; 81
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <print>
					break;
     538:	bd cf       	rjmp	.-134    	; 0x4b4 <driveRoute+0x22>
					case 3:
					motorControl(60, 'F', 0.89);
     53a:	2a e0       	ldi	r18, 0x0A	; 10
     53c:	37 ed       	ldi	r19, 0xD7	; 215
     53e:	43 e6       	ldi	r20, 0x63	; 99
     540:	5f e3       	ldi	r21, 0x3F	; 63
     542:	66 e4       	ldi	r22, 0x46	; 70
     544:	8c e3       	ldi	r24, 0x3C	; 60
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	0e 94 ca 03 	call	0x794	; 0x794 <motorControl>
					intersectnum++;
     54c:	8f ef       	ldi	r24, 0xFF	; 255
     54e:	e8 1a       	sub	r14, r24
     550:	f8 0a       	sbc	r15, r24
					print("F");
     552:	85 e5       	ldi	r24, 0x55	; 85
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <print>
					break;
     55a:	ac cf       	rjmp	.-168    	; 0x4b4 <driveRoute+0x22>
					case 5:
					motorControl(0, 'F', 0.89);
     55c:	2a e0       	ldi	r18, 0x0A	; 10
     55e:	37 ed       	ldi	r19, 0xD7	; 215
     560:	43 e6       	ldi	r20, 0x63	; 99
     562:	5f e3       	ldi	r21, 0x3F	; 63
     564:	66 e4       	ldi	r22, 0x46	; 70
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	0e 94 ca 03 	call	0x794	; 0x794 <motorControl>
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
     56e:	5f 9a       	sbi	0x0b, 7	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     570:	57 9a       	sbi	0x0a, 7	; 10
     572:	84 ef       	ldi	r24, 0xF4	; 244
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <delay_ms>
				//clear();
			}
		}
	}while(endOfRoute !=  1);
	delay(500);
	motorControl(0, 'F', 0.89);
     57a:	2a e0       	ldi	r18, 0x0A	; 10
     57c:	37 ed       	ldi	r19, 0xD7	; 215
     57e:	43 e6       	ldi	r20, 0x63	; 99
     580:	5f e3       	ldi	r21, 0x3F	; 63
     582:	66 e4       	ldi	r22, 0x46	; 70
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 ca 03 	call	0x794	; 0x794 <motorControl>

     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	1f 91       	pop	r17
     592:	0f 91       	pop	r16
     594:	ff 90       	pop	r15
     596:	ef 90       	pop	r14
     598:	08 95       	ret

0000059a <fetchOrder2>:
	routes[4][1] = 2;
	routes[4][2] = 3;
	routes[4][3] = 5;
	
}
void fetchOrder2(int OrderX[], int orderY[], int route[4][4]){
     59a:	af 92       	push	r10
     59c:	bf 92       	push	r11
     59e:	cf 92       	push	r12
     5a0:	df 92       	push	r13
     5a2:	ef 92       	push	r14
     5a4:	ff 92       	push	r15
     5a6:	0f 93       	push	r16
     5a8:	1f 93       	push	r17
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
     5ae:	6c 01       	movw	r12, r24
     5b0:	5b 01       	movw	r10, r22
     5b2:	ca 01       	movw	r24, r20
	driveRoute(route, 0);
     5b4:	60 e0       	ldi	r22, 0x00	; 0
     5b6:	70 e0       	ldi	r23, 0x00	; 0
     5b8:	0e 94 49 02 	call	0x492	; 0x492 <driveRoute>
	print("DoneD!");
     5bc:	87 e5       	ldi	r24, 0x57	; 87
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <print>
	int gridZero = 1;
	
	while(checkAfslag() == 0){   //geen probleem
     5c4:	06 c0       	rjmp	.+12     	; 0x5d2 <fetchOrder2+0x38>
		followLine();
     5c6:	0e 94 8f 08 	call	0x111e	; 0x111e <followLine>
		print("Here!");
     5ca:	8e e5       	ldi	r24, 0x5E	; 94
     5cc:	91 e0       	ldi	r25, 0x01	; 1
     5ce:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <print>
void fetchOrder2(int OrderX[], int orderY[], int route[4][4]){
	driveRoute(route, 0);
	print("DoneD!");
	int gridZero = 1;
	
	while(checkAfslag() == 0){   //geen probleem
     5d2:	0e 94 d5 08 	call	0x11aa	; 0x11aa <checkAfslag>
     5d6:	89 2b       	or	r24, r25
     5d8:	b1 f3       	breq	.-20     	; 0x5c6 <fetchOrder2+0x2c>
     5da:	e1 2c       	mov	r14, r1
     5dc:	f1 2c       	mov	r15, r1
		followLine();
		print("Here!");
		
	}
	for(int orderNum = 0; orderNum < sizeOfOrder; orderNum++){
		lcd_goto_xy(0,1);
     5de:	61 e0       	ldi	r22, 0x01	; 1
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	0e 94 64 11 	call	0x22c8	; 0x22c8 <lcd_goto_xy>
		print_long(orderNum);
     5e6:	b7 01       	movw	r22, r14
     5e8:	0f 2c       	mov	r0, r15
     5ea:	00 0c       	add	r0, r0
     5ec:	88 0b       	sbc	r24, r24
     5ee:	99 0b       	sbc	r25, r25
     5f0:	0e 94 41 11 	call	0x2282	; 0x2282 <print_long>
		while((OrderX[orderNum] != positionCurrentX) && (orderY[orderNum] != positionCurrentY)){
     5f4:	c7 01       	movw	r24, r14
     5f6:	88 0f       	add	r24, r24
     5f8:	99 1f       	adc	r25, r25
     5fa:	86 01       	movw	r16, r12
     5fc:	08 0f       	add	r16, r24
     5fe:	19 1f       	adc	r17, r25
     600:	f8 01       	movw	r30, r16
     602:	40 81       	ld	r20, Z
     604:	51 81       	ldd	r21, Z+1	; 0x01
     606:	20 91 44 02 	lds	r18, 0x0244	; 0x800244 <positionCurrentX>
     60a:	30 91 45 02 	lds	r19, 0x0245	; 0x800245 <positionCurrentX+0x1>
     60e:	42 17       	cp	r20, r18
     610:	53 07       	cpc	r21, r19
     612:	09 f4       	brne	.+2      	; 0x616 <fetchOrder2+0x7c>
     614:	6c c0       	rjmp	.+216    	; 0x6ee <fetchOrder2+0x154>
     616:	e5 01       	movw	r28, r10
     618:	c8 0f       	add	r28, r24
     61a:	d9 1f       	adc	r29, r25
     61c:	28 81       	ld	r18, Y
     61e:	39 81       	ldd	r19, Y+1	; 0x01
     620:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <positionCurrentY>
     624:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <positionCurrentY+0x1>
     628:	28 17       	cp	r18, r24
     62a:	39 07       	cpc	r19, r25
     62c:	09 f4       	brne	.+2      	; 0x630 <fetchOrder2+0x96>
     62e:	5f c0       	rjmp	.+190    	; 0x6ee <fetchOrder2+0x154>
			if(checkAfslag() != 0){
     630:	0e 94 d5 08 	call	0x11aa	; 0x11aa <checkAfslag>
     634:	89 2b       	or	r24, r25
     636:	e1 f1       	breq	.+120    	; 0x6b0 <fetchOrder2+0x116>
				if( OrderX[orderNum] == positionCurrentX){
     638:	f8 01       	movw	r30, r16
     63a:	60 81       	ld	r22, Z
     63c:	71 81       	ldd	r23, Z+1	; 0x01
     63e:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <positionCurrentX>
     642:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <positionCurrentX+0x1>
     646:	68 17       	cp	r22, r24
     648:	79 07       	cpc	r23, r25
     64a:	29 f4       	brne	.+10     	; 0x656 <fetchOrder2+0xbc>
					getInstructionsX(gridZero, OrderX[orderNum]);
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	0e 94 13 02 	call	0x426	; 0x426 <getInstructionsX>
     654:	06 c0       	rjmp	.+12     	; 0x662 <fetchOrder2+0xc8>
				}
				else{
					getInstructionsY(gridZero, orderY[orderNum]);
     656:	68 81       	ld	r22, Y
     658:	79 81       	ldd	r23, Y+1	; 0x01
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	0e 94 2e 02 	call	0x45c	; 0x45c <getInstructionsY>
				}
				if((OrderX[orderNum] == positionCurrentX) && (orderY[orderNum] == positionCurrentY)){
     662:	f8 01       	movw	r30, r16
     664:	20 81       	ld	r18, Z
     666:	31 81       	ldd	r19, Z+1	; 0x01
     668:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <positionCurrentX>
     66c:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <positionCurrentX+0x1>
     670:	28 17       	cp	r18, r24
     672:	39 07       	cpc	r19, r25
     674:	e9 f4       	brne	.+58     	; 0x6b0 <fetchOrder2+0x116>
     676:	28 81       	ld	r18, Y
     678:	39 81       	ldd	r19, Y+1	; 0x01
     67a:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <positionCurrentY>
     67e:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <positionCurrentY+0x1>
     682:	28 17       	cp	r18, r24
     684:	39 07       	cpc	r19, r25
     686:	a1 f4       	brne	.+40     	; 0x6b0 <fetchOrder2+0x116>
					motorControl(0, 'F', 0.89);
     688:	2a e0       	ldi	r18, 0x0A	; 10
     68a:	37 ed       	ldi	r19, 0xD7	; 215
     68c:	43 e6       	ldi	r20, 0x63	; 99
     68e:	5f e3       	ldi	r21, 0x3F	; 63
     690:	66 e4       	ldi	r22, 0x46	; 70
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	0e 94 ca 03 	call	0x794	; 0x794 <motorControl>
					play_from_program_space(PSTR(">f32>>a32"));
     69a:	86 e8       	ldi	r24, 0x86	; 134
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <play_from_program_space>
					orderNum++;
     6a2:	ff ef       	ldi	r31, 0xFF	; 255
     6a4:	ef 1a       	sub	r14, r31
     6a6:	ff 0a       	sbc	r15, r31
     6a8:	88 eb       	ldi	r24, 0xB8	; 184
     6aa:	9b e0       	ldi	r25, 0x0B	; 11
     6ac:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <delay_ms>
					delay(3000);
				}
			}
			followLine();
     6b0:	0e 94 8f 08 	call	0x111e	; 0x111e <followLine>
		
	}
	for(int orderNum = 0; orderNum < sizeOfOrder; orderNum++){
		lcd_goto_xy(0,1);
		print_long(orderNum);
		while((OrderX[orderNum] != positionCurrentX) && (orderY[orderNum] != positionCurrentY)){
     6b4:	c7 01       	movw	r24, r14
     6b6:	88 0f       	add	r24, r24
     6b8:	99 1f       	adc	r25, r25
     6ba:	86 01       	movw	r16, r12
     6bc:	08 0f       	add	r16, r24
     6be:	19 1f       	adc	r17, r25
     6c0:	f8 01       	movw	r30, r16
     6c2:	40 81       	ld	r20, Z
     6c4:	51 81       	ldd	r21, Z+1	; 0x01
     6c6:	20 91 44 02 	lds	r18, 0x0244	; 0x800244 <positionCurrentX>
     6ca:	30 91 45 02 	lds	r19, 0x0245	; 0x800245 <positionCurrentX+0x1>
     6ce:	42 17       	cp	r20, r18
     6d0:	53 07       	cpc	r21, r19
     6d2:	69 f0       	breq	.+26     	; 0x6ee <fetchOrder2+0x154>
     6d4:	e5 01       	movw	r28, r10
     6d6:	c8 0f       	add	r28, r24
     6d8:	d9 1f       	adc	r29, r25
     6da:	28 81       	ld	r18, Y
     6dc:	39 81       	ldd	r19, Y+1	; 0x01
     6de:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <positionCurrentY>
     6e2:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <positionCurrentY+0x1>
     6e6:	28 17       	cp	r18, r24
     6e8:	39 07       	cpc	r19, r25
     6ea:	09 f0       	breq	.+2      	; 0x6ee <fetchOrder2+0x154>
     6ec:	a1 cf       	rjmp	.-190    	; 0x630 <fetchOrder2+0x96>
	while(checkAfslag() == 0){   //geen probleem
		followLine();
		print("Here!");
		
	}
	for(int orderNum = 0; orderNum < sizeOfOrder; orderNum++){
     6ee:	ff ef       	ldi	r31, 0xFF	; 255
     6f0:	ef 1a       	sub	r14, r31
     6f2:	ff 0a       	sbc	r15, r31
     6f4:	84 e0       	ldi	r24, 0x04	; 4
     6f6:	e8 16       	cp	r14, r24
     6f8:	f1 04       	cpc	r15, r1
     6fa:	0c f4       	brge	.+2      	; 0x6fe <fetchOrder2+0x164>
     6fc:	70 cf       	rjmp	.-288    	; 0x5de <fetchOrder2+0x44>
			followLine();
		}
		
		
	}
}
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	1f 91       	pop	r17
     704:	0f 91       	pop	r16
     706:	ff 90       	pop	r15
     708:	ef 90       	pop	r14
     70a:	df 90       	pop	r13
     70c:	cf 90       	pop	r12
     70e:	bf 90       	pop	r11
     710:	af 90       	pop	r10
     712:	08 95       	ret

00000714 <main>:
#include <pololu/3pi.h>
#include <avr/pgmspace.h>
#include <avr/io.h>
#include <avr/interrupt.h>

int main(){
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	cd b7       	in	r28, 0x3d	; 61
     71a:	de b7       	in	r29, 0x3e	; 62
     71c:	e0 97       	sbiw	r28, 0x30	; 48
     71e:	0f b6       	in	r0, 0x3f	; 63
     720:	f8 94       	cli
     722:	de bf       	out	0x3e, r29	; 62
     724:	0f be       	out	0x3f, r0	; 63
     726:	cd bf       	out	0x3d, r28	; 61
	initialize();
     728:	0e 94 17 08 	call	0x102e	; 0x102e <initialize>
	int routes[4][4];
	readGrid(routes);
     72c:	ce 01       	movw	r24, r28
     72e:	01 96       	adiw	r24, 0x01	; 1
     730:	0e 94 87 01 	call	0x30e	; 0x30e <readGrid>
	int orderX[sizeOfOrder] ={0, 3, 2, 4};
     734:	88 e0       	ldi	r24, 0x08	; 8
     736:	e4 e2       	ldi	r30, 0x24	; 36
     738:	f1 e0       	ldi	r31, 0x01	; 1
     73a:	de 01       	movw	r26, r28
     73c:	91 96       	adiw	r26, 0x21	; 33
     73e:	01 90       	ld	r0, Z+
     740:	0d 92       	st	X+, r0
     742:	8a 95       	dec	r24
     744:	e1 f7       	brne	.-8      	; 0x73e <main+0x2a>
	int orderY[sizeOfOrder] ={4, 2, 3, 0};
     746:	88 e0       	ldi	r24, 0x08	; 8
     748:	ec e2       	ldi	r30, 0x2C	; 44
     74a:	f1 e0       	ldi	r31, 0x01	; 1
     74c:	de 01       	movw	r26, r28
     74e:	99 96       	adiw	r26, 0x29	; 41
     750:	01 90       	ld	r0, Z+
     752:	0d 92       	st	X+, r0
     754:	8a 95       	dec	r24
     756:	e1 f7       	brne	.-8      	; 0x750 <main+0x3c>
	//wirMain(orderX, orderY);
	sortOrder(orderX, orderY);
     758:	be 01       	movw	r22, r28
     75a:	67 5d       	subi	r22, 0xD7	; 215
     75c:	7f 4f       	sbci	r23, 0xFF	; 255
     75e:	ce 01       	movw	r24, r28
     760:	81 96       	adiw	r24, 0x21	; 33
     762:	0e 94 89 00 	call	0x112	; 0x112 <sortOrder>
	fetchOrder2(orderX, orderY, routes);
     766:	ae 01       	movw	r20, r28
     768:	4f 5f       	subi	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	be 01       	movw	r22, r28
     76e:	67 5d       	subi	r22, 0xD7	; 215
     770:	7f 4f       	sbci	r23, 0xFF	; 255
     772:	ce 01       	movw	r24, r28
     774:	81 96       	adiw	r24, 0x21	; 33
     776:	0e 94 cd 02 	call	0x59a	; 0x59a <fetchOrder2>
	clear();
     77a:	0e 94 dd 10 	call	0x21ba	; 0x21ba <clear>
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	e0 96       	adiw	r28, 0x30	; 48
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	f8 94       	cli
     788:	de bf       	out	0x3e, r29	; 62
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	cd bf       	out	0x3d, r28	; 61
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	08 95       	ret

00000794 <motorControl>:

int speedCurrent = 0;			//Defining the current speeds.
int speedCurrentRight = 0;
int speedCurrentLeft = 0;

void motorControl(int speed, char direction, float aggressionFactor){		//This function is an upgrade over the existing motor control function written by Pololu. This function moves the robot with an entered speed and acceleration time in a desired direction.
     794:	2f 92       	push	r2
     796:	3f 92       	push	r3
     798:	4f 92       	push	r4
     79a:	5f 92       	push	r5
     79c:	6f 92       	push	r6
     79e:	7f 92       	push	r7
     7a0:	8f 92       	push	r8
     7a2:	9f 92       	push	r9
     7a4:	af 92       	push	r10
     7a6:	bf 92       	push	r11
     7a8:	cf 92       	push	r12
     7aa:	df 92       	push	r13
     7ac:	ef 92       	push	r14
     7ae:	ff 92       	push	r15
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	cd b7       	in	r28, 0x3d	; 61
     7ba:	de b7       	in	r29, 0x3e	; 62
     7bc:	66 97       	sbiw	r28, 0x16	; 22
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	f8 94       	cli
     7c2:	de bf       	out	0x3e, r29	; 62
     7c4:	0f be       	out	0x3f, r0	; 63
     7c6:	cd bf       	out	0x3d, r28	; 61
     7c8:	1c 01       	movw	r2, r24
     7ca:	29 83       	std	Y+1, r18	; 0x01
     7cc:	3a 83       	std	Y+2, r19	; 0x02
     7ce:	4b 83       	std	Y+3, r20	; 0x03
     7d0:	5c 83       	std	Y+4, r21	; 0x04
	int setSpeedRight = 0;
	int setSpeedLeft = 0;
	
	//directions direction;

	switch (direction){														//This switch case switches between the directions based on the user input.
     7d2:	66 34       	cpi	r22, 0x46	; 70
     7d4:	61 f0       	breq	.+24     	; 0x7ee <motorControl+0x5a>
     7d6:	20 f4       	brcc	.+8      	; 0x7e0 <motorControl+0x4c>
     7d8:	62 34       	cpi	r22, 0x42	; 66
     7da:	09 f4       	brne	.+2      	; 0x7de <motorControl+0x4a>
     7dc:	95 c0       	rjmp	.+298    	; 0x908 <__stack+0x9>
     7de:	08 c4       	rjmp	.+2064   	; 0xff0 <__stack+0x6f1>
     7e0:	6c 34       	cpi	r22, 0x4C	; 76
     7e2:	09 f4       	brne	.+2      	; 0x7e6 <motorControl+0x52>
     7e4:	a9 c2       	rjmp	.+1362   	; 0xd38 <__stack+0x439>
     7e6:	62 35       	cpi	r22, 0x52	; 82
     7e8:	09 f4       	brne	.+2      	; 0x7ec <motorControl+0x58>
     7ea:	1b c1       	rjmp	.+566    	; 0xa22 <__stack+0x123>
     7ec:	01 c4       	rjmp	.+2050   	; 0xff0 <__stack+0x6f1>
		case 'F':															//This case handles the forward movement of the 3PI robot.
		
		setSpeed = speed - speedCurrent;
     7ee:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <speedCurrent>
     7f2:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <speedCurrent+0x1>
     7f6:	91 01       	movw	r18, r2
     7f8:	28 1b       	sub	r18, r24
     7fa:	39 0b       	sbc	r19, r25
     7fc:	45 e6       	ldi	r20, 0x65	; 101
     7fe:	50 e0       	ldi	r21, 0x00	; 0
     800:	5a 87       	std	Y+10, r21	; 0x0a
     802:	49 87       	std	Y+9, r20	; 0x09
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){	//This for loop increases the speed of the current speed to the desired speed with a total of a 100 increments.
     804:	41 2c       	mov	r4, r1
     806:	51 2c       	mov	r5, r1
     808:	32 01       	movw	r6, r4
			timerStart = get_ms();
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2*M_PI ) ) * sin ( 2* M_PI * accelerationCounter ) ) );		//This function transfers the input speed to a segmented speed increase based on the swept sinusoidal curve.
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     80a:	03 2e       	mov	r0, r19
     80c:	00 0c       	add	r0, r0
     80e:	44 0b       	sbc	r20, r20
     810:	55 0b       	sbc	r21, r21
     812:	2d 83       	std	Y+5, r18	; 0x05
     814:	3e 83       	std	Y+6, r19	; 0x06
     816:	4f 83       	std	Y+7, r20	; 0x07
     818:	58 87       	std	Y+8, r21	; 0x08
		case 'F':															//This case handles the forward movement of the 3PI robot.
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){	//This for loop increases the speed of the current speed to the desired speed with a total of a 100 increments.
			timerStart = get_ms();
     81a:	0e 94 93 13 	call	0x2726	; 0x2726 <get_ms>
     81e:	8b 01       	movw	r16, r22
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2*M_PI ) ) * sin ( 2* M_PI * accelerationCounter ) ) );		//This function transfers the input speed to a segmented speed increase based on the swept sinusoidal curve.
     820:	2b ed       	ldi	r18, 0xDB	; 219
     822:	3f e0       	ldi	r19, 0x0F	; 15
     824:	49 ec       	ldi	r20, 0xC9	; 201
     826:	50 e4       	ldi	r21, 0x40	; 64
     828:	c3 01       	movw	r24, r6
     82a:	b2 01       	movw	r22, r4
     82c:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__mulsf3>
     830:	0e 94 0d 0b 	call	0x161a	; 0x161a <sin>
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     834:	23 e8       	ldi	r18, 0x83	; 131
     836:	39 ef       	ldi	r19, 0xF9	; 249
     838:	42 e2       	ldi	r20, 0x22	; 34
     83a:	5e e3       	ldi	r21, 0x3E	; 62
     83c:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__mulsf3>
     840:	9b 01       	movw	r18, r22
     842:	ac 01       	movw	r20, r24
     844:	c3 01       	movw	r24, r6
     846:	b2 01       	movw	r22, r4
     848:	0e 94 41 09 	call	0x1282	; 0x1282 <__subsf3>
     84c:	4b 01       	movw	r8, r22
     84e:	5c 01       	movw	r10, r24
     850:	6d 81       	ldd	r22, Y+5	; 0x05
     852:	7e 81       	ldd	r23, Y+6	; 0x06
     854:	8f 81       	ldd	r24, Y+7	; 0x07
     856:	98 85       	ldd	r25, Y+8	; 0x08
     858:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__floatsisf>
     85c:	9b 01       	movw	r18, r22
     85e:	ac 01       	movw	r20, r24
     860:	c5 01       	movw	r24, r10
     862:	b4 01       	movw	r22, r8
     864:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__mulsf3>
     868:	4b 01       	movw	r8, r22
     86a:	5c 01       	movw	r10, r24
     86c:	60 91 05 02 	lds	r22, 0x0205	; 0x800205 <speedCurrent>
     870:	70 91 06 02 	lds	r23, 0x0206	; 0x800206 <speedCurrent+0x1>
     874:	07 2e       	mov	r0, r23
     876:	00 0c       	add	r0, r0
     878:	88 0b       	sbc	r24, r24
     87a:	99 0b       	sbc	r25, r25
     87c:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__floatsisf>
     880:	9b 01       	movw	r18, r22
     882:	ac 01       	movw	r20, r24
     884:	c5 01       	movw	r24, r10
     886:	b4 01       	movw	r22, r8
     888:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     88c:	0e 94 b3 09 	call	0x1366	; 0x1366 <__fixsfsi>
     890:	dc 01       	movw	r26, r24
     892:	cb 01       	movw	r24, r22
     894:	bc 01       	movw	r22, r24
     896:	0e 94 1a 12 	call	0x2434	; 0x2434 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {											//This while loop temporarily freezes the system to make sure that the increments are spaced properly to facilitate a fluent and consequent increase in speed.
     89a:	48 01       	movw	r8, r16
     89c:	11 0f       	add	r17, r17
     89e:	aa 08       	sbc	r10, r10
     8a0:	bb 08       	sbc	r11, r11
     8a2:	0e 94 93 13 	call	0x2726	; 0x2726 <get_ms>
     8a6:	68 19       	sub	r22, r8
     8a8:	79 09       	sbc	r23, r9
     8aa:	8a 09       	sbc	r24, r10
     8ac:	9b 09       	sbc	r25, r11
     8ae:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__floatunsisf>
     8b2:	6b 01       	movw	r12, r22
     8b4:	7c 01       	movw	r14, r24
     8b6:	20 e0       	ldi	r18, 0x00	; 0
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	40 e2       	ldi	r20, 0x20	; 32
     8bc:	51 e4       	ldi	r21, 0x41	; 65
     8be:	69 81       	ldd	r22, Y+1	; 0x01
     8c0:	7a 81       	ldd	r23, Y+2	; 0x02
     8c2:	8b 81       	ldd	r24, Y+3	; 0x03
     8c4:	9c 81       	ldd	r25, Y+4	; 0x04
     8c6:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__mulsf3>
     8ca:	9b 01       	movw	r18, r22
     8cc:	ac 01       	movw	r20, r24
     8ce:	c7 01       	movw	r24, r14
     8d0:	b6 01       	movw	r22, r12
     8d2:	0e 94 ae 09 	call	0x135c	; 0x135c <__cmpsf2>
     8d6:	88 23       	and	r24, r24
     8d8:	24 f3       	brlt	.-56     	; 0x8a2 <motorControl+0x10e>
	switch (direction){														//This switch case switches between the directions based on the user input.
		case 'F':															//This case handles the forward movement of the 3PI robot.
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){	//This for loop increases the speed of the current speed to the desired speed with a total of a 100 increments.
     8da:	2a e0       	ldi	r18, 0x0A	; 10
     8dc:	37 ed       	ldi	r19, 0xD7	; 215
     8de:	43 e2       	ldi	r20, 0x23	; 35
     8e0:	5c e3       	ldi	r21, 0x3C	; 60
     8e2:	c3 01       	movw	r24, r6
     8e4:	b2 01       	movw	r22, r4
     8e6:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     8ea:	2b 01       	movw	r4, r22
     8ec:	3c 01       	movw	r6, r24
     8ee:	a9 85       	ldd	r26, Y+9	; 0x09
     8f0:	ba 85       	ldd	r27, Y+10	; 0x0a
     8f2:	11 97       	sbiw	r26, 0x01	; 1
     8f4:	ba 87       	std	Y+10, r27	; 0x0a
     8f6:	a9 87       	std	Y+9, r26	; 0x09
     8f8:	ab 2b       	or	r26, r27
     8fa:	09 f0       	breq	.+2      	; 0x8fe <motorControl+0x16a>
     8fc:	8e cf       	rjmp	.-228    	; 0x81a <motorControl+0x86>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {											//This while loop temporarily freezes the system to make sure that the increments are spaced properly to facilitate a fluent and consequent increase in speed.
				//Change the aggression factor to manipulate the acceleration time. A shorter time increases the overall jerk of the acceleration.
			}
		}
		speedCurrent = speed;
     8fe:	30 92 06 02 	sts	0x0206, r3	; 0x800206 <speedCurrent+0x1>
     902:	20 92 05 02 	sts	0x0205, r2	; 0x800205 <speedCurrent>
		break;
     906:	7a c3       	rjmp	.+1780   	; 0xffc <__stack+0x6fd>
		
		case 'B':		//This case handles the backward movement of the robot. While the robot does not require this function in the standard routine, it is desired when operating the robot in manual mode.
		
		setSpeed = speed - speedCurrent;
     908:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <speedCurrent>
     90c:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <speedCurrent+0x1>
     910:	91 01       	movw	r18, r2
     912:	28 1b       	sub	r18, r24
     914:	39 0b       	sbc	r19, r25
     916:	45 e6       	ldi	r20, 0x65	; 101
     918:	50 e0       	ldi	r21, 0x00	; 0
     91a:	5a 87       	std	Y+10, r21	; 0x0a
     91c:	49 87       	std	Y+9, r20	; 0x09
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     91e:	41 2c       	mov	r4, r1
     920:	51 2c       	mov	r5, r1
     922:	32 01       	movw	r6, r4
			timerStart = get_ms();
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     924:	03 2e       	mov	r0, r19
     926:	00 0c       	add	r0, r0
     928:	44 0b       	sbc	r20, r20
     92a:	55 0b       	sbc	r21, r21
     92c:	2d 83       	std	Y+5, r18	; 0x05
     92e:	3e 83       	std	Y+6, r19	; 0x06
     930:	4f 83       	std	Y+7, r20	; 0x07
     932:	58 87       	std	Y+8, r21	; 0x08
		case 'B':		//This case handles the backward movement of the robot. While the robot does not require this function in the standard routine, it is desired when operating the robot in manual mode.
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     934:	0e 94 93 13 	call	0x2726	; 0x2726 <get_ms>
     938:	8b 01       	movw	r16, r22
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) );
     93a:	2b ed       	ldi	r18, 0xDB	; 219
     93c:	3f e0       	ldi	r19, 0x0F	; 15
     93e:	49 ec       	ldi	r20, 0xC9	; 201
     940:	50 e4       	ldi	r21, 0x40	; 64
     942:	c3 01       	movw	r24, r6
     944:	b2 01       	movw	r22, r4
     946:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__mulsf3>
     94a:	0e 94 0d 0b 	call	0x161a	; 0x161a <sin>
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     94e:	23 e8       	ldi	r18, 0x83	; 131
     950:	39 ef       	ldi	r19, 0xF9	; 249
     952:	42 e2       	ldi	r20, 0x22	; 34
     954:	5e e3       	ldi	r21, 0x3E	; 62
     956:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__mulsf3>
     95a:	9b 01       	movw	r18, r22
     95c:	ac 01       	movw	r20, r24
     95e:	c3 01       	movw	r24, r6
     960:	b2 01       	movw	r22, r4
     962:	0e 94 41 09 	call	0x1282	; 0x1282 <__subsf3>
     966:	4b 01       	movw	r8, r22
     968:	5c 01       	movw	r10, r24
     96a:	6d 81       	ldd	r22, Y+5	; 0x05
     96c:	7e 81       	ldd	r23, Y+6	; 0x06
     96e:	8f 81       	ldd	r24, Y+7	; 0x07
     970:	98 85       	ldd	r25, Y+8	; 0x08
     972:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__floatsisf>
     976:	9b 01       	movw	r18, r22
     978:	ac 01       	movw	r20, r24
     97a:	c5 01       	movw	r24, r10
     97c:	b4 01       	movw	r22, r8
     97e:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__mulsf3>
     982:	4b 01       	movw	r8, r22
     984:	5c 01       	movw	r10, r24
     986:	60 91 05 02 	lds	r22, 0x0205	; 0x800205 <speedCurrent>
     98a:	70 91 06 02 	lds	r23, 0x0206	; 0x800206 <speedCurrent+0x1>
     98e:	07 2e       	mov	r0, r23
     990:	00 0c       	add	r0, r0
     992:	88 0b       	sbc	r24, r24
     994:	99 0b       	sbc	r25, r25
     996:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__floatsisf>
     99a:	9b 01       	movw	r18, r22
     99c:	ac 01       	movw	r20, r24
     99e:	c5 01       	movw	r24, r10
     9a0:	b4 01       	movw	r22, r8
     9a2:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     9a6:	0e 94 b3 09 	call	0x1366	; 0x1366 <__fixsfsi>
     9aa:	dc 01       	movw	r26, r24
     9ac:	cb 01       	movw	r24, r22
     9ae:	bc 01       	movw	r22, r24
     9b0:	0e 94 1a 12 	call	0x2434	; 0x2434 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     9b4:	48 01       	movw	r8, r16
     9b6:	11 0f       	add	r17, r17
     9b8:	aa 08       	sbc	r10, r10
     9ba:	bb 08       	sbc	r11, r11
     9bc:	0e 94 93 13 	call	0x2726	; 0x2726 <get_ms>
     9c0:	68 19       	sub	r22, r8
     9c2:	79 09       	sbc	r23, r9
     9c4:	8a 09       	sbc	r24, r10
     9c6:	9b 09       	sbc	r25, r11
     9c8:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__floatunsisf>
     9cc:	6b 01       	movw	r12, r22
     9ce:	7c 01       	movw	r14, r24
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e2       	ldi	r20, 0x20	; 32
     9d6:	51 e4       	ldi	r21, 0x41	; 65
     9d8:	69 81       	ldd	r22, Y+1	; 0x01
     9da:	7a 81       	ldd	r23, Y+2	; 0x02
     9dc:	8b 81       	ldd	r24, Y+3	; 0x03
     9de:	9c 81       	ldd	r25, Y+4	; 0x04
     9e0:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__mulsf3>
     9e4:	9b 01       	movw	r18, r22
     9e6:	ac 01       	movw	r20, r24
     9e8:	c7 01       	movw	r24, r14
     9ea:	b6 01       	movw	r22, r12
     9ec:	0e 94 ae 09 	call	0x135c	; 0x135c <__cmpsf2>
     9f0:	88 23       	and	r24, r24
     9f2:	24 f3       	brlt	.-56     	; 0x9bc <__stack+0xbd>
		
		case 'B':		//This case handles the backward movement of the robot. While the robot does not require this function in the standard routine, it is desired when operating the robot in manual mode.
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     9f4:	2a e0       	ldi	r18, 0x0A	; 10
     9f6:	37 ed       	ldi	r19, 0xD7	; 215
     9f8:	43 e2       	ldi	r20, 0x23	; 35
     9fa:	5c e3       	ldi	r21, 0x3C	; 60
     9fc:	c3 01       	movw	r24, r6
     9fe:	b2 01       	movw	r22, r4
     a00:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     a04:	2b 01       	movw	r4, r22
     a06:	3c 01       	movw	r6, r24
     a08:	a9 85       	ldd	r26, Y+9	; 0x09
     a0a:	ba 85       	ldd	r27, Y+10	; 0x0a
     a0c:	11 97       	sbiw	r26, 0x01	; 1
     a0e:	ba 87       	std	Y+10, r27	; 0x0a
     a10:	a9 87       	std	Y+9, r26	; 0x09
     a12:	ab 2b       	or	r26, r27
     a14:	09 f0       	breq	.+2      	; 0xa18 <__stack+0x119>
     a16:	8e cf       	rjmp	.-228    	; 0x934 <__stack+0x35>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrent = speed;
     a18:	30 92 06 02 	sts	0x0206, r3	; 0x800206 <speedCurrent+0x1>
     a1c:	20 92 05 02 	sts	0x0205, r2	; 0x800205 <speedCurrent>
		break;
     a20:	ed c2       	rjmp	.+1498   	; 0xffc <__stack+0x6fd>

		case 'R':		//This case handles the rotation of the robot 90 degrees to the right. The robot accelerates and decelerates with the same method used with forward and backward movement.
		
		setSpeedRight = speed + speedCurrentRight;
     a22:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <speedCurrentRight>
     a26:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <speedCurrentRight+0x1>
     a2a:	82 0d       	add	r24, r2
     a2c:	93 1d       	adc	r25, r3
		setSpeedLeft = speed - speedCurrentLeft;
     a2e:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <speedCurrentLeft>
     a32:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <speedCurrentLeft+0x1>
     a36:	a1 01       	movw	r20, r2
     a38:	42 1b       	sub	r20, r18
     a3a:	53 0b       	sbc	r21, r19
     a3c:	9a 01       	movw	r18, r20
     a3e:	05 e6       	ldi	r16, 0x65	; 101
     a40:	10 e0       	ldi	r17, 0x00	; 0
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     a42:	1d 82       	std	Y+5, r1	; 0x05
     a44:	1e 82       	std	Y+6, r1	; 0x06
     a46:	1f 82       	std	Y+7, r1	; 0x07
     a48:	18 86       	std	Y+8, r1	; 0x08
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			motorLeftSpeed = speedCurrent + (speedCurrentLeft + (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     a4a:	ac 01       	movw	r20, r24
     a4c:	99 0f       	add	r25, r25
     a4e:	66 0b       	sbc	r22, r22
     a50:	77 0b       	sbc	r23, r23
     a52:	4d 87       	std	Y+13, r20	; 0x0d
     a54:	5e 87       	std	Y+14, r21	; 0x0e
     a56:	6f 87       	std	Y+15, r22	; 0x0f
     a58:	78 8b       	std	Y+16, r23	; 0x10
     a5a:	b9 01       	movw	r22, r18
     a5c:	33 0f       	add	r19, r19
     a5e:	88 0b       	sbc	r24, r24
     a60:	99 0b       	sbc	r25, r25
     a62:	69 8b       	std	Y+17, r22	; 0x11
     a64:	7a 8b       	std	Y+18, r23	; 0x12
     a66:	8b 8b       	std	Y+19, r24	; 0x13
     a68:	9c 8b       	std	Y+20, r25	; 0x14
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     a6a:	0e 94 93 13 	call	0x2726	; 0x2726 <get_ms>
     a6e:	7e 8b       	std	Y+22, r23	; 0x16
     a70:	6d 8b       	std	Y+21, r22	; 0x15
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
     a72:	60 91 05 02 	lds	r22, 0x0205	; 0x800205 <speedCurrent>
     a76:	70 91 06 02 	lds	r23, 0x0206	; 0x800206 <speedCurrent+0x1>
     a7a:	07 2e       	mov	r0, r23
     a7c:	00 0c       	add	r0, r0
     a7e:	88 0b       	sbc	r24, r24
     a80:	99 0b       	sbc	r25, r25
     a82:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__floatsisf>
     a86:	69 87       	std	Y+9, r22	; 0x09
     a88:	7a 87       	std	Y+10, r23	; 0x0a
     a8a:	8b 87       	std	Y+11, r24	; 0x0b
     a8c:	9c 87       	std	Y+12, r25	; 0x0c
     a8e:	2b ed       	ldi	r18, 0xDB	; 219
     a90:	3f e0       	ldi	r19, 0x0F	; 15
     a92:	49 ec       	ldi	r20, 0xC9	; 201
     a94:	50 e4       	ldi	r21, 0x40	; 64
     a96:	6d 81       	ldd	r22, Y+5	; 0x05
     a98:	7e 81       	ldd	r23, Y+6	; 0x06
     a9a:	8f 81       	ldd	r24, Y+7	; 0x07
     a9c:	98 85       	ldd	r25, Y+8	; 0x08
     a9e:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__mulsf3>
     aa2:	0e 94 0d 0b 	call	0x161a	; 0x161a <sin>
     aa6:	23 e8       	ldi	r18, 0x83	; 131
     aa8:	39 ef       	ldi	r19, 0xF9	; 249
     aaa:	42 e2       	ldi	r20, 0x22	; 34
     aac:	5e e3       	ldi	r21, 0x3E	; 62
     aae:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__mulsf3>
     ab2:	2d 81       	ldd	r18, Y+5	; 0x05
     ab4:	3e 81       	ldd	r19, Y+6	; 0x06
     ab6:	4f 81       	ldd	r20, Y+7	; 0x07
     ab8:	58 85       	ldd	r21, Y+8	; 0x08
     aba:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     abe:	4b 01       	movw	r8, r22
     ac0:	5c 01       	movw	r10, r24
			
			motorLeftSpeed = speedCurrent + (speedCurrentLeft + (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     ac2:	60 91 03 02 	lds	r22, 0x0203	; 0x800203 <speedCurrentRight>
     ac6:	70 91 04 02 	lds	r23, 0x0204	; 0x800204 <speedCurrentRight+0x1>
     aca:	07 2e       	mov	r0, r23
     acc:	00 0c       	add	r0, r0
     ace:	88 0b       	sbc	r24, r24
     ad0:	99 0b       	sbc	r25, r25
     ad2:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__floatsisf>
     ad6:	2b 01       	movw	r4, r22
     ad8:	3c 01       	movw	r6, r24
     ada:	6d 85       	ldd	r22, Y+13	; 0x0d
     adc:	7e 85       	ldd	r23, Y+14	; 0x0e
     ade:	8f 85       	ldd	r24, Y+15	; 0x0f
     ae0:	98 89       	ldd	r25, Y+16	; 0x10
     ae2:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__floatsisf>
     ae6:	a5 01       	movw	r20, r10
     ae8:	94 01       	movw	r18, r8
     aea:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__mulsf3>
     aee:	9b 01       	movw	r18, r22
     af0:	ac 01       	movw	r20, r24
     af2:	c3 01       	movw	r24, r6
     af4:	b2 01       	movw	r22, r4
     af6:	0e 94 41 09 	call	0x1282	; 0x1282 <__subsf3>
     afa:	29 85       	ldd	r18, Y+9	; 0x09
     afc:	3a 85       	ldd	r19, Y+10	; 0x0a
     afe:	4b 85       	ldd	r20, Y+11	; 0x0b
     b00:	5c 85       	ldd	r21, Y+12	; 0x0c
     b02:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     b06:	0e 94 b3 09 	call	0x1366	; 0x1366 <__fixsfsi>
     b0a:	2b 01       	movw	r4, r22
     b0c:	3c 01       	movw	r6, r24
     b0e:	60 91 01 02 	lds	r22, 0x0201	; 0x800201 <speedCurrentLeft>
     b12:	70 91 02 02 	lds	r23, 0x0202	; 0x800202 <speedCurrentLeft+0x1>
     b16:	07 2e       	mov	r0, r23
     b18:	00 0c       	add	r0, r0
     b1a:	88 0b       	sbc	r24, r24
     b1c:	99 0b       	sbc	r25, r25
     b1e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__floatsisf>
     b22:	6b 01       	movw	r12, r22
     b24:	7c 01       	movw	r14, r24
     b26:	69 89       	ldd	r22, Y+17	; 0x11
     b28:	7a 89       	ldd	r23, Y+18	; 0x12
     b2a:	8b 89       	ldd	r24, Y+19	; 0x13
     b2c:	9c 89       	ldd	r25, Y+20	; 0x14
     b2e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__floatsisf>
     b32:	a5 01       	movw	r20, r10
     b34:	94 01       	movw	r18, r8
     b36:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__mulsf3>
     b3a:	9b 01       	movw	r18, r22
     b3c:	ac 01       	movw	r20, r24
     b3e:	c7 01       	movw	r24, r14
     b40:	b6 01       	movw	r22, r12
     b42:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     b46:	29 85       	ldd	r18, Y+9	; 0x09
     b48:	3a 85       	ldd	r19, Y+10	; 0x0a
     b4a:	4b 85       	ldd	r20, Y+11	; 0x0b
     b4c:	5c 85       	ldd	r21, Y+12	; 0x0c
     b4e:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     b52:	0e 94 b3 09 	call	0x1366	; 0x1366 <__fixsfsi>
     b56:	dc 01       	movw	r26, r24
     b58:	cb 01       	movw	r24, r22
     b5a:	b2 01       	movw	r22, r4
     b5c:	0e 94 1a 12 	call	0x2434	; 0x2434 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     b60:	8d 89       	ldd	r24, Y+21	; 0x15
     b62:	9e 89       	ldd	r25, Y+22	; 0x16
     b64:	4c 01       	movw	r8, r24
     b66:	99 0f       	add	r25, r25
     b68:	aa 08       	sbc	r10, r10
     b6a:	bb 08       	sbc	r11, r11
     b6c:	0e 94 93 13 	call	0x2726	; 0x2726 <get_ms>
     b70:	6b 01       	movw	r12, r22
     b72:	7c 01       	movw	r14, r24
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	40 e2       	ldi	r20, 0x20	; 32
     b7a:	51 e4       	ldi	r21, 0x41	; 65
     b7c:	69 81       	ldd	r22, Y+1	; 0x01
     b7e:	7a 81       	ldd	r23, Y+2	; 0x02
     b80:	8b 81       	ldd	r24, Y+3	; 0x03
     b82:	9c 81       	ldd	r25, Y+4	; 0x04
     b84:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__mulsf3>
     b88:	2b 01       	movw	r4, r22
     b8a:	3c 01       	movw	r6, r24
     b8c:	c7 01       	movw	r24, r14
     b8e:	b6 01       	movw	r22, r12
     b90:	68 19       	sub	r22, r8
     b92:	79 09       	sbc	r23, r9
     b94:	8a 09       	sbc	r24, r10
     b96:	9b 09       	sbc	r25, r11
     b98:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__floatunsisf>
     b9c:	a3 01       	movw	r20, r6
     b9e:	92 01       	movw	r18, r4
     ba0:	0e 94 ae 09 	call	0x135c	; 0x135c <__cmpsf2>
     ba4:	88 23       	and	r24, r24
     ba6:	14 f3       	brlt	.-60     	; 0xb6c <__stack+0x26d>
		case 'R':		//This case handles the rotation of the robot 90 degrees to the right. The robot accelerates and decelerates with the same method used with forward and backward movement.
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     ba8:	2a e0       	ldi	r18, 0x0A	; 10
     baa:	37 ed       	ldi	r19, 0xD7	; 215
     bac:	43 e2       	ldi	r20, 0x23	; 35
     bae:	5c e3       	ldi	r21, 0x3C	; 60
     bb0:	6d 81       	ldd	r22, Y+5	; 0x05
     bb2:	7e 81       	ldd	r23, Y+6	; 0x06
     bb4:	8f 81       	ldd	r24, Y+7	; 0x07
     bb6:	98 85       	ldd	r25, Y+8	; 0x08
     bb8:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     bbc:	6d 83       	std	Y+5, r22	; 0x05
     bbe:	7e 83       	std	Y+6, r23	; 0x06
     bc0:	8f 83       	std	Y+7, r24	; 0x07
     bc2:	98 87       	std	Y+8, r25	; 0x08
     bc4:	01 50       	subi	r16, 0x01	; 1
     bc6:	11 09       	sbc	r17, r1
     bc8:	09 f0       	breq	.+2      	; 0xbcc <__stack+0x2cd>
     bca:	4f cf       	rjmp	.-354    	; 0xa6a <__stack+0x16b>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = -speed;
     bcc:	88 27       	eor	r24, r24
     bce:	99 27       	eor	r25, r25
     bd0:	82 19       	sub	r24, r2
     bd2:	93 09       	sbc	r25, r3
     bd4:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <speedCurrentRight+0x1>
     bd8:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <speedCurrentRight>
		speedCurrentLeft = speed;
     bdc:	30 92 02 02 	sts	0x0202, r3	; 0x800202 <speedCurrentLeft+0x1>
     be0:	20 92 01 02 	sts	0x0201, r2	; 0x800201 <speedCurrentLeft>
     be4:	05 e6       	ldi	r16, 0x65	; 101
     be6:	10 e0       	ldi	r17, 0x00	; 0
		speed = 0;
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     be8:	19 82       	std	Y+1, r1	; 0x01
     bea:	1a 82       	std	Y+2, r1	; 0x02
     bec:	1b 82       	std	Y+3, r1	; 0x03
     bee:	1c 82       	std	Y+4, r1	; 0x04
			timerStart = get_ms();
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
     bf0:	9c 01       	movw	r18, r24
     bf2:	99 0f       	add	r25, r25
     bf4:	44 0b       	sbc	r20, r20
     bf6:	55 0b       	sbc	r21, r21
     bf8:	29 87       	std	Y+9, r18	; 0x09
     bfa:	3a 87       	std	Y+10, r19	; 0x0a
     bfc:	4b 87       	std	Y+11, r20	; 0x0b
     bfe:	5c 87       	std	Y+12, r21	; 0x0c
     c00:	c1 2c       	mov	r12, r1
     c02:	d1 2c       	mov	r13, r1
     c04:	76 01       	movw	r14, r12
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     c06:	0e 94 93 13 	call	0x2726	; 0x2726 <get_ms>
     c0a:	7e 87       	std	Y+14, r23	; 0x0e
     c0c:	6d 87       	std	Y+13, r22	; 0x0d
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
     c0e:	60 91 05 02 	lds	r22, 0x0205	; 0x800205 <speedCurrent>
     c12:	70 91 06 02 	lds	r23, 0x0206	; 0x800206 <speedCurrent+0x1>
     c16:	07 2e       	mov	r0, r23
     c18:	00 0c       	add	r0, r0
     c1a:	88 0b       	sbc	r24, r24
     c1c:	99 0b       	sbc	r25, r25
     c1e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__floatsisf>
     c22:	69 83       	std	Y+1, r22	; 0x01
     c24:	7a 83       	std	Y+2, r23	; 0x02
     c26:	8b 83       	std	Y+3, r24	; 0x03
     c28:	9c 83       	std	Y+4, r25	; 0x04
     c2a:	2b ed       	ldi	r18, 0xDB	; 219
     c2c:	3f e0       	ldi	r19, 0x0F	; 15
     c2e:	49 ec       	ldi	r20, 0xC9	; 201
     c30:	50 e4       	ldi	r21, 0x40	; 64
     c32:	c7 01       	movw	r24, r14
     c34:	b6 01       	movw	r22, r12
     c36:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__mulsf3>
     c3a:	0e 94 0d 0b 	call	0x161a	; 0x161a <sin>
     c3e:	23 e8       	ldi	r18, 0x83	; 131
     c40:	39 ef       	ldi	r19, 0xF9	; 249
     c42:	42 e2       	ldi	r20, 0x22	; 34
     c44:	5e e3       	ldi	r21, 0x3E	; 62
     c46:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__mulsf3>
     c4a:	a7 01       	movw	r20, r14
     c4c:	96 01       	movw	r18, r12
     c4e:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     c52:	4b 01       	movw	r8, r22
     c54:	5c 01       	movw	r10, r24
     c56:	69 85       	ldd	r22, Y+9	; 0x09
     c58:	7a 85       	ldd	r23, Y+10	; 0x0a
     c5a:	8b 85       	ldd	r24, Y+11	; 0x0b
     c5c:	9c 85       	ldd	r25, Y+12	; 0x0c
     c5e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__floatsisf>
     c62:	9b 01       	movw	r18, r22
     c64:	ac 01       	movw	r20, r24
     c66:	c5 01       	movw	r24, r10
     c68:	b4 01       	movw	r22, r8
     c6a:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__mulsf3>
     c6e:	4b 01       	movw	r8, r22
     c70:	5c 01       	movw	r10, r24
			
			motorLeftSpeed = speedCurrent + (speedCurrentLeft + (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     c72:	60 91 03 02 	lds	r22, 0x0203	; 0x800203 <speedCurrentRight>
     c76:	70 91 04 02 	lds	r23, 0x0204	; 0x800204 <speedCurrentRight+0x1>
     c7a:	07 2e       	mov	r0, r23
     c7c:	00 0c       	add	r0, r0
     c7e:	88 0b       	sbc	r24, r24
     c80:	99 0b       	sbc	r25, r25
     c82:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__floatsisf>
     c86:	a5 01       	movw	r20, r10
     c88:	94 01       	movw	r18, r8
     c8a:	0e 94 41 09 	call	0x1282	; 0x1282 <__subsf3>
     c8e:	29 81       	ldd	r18, Y+1	; 0x01
     c90:	3a 81       	ldd	r19, Y+2	; 0x02
     c92:	4b 81       	ldd	r20, Y+3	; 0x03
     c94:	5c 81       	ldd	r21, Y+4	; 0x04
     c96:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     c9a:	0e 94 b3 09 	call	0x1366	; 0x1366 <__fixsfsi>
     c9e:	6d 83       	std	Y+5, r22	; 0x05
     ca0:	7e 83       	std	Y+6, r23	; 0x06
     ca2:	8f 83       	std	Y+7, r24	; 0x07
     ca4:	98 87       	std	Y+8, r25	; 0x08
     ca6:	60 91 01 02 	lds	r22, 0x0201	; 0x800201 <speedCurrentLeft>
     caa:	70 91 02 02 	lds	r23, 0x0202	; 0x800202 <speedCurrentLeft+0x1>
     cae:	07 2e       	mov	r0, r23
     cb0:	00 0c       	add	r0, r0
     cb2:	88 0b       	sbc	r24, r24
     cb4:	99 0b       	sbc	r25, r25
     cb6:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__floatsisf>
     cba:	a5 01       	movw	r20, r10
     cbc:	94 01       	movw	r18, r8
     cbe:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     cc2:	29 81       	ldd	r18, Y+1	; 0x01
     cc4:	3a 81       	ldd	r19, Y+2	; 0x02
     cc6:	4b 81       	ldd	r20, Y+3	; 0x03
     cc8:	5c 81       	ldd	r21, Y+4	; 0x04
     cca:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     cce:	0e 94 b3 09 	call	0x1366	; 0x1366 <__fixsfsi>
     cd2:	dc 01       	movw	r26, r24
     cd4:	cb 01       	movw	r24, r22
     cd6:	6d 81       	ldd	r22, Y+5	; 0x05
     cd8:	7e 81       	ldd	r23, Y+6	; 0x06
     cda:	0e 94 1a 12 	call	0x2434	; 0x2434 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     cde:	4d 85       	ldd	r20, Y+13	; 0x0d
     ce0:	5e 85       	ldd	r21, Y+14	; 0x0e
     ce2:	4a 01       	movw	r8, r20
     ce4:	55 0f       	add	r21, r21
     ce6:	aa 08       	sbc	r10, r10
     ce8:	bb 08       	sbc	r11, r11
     cea:	0e 94 93 13 	call	0x2726	; 0x2726 <get_ms>
     cee:	68 19       	sub	r22, r8
     cf0:	79 09       	sbc	r23, r9
     cf2:	8a 09       	sbc	r24, r10
     cf4:	9b 09       	sbc	r25, r11
     cf6:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__floatunsisf>
     cfa:	9b 01       	movw	r18, r22
     cfc:	ac 01       	movw	r20, r24
     cfe:	c3 01       	movw	r24, r6
     d00:	b2 01       	movw	r22, r4
     d02:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__gesf2>
     d06:	18 16       	cp	r1, r24
     d08:	84 f3       	brlt	.-32     	; 0xcea <__stack+0x3eb>
		speed = 0;
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     d0a:	2a e0       	ldi	r18, 0x0A	; 10
     d0c:	37 ed       	ldi	r19, 0xD7	; 215
     d0e:	43 e2       	ldi	r20, 0x23	; 35
     d10:	5c e3       	ldi	r21, 0x3C	; 60
     d12:	c7 01       	movw	r24, r14
     d14:	b6 01       	movw	r22, r12
     d16:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     d1a:	6b 01       	movw	r12, r22
     d1c:	7c 01       	movw	r14, r24
     d1e:	01 50       	subi	r16, 0x01	; 1
     d20:	11 09       	sbc	r17, r1
     d22:	09 f0       	breq	.+2      	; 0xd26 <__stack+0x427>
     d24:	70 cf       	rjmp	.-288    	; 0xc06 <__stack+0x307>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = -speed;
     d26:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <speedCurrentRight+0x1>
     d2a:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <speedCurrentRight>
		speedCurrentLeft = speed;
     d2e:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <speedCurrentLeft+0x1>
     d32:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <speedCurrentLeft>
		
		break;
     d36:	62 c1       	rjmp	.+708    	; 0xffc <__stack+0x6fd>

		case 'L': //This case handles the rotation of the robot 90 degrees to the left. The robot accelerates and decelerates with the same method used with forward and backward movement.
		
		setSpeedRight = speed - speedCurrentRight;
     d38:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <speedCurrentRight>
     d3c:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <speedCurrentRight+0x1>
     d40:	91 01       	movw	r18, r2
     d42:	28 1b       	sub	r18, r24
     d44:	39 0b       	sbc	r19, r25
		setSpeedLeft = speed + speedCurrentLeft;
     d46:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <speedCurrentLeft>
     d4a:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <speedCurrentLeft+0x1>
     d4e:	82 0d       	add	r24, r2
     d50:	93 1d       	adc	r25, r3
     d52:	65 e6       	ldi	r22, 0x65	; 101
     d54:	70 e0       	ldi	r23, 0x00	; 0
     d56:	7a 8b       	std	Y+18, r23	; 0x12
     d58:	69 8b       	std	Y+17, r22	; 0x11
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     d5a:	1d 82       	std	Y+5, r1	; 0x05
     d5c:	1e 82       	std	Y+6, r1	; 0x06
     d5e:	1f 82       	std	Y+7, r1	; 0x07
     d60:	18 86       	std	Y+8, r1	; 0x08
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
			
			motorLeftSpeed = speedCurrentLeft - (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ));
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     d62:	a9 01       	movw	r20, r18
     d64:	33 0f       	add	r19, r19
     d66:	66 0b       	sbc	r22, r22
     d68:	77 0b       	sbc	r23, r23
     d6a:	49 87       	std	Y+9, r20	; 0x09
     d6c:	5a 87       	std	Y+10, r21	; 0x0a
     d6e:	6b 87       	std	Y+11, r22	; 0x0b
     d70:	7c 87       	std	Y+12, r23	; 0x0c
     d72:	9c 01       	movw	r18, r24
     d74:	99 0f       	add	r25, r25
     d76:	44 0b       	sbc	r20, r20
     d78:	55 0b       	sbc	r21, r21
     d7a:	2d 87       	std	Y+13, r18	; 0x0d
     d7c:	3e 87       	std	Y+14, r19	; 0x0e
     d7e:	4f 87       	std	Y+15, r20	; 0x0f
     d80:	58 8b       	std	Y+16, r21	; 0x10
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     d82:	0e 94 93 13 	call	0x2726	; 0x2726 <get_ms>
     d86:	8b 01       	movw	r16, r22
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
     d88:	2b ed       	ldi	r18, 0xDB	; 219
     d8a:	3f e0       	ldi	r19, 0x0F	; 15
     d8c:	49 ec       	ldi	r20, 0xC9	; 201
     d8e:	50 e4       	ldi	r21, 0x40	; 64
     d90:	6d 81       	ldd	r22, Y+5	; 0x05
     d92:	7e 81       	ldd	r23, Y+6	; 0x06
     d94:	8f 81       	ldd	r24, Y+7	; 0x07
     d96:	98 85       	ldd	r25, Y+8	; 0x08
     d98:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__mulsf3>
     d9c:	0e 94 0d 0b 	call	0x161a	; 0x161a <sin>
     da0:	23 e8       	ldi	r18, 0x83	; 131
     da2:	39 ef       	ldi	r19, 0xF9	; 249
     da4:	42 e2       	ldi	r20, 0x22	; 34
     da6:	5e e3       	ldi	r21, 0x3E	; 62
     da8:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__mulsf3>
     dac:	2d 81       	ldd	r18, Y+5	; 0x05
     dae:	3e 81       	ldd	r19, Y+6	; 0x06
     db0:	4f 81       	ldd	r20, Y+7	; 0x07
     db2:	58 85       	ldd	r21, Y+8	; 0x08
     db4:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     db8:	6b 01       	movw	r12, r22
     dba:	7c 01       	movw	r14, r24
			
			motorLeftSpeed = speedCurrentLeft - (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ));
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     dbc:	60 91 03 02 	lds	r22, 0x0203	; 0x800203 <speedCurrentRight>
     dc0:	70 91 04 02 	lds	r23, 0x0204	; 0x800204 <speedCurrentRight+0x1>
     dc4:	07 2e       	mov	r0, r23
     dc6:	00 0c       	add	r0, r0
     dc8:	88 0b       	sbc	r24, r24
     dca:	99 0b       	sbc	r25, r25
     dcc:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__floatsisf>
     dd0:	4b 01       	movw	r8, r22
     dd2:	5c 01       	movw	r10, r24
     dd4:	69 85       	ldd	r22, Y+9	; 0x09
     dd6:	7a 85       	ldd	r23, Y+10	; 0x0a
     dd8:	8b 85       	ldd	r24, Y+11	; 0x0b
     dda:	9c 85       	ldd	r25, Y+12	; 0x0c
     ddc:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__floatsisf>
     de0:	a7 01       	movw	r20, r14
     de2:	96 01       	movw	r18, r12
     de4:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__mulsf3>
     de8:	9b 01       	movw	r18, r22
     dea:	ac 01       	movw	r20, r24
     dec:	c5 01       	movw	r24, r10
     dee:	b4 01       	movw	r22, r8
     df0:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     df4:	0e 94 b3 09 	call	0x1366	; 0x1366 <__fixsfsi>
     df8:	4b 01       	movw	r8, r22
     dfa:	5c 01       	movw	r10, r24
     dfc:	60 91 01 02 	lds	r22, 0x0201	; 0x800201 <speedCurrentLeft>
     e00:	70 91 02 02 	lds	r23, 0x0202	; 0x800202 <speedCurrentLeft+0x1>
     e04:	07 2e       	mov	r0, r23
     e06:	00 0c       	add	r0, r0
     e08:	88 0b       	sbc	r24, r24
     e0a:	99 0b       	sbc	r25, r25
     e0c:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__floatsisf>
     e10:	2b 01       	movw	r4, r22
     e12:	3c 01       	movw	r6, r24
     e14:	6d 85       	ldd	r22, Y+13	; 0x0d
     e16:	7e 85       	ldd	r23, Y+14	; 0x0e
     e18:	8f 85       	ldd	r24, Y+15	; 0x0f
     e1a:	98 89       	ldd	r25, Y+16	; 0x10
     e1c:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__floatsisf>
     e20:	a7 01       	movw	r20, r14
     e22:	96 01       	movw	r18, r12
     e24:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__mulsf3>
     e28:	9b 01       	movw	r18, r22
     e2a:	ac 01       	movw	r20, r24
     e2c:	c3 01       	movw	r24, r6
     e2e:	b2 01       	movw	r22, r4
     e30:	0e 94 41 09 	call	0x1282	; 0x1282 <__subsf3>
     e34:	0e 94 b3 09 	call	0x1366	; 0x1366 <__fixsfsi>
     e38:	dc 01       	movw	r26, r24
     e3a:	cb 01       	movw	r24, r22
     e3c:	b4 01       	movw	r22, r8
     e3e:	0e 94 1a 12 	call	0x2434	; 0x2434 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     e42:	48 01       	movw	r8, r16
     e44:	11 0f       	add	r17, r17
     e46:	aa 08       	sbc	r10, r10
     e48:	bb 08       	sbc	r11, r11
     e4a:	0e 94 93 13 	call	0x2726	; 0x2726 <get_ms>
     e4e:	2b 01       	movw	r4, r22
     e50:	3c 01       	movw	r6, r24
     e52:	20 e0       	ldi	r18, 0x00	; 0
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	40 e2       	ldi	r20, 0x20	; 32
     e58:	51 e4       	ldi	r21, 0x41	; 65
     e5a:	69 81       	ldd	r22, Y+1	; 0x01
     e5c:	7a 81       	ldd	r23, Y+2	; 0x02
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	9c 81       	ldd	r25, Y+4	; 0x04
     e62:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__mulsf3>
     e66:	6b 01       	movw	r12, r22
     e68:	7c 01       	movw	r14, r24
     e6a:	c3 01       	movw	r24, r6
     e6c:	b2 01       	movw	r22, r4
     e6e:	68 19       	sub	r22, r8
     e70:	79 09       	sbc	r23, r9
     e72:	8a 09       	sbc	r24, r10
     e74:	9b 09       	sbc	r25, r11
     e76:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__floatunsisf>
     e7a:	a7 01       	movw	r20, r14
     e7c:	96 01       	movw	r18, r12
     e7e:	0e 94 ae 09 	call	0x135c	; 0x135c <__cmpsf2>
     e82:	88 23       	and	r24, r24
     e84:	14 f3       	brlt	.-60     	; 0xe4a <__stack+0x54b>
		case 'L': //This case handles the rotation of the robot 90 degrees to the left. The robot accelerates and decelerates with the same method used with forward and backward movement.
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     e86:	2a e0       	ldi	r18, 0x0A	; 10
     e88:	37 ed       	ldi	r19, 0xD7	; 215
     e8a:	43 e2       	ldi	r20, 0x23	; 35
     e8c:	5c e3       	ldi	r21, 0x3C	; 60
     e8e:	6d 81       	ldd	r22, Y+5	; 0x05
     e90:	7e 81       	ldd	r23, Y+6	; 0x06
     e92:	8f 81       	ldd	r24, Y+7	; 0x07
     e94:	98 85       	ldd	r25, Y+8	; 0x08
     e96:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     e9a:	6d 83       	std	Y+5, r22	; 0x05
     e9c:	7e 83       	std	Y+6, r23	; 0x06
     e9e:	8f 83       	std	Y+7, r24	; 0x07
     ea0:	98 87       	std	Y+8, r25	; 0x08
     ea2:	a9 89       	ldd	r26, Y+17	; 0x11
     ea4:	ba 89       	ldd	r27, Y+18	; 0x12
     ea6:	11 97       	sbiw	r26, 0x01	; 1
     ea8:	ba 8b       	std	Y+18, r27	; 0x12
     eaa:	a9 8b       	std	Y+17, r26	; 0x11
     eac:	ab 2b       	or	r26, r27
     eae:	09 f0       	breq	.+2      	; 0xeb2 <__stack+0x5b3>
     eb0:	68 cf       	rjmp	.-304    	; 0xd82 <__stack+0x483>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = speed;
     eb2:	30 92 04 02 	sts	0x0204, r3	; 0x800204 <speedCurrentRight+0x1>
     eb6:	20 92 03 02 	sts	0x0203, r2	; 0x800203 <speedCurrentRight>
		speedCurrentLeft = -speed;
     eba:	31 94       	neg	r3
     ebc:	21 94       	neg	r2
     ebe:	31 08       	sbc	r3, r1
     ec0:	30 92 02 02 	sts	0x0202, r3	; 0x800202 <speedCurrentLeft+0x1>
     ec4:	20 92 01 02 	sts	0x0201, r2	; 0x800201 <speedCurrentLeft>
     ec8:	25 e6       	ldi	r18, 0x65	; 101
     eca:	30 e0       	ldi	r19, 0x00	; 0
		speed = 0;
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     ecc:	19 82       	std	Y+1, r1	; 0x01
     ece:	1a 82       	std	Y+2, r1	; 0x02
     ed0:	1b 82       	std	Y+3, r1	; 0x03
     ed2:	1c 82       	std	Y+4, r1	; 0x04
			timerStart = get_ms();
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
     ed4:	a1 01       	movw	r20, r2
     ed6:	33 0c       	add	r3, r3
     ed8:	66 0b       	sbc	r22, r22
     eda:	77 0b       	sbc	r23, r23
     edc:	4d 83       	std	Y+5, r20	; 0x05
     ede:	5e 83       	std	Y+6, r21	; 0x06
     ee0:	6f 83       	std	Y+7, r22	; 0x07
     ee2:	78 87       	std	Y+8, r23	; 0x08
     ee4:	3a 87       	std	Y+10, r19	; 0x0a
     ee6:	29 87       	std	Y+9, r18	; 0x09
     ee8:	81 2c       	mov	r8, r1
     eea:	91 2c       	mov	r9, r1
     eec:	54 01       	movw	r10, r8
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     eee:	0e 94 93 13 	call	0x2726	; 0x2726 <get_ms>
     ef2:	8b 01       	movw	r16, r22
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
     ef4:	2b ed       	ldi	r18, 0xDB	; 219
     ef6:	3f e0       	ldi	r19, 0x0F	; 15
     ef8:	49 ec       	ldi	r20, 0xC9	; 201
     efa:	50 e4       	ldi	r21, 0x40	; 64
     efc:	c5 01       	movw	r24, r10
     efe:	b4 01       	movw	r22, r8
     f00:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__mulsf3>
     f04:	0e 94 0d 0b 	call	0x161a	; 0x161a <sin>
     f08:	23 e8       	ldi	r18, 0x83	; 131
     f0a:	39 ef       	ldi	r19, 0xF9	; 249
     f0c:	42 e2       	ldi	r20, 0x22	; 34
     f0e:	5e e3       	ldi	r21, 0x3E	; 62
     f10:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__mulsf3>
     f14:	a5 01       	movw	r20, r10
     f16:	94 01       	movw	r18, r8
     f18:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     f1c:	2b 01       	movw	r4, r22
     f1e:	3c 01       	movw	r6, r24
     f20:	6d 81       	ldd	r22, Y+5	; 0x05
     f22:	7e 81       	ldd	r23, Y+6	; 0x06
     f24:	8f 81       	ldd	r24, Y+7	; 0x07
     f26:	98 85       	ldd	r25, Y+8	; 0x08
     f28:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__floatsisf>
     f2c:	9b 01       	movw	r18, r22
     f2e:	ac 01       	movw	r20, r24
     f30:	c3 01       	movw	r24, r6
     f32:	b2 01       	movw	r22, r4
     f34:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__mulsf3>
     f38:	2b 01       	movw	r4, r22
     f3a:	3c 01       	movw	r6, r24
			
			motorLeftSpeed = speedCurrentLeft - (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ));
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     f3c:	60 91 03 02 	lds	r22, 0x0203	; 0x800203 <speedCurrentRight>
     f40:	70 91 04 02 	lds	r23, 0x0204	; 0x800204 <speedCurrentRight+0x1>
     f44:	07 2e       	mov	r0, r23
     f46:	00 0c       	add	r0, r0
     f48:	88 0b       	sbc	r24, r24
     f4a:	99 0b       	sbc	r25, r25
     f4c:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__floatsisf>
     f50:	a3 01       	movw	r20, r6
     f52:	92 01       	movw	r18, r4
     f54:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     f58:	0e 94 b3 09 	call	0x1366	; 0x1366 <__fixsfsi>
     f5c:	69 83       	std	Y+1, r22	; 0x01
     f5e:	7a 83       	std	Y+2, r23	; 0x02
     f60:	8b 83       	std	Y+3, r24	; 0x03
     f62:	9c 83       	std	Y+4, r25	; 0x04
     f64:	60 91 01 02 	lds	r22, 0x0201	; 0x800201 <speedCurrentLeft>
     f68:	70 91 02 02 	lds	r23, 0x0202	; 0x800202 <speedCurrentLeft+0x1>
     f6c:	07 2e       	mov	r0, r23
     f6e:	00 0c       	add	r0, r0
     f70:	88 0b       	sbc	r24, r24
     f72:	99 0b       	sbc	r25, r25
     f74:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__floatsisf>
     f78:	a3 01       	movw	r20, r6
     f7a:	92 01       	movw	r18, r4
     f7c:	0e 94 41 09 	call	0x1282	; 0x1282 <__subsf3>
     f80:	0e 94 b3 09 	call	0x1366	; 0x1366 <__fixsfsi>
     f84:	dc 01       	movw	r26, r24
     f86:	cb 01       	movw	r24, r22
     f88:	69 81       	ldd	r22, Y+1	; 0x01
     f8a:	7a 81       	ldd	r23, Y+2	; 0x02
     f8c:	0e 94 1a 12 	call	0x2434	; 0x2434 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     f90:	28 01       	movw	r4, r16
     f92:	11 0f       	add	r17, r17
     f94:	66 08       	sbc	r6, r6
     f96:	77 08       	sbc	r7, r7
     f98:	0e 94 93 13 	call	0x2726	; 0x2726 <get_ms>
     f9c:	64 19       	sub	r22, r4
     f9e:	75 09       	sbc	r23, r5
     fa0:	86 09       	sbc	r24, r6
     fa2:	97 09       	sbc	r25, r7
     fa4:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__floatunsisf>
     fa8:	9b 01       	movw	r18, r22
     faa:	ac 01       	movw	r20, r24
     fac:	c7 01       	movw	r24, r14
     fae:	b6 01       	movw	r22, r12
     fb0:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__gesf2>
     fb4:	18 16       	cp	r1, r24
     fb6:	84 f3       	brlt	.-32     	; 0xf98 <__stack+0x699>
		speed = 0;
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     fb8:	2a e0       	ldi	r18, 0x0A	; 10
     fba:	37 ed       	ldi	r19, 0xD7	; 215
     fbc:	43 e2       	ldi	r20, 0x23	; 35
     fbe:	5c e3       	ldi	r21, 0x3C	; 60
     fc0:	c5 01       	movw	r24, r10
     fc2:	b4 01       	movw	r22, r8
     fc4:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3>
     fc8:	4b 01       	movw	r8, r22
     fca:	5c 01       	movw	r10, r24
     fcc:	69 85       	ldd	r22, Y+9	; 0x09
     fce:	7a 85       	ldd	r23, Y+10	; 0x0a
     fd0:	61 50       	subi	r22, 0x01	; 1
     fd2:	71 09       	sbc	r23, r1
     fd4:	7a 87       	std	Y+10, r23	; 0x0a
     fd6:	69 87       	std	Y+9, r22	; 0x09
     fd8:	67 2b       	or	r22, r23
     fda:	09 f0       	breq	.+2      	; 0xfde <__stack+0x6df>
     fdc:	88 cf       	rjmp	.-240    	; 0xeee <__stack+0x5ef>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = speed;
     fde:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <speedCurrentRight+0x1>
     fe2:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <speedCurrentRight>
		speedCurrentLeft = -speed;
     fe6:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <speedCurrentLeft+0x1>
     fea:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <speedCurrentLeft>
		break;
     fee:	06 c0       	rjmp	.+12     	; 0xffc <__stack+0x6fd>
		
		default:		//The default case puts the robot into a full stop and is only used in emergency situations. Using this case is not recommended as it applies the brakes instantaneously and therefore creates an extreme jerk in the acceleration curve.
		set_motors(0,0);
     ff0:	60 e0       	ldi	r22, 0x00	; 0
     ff2:	70 e0       	ldi	r23, 0x00	; 0
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	0e 94 1a 12 	call	0x2434	; 0x2434 <set_motors>
		break;
	}
}
     ffc:	66 96       	adiw	r28, 0x16	; 22
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	de bf       	out	0x3e, r29	; 62
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	cd bf       	out	0x3d, r28	; 61
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	1f 91       	pop	r17
    100e:	0f 91       	pop	r16
    1010:	ff 90       	pop	r15
    1012:	ef 90       	pop	r14
    1014:	df 90       	pop	r13
    1016:	cf 90       	pop	r12
    1018:	bf 90       	pop	r11
    101a:	af 90       	pop	r10
    101c:	9f 90       	pop	r9
    101e:	8f 90       	pop	r8
    1020:	7f 90       	pop	r7
    1022:	6f 90       	pop	r6
    1024:	5f 90       	pop	r5
    1026:	4f 90       	pop	r4
    1028:	3f 90       	pop	r3
    102a:	2f 90       	pop	r2
    102c:	08 95       	ret

0000102e <initialize>:
#include "Grid.h"

int situations[3]={LOW, LOW, LOW};

void initialize()
{
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
	
	unsigned int counter;
	pololu_3pi_init(2000);								//initialize sensor value from 0 to 2000
    1032:	80 ed       	ldi	r24, 0xD0	; 208
    1034:	97 e0       	ldi	r25, 0x07	; 7
    1036:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <pololu_3pi_init>
	
	while(!button_is_pressed(BUTTON_B))					//this function is activated until button B is pressed.
    103a:	1b c0       	rjmp	.+54     	; 0x1072 <initialize+0x44>
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
    103c:	0e 94 bb 0c 	call	0x1976	; 0x1976 <read_battery_millivolts_3pi>
    1040:	ec 01       	movw	r28, r24
	{
		int bat = read_battery_millivolts();
		clear();
    1042:	0e 94 dd 10 	call	0x21ba	; 0x21ba <clear>
		print_long(bat);								//print battery voltage in millivolts on the LCD
    1046:	be 01       	movw	r22, r28
    1048:	dd 0f       	add	r29, r29
    104a:	88 0b       	sbc	r24, r24
    104c:	99 0b       	sbc	r25, r25
    104e:	0e 94 41 11 	call	0x2282	; 0x2282 <print_long>
		print("mV");
    1052:	84 e6       	ldi	r24, 0x64	; 100
    1054:	91 e0       	ldi	r25, 0x01	; 1
    1056:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <print>
		lcd_goto_xy(0,1);
    105a:	61 e0       	ldi	r22, 0x01	; 1
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	0e 94 64 11 	call	0x22c8	; 0x22c8 <lcd_goto_xy>
		print("druk B");								//print instruction to continue
    1062:	87 e6       	ldi	r24, 0x67	; 103
    1064:	91 e0       	ldi	r25, 0x01	; 1
    1066:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <print>
		delay_ms(100);
    106a:	84 e6       	ldi	r24, 0x64	; 100
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <delay_ms>
{
	
	unsigned int counter;
	pololu_3pi_init(2000);								//initialize sensor value from 0 to 2000
	
	while(!button_is_pressed(BUTTON_B))					//this function is activated until button B is pressed.
    1072:	80 e1       	ldi	r24, 0x10	; 16
    1074:	0e 94 5d 12 	call	0x24ba	; 0x24ba <button_is_pressed>
    1078:	88 23       	and	r24, r24
    107a:	01 f3       	breq	.-64     	; 0x103c <initialize+0xe>
		lcd_goto_xy(0,1);
		print("druk B");								//print instruction to continue
		delay_ms(100);
	}
	
	wait_for_button_release(BUTTON_B);					//button B is pressed
    107c:	80 e1       	ldi	r24, 0x10	; 16
    107e:	0e 94 49 12 	call	0x2492	; 0x2492 <wait_for_button_release>
	delay_ms(1000);
    1082:	88 ee       	ldi	r24, 0xE8	; 232
    1084:	93 e0       	ldi	r25, 0x03	; 3
    1086:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <delay_ms>
    108a:	cc ee       	ldi	r28, 0xEC	; 236
    108c:	df ef       	ldi	r29, 0xFF	; 255
	
	for(counter=0;counter<80;counter++)					//calibrating line sensors
	{
		if(counter < 20 || counter >= 60)
    108e:	c8 32       	cpi	r28, 0x28	; 40
    1090:	d1 05       	cpc	r29, r1
    1092:	38 f0       	brcs	.+14     	; 0x10a2 <initialize+0x74>
		set_motors(40,-40);
    1094:	68 ed       	ldi	r22, 0xD8	; 216
    1096:	7f ef       	ldi	r23, 0xFF	; 255
    1098:	88 e2       	ldi	r24, 0x28	; 40
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	0e 94 1a 12 	call	0x2434	; 0x2434 <set_motors>
    10a0:	06 c0       	rjmp	.+12     	; 0x10ae <initialize+0x80>
		else
		set_motors(-40,40);
    10a2:	68 e2       	ldi	r22, 0x28	; 40
    10a4:	70 e0       	ldi	r23, 0x00	; 0
    10a6:	88 ed       	ldi	r24, 0xD8	; 216
    10a8:	9f ef       	ldi	r25, 0xFF	; 255
    10aa:	0e 94 1a 12 	call	0x2434	; 0x2434 <set_motors>
		calibrate_line_sensors(IR_EMITTERS_ON);
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	0e 94 b4 13 	call	0x2768	; 0x2768 <calibrate_line_sensors>
		delay_ms(20);
    10b4:	84 e1       	ldi	r24, 0x14	; 20
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <delay_ms>
    10bc:	21 96       	adiw	r28, 0x01	; 1
	}
	
	wait_for_button_release(BUTTON_B);					//button B is pressed
	delay_ms(1000);
	
	for(counter=0;counter<80;counter++)					//calibrating line sensors
    10be:	cc 33       	cpi	r28, 0x3C	; 60
    10c0:	d1 05       	cpc	r29, r1
    10c2:	29 f7       	brne	.-54     	; 0x108e <initialize+0x60>
		set_motors(-40,40);
		calibrate_line_sensors(IR_EMITTERS_ON);
		delay_ms(20);
	}
	
	set_motors(0,0);
    10c4:	60 e0       	ldi	r22, 0x00	; 0
    10c6:	70 e0       	ldi	r23, 0x00	; 0
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	0e 94 1a 12 	call	0x2434	; 0x2434 <set_motors>
	
	while(!button_is_pressed(BUTTON_B))										//function is activated until button B is pressed
    10d0:	15 c0       	rjmp	.+42     	; 0x10fc <initialize+0xce>
	{
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);			//reading the sensors to determine the position of the robot
    10d2:	61 e0       	ldi	r22, 0x01	; 1
    10d4:	8e e6       	ldi	r24, 0x6E	; 110
    10d6:	92 e0       	ldi	r25, 0x02	; 2
    10d8:	0e 94 ba 13 	call	0x2774	; 0x2774 <read_line>
    10dc:	ec 01       	movw	r28, r24
		clear();															//clear LCD
    10de:	0e 94 dd 10 	call	0x21ba	; 0x21ba <clear>
		print("  ");
    10e2:	8e e6       	ldi	r24, 0x6E	; 110
    10e4:	91 e0       	ldi	r25, 0x01	; 1
    10e6:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <print>
		print_long(position);												//print position of the robot compared to the line
    10ea:	be 01       	movw	r22, r28
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	0e 94 41 11 	call	0x2282	; 0x2282 <print_long>
		delay_ms(100);
    10f4:	84 e6       	ldi	r24, 0x64	; 100
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <delay_ms>
		delay_ms(20);
	}
	
	set_motors(0,0);
	
	while(!button_is_pressed(BUTTON_B))										//function is activated until button B is pressed
    10fc:	80 e1       	ldi	r24, 0x10	; 16
    10fe:	0e 94 5d 12 	call	0x24ba	; 0x24ba <button_is_pressed>
    1102:	88 23       	and	r24, r24
    1104:	31 f3       	breq	.-52     	; 0x10d2 <initialize+0xa4>
		print("  ");
		print_long(position);												//print position of the robot compared to the line
		delay_ms(100);
	}
	
	wait_for_button_release(BUTTON_B);										//button B is pressed
    1106:	80 e1       	ldi	r24, 0x10	; 16
    1108:	0e 94 49 12 	call	0x2492	; 0x2492 <wait_for_button_release>
	clear();																//clear LCD
    110c:	0e 94 dd 10 	call	0x21ba	; 0x21ba <clear>
	print("Go!");
    1110:	81 e7       	ldi	r24, 0x71	; 113
    1112:	91 e0       	ldi	r25, 0x01	; 1
    1114:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <print>

}
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	08 95       	ret

0000111e <followLine>:


void followLine()
{
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
	
	unsigned int pos = read_line(sensors,IR_EMITTERS_ON);					//write position of the robot to an unsigned int called pos
    1122:	61 e0       	ldi	r22, 0x01	; 1
    1124:	8e e6       	ldi	r24, 0x6E	; 110
    1126:	92 e0       	ldi	r25, 0x02	; 2
    1128:	0e 94 ba 13 	call	0x2774	; 0x2774 <read_line>
    112c:	ec 01       	movw	r28, r24
	read_line_sensors(sensors,IR_EMITTERS_ON);								//read line sensors
    112e:	61 e0       	ldi	r22, 0x01	; 1
    1130:	8e e6       	ldi	r24, 0x6E	; 110
    1132:	92 e0       	ldi	r25, 0x02	; 2
    1134:	0e 94 ad 13 	call	0x275a	; 0x275a <read_line_sensors>


	clear();																//clear display
    1138:	0e 94 dd 10 	call	0x21ba	; 0x21ba <clear>
	
	if(pos < 1950)
    113c:	ce 39       	cpi	r28, 0x9E	; 158
    113e:	87 e0       	ldi	r24, 0x07	; 7
    1140:	d8 07       	cpc	r29, r24
    1142:	98 f4       	brcc	.+38     	; 0x116a <followLine+0x4c>
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
    1144:	5f 9a       	sbi	0x0b, 7	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    1146:	57 9a       	sbi	0x0a, 7	; 10
	{
		
		green_led(1);

		if(pos < 1800)														//We are far to the right of the line: turn left.
    1148:	c8 30       	cpi	r28, 0x08	; 8
    114a:	d7 40       	sbci	r29, 0x07	; 7
    114c:	38 f4       	brcc	.+14     	; 0x115c <followLine+0x3e>
		{
			set_motors(0,SPEED);
    114e:	6c e3       	ldi	r22, 0x3C	; 60
    1150:	70 e0       	ldi	r23, 0x00	; 0
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	0e 94 1a 12 	call	0x2434	; 0x2434 <set_motors>
    115a:	24 c0       	rjmp	.+72     	; 0x11a4 <followLine+0x86>
		}
		else
		{
			set_motors(SLOW,SPEED);											//we are to the right of the line: turn left.
    115c:	6c e3       	ldi	r22, 0x3C	; 60
    115e:	70 e0       	ldi	r23, 0x00	; 0
    1160:	87 e3       	ldi	r24, 0x37	; 55
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	0e 94 1a 12 	call	0x2434	; 0x2434 <set_motors>
    1168:	1d c0       	rjmp	.+58     	; 0x11a4 <followLine+0x86>
		}
		
	}
	
	else if (pos > 2050)
    116a:	c3 30       	cpi	r28, 0x03	; 3
    116c:	88 e0       	ldi	r24, 0x08	; 8
    116e:	d8 07       	cpc	r29, r24
    1170:	98 f0       	brcs	.+38     	; 0x1198 <followLine+0x7a>
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
    1172:	59 9a       	sbi	0x0b, 1	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    1174:	51 9a       	sbi	0x0a, 1	; 10
	{
		// We are far to the left of the line: turn right.
		red_led(1);
		
		if(pos > 2200)														//We are far to the left of the line: turn right
    1176:	c9 39       	cpi	r28, 0x99	; 153
    1178:	d8 40       	sbci	r29, 0x08	; 8
    117a:	38 f0       	brcs	.+14     	; 0x118a <followLine+0x6c>
		{
			set_motors(SPEED,0);
    117c:	60 e0       	ldi	r22, 0x00	; 0
    117e:	70 e0       	ldi	r23, 0x00	; 0
    1180:	8c e3       	ldi	r24, 0x3C	; 60
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	0e 94 1a 12 	call	0x2434	; 0x2434 <set_motors>
    1188:	0d c0       	rjmp	.+26     	; 0x11a4 <followLine+0x86>
		}
		else
		{
			set_motors(FAST,SLOW);											//We are to the left of the line: turn right
    118a:	67 e3       	ldi	r22, 0x37	; 55
    118c:	70 e0       	ldi	r23, 0x00	; 0
    118e:	81 e4       	ldi	r24, 0x41	; 65
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	0e 94 1a 12 	call	0x2434	; 0x2434 <set_motors>
    1196:	06 c0       	rjmp	.+12     	; 0x11a4 <followLine+0x86>
		}
	}
	else
	{
		set_motors(SLOW,SLOW);												//we are on the line. move forward
    1198:	67 e3       	ldi	r22, 0x37	; 55
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	87 e3       	ldi	r24, 0x37	; 55
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	0e 94 1a 12 	call	0x2434	; 0x2434 <set_motors>
		
	}

	
}
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	08 95       	ret

000011aa <checkAfslag>:

int checkAfslag(){
    11aa:	cf 93       	push	r28
    11ac:	df 93       	push	r29

	int flag = 0;													        //initialize flag and turn
	situations[0] =LOW;														//sensor left initialize
    11ae:	e7 e0       	ldi	r30, 0x07	; 7
    11b0:	f2 e0       	ldi	r31, 0x02	; 2
    11b2:	11 82       	std	Z+1, r1	; 0x01
    11b4:	10 82       	st	Z, r1
	situations[1] =LOW;														//sensor center initialize
    11b6:	13 82       	std	Z+3, r1	; 0x03
    11b8:	12 82       	std	Z+2, r1	; 0x02
	situations[2] =LOW;														//sensor right initialize
    11ba:	15 82       	std	Z+5, r1	; 0x05
    11bc:	14 82       	std	Z+4, r1	; 0x04
	read_line_sensors(sensors,IR_EMITTERS_ON);								//read line sensors
    11be:	61 e0       	ldi	r22, 0x01	; 1
    11c0:	8e e6       	ldi	r24, 0x6E	; 110
    11c2:	92 e0       	ldi	r25, 0x02	; 2
    11c4:	0e 94 ad 13 	call	0x275a	; 0x275a <read_line_sensors>
	int rangeHigh = 1500;													//set high range to 1000
	
	if(SENSOR_L > rangeHigh){
    11c8:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <sensors>
    11cc:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <sensors+0x1>
    11d0:	8d 3d       	cpi	r24, 0xDD	; 221
    11d2:	95 40       	sbci	r25, 0x05	; 5
    11d4:	48 f0       	brcs	.+18     	; 0x11e8 <checkAfslag+0x3e>
		situations[0] = HIGH;
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <situations+0x1>
    11de:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <situations>
		flag = 1;															//sensor left is high, flag = 1
    11e2:	c1 e0       	ldi	r28, 0x01	; 1
    11e4:	d0 e0       	ldi	r29, 0x00	; 0
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <checkAfslag+0x42>
	
}

int checkAfslag(){

	int flag = 0;													        //initialize flag and turn
    11e8:	c0 e0       	ldi	r28, 0x00	; 0
    11ea:	d0 e0       	ldi	r29, 0x00	; 0
	
	if(SENSOR_L > rangeHigh){
		situations[0] = HIGH;
		flag = 1;															//sensor left is high, flag = 1
	}
	if(SENSOR_C_C > rangeHigh){
    11ec:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <sensors+0x4>
    11f0:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <sensors+0x5>
    11f4:	8d 3d       	cpi	r24, 0xDD	; 221
    11f6:	95 40       	sbci	r25, 0x05	; 5
    11f8:	40 f0       	brcs	.+16     	; 0x120a <checkAfslag+0x60>
		situations[1] = HIGH;
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <situations+0x3>
    1202:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <situations+0x2>
		flag = 2;															//sensor center is high, flag = 2
    1206:	c2 e0       	ldi	r28, 0x02	; 2
    1208:	d0 e0       	ldi	r29, 0x00	; 0
	}
	if(SENSOR_R > rangeHigh){
    120a:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <sensors+0x8>
    120e:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <sensors+0x9>
    1212:	8d 3d       	cpi	r24, 0xDD	; 221
    1214:	95 40       	sbci	r25, 0x05	; 5
    1216:	40 f0       	brcs	.+16     	; 0x1228 <checkAfslag+0x7e>
		situations[2] = HIGH;
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <situations+0x5>
    1220:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <situations+0x4>
		flag = 3;															//sensor right is high, flag = 3
    1224:	c3 e0       	ldi	r28, 0x03	; 3
    1226:	d0 e0       	ldi	r29, 0x00	; 0
	}
	clear();																//clear LCD
    1228:	0e 94 dd 10 	call	0x21ba	; 0x21ba <clear>
	return flag;
}
    122c:	ce 01       	movw	r24, r28
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	08 95       	ret

00001234 <checkDecision>:

int checkDecision()
{
    1234:	0f 93       	push	r16
    1236:	1f 93       	push	r17
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
    123c:	cd e0       	ldi	r28, 0x0D	; 13
    123e:	d2 e0       	ldi	r29, 0x02	; 2
	int decision = LOW, turn, resultTemp = 0;
	do{
		turn = 0;
		checkAfslag();
    1240:	0e 94 d5 08 	call	0x11aa	; 0x11aa <checkAfslag>
    1244:	e7 e0       	ldi	r30, 0x07	; 7
    1246:	f2 e0       	ldi	r31, 0x02	; 2

int checkDecision()
{
	int decision = LOW, turn, resultTemp = 0;
	do{
		turn = 0;
    1248:	00 e0       	ldi	r16, 0x00	; 0
    124a:	10 e0       	ldi	r17, 0x00	; 0
		checkAfslag();
		for(int i = 0; i < 3; i++){
			if(situations[i] == HIGH){                                                     //Counts number of possible turns
    124c:	81 91       	ld	r24, Z+
    124e:	91 91       	ld	r25, Z+
    1250:	01 97       	sbiw	r24, 0x01	; 1
    1252:	11 f4       	brne	.+4      	; 0x1258 <checkDecision+0x24>
				turn++;
    1254:	0f 5f       	subi	r16, 0xFF	; 255
    1256:	1f 4f       	sbci	r17, 0xFF	; 255
{
	int decision = LOW, turn, resultTemp = 0;
	do{
		turn = 0;
		checkAfslag();
		for(int i = 0; i < 3; i++){
    1258:	ec 17       	cp	r30, r28
    125a:	fd 07       	cpc	r31, r29
    125c:	b9 f7       	brne	.-18     	; 0x124c <checkDecision+0x18>
			if(situations[i] == HIGH){                                                     //Counts number of possible turns
				turn++;
			}
		}
		followLine();
    125e:	0e 94 8f 08 	call	0x111e	; 0x111e <followLine>
		//	checkDistance();
	}while(checkAfslag() == 0);                                                           //Keep following the line if the sensor does not detect any intersections
    1262:	0e 94 d5 08 	call	0x11aa	; 0x11aa <checkAfslag>
    1266:	89 2b       	or	r24, r25
    1268:	59 f3       	breq	.-42     	; 0x1240 <checkDecision+0xc>
	
	resultTemp = turn;                                                                    //If there is more than one option, the robot has to make a decision
	if(resultTemp > 1){
		decision = HIGH;
	}
	return decision;
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 30       	cpi	r16, 0x02	; 2
    1270:	11 05       	cpc	r17, r1
    1272:	14 f4       	brge	.+4      	; 0x1278 <checkDecision+0x44>
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	90 e0       	ldi	r25, 0x00	; 0
}
    1278:	df 91       	pop	r29
    127a:	cf 91       	pop	r28
    127c:	1f 91       	pop	r17
    127e:	0f 91       	pop	r16
    1280:	08 95       	ret

00001282 <__subsf3>:
    1282:	50 58       	subi	r21, 0x80	; 128

00001284 <__addsf3>:
    1284:	bb 27       	eor	r27, r27
    1286:	aa 27       	eor	r26, r26
    1288:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__addsf3x>
    128c:	0c 94 61 0a 	jmp	0x14c2	; 0x14c2 <__fp_round>
    1290:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__fp_pscA>
    1294:	38 f0       	brcs	.+14     	; 0x12a4 <__addsf3+0x20>
    1296:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__fp_pscB>
    129a:	20 f0       	brcs	.+8      	; 0x12a4 <__addsf3+0x20>
    129c:	39 f4       	brne	.+14     	; 0x12ac <__addsf3+0x28>
    129e:	9f 3f       	cpi	r25, 0xFF	; 255
    12a0:	19 f4       	brne	.+6      	; 0x12a8 <__addsf3+0x24>
    12a2:	26 f4       	brtc	.+8      	; 0x12ac <__addsf3+0x28>
    12a4:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__fp_nan>
    12a8:	0e f4       	brtc	.+2      	; 0x12ac <__addsf3+0x28>
    12aa:	e0 95       	com	r30
    12ac:	e7 fb       	bst	r30, 7
    12ae:	0c 94 4a 0a 	jmp	0x1494	; 0x1494 <__fp_inf>

000012b2 <__addsf3x>:
    12b2:	e9 2f       	mov	r30, r25
    12b4:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <__fp_split3>
    12b8:	58 f3       	brcs	.-42     	; 0x1290 <__addsf3+0xc>
    12ba:	ba 17       	cp	r27, r26
    12bc:	62 07       	cpc	r22, r18
    12be:	73 07       	cpc	r23, r19
    12c0:	84 07       	cpc	r24, r20
    12c2:	95 07       	cpc	r25, r21
    12c4:	20 f0       	brcs	.+8      	; 0x12ce <__addsf3x+0x1c>
    12c6:	79 f4       	brne	.+30     	; 0x12e6 <__addsf3x+0x34>
    12c8:	a6 f5       	brtc	.+104    	; 0x1332 <__addsf3x+0x80>
    12ca:	0c 94 94 0a 	jmp	0x1528	; 0x1528 <__fp_zero>
    12ce:	0e f4       	brtc	.+2      	; 0x12d2 <__addsf3x+0x20>
    12d0:	e0 95       	com	r30
    12d2:	0b 2e       	mov	r0, r27
    12d4:	ba 2f       	mov	r27, r26
    12d6:	a0 2d       	mov	r26, r0
    12d8:	0b 01       	movw	r0, r22
    12da:	b9 01       	movw	r22, r18
    12dc:	90 01       	movw	r18, r0
    12de:	0c 01       	movw	r0, r24
    12e0:	ca 01       	movw	r24, r20
    12e2:	a0 01       	movw	r20, r0
    12e4:	11 24       	eor	r1, r1
    12e6:	ff 27       	eor	r31, r31
    12e8:	59 1b       	sub	r21, r25
    12ea:	99 f0       	breq	.+38     	; 0x1312 <__addsf3x+0x60>
    12ec:	59 3f       	cpi	r21, 0xF9	; 249
    12ee:	50 f4       	brcc	.+20     	; 0x1304 <__addsf3x+0x52>
    12f0:	50 3e       	cpi	r21, 0xE0	; 224
    12f2:	68 f1       	brcs	.+90     	; 0x134e <__addsf3x+0x9c>
    12f4:	1a 16       	cp	r1, r26
    12f6:	f0 40       	sbci	r31, 0x00	; 0
    12f8:	a2 2f       	mov	r26, r18
    12fa:	23 2f       	mov	r18, r19
    12fc:	34 2f       	mov	r19, r20
    12fe:	44 27       	eor	r20, r20
    1300:	58 5f       	subi	r21, 0xF8	; 248
    1302:	f3 cf       	rjmp	.-26     	; 0x12ea <__addsf3x+0x38>
    1304:	46 95       	lsr	r20
    1306:	37 95       	ror	r19
    1308:	27 95       	ror	r18
    130a:	a7 95       	ror	r26
    130c:	f0 40       	sbci	r31, 0x00	; 0
    130e:	53 95       	inc	r21
    1310:	c9 f7       	brne	.-14     	; 0x1304 <__addsf3x+0x52>
    1312:	7e f4       	brtc	.+30     	; 0x1332 <__addsf3x+0x80>
    1314:	1f 16       	cp	r1, r31
    1316:	ba 0b       	sbc	r27, r26
    1318:	62 0b       	sbc	r22, r18
    131a:	73 0b       	sbc	r23, r19
    131c:	84 0b       	sbc	r24, r20
    131e:	ba f0       	brmi	.+46     	; 0x134e <__addsf3x+0x9c>
    1320:	91 50       	subi	r25, 0x01	; 1
    1322:	a1 f0       	breq	.+40     	; 0x134c <__addsf3x+0x9a>
    1324:	ff 0f       	add	r31, r31
    1326:	bb 1f       	adc	r27, r27
    1328:	66 1f       	adc	r22, r22
    132a:	77 1f       	adc	r23, r23
    132c:	88 1f       	adc	r24, r24
    132e:	c2 f7       	brpl	.-16     	; 0x1320 <__addsf3x+0x6e>
    1330:	0e c0       	rjmp	.+28     	; 0x134e <__addsf3x+0x9c>
    1332:	ba 0f       	add	r27, r26
    1334:	62 1f       	adc	r22, r18
    1336:	73 1f       	adc	r23, r19
    1338:	84 1f       	adc	r24, r20
    133a:	48 f4       	brcc	.+18     	; 0x134e <__addsf3x+0x9c>
    133c:	87 95       	ror	r24
    133e:	77 95       	ror	r23
    1340:	67 95       	ror	r22
    1342:	b7 95       	ror	r27
    1344:	f7 95       	ror	r31
    1346:	9e 3f       	cpi	r25, 0xFE	; 254
    1348:	08 f0       	brcs	.+2      	; 0x134c <__addsf3x+0x9a>
    134a:	b0 cf       	rjmp	.-160    	; 0x12ac <__addsf3+0x28>
    134c:	93 95       	inc	r25
    134e:	88 0f       	add	r24, r24
    1350:	08 f0       	brcs	.+2      	; 0x1354 <__addsf3x+0xa2>
    1352:	99 27       	eor	r25, r25
    1354:	ee 0f       	add	r30, r30
    1356:	97 95       	ror	r25
    1358:	87 95       	ror	r24
    135a:	08 95       	ret

0000135c <__cmpsf2>:
    135c:	0e 94 26 0a 	call	0x144c	; 0x144c <__fp_cmp>
    1360:	08 f4       	brcc	.+2      	; 0x1364 <__cmpsf2+0x8>
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	08 95       	ret

00001366 <__fixsfsi>:
    1366:	0e 94 ba 09 	call	0x1374	; 0x1374 <__fixunssfsi>
    136a:	68 94       	set
    136c:	b1 11       	cpse	r27, r1
    136e:	0c 94 95 0a 	jmp	0x152a	; 0x152a <__fp_szero>
    1372:	08 95       	ret

00001374 <__fixunssfsi>:
    1374:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <__fp_splitA>
    1378:	88 f0       	brcs	.+34     	; 0x139c <__fixunssfsi+0x28>
    137a:	9f 57       	subi	r25, 0x7F	; 127
    137c:	98 f0       	brcs	.+38     	; 0x13a4 <__fixunssfsi+0x30>
    137e:	b9 2f       	mov	r27, r25
    1380:	99 27       	eor	r25, r25
    1382:	b7 51       	subi	r27, 0x17	; 23
    1384:	b0 f0       	brcs	.+44     	; 0x13b2 <__fixunssfsi+0x3e>
    1386:	e1 f0       	breq	.+56     	; 0x13c0 <__fixunssfsi+0x4c>
    1388:	66 0f       	add	r22, r22
    138a:	77 1f       	adc	r23, r23
    138c:	88 1f       	adc	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	1a f0       	brmi	.+6      	; 0x1398 <__fixunssfsi+0x24>
    1392:	ba 95       	dec	r27
    1394:	c9 f7       	brne	.-14     	; 0x1388 <__fixunssfsi+0x14>
    1396:	14 c0       	rjmp	.+40     	; 0x13c0 <__fixunssfsi+0x4c>
    1398:	b1 30       	cpi	r27, 0x01	; 1
    139a:	91 f0       	breq	.+36     	; 0x13c0 <__fixunssfsi+0x4c>
    139c:	0e 94 94 0a 	call	0x1528	; 0x1528 <__fp_zero>
    13a0:	b1 e0       	ldi	r27, 0x01	; 1
    13a2:	08 95       	ret
    13a4:	0c 94 94 0a 	jmp	0x1528	; 0x1528 <__fp_zero>
    13a8:	67 2f       	mov	r22, r23
    13aa:	78 2f       	mov	r23, r24
    13ac:	88 27       	eor	r24, r24
    13ae:	b8 5f       	subi	r27, 0xF8	; 248
    13b0:	39 f0       	breq	.+14     	; 0x13c0 <__fixunssfsi+0x4c>
    13b2:	b9 3f       	cpi	r27, 0xF9	; 249
    13b4:	cc f3       	brlt	.-14     	; 0x13a8 <__fixunssfsi+0x34>
    13b6:	86 95       	lsr	r24
    13b8:	77 95       	ror	r23
    13ba:	67 95       	ror	r22
    13bc:	b3 95       	inc	r27
    13be:	d9 f7       	brne	.-10     	; 0x13b6 <__fixunssfsi+0x42>
    13c0:	3e f4       	brtc	.+14     	; 0x13d0 <__fixunssfsi+0x5c>
    13c2:	90 95       	com	r25
    13c4:	80 95       	com	r24
    13c6:	70 95       	com	r23
    13c8:	61 95       	neg	r22
    13ca:	7f 4f       	sbci	r23, 0xFF	; 255
    13cc:	8f 4f       	sbci	r24, 0xFF	; 255
    13ce:	9f 4f       	sbci	r25, 0xFF	; 255
    13d0:	08 95       	ret

000013d2 <__floatunsisf>:
    13d2:	e8 94       	clt
    13d4:	09 c0       	rjmp	.+18     	; 0x13e8 <__floatsisf+0x12>

000013d6 <__floatsisf>:
    13d6:	97 fb       	bst	r25, 7
    13d8:	3e f4       	brtc	.+14     	; 0x13e8 <__floatsisf+0x12>
    13da:	90 95       	com	r25
    13dc:	80 95       	com	r24
    13de:	70 95       	com	r23
    13e0:	61 95       	neg	r22
    13e2:	7f 4f       	sbci	r23, 0xFF	; 255
    13e4:	8f 4f       	sbci	r24, 0xFF	; 255
    13e6:	9f 4f       	sbci	r25, 0xFF	; 255
    13e8:	99 23       	and	r25, r25
    13ea:	a9 f0       	breq	.+42     	; 0x1416 <__floatsisf+0x40>
    13ec:	f9 2f       	mov	r31, r25
    13ee:	96 e9       	ldi	r25, 0x96	; 150
    13f0:	bb 27       	eor	r27, r27
    13f2:	93 95       	inc	r25
    13f4:	f6 95       	lsr	r31
    13f6:	87 95       	ror	r24
    13f8:	77 95       	ror	r23
    13fa:	67 95       	ror	r22
    13fc:	b7 95       	ror	r27
    13fe:	f1 11       	cpse	r31, r1
    1400:	f8 cf       	rjmp	.-16     	; 0x13f2 <__floatsisf+0x1c>
    1402:	fa f4       	brpl	.+62     	; 0x1442 <__floatsisf+0x6c>
    1404:	bb 0f       	add	r27, r27
    1406:	11 f4       	brne	.+4      	; 0x140c <__floatsisf+0x36>
    1408:	60 ff       	sbrs	r22, 0
    140a:	1b c0       	rjmp	.+54     	; 0x1442 <__floatsisf+0x6c>
    140c:	6f 5f       	subi	r22, 0xFF	; 255
    140e:	7f 4f       	sbci	r23, 0xFF	; 255
    1410:	8f 4f       	sbci	r24, 0xFF	; 255
    1412:	9f 4f       	sbci	r25, 0xFF	; 255
    1414:	16 c0       	rjmp	.+44     	; 0x1442 <__floatsisf+0x6c>
    1416:	88 23       	and	r24, r24
    1418:	11 f0       	breq	.+4      	; 0x141e <__floatsisf+0x48>
    141a:	96 e9       	ldi	r25, 0x96	; 150
    141c:	11 c0       	rjmp	.+34     	; 0x1440 <__floatsisf+0x6a>
    141e:	77 23       	and	r23, r23
    1420:	21 f0       	breq	.+8      	; 0x142a <__floatsisf+0x54>
    1422:	9e e8       	ldi	r25, 0x8E	; 142
    1424:	87 2f       	mov	r24, r23
    1426:	76 2f       	mov	r23, r22
    1428:	05 c0       	rjmp	.+10     	; 0x1434 <__floatsisf+0x5e>
    142a:	66 23       	and	r22, r22
    142c:	71 f0       	breq	.+28     	; 0x144a <__floatsisf+0x74>
    142e:	96 e8       	ldi	r25, 0x86	; 134
    1430:	86 2f       	mov	r24, r22
    1432:	70 e0       	ldi	r23, 0x00	; 0
    1434:	60 e0       	ldi	r22, 0x00	; 0
    1436:	2a f0       	brmi	.+10     	; 0x1442 <__floatsisf+0x6c>
    1438:	9a 95       	dec	r25
    143a:	66 0f       	add	r22, r22
    143c:	77 1f       	adc	r23, r23
    143e:	88 1f       	adc	r24, r24
    1440:	da f7       	brpl	.-10     	; 0x1438 <__floatsisf+0x62>
    1442:	88 0f       	add	r24, r24
    1444:	96 95       	lsr	r25
    1446:	87 95       	ror	r24
    1448:	97 f9       	bld	r25, 7
    144a:	08 95       	ret

0000144c <__fp_cmp>:
    144c:	99 0f       	add	r25, r25
    144e:	00 08       	sbc	r0, r0
    1450:	55 0f       	add	r21, r21
    1452:	aa 0b       	sbc	r26, r26
    1454:	e0 e8       	ldi	r30, 0x80	; 128
    1456:	fe ef       	ldi	r31, 0xFE	; 254
    1458:	16 16       	cp	r1, r22
    145a:	17 06       	cpc	r1, r23
    145c:	e8 07       	cpc	r30, r24
    145e:	f9 07       	cpc	r31, r25
    1460:	c0 f0       	brcs	.+48     	; 0x1492 <__fp_cmp+0x46>
    1462:	12 16       	cp	r1, r18
    1464:	13 06       	cpc	r1, r19
    1466:	e4 07       	cpc	r30, r20
    1468:	f5 07       	cpc	r31, r21
    146a:	98 f0       	brcs	.+38     	; 0x1492 <__fp_cmp+0x46>
    146c:	62 1b       	sub	r22, r18
    146e:	73 0b       	sbc	r23, r19
    1470:	84 0b       	sbc	r24, r20
    1472:	95 0b       	sbc	r25, r21
    1474:	39 f4       	brne	.+14     	; 0x1484 <__fp_cmp+0x38>
    1476:	0a 26       	eor	r0, r26
    1478:	61 f0       	breq	.+24     	; 0x1492 <__fp_cmp+0x46>
    147a:	23 2b       	or	r18, r19
    147c:	24 2b       	or	r18, r20
    147e:	25 2b       	or	r18, r21
    1480:	21 f4       	brne	.+8      	; 0x148a <__fp_cmp+0x3e>
    1482:	08 95       	ret
    1484:	0a 26       	eor	r0, r26
    1486:	09 f4       	brne	.+2      	; 0x148a <__fp_cmp+0x3e>
    1488:	a1 40       	sbci	r26, 0x01	; 1
    148a:	a6 95       	lsr	r26
    148c:	8f ef       	ldi	r24, 0xFF	; 255
    148e:	81 1d       	adc	r24, r1
    1490:	81 1d       	adc	r24, r1
    1492:	08 95       	ret

00001494 <__fp_inf>:
    1494:	97 f9       	bld	r25, 7
    1496:	9f 67       	ori	r25, 0x7F	; 127
    1498:	80 e8       	ldi	r24, 0x80	; 128
    149a:	70 e0       	ldi	r23, 0x00	; 0
    149c:	60 e0       	ldi	r22, 0x00	; 0
    149e:	08 95       	ret

000014a0 <__fp_nan>:
    14a0:	9f ef       	ldi	r25, 0xFF	; 255
    14a2:	80 ec       	ldi	r24, 0xC0	; 192
    14a4:	08 95       	ret

000014a6 <__fp_pscA>:
    14a6:	00 24       	eor	r0, r0
    14a8:	0a 94       	dec	r0
    14aa:	16 16       	cp	r1, r22
    14ac:	17 06       	cpc	r1, r23
    14ae:	18 06       	cpc	r1, r24
    14b0:	09 06       	cpc	r0, r25
    14b2:	08 95       	ret

000014b4 <__fp_pscB>:
    14b4:	00 24       	eor	r0, r0
    14b6:	0a 94       	dec	r0
    14b8:	12 16       	cp	r1, r18
    14ba:	13 06       	cpc	r1, r19
    14bc:	14 06       	cpc	r1, r20
    14be:	05 06       	cpc	r0, r21
    14c0:	08 95       	ret

000014c2 <__fp_round>:
    14c2:	09 2e       	mov	r0, r25
    14c4:	03 94       	inc	r0
    14c6:	00 0c       	add	r0, r0
    14c8:	11 f4       	brne	.+4      	; 0x14ce <__fp_round+0xc>
    14ca:	88 23       	and	r24, r24
    14cc:	52 f0       	brmi	.+20     	; 0x14e2 <__fp_round+0x20>
    14ce:	bb 0f       	add	r27, r27
    14d0:	40 f4       	brcc	.+16     	; 0x14e2 <__fp_round+0x20>
    14d2:	bf 2b       	or	r27, r31
    14d4:	11 f4       	brne	.+4      	; 0x14da <__fp_round+0x18>
    14d6:	60 ff       	sbrs	r22, 0
    14d8:	04 c0       	rjmp	.+8      	; 0x14e2 <__fp_round+0x20>
    14da:	6f 5f       	subi	r22, 0xFF	; 255
    14dc:	7f 4f       	sbci	r23, 0xFF	; 255
    14de:	8f 4f       	sbci	r24, 0xFF	; 255
    14e0:	9f 4f       	sbci	r25, 0xFF	; 255
    14e2:	08 95       	ret

000014e4 <__fp_split3>:
    14e4:	57 fd       	sbrc	r21, 7
    14e6:	90 58       	subi	r25, 0x80	; 128
    14e8:	44 0f       	add	r20, r20
    14ea:	55 1f       	adc	r21, r21
    14ec:	59 f0       	breq	.+22     	; 0x1504 <__fp_splitA+0x10>
    14ee:	5f 3f       	cpi	r21, 0xFF	; 255
    14f0:	71 f0       	breq	.+28     	; 0x150e <__fp_splitA+0x1a>
    14f2:	47 95       	ror	r20

000014f4 <__fp_splitA>:
    14f4:	88 0f       	add	r24, r24
    14f6:	97 fb       	bst	r25, 7
    14f8:	99 1f       	adc	r25, r25
    14fa:	61 f0       	breq	.+24     	; 0x1514 <__fp_splitA+0x20>
    14fc:	9f 3f       	cpi	r25, 0xFF	; 255
    14fe:	79 f0       	breq	.+30     	; 0x151e <__fp_splitA+0x2a>
    1500:	87 95       	ror	r24
    1502:	08 95       	ret
    1504:	12 16       	cp	r1, r18
    1506:	13 06       	cpc	r1, r19
    1508:	14 06       	cpc	r1, r20
    150a:	55 1f       	adc	r21, r21
    150c:	f2 cf       	rjmp	.-28     	; 0x14f2 <__fp_split3+0xe>
    150e:	46 95       	lsr	r20
    1510:	f1 df       	rcall	.-30     	; 0x14f4 <__fp_splitA>
    1512:	08 c0       	rjmp	.+16     	; 0x1524 <__fp_splitA+0x30>
    1514:	16 16       	cp	r1, r22
    1516:	17 06       	cpc	r1, r23
    1518:	18 06       	cpc	r1, r24
    151a:	99 1f       	adc	r25, r25
    151c:	f1 cf       	rjmp	.-30     	; 0x1500 <__fp_splitA+0xc>
    151e:	86 95       	lsr	r24
    1520:	71 05       	cpc	r23, r1
    1522:	61 05       	cpc	r22, r1
    1524:	08 94       	sec
    1526:	08 95       	ret

00001528 <__fp_zero>:
    1528:	e8 94       	clt

0000152a <__fp_szero>:
    152a:	bb 27       	eor	r27, r27
    152c:	66 27       	eor	r22, r22
    152e:	77 27       	eor	r23, r23
    1530:	cb 01       	movw	r24, r22
    1532:	97 f9       	bld	r25, 7
    1534:	08 95       	ret

00001536 <__gesf2>:
    1536:	0e 94 26 0a 	call	0x144c	; 0x144c <__fp_cmp>
    153a:	08 f4       	brcc	.+2      	; 0x153e <__gesf2+0x8>
    153c:	8f ef       	ldi	r24, 0xFF	; 255
    153e:	08 95       	ret

00001540 <__mulsf3>:
    1540:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__mulsf3x>
    1544:	0c 94 61 0a 	jmp	0x14c2	; 0x14c2 <__fp_round>
    1548:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__fp_pscA>
    154c:	38 f0       	brcs	.+14     	; 0x155c <__mulsf3+0x1c>
    154e:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__fp_pscB>
    1552:	20 f0       	brcs	.+8      	; 0x155c <__mulsf3+0x1c>
    1554:	95 23       	and	r25, r21
    1556:	11 f0       	breq	.+4      	; 0x155c <__mulsf3+0x1c>
    1558:	0c 94 4a 0a 	jmp	0x1494	; 0x1494 <__fp_inf>
    155c:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__fp_nan>
    1560:	11 24       	eor	r1, r1
    1562:	0c 94 95 0a 	jmp	0x152a	; 0x152a <__fp_szero>

00001566 <__mulsf3x>:
    1566:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <__fp_split3>
    156a:	70 f3       	brcs	.-36     	; 0x1548 <__mulsf3+0x8>

0000156c <__mulsf3_pse>:
    156c:	95 9f       	mul	r25, r21
    156e:	c1 f3       	breq	.-16     	; 0x1560 <__mulsf3+0x20>
    1570:	95 0f       	add	r25, r21
    1572:	50 e0       	ldi	r21, 0x00	; 0
    1574:	55 1f       	adc	r21, r21
    1576:	62 9f       	mul	r22, r18
    1578:	f0 01       	movw	r30, r0
    157a:	72 9f       	mul	r23, r18
    157c:	bb 27       	eor	r27, r27
    157e:	f0 0d       	add	r31, r0
    1580:	b1 1d       	adc	r27, r1
    1582:	63 9f       	mul	r22, r19
    1584:	aa 27       	eor	r26, r26
    1586:	f0 0d       	add	r31, r0
    1588:	b1 1d       	adc	r27, r1
    158a:	aa 1f       	adc	r26, r26
    158c:	64 9f       	mul	r22, r20
    158e:	66 27       	eor	r22, r22
    1590:	b0 0d       	add	r27, r0
    1592:	a1 1d       	adc	r26, r1
    1594:	66 1f       	adc	r22, r22
    1596:	82 9f       	mul	r24, r18
    1598:	22 27       	eor	r18, r18
    159a:	b0 0d       	add	r27, r0
    159c:	a1 1d       	adc	r26, r1
    159e:	62 1f       	adc	r22, r18
    15a0:	73 9f       	mul	r23, r19
    15a2:	b0 0d       	add	r27, r0
    15a4:	a1 1d       	adc	r26, r1
    15a6:	62 1f       	adc	r22, r18
    15a8:	83 9f       	mul	r24, r19
    15aa:	a0 0d       	add	r26, r0
    15ac:	61 1d       	adc	r22, r1
    15ae:	22 1f       	adc	r18, r18
    15b0:	74 9f       	mul	r23, r20
    15b2:	33 27       	eor	r19, r19
    15b4:	a0 0d       	add	r26, r0
    15b6:	61 1d       	adc	r22, r1
    15b8:	23 1f       	adc	r18, r19
    15ba:	84 9f       	mul	r24, r20
    15bc:	60 0d       	add	r22, r0
    15be:	21 1d       	adc	r18, r1
    15c0:	82 2f       	mov	r24, r18
    15c2:	76 2f       	mov	r23, r22
    15c4:	6a 2f       	mov	r22, r26
    15c6:	11 24       	eor	r1, r1
    15c8:	9f 57       	subi	r25, 0x7F	; 127
    15ca:	50 40       	sbci	r21, 0x00	; 0
    15cc:	9a f0       	brmi	.+38     	; 0x15f4 <__mulsf3_pse+0x88>
    15ce:	f1 f0       	breq	.+60     	; 0x160c <__mulsf3_pse+0xa0>
    15d0:	88 23       	and	r24, r24
    15d2:	4a f0       	brmi	.+18     	; 0x15e6 <__mulsf3_pse+0x7a>
    15d4:	ee 0f       	add	r30, r30
    15d6:	ff 1f       	adc	r31, r31
    15d8:	bb 1f       	adc	r27, r27
    15da:	66 1f       	adc	r22, r22
    15dc:	77 1f       	adc	r23, r23
    15de:	88 1f       	adc	r24, r24
    15e0:	91 50       	subi	r25, 0x01	; 1
    15e2:	50 40       	sbci	r21, 0x00	; 0
    15e4:	a9 f7       	brne	.-22     	; 0x15d0 <__mulsf3_pse+0x64>
    15e6:	9e 3f       	cpi	r25, 0xFE	; 254
    15e8:	51 05       	cpc	r21, r1
    15ea:	80 f0       	brcs	.+32     	; 0x160c <__mulsf3_pse+0xa0>
    15ec:	0c 94 4a 0a 	jmp	0x1494	; 0x1494 <__fp_inf>
    15f0:	0c 94 95 0a 	jmp	0x152a	; 0x152a <__fp_szero>
    15f4:	5f 3f       	cpi	r21, 0xFF	; 255
    15f6:	e4 f3       	brlt	.-8      	; 0x15f0 <__mulsf3_pse+0x84>
    15f8:	98 3e       	cpi	r25, 0xE8	; 232
    15fa:	d4 f3       	brlt	.-12     	; 0x15f0 <__mulsf3_pse+0x84>
    15fc:	86 95       	lsr	r24
    15fe:	77 95       	ror	r23
    1600:	67 95       	ror	r22
    1602:	b7 95       	ror	r27
    1604:	f7 95       	ror	r31
    1606:	e7 95       	ror	r30
    1608:	9f 5f       	subi	r25, 0xFF	; 255
    160a:	c1 f7       	brne	.-16     	; 0x15fc <__mulsf3_pse+0x90>
    160c:	fe 2b       	or	r31, r30
    160e:	88 0f       	add	r24, r24
    1610:	91 1d       	adc	r25, r1
    1612:	96 95       	lsr	r25
    1614:	87 95       	ror	r24
    1616:	97 f9       	bld	r25, 7
    1618:	08 95       	ret

0000161a <sin>:
    161a:	9f 93       	push	r25
    161c:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__fp_rempio2>
    1620:	0f 90       	pop	r0
    1622:	07 fc       	sbrc	r0, 7
    1624:	ee 5f       	subi	r30, 0xFE	; 254
    1626:	0c 94 9b 0b 	jmp	0x1736	; 0x1736 <__fp_sinus>
    162a:	19 f4       	brne	.+6      	; 0x1632 <sin+0x18>
    162c:	16 f4       	brtc	.+4      	; 0x1632 <sin+0x18>
    162e:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__fp_nan>
    1632:	0c 94 5b 0b 	jmp	0x16b6	; 0x16b6 <__fp_mpack>

00001636 <sqrt>:
    1636:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <__fp_splitA>
    163a:	b8 f3       	brcs	.-18     	; 0x162a <sin+0x10>
    163c:	99 23       	and	r25, r25
    163e:	c9 f3       	breq	.-14     	; 0x1632 <sin+0x18>
    1640:	b6 f3       	brts	.-20     	; 0x162e <sin+0x14>
    1642:	9f 57       	subi	r25, 0x7F	; 127
    1644:	55 0b       	sbc	r21, r21
    1646:	87 ff       	sbrs	r24, 7
    1648:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__fp_norm2>
    164c:	00 24       	eor	r0, r0
    164e:	a0 e6       	ldi	r26, 0x60	; 96
    1650:	40 ea       	ldi	r20, 0xA0	; 160
    1652:	90 01       	movw	r18, r0
    1654:	80 58       	subi	r24, 0x80	; 128
    1656:	56 95       	lsr	r21
    1658:	97 95       	ror	r25
    165a:	28 f4       	brcc	.+10     	; 0x1666 <sqrt+0x30>
    165c:	80 5c       	subi	r24, 0xC0	; 192
    165e:	66 0f       	add	r22, r22
    1660:	77 1f       	adc	r23, r23
    1662:	88 1f       	adc	r24, r24
    1664:	20 f0       	brcs	.+8      	; 0x166e <sqrt+0x38>
    1666:	26 17       	cp	r18, r22
    1668:	37 07       	cpc	r19, r23
    166a:	48 07       	cpc	r20, r24
    166c:	30 f4       	brcc	.+12     	; 0x167a <sqrt+0x44>
    166e:	62 1b       	sub	r22, r18
    1670:	73 0b       	sbc	r23, r19
    1672:	84 0b       	sbc	r24, r20
    1674:	20 29       	or	r18, r0
    1676:	31 29       	or	r19, r1
    1678:	4a 2b       	or	r20, r26
    167a:	a6 95       	lsr	r26
    167c:	17 94       	ror	r1
    167e:	07 94       	ror	r0
    1680:	20 25       	eor	r18, r0
    1682:	31 25       	eor	r19, r1
    1684:	4a 27       	eor	r20, r26
    1686:	58 f7       	brcc	.-42     	; 0x165e <sqrt+0x28>
    1688:	66 0f       	add	r22, r22
    168a:	77 1f       	adc	r23, r23
    168c:	88 1f       	adc	r24, r24
    168e:	20 f0       	brcs	.+8      	; 0x1698 <sqrt+0x62>
    1690:	26 17       	cp	r18, r22
    1692:	37 07       	cpc	r19, r23
    1694:	48 07       	cpc	r20, r24
    1696:	30 f4       	brcc	.+12     	; 0x16a4 <sqrt+0x6e>
    1698:	62 0b       	sbc	r22, r18
    169a:	73 0b       	sbc	r23, r19
    169c:	84 0b       	sbc	r24, r20
    169e:	20 0d       	add	r18, r0
    16a0:	31 1d       	adc	r19, r1
    16a2:	41 1d       	adc	r20, r1
    16a4:	a0 95       	com	r26
    16a6:	81 f7       	brne	.-32     	; 0x1688 <sqrt+0x52>
    16a8:	b9 01       	movw	r22, r18
    16aa:	84 2f       	mov	r24, r20
    16ac:	91 58       	subi	r25, 0x81	; 129
    16ae:	88 0f       	add	r24, r24
    16b0:	96 95       	lsr	r25
    16b2:	87 95       	ror	r24
    16b4:	08 95       	ret

000016b6 <__fp_mpack>:
    16b6:	9f 3f       	cpi	r25, 0xFF	; 255
    16b8:	31 f0       	breq	.+12     	; 0x16c6 <__fp_mpack_finite+0xc>

000016ba <__fp_mpack_finite>:
    16ba:	91 50       	subi	r25, 0x01	; 1
    16bc:	20 f4       	brcc	.+8      	; 0x16c6 <__fp_mpack_finite+0xc>
    16be:	87 95       	ror	r24
    16c0:	77 95       	ror	r23
    16c2:	67 95       	ror	r22
    16c4:	b7 95       	ror	r27
    16c6:	88 0f       	add	r24, r24
    16c8:	91 1d       	adc	r25, r1
    16ca:	96 95       	lsr	r25
    16cc:	87 95       	ror	r24
    16ce:	97 f9       	bld	r25, 7
    16d0:	08 95       	ret

000016d2 <__fp_norm2>:
    16d2:	91 50       	subi	r25, 0x01	; 1
    16d4:	50 40       	sbci	r21, 0x00	; 0
    16d6:	66 0f       	add	r22, r22
    16d8:	77 1f       	adc	r23, r23
    16da:	88 1f       	adc	r24, r24
    16dc:	d2 f7       	brpl	.-12     	; 0x16d2 <__fp_norm2>
    16de:	08 95       	ret
    16e0:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__fp_nan>

000016e4 <__fp_rempio2>:
    16e4:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <__fp_splitA>
    16e8:	d8 f3       	brcs	.-10     	; 0x16e0 <__fp_norm2+0xe>
    16ea:	e8 94       	clt
    16ec:	e0 e0       	ldi	r30, 0x00	; 0
    16ee:	bb 27       	eor	r27, r27
    16f0:	9f 57       	subi	r25, 0x7F	; 127
    16f2:	f0 f0       	brcs	.+60     	; 0x1730 <__fp_rempio2+0x4c>
    16f4:	2a ed       	ldi	r18, 0xDA	; 218
    16f6:	3f e0       	ldi	r19, 0x0F	; 15
    16f8:	49 ec       	ldi	r20, 0xC9	; 201
    16fa:	06 c0       	rjmp	.+12     	; 0x1708 <__fp_rempio2+0x24>
    16fc:	ee 0f       	add	r30, r30
    16fe:	bb 0f       	add	r27, r27
    1700:	66 1f       	adc	r22, r22
    1702:	77 1f       	adc	r23, r23
    1704:	88 1f       	adc	r24, r24
    1706:	28 f0       	brcs	.+10     	; 0x1712 <__fp_rempio2+0x2e>
    1708:	b2 3a       	cpi	r27, 0xA2	; 162
    170a:	62 07       	cpc	r22, r18
    170c:	73 07       	cpc	r23, r19
    170e:	84 07       	cpc	r24, r20
    1710:	28 f0       	brcs	.+10     	; 0x171c <__fp_rempio2+0x38>
    1712:	b2 5a       	subi	r27, 0xA2	; 162
    1714:	62 0b       	sbc	r22, r18
    1716:	73 0b       	sbc	r23, r19
    1718:	84 0b       	sbc	r24, r20
    171a:	e3 95       	inc	r30
    171c:	9a 95       	dec	r25
    171e:	72 f7       	brpl	.-36     	; 0x16fc <__fp_rempio2+0x18>
    1720:	80 38       	cpi	r24, 0x80	; 128
    1722:	30 f4       	brcc	.+12     	; 0x1730 <__fp_rempio2+0x4c>
    1724:	9a 95       	dec	r25
    1726:	bb 0f       	add	r27, r27
    1728:	66 1f       	adc	r22, r22
    172a:	77 1f       	adc	r23, r23
    172c:	88 1f       	adc	r24, r24
    172e:	d2 f7       	brpl	.-12     	; 0x1724 <__fp_rempio2+0x40>
    1730:	90 48       	sbci	r25, 0x80	; 128
    1732:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__fp_mpack_finite>

00001736 <__fp_sinus>:
    1736:	ef 93       	push	r30
    1738:	e0 ff       	sbrs	r30, 0
    173a:	07 c0       	rjmp	.+14     	; 0x174a <__fp_sinus+0x14>
    173c:	a2 ea       	ldi	r26, 0xA2	; 162
    173e:	2a ed       	ldi	r18, 0xDA	; 218
    1740:	3f e0       	ldi	r19, 0x0F	; 15
    1742:	49 ec       	ldi	r20, 0xC9	; 201
    1744:	5f eb       	ldi	r21, 0xBF	; 191
    1746:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__addsf3x>
    174a:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__fp_round>
    174e:	0f 90       	pop	r0
    1750:	03 94       	inc	r0
    1752:	01 fc       	sbrc	r0, 1
    1754:	90 58       	subi	r25, 0x80	; 128
    1756:	e8 e6       	ldi	r30, 0x68	; 104
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	0c 94 af 0b 	jmp	0x175e	; 0x175e <__fp_powsodd>

0000175e <__fp_powsodd>:
    175e:	9f 93       	push	r25
    1760:	8f 93       	push	r24
    1762:	7f 93       	push	r23
    1764:	6f 93       	push	r22
    1766:	ff 93       	push	r31
    1768:	ef 93       	push	r30
    176a:	9b 01       	movw	r18, r22
    176c:	ac 01       	movw	r20, r24
    176e:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__mulsf3>
    1772:	ef 91       	pop	r30
    1774:	ff 91       	pop	r31
    1776:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__fp_powser>
    177a:	2f 91       	pop	r18
    177c:	3f 91       	pop	r19
    177e:	4f 91       	pop	r20
    1780:	5f 91       	pop	r21
    1782:	0c 94 a0 0a 	jmp	0x1540	; 0x1540 <__mulsf3>

00001786 <__fp_powser>:
    1786:	df 93       	push	r29
    1788:	cf 93       	push	r28
    178a:	1f 93       	push	r17
    178c:	0f 93       	push	r16
    178e:	ff 92       	push	r15
    1790:	ef 92       	push	r14
    1792:	df 92       	push	r13
    1794:	7b 01       	movw	r14, r22
    1796:	8c 01       	movw	r16, r24
    1798:	68 94       	set
    179a:	06 c0       	rjmp	.+12     	; 0x17a8 <__fp_powser+0x22>
    179c:	da 2e       	mov	r13, r26
    179e:	ef 01       	movw	r28, r30
    17a0:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__mulsf3x>
    17a4:	fe 01       	movw	r30, r28
    17a6:	e8 94       	clt
    17a8:	a5 91       	lpm	r26, Z+
    17aa:	25 91       	lpm	r18, Z+
    17ac:	35 91       	lpm	r19, Z+
    17ae:	45 91       	lpm	r20, Z+
    17b0:	55 91       	lpm	r21, Z+
    17b2:	a6 f3       	brts	.-24     	; 0x179c <__fp_powser+0x16>
    17b4:	ef 01       	movw	r28, r30
    17b6:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__addsf3x>
    17ba:	fe 01       	movw	r30, r28
    17bc:	97 01       	movw	r18, r14
    17be:	a8 01       	movw	r20, r16
    17c0:	da 94       	dec	r13
    17c2:	69 f7       	brne	.-38     	; 0x179e <__fp_powser+0x18>
    17c4:	df 90       	pop	r13
    17c6:	ef 90       	pop	r14
    17c8:	ff 90       	pop	r15
    17ca:	0f 91       	pop	r16
    17cc:	1f 91       	pop	r17
    17ce:	cf 91       	pop	r28
    17d0:	df 91       	pop	r29
    17d2:	08 95       	ret

000017d4 <_ZN15OrangutanAnalog7setModeEh.part.0>:
    17d4:	ec e7       	ldi	r30, 0x7C	; 124
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	8f 7d       	andi	r24, 0xDF	; 223
    17dc:	80 83       	st	Z, r24
    17de:	08 95       	ret

000017e0 <_ZN15OrangutanAnalog7setModeEh>:
    17e0:	81 11       	cpse	r24, r1
    17e2:	03 c0       	rjmp	.+6      	; 0x17ea <_ZN15OrangutanAnalog7setModeEh+0xa>
    17e4:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_ZN15OrangutanAnalog7setModeEh.part.0>
    17e8:	08 95       	ret
    17ea:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    17ee:	80 62       	ori	r24, 0x20	; 32
    17f0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    17f4:	08 95       	ret

000017f6 <_ZN15OrangutanAnalog7getModeEv>:
    17f6:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    17fa:	85 fb       	bst	r24, 5
    17fc:	88 27       	eor	r24, r24
    17fe:	80 f9       	bld	r24, 0
    1800:	08 95       	ret

00001802 <_ZN15OrangutanAnalog16conversionResultEv>:
    1802:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN15OrangutanAnalog7getModeEv>
    1806:	88 23       	and	r24, r24
    1808:	21 f0       	breq	.+8      	; 0x1812 <_ZN15OrangutanAnalog16conversionResultEv+0x10>
    180a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	08 95       	ret
    1812:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1816:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    181a:	08 95       	ret

0000181c <_ZN15OrangutanAnalog15startConversionEhh>:
    181c:	80 32       	cpi	r24, 0x20	; 32
    181e:	a0 f4       	brcc	.+40     	; 0x1848 <_ZN15OrangutanAnalog15startConversionEhh+0x2c>
    1820:	97 e8       	ldi	r25, 0x87	; 135
    1822:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1826:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    182a:	66 23       	and	r22, r22
    182c:	11 f0       	breq	.+4      	; 0x1832 <_ZN15OrangutanAnalog15startConversionEhh+0x16>
    182e:	90 6c       	ori	r25, 0xC0	; 192
    1830:	02 c0       	rjmp	.+4      	; 0x1836 <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
    1832:	9f 77       	andi	r25, 0x7F	; 127
    1834:	90 64       	ori	r25, 0x40	; 64
    1836:	90 7e       	andi	r25, 0xE0	; 224
    1838:	98 2b       	or	r25, r24
    183a:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    183e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1842:	80 64       	ori	r24, 0x40	; 64
    1844:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1848:	08 95       	ret

0000184a <_ZN15OrangutanAnalog11readAverageEhj>:
    184a:	a0 e0       	ldi	r26, 0x00	; 0
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	eb e2       	ldi	r30, 0x2B	; 43
    1850:	fc e0       	ldi	r31, 0x0C	; 12
    1852:	0c 94 8d 19 	jmp	0x331a	; 0x331a <__prologue_saves__+0x14>
    1856:	eb 01       	movw	r28, r22
    1858:	60 e0       	ldi	r22, 0x00	; 0
    185a:	0e 94 0e 0c 	call	0x181c	; 0x181c <_ZN15OrangutanAnalog15startConversionEhh>
    185e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1862:	86 fd       	sbrc	r24, 6
    1864:	fc cf       	rjmp	.-8      	; 0x185e <_ZN15OrangutanAnalog11readAverageEhj+0x14>
    1866:	8e 01       	movw	r16, r28
    1868:	c1 2c       	mov	r12, r1
    186a:	d1 2c       	mov	r13, r1
    186c:	76 01       	movw	r14, r12
    186e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1872:	80 64       	ori	r24, 0x40	; 64
    1874:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1878:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    187c:	86 fd       	sbrc	r24, 6
    187e:	fc cf       	rjmp	.-8      	; 0x1878 <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
    1880:	0e 94 01 0c 	call	0x1802	; 0x1802 <_ZN15OrangutanAnalog16conversionResultEv>
    1884:	c8 0e       	add	r12, r24
    1886:	d9 1e       	adc	r13, r25
    1888:	e1 1c       	adc	r14, r1
    188a:	f1 1c       	adc	r15, r1
    188c:	01 50       	subi	r16, 0x01	; 1
    188e:	11 09       	sbc	r17, r1
    1890:	01 15       	cp	r16, r1
    1892:	11 05       	cpc	r17, r1
    1894:	61 f7       	brne	.-40     	; 0x186e <_ZN15OrangutanAnalog11readAverageEhj+0x24>
    1896:	ce 01       	movw	r24, r28
    1898:	96 95       	lsr	r25
    189a:	87 95       	ror	r24
    189c:	c0 34       	cpi	r28, 0x40	; 64
    189e:	d1 05       	cpc	r29, r1
    18a0:	38 f4       	brcc	.+14     	; 0x18b0 <_ZN15OrangutanAnalog11readAverageEhj+0x66>
    18a2:	8c 0d       	add	r24, r12
    18a4:	9d 1d       	adc	r25, r13
    18a6:	be 01       	movw	r22, r28
    18a8:	0e 94 0c 19 	call	0x3218	; 0x3218 <__udivmodhi4>
    18ac:	cb 01       	movw	r24, r22
    18ae:	0e c0       	rjmp	.+28     	; 0x18cc <_ZN15OrangutanAnalog11readAverageEhj+0x82>
    18b0:	a7 01       	movw	r20, r14
    18b2:	96 01       	movw	r18, r12
    18b4:	28 0f       	add	r18, r24
    18b6:	39 1f       	adc	r19, r25
    18b8:	41 1d       	adc	r20, r1
    18ba:	51 1d       	adc	r21, r1
    18bc:	ca 01       	movw	r24, r20
    18be:	b9 01       	movw	r22, r18
    18c0:	9e 01       	movw	r18, r28
    18c2:	40 e0       	ldi	r20, 0x00	; 0
    18c4:	50 e0       	ldi	r21, 0x00	; 0
    18c6:	0e 94 20 19 	call	0x3240	; 0x3240 <__udivmodsi4>
    18ca:	c9 01       	movw	r24, r18
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    18d0:	e8 e0       	ldi	r30, 0x08	; 8
    18d2:	0c 94 a9 19 	jmp	0x3352	; 0x3352 <__epilogue_restores__+0x14>

000018d6 <_ZN15OrangutanAnalog12toMillivoltsEj>:
    18d6:	cf 92       	push	r12
    18d8:	df 92       	push	r13
    18da:	ef 92       	push	r14
    18dc:	ff 92       	push	r15
    18de:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
    18e2:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
    18e6:	9c 01       	movw	r18, r24
    18e8:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__umulhisi3>
    18ec:	6b 01       	movw	r12, r22
    18ee:	7c 01       	movw	r14, r24
    18f0:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN15OrangutanAnalog7getModeEv>
    18f4:	88 23       	and	r24, r24
    18f6:	59 f0       	breq	.+22     	; 0x190e <_ZN15OrangutanAnalog12toMillivoltsEj+0x38>
    18f8:	c7 01       	movw	r24, r14
    18fa:	b6 01       	movw	r22, r12
    18fc:	61 58       	subi	r22, 0x81	; 129
    18fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1900:	8f 4f       	sbci	r24, 0xFF	; 255
    1902:	9f 4f       	sbci	r25, 0xFF	; 255
    1904:	2f ef       	ldi	r18, 0xFF	; 255
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	40 e0       	ldi	r20, 0x00	; 0
    190a:	50 e0       	ldi	r21, 0x00	; 0
    190c:	0a c0       	rjmp	.+20     	; 0x1922 <_ZN15OrangutanAnalog12toMillivoltsEj+0x4c>
    190e:	c7 01       	movw	r24, r14
    1910:	b6 01       	movw	r22, r12
    1912:	61 50       	subi	r22, 0x01	; 1
    1914:	7e 4f       	sbci	r23, 0xFE	; 254
    1916:	8f 4f       	sbci	r24, 0xFF	; 255
    1918:	9f 4f       	sbci	r25, 0xFF	; 255
    191a:	2f ef       	ldi	r18, 0xFF	; 255
    191c:	33 e0       	ldi	r19, 0x03	; 3
    191e:	40 e0       	ldi	r20, 0x00	; 0
    1920:	50 e0       	ldi	r21, 0x00	; 0
    1922:	0e 94 20 19 	call	0x3240	; 0x3240 <__udivmodsi4>
    1926:	c9 01       	movw	r24, r18
    1928:	ff 90       	pop	r15
    192a:	ef 90       	pop	r14
    192c:	df 90       	pop	r13
    192e:	cf 90       	pop	r12
    1930:	08 95       	ret

00001932 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
    1932:	0e 94 25 0c 	call	0x184a	; 0x184a <_ZN15OrangutanAnalog11readAverageEhj>
    1936:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <_ZN15OrangutanAnalog12toMillivoltsEj>
    193a:	08 95       	ret

0000193c <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
    193c:	1f 93       	push	r17
    193e:	cf 93       	push	r28
    1940:	df 93       	push	r29
    1942:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <_ZN15OrangutanAnalog7getModeEv>
    1946:	18 2f       	mov	r17, r24
    1948:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_ZN15OrangutanAnalog7setModeEh.part.0>
    194c:	6a e0       	ldi	r22, 0x0A	; 10
    194e:	70 e0       	ldi	r23, 0x00	; 0
    1950:	86 e0       	ldi	r24, 0x06	; 6
    1952:	0e 94 99 0c 	call	0x1932	; 0x1932 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
    1956:	ec 01       	movw	r28, r24
    1958:	81 2f       	mov	r24, r17
    195a:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <_ZN15OrangutanAnalog7setModeEh>
    195e:	ce 01       	movw	r24, r28
    1960:	88 0f       	add	r24, r24
    1962:	99 1f       	adc	r25, r25
    1964:	8c 0f       	add	r24, r28
    1966:	9d 1f       	adc	r25, r29
    1968:	01 96       	adiw	r24, 0x01	; 1
    196a:	96 95       	lsr	r25
    196c:	87 95       	ror	r24
    196e:	df 91       	pop	r29
    1970:	cf 91       	pop	r28
    1972:	1f 91       	pop	r17
    1974:	08 95       	ret

00001976 <read_battery_millivolts_3pi>:
    1976:	0e 94 9e 0c 	call	0x193c	; 0x193c <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
    197a:	08 95       	ret

0000197c <_ZL16currentCharacterv>:
    197c:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <_ZL17use_program_space>
    1980:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <__data_end>
    1984:	f0 91 95 01 	lds	r31, 0x0195	; 0x800195 <__data_end+0x1>
    1988:	99 23       	and	r25, r25
    198a:	11 f0       	breq	.+4      	; 0x1990 <_ZL16currentCharacterv+0x14>
    198c:	84 91       	lpm	r24, Z
    198e:	01 c0       	rjmp	.+2      	; 0x1992 <_ZL16currentCharacterv+0x16>
    1990:	80 81       	ld	r24, Z
    1992:	2f eb       	ldi	r18, 0xBF	; 191
    1994:	28 0f       	add	r18, r24
    1996:	2a 31       	cpi	r18, 0x1A	; 26
    1998:	10 f4       	brcc	.+4      	; 0x199e <_ZL16currentCharacterv+0x22>
    199a:	80 5e       	subi	r24, 0xE0	; 224
    199c:	08 95       	ret
    199e:	80 32       	cpi	r24, 0x20	; 32
    19a0:	49 f4       	brne	.+18     	; 0x19b4 <_ZL16currentCharacterv+0x38>
    19a2:	9f 01       	movw	r18, r30
    19a4:	2f 5f       	subi	r18, 0xFF	; 255
    19a6:	3f 4f       	sbci	r19, 0xFF	; 255
    19a8:	30 93 95 01 	sts	0x0195, r19	; 0x800195 <__data_end+0x1>
    19ac:	20 93 94 01 	sts	0x0194, r18	; 0x800194 <__data_end>
    19b0:	ef 2b       	or	r30, r31
    19b2:	31 f7       	brne	.-52     	; 0x1980 <_ZL16currentCharacterv+0x4>
    19b4:	08 95       	ret

000019b6 <_ZL9getNumberv>:
    19b6:	1f 93       	push	r17
    19b8:	cf 93       	push	r28
    19ba:	df 93       	push	r29
    19bc:	0e 94 be 0c 	call	0x197c	; 0x197c <_ZL16currentCharacterv>
    19c0:	c0 e0       	ldi	r28, 0x00	; 0
    19c2:	d0 e0       	ldi	r29, 0x00	; 0
    19c4:	1a e0       	ldi	r17, 0x0A	; 10
    19c6:	90 ed       	ldi	r25, 0xD0	; 208
    19c8:	98 0f       	add	r25, r24
    19ca:	9a 30       	cpi	r25, 0x0A	; 10
    19cc:	b8 f4       	brcc	.+46     	; 0x19fc <_ZL9getNumberv+0x46>
    19ce:	9e 01       	movw	r18, r28
    19d0:	12 9f       	mul	r17, r18
    19d2:	e0 01       	movw	r28, r0
    19d4:	13 9f       	mul	r17, r19
    19d6:	d0 0d       	add	r29, r0
    19d8:	11 24       	eor	r1, r1
    19da:	c8 0f       	add	r28, r24
    19dc:	d1 1d       	adc	r29, r1
    19de:	87 fd       	sbrc	r24, 7
    19e0:	da 95       	dec	r29
    19e2:	e0 97       	sbiw	r28, 0x30	; 48
    19e4:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <__data_end>
    19e8:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <__data_end+0x1>
    19ec:	01 96       	adiw	r24, 0x01	; 1
    19ee:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <__data_end+0x1>
    19f2:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <__data_end>
    19f6:	0e 94 be 0c 	call	0x197c	; 0x197c <_ZL16currentCharacterv>
    19fa:	e5 cf       	rjmp	.-54     	; 0x19c6 <_ZL9getNumberv+0x10>
    19fc:	ce 01       	movw	r24, r28
    19fe:	df 91       	pop	r29
    1a00:	cf 91       	pop	r28
    1a02:	1f 91       	pop	r17
    1a04:	08 95       	ret

00001a06 <_ZN15OrangutanBuzzer5init2Ev>:
    1a06:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1a0a:	83 e2       	ldi	r24, 0x23	; 35
    1a0c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1a10:	81 e1       	ldi	r24, 0x11	; 17
    1a12:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1a16:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    1a1a:	80 e1       	ldi	r24, 0x10	; 16
    1a1c:	97 e2       	ldi	r25, 0x27	; 39
    1a1e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1a22:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1a26:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1a2a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1a2e:	22 9a       	sbi	0x04, 2	; 4
    1a30:	78 94       	sei
    1a32:	08 95       	ret

00001a34 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
    1a34:	8f 92       	push	r8
    1a36:	9f 92       	push	r9
    1a38:	af 92       	push	r10
    1a3a:	bf 92       	push	r11
    1a3c:	df 92       	push	r13
    1a3e:	ef 92       	push	r14
    1a40:	ff 92       	push	r15
    1a42:	0f 93       	push	r16
    1a44:	1f 93       	push	r17
    1a46:	cf 93       	push	r28
    1a48:	df 93       	push	r29
    1a4a:	5c 01       	movw	r10, r24
    1a4c:	8b 01       	movw	r16, r22
    1a4e:	d4 2e       	mov	r13, r20
    1a50:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <buzzerInitialized>
    1a54:	81 11       	cpse	r24, r1
    1a56:	05 c0       	rjmp	.+10     	; 0x1a62 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <buzzerInitialized>
    1a5e:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <_ZN15OrangutanBuzzer5init2Ev>
    1a62:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <buzzerFinished>
    1a66:	b7 fe       	sbrs	r11, 7
    1a68:	05 c0       	rjmp	.+10     	; 0x1a74 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
    1a6a:	e8 94       	clt
    1a6c:	b7 f8       	bld	r11, 7
    1a6e:	2a e0       	ldi	r18, 0x0A	; 10
    1a70:	f2 2e       	mov	r15, r18
    1a72:	02 c0       	rjmp	.+4      	; 0x1a78 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
    1a74:	ff 24       	eor	r15, r15
    1a76:	f3 94       	inc	r15
    1a78:	e0 90 81 00 	lds	r14, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1a7c:	2e 2d       	mov	r18, r14
    1a7e:	28 7f       	andi	r18, 0xF8	; 248
    1a80:	e2 2e       	mov	r14, r18
    1a82:	48 ec       	ldi	r20, 0xC8	; 200
    1a84:	f4 9e       	mul	r15, r20
    1a86:	c0 01       	movw	r24, r0
    1a88:	11 24       	eor	r1, r1
    1a8a:	8a 15       	cp	r24, r10
    1a8c:	9b 05       	cpc	r25, r11
    1a8e:	e0 f4       	brcc	.+56     	; 0x1ac8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
    1a90:	e5 01       	movw	r28, r10
    1a92:	51 e1       	ldi	r21, 0x11	; 17
    1a94:	a5 16       	cp	r10, r21
    1a96:	57 e2       	ldi	r21, 0x27	; 39
    1a98:	b5 06       	cpc	r11, r21
    1a9a:	10 f0       	brcs	.+4      	; 0x1aa0 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
    1a9c:	c0 e1       	ldi	r28, 0x10	; 16
    1a9e:	d7 e2       	ldi	r29, 0x27	; 39
    1aa0:	be 01       	movw	r22, r28
    1aa2:	76 95       	lsr	r23
    1aa4:	67 95       	ror	r22
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	60 58       	subi	r22, 0x80	; 128
    1aac:	79 46       	sbci	r23, 0x69	; 105
    1aae:	87 46       	sbci	r24, 0x67	; 103
    1ab0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab2:	4e 01       	movw	r8, r28
    1ab4:	a1 2c       	mov	r10, r1
    1ab6:	b1 2c       	mov	r11, r1
    1ab8:	a5 01       	movw	r20, r10
    1aba:	94 01       	movw	r18, r8
    1abc:	0e 94 20 19 	call	0x3240	; 0x3240 <__udivmodsi4>
    1ac0:	59 01       	movw	r10, r18
    1ac2:	8e 2d       	mov	r24, r14
    1ac4:	81 60       	ori	r24, 0x01	; 1
    1ac6:	24 c0       	rjmp	.+72     	; 0x1b10 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
    1ac8:	c8 e2       	ldi	r28, 0x28	; 40
    1aca:	fc 9e       	mul	r15, r28
    1acc:	c0 2d       	mov	r28, r0
    1ace:	11 24       	eor	r1, r1
    1ad0:	d0 e0       	ldi	r29, 0x00	; 0
    1ad2:	ca 15       	cp	r28, r10
    1ad4:	db 05       	cpc	r29, r11
    1ad6:	08 f4       	brcc	.+2      	; 0x1ada <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
    1ad8:	e5 01       	movw	r28, r10
    1ada:	be 01       	movw	r22, r28
    1adc:	76 95       	lsr	r23
    1ade:	67 95       	ror	r22
    1ae0:	9e 01       	movw	r18, r28
    1ae2:	40 e0       	ldi	r20, 0x00	; 0
    1ae4:	50 e0       	ldi	r21, 0x00	; 0
    1ae6:	8a e0       	ldi	r24, 0x0A	; 10
    1ae8:	f8 12       	cpse	r15, r24
    1aea:	07 c0       	rjmp	.+14     	; 0x1afa <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	60 5e       	subi	r22, 0xE0	; 224
    1af2:	73 44       	sbci	r23, 0x43	; 67
    1af4:	81 44       	sbci	r24, 0x41	; 65
    1af6:	9f 4f       	sbci	r25, 0xFF	; 255
    1af8:	06 c0       	rjmp	.+12     	; 0x1b06 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	60 53       	subi	r22, 0x30	; 48
    1b00:	7d 4e       	sbci	r23, 0xED	; 237
    1b02:	8c 4e       	sbci	r24, 0xEC	; 236
    1b04:	9f 4f       	sbci	r25, 0xFF	; 255
    1b06:	0e 94 20 19 	call	0x3240	; 0x3240 <__udivmodsi4>
    1b0a:	59 01       	movw	r10, r18
    1b0c:	8e 2d       	mov	r24, r14
    1b0e:	82 60       	ori	r24, 0x02	; 2
    1b10:	88 2e       	mov	r8, r24
    1b12:	2a e0       	ldi	r18, 0x0A	; 10
    1b14:	f2 12       	cpse	r15, r18
    1b16:	07 c0       	rjmp	.+14     	; 0x1b26 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
    1b18:	ce 01       	movw	r24, r28
    1b1a:	05 96       	adiw	r24, 0x05	; 5
    1b1c:	6a e0       	ldi	r22, 0x0A	; 10
    1b1e:	70 e0       	ldi	r23, 0x00	; 0
    1b20:	0e 94 0c 19 	call	0x3218	; 0x3218 <__udivmodhi4>
    1b24:	eb 01       	movw	r28, r22
    1b26:	c8 3e       	cpi	r28, 0xE8	; 232
    1b28:	43 e0       	ldi	r20, 0x03	; 3
    1b2a:	d4 07       	cpc	r29, r20
    1b2c:	59 f0       	breq	.+22     	; 0x1b44 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    1b2e:	98 01       	movw	r18, r16
    1b30:	de 01       	movw	r26, r28
    1b32:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__umulhisi3>
    1b36:	28 ee       	ldi	r18, 0xE8	; 232
    1b38:	33 e0       	ldi	r19, 0x03	; 3
    1b3a:	40 e0       	ldi	r20, 0x00	; 0
    1b3c:	50 e0       	ldi	r21, 0x00	; 0
    1b3e:	0e 94 42 19 	call	0x3284	; 0x3284 <__divmodsi4>
    1b42:	89 01       	movw	r16, r18
    1b44:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1b48:	80 92 81 00 	sts	0x0081, r8	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1b4c:	b0 92 89 00 	sts	0x0089, r11	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1b50:	a0 92 88 00 	sts	0x0088, r10	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1b54:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1b58:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1b5c:	4d 2d       	mov	r20, r13
    1b5e:	40 31       	cpi	r20, 0x10	; 16
    1b60:	08 f0       	brcs	.+2      	; 0x1b64 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    1b62:	4f e0       	ldi	r20, 0x0F	; 15
    1b64:	80 e1       	ldi	r24, 0x10	; 16
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	84 1b       	sub	r24, r20
    1b6a:	91 09       	sbc	r25, r1
    1b6c:	a9 01       	movw	r20, r18
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    1b70:	56 95       	lsr	r21
    1b72:	47 95       	ror	r20
    1b74:	8a 95       	dec	r24
    1b76:	e2 f7       	brpl	.-8      	; 0x1b70 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    1b78:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1b7c:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1b80:	10 93 9c 01 	sts	0x019C, r17	; 0x80019c <_ZL13buzzerTimeout+0x1>
    1b84:	00 93 9b 01 	sts	0x019B, r16	; 0x80019b <_ZL13buzzerTimeout>
    1b88:	86 b3       	in	r24, 0x16	; 22
    1b8a:	8f ef       	ldi	r24, 0xFF	; 255
    1b8c:	86 bb       	out	0x16, r24	; 22
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1b94:	df 91       	pop	r29
    1b96:	cf 91       	pop	r28
    1b98:	1f 91       	pop	r17
    1b9a:	0f 91       	pop	r16
    1b9c:	ff 90       	pop	r15
    1b9e:	ef 90       	pop	r14
    1ba0:	df 90       	pop	r13
    1ba2:	bf 90       	pop	r11
    1ba4:	af 90       	pop	r10
    1ba6:	9f 90       	pop	r9
    1ba8:	8f 90       	pop	r8
    1baa:	08 95       	ret

00001bac <_ZN15OrangutanBuzzer8playNoteEhjh>:
    1bac:	cf 93       	push	r28
    1bae:	df 93       	push	r29
    1bb0:	eb 01       	movw	r28, r22
    1bb2:	8f 3f       	cpi	r24, 0xFF	; 255
    1bb4:	11 f0       	breq	.+4      	; 0x1bba <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
    1bb6:	41 11       	cpse	r20, r1
    1bb8:	05 c0       	rjmp	.+10     	; 0x1bc4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
    1bba:	40 e0       	ldi	r20, 0x00	; 0
    1bbc:	be 01       	movw	r22, r28
    1bbe:	88 ee       	ldi	r24, 0xE8	; 232
    1bc0:	93 e0       	ldi	r25, 0x03	; 3
    1bc2:	43 c0       	rjmp	.+134    	; 0x1c4a <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
    1bc4:	81 31       	cpi	r24, 0x11	; 17
    1bc6:	30 f0       	brcs	.+12     	; 0x1bd4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
    1bc8:	50 ef       	ldi	r21, 0xF0	; 240
    1bca:	58 0f       	add	r21, r24
    1bcc:	50 36       	cpi	r21, 0x60	; 96
    1bce:	18 f0       	brcs	.+6      	; 0x1bd6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1bd0:	5f e5       	ldi	r21, 0x5F	; 95
    1bd2:	01 c0       	rjmp	.+2      	; 0x1bd6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1bd4:	50 e0       	ldi	r21, 0x00	; 0
    1bd6:	85 2f       	mov	r24, r21
    1bd8:	6c e0       	ldi	r22, 0x0C	; 12
    1bda:	0e 94 00 19 	call	0x3200	; 0x3200 <__udivmodqi4>
    1bde:	68 2f       	mov	r22, r24
    1be0:	74 ef       	ldi	r23, 0xF4	; 244
    1be2:	76 03       	mulsu	r23, r22
    1be4:	90 01       	movw	r18, r0
    1be6:	11 24       	eor	r1, r1
    1be8:	25 0f       	add	r18, r21
    1bea:	31 1d       	adc	r19, r1
    1bec:	2c 30       	cpi	r18, 0x0C	; 12
    1bee:	31 05       	cpc	r19, r1
    1bf0:	40 f4       	brcc	.+16     	; 0x1c02 <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
    1bf2:	f9 01       	movw	r30, r18
    1bf4:	ee 0f       	add	r30, r30
    1bf6:	ff 1f       	adc	r31, r31
    1bf8:	ec 5c       	subi	r30, 0xCC	; 204
    1bfa:	fe 4f       	sbci	r31, 0xFE	; 254
    1bfc:	20 81       	ld	r18, Z
    1bfe:	31 81       	ldd	r19, Z+1	; 0x01
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	87 30       	cpi	r24, 0x07	; 7
    1c08:	81 f0       	breq	.+32     	; 0x1c2a <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
    1c0a:	08 2e       	mov	r0, r24
    1c0c:	02 c0       	rjmp	.+4      	; 0x1c12 <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
    1c0e:	22 0f       	add	r18, r18
    1c10:	33 1f       	adc	r19, r19
    1c12:	0a 94       	dec	r0
    1c14:	e2 f7       	brpl	.-8      	; 0x1c0e <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    1c16:	82 30       	cpi	r24, 0x02	; 2
    1c18:	28 f0       	brcs	.+10     	; 0x1c24 <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
    1c1a:	c9 01       	movw	r24, r18
    1c1c:	05 96       	adiw	r24, 0x05	; 5
    1c1e:	6a e0       	ldi	r22, 0x0A	; 10
    1c20:	70 e0       	ldi	r23, 0x00	; 0
    1c22:	0c c0       	rjmp	.+24     	; 0x1c3c <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
    1c24:	c9 01       	movw	r24, r18
    1c26:	90 58       	subi	r25, 0x80	; 128
    1c28:	0c c0       	rjmp	.+24     	; 0x1c42 <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
    1c2a:	c9 01       	movw	r24, r18
    1c2c:	36 e0       	ldi	r19, 0x06	; 6
    1c2e:	88 0f       	add	r24, r24
    1c30:	99 1f       	adc	r25, r25
    1c32:	3a 95       	dec	r19
    1c34:	e1 f7       	brne	.-8      	; 0x1c2e <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
    1c36:	02 96       	adiw	r24, 0x02	; 2
    1c38:	65 e0       	ldi	r22, 0x05	; 5
    1c3a:	70 e0       	ldi	r23, 0x00	; 0
    1c3c:	0e 94 0c 19 	call	0x3218	; 0x3218 <__udivmodhi4>
    1c40:	cb 01       	movw	r24, r22
    1c42:	40 31       	cpi	r20, 0x10	; 16
    1c44:	08 f0       	brcs	.+2      	; 0x1c48 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    1c46:	4f e0       	ldi	r20, 0x0F	; 15
    1c48:	be 01       	movw	r22, r28
    1c4a:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1c4e:	df 91       	pop	r29
    1c50:	cf 91       	pop	r28
    1c52:	08 95       	ret

00001c54 <_ZL8nextNotev>:
    1c54:	a2 e0       	ldi	r26, 0x02	; 2
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	e0 e3       	ldi	r30, 0x30	; 48
    1c5a:	fe e0       	ldi	r31, 0x0E	; 14
    1c5c:	0c 94 85 19 	jmp	0x330a	; 0x330a <__prologue_saves__+0x4>
    1c60:	90 90 0a 01 	lds	r9, 0x010A	; 0x80010a <_ZL6octave>
    1c64:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <_ZL8staccato>
    1c68:	88 23       	and	r24, r24
    1c6a:	21 f0       	breq	.+8      	; 0x1c74 <_ZL8nextNotev+0x20>
    1c6c:	60 91 97 01 	lds	r22, 0x0197	; 0x800197 <_ZL22staccato_rest_duration>
    1c70:	61 11       	cpse	r22, r1
    1c72:	17 c0       	rjmp	.+46     	; 0x1ca2 <_ZL8nextNotev+0x4e>
    1c74:	77 24       	eor	r7, r7
    1c76:	73 94       	inc	r7
    1c78:	b0 ec       	ldi	r27, 0xC0	; 192
    1c7a:	ab 2e       	mov	r10, r27
    1c7c:	bd e5       	ldi	r27, 0x5D	; 93
    1c7e:	bb 2e       	mov	r11, r27
    1c80:	1a e0       	ldi	r17, 0x0A	; 10
    1c82:	61 2e       	mov	r6, r17
    1c84:	04 e0       	ldi	r16, 0x04	; 4
    1c86:	80 2e       	mov	r8, r16
    1c88:	80 ed       	ldi	r24, 0xD0	; 208
    1c8a:	c8 2e       	mov	r12, r24
    1c8c:	87 e0       	ldi	r24, 0x07	; 7
    1c8e:	d8 2e       	mov	r13, r24
    1c90:	94 e0       	ldi	r25, 0x04	; 4
    1c92:	e9 2e       	mov	r14, r25
    1c94:	f1 2c       	mov	r15, r1
    1c96:	04 ef       	ldi	r16, 0xF4	; 244
    1c98:	11 e0       	ldi	r17, 0x01	; 1
    1c9a:	2f e0       	ldi	r18, 0x0F	; 15
    1c9c:	42 2e       	mov	r4, r18
    1c9e:	51 2c       	mov	r5, r1
    1ca0:	15 c0       	rjmp	.+42     	; 0x1ccc <_ZL8nextNotev+0x78>
    1ca2:	70 e0       	ldi	r23, 0x00	; 0
    1ca4:	40 e0       	ldi	r20, 0x00	; 0
    1ca6:	88 ee       	ldi	r24, 0xE8	; 232
    1ca8:	93 e0       	ldi	r25, 0x03	; 3
    1caa:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1cae:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <_ZL22staccato_rest_duration>
    1cb2:	17 c1       	rjmp	.+558    	; 0x1ee2 <_ZL8nextNotev+0x28e>
    1cb4:	86 36       	cpi	r24, 0x66	; 102
    1cb6:	d4 f5       	brge	.+116    	; 0x1d2c <_ZL8nextNotev+0xd8>
    1cb8:	81 36       	cpi	r24, 0x61	; 97
    1cba:	09 f4       	brne	.+2      	; 0x1cbe <_ZL8nextNotev+0x6a>
    1cbc:	a9 c0       	rjmp	.+338    	; 0x1e10 <_ZL8nextNotev+0x1bc>
    1cbe:	7c f5       	brge	.+94     	; 0x1d1e <_ZL8nextNotev+0xca>
    1cc0:	8c 33       	cpi	r24, 0x3C	; 60
    1cc2:	09 f4       	brne	.+2      	; 0x1cc6 <_ZL8nextNotev+0x72>
    1cc4:	60 c0       	rjmp	.+192    	; 0x1d86 <_ZL8nextNotev+0x132>
    1cc6:	8e 33       	cpi	r24, 0x3E	; 62
    1cc8:	81 f4       	brne	.+32     	; 0x1cea <_ZL8nextNotev+0x96>
    1cca:	93 94       	inc	r9
    1ccc:	0e 94 be 0c 	call	0x197c	; 0x197c <_ZL16currentCharacterv>
    1cd0:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <__data_end>
    1cd4:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <__data_end+0x1>
    1cd8:	2f 5f       	subi	r18, 0xFF	; 255
    1cda:	3f 4f       	sbci	r19, 0xFF	; 255
    1cdc:	30 93 95 01 	sts	0x0195, r19	; 0x800195 <__data_end+0x1>
    1ce0:	20 93 94 01 	sts	0x0194, r18	; 0x800194 <__data_end>
    1ce4:	85 36       	cpi	r24, 0x65	; 101
    1ce6:	31 f7       	brne	.-52     	; 0x1cb4 <_ZL8nextNotev+0x60>
    1ce8:	52 c0       	rjmp	.+164    	; 0x1d8e <_ZL8nextNotev+0x13a>
    1cea:	81 32       	cpi	r24, 0x21	; 33
    1cec:	09 f0       	breq	.+2      	; 0x1cf0 <_ZL8nextNotev+0x9c>
    1cee:	8b c0       	rjmp	.+278    	; 0x1e06 <_ZL8nextNotev+0x1b2>
    1cf0:	80 92 0a 01 	sts	0x010A, r8	; 0x80010a <_ZL6octave>
    1cf4:	d0 92 09 01 	sts	0x0109, r13	; 0x800109 <_ZL19whole_note_duration+0x1>
    1cf8:	c0 92 08 01 	sts	0x0108, r12	; 0x800108 <_ZL19whole_note_duration>
    1cfc:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <_ZL9note_type+0x1>
    1d00:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <_ZL9note_type>
    1d04:	10 93 05 01 	sts	0x0105, r17	; 0x800105 <_ZL8duration+0x1>
    1d08:	00 93 04 01 	sts	0x0104, r16	; 0x800104 <_ZL8duration>
    1d0c:	50 92 03 01 	sts	0x0103, r5	; 0x800103 <_ZL6volume+0x1>
    1d10:	40 92 02 01 	sts	0x0102, r4	; 0x800102 <_ZL6volume>
    1d14:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <_ZL8staccato>
    1d18:	a4 e0       	ldi	r26, 0x04	; 4
    1d1a:	9a 2e       	mov	r9, r26
    1d1c:	d7 cf       	rjmp	.-82     	; 0x1ccc <_ZL8nextNotev+0x78>
    1d1e:	83 36       	cpi	r24, 0x63	; 99
    1d20:	a1 f1       	breq	.+104    	; 0x1d8a <_ZL8nextNotev+0x136>
    1d22:	0c f4       	brge	.+2      	; 0x1d26 <_ZL8nextNotev+0xd2>
    1d24:	78 c0       	rjmp	.+240    	; 0x1e16 <_ZL8nextNotev+0x1c2>
    1d26:	10 e0       	ldi	r17, 0x00	; 0
    1d28:	82 e0       	ldi	r24, 0x02	; 2
    1d2a:	77 c0       	rjmp	.+238    	; 0x1e1a <_ZL8nextNotev+0x1c6>
    1d2c:	8d 36       	cpi	r24, 0x6D	; 109
    1d2e:	c1 f1       	breq	.+112    	; 0x1da0 <_ZL8nextNotev+0x14c>
    1d30:	94 f4       	brge	.+36     	; 0x1d56 <_ZL8nextNotev+0x102>
    1d32:	87 36       	cpi	r24, 0x67	; 103
    1d34:	91 f1       	breq	.+100    	; 0x1d9a <_ZL8nextNotev+0x146>
    1d36:	74 f1       	brlt	.+92     	; 0x1d94 <_ZL8nextNotev+0x140>
    1d38:	8c 36       	cpi	r24, 0x6C	; 108
    1d3a:	09 f0       	breq	.+2      	; 0x1d3e <_ZL8nextNotev+0xea>
    1d3c:	64 c0       	rjmp	.+200    	; 0x1e06 <_ZL8nextNotev+0x1b2>
    1d3e:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <_ZL9getNumberv>
    1d42:	bc 01       	movw	r22, r24
    1d44:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL9note_type+0x1>
    1d48:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL9note_type>
    1d4c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    1d50:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    1d54:	51 c0       	rjmp	.+162    	; 0x1df8 <_ZL8nextNotev+0x1a4>
    1d56:	82 37       	cpi	r24, 0x72	; 114
    1d58:	c9 f1       	breq	.+114    	; 0x1dcc <_ZL8nextNotev+0x178>
    1d5a:	4c f4       	brge	.+18     	; 0x1d6e <_ZL8nextNotev+0x11a>
    1d5c:	8f 36       	cpi	r24, 0x6F	; 111
    1d5e:	09 f0       	breq	.+2      	; 0x1d62 <_ZL8nextNotev+0x10e>
    1d60:	52 c0       	rjmp	.+164    	; 0x1e06 <_ZL8nextNotev+0x1b2>
    1d62:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <_ZL9getNumberv>
    1d66:	98 2e       	mov	r9, r24
    1d68:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZL6octave>
    1d6c:	af cf       	rjmp	.-162    	; 0x1ccc <_ZL8nextNotev+0x78>
    1d6e:	84 37       	cpi	r24, 0x74	; 116
    1d70:	81 f1       	breq	.+96     	; 0x1dd2 <_ZL8nextNotev+0x17e>
    1d72:	86 37       	cpi	r24, 0x76	; 118
    1d74:	09 f0       	breq	.+2      	; 0x1d78 <_ZL8nextNotev+0x124>
    1d76:	47 c0       	rjmp	.+142    	; 0x1e06 <_ZL8nextNotev+0x1b2>
    1d78:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <_ZL9getNumberv>
    1d7c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_ZL6volume+0x1>
    1d80:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_ZL6volume>
    1d84:	a3 cf       	rjmp	.-186    	; 0x1ccc <_ZL8nextNotev+0x78>
    1d86:	9a 94       	dec	r9
    1d88:	a1 cf       	rjmp	.-190    	; 0x1ccc <_ZL8nextNotev+0x78>
    1d8a:	10 e0       	ldi	r17, 0x00	; 0
    1d8c:	20 c0       	rjmp	.+64     	; 0x1dce <_ZL8nextNotev+0x17a>
    1d8e:	10 e0       	ldi	r17, 0x00	; 0
    1d90:	84 e0       	ldi	r24, 0x04	; 4
    1d92:	43 c0       	rjmp	.+134    	; 0x1e1a <_ZL8nextNotev+0x1c6>
    1d94:	10 e0       	ldi	r17, 0x00	; 0
    1d96:	85 e0       	ldi	r24, 0x05	; 5
    1d98:	40 c0       	rjmp	.+128    	; 0x1e1a <_ZL8nextNotev+0x1c6>
    1d9a:	10 e0       	ldi	r17, 0x00	; 0
    1d9c:	87 e0       	ldi	r24, 0x07	; 7
    1d9e:	3d c0       	rjmp	.+122    	; 0x1e1a <_ZL8nextNotev+0x1c6>
    1da0:	0e 94 be 0c 	call	0x197c	; 0x197c <_ZL16currentCharacterv>
    1da4:	8c 36       	cpi	r24, 0x6C	; 108
    1da6:	19 f4       	brne	.+6      	; 0x1dae <_ZL8nextNotev+0x15a>
    1da8:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <_ZL8staccato>
    1dac:	04 c0       	rjmp	.+8      	; 0x1db6 <_ZL8nextNotev+0x162>
    1dae:	70 92 98 01 	sts	0x0198, r7	; 0x800198 <_ZL8staccato>
    1db2:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <_ZL22staccato_rest_duration>
    1db6:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <__data_end>
    1dba:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <__data_end+0x1>
    1dbe:	2f 5f       	subi	r18, 0xFF	; 255
    1dc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc2:	30 93 95 01 	sts	0x0195, r19	; 0x800195 <__data_end+0x1>
    1dc6:	20 93 94 01 	sts	0x0194, r18	; 0x800194 <__data_end>
    1dca:	80 cf       	rjmp	.-256    	; 0x1ccc <_ZL8nextNotev+0x78>
    1dcc:	11 e0       	ldi	r17, 0x01	; 1
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	24 c0       	rjmp	.+72     	; 0x1e1a <_ZL8nextNotev+0x1c6>
    1dd2:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <_ZL9getNumberv>
    1dd6:	bc 01       	movw	r22, r24
    1dd8:	c5 01       	movw	r24, r10
    1dda:	0e 94 0c 19 	call	0x3218	; 0x3218 <__udivmodhi4>
    1dde:	66 9e       	mul	r6, r22
    1de0:	c0 01       	movw	r24, r0
    1de2:	67 9e       	mul	r6, r23
    1de4:	90 0d       	add	r25, r0
    1de6:	11 24       	eor	r1, r1
    1de8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZL19whole_note_duration+0x1>
    1dec:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL19whole_note_duration>
    1df0:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <_ZL9note_type>
    1df4:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <_ZL9note_type+0x1>
    1df8:	0e 94 0c 19 	call	0x3218	; 0x3218 <__udivmodhi4>
    1dfc:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_ZL8duration+0x1>
    1e00:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_ZL8duration>
    1e04:	63 cf       	rjmp	.-314    	; 0x1ccc <_ZL8nextNotev+0x78>
    1e06:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <__data_end+0x1>
    1e0a:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <__data_end>
    1e0e:	69 c0       	rjmp	.+210    	; 0x1ee2 <_ZL8nextNotev+0x28e>
    1e10:	10 e0       	ldi	r17, 0x00	; 0
    1e12:	89 e0       	ldi	r24, 0x09	; 9
    1e14:	02 c0       	rjmp	.+4      	; 0x1e1a <_ZL8nextNotev+0x1c6>
    1e16:	10 e0       	ldi	r17, 0x00	; 0
    1e18:	8b e0       	ldi	r24, 0x0B	; 11
    1e1a:	08 2f       	mov	r16, r24
    1e1c:	9c e0       	ldi	r25, 0x0C	; 12
    1e1e:	99 9e       	mul	r9, r25
    1e20:	00 0d       	add	r16, r0
    1e22:	11 24       	eor	r1, r1
    1e24:	0e 94 be 0c 	call	0x197c	; 0x197c <_ZL16currentCharacterv>
    1e28:	98 2f       	mov	r25, r24
    1e2a:	97 7f       	andi	r25, 0xF7	; 247
    1e2c:	93 32       	cpi	r25, 0x23	; 35
    1e2e:	61 f4       	brne	.+24     	; 0x1e48 <_ZL8nextNotev+0x1f4>
    1e30:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <__data_end>
    1e34:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <__data_end+0x1>
    1e38:	2f 5f       	subi	r18, 0xFF	; 255
    1e3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e3c:	30 93 95 01 	sts	0x0195, r19	; 0x800195 <__data_end+0x1>
    1e40:	20 93 94 01 	sts	0x0194, r18	; 0x800194 <__data_end>
    1e44:	0f 5f       	subi	r16, 0xFF	; 255
    1e46:	ee cf       	rjmp	.-36     	; 0x1e24 <_ZL8nextNotev+0x1d0>
    1e48:	8d 32       	cpi	r24, 0x2D	; 45
    1e4a:	71 f4       	brne	.+28     	; 0x1e68 <_ZL8nextNotev+0x214>
    1e4c:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <__data_end>
    1e50:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <__data_end+0x1>
    1e54:	2f 5f       	subi	r18, 0xFF	; 255
    1e56:	3f 4f       	sbci	r19, 0xFF	; 255
    1e58:	30 93 95 01 	sts	0x0195, r19	; 0x800195 <__data_end+0x1>
    1e5c:	20 93 94 01 	sts	0x0194, r18	; 0x800194 <__data_end>
    1e60:	01 50       	subi	r16, 0x01	; 1
    1e62:	0e 94 be 0c 	call	0x197c	; 0x197c <_ZL16currentCharacterv>
    1e66:	f0 cf       	rjmp	.-32     	; 0x1e48 <_ZL8nextNotev+0x1f4>
    1e68:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_ZL8duration>
    1e6c:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_ZL8duration+0x1>
    1e70:	81 53       	subi	r24, 0x31	; 49
    1e72:	88 30       	cpi	r24, 0x08	; 8
    1e74:	50 f4       	brcc	.+20     	; 0x1e8a <_ZL8nextNotev+0x236>
    1e76:	e0 90 08 01 	lds	r14, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    1e7a:	f0 90 09 01 	lds	r15, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    1e7e:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <_ZL9getNumberv>
    1e82:	bc 01       	movw	r22, r24
    1e84:	c7 01       	movw	r24, r14
    1e86:	0e 94 0c 19 	call	0x3218	; 0x3218 <__udivmodhi4>
    1e8a:	7b 01       	movw	r14, r22
    1e8c:	f6 94       	lsr	r15
    1e8e:	e7 94       	ror	r14
    1e90:	69 83       	std	Y+1, r22	; 0x01
    1e92:	7a 83       	std	Y+2, r23	; 0x02
    1e94:	0e 94 be 0c 	call	0x197c	; 0x197c <_ZL16currentCharacterv>
    1e98:	69 81       	ldd	r22, Y+1	; 0x01
    1e9a:	7a 81       	ldd	r23, Y+2	; 0x02
    1e9c:	8e 32       	cpi	r24, 0x2E	; 46
    1e9e:	69 f4       	brne	.+26     	; 0x1eba <_ZL8nextNotev+0x266>
    1ea0:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <__data_end>
    1ea4:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <__data_end+0x1>
    1ea8:	2f 5f       	subi	r18, 0xFF	; 255
    1eaa:	3f 4f       	sbci	r19, 0xFF	; 255
    1eac:	30 93 95 01 	sts	0x0195, r19	; 0x800195 <__data_end+0x1>
    1eb0:	20 93 94 01 	sts	0x0194, r18	; 0x800194 <__data_end>
    1eb4:	6e 0d       	add	r22, r14
    1eb6:	7f 1d       	adc	r23, r15
    1eb8:	e9 cf       	rjmp	.-46     	; 0x1e8c <_ZL8nextNotev+0x238>
    1eba:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <_ZL8staccato>
    1ebe:	88 23       	and	r24, r24
    1ec0:	39 f0       	breq	.+14     	; 0x1ed0 <_ZL8nextNotev+0x27c>
    1ec2:	9b 01       	movw	r18, r22
    1ec4:	36 95       	lsr	r19
    1ec6:	27 95       	ror	r18
    1ec8:	20 93 97 01 	sts	0x0197, r18	; 0x800197 <_ZL22staccato_rest_duration>
    1ecc:	62 1b       	sub	r22, r18
    1ece:	71 09       	sbc	r23, r1
    1ed0:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <_ZL6volume>
    1ed4:	11 23       	and	r17, r17
    1ed6:	11 f0       	breq	.+4      	; 0x1edc <_ZL8nextNotev+0x288>
    1ed8:	8f ef       	ldi	r24, 0xFF	; 255
    1eda:	01 c0       	rjmp	.+2      	; 0x1ede <_ZL8nextNotev+0x28a>
    1edc:	80 2f       	mov	r24, r16
    1ede:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <_ZN15OrangutanBuzzer8playNoteEhjh>
    1ee2:	22 96       	adiw	r28, 0x02	; 2
    1ee4:	e0 e1       	ldi	r30, 0x10	; 16
    1ee6:	0c 94 a1 19 	jmp	0x3342	; 0x3342 <__epilogue_restores__+0x4>

00001eea <__vector_13>:
    1eea:	1f 92       	push	r1
    1eec:	0f 92       	push	r0
    1eee:	0f b6       	in	r0, 0x3f	; 63
    1ef0:	0f 92       	push	r0
    1ef2:	11 24       	eor	r1, r1
    1ef4:	2f 93       	push	r18
    1ef6:	3f 93       	push	r19
    1ef8:	4f 93       	push	r20
    1efa:	5f 93       	push	r21
    1efc:	6f 93       	push	r22
    1efe:	7f 93       	push	r23
    1f00:	8f 93       	push	r24
    1f02:	9f 93       	push	r25
    1f04:	af 93       	push	r26
    1f06:	bf 93       	push	r27
    1f08:	ef 93       	push	r30
    1f0a:	ff 93       	push	r31
    1f0c:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <_ZL13buzzerTimeout>
    1f10:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <_ZL13buzzerTimeout+0x1>
    1f14:	9c 01       	movw	r18, r24
    1f16:	21 50       	subi	r18, 0x01	; 1
    1f18:	31 09       	sbc	r19, r1
    1f1a:	30 93 9c 01 	sts	0x019C, r19	; 0x80019c <_ZL13buzzerTimeout+0x1>
    1f1e:	20 93 9b 01 	sts	0x019B, r18	; 0x80019b <_ZL13buzzerTimeout>
    1f22:	89 2b       	or	r24, r25
    1f24:	11 f5       	brne	.+68     	; 0x1f6a <__vector_13+0x80>
    1f26:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1f2a:	78 94       	sei
    1f2c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1f30:	88 7f       	andi	r24, 0xF8	; 248
    1f32:	81 60       	ori	r24, 0x01	; 1
    1f34:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1f38:	80 e1       	ldi	r24, 0x10	; 16
    1f3a:	97 e2       	ldi	r25, 0x27	; 39
    1f3c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1f40:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1f44:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1f48:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <buzzerFinished>
    1f52:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <__data_end>
    1f56:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <__data_end+0x1>
    1f5a:	89 2b       	or	r24, r25
    1f5c:	31 f0       	breq	.+12     	; 0x1f6a <__vector_13+0x80>
    1f5e:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <_ZL17play_mode_setting>
    1f62:	81 11       	cpse	r24, r1
    1f64:	02 c0       	rjmp	.+4      	; 0x1f6a <__vector_13+0x80>
    1f66:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <_ZL8nextNotev>
    1f6a:	ff 91       	pop	r31
    1f6c:	ef 91       	pop	r30
    1f6e:	bf 91       	pop	r27
    1f70:	af 91       	pop	r26
    1f72:	9f 91       	pop	r25
    1f74:	8f 91       	pop	r24
    1f76:	7f 91       	pop	r23
    1f78:	6f 91       	pop	r22
    1f7a:	5f 91       	pop	r21
    1f7c:	4f 91       	pop	r20
    1f7e:	3f 91       	pop	r19
    1f80:	2f 91       	pop	r18
    1f82:	0f 90       	pop	r0
    1f84:	0f be       	out	0x3f, r0	; 63
    1f86:	0f 90       	pop	r0
    1f88:	1f 90       	pop	r1
    1f8a:	18 95       	reti

00001f8c <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    1f8c:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1f90:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <__data_end+0x1>
    1f94:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <__data_end>
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <_ZL17use_program_space>
    1f9e:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <_ZL22staccato_rest_duration>
    1fa2:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <_ZL8nextNotev>
    1fa6:	08 95       	ret

00001fa8 <play_from_program_space>:
    1fa8:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    1fac:	08 95       	ret

00001fae <delay_us.constprop.0>:
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	6f 93       	push	r22
    1fb4:	64 e0       	ldi	r22, 0x04	; 4
    1fb6:	6a 95       	dec	r22
    1fb8:	f1 f7       	brne	.-4      	; 0x1fb6 <delay_us.constprop.0+0x8>
    1fba:	6f 91       	pop	r22
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	c9 f7       	brne	.-14     	; 0x1fb2 <delay_us.constprop.0+0x4>
    1fc0:	08 95       	ret

00001fc2 <_ZN12OrangutanLCD8busyWaitEv>:
    1fc2:	0f 93       	push	r16
    1fc4:	1f 93       	push	r17
    1fc6:	cf 93       	push	r28
    1fc8:	df 93       	push	r29
    1fca:	1a b1       	in	r17, 0x0a	; 10
    1fcc:	57 98       	cbi	0x0a, 7	; 10
    1fce:	5a 98       	cbi	0x0b, 2	; 11
    1fd0:	28 9a       	sbi	0x05, 0	; 5
    1fd2:	c0 e0       	ldi	r28, 0x00	; 0
    1fd4:	d0 e0       	ldi	r29, 0x00	; 0
    1fd6:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <delay_us.constprop.0>
    1fda:	5c 9a       	sbi	0x0b, 4	; 11
    1fdc:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <delay_us.constprop.0>
    1fe0:	09 b1       	in	r16, 0x09	; 9
    1fe2:	5c 98       	cbi	0x0b, 4	; 11
    1fe4:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <delay_us.constprop.0>
    1fe8:	5c 9a       	sbi	0x0b, 4	; 11
    1fea:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <delay_us.constprop.0>
    1fee:	5c 98       	cbi	0x0b, 4	; 11
    1ff0:	24 96       	adiw	r28, 0x04	; 4
    1ff2:	07 ff       	sbrs	r16, 7
    1ff4:	10 c0       	rjmp	.+32     	; 0x2016 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    1ff6:	ae 01       	movw	r20, r28
    1ff8:	60 e0       	ldi	r22, 0x00	; 0
    1ffa:	70 e0       	ldi	r23, 0x00	; 0
    1ffc:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <lcdTimeout>
    2000:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <lcdTimeout+0x1>
    2004:	a0 91 9f 01 	lds	r26, 0x019F	; 0x80019f <lcdTimeout+0x2>
    2008:	b0 91 a0 01 	lds	r27, 0x01A0	; 0x8001a0 <lcdTimeout+0x3>
    200c:	48 17       	cp	r20, r24
    200e:	59 07       	cpc	r21, r25
    2010:	6a 07       	cpc	r22, r26
    2012:	7b 07       	cpc	r23, r27
    2014:	00 f3       	brcs	.-64     	; 0x1fd6 <_ZN12OrangutanLCD8busyWaitEv+0x14>
    2016:	1a b9       	out	0x0a, r17	; 10
    2018:	df 91       	pop	r29
    201a:	cf 91       	pop	r28
    201c:	1f 91       	pop	r17
    201e:	0f 91       	pop	r16
    2020:	08 95       	ret

00002022 <_ZN12OrangutanLCD8sendDataEh>:
    2022:	95 b1       	in	r25, 0x05	; 5
    2024:	28 2f       	mov	r18, r24
    2026:	21 70       	andi	r18, 0x01	; 1
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	22 0f       	add	r18, r18
    202c:	33 1f       	adc	r19, r19
    202e:	48 2f       	mov	r20, r24
    2030:	46 70       	andi	r20, 0x06	; 6
    2032:	68 e0       	ldi	r22, 0x08	; 8
    2034:	46 9f       	mul	r20, r22
    2036:	a0 01       	movw	r20, r0
    2038:	11 24       	eor	r1, r1
    203a:	24 2b       	or	r18, r20
    203c:	9d 7c       	andi	r25, 0xCD	; 205
    203e:	29 2b       	or	r18, r25
    2040:	25 b9       	out	0x05, r18	; 5
    2042:	9b b1       	in	r25, 0x0b	; 11
    2044:	88 70       	andi	r24, 0x08	; 8
    2046:	82 95       	swap	r24
    2048:	80 7f       	andi	r24, 0xF0	; 240
    204a:	9f 77       	andi	r25, 0x7F	; 127
    204c:	89 2b       	or	r24, r25
    204e:	8b b9       	out	0x0b, r24	; 11
    2050:	5c 9a       	sbi	0x0b, 4	; 11
    2052:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <delay_us.constprop.0>
    2056:	5c 98       	cbi	0x0b, 4	; 11
    2058:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <delay_us.constprop.0>
    205c:	08 95       	ret

0000205e <_ZN12OrangutanLCD4sendEhhh>:
    205e:	a0 e0       	ldi	r26, 0x00	; 0
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	e5 e3       	ldi	r30, 0x35	; 53
    2064:	f0 e1       	ldi	r31, 0x10	; 16
    2066:	0c 94 8e 19 	jmp	0x331c	; 0x331c <__prologue_saves__+0x16>
    206a:	c8 2f       	mov	r28, r24
    206c:	d6 2e       	mov	r13, r22
    206e:	e4 2e       	mov	r14, r20
    2070:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <_ZZN12OrangutanLCD4initEvE11initialized>
    2074:	81 11       	cpse	r24, r1
    2076:	05 c0       	rjmp	.+10     	; 0x2082 <_ZN12OrangutanLCD4sendEhhh+0x24>
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <_ZZN12OrangutanLCD4initEvE11initialized>
    207e:	0e 94 75 10 	call	0x20ea	; 0x20ea <_ZN12OrangutanLCD5init2Ev>
    2082:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <_ZN12OrangutanLCD8busyWaitEv>
    2086:	14 b1       	in	r17, 0x04	; 4
    2088:	d5 b1       	in	r29, 0x05	; 5
    208a:	fa b0       	in	r15, 0x0a	; 10
    208c:	0b b1       	in	r16, 0x0b	; 11
    208e:	28 98       	cbi	0x05, 0	; 5
    2090:	dd 20       	and	r13, r13
    2092:	11 f0       	breq	.+4      	; 0x2098 <_ZN12OrangutanLCD4sendEhhh+0x3a>
    2094:	5a 9a       	sbi	0x0b, 2	; 11
    2096:	01 c0       	rjmp	.+2      	; 0x209a <_ZN12OrangutanLCD4sendEhhh+0x3c>
    2098:	5a 98       	cbi	0x0b, 2	; 11
    209a:	94 b1       	in	r25, 0x04	; 4
    209c:	92 63       	ori	r25, 0x32	; 50
    209e:	94 b9       	out	0x04, r25	; 4
    20a0:	57 9a       	sbi	0x0a, 7	; 10
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	e8 16       	cp	r14, r24
    20a6:	29 f0       	breq	.+10     	; 0x20b2 <_ZN12OrangutanLCD4sendEhhh+0x54>
    20a8:	8c 2f       	mov	r24, r28
    20aa:	82 95       	swap	r24
    20ac:	8f 70       	andi	r24, 0x0F	; 15
    20ae:	0e 94 11 10 	call	0x2022	; 0x2022 <_ZN12OrangutanLCD8sendDataEh>
    20b2:	8c 2f       	mov	r24, r28
    20b4:	8f 70       	andi	r24, 0x0F	; 15
    20b6:	0e 94 11 10 	call	0x2022	; 0x2022 <_ZN12OrangutanLCD8sendDataEh>
    20ba:	fa b8       	out	0x0a, r15	; 10
    20bc:	0b b9       	out	0x0b, r16	; 11
    20be:	14 b9       	out	0x04, r17	; 4
    20c0:	d5 b9       	out	0x05, r29	; 5
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
    20c6:	e7 e0       	ldi	r30, 0x07	; 7
    20c8:	0c 94 aa 19 	jmp	0x3354	; 0x3354 <__epilogue_restores__+0x16>

000020cc <_ZN12OrangutanLCD8send_cmdEh>:
    20cc:	42 e0       	ldi	r20, 0x02	; 2
    20ce:	60 e0       	ldi	r22, 0x00	; 0
    20d0:	0e 94 2f 10 	call	0x205e	; 0x205e <_ZN12OrangutanLCD4sendEhhh>
    20d4:	08 95       	ret

000020d6 <_ZN12OrangutanLCD9send_dataEh>:
    20d6:	42 e0       	ldi	r20, 0x02	; 2
    20d8:	61 e0       	ldi	r22, 0x01	; 1
    20da:	0e 94 2f 10 	call	0x205e	; 0x205e <_ZN12OrangutanLCD4sendEhhh>
    20de:	08 95       	ret

000020e0 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    20e0:	41 e0       	ldi	r20, 0x01	; 1
    20e2:	60 e0       	ldi	r22, 0x00	; 0
    20e4:	0e 94 2f 10 	call	0x205e	; 0x205e <_ZN12OrangutanLCD4sendEhhh>
    20e8:	08 95       	ret

000020ea <_ZN12OrangutanLCD5init2Ev>:
    20ea:	80 e1       	ldi	r24, 0x10	; 16
    20ec:	97 e2       	ldi	r25, 0x27	; 39
    20ee:	a0 e0       	ldi	r26, 0x00	; 0
    20f0:	b0 e0       	ldi	r27, 0x00	; 0
    20f2:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <lcdTimeout>
    20f6:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <lcdTimeout+0x1>
    20fa:	a0 93 9f 01 	sts	0x019F, r26	; 0x80019f <lcdTimeout+0x2>
    20fe:	b0 93 a0 01 	sts	0x01A0, r27	; 0x8001a0 <lcdTimeout+0x3>
    2102:	52 9a       	sbi	0x0a, 2	; 10
    2104:	20 9a       	sbi	0x04, 0	; 4
    2106:	54 9a       	sbi	0x0a, 4	; 10
    2108:	8e e1       	ldi	r24, 0x1E	; 30
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <delay_ms>
    2110:	83 e0       	ldi	r24, 0x03	; 3
    2112:	0e 94 70 10 	call	0x20e0	; 0x20e0 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2116:	86 e0       	ldi	r24, 0x06	; 6
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <delay_ms>
    211e:	83 e0       	ldi	r24, 0x03	; 3
    2120:	0e 94 70 10 	call	0x20e0	; 0x20e0 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2124:	82 e0       	ldi	r24, 0x02	; 2
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <delay_ms>
    212c:	83 e0       	ldi	r24, 0x03	; 3
    212e:	0e 94 70 10 	call	0x20e0	; 0x20e0 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2132:	82 e0       	ldi	r24, 0x02	; 2
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <delay_ms>
    213a:	82 e0       	ldi	r24, 0x02	; 2
    213c:	0e 94 70 10 	call	0x20e0	; 0x20e0 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2140:	82 e0       	ldi	r24, 0x02	; 2
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <delay_ms>
    2148:	88 e2       	ldi	r24, 0x28	; 40
    214a:	0e 94 66 10 	call	0x20cc	; 0x20cc <_ZN12OrangutanLCD8send_cmdEh>
    214e:	88 e0       	ldi	r24, 0x08	; 8
    2150:	0e 94 66 10 	call	0x20cc	; 0x20cc <_ZN12OrangutanLCD8send_cmdEh>
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	0e 94 66 10 	call	0x20cc	; 0x20cc <_ZN12OrangutanLCD8send_cmdEh>
    215a:	86 e0       	ldi	r24, 0x06	; 6
    215c:	0e 94 66 10 	call	0x20cc	; 0x20cc <_ZN12OrangutanLCD8send_cmdEh>
    2160:	8c e0       	ldi	r24, 0x0C	; 12
    2162:	0e 94 66 10 	call	0x20cc	; 0x20cc <_ZN12OrangutanLCD8send_cmdEh>
    2166:	08 95       	ret

00002168 <_ZN12OrangutanLCD5clearEv>:
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	0e 94 66 10 	call	0x20cc	; 0x20cc <_ZN12OrangutanLCD8send_cmdEh>
    216e:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <printf_chars>
    2172:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <printf_chars+0x1>
    2176:	89 2b       	or	r24, r25
    2178:	f9 f0       	breq	.+62     	; 0x21b8 <_ZN12OrangutanLCD5clearEv+0x50>
    217a:	60 e0       	ldi	r22, 0x00	; 0
    217c:	a0 e2       	ldi	r26, 0x20	; 32
    217e:	26 2f       	mov	r18, r22
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <numLCDCols>
    2186:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <numLCDRows>
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	01 97       	sbiw	r24, 0x01	; 1
    218e:	78 9f       	mul	r23, r24
    2190:	a0 01       	movw	r20, r0
    2192:	79 9f       	mul	r23, r25
    2194:	50 0d       	add	r21, r0
    2196:	11 24       	eor	r1, r1
    2198:	24 17       	cp	r18, r20
    219a:	35 07       	cpc	r19, r21
    219c:	4c f4       	brge	.+18     	; 0x21b0 <_ZN12OrangutanLCD5clearEv+0x48>
    219e:	e0 91 a3 01 	lds	r30, 0x01A3	; 0x8001a3 <printf_chars>
    21a2:	f0 91 a4 01 	lds	r31, 0x01A4	; 0x8001a4 <printf_chars+0x1>
    21a6:	e2 0f       	add	r30, r18
    21a8:	f3 1f       	adc	r31, r19
    21aa:	a0 83       	st	Z, r26
    21ac:	6f 5f       	subi	r22, 0xFF	; 255
    21ae:	e7 cf       	rjmp	.-50     	; 0x217e <_ZN12OrangutanLCD5clearEv+0x16>
    21b0:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <col>
    21b4:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <row>
    21b8:	08 95       	ret

000021ba <clear>:
    21ba:	0e 94 b4 10 	call	0x2168	; 0x2168 <_ZN12OrangutanLCD5clearEv>
    21be:	08 95       	ret

000021c0 <_ZN12OrangutanLCD5printEPKc>:
    21c0:	cf 93       	push	r28
    21c2:	df 93       	push	r29
    21c4:	ec 01       	movw	r28, r24
    21c6:	89 91       	ld	r24, Y+
    21c8:	88 23       	and	r24, r24
    21ca:	19 f0       	breq	.+6      	; 0x21d2 <_ZN12OrangutanLCD5printEPKc+0x12>
    21cc:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <_ZN12OrangutanLCD9send_dataEh>
    21d0:	fa cf       	rjmp	.-12     	; 0x21c6 <_ZN12OrangutanLCD5printEPKc+0x6>
    21d2:	df 91       	pop	r29
    21d4:	cf 91       	pop	r28
    21d6:	08 95       	ret

000021d8 <print>:
    21d8:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <_ZN12OrangutanLCD5printEPKc>
    21dc:	08 95       	ret

000021de <_ZN12OrangutanLCD5printEm>:
    21de:	aa e0       	ldi	r26, 0x0A	; 10
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	e5 ef       	ldi	r30, 0xF5	; 245
    21e4:	f0 e1       	ldi	r31, 0x10	; 16
    21e6:	0c 94 8d 19 	jmp	0x331a	; 0x331a <__prologue_saves__+0x14>
    21ea:	1a e0       	ldi	r17, 0x0A	; 10
    21ec:	5a e0       	ldi	r21, 0x0A	; 10
    21ee:	c5 2e       	mov	r12, r21
    21f0:	d1 2c       	mov	r13, r1
    21f2:	e1 2c       	mov	r14, r1
    21f4:	f1 2c       	mov	r15, r1
    21f6:	06 2f       	mov	r16, r22
    21f8:	a7 01       	movw	r20, r14
    21fa:	96 01       	movw	r18, r12
    21fc:	0e 94 20 19 	call	0x3240	; 0x3240 <__udivmodsi4>
    2200:	ca 01       	movw	r24, r20
    2202:	b9 01       	movw	r22, r18
    2204:	11 50       	subi	r17, 0x01	; 1
    2206:	e1 e0       	ldi	r30, 0x01	; 1
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	ec 0f       	add	r30, r28
    220c:	fd 1f       	adc	r31, r29
    220e:	e1 0f       	add	r30, r17
    2210:	f1 1d       	adc	r31, r1
    2212:	00 5d       	subi	r16, 0xD0	; 208
    2214:	2a e0       	ldi	r18, 0x0A	; 10
    2216:	62 9f       	mul	r22, r18
    2218:	00 19       	sub	r16, r0
    221a:	11 24       	eor	r1, r1
    221c:	00 83       	st	Z, r16
    221e:	61 15       	cp	r22, r1
    2220:	71 05       	cpc	r23, r1
    2222:	81 05       	cpc	r24, r1
    2224:	91 05       	cpc	r25, r1
    2226:	39 f7       	brne	.-50     	; 0x21f6 <_ZN12OrangutanLCD5printEm+0x18>
    2228:	1a 30       	cpi	r17, 0x0A	; 10
    222a:	58 f4       	brcc	.+22     	; 0x2242 <_ZN12OrangutanLCD5printEm+0x64>
    222c:	e1 e0       	ldi	r30, 0x01	; 1
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	ec 0f       	add	r30, r28
    2232:	fd 1f       	adc	r31, r29
    2234:	e1 0f       	add	r30, r17
    2236:	f1 1d       	adc	r31, r1
    2238:	80 81       	ld	r24, Z
    223a:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <_ZN12OrangutanLCD9send_dataEh>
    223e:	1f 5f       	subi	r17, 0xFF	; 255
    2240:	f3 cf       	rjmp	.-26     	; 0x2228 <_ZN12OrangutanLCD5printEm+0x4a>
    2242:	2a 96       	adiw	r28, 0x0a	; 10
    2244:	e8 e0       	ldi	r30, 0x08	; 8
    2246:	0c 94 a9 19 	jmp	0x3352	; 0x3352 <__epilogue_restores__+0x14>

0000224a <_ZN12OrangutanLCD5printEl>:
    224a:	cf 92       	push	r12
    224c:	df 92       	push	r13
    224e:	ef 92       	push	r14
    2250:	ff 92       	push	r15
    2252:	6b 01       	movw	r12, r22
    2254:	7c 01       	movw	r14, r24
    2256:	97 ff       	sbrs	r25, 7
    2258:	0b c0       	rjmp	.+22     	; 0x2270 <_ZN12OrangutanLCD5printEl+0x26>
    225a:	f0 94       	com	r15
    225c:	e0 94       	com	r14
    225e:	d0 94       	com	r13
    2260:	c0 94       	com	r12
    2262:	c1 1c       	adc	r12, r1
    2264:	d1 1c       	adc	r13, r1
    2266:	e1 1c       	adc	r14, r1
    2268:	f1 1c       	adc	r15, r1
    226a:	8d e2       	ldi	r24, 0x2D	; 45
    226c:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <_ZN12OrangutanLCD9send_dataEh>
    2270:	c7 01       	movw	r24, r14
    2272:	b6 01       	movw	r22, r12
    2274:	0e 94 ef 10 	call	0x21de	; 0x21de <_ZN12OrangutanLCD5printEm>
    2278:	ff 90       	pop	r15
    227a:	ef 90       	pop	r14
    227c:	df 90       	pop	r13
    227e:	cf 90       	pop	r12
    2280:	08 95       	ret

00002282 <print_long>:
    2282:	0e 94 25 11 	call	0x224a	; 0x224a <_ZN12OrangutanLCD5printEl>
    2286:	08 95       	ret

00002288 <_ZN12OrangutanLCD6gotoXYEhh>:
    2288:	a5 e0       	ldi	r26, 0x05	; 5
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	ea e4       	ldi	r30, 0x4A	; 74
    228e:	f1 e1       	ldi	r31, 0x11	; 17
    2290:	0c 94 92 19 	jmp	0x3324	; 0x3324 <__prologue_saves__+0x1e>
    2294:	18 2f       	mov	r17, r24
    2296:	80 e8       	ldi	r24, 0x80	; 128
    2298:	89 83       	std	Y+1, r24	; 0x01
    229a:	80 ec       	ldi	r24, 0xC0	; 192
    229c:	8a 83       	std	Y+2, r24	; 0x02
    229e:	84 e9       	ldi	r24, 0x94	; 148
    22a0:	8b 83       	std	Y+3, r24	; 0x03
    22a2:	84 ed       	ldi	r24, 0xD4	; 212
    22a4:	8c 83       	std	Y+4, r24	; 0x04
    22a6:	fe 01       	movw	r30, r28
    22a8:	e6 0f       	add	r30, r22
    22aa:	f1 1d       	adc	r31, r1
    22ac:	81 81       	ldd	r24, Z+1	; 0x01
    22ae:	81 0f       	add	r24, r17
    22b0:	6d 83       	std	Y+5, r22	; 0x05
    22b2:	0e 94 66 10 	call	0x20cc	; 0x20cc <_ZN12OrangutanLCD8send_cmdEh>
    22b6:	10 93 a1 01 	sts	0x01A1, r17	; 0x8001a1 <col>
    22ba:	6d 81       	ldd	r22, Y+5	; 0x05
    22bc:	60 93 a2 01 	sts	0x01A2, r22	; 0x8001a2 <row>
    22c0:	25 96       	adiw	r28, 0x05	; 5
    22c2:	e3 e0       	ldi	r30, 0x03	; 3
    22c4:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__epilogue_restores__+0x1e>

000022c8 <lcd_goto_xy>:
    22c8:	0e 94 44 11 	call	0x2288	; 0x2288 <_ZN12OrangutanLCD6gotoXYEhh>
    22cc:	08 95       	ret

000022ce <_ZN16OrangutanDigital9setOutputEhh>:
    22ce:	88 30       	cpi	r24, 0x08	; 8
    22d0:	58 f4       	brcc	.+22     	; 0x22e8 <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    22d2:	91 e0       	ldi	r25, 0x01	; 1
    22d4:	01 c0       	rjmp	.+2      	; 0x22d8 <_ZN16OrangutanDigital9setOutputEhh+0xa>
    22d6:	99 0f       	add	r25, r25
    22d8:	8a 95       	dec	r24
    22da:	ea f7       	brpl	.-6      	; 0x22d6 <_ZN16OrangutanDigital9setOutputEhh+0x8>
    22dc:	89 2f       	mov	r24, r25
    22de:	aa e2       	ldi	r26, 0x2A	; 42
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	eb e2       	ldi	r30, 0x2B	; 43
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	21 c0       	rjmp	.+66     	; 0x232a <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    22e8:	8e 30       	cpi	r24, 0x0E	; 14
    22ea:	60 f4       	brcc	.+24     	; 0x2304 <_ZN16OrangutanDigital9setOutputEhh+0x36>
    22ec:	98 ef       	ldi	r25, 0xF8	; 248
    22ee:	98 0f       	add	r25, r24
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	01 c0       	rjmp	.+2      	; 0x22f6 <_ZN16OrangutanDigital9setOutputEhh+0x28>
    22f4:	88 0f       	add	r24, r24
    22f6:	9a 95       	dec	r25
    22f8:	ea f7       	brpl	.-6      	; 0x22f4 <_ZN16OrangutanDigital9setOutputEhh+0x26>
    22fa:	a4 e2       	ldi	r26, 0x24	; 36
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	e5 e2       	ldi	r30, 0x25	; 37
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	13 c0       	rjmp	.+38     	; 0x232a <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    2304:	85 31       	cpi	r24, 0x15	; 21
    2306:	60 f4       	brcc	.+24     	; 0x2320 <_ZN16OrangutanDigital9setOutputEhh+0x52>
    2308:	92 ef       	ldi	r25, 0xF2	; 242
    230a:	98 0f       	add	r25, r24
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	01 c0       	rjmp	.+2      	; 0x2312 <_ZN16OrangutanDigital9setOutputEhh+0x44>
    2310:	88 0f       	add	r24, r24
    2312:	9a 95       	dec	r25
    2314:	ea f7       	brpl	.-6      	; 0x2310 <_ZN16OrangutanDigital9setOutputEhh+0x42>
    2316:	a7 e2       	ldi	r26, 0x27	; 39
    2318:	b0 e0       	ldi	r27, 0x00	; 0
    231a:	e8 e2       	ldi	r30, 0x28	; 40
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	05 c0       	rjmp	.+10     	; 0x232a <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    2320:	80 e0       	ldi	r24, 0x00	; 0
    2322:	a0 e0       	ldi	r26, 0x00	; 0
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	e0 e0       	ldi	r30, 0x00	; 0
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	6f 3f       	cpi	r22, 0xFF	; 255
    232c:	19 f4       	brne	.+6      	; 0x2334 <_ZN16OrangutanDigital9setOutputEhh+0x66>
    232e:	90 81       	ld	r25, Z
    2330:	98 27       	eor	r25, r24
    2332:	09 c0       	rjmp	.+18     	; 0x2346 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    2334:	66 23       	and	r22, r22
    2336:	19 f0       	breq	.+6      	; 0x233e <_ZN16OrangutanDigital9setOutputEhh+0x70>
    2338:	90 81       	ld	r25, Z
    233a:	98 2b       	or	r25, r24
    233c:	04 c0       	rjmp	.+8      	; 0x2346 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    233e:	20 81       	ld	r18, Z
    2340:	98 2f       	mov	r25, r24
    2342:	90 95       	com	r25
    2344:	92 23       	and	r25, r18
    2346:	90 83       	st	Z, r25
    2348:	9c 91       	ld	r25, X
    234a:	98 2b       	or	r25, r24
    234c:	9c 93       	st	X, r25
    234e:	08 95       	ret

00002350 <_ZN15OrangutanMotors5init2Ev>:
    2350:	83 ef       	ldi	r24, 0xF3	; 243
    2352:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2356:	84 bd       	out	0x24, r24	; 36
    2358:	82 e0       	ldi	r24, 0x02	; 2
    235a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    235e:	85 bd       	out	0x25, r24	; 37
    2360:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    2364:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    2368:	18 bc       	out	0x28, r1	; 40
    236a:	17 bc       	out	0x27, r1	; 39
    236c:	60 e0       	ldi	r22, 0x00	; 0
    236e:	86 e0       	ldi	r24, 0x06	; 6
    2370:	0e 94 67 11 	call	0x22ce	; 0x22ce <_ZN16OrangutanDigital9setOutputEhh>
    2374:	60 e0       	ldi	r22, 0x00	; 0
    2376:	85 e0       	ldi	r24, 0x05	; 5
    2378:	0e 94 67 11 	call	0x22ce	; 0x22ce <_ZN16OrangutanDigital9setOutputEhh>
    237c:	60 e0       	ldi	r22, 0x00	; 0
    237e:	8b e0       	ldi	r24, 0x0B	; 11
    2380:	0e 94 67 11 	call	0x22ce	; 0x22ce <_ZN16OrangutanDigital9setOutputEhh>
    2384:	60 e0       	ldi	r22, 0x00	; 0
    2386:	83 e0       	ldi	r24, 0x03	; 3
    2388:	0e 94 67 11 	call	0x22ce	; 0x22ce <_ZN16OrangutanDigital9setOutputEhh>
    238c:	08 95       	ret

0000238e <_ZN15OrangutanMotors4initEv>:
    238e:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <_ZZN15OrangutanMotors4initEvE11initialized>
    2392:	81 11       	cpse	r24, r1
    2394:	05 c0       	rjmp	.+10     	; 0x23a0 <_ZN15OrangutanMotors4initEv+0x12>
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <_ZZN15OrangutanMotors4initEvE11initialized>
    239c:	0e 94 a8 11 	call	0x2350	; 0x2350 <_ZN15OrangutanMotors5init2Ev>
    23a0:	08 95       	ret

000023a2 <_ZN15OrangutanMotors10setM1SpeedEi>:
    23a2:	cf 93       	push	r28
    23a4:	df 93       	push	r29
    23a6:	ec 01       	movw	r28, r24
    23a8:	0e 94 c7 11 	call	0x238e	; 0x238e <_ZN15OrangutanMotors4initEv>
    23ac:	d7 ff       	sbrs	r29, 7
    23ae:	05 c0       	rjmp	.+10     	; 0x23ba <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    23b0:	d1 95       	neg	r29
    23b2:	c1 95       	neg	r28
    23b4:	d1 09       	sbc	r29, r1
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	01 c0       	rjmp	.+2      	; 0x23bc <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    23ba:	80 e0       	ldi	r24, 0x00	; 0
    23bc:	cf 3f       	cpi	r28, 0xFF	; 255
    23be:	d1 05       	cpc	r29, r1
    23c0:	19 f0       	breq	.+6      	; 0x23c8 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    23c2:	14 f0       	brlt	.+4      	; 0x23c8 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    23c4:	cf ef       	ldi	r28, 0xFF	; 255
    23c6:	d0 e0       	ldi	r29, 0x00	; 0
    23c8:	88 23       	and	r24, r24
    23ca:	19 f0       	breq	.+6      	; 0x23d2 <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    23cc:	18 bc       	out	0x28, r1	; 40
    23ce:	c7 bd       	out	0x27, r28	; 39
    23d0:	02 c0       	rjmp	.+4      	; 0x23d6 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    23d2:	c8 bd       	out	0x28, r28	; 40
    23d4:	17 bc       	out	0x27, r1	; 39
    23d6:	df 91       	pop	r29
    23d8:	cf 91       	pop	r28
    23da:	08 95       	ret

000023dc <_ZN15OrangutanMotors10setM2SpeedEi>:
    23dc:	cf 93       	push	r28
    23de:	df 93       	push	r29
    23e0:	ec 01       	movw	r28, r24
    23e2:	0e 94 c7 11 	call	0x238e	; 0x238e <_ZN15OrangutanMotors4initEv>
    23e6:	d7 ff       	sbrs	r29, 7
    23e8:	05 c0       	rjmp	.+10     	; 0x23f4 <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    23ea:	d1 95       	neg	r29
    23ec:	c1 95       	neg	r28
    23ee:	d1 09       	sbc	r29, r1
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	01 c0       	rjmp	.+2      	; 0x23f6 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	cf 3f       	cpi	r28, 0xFF	; 255
    23f8:	d1 05       	cpc	r29, r1
    23fa:	19 f0       	breq	.+6      	; 0x2402 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    23fc:	14 f0       	brlt	.+4      	; 0x2402 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    23fe:	cf ef       	ldi	r28, 0xFF	; 255
    2400:	d0 e0       	ldi	r29, 0x00	; 0
    2402:	88 23       	and	r24, r24
    2404:	29 f0       	breq	.+10     	; 0x2410 <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    2406:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    240a:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    240e:	04 c0       	rjmp	.+8      	; 0x2418 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    2410:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    2414:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    2418:	df 91       	pop	r29
    241a:	cf 91       	pop	r28
    241c:	08 95       	ret

0000241e <_ZN15OrangutanMotors9setSpeedsEii>:
    241e:	cf 93       	push	r28
    2420:	df 93       	push	r29
    2422:	eb 01       	movw	r28, r22
    2424:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <_ZN15OrangutanMotors10setM1SpeedEi>
    2428:	ce 01       	movw	r24, r28
    242a:	0e 94 ee 11 	call	0x23dc	; 0x23dc <_ZN15OrangutanMotors10setM2SpeedEi>
    242e:	df 91       	pop	r29
    2430:	cf 91       	pop	r28
    2432:	08 95       	ret

00002434 <set_motors>:
    2434:	0e 94 0f 12 	call	0x241e	; 0x241e <_ZN15OrangutanMotors9setSpeedsEii>
    2438:	08 95       	ret

0000243a <_ZN20OrangutanPushbuttons5init2Ev>:
    243a:	84 b1       	in	r24, 0x04	; 4
    243c:	8d 7c       	andi	r24, 0xCD	; 205
    243e:	84 b9       	out	0x04, r24	; 4
    2440:	85 b1       	in	r24, 0x05	; 5
    2442:	82 63       	ori	r24, 0x32	; 50
    2444:	85 b9       	out	0x05, r24	; 5
    2446:	85 e0       	ldi	r24, 0x05	; 5
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	6f 93       	push	r22
    244c:	64 e0       	ldi	r22, 0x04	; 4
    244e:	6a 95       	dec	r22
    2450:	f1 f7       	brne	.-4      	; 0x244e <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    2452:	6f 91       	pop	r22
    2454:	01 97       	sbiw	r24, 0x01	; 1
    2456:	c9 f7       	brne	.-14     	; 0x244a <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    2458:	08 95       	ret

0000245a <_ZN20OrangutanPushbuttons4initEv>:
    245a:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    245e:	81 11       	cpse	r24, r1
    2460:	05 c0       	rjmp	.+10     	; 0x246c <_ZN20OrangutanPushbuttons4initEv+0x12>
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    2468:	0e 94 1d 12 	call	0x243a	; 0x243a <_ZN20OrangutanPushbuttons5init2Ev>
    246c:	08 95       	ret

0000246e <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    246e:	cf 93       	push	r28
    2470:	c8 2f       	mov	r28, r24
    2472:	0e 94 2d 12 	call	0x245a	; 0x245a <_ZN20OrangutanPushbuttons4initEv>
    2476:	83 b1       	in	r24, 0x03	; 3
    2478:	8c 23       	and	r24, r28
    247a:	e9 f3       	breq	.-6      	; 0x2476 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    247c:	8a e0       	ldi	r24, 0x0A	; 10
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <delay_ms>
    2484:	83 b1       	in	r24, 0x03	; 3
    2486:	8c 23       	and	r24, r28
    2488:	b1 f3       	breq	.-20     	; 0x2476 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    248a:	83 b1       	in	r24, 0x03	; 3
    248c:	8c 23       	and	r24, r28
    248e:	cf 91       	pop	r28
    2490:	08 95       	ret

00002492 <wait_for_button_release>:
    2492:	0e 94 37 12 	call	0x246e	; 0x246e <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    2496:	08 95       	ret

00002498 <_ZN20OrangutanPushbuttons9isPressedEh>:
    2498:	a1 e0       	ldi	r26, 0x01	; 1
    249a:	b0 e0       	ldi	r27, 0x00	; 0
    249c:	e2 e5       	ldi	r30, 0x52	; 82
    249e:	f2 e1       	ldi	r31, 0x12	; 18
    24a0:	0c 94 93 19 	jmp	0x3326	; 0x3326 <__prologue_saves__+0x20>
    24a4:	89 83       	std	Y+1, r24	; 0x01
    24a6:	0e 94 2d 12 	call	0x245a	; 0x245a <_ZN20OrangutanPushbuttons4initEv>
    24aa:	93 b1       	in	r25, 0x03	; 3
    24ac:	90 95       	com	r25
    24ae:	89 81       	ldd	r24, Y+1	; 0x01
    24b0:	89 23       	and	r24, r25
    24b2:	21 96       	adiw	r28, 0x01	; 1
    24b4:	e2 e0       	ldi	r30, 0x02	; 2
    24b6:	0c 94 af 19 	jmp	0x335e	; 0x335e <__epilogue_restores__+0x20>

000024ba <button_is_pressed>:
    24ba:	0e 94 4c 12 	call	0x2498	; 0x2498 <_ZN20OrangutanPushbuttons9isPressedEh>
    24be:	08 95       	ret

000024c0 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>:
    24c0:	28 2f       	mov	r18, r24
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	9a e0       	ldi	r25, 0x0A	; 10
    24c6:	89 9f       	mul	r24, r25
    24c8:	f0 01       	movw	r30, r0
    24ca:	11 24       	eor	r1, r1
    24cc:	eb 55       	subi	r30, 0x5B	; 91
    24ce:	fe 4f       	sbci	r31, 0xFE	; 254
    24d0:	80 85       	ldd	r24, Z+8	; 0x08
    24d2:	91 85       	ldd	r25, Z+9	; 0x09
    24d4:	00 97       	sbiw	r24, 0x00	; 0
    24d6:	21 f0       	breq	.+8      	; 0x24e0 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    24d8:	52 81       	ldd	r21, Z+2	; 0x02
    24da:	44 81       	ldd	r20, Z+4	; 0x04
    24dc:	54 17       	cp	r21, r20
    24de:	80 f0       	brcs	.+32     	; 0x2500 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x40>
    24e0:	8a e0       	ldi	r24, 0x0A	; 10
    24e2:	82 9f       	mul	r24, r18
    24e4:	f0 01       	movw	r30, r0
    24e6:	83 9f       	mul	r24, r19
    24e8:	f0 0d       	add	r31, r0
    24ea:	11 24       	eor	r1, r1
    24ec:	eb 55       	subi	r30, 0x5B	; 91
    24ee:	fe 4f       	sbci	r31, 0xFE	; 254
    24f0:	92 81       	ldd	r25, Z+2	; 0x02
    24f2:	84 81       	ldd	r24, Z+4	; 0x04
    24f4:	98 13       	cpse	r25, r24
    24f6:	0e c0       	rjmp	.+28     	; 0x2514 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x54>
    24f8:	85 81       	ldd	r24, Z+5	; 0x05
    24fa:	81 11       	cpse	r24, r1
    24fc:	0a c0       	rjmp	.+20     	; 0x2512 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x52>
    24fe:	08 95       	ret
    2500:	42 81       	ldd	r20, Z+2	; 0x02
    2502:	dc 01       	movw	r26, r24
    2504:	a4 0f       	add	r26, r20
    2506:	b1 1d       	adc	r27, r1
    2508:	6c 93       	st	X, r22
    250a:	82 81       	ldd	r24, Z+2	; 0x02
    250c:	8f 5f       	subi	r24, 0xFF	; 255
    250e:	82 83       	std	Z+2, r24	; 0x02
    2510:	e7 cf       	rjmp	.-50     	; 0x24e0 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    2512:	12 82       	std	Z+2, r1	; 0x02
    2514:	08 95       	ret

00002516 <__vector_18>:
    2516:	1f 92       	push	r1
    2518:	0f 92       	push	r0
    251a:	0f b6       	in	r0, 0x3f	; 63
    251c:	0f 92       	push	r0
    251e:	11 24       	eor	r1, r1
    2520:	2f 93       	push	r18
    2522:	3f 93       	push	r19
    2524:	4f 93       	push	r20
    2526:	5f 93       	push	r21
    2528:	6f 93       	push	r22
    252a:	7f 93       	push	r23
    252c:	8f 93       	push	r24
    252e:	9f 93       	push	r25
    2530:	af 93       	push	r26
    2532:	bf 93       	push	r27
    2534:	ef 93       	push	r30
    2536:	ff 93       	push	r31
    2538:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	0e 94 60 12 	call	0x24c0	; 0x24c0 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>
    2542:	ff 91       	pop	r31
    2544:	ef 91       	pop	r30
    2546:	bf 91       	pop	r27
    2548:	af 91       	pop	r26
    254a:	9f 91       	pop	r25
    254c:	8f 91       	pop	r24
    254e:	7f 91       	pop	r23
    2550:	6f 91       	pop	r22
    2552:	5f 91       	pop	r21
    2554:	4f 91       	pop	r20
    2556:	3f 91       	pop	r19
    2558:	2f 91       	pop	r18
    255a:	0f 90       	pop	r0
    255c:	0f be       	out	0x3f, r0	; 63
    255e:	0f 90       	pop	r0
    2560:	1f 90       	pop	r1
    2562:	18 95       	reti

00002564 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>:
    2564:	9a e0       	ldi	r25, 0x0A	; 10
    2566:	89 9f       	mul	r24, r25
    2568:	f0 01       	movw	r30, r0
    256a:	11 24       	eor	r1, r1
    256c:	eb 55       	subi	r30, 0x5B	; 91
    256e:	fe 4f       	sbci	r31, 0xFE	; 254
    2570:	86 81       	ldd	r24, Z+6	; 0x06
    2572:	97 81       	ldd	r25, Z+7	; 0x07
    2574:	89 2b       	or	r24, r25
    2576:	59 f0       	breq	.+22     	; 0x258e <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    2578:	91 81       	ldd	r25, Z+1	; 0x01
    257a:	83 81       	ldd	r24, Z+3	; 0x03
    257c:	98 17       	cp	r25, r24
    257e:	38 f4       	brcc	.+14     	; 0x258e <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    2580:	80 81       	ld	r24, Z
    2582:	81 11       	cpse	r24, r1
    2584:	04 c0       	rjmp	.+8      	; 0x258e <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    2586:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    258a:	80 62       	ori	r24, 0x20	; 32
    258c:	03 c0       	rjmp	.+6      	; 0x2594 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x30>
    258e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2592:	8f 7d       	andi	r24, 0xDF	; 223
    2594:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2598:	08 95       	ret

0000259a <_ZN15OrangutanSerial11uart_tx_isrEh>:
    259a:	9a e0       	ldi	r25, 0x0A	; 10
    259c:	89 9f       	mul	r24, r25
    259e:	f0 01       	movw	r30, r0
    25a0:	11 24       	eor	r1, r1
    25a2:	eb 55       	subi	r30, 0x5B	; 91
    25a4:	fe 4f       	sbci	r31, 0xFE	; 254
    25a6:	26 81       	ldd	r18, Z+6	; 0x06
    25a8:	37 81       	ldd	r19, Z+7	; 0x07
    25aa:	21 15       	cp	r18, r1
    25ac:	31 05       	cpc	r19, r1
    25ae:	41 f0       	breq	.+16     	; 0x25c0 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    25b0:	41 81       	ldd	r20, Z+1	; 0x01
    25b2:	93 81       	ldd	r25, Z+3	; 0x03
    25b4:	49 17       	cp	r20, r25
    25b6:	20 f4       	brcc	.+8      	; 0x25c0 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    25b8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    25bc:	95 fd       	sbrc	r25, 5
    25be:	03 c0       	rjmp	.+6      	; 0x25c6 <_ZN15OrangutanSerial11uart_tx_isrEh+0x2c>
    25c0:	0e 94 b2 12 	call	0x2564	; 0x2564 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    25c4:	08 95       	ret
    25c6:	91 81       	ldd	r25, Z+1	; 0x01
    25c8:	d9 01       	movw	r26, r18
    25ca:	a9 0f       	add	r26, r25
    25cc:	b1 1d       	adc	r27, r1
    25ce:	9c 91       	ld	r25, X
    25d0:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    25d4:	91 81       	ldd	r25, Z+1	; 0x01
    25d6:	9f 5f       	subi	r25, 0xFF	; 255
    25d8:	91 83       	std	Z+1, r25	; 0x01
    25da:	f2 cf       	rjmp	.-28     	; 0x25c0 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>

000025dc <__vector_19>:
    25dc:	1f 92       	push	r1
    25de:	0f 92       	push	r0
    25e0:	0f b6       	in	r0, 0x3f	; 63
    25e2:	0f 92       	push	r0
    25e4:	11 24       	eor	r1, r1
    25e6:	2f 93       	push	r18
    25e8:	3f 93       	push	r19
    25ea:	4f 93       	push	r20
    25ec:	5f 93       	push	r21
    25ee:	6f 93       	push	r22
    25f0:	7f 93       	push	r23
    25f2:	8f 93       	push	r24
    25f4:	9f 93       	push	r25
    25f6:	af 93       	push	r26
    25f8:	bf 93       	push	r27
    25fa:	ef 93       	push	r30
    25fc:	ff 93       	push	r31
    25fe:	80 e0       	ldi	r24, 0x00	; 0
    2600:	0e 94 cd 12 	call	0x259a	; 0x259a <_ZN15OrangutanSerial11uart_tx_isrEh>
    2604:	ff 91       	pop	r31
    2606:	ef 91       	pop	r30
    2608:	bf 91       	pop	r27
    260a:	af 91       	pop	r26
    260c:	9f 91       	pop	r25
    260e:	8f 91       	pop	r24
    2610:	7f 91       	pop	r23
    2612:	6f 91       	pop	r22
    2614:	5f 91       	pop	r21
    2616:	4f 91       	pop	r20
    2618:	3f 91       	pop	r19
    261a:	2f 91       	pop	r18
    261c:	0f 90       	pop	r0
    261e:	0f be       	out	0x3f, r0	; 63
    2620:	0f 90       	pop	r0
    2622:	1f 90       	pop	r1
    2624:	18 95       	reti

00002626 <__vector_9>:
    2626:	2f 92       	push	r2
    2628:	8f 93       	push	r24
    262a:	9f 93       	push	r25
    262c:	2f b6       	in	r2, 0x3f	; 63
    262e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <tickCount+0x1>
    2632:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <tickCount+0x2>
    2636:	01 96       	adiw	r24, 0x01	; 1
    2638:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <tickCount+0x1>
    263c:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <tickCount+0x2>
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <tickCount+0x3>
    2646:	89 1f       	adc	r24, r25
    2648:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <tickCount+0x3>
    264c:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <us_over_10+0x1>
    2650:	9c 5f       	subi	r25, 0xFC	; 252
    2652:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <us_over_10+0x1>
    2656:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <us_over_10>
    265a:	80 51       	subi	r24, 0x10	; 16
    265c:	97 42       	sbci	r25, 0x27	; 39
    265e:	c0 f0       	brcs	.+48     	; 0x2690 <end>
    2660:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <us_over_10+0x1>
    2664:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <us_over_10>
    2668:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <msCounter>
    266c:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <msCounter+0x1>
    2670:	01 96       	adiw	r24, 0x01	; 1
    2672:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <msCounter>
    2676:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <msCounter+0x1>
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <msCounter+0x2>
    2680:	89 1f       	adc	r24, r25
    2682:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <msCounter+0x2>
    2686:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <msCounter+0x3>
    268a:	89 1f       	adc	r24, r25
    268c:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <msCounter+0x3>

00002690 <end>:
    2690:	2f be       	out	0x3f, r2	; 63
    2692:	9f 91       	pop	r25
    2694:	8f 91       	pop	r24
    2696:	2f 90       	pop	r2
    2698:	18 95       	reti

0000269a <_ZN13OrangutanTime17delayMillisecondsEj>:
    269a:	28 ee       	ldi	r18, 0xE8	; 232
    269c:	33 e0       	ldi	r19, 0x03	; 3
    269e:	01 97       	sbiw	r24, 0x01	; 1
    26a0:	48 f0       	brcs	.+18     	; 0x26b4 <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    26a2:	f9 01       	movw	r30, r18
    26a4:	6f 93       	push	r22
    26a6:	64 e0       	ldi	r22, 0x04	; 4
    26a8:	6a 95       	dec	r22
    26aa:	f1 f7       	brne	.-4      	; 0x26a8 <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    26ac:	6f 91       	pop	r22
    26ae:	31 97       	sbiw	r30, 0x01	; 1
    26b0:	c9 f7       	brne	.-14     	; 0x26a4 <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    26b2:	f5 cf       	rjmp	.-22     	; 0x269e <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    26b4:	08 95       	ret

000026b6 <delay_ms>:
    26b6:	0e 94 4d 13 	call	0x269a	; 0x269a <_ZN13OrangutanTime17delayMillisecondsEj>
    26ba:	08 95       	ret

000026bc <_ZN13OrangutanTime5init2Ev>:
    26bc:	e0 e7       	ldi	r30, 0x70	; 112
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	8e 7f       	andi	r24, 0xFE	; 254
    26c4:	80 83       	st	Z, r24
    26c6:	a0 eb       	ldi	r26, 0xB0	; 176
    26c8:	b0 e0       	ldi	r27, 0x00	; 0
    26ca:	8c 91       	ld	r24, X
    26cc:	83 60       	ori	r24, 0x03	; 3
    26ce:	8c 93       	st	X, r24
    26d0:	a1 eb       	ldi	r26, 0xB1	; 177
    26d2:	b0 e0       	ldi	r27, 0x00	; 0
    26d4:	8c 91       	ld	r24, X
    26d6:	80 7f       	andi	r24, 0xF0	; 240
    26d8:	8c 93       	st	X, r24
    26da:	8c 91       	ld	r24, X
    26dc:	82 60       	ori	r24, 0x02	; 2
    26de:	8c 93       	st	X, r24
    26e0:	b8 9a       	sbi	0x17, 0	; 23
    26e2:	80 81       	ld	r24, Z
    26e4:	81 60       	ori	r24, 0x01	; 1
    26e6:	80 83       	st	Z, r24
    26e8:	78 94       	sei
    26ea:	08 95       	ret

000026ec <_ZN13OrangutanTime4initEv>:
    26ec:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <_ZZN13OrangutanTime4initEvE11initialized>
    26f0:	81 11       	cpse	r24, r1
    26f2:	05 c0       	rjmp	.+10     	; 0x26fe <_ZN13OrangutanTime4initEv+0x12>
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <_ZZN13OrangutanTime4initEvE11initialized>
    26fa:	0e 94 5e 13 	call	0x26bc	; 0x26bc <_ZN13OrangutanTime5init2Ev>
    26fe:	08 95       	ret

00002700 <_ZN13OrangutanTime2msEv>:
    2700:	0e 94 76 13 	call	0x26ec	; 0x26ec <_ZN13OrangutanTime4initEv>
    2704:	e0 e7       	ldi	r30, 0x70	; 112
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	80 81       	ld	r24, Z
    270a:	8e 7f       	andi	r24, 0xFE	; 254
    270c:	80 83       	st	Z, r24
    270e:	60 91 b1 01 	lds	r22, 0x01B1	; 0x8001b1 <msCounter>
    2712:	70 91 b2 01 	lds	r23, 0x01B2	; 0x8001b2 <msCounter+0x1>
    2716:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <msCounter+0x2>
    271a:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <msCounter+0x3>
    271e:	20 81       	ld	r18, Z
    2720:	21 60       	ori	r18, 0x01	; 1
    2722:	20 83       	st	Z, r18
    2724:	08 95       	ret

00002726 <get_ms>:
    2726:	0e 94 80 13 	call	0x2700	; 0x2700 <_ZN13OrangutanTime2msEv>
    272a:	08 95       	ret

0000272c <_ZN13OrangutanTime5resetEv>:
    272c:	0e 94 76 13 	call	0x26ec	; 0x26ec <_ZN13OrangutanTime4initEv>
    2730:	e0 e7       	ldi	r30, 0x70	; 112
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	80 81       	ld	r24, Z
    2736:	8e 7f       	andi	r24, 0xFE	; 254
    2738:	80 83       	st	Z, r24
    273a:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <msCounter>
    273e:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <msCounter+0x1>
    2742:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <msCounter+0x2>
    2746:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <msCounter+0x3>
    274a:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <us_over_10+0x1>
    274e:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <us_over_10>
    2752:	80 81       	ld	r24, Z
    2754:	81 60       	ori	r24, 0x01	; 1
    2756:	80 83       	st	Z, r24
    2758:	08 95       	ret

0000275a <read_line_sensors>:
    275a:	46 2f       	mov	r20, r22
    275c:	bc 01       	movw	r22, r24
    275e:	89 eb       	ldi	r24, 0xB9	; 185
    2760:	91 e0       	ldi	r25, 0x01	; 1
    2762:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN16PololuQTRSensors4readEPjh>
    2766:	08 95       	ret

00002768 <calibrate_line_sensors>:
    2768:	68 2f       	mov	r22, r24
    276a:	89 eb       	ldi	r24, 0xB9	; 185
    276c:	91 e0       	ldi	r25, 0x01	; 1
    276e:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <_ZN16PololuQTRSensors9calibrateEh>
    2772:	08 95       	ret

00002774 <read_line>:
    2774:	46 2f       	mov	r20, r22
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	bc 01       	movw	r22, r24
    277a:	89 eb       	ldi	r24, 0xB9	; 185
    277c:	91 e0       	ldi	r25, 0x01	; 1
    277e:	0e 94 6d 18 	call	0x30da	; 0x30da <_ZN16PololuQTRSensors8readLineEPjhh>
    2782:	08 95       	ret

00002784 <_ZN9Pololu3pi4initEjh>:
    2784:	0f 93       	push	r16
    2786:	cf 93       	push	r28
    2788:	df 93       	push	r29
    278a:	00 d0       	rcall	.+0      	; 0x278c <_ZN9Pololu3pi4initEjh+0x8>
    278c:	00 d0       	rcall	.+0      	; 0x278e <_ZN9Pololu3pi4initEjh+0xa>
    278e:	1f 92       	push	r1
    2790:	cd b7       	in	r28, 0x3d	; 61
    2792:	de b7       	in	r29, 0x3e	; 62
    2794:	9c 01       	movw	r18, r24
    2796:	85 e0       	ldi	r24, 0x05	; 5
    2798:	ec e4       	ldi	r30, 0x4C	; 76
    279a:	f1 e0       	ldi	r31, 0x01	; 1
    279c:	de 01       	movw	r26, r28
    279e:	11 96       	adiw	r26, 0x01	; 1
    27a0:	01 90       	ld	r0, Z+
    27a2:	0d 92       	st	X+, r0
    27a4:	8a 95       	dec	r24
    27a6:	e1 f7       	brne	.-8      	; 0x27a0 <_ZN9Pololu3pi4initEjh+0x1c>
    27a8:	66 23       	and	r22, r22
    27aa:	11 f0       	breq	.+4      	; 0x27b0 <_ZN9Pololu3pi4initEjh+0x2c>
    27ac:	0f ef       	ldi	r16, 0xFF	; 255
    27ae:	01 c0       	rjmp	.+2      	; 0x27b2 <_ZN9Pololu3pi4initEjh+0x2e>
    27b0:	03 e1       	ldi	r16, 0x13	; 19
    27b2:	45 e0       	ldi	r20, 0x05	; 5
    27b4:	be 01       	movw	r22, r28
    27b6:	6f 5f       	subi	r22, 0xFF	; 255
    27b8:	7f 4f       	sbci	r23, 0xFF	; 255
    27ba:	89 eb       	ldi	r24, 0xB9	; 185
    27bc:	91 e0       	ldi	r25, 0x01	; 1
    27be:	0e 94 94 14 	call	0x2928	; 0x2928 <_ZN18PololuQTRSensorsRC4initEPhhjh>
    27c2:	89 eb       	ldi	r24, 0xB9	; 185
    27c4:	91 e0       	ldi	r25, 0x01	; 1
    27c6:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <_ZN16PololuQTRSensors11emittersOffEv>
    27ca:	0e 94 96 13 	call	0x272c	; 0x272c <_ZN13OrangutanTime5resetEv>
    27ce:	0f 90       	pop	r0
    27d0:	0f 90       	pop	r0
    27d2:	0f 90       	pop	r0
    27d4:	0f 90       	pop	r0
    27d6:	0f 90       	pop	r0
    27d8:	df 91       	pop	r29
    27da:	cf 91       	pop	r28
    27dc:	0f 91       	pop	r16
    27de:	08 95       	ret

000027e0 <pololu_3pi_init>:
    27e0:	60 e0       	ldi	r22, 0x00	; 0
    27e2:	0e 94 c2 13 	call	0x2784	; 0x2784 <_ZN9Pololu3pi4initEjh>
    27e6:	08 95       	ret

000027e8 <_GLOBAL__sub_D_pololu_3pi_init>:
    27e8:	89 eb       	ldi	r24, 0xB9	; 185
    27ea:	91 e0       	ldi	r25, 0x01	; 1
    27ec:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <_ZN16PololuQTRSensorsD1Ev>
    27f0:	08 95       	ret

000027f2 <delay_us>:
    27f2:	6f 93       	push	r22
    27f4:	64 e0       	ldi	r22, 0x04	; 4
    27f6:	6a 95       	dec	r22
    27f8:	f1 f7       	brne	.-4      	; 0x27f6 <delay_us+0x4>
    27fa:	6f 91       	pop	r22
    27fc:	01 97       	sbiw	r24, 0x01	; 1
    27fe:	c9 f7       	brne	.-14     	; 0x27f2 <delay_us>
    2800:	08 95       	ret

00002802 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    2802:	fc 01       	movw	r30, r24
    2804:	11 82       	std	Z+1, r1	; 0x01
    2806:	10 82       	st	Z, r1
    2808:	13 82       	std	Z+3, r1	; 0x03
    280a:	12 82       	std	Z+2, r1	; 0x02
    280c:	15 82       	std	Z+5, r1	; 0x05
    280e:	14 82       	std	Z+4, r1	; 0x04
    2810:	16 82       	std	Z+6, r1	; 0x06
    2812:	68 30       	cpi	r22, 0x08	; 8
    2814:	68 f4       	brcc	.+26     	; 0x2830 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    2816:	89 e2       	ldi	r24, 0x29	; 41
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	91 83       	std	Z+1, r25	; 0x01
    281c:	80 83       	st	Z, r24
    281e:	8b e2       	ldi	r24, 0x2B	; 43
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	93 83       	std	Z+3, r25	; 0x03
    2824:	82 83       	std	Z+2, r24	; 0x02
    2826:	8a e2       	ldi	r24, 0x2A	; 42
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	95 83       	std	Z+5, r25	; 0x05
    282c:	84 83       	std	Z+4, r24	; 0x04
    282e:	1f c0       	rjmp	.+62     	; 0x286e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    2830:	6e 30       	cpi	r22, 0x0E	; 14
    2832:	70 f4       	brcc	.+28     	; 0x2850 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    2834:	83 e2       	ldi	r24, 0x23	; 35
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	91 83       	std	Z+1, r25	; 0x01
    283a:	80 83       	st	Z, r24
    283c:	85 e2       	ldi	r24, 0x25	; 37
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	93 83       	std	Z+3, r25	; 0x03
    2842:	82 83       	std	Z+2, r24	; 0x02
    2844:	84 e2       	ldi	r24, 0x24	; 36
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	95 83       	std	Z+5, r25	; 0x05
    284a:	84 83       	std	Z+4, r24	; 0x04
    284c:	68 50       	subi	r22, 0x08	; 8
    284e:	0f c0       	rjmp	.+30     	; 0x286e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    2850:	65 31       	cpi	r22, 0x15	; 21
    2852:	98 f4       	brcc	.+38     	; 0x287a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    2854:	86 e2       	ldi	r24, 0x26	; 38
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	91 83       	std	Z+1, r25	; 0x01
    285a:	80 83       	st	Z, r24
    285c:	88 e2       	ldi	r24, 0x28	; 40
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	93 83       	std	Z+3, r25	; 0x03
    2862:	82 83       	std	Z+2, r24	; 0x02
    2864:	87 e2       	ldi	r24, 0x27	; 39
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	95 83       	std	Z+5, r25	; 0x05
    286a:	84 83       	std	Z+4, r24	; 0x04
    286c:	6e 50       	subi	r22, 0x0E	; 14
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	01 c0       	rjmp	.+2      	; 0x2874 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    2872:	88 0f       	add	r24, r24
    2874:	6a 95       	dec	r22
    2876:	ea f7       	brpl	.-6      	; 0x2872 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    2878:	86 83       	std	Z+6, r24	; 0x06
    287a:	08 95       	ret

0000287c <_ZN16PololuQTRSensors4initEhhh>:
    287c:	a7 e0       	ldi	r26, 0x07	; 7
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	e4 e4       	ldi	r30, 0x44	; 68
    2882:	f4 e1       	ldi	r31, 0x14	; 20
    2884:	0c 94 91 19 	jmp	0x3322	; 0x3322 <__prologue_saves__+0x1c>
    2888:	8c 01       	movw	r16, r24
    288a:	fc 01       	movw	r30, r24
    288c:	11 82       	std	Z+1, r1	; 0x01
    288e:	10 82       	st	Z, r1
    2890:	13 82       	std	Z+3, r1	; 0x03
    2892:	12 82       	std	Z+2, r1	; 0x02
    2894:	15 82       	std	Z+5, r1	; 0x05
    2896:	14 82       	std	Z+4, r1	; 0x04
    2898:	17 82       	std	Z+7, r1	; 0x07
    289a:	16 82       	std	Z+6, r1	; 0x06
    289c:	61 31       	cpi	r22, 0x11	; 17
    289e:	18 f0       	brcs	.+6      	; 0x28a6 <_ZN16PololuQTRSensors4initEhhh+0x2a>
    28a0:	80 e1       	ldi	r24, 0x10	; 16
    28a2:	80 87       	std	Z+8, r24	; 0x08
    28a4:	02 c0       	rjmp	.+4      	; 0x28aa <_ZN16PololuQTRSensors4initEhhh+0x2e>
    28a6:	fc 01       	movw	r30, r24
    28a8:	60 87       	std	Z+8, r22	; 0x08
    28aa:	f8 01       	movw	r30, r16
    28ac:	20 8b       	std	Z+16, r18	; 0x10
    28ae:	64 2f       	mov	r22, r20
    28b0:	ce 01       	movw	r24, r28
    28b2:	01 96       	adiw	r24, 0x01	; 1
    28b4:	0e 94 01 14 	call	0x2802	; 0x2802 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    28b8:	8f 81       	ldd	r24, Y+7	; 0x07
    28ba:	f8 01       	movw	r30, r16
    28bc:	81 87       	std	Z+9, r24	; 0x09
    28be:	8b 81       	ldd	r24, Y+3	; 0x03
    28c0:	9c 81       	ldd	r25, Y+4	; 0x04
    28c2:	93 87       	std	Z+11, r25	; 0x0b
    28c4:	82 87       	std	Z+10, r24	; 0x0a
    28c6:	8d 81       	ldd	r24, Y+5	; 0x05
    28c8:	9e 81       	ldd	r25, Y+6	; 0x06
    28ca:	95 87       	std	Z+13, r25	; 0x0d
    28cc:	84 87       	std	Z+12, r24	; 0x0c
    28ce:	27 96       	adiw	r28, 0x07	; 7
    28d0:	e4 e0       	ldi	r30, 0x04	; 4
    28d2:	0c 94 ad 19 	jmp	0x335a	; 0x335a <__epilogue_restores__+0x1c>

000028d6 <_ZN16PololuQTRSensors11emittersOffEv>:
    28d6:	fc 01       	movw	r30, r24
    28d8:	a4 85       	ldd	r26, Z+12	; 0x0c
    28da:	b5 85       	ldd	r27, Z+13	; 0x0d
    28dc:	10 97       	sbiw	r26, 0x00	; 0
    28de:	79 f0       	breq	.+30     	; 0x28fe <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    28e0:	8c 91       	ld	r24, X
    28e2:	91 85       	ldd	r25, Z+9	; 0x09
    28e4:	89 2b       	or	r24, r25
    28e6:	8c 93       	st	X, r24
    28e8:	a2 85       	ldd	r26, Z+10	; 0x0a
    28ea:	b3 85       	ldd	r27, Z+11	; 0x0b
    28ec:	9c 91       	ld	r25, X
    28ee:	81 85       	ldd	r24, Z+9	; 0x09
    28f0:	80 95       	com	r24
    28f2:	89 23       	and	r24, r25
    28f4:	8c 93       	st	X, r24
    28f6:	88 ec       	ldi	r24, 0xC8	; 200
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <delay_us>
    28fe:	08 95       	ret

00002900 <_ZN16PololuQTRSensors10emittersOnEv>:
    2900:	fc 01       	movw	r30, r24
    2902:	a4 85       	ldd	r26, Z+12	; 0x0c
    2904:	b5 85       	ldd	r27, Z+13	; 0x0d
    2906:	10 97       	sbiw	r26, 0x00	; 0
    2908:	71 f0       	breq	.+28     	; 0x2926 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    290a:	8c 91       	ld	r24, X
    290c:	91 85       	ldd	r25, Z+9	; 0x09
    290e:	89 2b       	or	r24, r25
    2910:	8c 93       	st	X, r24
    2912:	a2 85       	ldd	r26, Z+10	; 0x0a
    2914:	b3 85       	ldd	r27, Z+11	; 0x0b
    2916:	8c 91       	ld	r24, X
    2918:	91 85       	ldd	r25, Z+9	; 0x09
    291a:	89 2b       	or	r24, r25
    291c:	8c 93       	st	X, r24
    291e:	88 ec       	ldi	r24, 0xC8	; 200
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <delay_us>
    2926:	08 95       	ret

00002928 <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    2928:	a7 e0       	ldi	r26, 0x07	; 7
    292a:	b0 e0       	ldi	r27, 0x00	; 0
    292c:	ea e9       	ldi	r30, 0x9A	; 154
    292e:	f4 e1       	ldi	r31, 0x14	; 20
    2930:	0c 94 86 19 	jmp	0x330c	; 0x330c <__prologue_saves__+0x6>
    2934:	7c 01       	movw	r14, r24
    2936:	4b 01       	movw	r8, r22
    2938:	64 2f       	mov	r22, r20
    293a:	39 01       	movw	r6, r18
    293c:	40 2f       	mov	r20, r16
    293e:	20 e0       	ldi	r18, 0x00	; 0
    2940:	0e 94 3e 14 	call	0x287c	; 0x287c <_ZN16PololuQTRSensors4initEhhh>
    2944:	87 01       	movw	r16, r14
    2946:	0f 5b       	subi	r16, 0xBF	; 191
    2948:	1f 4f       	sbci	r17, 0xFF	; 255
    294a:	f8 01       	movw	r30, r16
    294c:	10 82       	st	Z, r1
    294e:	67 01       	movw	r12, r14
    2950:	f2 e4       	ldi	r31, 0x42	; 66
    2952:	cf 0e       	add	r12, r31
    2954:	d1 1c       	adc	r13, r1
    2956:	f6 01       	movw	r30, r12
    2958:	10 82       	st	Z, r1
    295a:	57 01       	movw	r10, r14
    295c:	f3 e4       	ldi	r31, 0x43	; 67
    295e:	af 0e       	add	r10, r31
    2960:	b1 1c       	adc	r11, r1
    2962:	f5 01       	movw	r30, r10
    2964:	10 82       	st	Z, r1
    2966:	f7 01       	movw	r30, r14
    2968:	77 86       	std	Z+15, r7	; 0x0f
    296a:	66 86       	std	Z+14, r6	; 0x0e
    296c:	51 2c       	mov	r5, r1
    296e:	f7 01       	movw	r30, r14
    2970:	80 85       	ldd	r24, Z+8	; 0x08
    2972:	58 16       	cp	r5, r24
    2974:	50 f5       	brcc	.+84     	; 0x29ca <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    2976:	65 2c       	mov	r6, r5
    2978:	71 2c       	mov	r7, r1
    297a:	f4 01       	movw	r30, r8
    297c:	e6 0d       	add	r30, r6
    297e:	f7 1d       	adc	r31, r7
    2980:	60 81       	ld	r22, Z
    2982:	ce 01       	movw	r24, r28
    2984:	01 96       	adiw	r24, 0x01	; 1
    2986:	0e 94 01 14 	call	0x2802	; 0x2802 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    298a:	2f 81       	ldd	r18, Y+7	; 0x07
    298c:	f7 01       	movw	r30, r14
    298e:	e6 0d       	add	r30, r6
    2990:	f7 1d       	adc	r31, r7
    2992:	21 8b       	std	Z+17, r18	; 0x11
    2994:	89 81       	ldd	r24, Y+1	; 0x01
    2996:	9a 81       	ldd	r25, Y+2	; 0x02
    2998:	f3 01       	movw	r30, r6
    299a:	ee 0f       	add	r30, r30
    299c:	ff 1f       	adc	r31, r31
    299e:	ee 0d       	add	r30, r14
    29a0:	ff 1d       	adc	r31, r15
    29a2:	92 a3       	std	Z+34, r25	; 0x22
    29a4:	81 a3       	std	Z+33, r24	; 0x21
    29a6:	83 32       	cpi	r24, 0x23	; 35
    29a8:	91 05       	cpc	r25, r1
    29aa:	11 f4       	brne	.+4      	; 0x29b0 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    29ac:	f8 01       	movw	r30, r16
    29ae:	08 c0       	rjmp	.+16     	; 0x29c0 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    29b0:	86 32       	cpi	r24, 0x26	; 38
    29b2:	91 05       	cpc	r25, r1
    29b4:	11 f4       	brne	.+4      	; 0x29ba <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    29b6:	f6 01       	movw	r30, r12
    29b8:	03 c0       	rjmp	.+6      	; 0x29c0 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    29ba:	89 97       	sbiw	r24, 0x29	; 41
    29bc:	21 f4       	brne	.+8      	; 0x29c6 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    29be:	f5 01       	movw	r30, r10
    29c0:	80 81       	ld	r24, Z
    29c2:	82 2b       	or	r24, r18
    29c4:	80 83       	st	Z, r24
    29c6:	53 94       	inc	r5
    29c8:	d2 cf       	rjmp	.-92     	; 0x296e <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    29ca:	27 96       	adiw	r28, 0x07	; 7
    29cc:	ef e0       	ldi	r30, 0x0F	; 15
    29ce:	0c 94 a2 19 	jmp	0x3344	; 0x3344 <__epilogue_restores__+0x6>

000029d2 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    29d2:	a0 e0       	ldi	r26, 0x00	; 0
    29d4:	b0 e0       	ldi	r27, 0x00	; 0
    29d6:	ef ee       	ldi	r30, 0xEF	; 239
    29d8:	f4 e1       	ldi	r31, 0x14	; 20
    29da:	0c 94 88 19 	jmp	0x3310	; 0x3310 <__prologue_saves__+0xa>
    29de:	ec 01       	movw	r28, r24
    29e0:	5b 01       	movw	r10, r22
    29e2:	6c 01       	movw	r12, r24
    29e4:	81 e4       	ldi	r24, 0x41	; 65
    29e6:	c8 0e       	add	r12, r24
    29e8:	d1 1c       	adc	r13, r1
    29ea:	f6 01       	movw	r30, r12
    29ec:	80 80       	ld	r8, Z
    29ee:	7e 01       	movw	r14, r28
    29f0:	f2 e4       	ldi	r31, 0x42	; 66
    29f2:	ef 0e       	add	r14, r31
    29f4:	f1 1c       	adc	r15, r1
    29f6:	f7 01       	movw	r30, r14
    29f8:	70 80       	ld	r7, Z
    29fa:	8e 01       	movw	r16, r28
    29fc:	0d 5b       	subi	r16, 0xBD	; 189
    29fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2a00:	f8 01       	movw	r30, r16
    2a02:	90 80       	ld	r9, Z
    2a04:	80 e0       	ldi	r24, 0x00	; 0
    2a06:	98 85       	ldd	r25, Y+8	; 0x08
    2a08:	89 17       	cp	r24, r25
    2a0a:	48 f4       	brcc	.+18     	; 0x2a1e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    2a0c:	f5 01       	movw	r30, r10
    2a0e:	e8 0f       	add	r30, r24
    2a10:	f1 1d       	adc	r31, r1
    2a12:	e8 0f       	add	r30, r24
    2a14:	f1 1d       	adc	r31, r1
    2a16:	11 82       	std	Z+1, r1	; 0x01
    2a18:	10 82       	st	Z, r1
    2a1a:	8f 5f       	subi	r24, 0xFF	; 255
    2a1c:	f4 cf       	rjmp	.-24     	; 0x2a06 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    2a1e:	84 b1       	in	r24, 0x04	; 4
    2a20:	f6 01       	movw	r30, r12
    2a22:	90 81       	ld	r25, Z
    2a24:	89 2b       	or	r24, r25
    2a26:	84 b9       	out	0x04, r24	; 4
    2a28:	87 b1       	in	r24, 0x07	; 7
    2a2a:	f7 01       	movw	r30, r14
    2a2c:	90 81       	ld	r25, Z
    2a2e:	89 2b       	or	r24, r25
    2a30:	87 b9       	out	0x07, r24	; 7
    2a32:	8a b1       	in	r24, 0x0a	; 10
    2a34:	f8 01       	movw	r30, r16
    2a36:	90 81       	ld	r25, Z
    2a38:	89 2b       	or	r24, r25
    2a3a:	8a b9       	out	0x0a, r24	; 10
    2a3c:	85 b1       	in	r24, 0x05	; 5
    2a3e:	f6 01       	movw	r30, r12
    2a40:	90 81       	ld	r25, Z
    2a42:	89 2b       	or	r24, r25
    2a44:	85 b9       	out	0x05, r24	; 5
    2a46:	88 b1       	in	r24, 0x08	; 8
    2a48:	f7 01       	movw	r30, r14
    2a4a:	90 81       	ld	r25, Z
    2a4c:	89 2b       	or	r24, r25
    2a4e:	88 b9       	out	0x08, r24	; 8
    2a50:	8b b1       	in	r24, 0x0b	; 11
    2a52:	f8 01       	movw	r30, r16
    2a54:	90 81       	ld	r25, Z
    2a56:	89 2b       	or	r24, r25
    2a58:	8b b9       	out	0x0b, r24	; 11
    2a5a:	8a e0       	ldi	r24, 0x0A	; 10
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <delay_us>
    2a62:	94 b1       	in	r25, 0x04	; 4
    2a64:	f6 01       	movw	r30, r12
    2a66:	80 81       	ld	r24, Z
    2a68:	80 95       	com	r24
    2a6a:	89 23       	and	r24, r25
    2a6c:	84 b9       	out	0x04, r24	; 4
    2a6e:	97 b1       	in	r25, 0x07	; 7
    2a70:	f7 01       	movw	r30, r14
    2a72:	80 81       	ld	r24, Z
    2a74:	80 95       	com	r24
    2a76:	89 23       	and	r24, r25
    2a78:	87 b9       	out	0x07, r24	; 7
    2a7a:	9a b1       	in	r25, 0x0a	; 10
    2a7c:	f8 01       	movw	r30, r16
    2a7e:	80 81       	ld	r24, Z
    2a80:	80 95       	com	r24
    2a82:	89 23       	and	r24, r25
    2a84:	8a b9       	out	0x0a, r24	; 10
    2a86:	95 b1       	in	r25, 0x05	; 5
    2a88:	f6 01       	movw	r30, r12
    2a8a:	80 81       	ld	r24, Z
    2a8c:	80 95       	com	r24
    2a8e:	89 23       	and	r24, r25
    2a90:	85 b9       	out	0x05, r24	; 5
    2a92:	98 b1       	in	r25, 0x08	; 8
    2a94:	f7 01       	movw	r30, r14
    2a96:	80 81       	ld	r24, Z
    2a98:	80 95       	com	r24
    2a9a:	89 23       	and	r24, r25
    2a9c:	88 b9       	out	0x08, r24	; 8
    2a9e:	9b b1       	in	r25, 0x0b	; 11
    2aa0:	f8 01       	movw	r30, r16
    2aa2:	80 81       	ld	r24, Z
    2aa4:	80 95       	com	r24
    2aa6:	89 23       	and	r24, r25
    2aa8:	8b b9       	out	0x0b, r24	; 11
    2aaa:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2aae:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2ab2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2ab6:	83 60       	ori	r24, 0x03	; 3
    2ab8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2abc:	82 e0       	ldi	r24, 0x02	; 2
    2abe:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2ac2:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    2ac6:	80 e0       	ldi	r24, 0x00	; 0
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	2e 85       	ldd	r18, Y+14	; 0x0e
    2acc:	3f 85       	ldd	r19, Y+15	; 0x0f
    2ace:	82 17       	cp	r24, r18
    2ad0:	93 07       	cpc	r25, r19
    2ad2:	20 f5       	brcc	.+72     	; 0x2b1c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    2ad4:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    2ad8:	2c 2d       	mov	r18, r12
    2ada:	24 1b       	sub	r18, r20
    2adc:	82 0f       	add	r24, r18
    2ade:	91 1d       	adc	r25, r1
    2ae0:	03 b1       	in	r16, 0x03	; 3
    2ae2:	08 11       	cpse	r16, r8
    2ae4:	32 c0       	rjmp	.+100    	; 0x2b4a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2ae6:	f6 b0       	in	r15, 0x06	; 6
    2ae8:	f7 10       	cpse	r15, r7
    2aea:	2f c0       	rjmp	.+94     	; 0x2b4a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2aec:	29 b1       	in	r18, 0x09	; 9
    2aee:	29 11       	cpse	r18, r9
    2af0:	2c c0       	rjmp	.+88     	; 0x2b4a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2af2:	10 c0       	rjmp	.+32     	; 0x2b14 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    2af4:	21 2f       	mov	r18, r17
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	a9 01       	movw	r20, r18
    2afa:	44 0f       	add	r20, r20
    2afc:	55 1f       	adc	r21, r21
    2afe:	f5 01       	movw	r30, r10
    2b00:	e4 0f       	add	r30, r20
    2b02:	f5 1f       	adc	r31, r21
    2b04:	60 81       	ld	r22, Z
    2b06:	71 81       	ldd	r23, Z+1	; 0x01
    2b08:	67 2b       	or	r22, r23
    2b0a:	21 f1       	breq	.+72     	; 0x2b54 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    2b0c:	1f 5f       	subi	r17, 0xFF	; 255
    2b0e:	28 85       	ldd	r18, Y+8	; 0x08
    2b10:	12 17       	cp	r17, r18
    2b12:	80 f3       	brcs	.-32     	; 0x2af4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    2b14:	7f 2c       	mov	r7, r15
    2b16:	80 2e       	mov	r8, r16
    2b18:	4c 2d       	mov	r20, r12
    2b1a:	d7 cf       	rjmp	.-82     	; 0x2aca <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    2b1c:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2b20:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	88 85       	ldd	r24, Y+8	; 0x08
    2b28:	28 17       	cp	r18, r24
    2b2a:	30 f5       	brcc	.+76     	; 0x2b78 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    2b2c:	f5 01       	movw	r30, r10
    2b2e:	e2 0f       	add	r30, r18
    2b30:	f1 1d       	adc	r31, r1
    2b32:	e2 0f       	add	r30, r18
    2b34:	f1 1d       	adc	r31, r1
    2b36:	80 81       	ld	r24, Z
    2b38:	91 81       	ldd	r25, Z+1	; 0x01
    2b3a:	89 2b       	or	r24, r25
    2b3c:	21 f4       	brne	.+8      	; 0x2b46 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    2b3e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b40:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b42:	91 83       	std	Z+1, r25	; 0x01
    2b44:	80 83       	st	Z, r24
    2b46:	2f 5f       	subi	r18, 0xFF	; 255
    2b48:	ee cf       	rjmp	.-36     	; 0x2b26 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    2b4a:	03 b1       	in	r16, 0x03	; 3
    2b4c:	f6 b0       	in	r15, 0x06	; 6
    2b4e:	99 b0       	in	r9, 0x09	; 9
    2b50:	10 e0       	ldi	r17, 0x00	; 0
    2b52:	dd cf       	rjmp	.-70     	; 0x2b0e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    2b54:	de 01       	movw	r26, r28
    2b56:	a4 0f       	add	r26, r20
    2b58:	b5 1f       	adc	r27, r21
    2b5a:	91 96       	adiw	r26, 0x21	; 33
    2b5c:	0d 90       	ld	r0, X+
    2b5e:	bc 91       	ld	r27, X
    2b60:	a0 2d       	mov	r26, r0
    2b62:	4c 91       	ld	r20, X
    2b64:	de 01       	movw	r26, r28
    2b66:	a2 0f       	add	r26, r18
    2b68:	b3 1f       	adc	r27, r19
    2b6a:	51 96       	adiw	r26, 0x11	; 17
    2b6c:	2c 91       	ld	r18, X
    2b6e:	42 23       	and	r20, r18
    2b70:	69 f6       	brne	.-102    	; 0x2b0c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    2b72:	91 83       	std	Z+1, r25	; 0x01
    2b74:	80 83       	st	Z, r24
    2b76:	ca cf       	rjmp	.-108    	; 0x2b0c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    2b78:	cd b7       	in	r28, 0x3d	; 61
    2b7a:	de b7       	in	r29, 0x3e	; 62
    2b7c:	ed e0       	ldi	r30, 0x0D	; 13
    2b7e:	0c 94 a4 19 	jmp	0x3348	; 0x3348 <__epilogue_restores__+0xa>

00002b82 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    2b82:	ef 92       	push	r14
    2b84:	ff 92       	push	r15
    2b86:	0f 93       	push	r16
    2b88:	1f 93       	push	r17
    2b8a:	cf 93       	push	r28
    2b8c:	df 93       	push	r29
    2b8e:	fc 01       	movw	r30, r24
    2b90:	9b 01       	movw	r18, r22
    2b92:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2b96:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2b9a:	47 b1       	in	r20, 0x07	; 7
    2b9c:	18 b1       	in	r17, 0x08	; 8
    2b9e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2ba2:	86 fd       	sbrc	r24, 6
    2ba4:	fc cf       	rjmp	.-8      	; 0x2b9e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    2ba6:	80 e0       	ldi	r24, 0x00	; 0
    2ba8:	90 85       	ldd	r25, Z+8	; 0x08
    2baa:	89 17       	cp	r24, r25
    2bac:	48 f4       	brcc	.+18     	; 0x2bc0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    2bae:	d9 01       	movw	r26, r18
    2bb0:	a8 0f       	add	r26, r24
    2bb2:	b1 1d       	adc	r27, r1
    2bb4:	a8 0f       	add	r26, r24
    2bb6:	b1 1d       	adc	r27, r1
    2bb8:	1d 92       	st	X+, r1
    2bba:	1c 92       	st	X, r1
    2bbc:	8f 5f       	subi	r24, 0xFF	; 255
    2bbe:	f4 cf       	rjmp	.-24     	; 0x2ba8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    2bc0:	97 b1       	in	r25, 0x07	; 7
    2bc2:	82 a1       	ldd	r24, Z+34	; 0x22
    2bc4:	80 95       	com	r24
    2bc6:	89 23       	and	r24, r25
    2bc8:	87 b9       	out	0x07, r24	; 7
    2bca:	98 b1       	in	r25, 0x08	; 8
    2bcc:	82 a1       	ldd	r24, Z+34	; 0x22
    2bce:	80 95       	com	r24
    2bd0:	89 23       	and	r24, r25
    2bd2:	88 b9       	out	0x08, r24	; 8
    2bd4:	87 e8       	ldi	r24, 0x87	; 135
    2bd6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2bda:	e1 2c       	mov	r14, r1
    2bdc:	81 a1       	ldd	r24, Z+33	; 0x21
    2bde:	e8 16       	cp	r14, r24
    2be0:	10 f0       	brcs	.+4      	; 0x2be6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    2be2:	e1 2c       	mov	r14, r1
    2be4:	29 c0       	rjmp	.+82     	; 0x2c38 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    2be6:	50 e0       	ldi	r21, 0x00	; 0
    2be8:	80 85       	ldd	r24, Z+8	; 0x08
    2bea:	58 17       	cp	r21, r24
    2bec:	18 f5       	brcc	.+70     	; 0x2c34 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    2bee:	a5 2f       	mov	r26, r21
    2bf0:	b0 e0       	ldi	r27, 0x00	; 0
    2bf2:	ef 01       	movw	r28, r30
    2bf4:	ca 0f       	add	r28, r26
    2bf6:	db 1f       	adc	r29, r27
    2bf8:	89 89       	ldd	r24, Y+17	; 0x11
    2bfa:	80 64       	ori	r24, 0x40	; 64
    2bfc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2c00:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2c04:	80 64       	ori	r24, 0x40	; 64
    2c06:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2c0a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2c0e:	86 fd       	sbrc	r24, 6
    2c10:	fc cf       	rjmp	.-8      	; 0x2c0a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    2c12:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    2c16:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    2c1a:	aa 0f       	add	r26, r26
    2c1c:	bb 1f       	adc	r27, r27
    2c1e:	a2 0f       	add	r26, r18
    2c20:	b3 1f       	adc	r27, r19
    2c22:	8d 91       	ld	r24, X+
    2c24:	9c 91       	ld	r25, X
    2c26:	11 97       	sbiw	r26, 0x01	; 1
    2c28:	86 0f       	add	r24, r22
    2c2a:	97 1f       	adc	r25, r23
    2c2c:	8d 93       	st	X+, r24
    2c2e:	9c 93       	st	X, r25
    2c30:	5f 5f       	subi	r21, 0xFF	; 255
    2c32:	da cf       	rjmp	.-76     	; 0x2be8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    2c34:	e3 94       	inc	r14
    2c36:	d2 cf       	rjmp	.-92     	; 0x2bdc <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    2c38:	80 85       	ldd	r24, Z+8	; 0x08
    2c3a:	e8 16       	cp	r14, r24
    2c3c:	a0 f4       	brcc	.+40     	; 0x2c66 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    2c3e:	e9 01       	movw	r28, r18
    2c40:	ce 0d       	add	r28, r14
    2c42:	d1 1d       	adc	r29, r1
    2c44:	ce 0d       	add	r28, r14
    2c46:	d1 1d       	adc	r29, r1
    2c48:	61 a1       	ldd	r22, Z+33	; 0x21
    2c4a:	70 e0       	ldi	r23, 0x00	; 0
    2c4c:	cb 01       	movw	r24, r22
    2c4e:	95 95       	asr	r25
    2c50:	87 95       	ror	r24
    2c52:	a8 81       	ld	r26, Y
    2c54:	b9 81       	ldd	r27, Y+1	; 0x01
    2c56:	8a 0f       	add	r24, r26
    2c58:	9b 1f       	adc	r25, r27
    2c5a:	0e 94 0c 19 	call	0x3218	; 0x3218 <__udivmodhi4>
    2c5e:	79 83       	std	Y+1, r23	; 0x01
    2c60:	68 83       	st	Y, r22
    2c62:	e3 94       	inc	r14
    2c64:	e9 cf       	rjmp	.-46     	; 0x2c38 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    2c66:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2c6a:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2c6e:	18 b9       	out	0x08, r17	; 8
    2c70:	47 b9       	out	0x07, r20	; 7
    2c72:	cd b7       	in	r28, 0x3d	; 61
    2c74:	de b7       	in	r29, 0x3e	; 62
    2c76:	e6 e0       	ldi	r30, 0x06	; 6
    2c78:	0c 94 ab 19 	jmp	0x3356	; 0x3356 <__epilogue_restores__+0x18>

00002c7c <_ZN16PololuQTRSensors4readEPjh>:
    2c7c:	a0 e2       	ldi	r26, 0x20	; 32
    2c7e:	b0 e0       	ldi	r27, 0x00	; 0
    2c80:	e4 e4       	ldi	r30, 0x44	; 68
    2c82:	f6 e1       	ldi	r31, 0x16	; 22
    2c84:	0c 94 8e 19 	jmp	0x331c	; 0x331c <__prologue_saves__+0x16>
    2c88:	8c 01       	movw	r16, r24
    2c8a:	7b 01       	movw	r14, r22
    2c8c:	d4 2e       	mov	r13, r20
    2c8e:	8f ef       	ldi	r24, 0xFF	; 255
    2c90:	84 0f       	add	r24, r20
    2c92:	82 30       	cpi	r24, 0x02	; 2
    2c94:	18 f4       	brcc	.+6      	; 0x2c9c <_ZN16PololuQTRSensors4readEPjh+0x20>
    2c96:	c8 01       	movw	r24, r16
    2c98:	0e 94 80 14 	call	0x2900	; 0x2900 <_ZN16PololuQTRSensors10emittersOnEv>
    2c9c:	d8 01       	movw	r26, r16
    2c9e:	50 96       	adiw	r26, 0x10	; 16
    2ca0:	8c 91       	ld	r24, X
    2ca2:	b7 01       	movw	r22, r14
    2ca4:	81 11       	cpse	r24, r1
    2ca6:	10 c0       	rjmp	.+32     	; 0x2cc8 <_ZN16PololuQTRSensors4readEPjh+0x4c>
    2ca8:	c8 01       	movw	r24, r16
    2caa:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2cae:	c8 01       	movw	r24, r16
    2cb0:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <_ZN16PololuQTRSensors11emittersOffEv>
    2cb4:	b2 e0       	ldi	r27, 0x02	; 2
    2cb6:	db 12       	cpse	r13, r27
    2cb8:	3a c0       	rjmp	.+116    	; 0x2d2e <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2cba:	be 01       	movw	r22, r28
    2cbc:	6f 5f       	subi	r22, 0xFF	; 255
    2cbe:	7f 4f       	sbci	r23, 0xFF	; 255
    2cc0:	c8 01       	movw	r24, r16
    2cc2:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2cc6:	0f c0       	rjmp	.+30     	; 0x2ce6 <_ZN16PololuQTRSensors4readEPjh+0x6a>
    2cc8:	c8 01       	movw	r24, r16
    2cca:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2cce:	c8 01       	movw	r24, r16
    2cd0:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <_ZN16PololuQTRSensors11emittersOffEv>
    2cd4:	e2 e0       	ldi	r30, 0x02	; 2
    2cd6:	de 12       	cpse	r13, r30
    2cd8:	2a c0       	rjmp	.+84     	; 0x2d2e <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2cda:	be 01       	movw	r22, r28
    2cdc:	6f 5f       	subi	r22, 0xFF	; 255
    2cde:	7f 4f       	sbci	r23, 0xFF	; 255
    2ce0:	c8 01       	movw	r24, r16
    2ce2:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2ce6:	40 e0       	ldi	r20, 0x00	; 0
    2ce8:	f8 01       	movw	r30, r16
    2cea:	80 85       	ldd	r24, Z+8	; 0x08
    2cec:	48 17       	cp	r20, r24
    2cee:	f8 f4       	brcc	.+62     	; 0x2d2e <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2cf0:	84 2f       	mov	r24, r20
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	88 0f       	add	r24, r24
    2cf6:	99 1f       	adc	r25, r25
    2cf8:	f7 01       	movw	r30, r14
    2cfa:	e8 0f       	add	r30, r24
    2cfc:	f9 1f       	adc	r31, r25
    2cfe:	21 e0       	ldi	r18, 0x01	; 1
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	2c 0f       	add	r18, r28
    2d04:	3d 1f       	adc	r19, r29
    2d06:	82 0f       	add	r24, r18
    2d08:	93 1f       	adc	r25, r19
    2d0a:	d8 01       	movw	r26, r16
    2d0c:	1e 96       	adiw	r26, 0x0e	; 14
    2d0e:	2d 91       	ld	r18, X+
    2d10:	3c 91       	ld	r19, X
    2d12:	1f 97       	sbiw	r26, 0x0f	; 15
    2d14:	dc 01       	movw	r26, r24
    2d16:	8d 91       	ld	r24, X+
    2d18:	9c 91       	ld	r25, X
    2d1a:	28 1b       	sub	r18, r24
    2d1c:	39 0b       	sbc	r19, r25
    2d1e:	80 81       	ld	r24, Z
    2d20:	91 81       	ldd	r25, Z+1	; 0x01
    2d22:	82 0f       	add	r24, r18
    2d24:	93 1f       	adc	r25, r19
    2d26:	91 83       	std	Z+1, r25	; 0x01
    2d28:	80 83       	st	Z, r24
    2d2a:	4f 5f       	subi	r20, 0xFF	; 255
    2d2c:	dd cf       	rjmp	.-70     	; 0x2ce8 <_ZN16PololuQTRSensors4readEPjh+0x6c>
    2d2e:	a0 96       	adiw	r28, 0x20	; 32
    2d30:	e7 e0       	ldi	r30, 0x07	; 7
    2d32:	0c 94 aa 19 	jmp	0x3354	; 0x3354 <__epilogue_restores__+0x16>

00002d36 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    2d36:	2f 92       	push	r2
    2d38:	3f 92       	push	r3
    2d3a:	5f 92       	push	r5
    2d3c:	6f 92       	push	r6
    2d3e:	7f 92       	push	r7
    2d40:	8f 92       	push	r8
    2d42:	9f 92       	push	r9
    2d44:	af 92       	push	r10
    2d46:	bf 92       	push	r11
    2d48:	cf 92       	push	r12
    2d4a:	df 92       	push	r13
    2d4c:	ef 92       	push	r14
    2d4e:	ff 92       	push	r15
    2d50:	0f 93       	push	r16
    2d52:	1f 93       	push	r17
    2d54:	cf 93       	push	r28
    2d56:	df 93       	push	r29
    2d58:	cd b7       	in	r28, 0x3d	; 61
    2d5a:	de b7       	in	r29, 0x3e	; 62
    2d5c:	c0 56       	subi	r28, 0x60	; 96
    2d5e:	d1 09       	sbc	r29, r1
    2d60:	0f b6       	in	r0, 0x3f	; 63
    2d62:	f8 94       	cli
    2d64:	de bf       	out	0x3e, r29	; 62
    2d66:	0f be       	out	0x3f, r0	; 63
    2d68:	cd bf       	out	0x3d, r28	; 61
    2d6a:	8c 01       	movw	r16, r24
    2d6c:	4b 01       	movw	r8, r22
    2d6e:	5a 01       	movw	r10, r20
    2d70:	52 2e       	mov	r5, r18
    2d72:	da 01       	movw	r26, r20
    2d74:	8d 91       	ld	r24, X+
    2d76:	9c 91       	ld	r25, X
    2d78:	89 2b       	or	r24, r25
    2d7a:	31 f0       	breq	.+12     	; 0x2d88 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x52>
    2d7c:	f4 01       	movw	r30, r8
    2d7e:	80 81       	ld	r24, Z
    2d80:	91 81       	ldd	r25, Z+1	; 0x01
    2d82:	89 2b       	or	r24, r25
    2d84:	f1 f4       	brne	.+60     	; 0x2dc2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    2d86:	24 c0       	rjmp	.+72     	; 0x2dd0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x9a>
    2d88:	d8 01       	movw	r26, r16
    2d8a:	18 96       	adiw	r26, 0x08	; 8
    2d8c:	8c 91       	ld	r24, X
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	88 0f       	add	r24, r24
    2d92:	99 1f       	adc	r25, r25
    2d94:	0e 94 c0 19 	call	0x3380	; 0x3380 <malloc>
    2d98:	f5 01       	movw	r30, r10
    2d9a:	91 83       	std	Z+1, r25	; 0x01
    2d9c:	80 83       	st	Z, r24
    2d9e:	00 97       	sbiw	r24, 0x00	; 0
    2da0:	09 f4       	brne	.+2      	; 0x2da4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x6e>
    2da2:	b1 c0       	rjmp	.+354    	; 0x2f06 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    2da4:	fc 01       	movw	r30, r24
    2da6:	20 e0       	ldi	r18, 0x00	; 0
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	d8 01       	movw	r26, r16
    2dac:	18 96       	adiw	r26, 0x08	; 8
    2dae:	8c 91       	ld	r24, X
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	28 17       	cp	r18, r24
    2db4:	39 07       	cpc	r19, r25
    2db6:	14 f7       	brge	.-60     	; 0x2d7c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x46>
    2db8:	11 92       	st	Z+, r1
    2dba:	11 92       	st	Z+, r1
    2dbc:	2f 5f       	subi	r18, 0xFF	; 255
    2dbe:	3f 4f       	sbci	r19, 0xFF	; 255
    2dc0:	f4 cf       	rjmp	.-24     	; 0x2daa <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x74>
    2dc2:	e1 2c       	mov	r14, r1
    2dc4:	f1 2c       	mov	r15, r1
    2dc6:	6e 01       	movw	r12, r28
    2dc8:	b1 e2       	ldi	r27, 0x21	; 33
    2dca:	cb 0e       	add	r12, r27
    2dcc:	d1 1c       	adc	r13, r1
    2dce:	21 c0       	rjmp	.+66     	; 0x2e12 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    2dd0:	f8 01       	movw	r30, r16
    2dd2:	80 85       	ldd	r24, Z+8	; 0x08
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	88 0f       	add	r24, r24
    2dd8:	99 1f       	adc	r25, r25
    2dda:	0e 94 c0 19 	call	0x3380	; 0x3380 <malloc>
    2dde:	d4 01       	movw	r26, r8
    2de0:	8d 93       	st	X+, r24
    2de2:	9c 93       	st	X, r25
    2de4:	00 97       	sbiw	r24, 0x00	; 0
    2de6:	09 f4       	brne	.+2      	; 0x2dea <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb4>
    2de8:	8e c0       	rjmp	.+284    	; 0x2f06 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    2dea:	fc 01       	movw	r30, r24
    2dec:	20 e0       	ldi	r18, 0x00	; 0
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	d8 01       	movw	r26, r16
    2df2:	18 96       	adiw	r26, 0x08	; 8
    2df4:	8c 91       	ld	r24, X
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	28 17       	cp	r18, r24
    2dfa:	39 07       	cpc	r19, r25
    2dfc:	14 f7       	brge	.-60     	; 0x2dc2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    2dfe:	d8 01       	movw	r26, r16
    2e00:	1e 96       	adiw	r26, 0x0e	; 14
    2e02:	8d 91       	ld	r24, X+
    2e04:	9c 91       	ld	r25, X
    2e06:	1f 97       	sbiw	r26, 0x0f	; 15
    2e08:	81 93       	st	Z+, r24
    2e0a:	91 93       	st	Z+, r25
    2e0c:	2f 5f       	subi	r18, 0xFF	; 255
    2e0e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e10:	ef cf       	rjmp	.-34     	; 0x2df0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xba>
    2e12:	45 2d       	mov	r20, r5
    2e14:	be 01       	movw	r22, r28
    2e16:	6f 5b       	subi	r22, 0xBF	; 191
    2e18:	7f 4f       	sbci	r23, 0xFF	; 255
    2e1a:	c8 01       	movw	r24, r16
    2e1c:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN16PololuQTRSensors4readEPjh>
    2e20:	f8 01       	movw	r30, r16
    2e22:	60 84       	ldd	r6, Z+8	; 0x08
    2e24:	71 2c       	mov	r7, r1
    2e26:	fe 01       	movw	r30, r28
    2e28:	ef 5b       	subi	r30, 0xBF	; 191
    2e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2c:	c6 01       	movw	r24, r12
    2e2e:	9e 01       	movw	r18, r28
    2e30:	2f 5f       	subi	r18, 0xFF	; 255
    2e32:	3f 4f       	sbci	r19, 0xFF	; 255
    2e34:	19 01       	movw	r2, r18
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	26 15       	cp	r18, r6
    2e3c:	37 05       	cpc	r19, r7
    2e3e:	4c f5       	brge	.+82     	; 0x2e92 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x15c>
    2e40:	e1 14       	cp	r14, r1
    2e42:	f1 04       	cpc	r15, r1
    2e44:	89 f0       	breq	.+34     	; 0x2e68 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    2e46:	dc 01       	movw	r26, r24
    2e48:	6d 91       	ld	r22, X+
    2e4a:	7c 91       	ld	r23, X
    2e4c:	40 81       	ld	r20, Z
    2e4e:	51 81       	ldd	r21, Z+1	; 0x01
    2e50:	64 17       	cp	r22, r20
    2e52:	75 07       	cpc	r23, r21
    2e54:	48 f0       	brcs	.+18     	; 0x2e68 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    2e56:	d1 01       	movw	r26, r2
    2e58:	6d 91       	ld	r22, X+
    2e5a:	7c 91       	ld	r23, X
    2e5c:	40 81       	ld	r20, Z
    2e5e:	51 81       	ldd	r21, Z+1	; 0x01
    2e60:	46 17       	cp	r20, r22
    2e62:	57 07       	cpc	r21, r23
    2e64:	48 f0       	brcs	.+18     	; 0x2e78 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x142>
    2e66:	0d c0       	rjmp	.+26     	; 0x2e82 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x14c>
    2e68:	40 81       	ld	r20, Z
    2e6a:	51 81       	ldd	r21, Z+1	; 0x01
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	4d 93       	st	X+, r20
    2e70:	5c 93       	st	X, r21
    2e72:	e1 14       	cp	r14, r1
    2e74:	f1 04       	cpc	r15, r1
    2e76:	79 f7       	brne	.-34     	; 0x2e56 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x120>
    2e78:	40 81       	ld	r20, Z
    2e7a:	51 81       	ldd	r21, Z+1	; 0x01
    2e7c:	d1 01       	movw	r26, r2
    2e7e:	4d 93       	st	X+, r20
    2e80:	5c 93       	st	X, r21
    2e82:	2f 5f       	subi	r18, 0xFF	; 255
    2e84:	3f 4f       	sbci	r19, 0xFF	; 255
    2e86:	b2 e0       	ldi	r27, 0x02	; 2
    2e88:	2b 0e       	add	r2, r27
    2e8a:	31 1c       	adc	r3, r1
    2e8c:	32 96       	adiw	r30, 0x02	; 2
    2e8e:	02 96       	adiw	r24, 0x02	; 2
    2e90:	d4 cf       	rjmp	.-88     	; 0x2e3a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x104>
    2e92:	ef ef       	ldi	r30, 0xFF	; 255
    2e94:	ee 1a       	sub	r14, r30
    2e96:	fe 0a       	sbc	r15, r30
    2e98:	fa e0       	ldi	r31, 0x0A	; 10
    2e9a:	ef 16       	cp	r14, r31
    2e9c:	f1 04       	cpc	r15, r1
    2e9e:	09 f0       	breq	.+2      	; 0x2ea2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x16c>
    2ea0:	b8 cf       	rjmp	.-144    	; 0x2e12 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    2ea2:	9e 01       	movw	r18, r28
    2ea4:	2f 5f       	subi	r18, 0xFF	; 255
    2ea6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ea8:	79 01       	movw	r14, r18
    2eaa:	36 01       	movw	r6, r12
    2eac:	80 e0       	ldi	r24, 0x00	; 0
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	f8 01       	movw	r30, r16
    2eb2:	20 85       	ldd	r18, Z+8	; 0x08
    2eb4:	30 e0       	ldi	r19, 0x00	; 0
    2eb6:	82 17       	cp	r24, r18
    2eb8:	93 07       	cpc	r25, r19
    2eba:	2c f5       	brge	.+74     	; 0x2f06 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    2ebc:	d7 01       	movw	r26, r14
    2ebe:	2d 91       	ld	r18, X+
    2ec0:	3d 91       	ld	r19, X+
    2ec2:	7d 01       	movw	r14, r26
    2ec4:	b3 01       	movw	r22, r6
    2ec6:	6c 19       	sub	r22, r12
    2ec8:	7d 09       	sbc	r23, r13
    2eca:	d5 01       	movw	r26, r10
    2ecc:	ed 91       	ld	r30, X+
    2ece:	fc 91       	ld	r31, X
    2ed0:	e6 0f       	add	r30, r22
    2ed2:	f7 1f       	adc	r31, r23
    2ed4:	40 81       	ld	r20, Z
    2ed6:	51 81       	ldd	r21, Z+1	; 0x01
    2ed8:	42 17       	cp	r20, r18
    2eda:	53 07       	cpc	r21, r19
    2edc:	10 f4       	brcc	.+4      	; 0x2ee2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1ac>
    2ede:	31 83       	std	Z+1, r19	; 0x01
    2ee0:	20 83       	st	Z, r18
    2ee2:	f3 01       	movw	r30, r6
    2ee4:	21 91       	ld	r18, Z+
    2ee6:	31 91       	ld	r19, Z+
    2ee8:	3f 01       	movw	r6, r30
    2eea:	d4 01       	movw	r26, r8
    2eec:	ed 91       	ld	r30, X+
    2eee:	fc 91       	ld	r31, X
    2ef0:	e6 0f       	add	r30, r22
    2ef2:	f7 1f       	adc	r31, r23
    2ef4:	40 81       	ld	r20, Z
    2ef6:	51 81       	ldd	r21, Z+1	; 0x01
    2ef8:	24 17       	cp	r18, r20
    2efa:	35 07       	cpc	r19, r21
    2efc:	10 f4       	brcc	.+4      	; 0x2f02 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1cc>
    2efe:	31 83       	std	Z+1, r19	; 0x01
    2f00:	20 83       	st	Z, r18
    2f02:	01 96       	adiw	r24, 0x01	; 1
    2f04:	d5 cf       	rjmp	.-86     	; 0x2eb0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17a>
    2f06:	c0 5a       	subi	r28, 0xA0	; 160
    2f08:	df 4f       	sbci	r29, 0xFF	; 255
    2f0a:	0f b6       	in	r0, 0x3f	; 63
    2f0c:	f8 94       	cli
    2f0e:	de bf       	out	0x3e, r29	; 62
    2f10:	0f be       	out	0x3f, r0	; 63
    2f12:	cd bf       	out	0x3d, r28	; 61
    2f14:	df 91       	pop	r29
    2f16:	cf 91       	pop	r28
    2f18:	1f 91       	pop	r17
    2f1a:	0f 91       	pop	r16
    2f1c:	ff 90       	pop	r15
    2f1e:	ef 90       	pop	r14
    2f20:	df 90       	pop	r13
    2f22:	cf 90       	pop	r12
    2f24:	bf 90       	pop	r11
    2f26:	af 90       	pop	r10
    2f28:	9f 90       	pop	r9
    2f2a:	8f 90       	pop	r8
    2f2c:	7f 90       	pop	r7
    2f2e:	6f 90       	pop	r6
    2f30:	5f 90       	pop	r5
    2f32:	3f 90       	pop	r3
    2f34:	2f 90       	pop	r2
    2f36:	08 95       	ret

00002f38 <_ZN16PololuQTRSensors9calibrateEh>:
    2f38:	1f 93       	push	r17
    2f3a:	cf 93       	push	r28
    2f3c:	df 93       	push	r29
    2f3e:	ec 01       	movw	r28, r24
    2f40:	16 2f       	mov	r17, r22
    2f42:	8f ef       	ldi	r24, 0xFF	; 255
    2f44:	86 0f       	add	r24, r22
    2f46:	82 30       	cpi	r24, 0x02	; 2
    2f48:	18 f0       	brcs	.+6      	; 0x2f50 <_ZN16PololuQTRSensors9calibrateEh+0x18>
    2f4a:	66 23       	and	r22, r22
    2f4c:	59 f0       	breq	.+22     	; 0x2f64 <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    2f4e:	14 c0       	rjmp	.+40     	; 0x2f78 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    2f50:	21 e0       	ldi	r18, 0x01	; 1
    2f52:	ae 01       	movw	r20, r28
    2f54:	4e 5f       	subi	r20, 0xFE	; 254
    2f56:	5f 4f       	sbci	r21, 0xFF	; 255
    2f58:	be 01       	movw	r22, r28
    2f5a:	ce 01       	movw	r24, r28
    2f5c:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    2f60:	12 30       	cpi	r17, 0x02	; 2
    2f62:	51 f4       	brne	.+20     	; 0x2f78 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    2f64:	ae 01       	movw	r20, r28
    2f66:	4a 5f       	subi	r20, 0xFA	; 250
    2f68:	5f 4f       	sbci	r21, 0xFF	; 255
    2f6a:	be 01       	movw	r22, r28
    2f6c:	6c 5f       	subi	r22, 0xFC	; 252
    2f6e:	7f 4f       	sbci	r23, 0xFF	; 255
    2f70:	20 e0       	ldi	r18, 0x00	; 0
    2f72:	ce 01       	movw	r24, r28
    2f74:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    2f78:	df 91       	pop	r29
    2f7a:	cf 91       	pop	r28
    2f7c:	1f 91       	pop	r17
    2f7e:	08 95       	ret

00002f80 <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    2f80:	a0 e0       	ldi	r26, 0x00	; 0
    2f82:	b0 e0       	ldi	r27, 0x00	; 0
    2f84:	e6 ec       	ldi	r30, 0xC6	; 198
    2f86:	f7 e1       	ldi	r31, 0x17	; 23
    2f88:	0c 94 8c 19 	jmp	0x3318	; 0x3318 <__prologue_saves__+0x12>
    2f8c:	ec 01       	movw	r28, r24
    2f8e:	8b 01       	movw	r16, r22
    2f90:	b4 2e       	mov	r11, r20
    2f92:	84 2f       	mov	r24, r20
    2f94:	8d 7f       	andi	r24, 0xFD	; 253
    2f96:	51 f4       	brne	.+20     	; 0x2fac <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    2f98:	8c 81       	ldd	r24, Y+4	; 0x04
    2f9a:	9d 81       	ldd	r25, Y+5	; 0x05
    2f9c:	89 2b       	or	r24, r25
    2f9e:	09 f4       	brne	.+2      	; 0x2fa2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x22>
    2fa0:	97 c0       	rjmp	.+302    	; 0x30d0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2fa2:	8e 81       	ldd	r24, Y+6	; 0x06
    2fa4:	9f 81       	ldd	r25, Y+7	; 0x07
    2fa6:	89 2b       	or	r24, r25
    2fa8:	09 f4       	brne	.+2      	; 0x2fac <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    2faa:	92 c0       	rjmp	.+292    	; 0x30d0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2fac:	8f ef       	ldi	r24, 0xFF	; 255
    2fae:	8b 0d       	add	r24, r11
    2fb0:	82 30       	cpi	r24, 0x02	; 2
    2fb2:	50 f4       	brcc	.+20     	; 0x2fc8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    2fb4:	88 81       	ld	r24, Y
    2fb6:	99 81       	ldd	r25, Y+1	; 0x01
    2fb8:	89 2b       	or	r24, r25
    2fba:	09 f4       	brne	.+2      	; 0x2fbe <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3e>
    2fbc:	89 c0       	rjmp	.+274    	; 0x30d0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc0:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc2:	89 2b       	or	r24, r25
    2fc4:	09 f4       	brne	.+2      	; 0x2fc8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    2fc6:	84 c0       	rjmp	.+264    	; 0x30d0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2fc8:	4b 2d       	mov	r20, r11
    2fca:	b8 01       	movw	r22, r16
    2fcc:	ce 01       	movw	r24, r28
    2fce:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <_ZN16PololuQTRSensors4readEPjh>
    2fd2:	78 01       	movw	r14, r16
    2fd4:	00 e0       	ldi	r16, 0x00	; 0
    2fd6:	10 e0       	ldi	r17, 0x00	; 0
    2fd8:	c1 2c       	mov	r12, r1
    2fda:	d1 2c       	mov	r13, r1
    2fdc:	88 85       	ldd	r24, Y+8	; 0x08
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	c8 16       	cp	r12, r24
    2fe2:	d9 06       	cpc	r13, r25
    2fe4:	0c f0       	brlt	.+2      	; 0x2fe8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x68>
    2fe6:	74 c0       	rjmp	.+232    	; 0x30d0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2fe8:	81 e0       	ldi	r24, 0x01	; 1
    2fea:	b8 12       	cpse	r11, r24
    2fec:	0a c0       	rjmp	.+20     	; 0x3002 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x82>
    2fee:	ea 81       	ldd	r30, Y+2	; 0x02
    2ff0:	fb 81       	ldd	r31, Y+3	; 0x03
    2ff2:	e0 0f       	add	r30, r16
    2ff4:	f1 1f       	adc	r31, r17
    2ff6:	01 90       	ld	r0, Z+
    2ff8:	f0 81       	ld	r31, Z
    2ffa:	e0 2d       	mov	r30, r0
    2ffc:	a8 81       	ld	r26, Y
    2ffe:	b9 81       	ldd	r27, Y+1	; 0x01
    3000:	0d c0       	rjmp	.+26     	; 0x301c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x9c>
    3002:	8c 81       	ldd	r24, Y+4	; 0x04
    3004:	9d 81       	ldd	r25, Y+5	; 0x05
    3006:	2e 81       	ldd	r18, Y+6	; 0x06
    3008:	3f 81       	ldd	r19, Y+7	; 0x07
    300a:	b1 10       	cpse	r11, r1
    300c:	0c c0       	rjmp	.+24     	; 0x3026 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    300e:	f9 01       	movw	r30, r18
    3010:	e0 0f       	add	r30, r16
    3012:	f1 1f       	adc	r31, r17
    3014:	01 90       	ld	r0, Z+
    3016:	f0 81       	ld	r31, Z
    3018:	e0 2d       	mov	r30, r0
    301a:	dc 01       	movw	r26, r24
    301c:	a0 0f       	add	r26, r16
    301e:	b1 1f       	adc	r27, r17
    3020:	8d 91       	ld	r24, X+
    3022:	9c 91       	ld	r25, X
    3024:	28 c0       	rjmp	.+80     	; 0x3076 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    3026:	fc 01       	movw	r30, r24
    3028:	e0 0f       	add	r30, r16
    302a:	f1 1f       	adc	r31, r17
    302c:	40 81       	ld	r20, Z
    302e:	51 81       	ldd	r21, Z+1	; 0x01
    3030:	e8 81       	ld	r30, Y
    3032:	f9 81       	ldd	r31, Y+1	; 0x01
    3034:	e0 0f       	add	r30, r16
    3036:	f1 1f       	adc	r31, r17
    3038:	80 81       	ld	r24, Z
    303a:	91 81       	ldd	r25, Z+1	; 0x01
    303c:	ee 85       	ldd	r30, Y+14	; 0x0e
    303e:	ff 85       	ldd	r31, Y+15	; 0x0f
    3040:	48 17       	cp	r20, r24
    3042:	59 07       	cpc	r21, r25
    3044:	10 f4       	brcc	.+4      	; 0x304a <_ZN16PololuQTRSensors14readCalibratedEPjh+0xca>
    3046:	cf 01       	movw	r24, r30
    3048:	04 c0       	rjmp	.+8      	; 0x3052 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd2>
    304a:	8e 0f       	add	r24, r30
    304c:	9f 1f       	adc	r25, r31
    304e:	84 1b       	sub	r24, r20
    3050:	95 0b       	sbc	r25, r21
    3052:	d9 01       	movw	r26, r18
    3054:	a0 0f       	add	r26, r16
    3056:	b1 1f       	adc	r27, r17
    3058:	2d 91       	ld	r18, X+
    305a:	3c 91       	ld	r19, X
    305c:	aa 81       	ldd	r26, Y+2	; 0x02
    305e:	bb 81       	ldd	r27, Y+3	; 0x03
    3060:	a0 0f       	add	r26, r16
    3062:	b1 1f       	adc	r27, r17
    3064:	4d 91       	ld	r20, X+
    3066:	5c 91       	ld	r21, X
    3068:	24 17       	cp	r18, r20
    306a:	35 07       	cpc	r19, r21
    306c:	20 f0       	brcs	.+8      	; 0x3076 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    306e:	e4 0f       	add	r30, r20
    3070:	f5 1f       	adc	r31, r21
    3072:	e2 1b       	sub	r30, r18
    3074:	f3 0b       	sbc	r31, r19
    3076:	e8 1b       	sub	r30, r24
    3078:	f9 0b       	sbc	r31, r25
    307a:	a9 f0       	breq	.+42     	; 0x30a6 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x126>
    307c:	d7 01       	movw	r26, r14
    307e:	2d 91       	ld	r18, X+
    3080:	3c 91       	ld	r19, X
    3082:	40 e0       	ldi	r20, 0x00	; 0
    3084:	50 e0       	ldi	r21, 0x00	; 0
    3086:	28 1b       	sub	r18, r24
    3088:	39 0b       	sbc	r19, r25
    308a:	41 09       	sbc	r20, r1
    308c:	51 09       	sbc	r21, r1
    308e:	a8 ee       	ldi	r26, 0xE8	; 232
    3090:	b3 e0       	ldi	r27, 0x03	; 3
    3092:	0e 94 70 19 	call	0x32e0	; 0x32e0 <__muluhisi3>
    3096:	9f 01       	movw	r18, r30
    3098:	40 e0       	ldi	r20, 0x00	; 0
    309a:	50 e0       	ldi	r21, 0x00	; 0
    309c:	0e 94 42 19 	call	0x3284	; 0x3284 <__divmodsi4>
    30a0:	37 fd       	sbrc	r19, 7
    30a2:	0a c0       	rjmp	.+20     	; 0x30b8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x138>
    30a4:	02 c0       	rjmp	.+4      	; 0x30aa <_ZN16PololuQTRSensors14readCalibratedEPjh+0x12a>
    30a6:	20 e0       	ldi	r18, 0x00	; 0
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	29 3e       	cpi	r18, 0xE9	; 233
    30ac:	b3 e0       	ldi	r27, 0x03	; 3
    30ae:	3b 07       	cpc	r19, r27
    30b0:	2c f0       	brlt	.+10     	; 0x30bc <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    30b2:	28 ee       	ldi	r18, 0xE8	; 232
    30b4:	33 e0       	ldi	r19, 0x03	; 3
    30b6:	02 c0       	rjmp	.+4      	; 0x30bc <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	f7 01       	movw	r30, r14
    30be:	21 93       	st	Z+, r18
    30c0:	31 93       	st	Z+, r19
    30c2:	7f 01       	movw	r14, r30
    30c4:	ff ef       	ldi	r31, 0xFF	; 255
    30c6:	cf 1a       	sub	r12, r31
    30c8:	df 0a       	sbc	r13, r31
    30ca:	0e 5f       	subi	r16, 0xFE	; 254
    30cc:	1f 4f       	sbci	r17, 0xFF	; 255
    30ce:	86 cf       	rjmp	.-244    	; 0x2fdc <_ZN16PololuQTRSensors14readCalibratedEPjh+0x5c>
    30d0:	cd b7       	in	r28, 0x3d	; 61
    30d2:	de b7       	in	r29, 0x3e	; 62
    30d4:	e9 e0       	ldi	r30, 0x09	; 9
    30d6:	0c 94 a8 19 	jmp	0x3350	; 0x3350 <__epilogue_restores__+0x12>

000030da <_ZN16PololuQTRSensors8readLineEPjhh>:
    30da:	a0 e0       	ldi	r26, 0x00	; 0
    30dc:	b0 e0       	ldi	r27, 0x00	; 0
    30de:	e3 e7       	ldi	r30, 0x73	; 115
    30e0:	f8 e1       	ldi	r31, 0x18	; 24
    30e2:	0c 94 83 19 	jmp	0x3306	; 0x3306 <__prologue_saves__>
    30e6:	ec 01       	movw	r28, r24
    30e8:	8b 01       	movw	r16, r22
    30ea:	82 2e       	mov	r8, r18
    30ec:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <_ZN16PololuQTRSensors14readCalibratedEPjh>
    30f0:	28 84       	ldd	r2, Y+8	; 0x08
    30f2:	e8 01       	movw	r28, r16
    30f4:	41 2c       	mov	r4, r1
    30f6:	51 2c       	mov	r5, r1
    30f8:	32 01       	movw	r6, r4
    30fa:	00 e0       	ldi	r16, 0x00	; 0
    30fc:	10 e0       	ldi	r17, 0x00	; 0
    30fe:	c1 2c       	mov	r12, r1
    3100:	d1 2c       	mov	r13, r1
    3102:	76 01       	movw	r14, r12
    3104:	31 2c       	mov	r3, r1
    3106:	91 2c       	mov	r9, r1
    3108:	58 ee       	ldi	r21, 0xE8	; 232
    310a:	a5 2e       	mov	r10, r21
    310c:	53 e0       	ldi	r21, 0x03	; 3
    310e:	b5 2e       	mov	r11, r21
    3110:	92 14       	cp	r9, r2
    3112:	21 f1       	breq	.+72     	; 0x315c <_ZN16PololuQTRSensors8readLineEPjhh+0x82>
    3114:	e9 91       	ld	r30, Y+
    3116:	f9 91       	ld	r31, Y+
    3118:	88 20       	and	r8, r8
    311a:	21 f0       	breq	.+8      	; 0x3124 <_ZN16PololuQTRSensors8readLineEPjhh+0x4a>
    311c:	c5 01       	movw	r24, r10
    311e:	8e 1b       	sub	r24, r30
    3120:	9f 0b       	sbc	r25, r31
    3122:	fc 01       	movw	r30, r24
    3124:	e9 3c       	cpi	r30, 0xC9	; 201
    3126:	f1 05       	cpc	r31, r1
    3128:	24 f4       	brge	.+8      	; 0x3132 <_ZN16PololuQTRSensors8readLineEPjhh+0x58>
    312a:	e3 33       	cpi	r30, 0x33	; 51
    312c:	f1 05       	cpc	r31, r1
    312e:	74 f0       	brlt	.+28     	; 0x314c <_ZN16PololuQTRSensors8readLineEPjhh+0x72>
    3130:	02 c0       	rjmp	.+4      	; 0x3136 <_ZN16PololuQTRSensors8readLineEPjhh+0x5c>
    3132:	33 24       	eor	r3, r3
    3134:	33 94       	inc	r3
    3136:	df 01       	movw	r26, r30
    3138:	a3 01       	movw	r20, r6
    313a:	92 01       	movw	r18, r4
    313c:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <__mulshisi3>
    3140:	c6 0e       	add	r12, r22
    3142:	d7 1e       	adc	r13, r23
    3144:	e8 1e       	adc	r14, r24
    3146:	f9 1e       	adc	r15, r25
    3148:	0e 0f       	add	r16, r30
    314a:	1f 1f       	adc	r17, r31
    314c:	93 94       	inc	r9
    314e:	98 ee       	ldi	r25, 0xE8	; 232
    3150:	49 0e       	add	r4, r25
    3152:	93 e0       	ldi	r25, 0x03	; 3
    3154:	59 1e       	adc	r5, r25
    3156:	61 1c       	adc	r6, r1
    3158:	71 1c       	adc	r7, r1
    315a:	da cf       	rjmp	.-76     	; 0x3110 <_ZN16PololuQTRSensors8readLineEPjhh+0x36>
    315c:	31 10       	cpse	r3, r1
    315e:	1e c0       	rjmp	.+60     	; 0x319c <_ZN16PololuQTRSensors8readLineEPjhh+0xc2>
    3160:	49 2d       	mov	r20, r9
    3162:	50 e0       	ldi	r21, 0x00	; 0
    3164:	41 50       	subi	r20, 0x01	; 1
    3166:	51 09       	sbc	r21, r1
    3168:	24 ef       	ldi	r18, 0xF4	; 244
    316a:	31 e0       	ldi	r19, 0x01	; 1
    316c:	42 9f       	mul	r20, r18
    316e:	c0 01       	movw	r24, r0
    3170:	43 9f       	mul	r20, r19
    3172:	90 0d       	add	r25, r0
    3174:	52 9f       	mul	r21, r18
    3176:	90 0d       	add	r25, r0
    3178:	11 24       	eor	r1, r1
    317a:	20 91 fd 01 	lds	r18, 0x01FD	; 0x8001fd <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    317e:	30 91 fe 01 	lds	r19, 0x01FE	; 0x8001fe <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    3182:	28 17       	cp	r18, r24
    3184:	39 07       	cpc	r19, r25
    3186:	b4 f0       	brlt	.+44     	; 0x31b4 <_ZN16PololuQTRSensors8readLineEPjhh+0xda>
    3188:	88 ee       	ldi	r24, 0xE8	; 232
    318a:	93 e0       	ldi	r25, 0x03	; 3
    318c:	48 9f       	mul	r20, r24
    318e:	90 01       	movw	r18, r0
    3190:	49 9f       	mul	r20, r25
    3192:	30 0d       	add	r19, r0
    3194:	58 9f       	mul	r21, r24
    3196:	30 0d       	add	r19, r0
    3198:	11 24       	eor	r1, r1
    319a:	0e c0       	rjmp	.+28     	; 0x31b8 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    319c:	98 01       	movw	r18, r16
    319e:	40 e0       	ldi	r20, 0x00	; 0
    31a0:	50 e0       	ldi	r21, 0x00	; 0
    31a2:	c7 01       	movw	r24, r14
    31a4:	b6 01       	movw	r22, r12
    31a6:	0e 94 20 19 	call	0x3240	; 0x3240 <__udivmodsi4>
    31aa:	30 93 fe 01 	sts	0x01FE, r19	; 0x8001fe <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    31ae:	20 93 fd 01 	sts	0x01FD, r18	; 0x8001fd <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    31b2:	02 c0       	rjmp	.+4      	; 0x31b8 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	c9 01       	movw	r24, r18
    31ba:	cd b7       	in	r28, 0x3d	; 61
    31bc:	de b7       	in	r29, 0x3e	; 62
    31be:	e2 e1       	ldi	r30, 0x12	; 18
    31c0:	0c 94 9f 19 	jmp	0x333e	; 0x333e <__epilogue_restores__>

000031c4 <_ZN16PololuQTRSensorsD1Ev>:
    31c4:	cf 93       	push	r28
    31c6:	df 93       	push	r29
    31c8:	ec 01       	movw	r28, r24
    31ca:	8a 81       	ldd	r24, Y+2	; 0x02
    31cc:	9b 81       	ldd	r25, Y+3	; 0x03
    31ce:	00 97       	sbiw	r24, 0x00	; 0
    31d0:	11 f0       	breq	.+4      	; 0x31d6 <_ZN16PololuQTRSensorsD1Ev+0x12>
    31d2:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <free>
    31d6:	8e 81       	ldd	r24, Y+6	; 0x06
    31d8:	9f 81       	ldd	r25, Y+7	; 0x07
    31da:	00 97       	sbiw	r24, 0x00	; 0
    31dc:	11 f0       	breq	.+4      	; 0x31e2 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    31de:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <free>
    31e2:	88 81       	ld	r24, Y
    31e4:	99 81       	ldd	r25, Y+1	; 0x01
    31e6:	00 97       	sbiw	r24, 0x00	; 0
    31e8:	11 f0       	breq	.+4      	; 0x31ee <_ZN16PololuQTRSensorsD1Ev+0x2a>
    31ea:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <free>
    31ee:	8c 81       	ldd	r24, Y+4	; 0x04
    31f0:	9d 81       	ldd	r25, Y+5	; 0x05
    31f2:	00 97       	sbiw	r24, 0x00	; 0
    31f4:	11 f0       	breq	.+4      	; 0x31fa <_ZN16PololuQTRSensorsD1Ev+0x36>
    31f6:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <free>
    31fa:	df 91       	pop	r29
    31fc:	cf 91       	pop	r28
    31fe:	08 95       	ret

00003200 <__udivmodqi4>:
    3200:	99 1b       	sub	r25, r25
    3202:	79 e0       	ldi	r23, 0x09	; 9
    3204:	04 c0       	rjmp	.+8      	; 0x320e <__udivmodqi4_ep>

00003206 <__udivmodqi4_loop>:
    3206:	99 1f       	adc	r25, r25
    3208:	96 17       	cp	r25, r22
    320a:	08 f0       	brcs	.+2      	; 0x320e <__udivmodqi4_ep>
    320c:	96 1b       	sub	r25, r22

0000320e <__udivmodqi4_ep>:
    320e:	88 1f       	adc	r24, r24
    3210:	7a 95       	dec	r23
    3212:	c9 f7       	brne	.-14     	; 0x3206 <__udivmodqi4_loop>
    3214:	80 95       	com	r24
    3216:	08 95       	ret

00003218 <__udivmodhi4>:
    3218:	aa 1b       	sub	r26, r26
    321a:	bb 1b       	sub	r27, r27
    321c:	51 e1       	ldi	r21, 0x11	; 17
    321e:	07 c0       	rjmp	.+14     	; 0x322e <__udivmodhi4_ep>

00003220 <__udivmodhi4_loop>:
    3220:	aa 1f       	adc	r26, r26
    3222:	bb 1f       	adc	r27, r27
    3224:	a6 17       	cp	r26, r22
    3226:	b7 07       	cpc	r27, r23
    3228:	10 f0       	brcs	.+4      	; 0x322e <__udivmodhi4_ep>
    322a:	a6 1b       	sub	r26, r22
    322c:	b7 0b       	sbc	r27, r23

0000322e <__udivmodhi4_ep>:
    322e:	88 1f       	adc	r24, r24
    3230:	99 1f       	adc	r25, r25
    3232:	5a 95       	dec	r21
    3234:	a9 f7       	brne	.-22     	; 0x3220 <__udivmodhi4_loop>
    3236:	80 95       	com	r24
    3238:	90 95       	com	r25
    323a:	bc 01       	movw	r22, r24
    323c:	cd 01       	movw	r24, r26
    323e:	08 95       	ret

00003240 <__udivmodsi4>:
    3240:	a1 e2       	ldi	r26, 0x21	; 33
    3242:	1a 2e       	mov	r1, r26
    3244:	aa 1b       	sub	r26, r26
    3246:	bb 1b       	sub	r27, r27
    3248:	fd 01       	movw	r30, r26
    324a:	0d c0       	rjmp	.+26     	; 0x3266 <__udivmodsi4_ep>

0000324c <__udivmodsi4_loop>:
    324c:	aa 1f       	adc	r26, r26
    324e:	bb 1f       	adc	r27, r27
    3250:	ee 1f       	adc	r30, r30
    3252:	ff 1f       	adc	r31, r31
    3254:	a2 17       	cp	r26, r18
    3256:	b3 07       	cpc	r27, r19
    3258:	e4 07       	cpc	r30, r20
    325a:	f5 07       	cpc	r31, r21
    325c:	20 f0       	brcs	.+8      	; 0x3266 <__udivmodsi4_ep>
    325e:	a2 1b       	sub	r26, r18
    3260:	b3 0b       	sbc	r27, r19
    3262:	e4 0b       	sbc	r30, r20
    3264:	f5 0b       	sbc	r31, r21

00003266 <__udivmodsi4_ep>:
    3266:	66 1f       	adc	r22, r22
    3268:	77 1f       	adc	r23, r23
    326a:	88 1f       	adc	r24, r24
    326c:	99 1f       	adc	r25, r25
    326e:	1a 94       	dec	r1
    3270:	69 f7       	brne	.-38     	; 0x324c <__udivmodsi4_loop>
    3272:	60 95       	com	r22
    3274:	70 95       	com	r23
    3276:	80 95       	com	r24
    3278:	90 95       	com	r25
    327a:	9b 01       	movw	r18, r22
    327c:	ac 01       	movw	r20, r24
    327e:	bd 01       	movw	r22, r26
    3280:	cf 01       	movw	r24, r30
    3282:	08 95       	ret

00003284 <__divmodsi4>:
    3284:	05 2e       	mov	r0, r21
    3286:	97 fb       	bst	r25, 7
    3288:	1e f4       	brtc	.+6      	; 0x3290 <__divmodsi4+0xc>
    328a:	00 94       	com	r0
    328c:	0e 94 59 19 	call	0x32b2	; 0x32b2 <__negsi2>
    3290:	57 fd       	sbrc	r21, 7
    3292:	07 d0       	rcall	.+14     	; 0x32a2 <__divmodsi4_neg2>
    3294:	0e 94 20 19 	call	0x3240	; 0x3240 <__udivmodsi4>
    3298:	07 fc       	sbrc	r0, 7
    329a:	03 d0       	rcall	.+6      	; 0x32a2 <__divmodsi4_neg2>
    329c:	4e f4       	brtc	.+18     	; 0x32b0 <__divmodsi4_exit>
    329e:	0c 94 59 19 	jmp	0x32b2	; 0x32b2 <__negsi2>

000032a2 <__divmodsi4_neg2>:
    32a2:	50 95       	com	r21
    32a4:	40 95       	com	r20
    32a6:	30 95       	com	r19
    32a8:	21 95       	neg	r18
    32aa:	3f 4f       	sbci	r19, 0xFF	; 255
    32ac:	4f 4f       	sbci	r20, 0xFF	; 255
    32ae:	5f 4f       	sbci	r21, 0xFF	; 255

000032b0 <__divmodsi4_exit>:
    32b0:	08 95       	ret

000032b2 <__negsi2>:
    32b2:	90 95       	com	r25
    32b4:	80 95       	com	r24
    32b6:	70 95       	com	r23
    32b8:	61 95       	neg	r22
    32ba:	7f 4f       	sbci	r23, 0xFF	; 255
    32bc:	8f 4f       	sbci	r24, 0xFF	; 255
    32be:	9f 4f       	sbci	r25, 0xFF	; 255
    32c0:	08 95       	ret

000032c2 <__umulhisi3>:
    32c2:	a2 9f       	mul	r26, r18
    32c4:	b0 01       	movw	r22, r0
    32c6:	b3 9f       	mul	r27, r19
    32c8:	c0 01       	movw	r24, r0
    32ca:	a3 9f       	mul	r26, r19
    32cc:	70 0d       	add	r23, r0
    32ce:	81 1d       	adc	r24, r1
    32d0:	11 24       	eor	r1, r1
    32d2:	91 1d       	adc	r25, r1
    32d4:	b2 9f       	mul	r27, r18
    32d6:	70 0d       	add	r23, r0
    32d8:	81 1d       	adc	r24, r1
    32da:	11 24       	eor	r1, r1
    32dc:	91 1d       	adc	r25, r1
    32de:	08 95       	ret

000032e0 <__muluhisi3>:
    32e0:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__umulhisi3>
    32e4:	a5 9f       	mul	r26, r21
    32e6:	90 0d       	add	r25, r0
    32e8:	b4 9f       	mul	r27, r20
    32ea:	90 0d       	add	r25, r0
    32ec:	a4 9f       	mul	r26, r20
    32ee:	80 0d       	add	r24, r0
    32f0:	91 1d       	adc	r25, r1
    32f2:	11 24       	eor	r1, r1
    32f4:	08 95       	ret

000032f6 <__mulshisi3>:
    32f6:	b7 ff       	sbrs	r27, 7
    32f8:	0c 94 70 19 	jmp	0x32e0	; 0x32e0 <__muluhisi3>

000032fc <__mulohisi3>:
    32fc:	0e 94 70 19 	call	0x32e0	; 0x32e0 <__muluhisi3>
    3300:	82 1b       	sub	r24, r18
    3302:	93 0b       	sbc	r25, r19
    3304:	08 95       	ret

00003306 <__prologue_saves__>:
    3306:	2f 92       	push	r2
    3308:	3f 92       	push	r3
    330a:	4f 92       	push	r4
    330c:	5f 92       	push	r5
    330e:	6f 92       	push	r6
    3310:	7f 92       	push	r7
    3312:	8f 92       	push	r8
    3314:	9f 92       	push	r9
    3316:	af 92       	push	r10
    3318:	bf 92       	push	r11
    331a:	cf 92       	push	r12
    331c:	df 92       	push	r13
    331e:	ef 92       	push	r14
    3320:	ff 92       	push	r15
    3322:	0f 93       	push	r16
    3324:	1f 93       	push	r17
    3326:	cf 93       	push	r28
    3328:	df 93       	push	r29
    332a:	cd b7       	in	r28, 0x3d	; 61
    332c:	de b7       	in	r29, 0x3e	; 62
    332e:	ca 1b       	sub	r28, r26
    3330:	db 0b       	sbc	r29, r27
    3332:	0f b6       	in	r0, 0x3f	; 63
    3334:	f8 94       	cli
    3336:	de bf       	out	0x3e, r29	; 62
    3338:	0f be       	out	0x3f, r0	; 63
    333a:	cd bf       	out	0x3d, r28	; 61
    333c:	09 94       	ijmp

0000333e <__epilogue_restores__>:
    333e:	2a 88       	ldd	r2, Y+18	; 0x12
    3340:	39 88       	ldd	r3, Y+17	; 0x11
    3342:	48 88       	ldd	r4, Y+16	; 0x10
    3344:	5f 84       	ldd	r5, Y+15	; 0x0f
    3346:	6e 84       	ldd	r6, Y+14	; 0x0e
    3348:	7d 84       	ldd	r7, Y+13	; 0x0d
    334a:	8c 84       	ldd	r8, Y+12	; 0x0c
    334c:	9b 84       	ldd	r9, Y+11	; 0x0b
    334e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3350:	b9 84       	ldd	r11, Y+9	; 0x09
    3352:	c8 84       	ldd	r12, Y+8	; 0x08
    3354:	df 80       	ldd	r13, Y+7	; 0x07
    3356:	ee 80       	ldd	r14, Y+6	; 0x06
    3358:	fd 80       	ldd	r15, Y+5	; 0x05
    335a:	0c 81       	ldd	r16, Y+4	; 0x04
    335c:	1b 81       	ldd	r17, Y+3	; 0x03
    335e:	aa 81       	ldd	r26, Y+2	; 0x02
    3360:	b9 81       	ldd	r27, Y+1	; 0x01
    3362:	ce 0f       	add	r28, r30
    3364:	d1 1d       	adc	r29, r1
    3366:	0f b6       	in	r0, 0x3f	; 63
    3368:	f8 94       	cli
    336a:	de bf       	out	0x3e, r29	; 62
    336c:	0f be       	out	0x3f, r0	; 63
    336e:	cd bf       	out	0x3d, r28	; 61
    3370:	ed 01       	movw	r28, r26
    3372:	08 95       	ret

00003374 <__tablejump2__>:
    3374:	ee 0f       	add	r30, r30
    3376:	ff 1f       	adc	r31, r31
    3378:	05 90       	lpm	r0, Z+
    337a:	f4 91       	lpm	r31, Z
    337c:	e0 2d       	mov	r30, r0
    337e:	09 94       	ijmp

00003380 <malloc>:
    3380:	0f 93       	push	r16
    3382:	1f 93       	push	r17
    3384:	cf 93       	push	r28
    3386:	df 93       	push	r29
    3388:	82 30       	cpi	r24, 0x02	; 2
    338a:	91 05       	cpc	r25, r1
    338c:	10 f4       	brcc	.+4      	; 0x3392 <malloc+0x12>
    338e:	82 e0       	ldi	r24, 0x02	; 2
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <__flp>
    3396:	f0 91 7b 02 	lds	r31, 0x027B	; 0x80027b <__flp+0x1>
    339a:	20 e0       	ldi	r18, 0x00	; 0
    339c:	30 e0       	ldi	r19, 0x00	; 0
    339e:	a0 e0       	ldi	r26, 0x00	; 0
    33a0:	b0 e0       	ldi	r27, 0x00	; 0
    33a2:	30 97       	sbiw	r30, 0x00	; 0
    33a4:	19 f1       	breq	.+70     	; 0x33ec <malloc+0x6c>
    33a6:	40 81       	ld	r20, Z
    33a8:	51 81       	ldd	r21, Z+1	; 0x01
    33aa:	02 81       	ldd	r16, Z+2	; 0x02
    33ac:	13 81       	ldd	r17, Z+3	; 0x03
    33ae:	48 17       	cp	r20, r24
    33b0:	59 07       	cpc	r21, r25
    33b2:	c8 f0       	brcs	.+50     	; 0x33e6 <malloc+0x66>
    33b4:	84 17       	cp	r24, r20
    33b6:	95 07       	cpc	r25, r21
    33b8:	69 f4       	brne	.+26     	; 0x33d4 <malloc+0x54>
    33ba:	10 97       	sbiw	r26, 0x00	; 0
    33bc:	31 f0       	breq	.+12     	; 0x33ca <malloc+0x4a>
    33be:	12 96       	adiw	r26, 0x02	; 2
    33c0:	0c 93       	st	X, r16
    33c2:	12 97       	sbiw	r26, 0x02	; 2
    33c4:	13 96       	adiw	r26, 0x03	; 3
    33c6:	1c 93       	st	X, r17
    33c8:	27 c0       	rjmp	.+78     	; 0x3418 <malloc+0x98>
    33ca:	00 93 7a 02 	sts	0x027A, r16	; 0x80027a <__flp>
    33ce:	10 93 7b 02 	sts	0x027B, r17	; 0x80027b <__flp+0x1>
    33d2:	22 c0       	rjmp	.+68     	; 0x3418 <malloc+0x98>
    33d4:	21 15       	cp	r18, r1
    33d6:	31 05       	cpc	r19, r1
    33d8:	19 f0       	breq	.+6      	; 0x33e0 <malloc+0x60>
    33da:	42 17       	cp	r20, r18
    33dc:	53 07       	cpc	r21, r19
    33de:	18 f4       	brcc	.+6      	; 0x33e6 <malloc+0x66>
    33e0:	9a 01       	movw	r18, r20
    33e2:	bd 01       	movw	r22, r26
    33e4:	ef 01       	movw	r28, r30
    33e6:	df 01       	movw	r26, r30
    33e8:	f8 01       	movw	r30, r16
    33ea:	db cf       	rjmp	.-74     	; 0x33a2 <malloc+0x22>
    33ec:	21 15       	cp	r18, r1
    33ee:	31 05       	cpc	r19, r1
    33f0:	f9 f0       	breq	.+62     	; 0x3430 <malloc+0xb0>
    33f2:	28 1b       	sub	r18, r24
    33f4:	39 0b       	sbc	r19, r25
    33f6:	24 30       	cpi	r18, 0x04	; 4
    33f8:	31 05       	cpc	r19, r1
    33fa:	80 f4       	brcc	.+32     	; 0x341c <malloc+0x9c>
    33fc:	8a 81       	ldd	r24, Y+2	; 0x02
    33fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3400:	61 15       	cp	r22, r1
    3402:	71 05       	cpc	r23, r1
    3404:	21 f0       	breq	.+8      	; 0x340e <malloc+0x8e>
    3406:	fb 01       	movw	r30, r22
    3408:	93 83       	std	Z+3, r25	; 0x03
    340a:	82 83       	std	Z+2, r24	; 0x02
    340c:	04 c0       	rjmp	.+8      	; 0x3416 <malloc+0x96>
    340e:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <__flp+0x1>
    3412:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <__flp>
    3416:	fe 01       	movw	r30, r28
    3418:	32 96       	adiw	r30, 0x02	; 2
    341a:	44 c0       	rjmp	.+136    	; 0x34a4 <malloc+0x124>
    341c:	fe 01       	movw	r30, r28
    341e:	e2 0f       	add	r30, r18
    3420:	f3 1f       	adc	r31, r19
    3422:	81 93       	st	Z+, r24
    3424:	91 93       	st	Z+, r25
    3426:	22 50       	subi	r18, 0x02	; 2
    3428:	31 09       	sbc	r19, r1
    342a:	39 83       	std	Y+1, r19	; 0x01
    342c:	28 83       	st	Y, r18
    342e:	3a c0       	rjmp	.+116    	; 0x34a4 <malloc+0x124>
    3430:	20 91 78 02 	lds	r18, 0x0278	; 0x800278 <__brkval>
    3434:	30 91 79 02 	lds	r19, 0x0279	; 0x800279 <__brkval+0x1>
    3438:	23 2b       	or	r18, r19
    343a:	41 f4       	brne	.+16     	; 0x344c <malloc+0xcc>
    343c:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__malloc_heap_start>
    3440:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__malloc_heap_start+0x1>
    3444:	30 93 79 02 	sts	0x0279, r19	; 0x800279 <__brkval+0x1>
    3448:	20 93 78 02 	sts	0x0278, r18	; 0x800278 <__brkval>
    344c:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__malloc_heap_end>
    3450:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__malloc_heap_end+0x1>
    3454:	21 15       	cp	r18, r1
    3456:	31 05       	cpc	r19, r1
    3458:	41 f4       	brne	.+16     	; 0x346a <malloc+0xea>
    345a:	2d b7       	in	r18, 0x3d	; 61
    345c:	3e b7       	in	r19, 0x3e	; 62
    345e:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__malloc_margin>
    3462:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__malloc_margin+0x1>
    3466:	24 1b       	sub	r18, r20
    3468:	35 0b       	sbc	r19, r21
    346a:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <__brkval>
    346e:	f0 91 79 02 	lds	r31, 0x0279	; 0x800279 <__brkval+0x1>
    3472:	e2 17       	cp	r30, r18
    3474:	f3 07       	cpc	r31, r19
    3476:	a0 f4       	brcc	.+40     	; 0x34a0 <malloc+0x120>
    3478:	2e 1b       	sub	r18, r30
    347a:	3f 0b       	sbc	r19, r31
    347c:	28 17       	cp	r18, r24
    347e:	39 07       	cpc	r19, r25
    3480:	78 f0       	brcs	.+30     	; 0x34a0 <malloc+0x120>
    3482:	ac 01       	movw	r20, r24
    3484:	4e 5f       	subi	r20, 0xFE	; 254
    3486:	5f 4f       	sbci	r21, 0xFF	; 255
    3488:	24 17       	cp	r18, r20
    348a:	35 07       	cpc	r19, r21
    348c:	48 f0       	brcs	.+18     	; 0x34a0 <malloc+0x120>
    348e:	4e 0f       	add	r20, r30
    3490:	5f 1f       	adc	r21, r31
    3492:	50 93 79 02 	sts	0x0279, r21	; 0x800279 <__brkval+0x1>
    3496:	40 93 78 02 	sts	0x0278, r20	; 0x800278 <__brkval>
    349a:	81 93       	st	Z+, r24
    349c:	91 93       	st	Z+, r25
    349e:	02 c0       	rjmp	.+4      	; 0x34a4 <malloc+0x124>
    34a0:	e0 e0       	ldi	r30, 0x00	; 0
    34a2:	f0 e0       	ldi	r31, 0x00	; 0
    34a4:	cf 01       	movw	r24, r30
    34a6:	df 91       	pop	r29
    34a8:	cf 91       	pop	r28
    34aa:	1f 91       	pop	r17
    34ac:	0f 91       	pop	r16
    34ae:	08 95       	ret

000034b0 <free>:
    34b0:	cf 93       	push	r28
    34b2:	df 93       	push	r29
    34b4:	00 97       	sbiw	r24, 0x00	; 0
    34b6:	09 f4       	brne	.+2      	; 0x34ba <free+0xa>
    34b8:	81 c0       	rjmp	.+258    	; 0x35bc <free+0x10c>
    34ba:	fc 01       	movw	r30, r24
    34bc:	32 97       	sbiw	r30, 0x02	; 2
    34be:	13 82       	std	Z+3, r1	; 0x03
    34c0:	12 82       	std	Z+2, r1	; 0x02
    34c2:	a0 91 7a 02 	lds	r26, 0x027A	; 0x80027a <__flp>
    34c6:	b0 91 7b 02 	lds	r27, 0x027B	; 0x80027b <__flp+0x1>
    34ca:	10 97       	sbiw	r26, 0x00	; 0
    34cc:	81 f4       	brne	.+32     	; 0x34ee <free+0x3e>
    34ce:	20 81       	ld	r18, Z
    34d0:	31 81       	ldd	r19, Z+1	; 0x01
    34d2:	82 0f       	add	r24, r18
    34d4:	93 1f       	adc	r25, r19
    34d6:	20 91 78 02 	lds	r18, 0x0278	; 0x800278 <__brkval>
    34da:	30 91 79 02 	lds	r19, 0x0279	; 0x800279 <__brkval+0x1>
    34de:	28 17       	cp	r18, r24
    34e0:	39 07       	cpc	r19, r25
    34e2:	51 f5       	brne	.+84     	; 0x3538 <free+0x88>
    34e4:	f0 93 79 02 	sts	0x0279, r31	; 0x800279 <__brkval+0x1>
    34e8:	e0 93 78 02 	sts	0x0278, r30	; 0x800278 <__brkval>
    34ec:	67 c0       	rjmp	.+206    	; 0x35bc <free+0x10c>
    34ee:	ed 01       	movw	r28, r26
    34f0:	20 e0       	ldi	r18, 0x00	; 0
    34f2:	30 e0       	ldi	r19, 0x00	; 0
    34f4:	ce 17       	cp	r28, r30
    34f6:	df 07       	cpc	r29, r31
    34f8:	40 f4       	brcc	.+16     	; 0x350a <free+0x5a>
    34fa:	4a 81       	ldd	r20, Y+2	; 0x02
    34fc:	5b 81       	ldd	r21, Y+3	; 0x03
    34fe:	9e 01       	movw	r18, r28
    3500:	41 15       	cp	r20, r1
    3502:	51 05       	cpc	r21, r1
    3504:	f1 f0       	breq	.+60     	; 0x3542 <free+0x92>
    3506:	ea 01       	movw	r28, r20
    3508:	f5 cf       	rjmp	.-22     	; 0x34f4 <free+0x44>
    350a:	d3 83       	std	Z+3, r29	; 0x03
    350c:	c2 83       	std	Z+2, r28	; 0x02
    350e:	40 81       	ld	r20, Z
    3510:	51 81       	ldd	r21, Z+1	; 0x01
    3512:	84 0f       	add	r24, r20
    3514:	95 1f       	adc	r25, r21
    3516:	c8 17       	cp	r28, r24
    3518:	d9 07       	cpc	r29, r25
    351a:	59 f4       	brne	.+22     	; 0x3532 <free+0x82>
    351c:	88 81       	ld	r24, Y
    351e:	99 81       	ldd	r25, Y+1	; 0x01
    3520:	84 0f       	add	r24, r20
    3522:	95 1f       	adc	r25, r21
    3524:	02 96       	adiw	r24, 0x02	; 2
    3526:	91 83       	std	Z+1, r25	; 0x01
    3528:	80 83       	st	Z, r24
    352a:	8a 81       	ldd	r24, Y+2	; 0x02
    352c:	9b 81       	ldd	r25, Y+3	; 0x03
    352e:	93 83       	std	Z+3, r25	; 0x03
    3530:	82 83       	std	Z+2, r24	; 0x02
    3532:	21 15       	cp	r18, r1
    3534:	31 05       	cpc	r19, r1
    3536:	29 f4       	brne	.+10     	; 0x3542 <free+0x92>
    3538:	f0 93 7b 02 	sts	0x027B, r31	; 0x80027b <__flp+0x1>
    353c:	e0 93 7a 02 	sts	0x027A, r30	; 0x80027a <__flp>
    3540:	3d c0       	rjmp	.+122    	; 0x35bc <free+0x10c>
    3542:	e9 01       	movw	r28, r18
    3544:	fb 83       	std	Y+3, r31	; 0x03
    3546:	ea 83       	std	Y+2, r30	; 0x02
    3548:	49 91       	ld	r20, Y+
    354a:	59 91       	ld	r21, Y+
    354c:	c4 0f       	add	r28, r20
    354e:	d5 1f       	adc	r29, r21
    3550:	ec 17       	cp	r30, r28
    3552:	fd 07       	cpc	r31, r29
    3554:	61 f4       	brne	.+24     	; 0x356e <free+0xbe>
    3556:	80 81       	ld	r24, Z
    3558:	91 81       	ldd	r25, Z+1	; 0x01
    355a:	84 0f       	add	r24, r20
    355c:	95 1f       	adc	r25, r21
    355e:	02 96       	adiw	r24, 0x02	; 2
    3560:	e9 01       	movw	r28, r18
    3562:	99 83       	std	Y+1, r25	; 0x01
    3564:	88 83       	st	Y, r24
    3566:	82 81       	ldd	r24, Z+2	; 0x02
    3568:	93 81       	ldd	r25, Z+3	; 0x03
    356a:	9b 83       	std	Y+3, r25	; 0x03
    356c:	8a 83       	std	Y+2, r24	; 0x02
    356e:	e0 e0       	ldi	r30, 0x00	; 0
    3570:	f0 e0       	ldi	r31, 0x00	; 0
    3572:	12 96       	adiw	r26, 0x02	; 2
    3574:	8d 91       	ld	r24, X+
    3576:	9c 91       	ld	r25, X
    3578:	13 97       	sbiw	r26, 0x03	; 3
    357a:	00 97       	sbiw	r24, 0x00	; 0
    357c:	19 f0       	breq	.+6      	; 0x3584 <free+0xd4>
    357e:	fd 01       	movw	r30, r26
    3580:	dc 01       	movw	r26, r24
    3582:	f7 cf       	rjmp	.-18     	; 0x3572 <free+0xc2>
    3584:	8d 91       	ld	r24, X+
    3586:	9c 91       	ld	r25, X
    3588:	11 97       	sbiw	r26, 0x01	; 1
    358a:	9d 01       	movw	r18, r26
    358c:	2e 5f       	subi	r18, 0xFE	; 254
    358e:	3f 4f       	sbci	r19, 0xFF	; 255
    3590:	82 0f       	add	r24, r18
    3592:	93 1f       	adc	r25, r19
    3594:	20 91 78 02 	lds	r18, 0x0278	; 0x800278 <__brkval>
    3598:	30 91 79 02 	lds	r19, 0x0279	; 0x800279 <__brkval+0x1>
    359c:	28 17       	cp	r18, r24
    359e:	39 07       	cpc	r19, r25
    35a0:	69 f4       	brne	.+26     	; 0x35bc <free+0x10c>
    35a2:	30 97       	sbiw	r30, 0x00	; 0
    35a4:	29 f4       	brne	.+10     	; 0x35b0 <free+0x100>
    35a6:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <__flp+0x1>
    35aa:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <__flp>
    35ae:	02 c0       	rjmp	.+4      	; 0x35b4 <free+0x104>
    35b0:	13 82       	std	Z+3, r1	; 0x03
    35b2:	12 82       	std	Z+2, r1	; 0x02
    35b4:	b0 93 79 02 	sts	0x0279, r27	; 0x800279 <__brkval+0x1>
    35b8:	a0 93 78 02 	sts	0x0278, r26	; 0x800278 <__brkval>
    35bc:	df 91       	pop	r29
    35be:	cf 91       	pop	r28
    35c0:	08 95       	ret

000035c2 <__do_global_dtors>:
    35c2:	10 e0       	ldi	r17, 0x00	; 0
    35c4:	c8 e4       	ldi	r28, 0x48	; 72
    35c6:	d0 e0       	ldi	r29, 0x00	; 0
    35c8:	04 c0       	rjmp	.+8      	; 0x35d2 <__do_global_dtors+0x10>
    35ca:	fe 01       	movw	r30, r28
    35cc:	0e 94 ba 19 	call	0x3374	; 0x3374 <__tablejump2__>
    35d0:	21 96       	adiw	r28, 0x01	; 1
    35d2:	c9 34       	cpi	r28, 0x49	; 73
    35d4:	d1 07       	cpc	r29, r17
    35d6:	c9 f7       	brne	.-14     	; 0x35ca <__do_global_dtors+0x8>
    35d8:	f8 94       	cli

000035da <__stop_program>:
    35da:	ff cf       	rjmp	.-2      	; 0x35da <__stop_program>
