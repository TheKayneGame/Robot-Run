
RobotRunGrid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00002fb8  0000304c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002fb8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d2  0080013a  0080013a  00003086  2**0
                  ALLOC
  3 .stab         00004ce0  00000000  00000000  00003088  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008ce2  00000000  00000000  00007d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  00010a4a  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00010a8c  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000000f8  00000000  00000000  00010acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000024df  00000000  00000000  00010bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000bf3  00000000  00000000  000130a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001709  00000000  00000000  00013c96  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000037c  00000000  00000000  000153a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000085c  00000000  00000000  0001571c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000158d  00000000  00000000  00015f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000d0  00000000  00000000  00017505  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__dtors_end>
       4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
       8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
       c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      10:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      14:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      18:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      1c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      20:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      24:	0c 94 3b 12 	jmp	0x2476	; 0x2476 <__vector_9>
      28:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      2c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      30:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      34:	0c 94 1f 10 	jmp	0x203e	; 0x203e <__vector_13>
      38:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      3c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      40:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      44:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      48:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      4c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      50:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      54:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      58:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      5c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      60:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      68:	fa 01       	movw	r30, r20
      6a:	06 02       	muls	r16, r22
      6c:	12 02       	muls	r17, r18
      6e:	1e 02       	muls	r17, r30
      70:	2f 02       	muls	r18, r31
      72:	40 02       	muls	r20, r16
      74:	4c 02       	muls	r20, r28
      76:	5a 02       	muls	r21, r26
      78:	8f 02       	muls	r24, r31
      7a:	9e 02       	muls	r25, r30
      7c:	ad 02       	muls	r26, r29
      7e:	d1 02       	muls	r29, r17
      80:	f5 02       	muls	r31, r21
      82:	19 03       	fmul	r17, r17
      84:	51 03       	mulsu	r21, r17
      86:	42 03       	mulsu	r20, r18
      88:	05 a8       	ldd	r0, Z+53	; 0x35
      8a:	4c cd       	rjmp	.-1384   	; 0xfffffb24 <__eeprom_end+0xff7efb24>
      8c:	b2 d4       	rcall	.+2404   	; 0x9f2 <motorControl+0x24>
      8e:	4e b9       	out	0x0e, r20	; 14
      90:	38 36       	cpi	r19, 0x68	; 104
      92:	a9 02       	muls	r26, r25
      94:	0c 50       	subi	r16, 0x0C	; 12
      96:	b9 91       	ld	r27, Y+
      98:	86 88       	ldd	r8, Z+22	; 0x16
      9a:	08 3c       	cpi	r16, 0xC8	; 200
      9c:	a6 aa       	std	Z+54, r10	; 0x36
      9e:	aa 2a       	or	r10, r26
      a0:	be 00       	.word	0x00be	; ????
      a2:	00 00       	nop
      a4:	80 3f       	cpi	r24, 0xF0	; 240

000000a6 <__trampolines_end>:
      a6:	3e 67       	ori	r19, 0x7E	; 126
      a8:	33 32       	cpi	r19, 0x23	; 35
      aa:	3e 3e       	cpi	r19, 0xEE	; 238
      ac:	63 33       	cpi	r22, 0x33	; 51
      ae:	32 00       	.word	0x0032	; ????

000000b0 <__c.2343>:
      b0:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

000000ba <__ctors_end>:
      ba:	c6 12       	cpse	r12, r22

000000bc <__dtors_end>:
      bc:	11 24       	eor	r1, r1
      be:	1f be       	out	0x3f, r1	; 63
      c0:	cf ef       	ldi	r28, 0xFF	; 255
      c2:	d8 e0       	ldi	r29, 0x08	; 8
      c4:	de bf       	out	0x3e, r29	; 62
      c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_copy_data>:
      c8:	11 e0       	ldi	r17, 0x01	; 1
      ca:	a0 e0       	ldi	r26, 0x00	; 0
      cc:	b1 e0       	ldi	r27, 0x01	; 1
      ce:	e8 eb       	ldi	r30, 0xB8	; 184
      d0:	ff e2       	ldi	r31, 0x2F	; 47
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x10>
      d4:	05 90       	lpm	r0, Z+
      d6:	0d 92       	st	X+, r0
      d8:	aa 33       	cpi	r26, 0x3A	; 58
      da:	b1 07       	cpc	r27, r17
      dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0xc>

000000de <__do_clear_bss>:
      de:	22 e0       	ldi	r18, 0x02	; 2
      e0:	aa e3       	ldi	r26, 0x3A	; 58
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	01 c0       	rjmp	.+2      	; 0xe8 <.do_clear_bss_start>

000000e6 <.do_clear_bss_loop>:
      e6:	1d 92       	st	X+, r1

000000e8 <.do_clear_bss_start>:
      e8:	ac 30       	cpi	r26, 0x0C	; 12
      ea:	b2 07       	cpc	r27, r18
      ec:	e1 f7       	brne	.-8      	; 0xe6 <.do_clear_bss_loop>
      ee:	0e 94 97 04 	call	0x92e	; 0x92e <main>
      f2:	0c 94 cf 17 	jmp	0x2f9e	; 0x2f9e <__do_global_dtors>

000000f6 <__bad_interrupt>:
      f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fa <swapOne>:
	temp = *secondYValue;                                                                               //swap Y-coordinates
	*secondYValue = *firstYValue;
	*firstYValue = temp;
}

void swapOne(float *firstValue, float *secondValue) {
      fa:	cf 92       	push	r12
      fc:	df 92       	push	r13
      fe:	ef 92       	push	r14
     100:	ff 92       	push	r15
     102:	0f 93       	push	r16
     104:	1f 93       	push	r17
	float temp;

	temp = *secondValue;
     106:	fb 01       	movw	r30, r22
     108:	00 81       	ld	r16, Z
     10a:	11 81       	ldd	r17, Z+1	; 0x01
     10c:	22 81       	ldd	r18, Z+2	; 0x02
     10e:	33 81       	ldd	r19, Z+3	; 0x03
	*secondValue = *firstValue;
     110:	fc 01       	movw	r30, r24
     112:	c0 80       	ld	r12, Z
     114:	d1 80       	ldd	r13, Z+1	; 0x01
     116:	e2 80       	ldd	r14, Z+2	; 0x02
     118:	f3 80       	ldd	r15, Z+3	; 0x03
     11a:	fb 01       	movw	r30, r22
     11c:	c0 82       	st	Z, r12
     11e:	d1 82       	std	Z+1, r13	; 0x01
     120:	e2 82       	std	Z+2, r14	; 0x02
     122:	f3 82       	std	Z+3, r15	; 0x03
	*firstValue = temp;
     124:	fc 01       	movw	r30, r24
     126:	00 83       	st	Z, r16
     128:	11 83       	std	Z+1, r17	; 0x01
     12a:	22 83       	std	Z+2, r18	; 0x02
     12c:	33 83       	std	Z+3, r19	; 0x03
}
     12e:	1f 91       	pop	r17
     130:	0f 91       	pop	r16
     132:	ff 90       	pop	r15
     134:	ef 90       	pop	r14
     136:	df 90       	pop	r13
     138:	cf 90       	pop	r12
     13a:	08 95       	ret

0000013c <sortOrder>:

void sortOrder(int X[], int Y[]) {
     13c:	2f 92       	push	r2
     13e:	3f 92       	push	r3
     140:	4f 92       	push	r4
     142:	5f 92       	push	r5
     144:	6f 92       	push	r6
     146:	7f 92       	push	r7
     148:	8f 92       	push	r8
     14a:	9f 92       	push	r9
     14c:	af 92       	push	r10
     14e:	bf 92       	push	r11
     150:	cf 92       	push	r12
     152:	df 92       	push	r13
     154:	ef 92       	push	r14
     156:	ff 92       	push	r15
     158:	0f 93       	push	r16
     15a:	1f 93       	push	r17
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
     160:	cd b7       	in	r28, 0x3d	; 61
     162:	de b7       	in	r29, 0x3e	; 62
     164:	a5 97       	sbiw	r28, 0x25	; 37
     166:	0f b6       	in	r0, 0x3f	; 63
     168:	f8 94       	cli
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	0f be       	out	0x3f, r0	; 63
     16e:	cd bf       	out	0x3d, r28	; 61
     170:	9b a3       	std	Y+35, r25	; 0x23
     172:	8a a3       	std	Y+34, r24	; 0x22
     174:	6c a3       	std	Y+36, r22	; 0x24
     176:	7d a3       	std	Y+37, r23	; 0x25
     178:	06 96       	adiw	r24, 0x06	; 6
     17a:	98 a3       	std	Y+32, r25	; 0x20
     17c:	8f 8f       	std	Y+31, r24	; 0x1f
     17e:	b6 c0       	rjmp	.+364    	; 0x2ec <sortOrder+0x1b0>
     180:	7e 8e       	std	Y+30, r7	; 0x1e
     182:	6d 8e       	std	Y+29, r6	; 0x1d

	while (check != 1) {
		orderCorrect = 1;

		for (int i = 0; i < (sizeOfOrder - 1); i++) {
			Distance[i] = sqrt((pow(X[i], 2)) + (pow(Y[i], 2)));      //Pythagoras
     184:	f3 01       	movw	r30, r6
     186:	01 90       	ld	r0, Z+
     188:	f0 81       	ld	r31, Z
     18a:	e0 2d       	mov	r30, r0
     18c:	fa 8f       	std	Y+26, r31	; 0x1a
     18e:	e9 8f       	std	Y+25, r30	; 0x19
     190:	bf 01       	movw	r22, r30
     192:	ff 0f       	add	r31, r31
     194:	88 0b       	sbc	r24, r24
     196:	99 0b       	sbc	r25, r25
     198:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__floatsisf>
     19c:	6b 01       	movw	r12, r22
     19e:	7c 01       	movw	r14, r24
     1a0:	3c 8e       	std	Y+28, r3	; 0x1c
     1a2:	2b 8e       	std	Y+27, r2	; 0x1b
     1a4:	f1 01       	movw	r30, r2
     1a6:	00 81       	ld	r16, Z
     1a8:	11 81       	ldd	r17, Z+1	; 0x01
     1aa:	b8 01       	movw	r22, r16
     1ac:	01 2e       	mov	r0, r17
     1ae:	00 0c       	add	r0, r0
     1b0:	88 0b       	sbc	r24, r24
     1b2:	99 0b       	sbc	r25, r25
     1b4:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__floatsisf>
     1b8:	4b 01       	movw	r8, r22
     1ba:	5c 01       	movw	r10, r24
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3>
     1c4:	69 8b       	std	Y+17, r22	; 0x11
     1c6:	7a 8b       	std	Y+18, r23	; 0x12
     1c8:	8b 8b       	std	Y+19, r24	; 0x13
     1ca:	9c 8b       	std	Y+20, r25	; 0x14
     1cc:	a5 01       	movw	r20, r10
     1ce:	94 01       	movw	r18, r8
     1d0:	c5 01       	movw	r24, r10
     1d2:	b4 01       	movw	r22, r8
     1d4:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3>
     1d8:	4b 01       	movw	r8, r22
     1da:	5c 01       	movw	r10, r24
     1dc:	a7 01       	movw	r20, r14
     1de:	96 01       	movw	r18, r12
     1e0:	c7 01       	movw	r24, r14
     1e2:	b6 01       	movw	r22, r12
     1e4:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3>
     1e8:	9b 01       	movw	r18, r22
     1ea:	ac 01       	movw	r20, r24
     1ec:	c5 01       	movw	r24, r10
     1ee:	b4 01       	movw	r22, r8
     1f0:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__addsf3>
     1f4:	0e 94 99 0c 	call	0x1932	; 0x1932 <sqrt>
     1f8:	6b 01       	movw	r12, r22
     1fa:	7c 01       	movw	r14, r24
     1fc:	f2 01       	movw	r30, r4
     1fe:	61 93       	st	Z+, r22
     200:	71 93       	st	Z+, r23
     202:	81 93       	st	Z+, r24
     204:	91 93       	st	Z+, r25
     206:	2f 01       	movw	r4, r30
     208:	e9 8b       	std	Y+17, r30	; 0x11
     20a:	59 a2       	std	Y+33, r5	; 0x21
			firstDistanceValue =  Distance[i];
			secondDistanceValue =  Distance[i + 1];
     20c:	80 80       	ld	r8, Z
     20e:	91 80       	ldd	r9, Z+1	; 0x01
     210:	a2 80       	ldd	r10, Z+2	; 0x02
     212:	b3 80       	ldd	r11, Z+3	; 0x03

			if ( Distance[i] >  Distance[i + 1]) {
     214:	a5 01       	movw	r20, r10
     216:	94 01       	movw	r18, r8
     218:	0e 94 19 0c 	call	0x1832	; 0x1832 <__gesf2>
     21c:	18 16       	cp	r1, r24
     21e:	d4 f4       	brge	.+52     	; 0x254 <sortOrder+0x118>
				swapOne(& Distance[i], & Distance[i + 1]);
     220:	b2 01       	movw	r22, r4
     222:	8d 89       	ldd	r24, Y+21	; 0x15
     224:	9e 89       	ldd	r25, Y+22	; 0x16
     226:	0e 94 7d 00 	call	0xfa	; 0xfa <swapOne>
#include <avr/pgmspace.h>

void swapTwo( int *firstXValue, int *secondXValue, int *firstYValue, int *secondYValue){
	int temp;

	temp = *secondXValue;                                                                               //swap X-coordinates
     22a:	f3 01       	movw	r30, r6
     22c:	82 81       	ldd	r24, Z+2	; 0x02
     22e:	93 81       	ldd	r25, Z+3	; 0x03
	*secondXValue = *firstXValue;
     230:	20 81       	ld	r18, Z
     232:	31 81       	ldd	r19, Z+1	; 0x01
     234:	33 83       	std	Z+3, r19	; 0x03
     236:	22 83       	std	Z+2, r18	; 0x02
	*firstXValue = temp;
     238:	91 83       	std	Z+1, r25	; 0x01
     23a:	80 83       	st	Z, r24

	temp = *secondYValue;                                                                               //swap Y-coordinates
     23c:	f1 01       	movw	r30, r2
     23e:	82 81       	ldd	r24, Z+2	; 0x02
     240:	93 81       	ldd	r25, Z+3	; 0x03
	*secondYValue = *firstYValue;
     242:	20 81       	ld	r18, Z
     244:	31 81       	ldd	r19, Z+1	; 0x01
     246:	33 83       	std	Z+3, r19	; 0x03
     248:	22 83       	std	Z+2, r18	; 0x02
	*firstYValue = temp;
     24a:	91 83       	std	Z+1, r25	; 0x01
     24c:	80 83       	st	Z, r24
			secondDistanceValue =  Distance[i + 1];

			if ( Distance[i] >  Distance[i + 1]) {
				swapOne(& Distance[i], & Distance[i + 1]);
				swapTwo(&X[i], &X[i + 1], &Y[i], &Y[i + 1]);
				orderCorrect = 0;
     24e:	1f 8a       	std	Y+23, r1	; 0x17
     250:	18 8e       	std	Y+24, r1	; 0x18
     252:	36 c0       	rjmp	.+108    	; 0x2c0 <sortOrder+0x184>
				} else if ((firstDistanceValue == secondDistanceValue) && (Y[i] == Y[i + 1])) {
     254:	c7 01       	movw	r24, r14
     256:	b6 01       	movw	r22, r12
     258:	0e 94 31 0b 	call	0x1662	; 0x1662 <__fixsfsi>
     25c:	7b 01       	movw	r14, r22
     25e:	c5 01       	movw	r24, r10
     260:	b4 01       	movw	r22, r8
     262:	0e 94 31 0b 	call	0x1662	; 0x1662 <__fixsfsi>
     266:	e6 16       	cp	r14, r22
     268:	f7 06       	cpc	r15, r23
     26a:	51 f5       	brne	.+84     	; 0x2c0 <sortOrder+0x184>
     26c:	eb 8d       	ldd	r30, Y+27	; 0x1b
     26e:	fc 8d       	ldd	r31, Y+28	; 0x1c
     270:	82 81       	ldd	r24, Z+2	; 0x02
     272:	93 81       	ldd	r25, Z+3	; 0x03
     274:	08 17       	cp	r16, r24
     276:	19 07       	cpc	r17, r25
     278:	19 f5       	brne	.+70     	; 0x2c0 <sortOrder+0x184>
				if (X[i] < X[i + 1]) {
     27a:	ed 8d       	ldd	r30, Y+29	; 0x1d
     27c:	fe 8d       	ldd	r31, Y+30	; 0x1e
     27e:	82 81       	ldd	r24, Z+2	; 0x02
     280:	93 81       	ldd	r25, Z+3	; 0x03
     282:	29 8d       	ldd	r18, Y+25	; 0x19
     284:	3a 8d       	ldd	r19, Y+26	; 0x1a
     286:	28 17       	cp	r18, r24
     288:	39 07       	cpc	r19, r25
     28a:	d4 f4       	brge	.+52     	; 0x2c0 <sortOrder+0x184>
					swapOne(& Distance[i], & Distance[i + 1]);
     28c:	69 89       	ldd	r22, Y+17	; 0x11
     28e:	79 a1       	ldd	r23, Y+33	; 0x21
     290:	8d 89       	ldd	r24, Y+21	; 0x15
     292:	9e 89       	ldd	r25, Y+22	; 0x16
     294:	0e 94 7d 00 	call	0xfa	; 0xfa <swapOne>
#include <avr/pgmspace.h>

void swapTwo( int *firstXValue, int *secondXValue, int *firstYValue, int *secondYValue){
	int temp;

	temp = *secondXValue;                                                                               //swap X-coordinates
     298:	ed 8d       	ldd	r30, Y+29	; 0x1d
     29a:	fe 8d       	ldd	r31, Y+30	; 0x1e
     29c:	82 81       	ldd	r24, Z+2	; 0x02
     29e:	93 81       	ldd	r25, Z+3	; 0x03
	*secondXValue = *firstXValue;
     2a0:	20 81       	ld	r18, Z
     2a2:	31 81       	ldd	r19, Z+1	; 0x01
     2a4:	33 83       	std	Z+3, r19	; 0x03
     2a6:	22 83       	std	Z+2, r18	; 0x02
	*firstXValue = temp;
     2a8:	91 83       	std	Z+1, r25	; 0x01
     2aa:	80 83       	st	Z, r24

	temp = *secondYValue;                                                                               //swap Y-coordinates
     2ac:	eb 8d       	ldd	r30, Y+27	; 0x1b
     2ae:	fc 8d       	ldd	r31, Y+28	; 0x1c
     2b0:	82 81       	ldd	r24, Z+2	; 0x02
     2b2:	93 81       	ldd	r25, Z+3	; 0x03
	*secondYValue = *firstYValue;
     2b4:	20 81       	ld	r18, Z
     2b6:	31 81       	ldd	r19, Z+1	; 0x01
     2b8:	33 83       	std	Z+3, r19	; 0x03
     2ba:	22 83       	std	Z+2, r18	; 0x02
	*firstYValue = temp;
     2bc:	91 83       	std	Z+1, r25	; 0x01
     2be:	80 83       	st	Z, r24
     2c0:	f2 e0       	ldi	r31, 0x02	; 2
     2c2:	6f 0e       	add	r6, r31
     2c4:	71 1c       	adc	r7, r1
     2c6:	22 e0       	ldi	r18, 0x02	; 2
     2c8:	22 0e       	add	r2, r18
     2ca:	31 1c       	adc	r3, r1
     2cc:	8d 89       	ldd	r24, Y+21	; 0x15
     2ce:	9e 89       	ldd	r25, Y+22	; 0x16
     2d0:	04 96       	adiw	r24, 0x04	; 4
     2d2:	9e 8b       	std	Y+22, r25	; 0x16
     2d4:	8d 8b       	std	Y+21, r24	; 0x15
	float Distance[sizeOfOrder];

	while (check != 1) {
		orderCorrect = 1;

		for (int i = 0; i < (sizeOfOrder - 1); i++) {
     2d6:	ef 8d       	ldd	r30, Y+31	; 0x1f
     2d8:	f8 a1       	ldd	r31, Y+32	; 0x20
     2da:	6e 16       	cp	r6, r30
     2dc:	7f 06       	cpc	r7, r31
     2de:	09 f0       	breq	.+2      	; 0x2e2 <sortOrder+0x1a6>
     2e0:	4f cf       	rjmp	.-354    	; 0x180 <sortOrder+0x44>
					swapOne(& Distance[i], & Distance[i + 1]);
					swapTwo(&X[i], &X[i + 1], &Y[i], &Y[i + 1]);
				}
			}
		}
		if (orderCorrect == 1) {
     2e2:	2f 89       	ldd	r18, Y+23	; 0x17
     2e4:	38 8d       	ldd	r19, Y+24	; 0x18
     2e6:	21 30       	cpi	r18, 0x01	; 1
     2e8:	31 05       	cpc	r19, r1
     2ea:	69 f0       	breq	.+26     	; 0x306 <sortOrder+0x1ca>
     2ec:	6a a0       	ldd	r6, Y+34	; 0x22
     2ee:	7b a0       	ldd	r7, Y+35	; 0x23
     2f0:	2c a0       	ldd	r2, Y+36	; 0x24
     2f2:	3d a0       	ldd	r3, Y+37	; 0x25
     2f4:	ce 01       	movw	r24, r28
     2f6:	01 96       	adiw	r24, 0x01	; 1
     2f8:	2c 01       	movw	r4, r24
	temp = *secondValue;
	*secondValue = *firstValue;
	*firstValue = temp;
}

void sortOrder(int X[], int Y[]) {
     2fa:	9e 8b       	std	Y+22, r25	; 0x16
     2fc:	8d 8b       	std	Y+21, r24	; 0x15
     2fe:	91 e0       	ldi	r25, 0x01	; 1
     300:	9f 8b       	std	Y+23, r25	; 0x17
     302:	18 8e       	std	Y+24, r1	; 0x18
     304:	3d cf       	rjmp	.-390    	; 0x180 <sortOrder+0x44>
		}
		if (orderCorrect == 1) {
			check = 1;
		}
	}
}
     306:	a5 96       	adiw	r28, 0x25	; 37
     308:	0f b6       	in	r0, 0x3f	; 63
     30a:	f8 94       	cli
     30c:	de bf       	out	0x3e, r29	; 62
     30e:	0f be       	out	0x3f, r0	; 63
     310:	cd bf       	out	0x3d, r28	; 61
     312:	df 91       	pop	r29
     314:	cf 91       	pop	r28
     316:	1f 91       	pop	r17
     318:	0f 91       	pop	r16
     31a:	ff 90       	pop	r15
     31c:	ef 90       	pop	r14
     31e:	df 90       	pop	r13
     320:	cf 90       	pop	r12
     322:	bf 90       	pop	r11
     324:	af 90       	pop	r10
     326:	9f 90       	pop	r9
     328:	8f 90       	pop	r8
     32a:	7f 90       	pop	r7
     32c:	6f 90       	pop	r6
     32e:	5f 90       	pop	r5
     330:	4f 90       	pop	r4
     332:	3f 90       	pop	r3
     334:	2f 90       	pop	r2
     336:	08 95       	ret

00000338 <turn>:

void turn(char direction){
     338:	cf 93       	push	r28
     33a:	c8 2f       	mov	r28, r24
	motorControl(70, direction, 0.89);
     33c:	2a e0       	ldi	r18, 0x0A	; 10
     33e:	37 ed       	ldi	r19, 0xD7	; 215
     340:	43 e6       	ldi	r20, 0x63	; 99
     342:	5f e3       	ldi	r21, 0x3F	; 63
     344:	68 2f       	mov	r22, r24
     346:	86 e4       	ldi	r24, 0x46	; 70
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <motorControl>
	delay_ms(50);
     34e:	82 e3       	ldi	r24, 0x32	; 50
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	0e 94 83 12 	call	0x2506	; 0x2506 <delay_ms>
	motorControl(0, direction, 0.89);
     356:	2a e0       	ldi	r18, 0x0A	; 10
     358:	37 ed       	ldi	r19, 0xD7	; 215
     35a:	43 e6       	ldi	r20, 0x63	; 99
     35c:	5f e3       	ldi	r21, 0x3F	; 63
     35e:	6c 2f       	mov	r22, r28
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	0e 94 e7 04 	call	0x9ce	; 0x9ce <motorControl>
}
     368:	cf 91       	pop	r28
     36a:	08 95       	ret

0000036c <readGrid>:
	}
	driveRoute(route, 1, 1, amountOfIntersects);    //Drive back to home
	play_from_program_space(PSTR(">g32>>c32"));
}

int readGrid(int routes[4][20]){
     36c:	2f 92       	push	r2
     36e:	3f 92       	push	r3
     370:	4f 92       	push	r4
     372:	5f 92       	push	r5
     374:	6f 92       	push	r6
     376:	7f 92       	push	r7
     378:	8f 92       	push	r8
     37a:	9f 92       	push	r9
     37c:	af 92       	push	r10
     37e:	bf 92       	push	r11
     380:	cf 92       	push	r12
     382:	df 92       	push	r13
     384:	ef 92       	push	r14
     386:	ff 92       	push	r15
     388:	0f 93       	push	r16
     38a:	1f 93       	push	r17
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	8c 01       	movw	r16, r24
	int i = 1, grid = 0, numOfIntersects, crossing = 0, routeNum = 1;
	int resultTemp;
	routes[1][0] = 5;                    //Marks beginning of route
     392:	85 e0       	ldi	r24, 0x05	; 5
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	f8 01       	movw	r30, r16
     398:	91 a7       	std	Z+41, r25	; 0x29
     39a:	80 a7       	std	Z+40, r24	; 0x28
	driveRoute(route, 1, 1, amountOfIntersects);    //Drive back to home
	play_from_program_space(PSTR(">g32>>c32"));
}

int readGrid(int routes[4][20]){
	int i = 1, grid = 0, numOfIntersects, crossing = 0, routeNum = 1;
     39c:	c1 e0       	ldi	r28, 0x01	; 1
     39e:	d0 e0       	ldi	r29, 0x00	; 0
			turn('L');
			i++;
			routes[0][i] = 6;
			break;
			case 7:              //Dead end
			routes[0][i] = 7;
     3a0:	0f 2e       	mov	r0, r31
     3a2:	f7 e0       	ldi	r31, 0x07	; 7
     3a4:	8f 2e       	mov	r8, r31
     3a6:	91 2c       	mov	r9, r1
     3a8:	f0 2d       	mov	r31, r0
			motorControl(80, 'F', 0.89);
			break;
			case 6:               //It is a crossing
			turn('L');
			i++;
			routes[0][i] = 6;
     3aa:	0f 2e       	mov	r0, r31
     3ac:	f6 e0       	ldi	r31, 0x06	; 6
     3ae:	af 2e       	mov	r10, r31
     3b0:	b1 2c       	mov	r11, r1
     3b2:	f0 2d       	mov	r31, r0
			case 4:                 //R
			routes[0][i] = 4;
			motorControl(80, 'F', 0.89);
			break;
			case 5:                //L
			routes[0][i] = 5;
     3b4:	0f 2e       	mov	r0, r31
     3b6:	f5 e0       	ldi	r31, 0x05	; 5
     3b8:	cf 2e       	mov	r12, r31
     3ba:	d1 2c       	mov	r13, r1
     3bc:	f0 2d       	mov	r31, r0
			turn('L');
			routes[0][i] = 3;
			i++;
			break;
			case 4:                 //R
			routes[0][i] = 4;
     3be:	68 94       	set
     3c0:	ee 24       	eor	r14, r14
     3c2:	e2 f8       	bld	r14, 2
     3c4:	f1 2c       	mov	r15, r1
			turn('L');
			i++;
			break;
			case 3:                  //It is a T-crossing    L R
			turn('L');
			routes[0][i] = 3;
     3c6:	0f 2e       	mov	r0, r31
     3c8:	f3 e0       	ldi	r31, 0x03	; 3
     3ca:	6f 2e       	mov	r6, r31
     3cc:	71 2c       	mov	r7, r1
     3ce:	f0 2d       	mov	r31, r0
			routes[0][i] = 1;
			turn('R');
			i++;
			break;
			case 2:                   //It is a corner to the left
			routes[0][i] = 2;
     3d0:	68 94       	set
     3d2:	44 24       	eor	r4, r4
     3d4:	41 f8       	bld	r4, 1
     3d6:	51 2c       	mov	r5, r1
	routes[1][0] = 5;                    //Marks beginning of route
	do{
		resultTemp = checkAfslag();
		switch(resultTemp){
			case 1:                     //It is a corner to the right
			routes[0][i] = 1;
     3d8:	22 24       	eor	r2, r2
     3da:	23 94       	inc	r2
     3dc:	31 2c       	mov	r3, r1
int readGrid(int routes[4][20]){
	int i = 1, grid = 0, numOfIntersects, crossing = 0, routeNum = 1;
	int resultTemp;
	routes[1][0] = 5;                    //Marks beginning of route
	do{
		resultTemp = checkAfslag();
     3de:	0e 94 88 09 	call	0x1310	; 0x1310 <checkAfslag>
		switch(resultTemp){
     3e2:	01 97       	sbiw	r24, 0x01	; 1
     3e4:	88 30       	cpi	r24, 0x08	; 8
     3e6:	91 05       	cpc	r25, r1
     3e8:	d0 f7       	brcc	.-12     	; 0x3de <readGrid+0x72>
     3ea:	8c 5c       	subi	r24, 0xCC	; 204
     3ec:	9f 4f       	sbci	r25, 0xFF	; 255
     3ee:	fc 01       	movw	r30, r24
     3f0:	0c 94 4f 16 	jmp	0x2c9e	; 0x2c9e <__tablejump2__>
			case 1:                     //It is a corner to the right
			routes[0][i] = 1;
     3f4:	fe 01       	movw	r30, r28
     3f6:	ee 0f       	add	r30, r30
     3f8:	ff 1f       	adc	r31, r31
     3fa:	e0 0f       	add	r30, r16
     3fc:	f1 1f       	adc	r31, r17
     3fe:	31 82       	std	Z+1, r3	; 0x01
     400:	20 82       	st	Z, r2
			turn('R');
     402:	82 e5       	ldi	r24, 0x52	; 82
     404:	0e 94 9c 01 	call	0x338	; 0x338 <turn>
			i++;
     408:	21 96       	adiw	r28, 0x01	; 1
			break;
     40a:	e9 cf       	rjmp	.-46     	; 0x3de <readGrid+0x72>
			case 2:                   //It is a corner to the left
			routes[0][i] = 2;
     40c:	fe 01       	movw	r30, r28
     40e:	ee 0f       	add	r30, r30
     410:	ff 1f       	adc	r31, r31
     412:	e0 0f       	add	r30, r16
     414:	f1 1f       	adc	r31, r17
     416:	51 82       	std	Z+1, r5	; 0x01
     418:	40 82       	st	Z, r4
			turn('L');
     41a:	8c e4       	ldi	r24, 0x4C	; 76
     41c:	0e 94 9c 01 	call	0x338	; 0x338 <turn>
			i++;
     420:	21 96       	adiw	r28, 0x01	; 1
			break;
     422:	dd cf       	rjmp	.-70     	; 0x3de <readGrid+0x72>
			case 3:                  //It is a T-crossing    L R
			turn('L');
     424:	8c e4       	ldi	r24, 0x4C	; 76
     426:	0e 94 9c 01 	call	0x338	; 0x338 <turn>
			routes[0][i] = 3;
     42a:	fe 01       	movw	r30, r28
     42c:	ee 0f       	add	r30, r30
     42e:	ff 1f       	adc	r31, r31
     430:	e0 0f       	add	r30, r16
     432:	f1 1f       	adc	r31, r17
     434:	71 82       	std	Z+1, r7	; 0x01
     436:	60 82       	st	Z, r6
			i++;
     438:	21 96       	adiw	r28, 0x01	; 1
			break;
     43a:	d1 cf       	rjmp	.-94     	; 0x3de <readGrid+0x72>
			case 4:                 //R
			routes[0][i] = 4;
     43c:	fe 01       	movw	r30, r28
     43e:	ee 0f       	add	r30, r30
     440:	ff 1f       	adc	r31, r31
     442:	e0 0f       	add	r30, r16
     444:	f1 1f       	adc	r31, r17
     446:	f1 82       	std	Z+1, r15	; 0x01
     448:	e0 82       	st	Z, r14
			motorControl(80, 'F', 0.89);
     44a:	2a e0       	ldi	r18, 0x0A	; 10
     44c:	37 ed       	ldi	r19, 0xD7	; 215
     44e:	43 e6       	ldi	r20, 0x63	; 99
     450:	5f e3       	ldi	r21, 0x3F	; 63
     452:	66 e4       	ldi	r22, 0x46	; 70
     454:	80 e5       	ldi	r24, 0x50	; 80
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	0e 94 e7 04 	call	0x9ce	; 0x9ce <motorControl>
			break;
     45c:	c0 cf       	rjmp	.-128    	; 0x3de <readGrid+0x72>
			case 5:                //L
			routes[0][i] = 5;
     45e:	fe 01       	movw	r30, r28
     460:	ee 0f       	add	r30, r30
     462:	ff 1f       	adc	r31, r31
     464:	e0 0f       	add	r30, r16
     466:	f1 1f       	adc	r31, r17
     468:	d1 82       	std	Z+1, r13	; 0x01
     46a:	c0 82       	st	Z, r12
			motorControl(80, 'F', 0.89);
     46c:	2a e0       	ldi	r18, 0x0A	; 10
     46e:	37 ed       	ldi	r19, 0xD7	; 215
     470:	43 e6       	ldi	r20, 0x63	; 99
     472:	5f e3       	ldi	r21, 0x3F	; 63
     474:	66 e4       	ldi	r22, 0x46	; 70
     476:	80 e5       	ldi	r24, 0x50	; 80
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <motorControl>
			break;
     47e:	af cf       	rjmp	.-162    	; 0x3de <readGrid+0x72>
			case 6:               //It is a crossing
			turn('L');
     480:	8c e4       	ldi	r24, 0x4C	; 76
     482:	0e 94 9c 01 	call	0x338	; 0x338 <turn>
			i++;
     486:	21 96       	adiw	r28, 0x01	; 1
			routes[0][i] = 6;
     488:	fe 01       	movw	r30, r28
     48a:	ee 0f       	add	r30, r30
     48c:	ff 1f       	adc	r31, r31
     48e:	e0 0f       	add	r30, r16
     490:	f1 1f       	adc	r31, r17
     492:	b1 82       	std	Z+1, r11	; 0x01
     494:	a0 82       	st	Z, r10
			break;
     496:	a3 cf       	rjmp	.-186    	; 0x3de <readGrid+0x72>
			case 7:              //Dead end
			routes[0][i] = 7;
     498:	fe 01       	movw	r30, r28
     49a:	ee 0f       	add	r30, r30
     49c:	ff 1f       	adc	r31, r31
     49e:	e0 0f       	add	r30, r16
     4a0:	f1 1f       	adc	r31, r17
     4a2:	91 82       	std	Z+1, r9	; 0x01
     4a4:	80 82       	st	Z, r8
			turn('R');
     4a6:	82 e5       	ldi	r24, 0x52	; 82
     4a8:	0e 94 9c 01 	call	0x338	; 0x338 <turn>
			turn('R');
     4ac:	82 e5       	ldi	r24, 0x52	; 82
     4ae:	0e 94 9c 01 	call	0x338	; 0x338 <turn>
			break;
     4b2:	95 cf       	rjmp	.-214    	; 0x3de <readGrid+0x72>
			case 8:
			grid = 1;
			routes[0][i] = 8; //Marks end of route
     4b4:	fe 01       	movw	r30, r28
     4b6:	ee 0f       	add	r30, r30
     4b8:	ff 1f       	adc	r31, r31
     4ba:	e0 0f       	add	r30, r16
     4bc:	f1 1f       	adc	r31, r17
     4be:	88 e0       	ldi	r24, 0x08	; 8
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	91 83       	std	Z+1, r25	; 0x01
     4c4:	80 83       	st	Z, r24
		}
	}while(grid == 0);
	numOfIntersects = i;
	
	for(i = 0; i < numOfIntersects; i++){   //Writing route towards X
     4c6:	1c 16       	cp	r1, r28
     4c8:	1d 06       	cpc	r1, r29
     4ca:	0c f0       	brlt	.+2      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     4cc:	ef c0       	rjmp	.+478    	; 0x6ac <__LOCK_REGION_LENGTH__+0x2ac>
     4ce:	d8 01       	movw	r26, r16
     4d0:	21 e0       	ldi	r18, 0x01	; 1
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	e1 2c       	mov	r14, r1
     4d6:	f1 2c       	mov	r15, r1
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	90 e0       	ldi	r25, 0x00	; 0
				crossing = 0;
				routes[1][i - 1] = 3;
			}
			break;
			case 8:                                                     //case 7 isn't part of a route
			routes[1][i] = 8;                                           //Marks end of route
     4dc:	68 94       	set
     4de:	66 24       	eor	r6, r6
     4e0:	63 f8       	bld	r6, 3
     4e2:	71 2c       	mov	r7, r1
				routes[routeNum][i] = 2;
			}
			break;
			case 6:
			crossing++;
			routes[routeNum][i] = 6;
     4e4:	48 e2       	ldi	r20, 0x28	; 40
     4e6:	0f 2e       	mov	r0, r31
     4e8:	f6 e0       	ldi	r31, 0x06	; 6
     4ea:	4f 2e       	mov	r4, r31
     4ec:	51 2c       	mov	r5, r1
     4ee:	f0 2d       	mov	r31, r0
			if((crossing == 2) && (routes[routeNum][i - 1] == 6)){
				crossing = 0;
				routes[1][i - 1] = 3;
     4f0:	0f 2e       	mov	r0, r31
     4f2:	f3 e0       	ldi	r31, 0x03	; 3
     4f4:	2f 2e       	mov	r2, r31
     4f6:	31 2c       	mov	r3, r1
     4f8:	f0 2d       	mov	r31, r0
			case 5:
			if(routes[0][i + 1] == 7){
				routes[routeNum][i] = 1;
			}
			else if(routes[0][i] != 7){
				routes[routeNum][i] = 2;
     4fa:	68 94       	set
     4fc:	cc 24       	eor	r12, r12
     4fe:	c1 f8       	bld	r12, 1
     500:	d1 2c       	mov	r13, r1
				routes[routeNum][i] = 3;
			}
			break;
			case 5:
			if(routes[0][i + 1] == 7){
				routes[routeNum][i] = 1;
     502:	aa 24       	eor	r10, r10
     504:	a3 94       	inc	r10
     506:	b1 2c       	mov	r11, r1
		}
	}while(grid == 0);
	numOfIntersects = i;
	
	for(i = 0; i < numOfIntersects; i++){   //Writing route towards X
		switch(routes[0][i]){
     508:	ed 91       	ld	r30, X+
     50a:	fd 91       	ld	r31, X+
     50c:	31 97       	sbiw	r30, 0x01	; 1
     50e:	e8 30       	cpi	r30, 0x08	; 8
     510:	f1 05       	cpc	r31, r1
     512:	08 f0       	brcs	.+2      	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     514:	c6 c0       	rjmp	.+396    	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
     516:	e4 5c       	subi	r30, 0xC4	; 196
     518:	ff 4f       	sbci	r31, 0xFF	; 255
     51a:	0c 94 4f 16 	jmp	0x2c9e	; 0x2c9e <__tablejump2__>
			case 1:
			routes[routeNum][i] = 1;
     51e:	42 9f       	mul	r20, r18
     520:	f0 01       	movw	r30, r0
     522:	43 9f       	mul	r20, r19
     524:	f0 0d       	add	r31, r0
     526:	11 24       	eor	r1, r1
     528:	e0 0f       	add	r30, r16
     52a:	f1 1f       	adc	r31, r17
     52c:	bc 01       	movw	r22, r24
     52e:	66 0f       	add	r22, r22
     530:	77 1f       	adc	r23, r23
     532:	e6 0f       	add	r30, r22
     534:	f7 1f       	adc	r31, r23
     536:	b1 82       	std	Z+1, r11	; 0x01
     538:	a0 82       	st	Z, r10
			break;
     53a:	b3 c0       	rjmp	.+358    	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
			case 2:
			routes[routeNum][i] = 2;
     53c:	42 9f       	mul	r20, r18
     53e:	f0 01       	movw	r30, r0
     540:	43 9f       	mul	r20, r19
     542:	f0 0d       	add	r31, r0
     544:	11 24       	eor	r1, r1
     546:	e0 0f       	add	r30, r16
     548:	f1 1f       	adc	r31, r17
     54a:	bc 01       	movw	r22, r24
     54c:	66 0f       	add	r22, r22
     54e:	77 1f       	adc	r23, r23
     550:	e6 0f       	add	r30, r22
     552:	f7 1f       	adc	r31, r23
     554:	d1 82       	std	Z+1, r13	; 0x01
     556:	c0 82       	st	Z, r12
			break;
     558:	a4 c0       	rjmp	.+328    	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
			case 3:
			if(routes[0][i + 1] == 7){
     55a:	6d 91       	ld	r22, X+
     55c:	7c 91       	ld	r23, X
     55e:	11 97       	sbiw	r26, 0x01	; 1
     560:	67 30       	cpi	r22, 0x07	; 7
     562:	71 05       	cpc	r23, r1
     564:	79 f4       	brne	.+30     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
				routes[routeNum][i] = 1;
     566:	42 9f       	mul	r20, r18
     568:	f0 01       	movw	r30, r0
     56a:	43 9f       	mul	r20, r19
     56c:	f0 0d       	add	r31, r0
     56e:	11 24       	eor	r1, r1
     570:	e0 0f       	add	r30, r16
     572:	f1 1f       	adc	r31, r17
     574:	bc 01       	movw	r22, r24
     576:	66 0f       	add	r22, r22
     578:	77 1f       	adc	r23, r23
     57a:	e6 0f       	add	r30, r22
     57c:	f7 1f       	adc	r31, r23
     57e:	b1 82       	std	Z+1, r11	; 0x01
     580:	a0 82       	st	Z, r10
     582:	8f c0       	rjmp	.+286    	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
			}
			else if(routes[0][i + 1] != 7){
				routes[routeNum][i] = 2;
     584:	42 9f       	mul	r20, r18
     586:	f0 01       	movw	r30, r0
     588:	43 9f       	mul	r20, r19
     58a:	f0 0d       	add	r31, r0
     58c:	11 24       	eor	r1, r1
     58e:	e0 0f       	add	r30, r16
     590:	f1 1f       	adc	r31, r17
     592:	bc 01       	movw	r22, r24
     594:	66 0f       	add	r22, r22
     596:	77 1f       	adc	r23, r23
     598:	e6 0f       	add	r30, r22
     59a:	f7 1f       	adc	r31, r23
     59c:	d1 82       	std	Z+1, r13	; 0x01
     59e:	c0 82       	st	Z, r12
     5a0:	80 c0       	rjmp	.+256    	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
			}
			break;
			case 4:
			if(routes[0][i + 1] == 7){
     5a2:	6d 91       	ld	r22, X+
     5a4:	7c 91       	ld	r23, X
     5a6:	11 97       	sbiw	r26, 0x01	; 1
     5a8:	67 30       	cpi	r22, 0x07	; 7
     5aa:	71 05       	cpc	r23, r1
     5ac:	79 f4       	brne	.+30     	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
				routes[routeNum][i] = 1;
     5ae:	42 9f       	mul	r20, r18
     5b0:	f0 01       	movw	r30, r0
     5b2:	43 9f       	mul	r20, r19
     5b4:	f0 0d       	add	r31, r0
     5b6:	11 24       	eor	r1, r1
     5b8:	e0 0f       	add	r30, r16
     5ba:	f1 1f       	adc	r31, r17
     5bc:	bc 01       	movw	r22, r24
     5be:	66 0f       	add	r22, r22
     5c0:	77 1f       	adc	r23, r23
     5c2:	e6 0f       	add	r30, r22
     5c4:	f7 1f       	adc	r31, r23
     5c6:	b1 82       	std	Z+1, r11	; 0x01
     5c8:	a0 82       	st	Z, r10
     5ca:	6b c0       	rjmp	.+214    	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
			}
			else if(routes[0][i] != 7){
				routes[routeNum][i] = 3;
     5cc:	42 9f       	mul	r20, r18
     5ce:	f0 01       	movw	r30, r0
     5d0:	43 9f       	mul	r20, r19
     5d2:	f0 0d       	add	r31, r0
     5d4:	11 24       	eor	r1, r1
     5d6:	e0 0f       	add	r30, r16
     5d8:	f1 1f       	adc	r31, r17
     5da:	bc 01       	movw	r22, r24
     5dc:	66 0f       	add	r22, r22
     5de:	77 1f       	adc	r23, r23
     5e0:	e6 0f       	add	r30, r22
     5e2:	f7 1f       	adc	r31, r23
     5e4:	31 82       	std	Z+1, r3	; 0x01
     5e6:	20 82       	st	Z, r2
     5e8:	5c c0       	rjmp	.+184    	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
			}
			break;
			case 5:
			if(routes[0][i + 1] == 7){
     5ea:	6d 91       	ld	r22, X+
     5ec:	7c 91       	ld	r23, X
     5ee:	11 97       	sbiw	r26, 0x01	; 1
     5f0:	67 30       	cpi	r22, 0x07	; 7
     5f2:	71 05       	cpc	r23, r1
     5f4:	79 f4       	brne	.+30     	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
				routes[routeNum][i] = 1;
     5f6:	42 9f       	mul	r20, r18
     5f8:	f0 01       	movw	r30, r0
     5fa:	43 9f       	mul	r20, r19
     5fc:	f0 0d       	add	r31, r0
     5fe:	11 24       	eor	r1, r1
     600:	e0 0f       	add	r30, r16
     602:	f1 1f       	adc	r31, r17
     604:	bc 01       	movw	r22, r24
     606:	66 0f       	add	r22, r22
     608:	77 1f       	adc	r23, r23
     60a:	e6 0f       	add	r30, r22
     60c:	f7 1f       	adc	r31, r23
     60e:	b1 82       	std	Z+1, r11	; 0x01
     610:	a0 82       	st	Z, r10
     612:	47 c0       	rjmp	.+142    	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
			}
			else if(routes[0][i] != 7){
				routes[routeNum][i] = 2;
     614:	42 9f       	mul	r20, r18
     616:	f0 01       	movw	r30, r0
     618:	43 9f       	mul	r20, r19
     61a:	f0 0d       	add	r31, r0
     61c:	11 24       	eor	r1, r1
     61e:	e0 0f       	add	r30, r16
     620:	f1 1f       	adc	r31, r17
     622:	bc 01       	movw	r22, r24
     624:	66 0f       	add	r22, r22
     626:	77 1f       	adc	r23, r23
     628:	e6 0f       	add	r30, r22
     62a:	f7 1f       	adc	r31, r23
     62c:	d1 82       	std	Z+1, r13	; 0x01
     62e:	c0 82       	st	Z, r12
     630:	38 c0       	rjmp	.+112    	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
			}
			break;
			case 6:
			crossing++;
     632:	ff ef       	ldi	r31, 0xFF	; 255
     634:	ef 1a       	sub	r14, r31
     636:	ff 0a       	sbc	r15, r31
			routes[routeNum][i] = 6;
     638:	42 9f       	mul	r20, r18
     63a:	40 01       	movw	r8, r0
     63c:	43 9f       	mul	r20, r19
     63e:	90 0c       	add	r9, r0
     640:	11 24       	eor	r1, r1
     642:	80 0e       	add	r8, r16
     644:	91 1e       	adc	r9, r17
     646:	fc 01       	movw	r30, r24
     648:	ee 0f       	add	r30, r30
     64a:	ff 1f       	adc	r31, r31
     64c:	e8 0d       	add	r30, r8
     64e:	f9 1d       	adc	r31, r9
     650:	51 82       	std	Z+1, r5	; 0x01
     652:	40 82       	st	Z, r4
			if((crossing == 2) && (routes[routeNum][i - 1] == 6)){
     654:	52 e0       	ldi	r21, 0x02	; 2
     656:	e5 16       	cp	r14, r21
     658:	f1 04       	cpc	r15, r1
     65a:	19 f5       	brne	.+70     	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
     65c:	bc 01       	movw	r22, r24
     65e:	61 50       	subi	r22, 0x01	; 1
     660:	71 09       	sbc	r23, r1
     662:	66 0f       	add	r22, r22
     664:	77 1f       	adc	r23, r23
     666:	f4 01       	movw	r30, r8
     668:	e6 0f       	add	r30, r22
     66a:	f7 1f       	adc	r31, r23
     66c:	60 81       	ld	r22, Z
     66e:	71 81       	ldd	r23, Z+1	; 0x01
     670:	66 30       	cpi	r22, 0x06	; 6
     672:	71 05       	cpc	r23, r1
     674:	b1 f4       	brne	.+44     	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
				crossing = 0;
				routes[1][i - 1] = 3;
     676:	95 96       	adiw	r26, 0x25	; 37
     678:	3c 92       	st	X, r3
     67a:	2e 92       	st	-X, r2
     67c:	94 97       	sbiw	r26, 0x24	; 36
			break;
			case 6:
			crossing++;
			routes[routeNum][i] = 6;
			if((crossing == 2) && (routes[routeNum][i - 1] == 6)){
				crossing = 0;
     67e:	e1 2c       	mov	r14, r1
     680:	f1 2c       	mov	r15, r1
     682:	0f c0       	rjmp	.+30     	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
     684:	fd 01       	movw	r30, r26
				routes[1][i - 1] = 3;
			}
			break;
			case 8:                                                     //case 7 isn't part of a route
			routes[1][i] = 8;                                           //Marks end of route
     686:	97 96       	adiw	r26, 0x27	; 39
     688:	7c 92       	st	X, r7
     68a:	6e 92       	st	-X, r6
     68c:	96 97       	sbiw	r26, 0x26	; 38
     68e:	64 e1       	ldi	r22, 0x14	; 20
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	61 50       	subi	r22, 0x01	; 1
     694:	71 09       	sbc	r23, r1
			for(int j = 0; j < 20; j++){                                //reset decoy array
     696:	e9 f7       	brne	.-6      	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
     698:	32 97       	sbiw	r30, 0x02	; 2
     69a:	11 82       	std	Z+1, r1	; 0x01
     69c:	10 82       	st	Z, r1
				routes[0][i] = 0;
			}
			routeNum++;
     69e:	2f 5f       	subi	r18, 0xFF	; 255
     6a0:	3f 4f       	sbci	r19, 0xFF	; 255
			routes[0][i] = 8; //Marks end of route
		}
	}while(grid == 0);
	numOfIntersects = i;
	
	for(i = 0; i < numOfIntersects; i++){   //Writing route towards X
     6a2:	01 96       	adiw	r24, 0x01	; 1
     6a4:	c8 17       	cp	r28, r24
     6a6:	d9 07       	cpc	r29, r25
     6a8:	09 f0       	breq	.+2      	; 0x6ac <__LOCK_REGION_LENGTH__+0x2ac>
     6aa:	2e cf       	rjmp	.-420    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
			
		}
	}
	
	return numOfIntersects;                                                       //returns intersect count, so amount of intersects on route
}
     6ac:	ce 01       	movw	r24, r28
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	1f 91       	pop	r17
     6b4:	0f 91       	pop	r16
     6b6:	ff 90       	pop	r15
     6b8:	ef 90       	pop	r14
     6ba:	df 90       	pop	r13
     6bc:	cf 90       	pop	r12
     6be:	bf 90       	pop	r11
     6c0:	af 90       	pop	r10
     6c2:	9f 90       	pop	r9
     6c4:	8f 90       	pop	r8
     6c6:	7f 90       	pop	r7
     6c8:	6f 90       	pop	r6
     6ca:	5f 90       	pop	r5
     6cc:	4f 90       	pop	r4
     6ce:	3f 90       	pop	r3
     6d0:	2f 90       	pop	r2
     6d2:	08 95       	ret

000006d4 <driveRoute>:

void driveRoute(int route[2][20], int flag, int flagReturn, int max){             //go to or return from, grid or chargepoint
     6d4:	cf 92       	push	r12
     6d6:	df 92       	push	r13
     6d8:	ef 92       	push	r14
     6da:	ff 92       	push	r15
     6dc:	0f 93       	push	r16
     6de:	1f 93       	push	r17
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	6c 01       	movw	r12, r24
     6e6:	eb 01       	movw	r28, r22
     6e8:	7a 01       	movw	r14, r20
     6ea:	89 01       	movw	r16, r18
	int intersectnum = 1;                                       // flag 1 =  from or to home, flag 2 is from or to chargepoint
	
	if(flagReturn == 1){
     6ec:	41 30       	cpi	r20, 0x01	; 1
     6ee:	51 05       	cpc	r21, r1
     6f0:	11 f0       	breq	.+4      	; 0x6f6 <driveRoute+0x22>
	
	return numOfIntersects;                                                       //returns intersect count, so amount of intersects on route
}

void driveRoute(int route[2][20], int flag, int flagReturn, int max){             //go to or return from, grid or chargepoint
	int intersectnum = 1;                                       // flag 1 =  from or to home, flag 2 is from or to chargepoint
     6f2:	01 e0       	ldi	r16, 0x01	; 1
     6f4:	10 e0       	ldi	r17, 0x00	; 0
	
	if(flagReturn == 1){
		intersectnum = max;
	}
	
	if(flag == 2){
     6f6:	c2 30       	cpi	r28, 0x02	; 2
     6f8:	d1 05       	cpc	r29, r1
     6fa:	19 f4       	brne	.+6      	; 0x702 <driveRoute+0x2e>
		turn('R');
     6fc:	82 e5       	ldi	r24, 0x52	; 82
     6fe:	0e 94 9c 01 	call	0x338	; 0x338 <turn>
	}while(checkAfslag() == 0);
	
	if(checkAfslag() != 0){
		
		if(flagReturn == 0){
			switch(route[flag][intersectnum]){
     702:	28 e2       	ldi	r18, 0x28	; 40
     704:	2c 9f       	mul	r18, r28
     706:	c0 01       	movw	r24, r0
     708:	2d 9f       	mul	r18, r29
     70a:	90 0d       	add	r25, r0
     70c:	11 24       	eor	r1, r1
     70e:	e8 01       	movw	r28, r16
     710:	cc 0f       	add	r28, r28
     712:	dd 1f       	adc	r29, r29
     714:	c8 0f       	add	r28, r24
     716:	d9 1f       	adc	r29, r25
     718:	cc 0d       	add	r28, r12
     71a:	dd 1d       	adc	r29, r13
		turn('R');
	}
	
	Next:
	do{
		followLine();
     71c:	0e 94 34 09 	call	0x1268	; 0x1268 <followLine>
	}while(checkAfslag() == 0);
     720:	0e 94 88 09 	call	0x1310	; 0x1310 <checkAfslag>
     724:	89 2b       	or	r24, r25
     726:	d1 f3       	breq	.-12     	; 0x71c <driveRoute+0x48>
	
	if(checkAfslag() != 0){
     728:	0e 94 88 09 	call	0x1310	; 0x1310 <checkAfslag>
     72c:	89 2b       	or	r24, r25
     72e:	69 f1       	breq	.+90     	; 0x78a <driveRoute+0xb6>
		
		if(flagReturn == 0){
     730:	e1 14       	cp	r14, r1
     732:	f1 04       	cpc	r15, r1
     734:	51 f5       	brne	.+84     	; 0x78a <driveRoute+0xb6>
			switch(route[flag][intersectnum]){
     736:	89 91       	ld	r24, Y+
     738:	99 91       	ld	r25, Y+
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	91 05       	cpc	r25, r1
     73e:	71 f0       	breq	.+28     	; 0x75c <driveRoute+0x88>
     740:	1c f4       	brge	.+6      	; 0x748 <driveRoute+0x74>
     742:	01 97       	sbiw	r24, 0x01	; 1
     744:	39 f0       	breq	.+14     	; 0x754 <driveRoute+0x80>
     746:	21 c0       	rjmp	.+66     	; 0x78a <driveRoute+0xb6>
     748:	83 30       	cpi	r24, 0x03	; 3
     74a:	91 05       	cpc	r25, r1
     74c:	59 f0       	breq	.+22     	; 0x764 <driveRoute+0x90>
     74e:	05 97       	sbiw	r24, 0x05	; 5
     750:	99 f0       	breq	.+38     	; 0x778 <driveRoute+0xa4>
     752:	1b c0       	rjmp	.+54     	; 0x78a <driveRoute+0xb6>
				case 1:
				turn('R');
     754:	82 e5       	ldi	r24, 0x52	; 82
     756:	0e 94 9c 01 	call	0x338	; 0x338 <turn>
				intersectnum++;
				goto Next;
     75a:	e0 cf       	rjmp	.-64     	; 0x71c <driveRoute+0x48>
				case 2:
				turn('L');
     75c:	8c e4       	ldi	r24, 0x4C	; 76
     75e:	0e 94 9c 01 	call	0x338	; 0x338 <turn>
				intersectnum++;
				goto Next;
     762:	dc cf       	rjmp	.-72     	; 0x71c <driveRoute+0x48>
				case 3:
				motorControl(80, 'F', 0.89);
     764:	2a e0       	ldi	r18, 0x0A	; 10
     766:	37 ed       	ldi	r19, 0xD7	; 215
     768:	43 e6       	ldi	r20, 0x63	; 99
     76a:	5f e3       	ldi	r21, 0x3F	; 63
     76c:	66 e4       	ldi	r22, 0x46	; 70
     76e:	80 e5       	ldi	r24, 0x50	; 80
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	0e 94 e7 04 	call	0x9ce	; 0x9ce <motorControl>
				intersectnum++;
				goto Next;
     776:	d2 cf       	rjmp	.-92     	; 0x71c <driveRoute+0x48>
				case 5:
				motorControl(0, 'F', 0.89);    //stop
     778:	2a e0       	ldi	r18, 0x0A	; 10
     77a:	37 ed       	ldi	r19, 0xD7	; 215
     77c:	43 e6       	ldi	r20, 0x63	; 99
     77e:	5f e3       	ldi	r21, 0x3F	; 63
     780:	66 e4       	ldi	r22, 0x46	; 70
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	0e 94 e7 04 	call	0x9ce	; 0x9ce <motorControl>
				play_from_program_space(PSTR(">g32>>c32"));

			}
		}
	}
}
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	0f 91       	pop	r16
     792:	ff 90       	pop	r15
     794:	ef 90       	pop	r14
     796:	df 90       	pop	r13
     798:	cf 90       	pop	r12
     79a:	08 95       	ret

0000079c <fetchOrder>:
	motorControl(70, direction, 0.89);
	delay_ms(50);
	motorControl(0, direction, 0.89);
}

void fetchOrder(int OrderX[], int orderY[], int route[2][20]){
     79c:	4f 92       	push	r4
     79e:	5f 92       	push	r5
     7a0:	6f 92       	push	r6
     7a2:	7f 92       	push	r7
     7a4:	8f 92       	push	r8
     7a6:	9f 92       	push	r9
     7a8:	af 92       	push	r10
     7aa:	bf 92       	push	r11
     7ac:	cf 92       	push	r12
     7ae:	df 92       	push	r13
     7b0:	ef 92       	push	r14
     7b2:	ff 92       	push	r15
     7b4:	0f 93       	push	r16
     7b6:	1f 93       	push	r17
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	08 2f       	mov	r16, r24
     7be:	19 2f       	mov	r17, r25
     7c0:	d6 2f       	mov	r29, r22
     7c2:	c7 2f       	mov	r28, r23
     7c4:	4a 01       	movw	r8, r20
	int crossCountX = 0, crossCountY = 0, flagY = 0, flagX = 0, endX = 5, endY = 0, endFlag = 0;
	int amountOfIntersects = readGrid(route);
     7c6:	ca 01       	movw	r24, r20
     7c8:	0e 94 b6 01 	call	0x36c	; 0x36c <readGrid>
     7cc:	3c 01       	movw	r6, r24
	driveRoute(route, 1, 0, amountOfIntersects);    //Drive to grid entrance
     7ce:	9c 01       	movw	r18, r24
     7d0:	40 e0       	ldi	r20, 0x00	; 0
     7d2:	50 e0       	ldi	r21, 0x00	; 0
     7d4:	61 e0       	ldi	r22, 0x01	; 1
     7d6:	70 e0       	ldi	r23, 0x00	; 0
     7d8:	c4 01       	movw	r24, r8
     7da:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <driveRoute>
	motorControl(70, 'R', 0.89);
     7de:	2a e0       	ldi	r18, 0x0A	; 10
     7e0:	37 ed       	ldi	r19, 0xD7	; 215
     7e2:	43 e6       	ldi	r20, 0x63	; 99
     7e4:	5f e3       	ldi	r21, 0x3F	; 63
     7e6:	62 e5       	ldi	r22, 0x52	; 82
     7e8:	86 e4       	ldi	r24, 0x46	; 70
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	0e 94 e7 04 	call	0x9ce	; 0x9ce <motorControl>
		    : "0" ( microseconds )
		    );  
}

// These are alternative aliases:
static inline void delay(unsigned int milliseconds) { delay_ms(milliseconds); }
     7f0:	82 e3       	ldi	r24, 0x32	; 50
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	0e 94 83 12 	call	0x2506	; 0x2506 <delay_ms>
	delay(50);
	motorControl(0, 'R', 0.89);
     7f8:	2a e0       	ldi	r18, 0x0A	; 10
     7fa:	37 ed       	ldi	r19, 0xD7	; 215
     7fc:	43 e6       	ldi	r20, 0x63	; 99
     7fe:	5f e3       	ldi	r21, 0x3F	; 63
     800:	62 e5       	ldi	r22, 0x52	; 82
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	0e 94 e7 04 	call	0x9ce	; 0x9ce <motorControl>
     80a:	c0 2e       	mov	r12, r16
     80c:	d1 2e       	mov	r13, r17
     80e:	ed 2e       	mov	r14, r29
     810:	fc 2e       	mov	r15, r28
	for(int i = 0; i < sizeOfOrder + 1; i ++){
     812:	a1 2c       	mov	r10, r1
     814:	b1 2c       	mov	r11, r1
	delay_ms(50);
	motorControl(0, direction, 0.89);
}

void fetchOrder(int OrderX[], int orderY[], int route[2][20]){
	int crossCountX = 0, crossCountY = 0, flagY = 0, flagX = 0, endX = 5, endY = 0, endFlag = 0;
     816:	00 e0       	ldi	r16, 0x00	; 0
     818:	10 e0       	ldi	r17, 0x00	; 0
	motorControl(70, 'R', 0.89);
	delay(50);
	motorControl(0, 'R', 0.89);
	for(int i = 0; i < sizeOfOrder + 1; i ++){
		if(i == sizeOfOrder){
			endFlag = 1;
     81a:	44 24       	eor	r4, r4
     81c:	43 94       	inc	r4
     81e:	51 2c       	mov	r5, r1
     820:	0c c0       	rjmp	.+24     	; 0x83a <fetchOrder+0x9e>
	driveRoute(route, 1, 0, amountOfIntersects);    //Drive to grid entrance
	motorControl(70, 'R', 0.89);
	delay(50);
	motorControl(0, 'R', 0.89);
	for(int i = 0; i < sizeOfOrder + 1; i ++){
		if(i == sizeOfOrder){
     822:	84 e0       	ldi	r24, 0x04	; 4
     824:	a8 16       	cp	r10, r24
     826:	b1 04       	cpc	r11, r1
     828:	11 f4       	brne	.+4      	; 0x82e <fetchOrder+0x92>
			endFlag = 1;
     82a:	04 2d       	mov	r16, r4
     82c:	15 2d       	mov	r17, r5
     82e:	e2 e0       	ldi	r30, 0x02	; 2
     830:	ce 0e       	add	r12, r30
     832:	d1 1c       	adc	r13, r1
     834:	f2 e0       	ldi	r31, 0x02	; 2
     836:	ef 0e       	add	r14, r31
     838:	f1 1c       	adc	r15, r1
     83a:	e6 01       	movw	r28, r12
		}
		if((crossCountX > OrderX[i]) || (endFlag == 1 && (crossCountX > endX))){
     83c:	88 81       	ld	r24, Y
     83e:	99 81       	ldd	r25, Y+1	; 0x01
     840:	99 23       	and	r25, r25
     842:	24 f4       	brge	.+8      	; 0x84c <fetchOrder+0xb0>
			turn('L');
     844:	8c e4       	ldi	r24, 0x4C	; 76
     846:	0e 94 9c 01 	call	0x338	; 0x338 <turn>
			flagX = 1;
     84a:	13 c0       	rjmp	.+38     	; 0x872 <fetchOrder+0xd6>
		}
		else if((crossCountX < OrderX[i]) || (endFlag == 1 && (crossCountX < endX))){
     84c:	18 16       	cp	r1, r24
     84e:	19 06       	cpc	r1, r25
     850:	1c f0       	brlt	.+6      	; 0x858 <fetchOrder+0xbc>
     852:	01 30       	cpi	r16, 0x01	; 1
     854:	11 05       	cpc	r17, r1
     856:	69 f4       	brne	.+26     	; 0x872 <fetchOrder+0xd6>
			turn('R');
     858:	82 e5       	ldi	r24, 0x52	; 82
     85a:	0e 94 9c 01 	call	0x338	; 0x338 <turn>
     85e:	09 c0       	rjmp	.+18     	; 0x872 <fetchOrder+0xd6>
				//if intersection detected crossCountX++
			}
			else if(flagX == 2){
				//if intersection detected crossCountX--
			}
			motorControl(90, 'F', 0.89);
     860:	2a e0       	ldi	r18, 0x0A	; 10
     862:	37 ed       	ldi	r19, 0xD7	; 215
     864:	43 e6       	ldi	r20, 0x63	; 99
     866:	5f e3       	ldi	r21, 0x3F	; 63
     868:	66 e4       	ldi	r22, 0x46	; 70
     86a:	8a e5       	ldi	r24, 0x5A	; 90
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <motorControl>
		}
		else if((crossCountX < OrderX[i]) || (endFlag == 1 && (crossCountX < endX))){
			turn('R');
			flagX = 2;
		}
		while((crossCountX != OrderX[i]) || (endFlag == 1 && (crossCountX != endX))){
     872:	88 81       	ld	r24, Y
     874:	99 81       	ldd	r25, Y+1	; 0x01
     876:	89 2b       	or	r24, r25
     878:	99 f7       	brne	.-26     	; 0x860 <fetchOrder+0xc4>
     87a:	01 30       	cpi	r16, 0x01	; 1
     87c:	11 05       	cpc	r17, r1
     87e:	81 f3       	breq	.-32     	; 0x860 <fetchOrder+0xc4>
				//if intersection detected crossCountX--
			}
			motorControl(90, 'F', 0.89);
			// if intersection detected crossCountX++
		}
		motorControl(0, 'F', 0.89);
     880:	2a e0       	ldi	r18, 0x0A	; 10
     882:	37 ed       	ldi	r19, 0xD7	; 215
     884:	43 e6       	ldi	r20, 0x63	; 99
     886:	5f e3       	ldi	r21, 0x3F	; 63
     888:	66 e4       	ldi	r22, 0x46	; 70
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <motorControl>
     892:	e7 01       	movw	r28, r14
		if((crossCountY > orderY[i]) || (endFlag == 1 && (crossCountY > endY))){
     894:	88 81       	ld	r24, Y
     896:	99 81       	ldd	r25, Y+1	; 0x01
     898:	99 23       	and	r25, r25
     89a:	44 f4       	brge	.+16     	; 0x8ac <fetchOrder+0x110>
			turn('L');
     89c:	8c e4       	ldi	r24, 0x4C	; 76
     89e:	0e 94 9c 01 	call	0x338	; 0x338 <turn>
		}
		else if((crossCountY < orderY[i]) || (endFlag == 1 && (crossCountY < endY))){
			turn('R');
			flagY = 2;
		}
		while((crossCountY != orderY[i]) || (endFlag == 1 && (crossCountY != endY))){
     8a2:	88 81       	ld	r24, Y
     8a4:	99 81       	ldd	r25, Y+1	; 0x01
     8a6:	89 2b       	or	r24, r25
     8a8:	41 f4       	brne	.+16     	; 0x8ba <fetchOrder+0x11e>
     8aa:	14 c0       	rjmp	.+40     	; 0x8d4 <fetchOrder+0x138>
		motorControl(0, 'F', 0.89);
		if((crossCountY > orderY[i]) || (endFlag == 1 && (crossCountY > endY))){
			turn('L');
			flagY = 1;
		}
		else if((crossCountY < orderY[i]) || (endFlag == 1 && (crossCountY < endY))){
     8ac:	18 16       	cp	r1, r24
     8ae:	19 06       	cpc	r1, r25
     8b0:	c4 f7       	brge	.-16     	; 0x8a2 <fetchOrder+0x106>
			turn('R');
     8b2:	82 e5       	ldi	r24, 0x52	; 82
     8b4:	0e 94 9c 01 	call	0x338	; 0x338 <turn>
     8b8:	f4 cf       	rjmp	.-24     	; 0x8a2 <fetchOrder+0x106>
				//if intersection detected crossCountY++
			}
			else if(flagY == 2){
				//if intersection detected crossCountY--
			}
			motorControl(90, 'F', 0.89);
     8ba:	2a e0       	ldi	r18, 0x0A	; 10
     8bc:	37 ed       	ldi	r19, 0xD7	; 215
     8be:	43 e6       	ldi	r20, 0x63	; 99
     8c0:	5f e3       	ldi	r21, 0x3F	; 63
     8c2:	66 e4       	ldi	r22, 0x46	; 70
     8c4:	8a e5       	ldi	r24, 0x5A	; 90
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 e7 04 	call	0x9ce	; 0x9ce <motorControl>
		}
		else if((crossCountY < orderY[i]) || (endFlag == 1 && (crossCountY < endY))){
			turn('R');
			flagY = 2;
		}
		while((crossCountY != orderY[i]) || (endFlag == 1 && (crossCountY != endY))){
     8cc:	88 81       	ld	r24, Y
     8ce:	99 81       	ldd	r25, Y+1	; 0x01
     8d0:	89 2b       	or	r24, r25
     8d2:	99 f7       	brne	.-26     	; 0x8ba <fetchOrder+0x11e>
			else if(flagY == 2){
				//if intersection detected crossCountY--
			}
			motorControl(90, 'F', 0.89);
		}
		play_from_program_space(PSTR(">g32>>c32"));
     8d4:	80 eb       	ldi	r24, 0xB0	; 176
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	0e 94 7e 10 	call	0x20fc	; 0x20fc <play_from_program_space>
     8dc:	88 ec       	ldi	r24, 0xC8	; 200
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	0e 94 83 12 	call	0x2506	; 0x2506 <delay_ms>
	int amountOfIntersects = readGrid(route);
	driveRoute(route, 1, 0, amountOfIntersects);    //Drive to grid entrance
	motorControl(70, 'R', 0.89);
	delay(50);
	motorControl(0, 'R', 0.89);
	for(int i = 0; i < sizeOfOrder + 1; i ++){
     8e4:	8f ef       	ldi	r24, 0xFF	; 255
     8e6:	a8 1a       	sub	r10, r24
     8e8:	b8 0a       	sbc	r11, r24
     8ea:	e5 e0       	ldi	r30, 0x05	; 5
     8ec:	ae 16       	cp	r10, r30
     8ee:	b1 04       	cpc	r11, r1
     8f0:	09 f0       	breq	.+2      	; 0x8f4 <fetchOrder+0x158>
     8f2:	97 cf       	rjmp	.-210    	; 0x822 <fetchOrder+0x86>
			motorControl(90, 'F', 0.89);
		}
		play_from_program_space(PSTR(">g32>>c32"));
		delay(200);
	}
	driveRoute(route, 1, 1, amountOfIntersects);    //Drive back to home
     8f4:	93 01       	movw	r18, r6
     8f6:	41 e0       	ldi	r20, 0x01	; 1
     8f8:	50 e0       	ldi	r21, 0x00	; 0
     8fa:	61 e0       	ldi	r22, 0x01	; 1
     8fc:	70 e0       	ldi	r23, 0x00	; 0
     8fe:	c4 01       	movw	r24, r8
     900:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <driveRoute>
	play_from_program_space(PSTR(">g32>>c32"));
     904:	86 ea       	ldi	r24, 0xA6	; 166
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	0e 94 7e 10 	call	0x20fc	; 0x20fc <play_from_program_space>
}
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	1f 91       	pop	r17
     912:	0f 91       	pop	r16
     914:	ff 90       	pop	r15
     916:	ef 90       	pop	r14
     918:	df 90       	pop	r13
     91a:	cf 90       	pop	r12
     91c:	bf 90       	pop	r11
     91e:	af 90       	pop	r10
     920:	9f 90       	pop	r9
     922:	8f 90       	pop	r8
     924:	7f 90       	pop	r7
     926:	6f 90       	pop	r6
     928:	5f 90       	pop	r5
     92a:	4f 90       	pop	r4
     92c:	08 95       	ret

0000092e <main>:

#include "Grid.h"
#include <pololu/3pi.h>
#include <avr/pgmspace.h>

int main(){
     92e:	0f 93       	push	r16
     930:	1f 93       	push	r17
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
     936:	cd b7       	in	r28, 0x3d	; 61
     938:	de b7       	in	r29, 0x3e	; 62
     93a:	c0 56       	subi	r28, 0x60	; 96
     93c:	d1 09       	sbc	r29, r1
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	f8 94       	cli
     942:	de bf       	out	0x3e, r29	; 62
     944:	0f be       	out	0x3f, r0	; 63
     946:	cd bf       	out	0x3d, r28	; 61
	int amountOfIntersects = 0;
	int routes[2][20];
    amountOfIntersects = readGrid(routes);
     948:	ce 01       	movw	r24, r28
     94a:	01 96       	adiw	r24, 0x01	; 1
     94c:	0e 94 b6 01 	call	0x36c	; 0x36c <readGrid>
     950:	8c 01       	movw	r16, r24
	int orderX[sizeOfOrder] = { 2, 5, 3, 4};    // replace with user input
     952:	88 e0       	ldi	r24, 0x08	; 8
     954:	e2 e1       	ldi	r30, 0x12	; 18
     956:	f1 e0       	ldi	r31, 0x01	; 1
     958:	de 01       	movw	r26, r28
     95a:	af 5a       	subi	r26, 0xAF	; 175
     95c:	bf 4f       	sbci	r27, 0xFF	; 255
     95e:	01 90       	ld	r0, Z+
     960:	0d 92       	st	X+, r0
     962:	8a 95       	dec	r24
     964:	e1 f7       	brne	.-8      	; 0x95e <main+0x30>
	int orderY[sizeOfOrder] = { 3, 1, 4, 2};    // replace with user input
     966:	88 e0       	ldi	r24, 0x08	; 8
     968:	ea e1       	ldi	r30, 0x1A	; 26
     96a:	f1 e0       	ldi	r31, 0x01	; 1
     96c:	de 01       	movw	r26, r28
     96e:	a7 5a       	subi	r26, 0xA7	; 167
     970:	bf 4f       	sbci	r27, 0xFF	; 255
     972:	01 90       	ld	r0, Z+
     974:	0d 92       	st	X+, r0
     976:	8a 95       	dec	r24
     978:	e1 f7       	brne	.-8      	; 0x972 <main+0x44>
	sortOrder(orderX, orderY);
     97a:	be 01       	movw	r22, r28
     97c:	67 5a       	subi	r22, 0xA7	; 167
     97e:	7f 4f       	sbci	r23, 0xFF	; 255
     980:	ce 01       	movw	r24, r28
     982:	8f 5a       	subi	r24, 0xAF	; 175
     984:	9f 4f       	sbci	r25, 0xFF	; 255
     986:	0e 94 9e 00 	call	0x13c	; 0x13c <sortOrder>
	driveRoute(routes, 1, 0, amountOfIntersects);
     98a:	98 01       	movw	r18, r16
     98c:	40 e0       	ldi	r20, 0x00	; 0
     98e:	50 e0       	ldi	r21, 0x00	; 0
     990:	61 e0       	ldi	r22, 0x01	; 1
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	ce 01       	movw	r24, r28
     996:	01 96       	adiw	r24, 0x01	; 1
     998:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <driveRoute>
	fetchOrder(orderX, orderY, routes);	
     99c:	ae 01       	movw	r20, r28
     99e:	4f 5f       	subi	r20, 0xFF	; 255
     9a0:	5f 4f       	sbci	r21, 0xFF	; 255
     9a2:	be 01       	movw	r22, r28
     9a4:	67 5a       	subi	r22, 0xA7	; 167
     9a6:	7f 4f       	sbci	r23, 0xFF	; 255
     9a8:	ce 01       	movw	r24, r28
     9aa:	8f 5a       	subi	r24, 0xAF	; 175
     9ac:	9f 4f       	sbci	r25, 0xFF	; 255
     9ae:	0e 94 ce 03 	call	0x79c	; 0x79c <fetchOrder>
				
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	c0 5a       	subi	r28, 0xA0	; 160
     9b8:	df 4f       	sbci	r29, 0xFF	; 255
     9ba:	0f b6       	in	r0, 0x3f	; 63
     9bc:	f8 94       	cli
     9be:	de bf       	out	0x3e, r29	; 62
     9c0:	0f be       	out	0x3f, r0	; 63
     9c2:	cd bf       	out	0x3d, r28	; 61
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	1f 91       	pop	r17
     9ca:	0f 91       	pop	r16
     9cc:	08 95       	ret

000009ce <motorControl>:

int speedCurrent = 0;
int speedCurrentRight = 0;
int speedCurrentLeft = 0;

void motorControl(int speed, char direction, float aggressionFactor){
     9ce:	2f 92       	push	r2
     9d0:	3f 92       	push	r3
     9d2:	4f 92       	push	r4
     9d4:	5f 92       	push	r5
     9d6:	6f 92       	push	r6
     9d8:	7f 92       	push	r7
     9da:	8f 92       	push	r8
     9dc:	9f 92       	push	r9
     9de:	af 92       	push	r10
     9e0:	bf 92       	push	r11
     9e2:	cf 92       	push	r12
     9e4:	df 92       	push	r13
     9e6:	ef 92       	push	r14
     9e8:	ff 92       	push	r15
     9ea:	0f 93       	push	r16
     9ec:	1f 93       	push	r17
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	cd b7       	in	r28, 0x3d	; 61
     9f4:	de b7       	in	r29, 0x3e	; 62
     9f6:	66 97       	sbiw	r28, 0x16	; 22
     9f8:	0f b6       	in	r0, 0x3f	; 63
     9fa:	f8 94       	cli
     9fc:	de bf       	out	0x3e, r29	; 62
     9fe:	0f be       	out	0x3f, r0	; 63
     a00:	cd bf       	out	0x3d, r28	; 61
     a02:	1c 01       	movw	r2, r24
     a04:	29 83       	std	Y+1, r18	; 0x01
     a06:	3a 83       	std	Y+2, r19	; 0x02
     a08:	4b 83       	std	Y+3, r20	; 0x03
     a0a:	5c 83       	std	Y+4, r21	; 0x04
	int setSpeedRight = 0;
	int setSpeedLeft = 0;
	
	//directions direction;

	switch (direction){
     a0c:	66 34       	cpi	r22, 0x46	; 70
     a0e:	61 f0       	breq	.+24     	; 0xa28 <motorControl+0x5a>
     a10:	20 f4       	brcc	.+8      	; 0xa1a <motorControl+0x4c>
     a12:	62 34       	cpi	r22, 0x42	; 66
     a14:	09 f4       	brne	.+2      	; 0xa18 <motorControl+0x4a>
     a16:	95 c0       	rjmp	.+298    	; 0xb42 <motorControl+0x174>
     a18:	08 c4       	rjmp	.+2064   	; 0x122a <motorControl+0x85c>
     a1a:	6c 34       	cpi	r22, 0x4C	; 76
     a1c:	09 f4       	brne	.+2      	; 0xa20 <motorControl+0x52>
     a1e:	a9 c2       	rjmp	.+1362   	; 0xf72 <motorControl+0x5a4>
     a20:	62 35       	cpi	r22, 0x52	; 82
     a22:	09 f4       	brne	.+2      	; 0xa26 <motorControl+0x58>
     a24:	1b c1       	rjmp	.+566    	; 0xc5c <motorControl+0x28e>
     a26:	01 c4       	rjmp	.+2050   	; 0x122a <motorControl+0x85c>
		case 'F':
		
		setSpeed = speed - speedCurrent;
     a28:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <speedCurrent>
     a2c:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <speedCurrent+0x1>
     a30:	91 01       	movw	r18, r2
     a32:	28 1b       	sub	r18, r24
     a34:	39 0b       	sbc	r19, r25
     a36:	45 e6       	ldi	r20, 0x65	; 101
     a38:	50 e0       	ldi	r21, 0x00	; 0
     a3a:	5a 87       	std	Y+10, r21	; 0x0a
     a3c:	49 87       	std	Y+9, r20	; 0x09
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     a3e:	41 2c       	mov	r4, r1
     a40:	51 2c       	mov	r5, r1
     a42:	32 01       	movw	r6, r4
			timerStart = get_ms();
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2*M_PI ) ) * sin ( 2* M_PI * accelerationCounter ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     a44:	03 2e       	mov	r0, r19
     a46:	00 0c       	add	r0, r0
     a48:	44 0b       	sbc	r20, r20
     a4a:	55 0b       	sbc	r21, r21
     a4c:	2d 83       	std	Y+5, r18	; 0x05
     a4e:	3e 83       	std	Y+6, r19	; 0x06
     a50:	4f 83       	std	Y+7, r20	; 0x07
     a52:	58 87       	std	Y+8, r21	; 0x08
		case 'F':
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     a54:	0e 94 bb 12 	call	0x2576	; 0x2576 <get_ms>
     a58:	8b 01       	movw	r16, r22
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2*M_PI ) ) * sin ( 2* M_PI * accelerationCounter ) ) );
     a5a:	2b ed       	ldi	r18, 0xDB	; 219
     a5c:	3f e0       	ldi	r19, 0x0F	; 15
     a5e:	49 ec       	ldi	r20, 0xC9	; 201
     a60:	50 e4       	ldi	r21, 0x40	; 64
     a62:	c3 01       	movw	r24, r6
     a64:	b2 01       	movw	r22, r4
     a66:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3>
     a6a:	0e 94 8b 0c 	call	0x1916	; 0x1916 <sin>
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     a6e:	23 e8       	ldi	r18, 0x83	; 131
     a70:	39 ef       	ldi	r19, 0xF9	; 249
     a72:	42 e2       	ldi	r20, 0x22	; 34
     a74:	5e e3       	ldi	r21, 0x3E	; 62
     a76:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3>
     a7a:	9b 01       	movw	r18, r22
     a7c:	ac 01       	movw	r20, r24
     a7e:	c3 01       	movw	r24, r6
     a80:	b2 01       	movw	r22, r4
     a82:	0e 94 bf 0a 	call	0x157e	; 0x157e <__subsf3>
     a86:	4b 01       	movw	r8, r22
     a88:	5c 01       	movw	r10, r24
     a8a:	6d 81       	ldd	r22, Y+5	; 0x05
     a8c:	7e 81       	ldd	r23, Y+6	; 0x06
     a8e:	8f 81       	ldd	r24, Y+7	; 0x07
     a90:	98 85       	ldd	r25, Y+8	; 0x08
     a92:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__floatsisf>
     a96:	9b 01       	movw	r18, r22
     a98:	ac 01       	movw	r20, r24
     a9a:	c5 01       	movw	r24, r10
     a9c:	b4 01       	movw	r22, r8
     a9e:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3>
     aa2:	4b 01       	movw	r8, r22
     aa4:	5c 01       	movw	r10, r24
     aa6:	60 91 a1 01 	lds	r22, 0x01A1	; 0x8001a1 <speedCurrent>
     aaa:	70 91 a2 01 	lds	r23, 0x01A2	; 0x8001a2 <speedCurrent+0x1>
     aae:	07 2e       	mov	r0, r23
     ab0:	00 0c       	add	r0, r0
     ab2:	88 0b       	sbc	r24, r24
     ab4:	99 0b       	sbc	r25, r25
     ab6:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__floatsisf>
     aba:	9b 01       	movw	r18, r22
     abc:	ac 01       	movw	r20, r24
     abe:	c5 01       	movw	r24, r10
     ac0:	b4 01       	movw	r22, r8
     ac2:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__addsf3>
     ac6:	0e 94 31 0b 	call	0x1662	; 0x1662 <__fixsfsi>
     aca:	dc 01       	movw	r26, r24
     acc:	cb 01       	movw	r24, r22
     ace:	bc 01       	movw	r22, r24
     ad0:	0e 94 38 12 	call	0x2470	; 0x2470 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     ad4:	48 01       	movw	r8, r16
     ad6:	11 0f       	add	r17, r17
     ad8:	aa 08       	sbc	r10, r10
     ada:	bb 08       	sbc	r11, r11
     adc:	0e 94 bb 12 	call	0x2576	; 0x2576 <get_ms>
     ae0:	68 19       	sub	r22, r8
     ae2:	79 09       	sbc	r23, r9
     ae4:	8a 09       	sbc	r24, r10
     ae6:	9b 09       	sbc	r25, r11
     ae8:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatunsisf>
     aec:	6b 01       	movw	r12, r22
     aee:	7c 01       	movw	r14, r24
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	40 e2       	ldi	r20, 0x20	; 32
     af6:	51 e4       	ldi	r21, 0x41	; 65
     af8:	69 81       	ldd	r22, Y+1	; 0x01
     afa:	7a 81       	ldd	r23, Y+2	; 0x02
     afc:	8b 81       	ldd	r24, Y+3	; 0x03
     afe:	9c 81       	ldd	r25, Y+4	; 0x04
     b00:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3>
     b04:	9b 01       	movw	r18, r22
     b06:	ac 01       	movw	r20, r24
     b08:	c7 01       	movw	r24, r14
     b0a:	b6 01       	movw	r22, r12
     b0c:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__cmpsf2>
     b10:	88 23       	and	r24, r24
     b12:	24 f3       	brlt	.-56     	; 0xadc <motorControl+0x10e>
	switch (direction){
		case 'F':
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     b14:	2a e0       	ldi	r18, 0x0A	; 10
     b16:	37 ed       	ldi	r19, 0xD7	; 215
     b18:	43 e2       	ldi	r20, 0x23	; 35
     b1a:	5c e3       	ldi	r21, 0x3C	; 60
     b1c:	c3 01       	movw	r24, r6
     b1e:	b2 01       	movw	r22, r4
     b20:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__addsf3>
     b24:	2b 01       	movw	r4, r22
     b26:	3c 01       	movw	r6, r24
     b28:	a9 85       	ldd	r26, Y+9	; 0x09
     b2a:	ba 85       	ldd	r27, Y+10	; 0x0a
     b2c:	11 97       	sbiw	r26, 0x01	; 1
     b2e:	ba 87       	std	Y+10, r27	; 0x0a
     b30:	a9 87       	std	Y+9, r26	; 0x09
     b32:	ab 2b       	or	r26, r27
     b34:	09 f0       	breq	.+2      	; 0xb38 <motorControl+0x16a>
     b36:	8e cf       	rjmp	.-228    	; 0xa54 <motorControl+0x86>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrent = speed;
     b38:	30 92 a2 01 	sts	0x01A2, r3	; 0x8001a2 <speedCurrent+0x1>
     b3c:	20 92 a1 01 	sts	0x01A1, r2	; 0x8001a1 <speedCurrent>
		break;
     b40:	7a c3       	rjmp	.+1780   	; 0x1236 <motorControl+0x868>
		
		case 'B':
		
		setSpeed = speed - speedCurrent;
     b42:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <speedCurrent>
     b46:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <speedCurrent+0x1>
     b4a:	91 01       	movw	r18, r2
     b4c:	28 1b       	sub	r18, r24
     b4e:	39 0b       	sbc	r19, r25
     b50:	45 e6       	ldi	r20, 0x65	; 101
     b52:	50 e0       	ldi	r21, 0x00	; 0
     b54:	5a 87       	std	Y+10, r21	; 0x0a
     b56:	49 87       	std	Y+9, r20	; 0x09
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     b58:	41 2c       	mov	r4, r1
     b5a:	51 2c       	mov	r5, r1
     b5c:	32 01       	movw	r6, r4
			timerStart = get_ms();
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     b5e:	03 2e       	mov	r0, r19
     b60:	00 0c       	add	r0, r0
     b62:	44 0b       	sbc	r20, r20
     b64:	55 0b       	sbc	r21, r21
     b66:	2d 83       	std	Y+5, r18	; 0x05
     b68:	3e 83       	std	Y+6, r19	; 0x06
     b6a:	4f 83       	std	Y+7, r20	; 0x07
     b6c:	58 87       	std	Y+8, r21	; 0x08
		case 'B':
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     b6e:	0e 94 bb 12 	call	0x2576	; 0x2576 <get_ms>
     b72:	8b 01       	movw	r16, r22
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) );
     b74:	2b ed       	ldi	r18, 0xDB	; 219
     b76:	3f e0       	ldi	r19, 0x0F	; 15
     b78:	49 ec       	ldi	r20, 0xC9	; 201
     b7a:	50 e4       	ldi	r21, 0x40	; 64
     b7c:	c3 01       	movw	r24, r6
     b7e:	b2 01       	movw	r22, r4
     b80:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3>
     b84:	0e 94 8b 0c 	call	0x1916	; 0x1916 <sin>
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     b88:	23 e8       	ldi	r18, 0x83	; 131
     b8a:	39 ef       	ldi	r19, 0xF9	; 249
     b8c:	42 e2       	ldi	r20, 0x22	; 34
     b8e:	5e e3       	ldi	r21, 0x3E	; 62
     b90:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3>
     b94:	9b 01       	movw	r18, r22
     b96:	ac 01       	movw	r20, r24
     b98:	c3 01       	movw	r24, r6
     b9a:	b2 01       	movw	r22, r4
     b9c:	0e 94 bf 0a 	call	0x157e	; 0x157e <__subsf3>
     ba0:	4b 01       	movw	r8, r22
     ba2:	5c 01       	movw	r10, r24
     ba4:	6d 81       	ldd	r22, Y+5	; 0x05
     ba6:	7e 81       	ldd	r23, Y+6	; 0x06
     ba8:	8f 81       	ldd	r24, Y+7	; 0x07
     baa:	98 85       	ldd	r25, Y+8	; 0x08
     bac:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__floatsisf>
     bb0:	9b 01       	movw	r18, r22
     bb2:	ac 01       	movw	r20, r24
     bb4:	c5 01       	movw	r24, r10
     bb6:	b4 01       	movw	r22, r8
     bb8:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3>
     bbc:	4b 01       	movw	r8, r22
     bbe:	5c 01       	movw	r10, r24
     bc0:	60 91 a1 01 	lds	r22, 0x01A1	; 0x8001a1 <speedCurrent>
     bc4:	70 91 a2 01 	lds	r23, 0x01A2	; 0x8001a2 <speedCurrent+0x1>
     bc8:	07 2e       	mov	r0, r23
     bca:	00 0c       	add	r0, r0
     bcc:	88 0b       	sbc	r24, r24
     bce:	99 0b       	sbc	r25, r25
     bd0:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__floatsisf>
     bd4:	9b 01       	movw	r18, r22
     bd6:	ac 01       	movw	r20, r24
     bd8:	c5 01       	movw	r24, r10
     bda:	b4 01       	movw	r22, r8
     bdc:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__addsf3>
     be0:	0e 94 31 0b 	call	0x1662	; 0x1662 <__fixsfsi>
     be4:	dc 01       	movw	r26, r24
     be6:	cb 01       	movw	r24, r22
     be8:	bc 01       	movw	r22, r24
     bea:	0e 94 38 12 	call	0x2470	; 0x2470 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     bee:	48 01       	movw	r8, r16
     bf0:	11 0f       	add	r17, r17
     bf2:	aa 08       	sbc	r10, r10
     bf4:	bb 08       	sbc	r11, r11
     bf6:	0e 94 bb 12 	call	0x2576	; 0x2576 <get_ms>
     bfa:	68 19       	sub	r22, r8
     bfc:	79 09       	sbc	r23, r9
     bfe:	8a 09       	sbc	r24, r10
     c00:	9b 09       	sbc	r25, r11
     c02:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatunsisf>
     c06:	6b 01       	movw	r12, r22
     c08:	7c 01       	movw	r14, r24
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e2       	ldi	r20, 0x20	; 32
     c10:	51 e4       	ldi	r21, 0x41	; 65
     c12:	69 81       	ldd	r22, Y+1	; 0x01
     c14:	7a 81       	ldd	r23, Y+2	; 0x02
     c16:	8b 81       	ldd	r24, Y+3	; 0x03
     c18:	9c 81       	ldd	r25, Y+4	; 0x04
     c1a:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3>
     c1e:	9b 01       	movw	r18, r22
     c20:	ac 01       	movw	r20, r24
     c22:	c7 01       	movw	r24, r14
     c24:	b6 01       	movw	r22, r12
     c26:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__cmpsf2>
     c2a:	88 23       	and	r24, r24
     c2c:	24 f3       	brlt	.-56     	; 0xbf6 <motorControl+0x228>
		
		case 'B':
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     c2e:	2a e0       	ldi	r18, 0x0A	; 10
     c30:	37 ed       	ldi	r19, 0xD7	; 215
     c32:	43 e2       	ldi	r20, 0x23	; 35
     c34:	5c e3       	ldi	r21, 0x3C	; 60
     c36:	c3 01       	movw	r24, r6
     c38:	b2 01       	movw	r22, r4
     c3a:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__addsf3>
     c3e:	2b 01       	movw	r4, r22
     c40:	3c 01       	movw	r6, r24
     c42:	a9 85       	ldd	r26, Y+9	; 0x09
     c44:	ba 85       	ldd	r27, Y+10	; 0x0a
     c46:	11 97       	sbiw	r26, 0x01	; 1
     c48:	ba 87       	std	Y+10, r27	; 0x0a
     c4a:	a9 87       	std	Y+9, r26	; 0x09
     c4c:	ab 2b       	or	r26, r27
     c4e:	09 f0       	breq	.+2      	; 0xc52 <motorControl+0x284>
     c50:	8e cf       	rjmp	.-228    	; 0xb6e <motorControl+0x1a0>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrent = speed;
     c52:	30 92 a2 01 	sts	0x01A2, r3	; 0x8001a2 <speedCurrent+0x1>
     c56:	20 92 a1 01 	sts	0x01A1, r2	; 0x8001a1 <speedCurrent>
		break;
     c5a:	ed c2       	rjmp	.+1498   	; 0x1236 <motorControl+0x868>

		case 'R':
		
		setSpeedRight = speed + speedCurrentRight;
     c5c:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <speedCurrentRight>
     c60:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <speedCurrentRight+0x1>
     c64:	82 0d       	add	r24, r2
     c66:	93 1d       	adc	r25, r3
		setSpeedLeft = speed - speedCurrentLeft;
     c68:	20 91 9d 01 	lds	r18, 0x019D	; 0x80019d <speedCurrentLeft>
     c6c:	30 91 9e 01 	lds	r19, 0x019E	; 0x80019e <speedCurrentLeft+0x1>
     c70:	a1 01       	movw	r20, r2
     c72:	42 1b       	sub	r20, r18
     c74:	53 0b       	sbc	r21, r19
     c76:	9a 01       	movw	r18, r20
     c78:	05 e6       	ldi	r16, 0x65	; 101
     c7a:	10 e0       	ldi	r17, 0x00	; 0
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     c7c:	1d 82       	std	Y+5, r1	; 0x05
     c7e:	1e 82       	std	Y+6, r1	; 0x06
     c80:	1f 82       	std	Y+7, r1	; 0x07
     c82:	18 86       	std	Y+8, r1	; 0x08
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			motorLeftSpeed = speedCurrent + (speedCurrentLeft + (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     c84:	ac 01       	movw	r20, r24
     c86:	99 0f       	add	r25, r25
     c88:	66 0b       	sbc	r22, r22
     c8a:	77 0b       	sbc	r23, r23
     c8c:	4d 87       	std	Y+13, r20	; 0x0d
     c8e:	5e 87       	std	Y+14, r21	; 0x0e
     c90:	6f 87       	std	Y+15, r22	; 0x0f
     c92:	78 8b       	std	Y+16, r23	; 0x10
     c94:	b9 01       	movw	r22, r18
     c96:	33 0f       	add	r19, r19
     c98:	88 0b       	sbc	r24, r24
     c9a:	99 0b       	sbc	r25, r25
     c9c:	69 8b       	std	Y+17, r22	; 0x11
     c9e:	7a 8b       	std	Y+18, r23	; 0x12
     ca0:	8b 8b       	std	Y+19, r24	; 0x13
     ca2:	9c 8b       	std	Y+20, r25	; 0x14
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     ca4:	0e 94 bb 12 	call	0x2576	; 0x2576 <get_ms>
     ca8:	7e 8b       	std	Y+22, r23	; 0x16
     caa:	6d 8b       	std	Y+21, r22	; 0x15
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
     cac:	60 91 a1 01 	lds	r22, 0x01A1	; 0x8001a1 <speedCurrent>
     cb0:	70 91 a2 01 	lds	r23, 0x01A2	; 0x8001a2 <speedCurrent+0x1>
     cb4:	07 2e       	mov	r0, r23
     cb6:	00 0c       	add	r0, r0
     cb8:	88 0b       	sbc	r24, r24
     cba:	99 0b       	sbc	r25, r25
     cbc:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__floatsisf>
     cc0:	69 87       	std	Y+9, r22	; 0x09
     cc2:	7a 87       	std	Y+10, r23	; 0x0a
     cc4:	8b 87       	std	Y+11, r24	; 0x0b
     cc6:	9c 87       	std	Y+12, r25	; 0x0c
     cc8:	2b ed       	ldi	r18, 0xDB	; 219
     cca:	3f e0       	ldi	r19, 0x0F	; 15
     ccc:	49 ec       	ldi	r20, 0xC9	; 201
     cce:	50 e4       	ldi	r21, 0x40	; 64
     cd0:	6d 81       	ldd	r22, Y+5	; 0x05
     cd2:	7e 81       	ldd	r23, Y+6	; 0x06
     cd4:	8f 81       	ldd	r24, Y+7	; 0x07
     cd6:	98 85       	ldd	r25, Y+8	; 0x08
     cd8:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3>
     cdc:	0e 94 8b 0c 	call	0x1916	; 0x1916 <sin>
     ce0:	23 e8       	ldi	r18, 0x83	; 131
     ce2:	39 ef       	ldi	r19, 0xF9	; 249
     ce4:	42 e2       	ldi	r20, 0x22	; 34
     ce6:	5e e3       	ldi	r21, 0x3E	; 62
     ce8:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3>
     cec:	2d 81       	ldd	r18, Y+5	; 0x05
     cee:	3e 81       	ldd	r19, Y+6	; 0x06
     cf0:	4f 81       	ldd	r20, Y+7	; 0x07
     cf2:	58 85       	ldd	r21, Y+8	; 0x08
     cf4:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__addsf3>
     cf8:	4b 01       	movw	r8, r22
     cfa:	5c 01       	movw	r10, r24
			
			motorLeftSpeed = speedCurrent + (speedCurrentLeft + (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     cfc:	60 91 9f 01 	lds	r22, 0x019F	; 0x80019f <speedCurrentRight>
     d00:	70 91 a0 01 	lds	r23, 0x01A0	; 0x8001a0 <speedCurrentRight+0x1>
     d04:	07 2e       	mov	r0, r23
     d06:	00 0c       	add	r0, r0
     d08:	88 0b       	sbc	r24, r24
     d0a:	99 0b       	sbc	r25, r25
     d0c:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__floatsisf>
     d10:	2b 01       	movw	r4, r22
     d12:	3c 01       	movw	r6, r24
     d14:	6d 85       	ldd	r22, Y+13	; 0x0d
     d16:	7e 85       	ldd	r23, Y+14	; 0x0e
     d18:	8f 85       	ldd	r24, Y+15	; 0x0f
     d1a:	98 89       	ldd	r25, Y+16	; 0x10
     d1c:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__floatsisf>
     d20:	a5 01       	movw	r20, r10
     d22:	94 01       	movw	r18, r8
     d24:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3>
     d28:	9b 01       	movw	r18, r22
     d2a:	ac 01       	movw	r20, r24
     d2c:	c3 01       	movw	r24, r6
     d2e:	b2 01       	movw	r22, r4
     d30:	0e 94 bf 0a 	call	0x157e	; 0x157e <__subsf3>
     d34:	29 85       	ldd	r18, Y+9	; 0x09
     d36:	3a 85       	ldd	r19, Y+10	; 0x0a
     d38:	4b 85       	ldd	r20, Y+11	; 0x0b
     d3a:	5c 85       	ldd	r21, Y+12	; 0x0c
     d3c:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__addsf3>
     d40:	0e 94 31 0b 	call	0x1662	; 0x1662 <__fixsfsi>
     d44:	2b 01       	movw	r4, r22
     d46:	3c 01       	movw	r6, r24
     d48:	60 91 9d 01 	lds	r22, 0x019D	; 0x80019d <speedCurrentLeft>
     d4c:	70 91 9e 01 	lds	r23, 0x019E	; 0x80019e <speedCurrentLeft+0x1>
     d50:	07 2e       	mov	r0, r23
     d52:	00 0c       	add	r0, r0
     d54:	88 0b       	sbc	r24, r24
     d56:	99 0b       	sbc	r25, r25
     d58:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__floatsisf>
     d5c:	6b 01       	movw	r12, r22
     d5e:	7c 01       	movw	r14, r24
     d60:	69 89       	ldd	r22, Y+17	; 0x11
     d62:	7a 89       	ldd	r23, Y+18	; 0x12
     d64:	8b 89       	ldd	r24, Y+19	; 0x13
     d66:	9c 89       	ldd	r25, Y+20	; 0x14
     d68:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__floatsisf>
     d6c:	a5 01       	movw	r20, r10
     d6e:	94 01       	movw	r18, r8
     d70:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3>
     d74:	9b 01       	movw	r18, r22
     d76:	ac 01       	movw	r20, r24
     d78:	c7 01       	movw	r24, r14
     d7a:	b6 01       	movw	r22, r12
     d7c:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__addsf3>
     d80:	29 85       	ldd	r18, Y+9	; 0x09
     d82:	3a 85       	ldd	r19, Y+10	; 0x0a
     d84:	4b 85       	ldd	r20, Y+11	; 0x0b
     d86:	5c 85       	ldd	r21, Y+12	; 0x0c
     d88:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__addsf3>
     d8c:	0e 94 31 0b 	call	0x1662	; 0x1662 <__fixsfsi>
     d90:	dc 01       	movw	r26, r24
     d92:	cb 01       	movw	r24, r22
     d94:	b2 01       	movw	r22, r4
     d96:	0e 94 38 12 	call	0x2470	; 0x2470 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     d9a:	8d 89       	ldd	r24, Y+21	; 0x15
     d9c:	9e 89       	ldd	r25, Y+22	; 0x16
     d9e:	4c 01       	movw	r8, r24
     da0:	99 0f       	add	r25, r25
     da2:	aa 08       	sbc	r10, r10
     da4:	bb 08       	sbc	r11, r11
     da6:	0e 94 bb 12 	call	0x2576	; 0x2576 <get_ms>
     daa:	6b 01       	movw	r12, r22
     dac:	7c 01       	movw	r14, r24
     dae:	20 e0       	ldi	r18, 0x00	; 0
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	40 e2       	ldi	r20, 0x20	; 32
     db4:	51 e4       	ldi	r21, 0x41	; 65
     db6:	69 81       	ldd	r22, Y+1	; 0x01
     db8:	7a 81       	ldd	r23, Y+2	; 0x02
     dba:	8b 81       	ldd	r24, Y+3	; 0x03
     dbc:	9c 81       	ldd	r25, Y+4	; 0x04
     dbe:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3>
     dc2:	2b 01       	movw	r4, r22
     dc4:	3c 01       	movw	r6, r24
     dc6:	c7 01       	movw	r24, r14
     dc8:	b6 01       	movw	r22, r12
     dca:	68 19       	sub	r22, r8
     dcc:	79 09       	sbc	r23, r9
     dce:	8a 09       	sbc	r24, r10
     dd0:	9b 09       	sbc	r25, r11
     dd2:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatunsisf>
     dd6:	a3 01       	movw	r20, r6
     dd8:	92 01       	movw	r18, r4
     dda:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__cmpsf2>
     dde:	88 23       	and	r24, r24
     de0:	14 f3       	brlt	.-60     	; 0xda6 <motorControl+0x3d8>
		case 'R':
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     de2:	2a e0       	ldi	r18, 0x0A	; 10
     de4:	37 ed       	ldi	r19, 0xD7	; 215
     de6:	43 e2       	ldi	r20, 0x23	; 35
     de8:	5c e3       	ldi	r21, 0x3C	; 60
     dea:	6d 81       	ldd	r22, Y+5	; 0x05
     dec:	7e 81       	ldd	r23, Y+6	; 0x06
     dee:	8f 81       	ldd	r24, Y+7	; 0x07
     df0:	98 85       	ldd	r25, Y+8	; 0x08
     df2:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__addsf3>
     df6:	6d 83       	std	Y+5, r22	; 0x05
     df8:	7e 83       	std	Y+6, r23	; 0x06
     dfa:	8f 83       	std	Y+7, r24	; 0x07
     dfc:	98 87       	std	Y+8, r25	; 0x08
     dfe:	01 50       	subi	r16, 0x01	; 1
     e00:	11 09       	sbc	r17, r1
     e02:	09 f0       	breq	.+2      	; 0xe06 <motorControl+0x438>
     e04:	4f cf       	rjmp	.-354    	; 0xca4 <motorControl+0x2d6>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = -speed;
     e06:	88 27       	eor	r24, r24
     e08:	99 27       	eor	r25, r25
     e0a:	82 19       	sub	r24, r2
     e0c:	93 09       	sbc	r25, r3
     e0e:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <speedCurrentRight+0x1>
     e12:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <speedCurrentRight>
		speedCurrentLeft = speed;
     e16:	30 92 9e 01 	sts	0x019E, r3	; 0x80019e <speedCurrentLeft+0x1>
     e1a:	20 92 9d 01 	sts	0x019D, r2	; 0x80019d <speedCurrentLeft>
     e1e:	05 e6       	ldi	r16, 0x65	; 101
     e20:	10 e0       	ldi	r17, 0x00	; 0
		speed = 0;
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     e22:	19 82       	std	Y+1, r1	; 0x01
     e24:	1a 82       	std	Y+2, r1	; 0x02
     e26:	1b 82       	std	Y+3, r1	; 0x03
     e28:	1c 82       	std	Y+4, r1	; 0x04
			timerStart = get_ms();
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
     e2a:	9c 01       	movw	r18, r24
     e2c:	99 0f       	add	r25, r25
     e2e:	44 0b       	sbc	r20, r20
     e30:	55 0b       	sbc	r21, r21
     e32:	29 87       	std	Y+9, r18	; 0x09
     e34:	3a 87       	std	Y+10, r19	; 0x0a
     e36:	4b 87       	std	Y+11, r20	; 0x0b
     e38:	5c 87       	std	Y+12, r21	; 0x0c
     e3a:	c1 2c       	mov	r12, r1
     e3c:	d1 2c       	mov	r13, r1
     e3e:	76 01       	movw	r14, r12
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     e40:	0e 94 bb 12 	call	0x2576	; 0x2576 <get_ms>
     e44:	7e 87       	std	Y+14, r23	; 0x0e
     e46:	6d 87       	std	Y+13, r22	; 0x0d
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
     e48:	60 91 a1 01 	lds	r22, 0x01A1	; 0x8001a1 <speedCurrent>
     e4c:	70 91 a2 01 	lds	r23, 0x01A2	; 0x8001a2 <speedCurrent+0x1>
     e50:	07 2e       	mov	r0, r23
     e52:	00 0c       	add	r0, r0
     e54:	88 0b       	sbc	r24, r24
     e56:	99 0b       	sbc	r25, r25
     e58:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__floatsisf>
     e5c:	69 83       	std	Y+1, r22	; 0x01
     e5e:	7a 83       	std	Y+2, r23	; 0x02
     e60:	8b 83       	std	Y+3, r24	; 0x03
     e62:	9c 83       	std	Y+4, r25	; 0x04
     e64:	2b ed       	ldi	r18, 0xDB	; 219
     e66:	3f e0       	ldi	r19, 0x0F	; 15
     e68:	49 ec       	ldi	r20, 0xC9	; 201
     e6a:	50 e4       	ldi	r21, 0x40	; 64
     e6c:	c7 01       	movw	r24, r14
     e6e:	b6 01       	movw	r22, r12
     e70:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3>
     e74:	0e 94 8b 0c 	call	0x1916	; 0x1916 <sin>
     e78:	23 e8       	ldi	r18, 0x83	; 131
     e7a:	39 ef       	ldi	r19, 0xF9	; 249
     e7c:	42 e2       	ldi	r20, 0x22	; 34
     e7e:	5e e3       	ldi	r21, 0x3E	; 62
     e80:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3>
     e84:	a7 01       	movw	r20, r14
     e86:	96 01       	movw	r18, r12
     e88:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__addsf3>
     e8c:	4b 01       	movw	r8, r22
     e8e:	5c 01       	movw	r10, r24
     e90:	69 85       	ldd	r22, Y+9	; 0x09
     e92:	7a 85       	ldd	r23, Y+10	; 0x0a
     e94:	8b 85       	ldd	r24, Y+11	; 0x0b
     e96:	9c 85       	ldd	r25, Y+12	; 0x0c
     e98:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__floatsisf>
     e9c:	9b 01       	movw	r18, r22
     e9e:	ac 01       	movw	r20, r24
     ea0:	c5 01       	movw	r24, r10
     ea2:	b4 01       	movw	r22, r8
     ea4:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3>
     ea8:	4b 01       	movw	r8, r22
     eaa:	5c 01       	movw	r10, r24
			
			motorLeftSpeed = speedCurrent + (speedCurrentLeft + (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     eac:	60 91 9f 01 	lds	r22, 0x019F	; 0x80019f <speedCurrentRight>
     eb0:	70 91 a0 01 	lds	r23, 0x01A0	; 0x8001a0 <speedCurrentRight+0x1>
     eb4:	07 2e       	mov	r0, r23
     eb6:	00 0c       	add	r0, r0
     eb8:	88 0b       	sbc	r24, r24
     eba:	99 0b       	sbc	r25, r25
     ebc:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__floatsisf>
     ec0:	a5 01       	movw	r20, r10
     ec2:	94 01       	movw	r18, r8
     ec4:	0e 94 bf 0a 	call	0x157e	; 0x157e <__subsf3>
     ec8:	29 81       	ldd	r18, Y+1	; 0x01
     eca:	3a 81       	ldd	r19, Y+2	; 0x02
     ecc:	4b 81       	ldd	r20, Y+3	; 0x03
     ece:	5c 81       	ldd	r21, Y+4	; 0x04
     ed0:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__addsf3>
     ed4:	0e 94 31 0b 	call	0x1662	; 0x1662 <__fixsfsi>
     ed8:	6d 83       	std	Y+5, r22	; 0x05
     eda:	7e 83       	std	Y+6, r23	; 0x06
     edc:	8f 83       	std	Y+7, r24	; 0x07
     ede:	98 87       	std	Y+8, r25	; 0x08
     ee0:	60 91 9d 01 	lds	r22, 0x019D	; 0x80019d <speedCurrentLeft>
     ee4:	70 91 9e 01 	lds	r23, 0x019E	; 0x80019e <speedCurrentLeft+0x1>
     ee8:	07 2e       	mov	r0, r23
     eea:	00 0c       	add	r0, r0
     eec:	88 0b       	sbc	r24, r24
     eee:	99 0b       	sbc	r25, r25
     ef0:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__floatsisf>
     ef4:	a5 01       	movw	r20, r10
     ef6:	94 01       	movw	r18, r8
     ef8:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__addsf3>
     efc:	29 81       	ldd	r18, Y+1	; 0x01
     efe:	3a 81       	ldd	r19, Y+2	; 0x02
     f00:	4b 81       	ldd	r20, Y+3	; 0x03
     f02:	5c 81       	ldd	r21, Y+4	; 0x04
     f04:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__addsf3>
     f08:	0e 94 31 0b 	call	0x1662	; 0x1662 <__fixsfsi>
     f0c:	dc 01       	movw	r26, r24
     f0e:	cb 01       	movw	r24, r22
     f10:	6d 81       	ldd	r22, Y+5	; 0x05
     f12:	7e 81       	ldd	r23, Y+6	; 0x06
     f14:	0e 94 38 12 	call	0x2470	; 0x2470 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     f18:	4d 85       	ldd	r20, Y+13	; 0x0d
     f1a:	5e 85       	ldd	r21, Y+14	; 0x0e
     f1c:	4a 01       	movw	r8, r20
     f1e:	55 0f       	add	r21, r21
     f20:	aa 08       	sbc	r10, r10
     f22:	bb 08       	sbc	r11, r11
     f24:	0e 94 bb 12 	call	0x2576	; 0x2576 <get_ms>
     f28:	68 19       	sub	r22, r8
     f2a:	79 09       	sbc	r23, r9
     f2c:	8a 09       	sbc	r24, r10
     f2e:	9b 09       	sbc	r25, r11
     f30:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatunsisf>
     f34:	9b 01       	movw	r18, r22
     f36:	ac 01       	movw	r20, r24
     f38:	c3 01       	movw	r24, r6
     f3a:	b2 01       	movw	r22, r4
     f3c:	0e 94 19 0c 	call	0x1832	; 0x1832 <__gesf2>
     f40:	18 16       	cp	r1, r24
     f42:	84 f3       	brlt	.-32     	; 0xf24 <motorControl+0x556>
		speed = 0;
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     f44:	2a e0       	ldi	r18, 0x0A	; 10
     f46:	37 ed       	ldi	r19, 0xD7	; 215
     f48:	43 e2       	ldi	r20, 0x23	; 35
     f4a:	5c e3       	ldi	r21, 0x3C	; 60
     f4c:	c7 01       	movw	r24, r14
     f4e:	b6 01       	movw	r22, r12
     f50:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__addsf3>
     f54:	6b 01       	movw	r12, r22
     f56:	7c 01       	movw	r14, r24
     f58:	01 50       	subi	r16, 0x01	; 1
     f5a:	11 09       	sbc	r17, r1
     f5c:	09 f0       	breq	.+2      	; 0xf60 <motorControl+0x592>
     f5e:	70 cf       	rjmp	.-288    	; 0xe40 <motorControl+0x472>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = -speed;
     f60:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <speedCurrentRight+0x1>
     f64:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <speedCurrentRight>
		speedCurrentLeft = speed;
     f68:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <speedCurrentLeft+0x1>
     f6c:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <speedCurrentLeft>
		
		break;
     f70:	62 c1       	rjmp	.+708    	; 0x1236 <motorControl+0x868>

		case 'L':
		
		setSpeedRight = speed - speedCurrentRight;
     f72:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <speedCurrentRight>
     f76:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <speedCurrentRight+0x1>
     f7a:	91 01       	movw	r18, r2
     f7c:	28 1b       	sub	r18, r24
     f7e:	39 0b       	sbc	r19, r25
		setSpeedLeft = speed + speedCurrentLeft;
     f80:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <speedCurrentLeft>
     f84:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <speedCurrentLeft+0x1>
     f88:	82 0d       	add	r24, r2
     f8a:	93 1d       	adc	r25, r3
     f8c:	65 e6       	ldi	r22, 0x65	; 101
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	7a 8b       	std	Y+18, r23	; 0x12
     f92:	69 8b       	std	Y+17, r22	; 0x11
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     f94:	1d 82       	std	Y+5, r1	; 0x05
     f96:	1e 82       	std	Y+6, r1	; 0x06
     f98:	1f 82       	std	Y+7, r1	; 0x07
     f9a:	18 86       	std	Y+8, r1	; 0x08
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
			
			motorLeftSpeed = speedCurrentLeft - (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ));
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     f9c:	a9 01       	movw	r20, r18
     f9e:	33 0f       	add	r19, r19
     fa0:	66 0b       	sbc	r22, r22
     fa2:	77 0b       	sbc	r23, r23
     fa4:	49 87       	std	Y+9, r20	; 0x09
     fa6:	5a 87       	std	Y+10, r21	; 0x0a
     fa8:	6b 87       	std	Y+11, r22	; 0x0b
     faa:	7c 87       	std	Y+12, r23	; 0x0c
     fac:	9c 01       	movw	r18, r24
     fae:	99 0f       	add	r25, r25
     fb0:	44 0b       	sbc	r20, r20
     fb2:	55 0b       	sbc	r21, r21
     fb4:	2d 87       	std	Y+13, r18	; 0x0d
     fb6:	3e 87       	std	Y+14, r19	; 0x0e
     fb8:	4f 87       	std	Y+15, r20	; 0x0f
     fba:	58 8b       	std	Y+16, r21	; 0x10
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     fbc:	0e 94 bb 12 	call	0x2576	; 0x2576 <get_ms>
     fc0:	8b 01       	movw	r16, r22
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
     fc2:	2b ed       	ldi	r18, 0xDB	; 219
     fc4:	3f e0       	ldi	r19, 0x0F	; 15
     fc6:	49 ec       	ldi	r20, 0xC9	; 201
     fc8:	50 e4       	ldi	r21, 0x40	; 64
     fca:	6d 81       	ldd	r22, Y+5	; 0x05
     fcc:	7e 81       	ldd	r23, Y+6	; 0x06
     fce:	8f 81       	ldd	r24, Y+7	; 0x07
     fd0:	98 85       	ldd	r25, Y+8	; 0x08
     fd2:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3>
     fd6:	0e 94 8b 0c 	call	0x1916	; 0x1916 <sin>
     fda:	23 e8       	ldi	r18, 0x83	; 131
     fdc:	39 ef       	ldi	r19, 0xF9	; 249
     fde:	42 e2       	ldi	r20, 0x22	; 34
     fe0:	5e e3       	ldi	r21, 0x3E	; 62
     fe2:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3>
     fe6:	2d 81       	ldd	r18, Y+5	; 0x05
     fe8:	3e 81       	ldd	r19, Y+6	; 0x06
     fea:	4f 81       	ldd	r20, Y+7	; 0x07
     fec:	58 85       	ldd	r21, Y+8	; 0x08
     fee:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__addsf3>
     ff2:	6b 01       	movw	r12, r22
     ff4:	7c 01       	movw	r14, r24
			
			motorLeftSpeed = speedCurrentLeft - (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ));
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     ff6:	60 91 9f 01 	lds	r22, 0x019F	; 0x80019f <speedCurrentRight>
     ffa:	70 91 a0 01 	lds	r23, 0x01A0	; 0x8001a0 <speedCurrentRight+0x1>
     ffe:	07 2e       	mov	r0, r23
    1000:	00 0c       	add	r0, r0
    1002:	88 0b       	sbc	r24, r24
    1004:	99 0b       	sbc	r25, r25
    1006:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__floatsisf>
    100a:	4b 01       	movw	r8, r22
    100c:	5c 01       	movw	r10, r24
    100e:	69 85       	ldd	r22, Y+9	; 0x09
    1010:	7a 85       	ldd	r23, Y+10	; 0x0a
    1012:	8b 85       	ldd	r24, Y+11	; 0x0b
    1014:	9c 85       	ldd	r25, Y+12	; 0x0c
    1016:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__floatsisf>
    101a:	a7 01       	movw	r20, r14
    101c:	96 01       	movw	r18, r12
    101e:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3>
    1022:	9b 01       	movw	r18, r22
    1024:	ac 01       	movw	r20, r24
    1026:	c5 01       	movw	r24, r10
    1028:	b4 01       	movw	r22, r8
    102a:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__addsf3>
    102e:	0e 94 31 0b 	call	0x1662	; 0x1662 <__fixsfsi>
    1032:	4b 01       	movw	r8, r22
    1034:	5c 01       	movw	r10, r24
    1036:	60 91 9d 01 	lds	r22, 0x019D	; 0x80019d <speedCurrentLeft>
    103a:	70 91 9e 01 	lds	r23, 0x019E	; 0x80019e <speedCurrentLeft+0x1>
    103e:	07 2e       	mov	r0, r23
    1040:	00 0c       	add	r0, r0
    1042:	88 0b       	sbc	r24, r24
    1044:	99 0b       	sbc	r25, r25
    1046:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__floatsisf>
    104a:	2b 01       	movw	r4, r22
    104c:	3c 01       	movw	r6, r24
    104e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1050:	7e 85       	ldd	r23, Y+14	; 0x0e
    1052:	8f 85       	ldd	r24, Y+15	; 0x0f
    1054:	98 89       	ldd	r25, Y+16	; 0x10
    1056:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__floatsisf>
    105a:	a7 01       	movw	r20, r14
    105c:	96 01       	movw	r18, r12
    105e:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3>
    1062:	9b 01       	movw	r18, r22
    1064:	ac 01       	movw	r20, r24
    1066:	c3 01       	movw	r24, r6
    1068:	b2 01       	movw	r22, r4
    106a:	0e 94 bf 0a 	call	0x157e	; 0x157e <__subsf3>
    106e:	0e 94 31 0b 	call	0x1662	; 0x1662 <__fixsfsi>
    1072:	dc 01       	movw	r26, r24
    1074:	cb 01       	movw	r24, r22
    1076:	b4 01       	movw	r22, r8
    1078:	0e 94 38 12 	call	0x2470	; 0x2470 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
    107c:	48 01       	movw	r8, r16
    107e:	11 0f       	add	r17, r17
    1080:	aa 08       	sbc	r10, r10
    1082:	bb 08       	sbc	r11, r11
    1084:	0e 94 bb 12 	call	0x2576	; 0x2576 <get_ms>
    1088:	2b 01       	movw	r4, r22
    108a:	3c 01       	movw	r6, r24
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	40 e2       	ldi	r20, 0x20	; 32
    1092:	51 e4       	ldi	r21, 0x41	; 65
    1094:	69 81       	ldd	r22, Y+1	; 0x01
    1096:	7a 81       	ldd	r23, Y+2	; 0x02
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	9c 81       	ldd	r25, Y+4	; 0x04
    109c:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3>
    10a0:	6b 01       	movw	r12, r22
    10a2:	7c 01       	movw	r14, r24
    10a4:	c3 01       	movw	r24, r6
    10a6:	b2 01       	movw	r22, r4
    10a8:	68 19       	sub	r22, r8
    10aa:	79 09       	sbc	r23, r9
    10ac:	8a 09       	sbc	r24, r10
    10ae:	9b 09       	sbc	r25, r11
    10b0:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatunsisf>
    10b4:	a7 01       	movw	r20, r14
    10b6:	96 01       	movw	r18, r12
    10b8:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__cmpsf2>
    10bc:	88 23       	and	r24, r24
    10be:	14 f3       	brlt	.-60     	; 0x1084 <motorControl+0x6b6>
		case 'L':
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
    10c0:	2a e0       	ldi	r18, 0x0A	; 10
    10c2:	37 ed       	ldi	r19, 0xD7	; 215
    10c4:	43 e2       	ldi	r20, 0x23	; 35
    10c6:	5c e3       	ldi	r21, 0x3C	; 60
    10c8:	6d 81       	ldd	r22, Y+5	; 0x05
    10ca:	7e 81       	ldd	r23, Y+6	; 0x06
    10cc:	8f 81       	ldd	r24, Y+7	; 0x07
    10ce:	98 85       	ldd	r25, Y+8	; 0x08
    10d0:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__addsf3>
    10d4:	6d 83       	std	Y+5, r22	; 0x05
    10d6:	7e 83       	std	Y+6, r23	; 0x06
    10d8:	8f 83       	std	Y+7, r24	; 0x07
    10da:	98 87       	std	Y+8, r25	; 0x08
    10dc:	a9 89       	ldd	r26, Y+17	; 0x11
    10de:	ba 89       	ldd	r27, Y+18	; 0x12
    10e0:	11 97       	sbiw	r26, 0x01	; 1
    10e2:	ba 8b       	std	Y+18, r27	; 0x12
    10e4:	a9 8b       	std	Y+17, r26	; 0x11
    10e6:	ab 2b       	or	r26, r27
    10e8:	09 f0       	breq	.+2      	; 0x10ec <motorControl+0x71e>
    10ea:	68 cf       	rjmp	.-304    	; 0xfbc <motorControl+0x5ee>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = speed;
    10ec:	30 92 a0 01 	sts	0x01A0, r3	; 0x8001a0 <speedCurrentRight+0x1>
    10f0:	20 92 9f 01 	sts	0x019F, r2	; 0x80019f <speedCurrentRight>
		speedCurrentLeft = -speed;
    10f4:	31 94       	neg	r3
    10f6:	21 94       	neg	r2
    10f8:	31 08       	sbc	r3, r1
    10fa:	30 92 9e 01 	sts	0x019E, r3	; 0x80019e <speedCurrentLeft+0x1>
    10fe:	20 92 9d 01 	sts	0x019D, r2	; 0x80019d <speedCurrentLeft>
    1102:	25 e6       	ldi	r18, 0x65	; 101
    1104:	30 e0       	ldi	r19, 0x00	; 0
		speed = 0;
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
    1106:	19 82       	std	Y+1, r1	; 0x01
    1108:	1a 82       	std	Y+2, r1	; 0x02
    110a:	1b 82       	std	Y+3, r1	; 0x03
    110c:	1c 82       	std	Y+4, r1	; 0x04
			timerStart = get_ms();
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
    110e:	a1 01       	movw	r20, r2
    1110:	33 0c       	add	r3, r3
    1112:	66 0b       	sbc	r22, r22
    1114:	77 0b       	sbc	r23, r23
    1116:	4d 83       	std	Y+5, r20	; 0x05
    1118:	5e 83       	std	Y+6, r21	; 0x06
    111a:	6f 83       	std	Y+7, r22	; 0x07
    111c:	78 87       	std	Y+8, r23	; 0x08
    111e:	3a 87       	std	Y+10, r19	; 0x0a
    1120:	29 87       	std	Y+9, r18	; 0x09
    1122:	81 2c       	mov	r8, r1
    1124:	91 2c       	mov	r9, r1
    1126:	54 01       	movw	r10, r8
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
    1128:	0e 94 bb 12 	call	0x2576	; 0x2576 <get_ms>
    112c:	8b 01       	movw	r16, r22
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
    112e:	2b ed       	ldi	r18, 0xDB	; 219
    1130:	3f e0       	ldi	r19, 0x0F	; 15
    1132:	49 ec       	ldi	r20, 0xC9	; 201
    1134:	50 e4       	ldi	r21, 0x40	; 64
    1136:	c5 01       	movw	r24, r10
    1138:	b4 01       	movw	r22, r8
    113a:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3>
    113e:	0e 94 8b 0c 	call	0x1916	; 0x1916 <sin>
    1142:	23 e8       	ldi	r18, 0x83	; 131
    1144:	39 ef       	ldi	r19, 0xF9	; 249
    1146:	42 e2       	ldi	r20, 0x22	; 34
    1148:	5e e3       	ldi	r21, 0x3E	; 62
    114a:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3>
    114e:	a5 01       	movw	r20, r10
    1150:	94 01       	movw	r18, r8
    1152:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__addsf3>
    1156:	2b 01       	movw	r4, r22
    1158:	3c 01       	movw	r6, r24
    115a:	6d 81       	ldd	r22, Y+5	; 0x05
    115c:	7e 81       	ldd	r23, Y+6	; 0x06
    115e:	8f 81       	ldd	r24, Y+7	; 0x07
    1160:	98 85       	ldd	r25, Y+8	; 0x08
    1162:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__floatsisf>
    1166:	9b 01       	movw	r18, r22
    1168:	ac 01       	movw	r20, r24
    116a:	c3 01       	movw	r24, r6
    116c:	b2 01       	movw	r22, r4
    116e:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3>
    1172:	2b 01       	movw	r4, r22
    1174:	3c 01       	movw	r6, r24
			
			motorLeftSpeed = speedCurrentLeft - (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ));
			
			set_motors(motorLeftSpeed, motorRightSpeed);
    1176:	60 91 9f 01 	lds	r22, 0x019F	; 0x80019f <speedCurrentRight>
    117a:	70 91 a0 01 	lds	r23, 0x01A0	; 0x8001a0 <speedCurrentRight+0x1>
    117e:	07 2e       	mov	r0, r23
    1180:	00 0c       	add	r0, r0
    1182:	88 0b       	sbc	r24, r24
    1184:	99 0b       	sbc	r25, r25
    1186:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__floatsisf>
    118a:	a3 01       	movw	r20, r6
    118c:	92 01       	movw	r18, r4
    118e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__addsf3>
    1192:	0e 94 31 0b 	call	0x1662	; 0x1662 <__fixsfsi>
    1196:	69 83       	std	Y+1, r22	; 0x01
    1198:	7a 83       	std	Y+2, r23	; 0x02
    119a:	8b 83       	std	Y+3, r24	; 0x03
    119c:	9c 83       	std	Y+4, r25	; 0x04
    119e:	60 91 9d 01 	lds	r22, 0x019D	; 0x80019d <speedCurrentLeft>
    11a2:	70 91 9e 01 	lds	r23, 0x019E	; 0x80019e <speedCurrentLeft+0x1>
    11a6:	07 2e       	mov	r0, r23
    11a8:	00 0c       	add	r0, r0
    11aa:	88 0b       	sbc	r24, r24
    11ac:	99 0b       	sbc	r25, r25
    11ae:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__floatsisf>
    11b2:	a3 01       	movw	r20, r6
    11b4:	92 01       	movw	r18, r4
    11b6:	0e 94 bf 0a 	call	0x157e	; 0x157e <__subsf3>
    11ba:	0e 94 31 0b 	call	0x1662	; 0x1662 <__fixsfsi>
    11be:	dc 01       	movw	r26, r24
    11c0:	cb 01       	movw	r24, r22
    11c2:	69 81       	ldd	r22, Y+1	; 0x01
    11c4:	7a 81       	ldd	r23, Y+2	; 0x02
    11c6:	0e 94 38 12 	call	0x2470	; 0x2470 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
    11ca:	28 01       	movw	r4, r16
    11cc:	11 0f       	add	r17, r17
    11ce:	66 08       	sbc	r6, r6
    11d0:	77 08       	sbc	r7, r7
    11d2:	0e 94 bb 12 	call	0x2576	; 0x2576 <get_ms>
    11d6:	64 19       	sub	r22, r4
    11d8:	75 09       	sbc	r23, r5
    11da:	86 09       	sbc	r24, r6
    11dc:	97 09       	sbc	r25, r7
    11de:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatunsisf>
    11e2:	9b 01       	movw	r18, r22
    11e4:	ac 01       	movw	r20, r24
    11e6:	c7 01       	movw	r24, r14
    11e8:	b6 01       	movw	r22, r12
    11ea:	0e 94 19 0c 	call	0x1832	; 0x1832 <__gesf2>
    11ee:	18 16       	cp	r1, r24
    11f0:	84 f3       	brlt	.-32     	; 0x11d2 <motorControl+0x804>
		speed = 0;
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
    11f2:	2a e0       	ldi	r18, 0x0A	; 10
    11f4:	37 ed       	ldi	r19, 0xD7	; 215
    11f6:	43 e2       	ldi	r20, 0x23	; 35
    11f8:	5c e3       	ldi	r21, 0x3C	; 60
    11fa:	c5 01       	movw	r24, r10
    11fc:	b4 01       	movw	r22, r8
    11fe:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__addsf3>
    1202:	4b 01       	movw	r8, r22
    1204:	5c 01       	movw	r10, r24
    1206:	69 85       	ldd	r22, Y+9	; 0x09
    1208:	7a 85       	ldd	r23, Y+10	; 0x0a
    120a:	61 50       	subi	r22, 0x01	; 1
    120c:	71 09       	sbc	r23, r1
    120e:	7a 87       	std	Y+10, r23	; 0x0a
    1210:	69 87       	std	Y+9, r22	; 0x09
    1212:	67 2b       	or	r22, r23
    1214:	09 f0       	breq	.+2      	; 0x1218 <motorControl+0x84a>
    1216:	88 cf       	rjmp	.-240    	; 0x1128 <motorControl+0x75a>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = speed;
    1218:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <speedCurrentRight+0x1>
    121c:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <speedCurrentRight>
		speedCurrentLeft = -speed;
    1220:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <speedCurrentLeft+0x1>
    1224:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <speedCurrentLeft>
		break;
    1228:	06 c0       	rjmp	.+12     	; 0x1236 <motorControl+0x868>
		
		default:
		set_motors(0,0);
    122a:	60 e0       	ldi	r22, 0x00	; 0
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	0e 94 38 12 	call	0x2470	; 0x2470 <set_motors>
		break;
	}
    1236:	66 96       	adiw	r28, 0x16	; 22
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	f8 94       	cli
    123c:	de bf       	out	0x3e, r29	; 62
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	cd bf       	out	0x3d, r28	; 61
    1242:	df 91       	pop	r29
    1244:	cf 91       	pop	r28
    1246:	1f 91       	pop	r17
    1248:	0f 91       	pop	r16
    124a:	ff 90       	pop	r15
    124c:	ef 90       	pop	r14
    124e:	df 90       	pop	r13
    1250:	cf 90       	pop	r12
    1252:	bf 90       	pop	r11
    1254:	af 90       	pop	r10
    1256:	9f 90       	pop	r9
    1258:	8f 90       	pop	r8
    125a:	7f 90       	pop	r7
    125c:	6f 90       	pop	r6
    125e:	5f 90       	pop	r5
    1260:	4f 90       	pop	r4
    1262:	3f 90       	pop	r3
    1264:	2f 90       	pop	r2
    1266:	08 95       	ret

00001268 <followLine>:

}


void followLine()
{
    1268:	cf 93       	push	r28
    126a:	df 93       	push	r29
	
	unsigned int pos = read_line(sensors,IR_EMITTERS_ON);
    126c:	61 e0       	ldi	r22, 0x01	; 1
    126e:	8e ef       	ldi	r24, 0xFE	; 254
    1270:	91 e0       	ldi	r25, 0x01	; 1
    1272:	0e 94 be 12 	call	0x257c	; 0x257c <read_line>
    1276:	ec 01       	movw	r28, r24
	clear();
    1278:	0e 94 82 11 	call	0x2304	; 0x2304 <clear>
	
		if(pos < 1950)
    127c:	ce 39       	cpi	r28, 0x9E	; 158
    127e:	87 e0       	ldi	r24, 0x07	; 7
    1280:	d8 07       	cpc	r29, r24
    1282:	c8 f4       	brcc	.+50     	; 0x12b6 <followLine+0x4e>
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
    1284:	5f 9a       	sbi	0x0b, 7	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    1286:	57 9a       	sbi	0x0a, 7	; 10
		{
			// We are far to the right of the line: turn left.
			green_led(1);

			if(pos < 1800)
    1288:	c8 30       	cpi	r28, 0x08	; 8
    128a:	d7 40       	sbci	r29, 0x07	; 7
    128c:	50 f4       	brcc	.+20     	; 0x12a2 <followLine+0x3a>
			{
				motorControl(SPEED, 'L' ,0.89);
    128e:	2a e0       	ldi	r18, 0x0A	; 10
    1290:	37 ed       	ldi	r19, 0xD7	; 215
    1292:	43 e6       	ldi	r20, 0x63	; 99
    1294:	5f e3       	ldi	r21, 0x3F	; 63
    1296:	6c e4       	ldi	r22, 0x4C	; 76
    1298:	8c e3       	ldi	r24, 0x3C	; 60
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <motorControl>
    12a0:	34 c0       	rjmp	.+104    	; 0x130a <followLine+0xa2>
			}
			else
			{
				motorControl(SLOW,'L', 0.89);
    12a2:	2a e0       	ldi	r18, 0x0A	; 10
    12a4:	37 ed       	ldi	r19, 0xD7	; 215
    12a6:	43 e6       	ldi	r20, 0x63	; 99
    12a8:	5f e3       	ldi	r21, 0x3F	; 63
    12aa:	6c e4       	ldi	r22, 0x4C	; 76
    12ac:	8d e2       	ldi	r24, 0x2D	; 45
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	0e 94 e7 04 	call	0x9ce	; 0x9ce <motorControl>
    12b4:	2a c0       	rjmp	.+84     	; 0x130a <followLine+0xa2>
			}
			
		}
		
		else if (pos > 2050)
    12b6:	c3 30       	cpi	r28, 0x03	; 3
    12b8:	88 e0       	ldi	r24, 0x08	; 8
    12ba:	d8 07       	cpc	r29, r24
    12bc:	c8 f0       	brcs	.+50     	; 0x12f0 <followLine+0x88>
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
    12be:	59 9a       	sbi	0x0b, 1	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    12c0:	51 9a       	sbi	0x0a, 1	; 10
		{
			// We are far to the left of the line: turn right.
			red_led(1);
			
			if(pos > 2200)
    12c2:	c9 39       	cpi	r28, 0x99	; 153
    12c4:	d8 40       	sbci	r29, 0x08	; 8
    12c6:	50 f0       	brcs	.+20     	; 0x12dc <followLine+0x74>
			{
				motorControl(SPEED,'R', 0.89);
    12c8:	2a e0       	ldi	r18, 0x0A	; 10
    12ca:	37 ed       	ldi	r19, 0xD7	; 215
    12cc:	43 e6       	ldi	r20, 0x63	; 99
    12ce:	5f e3       	ldi	r21, 0x3F	; 63
    12d0:	62 e5       	ldi	r22, 0x52	; 82
    12d2:	8c e3       	ldi	r24, 0x3C	; 60
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	0e 94 e7 04 	call	0x9ce	; 0x9ce <motorControl>
    12da:	17 c0       	rjmp	.+46     	; 0x130a <followLine+0xa2>
			}
			else
			{
				motorControl(SLOW,'R', 0.89);
    12dc:	2a e0       	ldi	r18, 0x0A	; 10
    12de:	37 ed       	ldi	r19, 0xD7	; 215
    12e0:	43 e6       	ldi	r20, 0x63	; 99
    12e2:	5f e3       	ldi	r21, 0x3F	; 63
    12e4:	62 e5       	ldi	r22, 0x52	; 82
    12e6:	8d e2       	ldi	r24, 0x2D	; 45
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	0e 94 e7 04 	call	0x9ce	; 0x9ce <motorControl>
    12ee:	0d c0       	rjmp	.+26     	; 0x130a <followLine+0xa2>
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
	else
		*(ioPin->portRegister) &= ~ioPin->bitmask;
    12f0:	59 98       	cbi	0x0b, 1	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    12f2:	51 9a       	sbi	0x0a, 1	; 10
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
	else
		*(ioPin->portRegister) &= ~ioPin->bitmask;
    12f4:	5f 98       	cbi	0x0b, 7	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    12f6:	57 9a       	sbi	0x0a, 7	; 10
		}
		else
		{
			red_led(0);
			green_led(0);
			motorControl(SPEED,'F', 0.89);
    12f8:	2a e0       	ldi	r18, 0x0A	; 10
    12fa:	37 ed       	ldi	r19, 0xD7	; 215
    12fc:	43 e6       	ldi	r20, 0x63	; 99
    12fe:	5f e3       	ldi	r21, 0x3F	; 63
    1300:	66 e4       	ldi	r22, 0x46	; 70
    1302:	8c e3       	ldi	r24, 0x3C	; 60
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	0e 94 e7 04 	call	0x9ce	; 0x9ce <motorControl>
		
		}

	
}
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	08 95       	ret

00001310 <checkAfslag>:


int checkAfslag()
{
	read_line(sensors,IR_EMITTERS_ON);
    1310:	61 e0       	ldi	r22, 0x01	; 1
    1312:	8e ef       	ldi	r24, 0xFE	; 254
    1314:	91 e0       	ldi	r25, 0x01	; 1
    1316:	0e 94 be 12 	call	0x257c	; 0x257c <read_line>
	
	if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C < low_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
    131a:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <sensors>
    131e:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <sensors+0x1>
    1322:	89 30       	cpi	r24, 0x09	; 9
    1324:	27 e0       	ldi	r18, 0x07	; 7
    1326:	92 07       	cpc	r25, r18
    1328:	00 f1       	brcs	.+64     	; 0x136a <checkAfslag+0x5a>
    132a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <sensors+0x2>
    132e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <sensors+0x3>
    1332:	28 3e       	cpi	r18, 0xE8	; 232
    1334:	33 40       	sbci	r19, 0x03	; 3
    1336:	c8 f4       	brcc	.+50     	; 0x136a <checkAfslag+0x5a>
    1338:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <sensors+0x4>
    133c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <sensors+0x5>
    1340:	28 3e       	cpi	r18, 0xE8	; 232
    1342:	33 40       	sbci	r19, 0x03	; 3
    1344:	08 f0       	brcs	.+2      	; 0x1348 <checkAfslag+0x38>
    1346:	fb c0       	rjmp	.+502    	; 0x153e <checkAfslag+0x22e>
    1348:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <sensors+0x6>
    134c:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <sensors+0x7>
    1350:	28 3e       	cpi	r18, 0xE8	; 232
    1352:	33 40       	sbci	r19, 0x03	; 3
    1354:	08 f0       	brcs	.+2      	; 0x1358 <checkAfslag+0x48>
    1356:	f3 c0       	rjmp	.+486    	; 0x153e <checkAfslag+0x22e>
    1358:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <sensors+0x8>
    135c:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <sensors+0x9>
    1360:	28 3e       	cpi	r18, 0xE8	; 232
    1362:	33 40       	sbci	r19, 0x03	; 3
    1364:	08 f4       	brcc	.+2      	; 0x1368 <checkAfslag+0x58>
    1366:	ca c0       	rjmp	.+404    	; 0x14fc <checkAfslag+0x1ec>
    1368:	ea c0       	rjmp	.+468    	; 0x153e <checkAfslag+0x22e>
	{
		return LEFT; //afslag naar links
	}
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_C < low_range && SENSOR_C_R < low_range && SENSOR_R > high_range)
    136a:	88 3e       	cpi	r24, 0xE8	; 232
    136c:	23 e0       	ldi	r18, 0x03	; 3
    136e:	92 07       	cpc	r25, r18
    1370:	00 f5       	brcc	.+64     	; 0x13b2 <checkAfslag+0xa2>
    1372:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <sensors+0x2>
    1376:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <sensors+0x3>
    137a:	28 3e       	cpi	r18, 0xE8	; 232
    137c:	33 40       	sbci	r19, 0x03	; 3
    137e:	c8 f4       	brcc	.+50     	; 0x13b2 <checkAfslag+0xa2>
    1380:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <sensors+0x4>
    1384:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <sensors+0x5>
    1388:	28 3e       	cpi	r18, 0xE8	; 232
    138a:	33 40       	sbci	r19, 0x03	; 3
    138c:	08 f0       	brcs	.+2      	; 0x1390 <checkAfslag+0x80>
    138e:	dd c0       	rjmp	.+442    	; 0x154a <checkAfslag+0x23a>
    1390:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <sensors+0x6>
    1394:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <sensors+0x7>
    1398:	28 3e       	cpi	r18, 0xE8	; 232
    139a:	33 40       	sbci	r19, 0x03	; 3
    139c:	08 f0       	brcs	.+2      	; 0x13a0 <checkAfslag+0x90>
    139e:	d5 c0       	rjmp	.+426    	; 0x154a <checkAfslag+0x23a>
    13a0:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <sensors+0x8>
    13a4:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <sensors+0x9>
    13a8:	29 30       	cpi	r18, 0x09	; 9
    13aa:	37 40       	sbci	r19, 0x07	; 7
    13ac:	08 f4       	brcc	.+2      	; 0x13b0 <checkAfslag+0xa0>
    13ae:	cd c0       	rjmp	.+410    	; 0x154a <checkAfslag+0x23a>
    13b0:	a8 c0       	rjmp	.+336    	; 0x1502 <checkAfslag+0x1f2>
	{
		return RIGHT; //afslag naar rechts
	}
	else if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_R > high_range)
    13b2:	89 30       	cpi	r24, 0x09	; 9
    13b4:	27 e0       	ldi	r18, 0x07	; 7
    13b6:	92 07       	cpc	r25, r18
    13b8:	08 f4       	brcc	.+2      	; 0x13bc <checkAfslag+0xac>
    13ba:	d3 c0       	rjmp	.+422    	; 0x1562 <checkAfslag+0x252>
    13bc:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <sensors+0x2>
    13c0:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <sensors+0x3>
    13c4:	28 3e       	cpi	r18, 0xE8	; 232
    13c6:	33 40       	sbci	r19, 0x03	; 3
    13c8:	b0 f4       	brcc	.+44     	; 0x13f6 <checkAfslag+0xe6>
    13ca:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <sensors+0x4>
    13ce:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <sensors+0x5>
    13d2:	29 30       	cpi	r18, 0x09	; 9
    13d4:	37 40       	sbci	r19, 0x07	; 7
    13d6:	78 f0       	brcs	.+30     	; 0x13f6 <checkAfslag+0xe6>
    13d8:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <sensors+0x6>
    13dc:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <sensors+0x7>
    13e0:	28 3e       	cpi	r18, 0xE8	; 232
    13e2:	33 40       	sbci	r19, 0x03	; 3
    13e4:	40 f4       	brcc	.+16     	; 0x13f6 <checkAfslag+0xe6>
    13e6:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <sensors+0x8>
    13ea:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <sensors+0x9>
    13ee:	29 30       	cpi	r18, 0x09	; 9
    13f0:	37 40       	sbci	r19, 0x07	; 7
    13f2:	08 f0       	brcs	.+2      	; 0x13f6 <checkAfslag+0xe6>
    13f4:	89 c0       	rjmp	.+274    	; 0x1508 <checkAfslag+0x1f8>
	{
		return FOUR_WAY_JOINT; //kruispunt
	}
	else if(SENSOR_L > high_range && SENSOR_C_L > high_range && SENSOR_C_C < low_range && SENSOR_C_R > high_range && SENSOR_R > high_range)
    13f6:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <sensors+0x2>
    13fa:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <sensors+0x3>
    13fe:	29 30       	cpi	r18, 0x09	; 9
    1400:	47 e0       	ldi	r20, 0x07	; 7
    1402:	34 07       	cpc	r19, r20
    1404:	b0 f0       	brcs	.+44     	; 0x1432 <checkAfslag+0x122>
    1406:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <sensors+0x4>
    140a:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <sensors+0x5>
    140e:	48 3e       	cpi	r20, 0xE8	; 232
    1410:	53 40       	sbci	r21, 0x03	; 3
    1412:	78 f4       	brcc	.+30     	; 0x1432 <checkAfslag+0x122>
    1414:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <sensors+0x6>
    1418:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <sensors+0x7>
    141c:	49 30       	cpi	r20, 0x09	; 9
    141e:	57 40       	sbci	r21, 0x07	; 7
    1420:	40 f0       	brcs	.+16     	; 0x1432 <checkAfslag+0x122>
    1422:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <sensors+0x8>
    1426:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <sensors+0x9>
    142a:	49 30       	cpi	r20, 0x09	; 9
    142c:	57 40       	sbci	r21, 0x07	; 7
    142e:	08 f0       	brcs	.+2      	; 0x1432 <checkAfslag+0x122>
    1430:	6e c0       	rjmp	.+220    	; 0x150e <checkAfslag+0x1fe>
	{
		return T_LEFT_RIGHT; //t-splitsing rechtdoor
	}
	else if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
    1432:	28 3e       	cpi	r18, 0xE8	; 232
    1434:	33 40       	sbci	r19, 0x03	; 3
    1436:	c8 f4       	brcc	.+50     	; 0x146a <checkAfslag+0x15a>
    1438:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <sensors+0x4>
    143c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <sensors+0x5>
    1440:	29 30       	cpi	r18, 0x09	; 9
    1442:	37 40       	sbci	r19, 0x07	; 7
    1444:	08 f4       	brcc	.+2      	; 0x1448 <checkAfslag+0x138>
    1446:	95 c0       	rjmp	.+298    	; 0x1572 <checkAfslag+0x262>
    1448:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <sensors+0x6>
    144c:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <sensors+0x7>
    1450:	28 3e       	cpi	r18, 0xE8	; 232
    1452:	33 40       	sbci	r19, 0x03	; 3
    1454:	08 f0       	brcs	.+2      	; 0x1458 <checkAfslag+0x148>
    1456:	7f c0       	rjmp	.+254    	; 0x1556 <checkAfslag+0x246>
    1458:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <sensors+0x8>
    145c:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <sensors+0x9>
    1460:	28 3e       	cpi	r18, 0xE8	; 232
    1462:	33 40       	sbci	r19, 0x03	; 3
    1464:	08 f4       	brcc	.+2      	; 0x1468 <checkAfslag+0x158>
    1466:	56 c0       	rjmp	.+172    	; 0x1514 <checkAfslag+0x204>
    1468:	76 c0       	rjmp	.+236    	; 0x1556 <checkAfslag+0x246>
	{
		return T_LEFT; //t-splitsing linksaf
	}
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_C_R > high_range)
    146a:	88 3e       	cpi	r24, 0xE8	; 232
    146c:	23 e0       	ldi	r18, 0x03	; 3
    146e:	92 07       	cpc	r25, r18
    1470:	18 f5       	brcc	.+70     	; 0x14b8 <checkAfslag+0x1a8>
    1472:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <sensors+0x2>
    1476:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <sensors+0x3>
    147a:	28 3e       	cpi	r18, 0xE8	; 232
    147c:	33 40       	sbci	r19, 0x03	; 3
    147e:	e0 f4       	brcc	.+56     	; 0x14b8 <checkAfslag+0x1a8>
	{
		return T_RIGHT; //t-splitsing rechtsaf
	}
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_C < low_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
    1480:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <sensors+0x2>
    1484:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <sensors+0x3>
    1488:	28 3e       	cpi	r18, 0xE8	; 232
    148a:	33 40       	sbci	r19, 0x03	; 3
    148c:	a8 f4       	brcc	.+42     	; 0x14b8 <checkAfslag+0x1a8>
    148e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <sensors+0x4>
    1492:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <sensors+0x5>
    1496:	28 3e       	cpi	r18, 0xE8	; 232
    1498:	33 40       	sbci	r19, 0x03	; 3
    149a:	70 f4       	brcc	.+28     	; 0x14b8 <checkAfslag+0x1a8>
    149c:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <sensors+0x6>
    14a0:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <sensors+0x7>
    14a4:	28 3e       	cpi	r18, 0xE8	; 232
    14a6:	33 40       	sbci	r19, 0x03	; 3
    14a8:	38 f4       	brcc	.+14     	; 0x14b8 <checkAfslag+0x1a8>
    14aa:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <sensors+0x8>
    14ae:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <sensors+0x9>
    14b2:	28 3e       	cpi	r18, 0xE8	; 232
    14b4:	33 40       	sbci	r19, 0x03	; 3
    14b6:	88 f1       	brcs	.+98     	; 0x151a <checkAfslag+0x20a>
	{
		return DEAD_END; //doodlopende straat
	}
	else if(SENSOR_L > high_range && SENSOR_C_L > high_range && SENSOR_C_C > high_range && SENSOR_C_R > high_range && SENSOR_R > high_range)
    14b8:	89 30       	cpi	r24, 0x09	; 9
    14ba:	97 40       	sbci	r25, 0x07	; 7
    14bc:	88 f1       	brcs	.+98     	; 0x1520 <checkAfslag+0x210>
    14be:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <sensors+0x2>
    14c2:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <sensors+0x3>
    14c6:	89 30       	cpi	r24, 0x09	; 9
    14c8:	97 40       	sbci	r25, 0x07	; 7
    14ca:	68 f1       	brcs	.+90     	; 0x1526 <checkAfslag+0x216>
    14cc:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <sensors+0x4>
    14d0:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <sensors+0x5>
    14d4:	89 30       	cpi	r24, 0x09	; 9
    14d6:	97 40       	sbci	r25, 0x07	; 7
    14d8:	48 f1       	brcs	.+82     	; 0x152c <checkAfslag+0x21c>
    14da:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <sensors+0x6>
    14de:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <sensors+0x7>
    14e2:	89 30       	cpi	r24, 0x09	; 9
    14e4:	97 40       	sbci	r25, 0x07	; 7
    14e6:	28 f1       	brcs	.+74     	; 0x1532 <checkAfslag+0x222>
    14e8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <sensors+0x8>
    14ec:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <sensors+0x9>
    14f0:	89 30       	cpi	r24, 0x09	; 9
    14f2:	97 40       	sbci	r25, 0x07	; 7
    14f4:	08 f1       	brcs	.+66     	; 0x1538 <checkAfslag+0x228>
	{
		return GRID_HOME; //entry grid/home
    14f6:	88 e0       	ldi	r24, 0x08	; 8
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	08 95       	ret
{
	read_line(sensors,IR_EMITTERS_ON);
	
	if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C < low_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
	{
		return LEFT; //afslag naar links
    14fc:	82 e0       	ldi	r24, 0x02	; 2
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	08 95       	ret
	}
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_C < low_range && SENSOR_C_R < low_range && SENSOR_R > high_range)
	{
		return RIGHT; //afslag naar rechts
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	08 95       	ret
	}
	else if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_R > high_range)
	{
		return FOUR_WAY_JOINT; //kruispunt
    1508:	86 e0       	ldi	r24, 0x06	; 6
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	08 95       	ret
	}
	else if(SENSOR_L > high_range && SENSOR_C_L > high_range && SENSOR_C_C < low_range && SENSOR_C_R > high_range && SENSOR_R > high_range)
	{
		return T_LEFT_RIGHT; //t-splitsing rechtdoor
    150e:	83 e0       	ldi	r24, 0x03	; 3
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	08 95       	ret
	}
	else if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
	{
		return T_LEFT; //t-splitsing linksaf
    1514:	85 e0       	ldi	r24, 0x05	; 5
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	08 95       	ret
	{
		return T_RIGHT; //t-splitsing rechtsaf
	}
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_C < low_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
	{
		return DEAD_END; //doodlopende straat
    151a:	87 e0       	ldi	r24, 0x07	; 7
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	08 95       	ret
	}
	else if(SENSOR_L > high_range && SENSOR_C_L > high_range && SENSOR_C_C > high_range && SENSOR_C_R > high_range && SENSOR_R > high_range)
	{
		return GRID_HOME; //entry grid/home
	}
	return 0;
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	08 95       	ret
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	08 95       	ret
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	08 95       	ret
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	08 95       	ret
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	08 95       	ret
	
	if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C < low_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
	{
		return LEFT; //afslag naar links
	}
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_C < low_range && SENSOR_C_R < low_range && SENSOR_R > high_range)
    153e:	88 3e       	cpi	r24, 0xE8	; 232
    1540:	43 e0       	ldi	r20, 0x03	; 3
    1542:	94 07       	cpc	r25, r20
    1544:	08 f0       	brcs	.+2      	; 0x1548 <checkAfslag+0x238>
    1546:	3a cf       	rjmp	.-396    	; 0x13bc <checkAfslag+0xac>
    1548:	1b cf       	rjmp	.-458    	; 0x1380 <checkAfslag+0x70>
	{
		return RIGHT; //afslag naar rechts
	}
	else if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_R > high_range)
    154a:	89 30       	cpi	r24, 0x09	; 9
    154c:	67 e0       	ldi	r22, 0x07	; 7
    154e:	96 07       	cpc	r25, r22
    1550:	08 f0       	brcs	.+2      	; 0x1554 <checkAfslag+0x244>
    1552:	3b cf       	rjmp	.-394    	; 0x13ca <checkAfslag+0xba>
    1554:	06 c0       	rjmp	.+12     	; 0x1562 <checkAfslag+0x252>
	}
	else if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
	{
		return T_LEFT; //t-splitsing linksaf
	}
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_C_R > high_range)
    1556:	88 3e       	cpi	r24, 0xE8	; 232
    1558:	23 e0       	ldi	r18, 0x03	; 3
    155a:	92 07       	cpc	r25, r18
    155c:	08 f4       	brcc	.+2      	; 0x1560 <checkAfslag+0x250>
    155e:	90 cf       	rjmp	.-224    	; 0x1480 <checkAfslag+0x170>
    1560:	ab cf       	rjmp	.-170    	; 0x14b8 <checkAfslag+0x1a8>
    1562:	88 3e       	cpi	r24, 0xE8	; 232
    1564:	43 e0       	ldi	r20, 0x03	; 3
    1566:	94 07       	cpc	r25, r20
    1568:	08 f4       	brcc	.+2      	; 0x156c <checkAfslag+0x25c>
    156a:	83 cf       	rjmp	.-250    	; 0x1472 <checkAfslag+0x162>
	}
	else if(SENSOR_L > high_range && SENSOR_C_L > high_range && SENSOR_C_C > high_range && SENSOR_C_R > high_range && SENSOR_R > high_range)
	{
		return GRID_HOME; //entry grid/home
	}
	return 0;
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	08 95       	ret
	}
	else if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
	{
		return T_LEFT; //t-splitsing linksaf
	}
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_C_R > high_range)
    1572:	88 3e       	cpi	r24, 0xE8	; 232
    1574:	63 e0       	ldi	r22, 0x03	; 3
    1576:	96 07       	cpc	r25, r22
    1578:	08 f4       	brcc	.+2      	; 0x157c <checkAfslag+0x26c>
    157a:	82 cf       	rjmp	.-252    	; 0x1480 <checkAfslag+0x170>
    157c:	9d cf       	rjmp	.-198    	; 0x14b8 <checkAfslag+0x1a8>

0000157e <__subsf3>:
    157e:	50 58       	subi	r21, 0x80	; 128

00001580 <__addsf3>:
    1580:	bb 27       	eor	r27, r27
    1582:	aa 27       	eor	r26, r26
    1584:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__addsf3x>
    1588:	0c 94 df 0b 	jmp	0x17be	; 0x17be <__fp_round>
    158c:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <__fp_pscA>
    1590:	38 f0       	brcs	.+14     	; 0x15a0 <__addsf3+0x20>
    1592:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__fp_pscB>
    1596:	20 f0       	brcs	.+8      	; 0x15a0 <__addsf3+0x20>
    1598:	39 f4       	brne	.+14     	; 0x15a8 <__addsf3+0x28>
    159a:	9f 3f       	cpi	r25, 0xFF	; 255
    159c:	19 f4       	brne	.+6      	; 0x15a4 <__addsf3+0x24>
    159e:	26 f4       	brtc	.+8      	; 0x15a8 <__addsf3+0x28>
    15a0:	0c 94 ce 0b 	jmp	0x179c	; 0x179c <__fp_nan>
    15a4:	0e f4       	brtc	.+2      	; 0x15a8 <__addsf3+0x28>
    15a6:	e0 95       	com	r30
    15a8:	e7 fb       	bst	r30, 7
    15aa:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <__fp_inf>

000015ae <__addsf3x>:
    15ae:	e9 2f       	mov	r30, r25
    15b0:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__fp_split3>
    15b4:	58 f3       	brcs	.-42     	; 0x158c <__addsf3+0xc>
    15b6:	ba 17       	cp	r27, r26
    15b8:	62 07       	cpc	r22, r18
    15ba:	73 07       	cpc	r23, r19
    15bc:	84 07       	cpc	r24, r20
    15be:	95 07       	cpc	r25, r21
    15c0:	20 f0       	brcs	.+8      	; 0x15ca <__addsf3x+0x1c>
    15c2:	79 f4       	brne	.+30     	; 0x15e2 <__addsf3x+0x34>
    15c4:	a6 f5       	brtc	.+104    	; 0x162e <__addsf3x+0x80>
    15c6:	0c 94 12 0c 	jmp	0x1824	; 0x1824 <__fp_zero>
    15ca:	0e f4       	brtc	.+2      	; 0x15ce <__addsf3x+0x20>
    15cc:	e0 95       	com	r30
    15ce:	0b 2e       	mov	r0, r27
    15d0:	ba 2f       	mov	r27, r26
    15d2:	a0 2d       	mov	r26, r0
    15d4:	0b 01       	movw	r0, r22
    15d6:	b9 01       	movw	r22, r18
    15d8:	90 01       	movw	r18, r0
    15da:	0c 01       	movw	r0, r24
    15dc:	ca 01       	movw	r24, r20
    15de:	a0 01       	movw	r20, r0
    15e0:	11 24       	eor	r1, r1
    15e2:	ff 27       	eor	r31, r31
    15e4:	59 1b       	sub	r21, r25
    15e6:	99 f0       	breq	.+38     	; 0x160e <__addsf3x+0x60>
    15e8:	59 3f       	cpi	r21, 0xF9	; 249
    15ea:	50 f4       	brcc	.+20     	; 0x1600 <__addsf3x+0x52>
    15ec:	50 3e       	cpi	r21, 0xE0	; 224
    15ee:	68 f1       	brcs	.+90     	; 0x164a <__addsf3x+0x9c>
    15f0:	1a 16       	cp	r1, r26
    15f2:	f0 40       	sbci	r31, 0x00	; 0
    15f4:	a2 2f       	mov	r26, r18
    15f6:	23 2f       	mov	r18, r19
    15f8:	34 2f       	mov	r19, r20
    15fa:	44 27       	eor	r20, r20
    15fc:	58 5f       	subi	r21, 0xF8	; 248
    15fe:	f3 cf       	rjmp	.-26     	; 0x15e6 <__addsf3x+0x38>
    1600:	46 95       	lsr	r20
    1602:	37 95       	ror	r19
    1604:	27 95       	ror	r18
    1606:	a7 95       	ror	r26
    1608:	f0 40       	sbci	r31, 0x00	; 0
    160a:	53 95       	inc	r21
    160c:	c9 f7       	brne	.-14     	; 0x1600 <__addsf3x+0x52>
    160e:	7e f4       	brtc	.+30     	; 0x162e <__addsf3x+0x80>
    1610:	1f 16       	cp	r1, r31
    1612:	ba 0b       	sbc	r27, r26
    1614:	62 0b       	sbc	r22, r18
    1616:	73 0b       	sbc	r23, r19
    1618:	84 0b       	sbc	r24, r20
    161a:	ba f0       	brmi	.+46     	; 0x164a <__addsf3x+0x9c>
    161c:	91 50       	subi	r25, 0x01	; 1
    161e:	a1 f0       	breq	.+40     	; 0x1648 <__addsf3x+0x9a>
    1620:	ff 0f       	add	r31, r31
    1622:	bb 1f       	adc	r27, r27
    1624:	66 1f       	adc	r22, r22
    1626:	77 1f       	adc	r23, r23
    1628:	88 1f       	adc	r24, r24
    162a:	c2 f7       	brpl	.-16     	; 0x161c <__addsf3x+0x6e>
    162c:	0e c0       	rjmp	.+28     	; 0x164a <__addsf3x+0x9c>
    162e:	ba 0f       	add	r27, r26
    1630:	62 1f       	adc	r22, r18
    1632:	73 1f       	adc	r23, r19
    1634:	84 1f       	adc	r24, r20
    1636:	48 f4       	brcc	.+18     	; 0x164a <__addsf3x+0x9c>
    1638:	87 95       	ror	r24
    163a:	77 95       	ror	r23
    163c:	67 95       	ror	r22
    163e:	b7 95       	ror	r27
    1640:	f7 95       	ror	r31
    1642:	9e 3f       	cpi	r25, 0xFE	; 254
    1644:	08 f0       	brcs	.+2      	; 0x1648 <__addsf3x+0x9a>
    1646:	b0 cf       	rjmp	.-160    	; 0x15a8 <__addsf3+0x28>
    1648:	93 95       	inc	r25
    164a:	88 0f       	add	r24, r24
    164c:	08 f0       	brcs	.+2      	; 0x1650 <__addsf3x+0xa2>
    164e:	99 27       	eor	r25, r25
    1650:	ee 0f       	add	r30, r30
    1652:	97 95       	ror	r25
    1654:	87 95       	ror	r24
    1656:	08 95       	ret

00001658 <__cmpsf2>:
    1658:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__fp_cmp>
    165c:	08 f4       	brcc	.+2      	; 0x1660 <__cmpsf2+0x8>
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	08 95       	ret

00001662 <__fixsfsi>:
    1662:	0e 94 38 0b 	call	0x1670	; 0x1670 <__fixunssfsi>
    1666:	68 94       	set
    1668:	b1 11       	cpse	r27, r1
    166a:	0c 94 13 0c 	jmp	0x1826	; 0x1826 <__fp_szero>
    166e:	08 95       	ret

00001670 <__fixunssfsi>:
    1670:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <__fp_splitA>
    1674:	88 f0       	brcs	.+34     	; 0x1698 <__fixunssfsi+0x28>
    1676:	9f 57       	subi	r25, 0x7F	; 127
    1678:	98 f0       	brcs	.+38     	; 0x16a0 <__fixunssfsi+0x30>
    167a:	b9 2f       	mov	r27, r25
    167c:	99 27       	eor	r25, r25
    167e:	b7 51       	subi	r27, 0x17	; 23
    1680:	b0 f0       	brcs	.+44     	; 0x16ae <__fixunssfsi+0x3e>
    1682:	e1 f0       	breq	.+56     	; 0x16bc <__fixunssfsi+0x4c>
    1684:	66 0f       	add	r22, r22
    1686:	77 1f       	adc	r23, r23
    1688:	88 1f       	adc	r24, r24
    168a:	99 1f       	adc	r25, r25
    168c:	1a f0       	brmi	.+6      	; 0x1694 <__fixunssfsi+0x24>
    168e:	ba 95       	dec	r27
    1690:	c9 f7       	brne	.-14     	; 0x1684 <__fixunssfsi+0x14>
    1692:	14 c0       	rjmp	.+40     	; 0x16bc <__fixunssfsi+0x4c>
    1694:	b1 30       	cpi	r27, 0x01	; 1
    1696:	91 f0       	breq	.+36     	; 0x16bc <__fixunssfsi+0x4c>
    1698:	0e 94 12 0c 	call	0x1824	; 0x1824 <__fp_zero>
    169c:	b1 e0       	ldi	r27, 0x01	; 1
    169e:	08 95       	ret
    16a0:	0c 94 12 0c 	jmp	0x1824	; 0x1824 <__fp_zero>
    16a4:	67 2f       	mov	r22, r23
    16a6:	78 2f       	mov	r23, r24
    16a8:	88 27       	eor	r24, r24
    16aa:	b8 5f       	subi	r27, 0xF8	; 248
    16ac:	39 f0       	breq	.+14     	; 0x16bc <__fixunssfsi+0x4c>
    16ae:	b9 3f       	cpi	r27, 0xF9	; 249
    16b0:	cc f3       	brlt	.-14     	; 0x16a4 <__fixunssfsi+0x34>
    16b2:	86 95       	lsr	r24
    16b4:	77 95       	ror	r23
    16b6:	67 95       	ror	r22
    16b8:	b3 95       	inc	r27
    16ba:	d9 f7       	brne	.-10     	; 0x16b2 <__fixunssfsi+0x42>
    16bc:	3e f4       	brtc	.+14     	; 0x16cc <__fixunssfsi+0x5c>
    16be:	90 95       	com	r25
    16c0:	80 95       	com	r24
    16c2:	70 95       	com	r23
    16c4:	61 95       	neg	r22
    16c6:	7f 4f       	sbci	r23, 0xFF	; 255
    16c8:	8f 4f       	sbci	r24, 0xFF	; 255
    16ca:	9f 4f       	sbci	r25, 0xFF	; 255
    16cc:	08 95       	ret

000016ce <__floatunsisf>:
    16ce:	e8 94       	clt
    16d0:	09 c0       	rjmp	.+18     	; 0x16e4 <__floatsisf+0x12>

000016d2 <__floatsisf>:
    16d2:	97 fb       	bst	r25, 7
    16d4:	3e f4       	brtc	.+14     	; 0x16e4 <__floatsisf+0x12>
    16d6:	90 95       	com	r25
    16d8:	80 95       	com	r24
    16da:	70 95       	com	r23
    16dc:	61 95       	neg	r22
    16de:	7f 4f       	sbci	r23, 0xFF	; 255
    16e0:	8f 4f       	sbci	r24, 0xFF	; 255
    16e2:	9f 4f       	sbci	r25, 0xFF	; 255
    16e4:	99 23       	and	r25, r25
    16e6:	a9 f0       	breq	.+42     	; 0x1712 <__floatsisf+0x40>
    16e8:	f9 2f       	mov	r31, r25
    16ea:	96 e9       	ldi	r25, 0x96	; 150
    16ec:	bb 27       	eor	r27, r27
    16ee:	93 95       	inc	r25
    16f0:	f6 95       	lsr	r31
    16f2:	87 95       	ror	r24
    16f4:	77 95       	ror	r23
    16f6:	67 95       	ror	r22
    16f8:	b7 95       	ror	r27
    16fa:	f1 11       	cpse	r31, r1
    16fc:	f8 cf       	rjmp	.-16     	; 0x16ee <__floatsisf+0x1c>
    16fe:	fa f4       	brpl	.+62     	; 0x173e <__floatsisf+0x6c>
    1700:	bb 0f       	add	r27, r27
    1702:	11 f4       	brne	.+4      	; 0x1708 <__floatsisf+0x36>
    1704:	60 ff       	sbrs	r22, 0
    1706:	1b c0       	rjmp	.+54     	; 0x173e <__floatsisf+0x6c>
    1708:	6f 5f       	subi	r22, 0xFF	; 255
    170a:	7f 4f       	sbci	r23, 0xFF	; 255
    170c:	8f 4f       	sbci	r24, 0xFF	; 255
    170e:	9f 4f       	sbci	r25, 0xFF	; 255
    1710:	16 c0       	rjmp	.+44     	; 0x173e <__floatsisf+0x6c>
    1712:	88 23       	and	r24, r24
    1714:	11 f0       	breq	.+4      	; 0x171a <__floatsisf+0x48>
    1716:	96 e9       	ldi	r25, 0x96	; 150
    1718:	11 c0       	rjmp	.+34     	; 0x173c <__floatsisf+0x6a>
    171a:	77 23       	and	r23, r23
    171c:	21 f0       	breq	.+8      	; 0x1726 <__floatsisf+0x54>
    171e:	9e e8       	ldi	r25, 0x8E	; 142
    1720:	87 2f       	mov	r24, r23
    1722:	76 2f       	mov	r23, r22
    1724:	05 c0       	rjmp	.+10     	; 0x1730 <__floatsisf+0x5e>
    1726:	66 23       	and	r22, r22
    1728:	71 f0       	breq	.+28     	; 0x1746 <__floatsisf+0x74>
    172a:	96 e8       	ldi	r25, 0x86	; 134
    172c:	86 2f       	mov	r24, r22
    172e:	70 e0       	ldi	r23, 0x00	; 0
    1730:	60 e0       	ldi	r22, 0x00	; 0
    1732:	2a f0       	brmi	.+10     	; 0x173e <__floatsisf+0x6c>
    1734:	9a 95       	dec	r25
    1736:	66 0f       	add	r22, r22
    1738:	77 1f       	adc	r23, r23
    173a:	88 1f       	adc	r24, r24
    173c:	da f7       	brpl	.-10     	; 0x1734 <__floatsisf+0x62>
    173e:	88 0f       	add	r24, r24
    1740:	96 95       	lsr	r25
    1742:	87 95       	ror	r24
    1744:	97 f9       	bld	r25, 7
    1746:	08 95       	ret

00001748 <__fp_cmp>:
    1748:	99 0f       	add	r25, r25
    174a:	00 08       	sbc	r0, r0
    174c:	55 0f       	add	r21, r21
    174e:	aa 0b       	sbc	r26, r26
    1750:	e0 e8       	ldi	r30, 0x80	; 128
    1752:	fe ef       	ldi	r31, 0xFE	; 254
    1754:	16 16       	cp	r1, r22
    1756:	17 06       	cpc	r1, r23
    1758:	e8 07       	cpc	r30, r24
    175a:	f9 07       	cpc	r31, r25
    175c:	c0 f0       	brcs	.+48     	; 0x178e <__fp_cmp+0x46>
    175e:	12 16       	cp	r1, r18
    1760:	13 06       	cpc	r1, r19
    1762:	e4 07       	cpc	r30, r20
    1764:	f5 07       	cpc	r31, r21
    1766:	98 f0       	brcs	.+38     	; 0x178e <__fp_cmp+0x46>
    1768:	62 1b       	sub	r22, r18
    176a:	73 0b       	sbc	r23, r19
    176c:	84 0b       	sbc	r24, r20
    176e:	95 0b       	sbc	r25, r21
    1770:	39 f4       	brne	.+14     	; 0x1780 <__fp_cmp+0x38>
    1772:	0a 26       	eor	r0, r26
    1774:	61 f0       	breq	.+24     	; 0x178e <__fp_cmp+0x46>
    1776:	23 2b       	or	r18, r19
    1778:	24 2b       	or	r18, r20
    177a:	25 2b       	or	r18, r21
    177c:	21 f4       	brne	.+8      	; 0x1786 <__fp_cmp+0x3e>
    177e:	08 95       	ret
    1780:	0a 26       	eor	r0, r26
    1782:	09 f4       	brne	.+2      	; 0x1786 <__fp_cmp+0x3e>
    1784:	a1 40       	sbci	r26, 0x01	; 1
    1786:	a6 95       	lsr	r26
    1788:	8f ef       	ldi	r24, 0xFF	; 255
    178a:	81 1d       	adc	r24, r1
    178c:	81 1d       	adc	r24, r1
    178e:	08 95       	ret

00001790 <__fp_inf>:
    1790:	97 f9       	bld	r25, 7
    1792:	9f 67       	ori	r25, 0x7F	; 127
    1794:	80 e8       	ldi	r24, 0x80	; 128
    1796:	70 e0       	ldi	r23, 0x00	; 0
    1798:	60 e0       	ldi	r22, 0x00	; 0
    179a:	08 95       	ret

0000179c <__fp_nan>:
    179c:	9f ef       	ldi	r25, 0xFF	; 255
    179e:	80 ec       	ldi	r24, 0xC0	; 192
    17a0:	08 95       	ret

000017a2 <__fp_pscA>:
    17a2:	00 24       	eor	r0, r0
    17a4:	0a 94       	dec	r0
    17a6:	16 16       	cp	r1, r22
    17a8:	17 06       	cpc	r1, r23
    17aa:	18 06       	cpc	r1, r24
    17ac:	09 06       	cpc	r0, r25
    17ae:	08 95       	ret

000017b0 <__fp_pscB>:
    17b0:	00 24       	eor	r0, r0
    17b2:	0a 94       	dec	r0
    17b4:	12 16       	cp	r1, r18
    17b6:	13 06       	cpc	r1, r19
    17b8:	14 06       	cpc	r1, r20
    17ba:	05 06       	cpc	r0, r21
    17bc:	08 95       	ret

000017be <__fp_round>:
    17be:	09 2e       	mov	r0, r25
    17c0:	03 94       	inc	r0
    17c2:	00 0c       	add	r0, r0
    17c4:	11 f4       	brne	.+4      	; 0x17ca <__fp_round+0xc>
    17c6:	88 23       	and	r24, r24
    17c8:	52 f0       	brmi	.+20     	; 0x17de <__fp_round+0x20>
    17ca:	bb 0f       	add	r27, r27
    17cc:	40 f4       	brcc	.+16     	; 0x17de <__fp_round+0x20>
    17ce:	bf 2b       	or	r27, r31
    17d0:	11 f4       	brne	.+4      	; 0x17d6 <__fp_round+0x18>
    17d2:	60 ff       	sbrs	r22, 0
    17d4:	04 c0       	rjmp	.+8      	; 0x17de <__fp_round+0x20>
    17d6:	6f 5f       	subi	r22, 0xFF	; 255
    17d8:	7f 4f       	sbci	r23, 0xFF	; 255
    17da:	8f 4f       	sbci	r24, 0xFF	; 255
    17dc:	9f 4f       	sbci	r25, 0xFF	; 255
    17de:	08 95       	ret

000017e0 <__fp_split3>:
    17e0:	57 fd       	sbrc	r21, 7
    17e2:	90 58       	subi	r25, 0x80	; 128
    17e4:	44 0f       	add	r20, r20
    17e6:	55 1f       	adc	r21, r21
    17e8:	59 f0       	breq	.+22     	; 0x1800 <__fp_splitA+0x10>
    17ea:	5f 3f       	cpi	r21, 0xFF	; 255
    17ec:	71 f0       	breq	.+28     	; 0x180a <__fp_splitA+0x1a>
    17ee:	47 95       	ror	r20

000017f0 <__fp_splitA>:
    17f0:	88 0f       	add	r24, r24
    17f2:	97 fb       	bst	r25, 7
    17f4:	99 1f       	adc	r25, r25
    17f6:	61 f0       	breq	.+24     	; 0x1810 <__fp_splitA+0x20>
    17f8:	9f 3f       	cpi	r25, 0xFF	; 255
    17fa:	79 f0       	breq	.+30     	; 0x181a <__fp_splitA+0x2a>
    17fc:	87 95       	ror	r24
    17fe:	08 95       	ret
    1800:	12 16       	cp	r1, r18
    1802:	13 06       	cpc	r1, r19
    1804:	14 06       	cpc	r1, r20
    1806:	55 1f       	adc	r21, r21
    1808:	f2 cf       	rjmp	.-28     	; 0x17ee <__fp_split3+0xe>
    180a:	46 95       	lsr	r20
    180c:	f1 df       	rcall	.-30     	; 0x17f0 <__fp_splitA>
    180e:	08 c0       	rjmp	.+16     	; 0x1820 <__fp_splitA+0x30>
    1810:	16 16       	cp	r1, r22
    1812:	17 06       	cpc	r1, r23
    1814:	18 06       	cpc	r1, r24
    1816:	99 1f       	adc	r25, r25
    1818:	f1 cf       	rjmp	.-30     	; 0x17fc <__fp_splitA+0xc>
    181a:	86 95       	lsr	r24
    181c:	71 05       	cpc	r23, r1
    181e:	61 05       	cpc	r22, r1
    1820:	08 94       	sec
    1822:	08 95       	ret

00001824 <__fp_zero>:
    1824:	e8 94       	clt

00001826 <__fp_szero>:
    1826:	bb 27       	eor	r27, r27
    1828:	66 27       	eor	r22, r22
    182a:	77 27       	eor	r23, r23
    182c:	cb 01       	movw	r24, r22
    182e:	97 f9       	bld	r25, 7
    1830:	08 95       	ret

00001832 <__gesf2>:
    1832:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__fp_cmp>
    1836:	08 f4       	brcc	.+2      	; 0x183a <__gesf2+0x8>
    1838:	8f ef       	ldi	r24, 0xFF	; 255
    183a:	08 95       	ret

0000183c <__mulsf3>:
    183c:	0e 94 31 0c 	call	0x1862	; 0x1862 <__mulsf3x>
    1840:	0c 94 df 0b 	jmp	0x17be	; 0x17be <__fp_round>
    1844:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <__fp_pscA>
    1848:	38 f0       	brcs	.+14     	; 0x1858 <__mulsf3+0x1c>
    184a:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__fp_pscB>
    184e:	20 f0       	brcs	.+8      	; 0x1858 <__mulsf3+0x1c>
    1850:	95 23       	and	r25, r21
    1852:	11 f0       	breq	.+4      	; 0x1858 <__mulsf3+0x1c>
    1854:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <__fp_inf>
    1858:	0c 94 ce 0b 	jmp	0x179c	; 0x179c <__fp_nan>
    185c:	11 24       	eor	r1, r1
    185e:	0c 94 13 0c 	jmp	0x1826	; 0x1826 <__fp_szero>

00001862 <__mulsf3x>:
    1862:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__fp_split3>
    1866:	70 f3       	brcs	.-36     	; 0x1844 <__mulsf3+0x8>

00001868 <__mulsf3_pse>:
    1868:	95 9f       	mul	r25, r21
    186a:	c1 f3       	breq	.-16     	; 0x185c <__mulsf3+0x20>
    186c:	95 0f       	add	r25, r21
    186e:	50 e0       	ldi	r21, 0x00	; 0
    1870:	55 1f       	adc	r21, r21
    1872:	62 9f       	mul	r22, r18
    1874:	f0 01       	movw	r30, r0
    1876:	72 9f       	mul	r23, r18
    1878:	bb 27       	eor	r27, r27
    187a:	f0 0d       	add	r31, r0
    187c:	b1 1d       	adc	r27, r1
    187e:	63 9f       	mul	r22, r19
    1880:	aa 27       	eor	r26, r26
    1882:	f0 0d       	add	r31, r0
    1884:	b1 1d       	adc	r27, r1
    1886:	aa 1f       	adc	r26, r26
    1888:	64 9f       	mul	r22, r20
    188a:	66 27       	eor	r22, r22
    188c:	b0 0d       	add	r27, r0
    188e:	a1 1d       	adc	r26, r1
    1890:	66 1f       	adc	r22, r22
    1892:	82 9f       	mul	r24, r18
    1894:	22 27       	eor	r18, r18
    1896:	b0 0d       	add	r27, r0
    1898:	a1 1d       	adc	r26, r1
    189a:	62 1f       	adc	r22, r18
    189c:	73 9f       	mul	r23, r19
    189e:	b0 0d       	add	r27, r0
    18a0:	a1 1d       	adc	r26, r1
    18a2:	62 1f       	adc	r22, r18
    18a4:	83 9f       	mul	r24, r19
    18a6:	a0 0d       	add	r26, r0
    18a8:	61 1d       	adc	r22, r1
    18aa:	22 1f       	adc	r18, r18
    18ac:	74 9f       	mul	r23, r20
    18ae:	33 27       	eor	r19, r19
    18b0:	a0 0d       	add	r26, r0
    18b2:	61 1d       	adc	r22, r1
    18b4:	23 1f       	adc	r18, r19
    18b6:	84 9f       	mul	r24, r20
    18b8:	60 0d       	add	r22, r0
    18ba:	21 1d       	adc	r18, r1
    18bc:	82 2f       	mov	r24, r18
    18be:	76 2f       	mov	r23, r22
    18c0:	6a 2f       	mov	r22, r26
    18c2:	11 24       	eor	r1, r1
    18c4:	9f 57       	subi	r25, 0x7F	; 127
    18c6:	50 40       	sbci	r21, 0x00	; 0
    18c8:	9a f0       	brmi	.+38     	; 0x18f0 <__mulsf3_pse+0x88>
    18ca:	f1 f0       	breq	.+60     	; 0x1908 <__mulsf3_pse+0xa0>
    18cc:	88 23       	and	r24, r24
    18ce:	4a f0       	brmi	.+18     	; 0x18e2 <__mulsf3_pse+0x7a>
    18d0:	ee 0f       	add	r30, r30
    18d2:	ff 1f       	adc	r31, r31
    18d4:	bb 1f       	adc	r27, r27
    18d6:	66 1f       	adc	r22, r22
    18d8:	77 1f       	adc	r23, r23
    18da:	88 1f       	adc	r24, r24
    18dc:	91 50       	subi	r25, 0x01	; 1
    18de:	50 40       	sbci	r21, 0x00	; 0
    18e0:	a9 f7       	brne	.-22     	; 0x18cc <__mulsf3_pse+0x64>
    18e2:	9e 3f       	cpi	r25, 0xFE	; 254
    18e4:	51 05       	cpc	r21, r1
    18e6:	80 f0       	brcs	.+32     	; 0x1908 <__mulsf3_pse+0xa0>
    18e8:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <__fp_inf>
    18ec:	0c 94 13 0c 	jmp	0x1826	; 0x1826 <__fp_szero>
    18f0:	5f 3f       	cpi	r21, 0xFF	; 255
    18f2:	e4 f3       	brlt	.-8      	; 0x18ec <__mulsf3_pse+0x84>
    18f4:	98 3e       	cpi	r25, 0xE8	; 232
    18f6:	d4 f3       	brlt	.-12     	; 0x18ec <__mulsf3_pse+0x84>
    18f8:	86 95       	lsr	r24
    18fa:	77 95       	ror	r23
    18fc:	67 95       	ror	r22
    18fe:	b7 95       	ror	r27
    1900:	f7 95       	ror	r31
    1902:	e7 95       	ror	r30
    1904:	9f 5f       	subi	r25, 0xFF	; 255
    1906:	c1 f7       	brne	.-16     	; 0x18f8 <__mulsf3_pse+0x90>
    1908:	fe 2b       	or	r31, r30
    190a:	88 0f       	add	r24, r24
    190c:	91 1d       	adc	r25, r1
    190e:	96 95       	lsr	r25
    1910:	87 95       	ror	r24
    1912:	97 f9       	bld	r25, 7
    1914:	08 95       	ret

00001916 <sin>:
    1916:	9f 93       	push	r25
    1918:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__fp_rempio2>
    191c:	0f 90       	pop	r0
    191e:	07 fc       	sbrc	r0, 7
    1920:	ee 5f       	subi	r30, 0xFE	; 254
    1922:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <__fp_sinus>
    1926:	19 f4       	brne	.+6      	; 0x192e <sin+0x18>
    1928:	16 f4       	brtc	.+4      	; 0x192e <sin+0x18>
    192a:	0c 94 ce 0b 	jmp	0x179c	; 0x179c <__fp_nan>
    192e:	0c 94 d9 0c 	jmp	0x19b2	; 0x19b2 <__fp_mpack>

00001932 <sqrt>:
    1932:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <__fp_splitA>
    1936:	b8 f3       	brcs	.-18     	; 0x1926 <sin+0x10>
    1938:	99 23       	and	r25, r25
    193a:	c9 f3       	breq	.-14     	; 0x192e <sin+0x18>
    193c:	b6 f3       	brts	.-20     	; 0x192a <sin+0x14>
    193e:	9f 57       	subi	r25, 0x7F	; 127
    1940:	55 0b       	sbc	r21, r21
    1942:	87 ff       	sbrs	r24, 7
    1944:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__fp_norm2>
    1948:	00 24       	eor	r0, r0
    194a:	a0 e6       	ldi	r26, 0x60	; 96
    194c:	40 ea       	ldi	r20, 0xA0	; 160
    194e:	90 01       	movw	r18, r0
    1950:	80 58       	subi	r24, 0x80	; 128
    1952:	56 95       	lsr	r21
    1954:	97 95       	ror	r25
    1956:	28 f4       	brcc	.+10     	; 0x1962 <sqrt+0x30>
    1958:	80 5c       	subi	r24, 0xC0	; 192
    195a:	66 0f       	add	r22, r22
    195c:	77 1f       	adc	r23, r23
    195e:	88 1f       	adc	r24, r24
    1960:	20 f0       	brcs	.+8      	; 0x196a <sqrt+0x38>
    1962:	26 17       	cp	r18, r22
    1964:	37 07       	cpc	r19, r23
    1966:	48 07       	cpc	r20, r24
    1968:	30 f4       	brcc	.+12     	; 0x1976 <sqrt+0x44>
    196a:	62 1b       	sub	r22, r18
    196c:	73 0b       	sbc	r23, r19
    196e:	84 0b       	sbc	r24, r20
    1970:	20 29       	or	r18, r0
    1972:	31 29       	or	r19, r1
    1974:	4a 2b       	or	r20, r26
    1976:	a6 95       	lsr	r26
    1978:	17 94       	ror	r1
    197a:	07 94       	ror	r0
    197c:	20 25       	eor	r18, r0
    197e:	31 25       	eor	r19, r1
    1980:	4a 27       	eor	r20, r26
    1982:	58 f7       	brcc	.-42     	; 0x195a <sqrt+0x28>
    1984:	66 0f       	add	r22, r22
    1986:	77 1f       	adc	r23, r23
    1988:	88 1f       	adc	r24, r24
    198a:	20 f0       	brcs	.+8      	; 0x1994 <sqrt+0x62>
    198c:	26 17       	cp	r18, r22
    198e:	37 07       	cpc	r19, r23
    1990:	48 07       	cpc	r20, r24
    1992:	30 f4       	brcc	.+12     	; 0x19a0 <sqrt+0x6e>
    1994:	62 0b       	sbc	r22, r18
    1996:	73 0b       	sbc	r23, r19
    1998:	84 0b       	sbc	r24, r20
    199a:	20 0d       	add	r18, r0
    199c:	31 1d       	adc	r19, r1
    199e:	41 1d       	adc	r20, r1
    19a0:	a0 95       	com	r26
    19a2:	81 f7       	brne	.-32     	; 0x1984 <sqrt+0x52>
    19a4:	b9 01       	movw	r22, r18
    19a6:	84 2f       	mov	r24, r20
    19a8:	91 58       	subi	r25, 0x81	; 129
    19aa:	88 0f       	add	r24, r24
    19ac:	96 95       	lsr	r25
    19ae:	87 95       	ror	r24
    19b0:	08 95       	ret

000019b2 <__fp_mpack>:
    19b2:	9f 3f       	cpi	r25, 0xFF	; 255
    19b4:	31 f0       	breq	.+12     	; 0x19c2 <__fp_mpack_finite+0xc>

000019b6 <__fp_mpack_finite>:
    19b6:	91 50       	subi	r25, 0x01	; 1
    19b8:	20 f4       	brcc	.+8      	; 0x19c2 <__fp_mpack_finite+0xc>
    19ba:	87 95       	ror	r24
    19bc:	77 95       	ror	r23
    19be:	67 95       	ror	r22
    19c0:	b7 95       	ror	r27
    19c2:	88 0f       	add	r24, r24
    19c4:	91 1d       	adc	r25, r1
    19c6:	96 95       	lsr	r25
    19c8:	87 95       	ror	r24
    19ca:	97 f9       	bld	r25, 7
    19cc:	08 95       	ret

000019ce <__fp_norm2>:
    19ce:	91 50       	subi	r25, 0x01	; 1
    19d0:	50 40       	sbci	r21, 0x00	; 0
    19d2:	66 0f       	add	r22, r22
    19d4:	77 1f       	adc	r23, r23
    19d6:	88 1f       	adc	r24, r24
    19d8:	d2 f7       	brpl	.-12     	; 0x19ce <__fp_norm2>
    19da:	08 95       	ret
    19dc:	0c 94 ce 0b 	jmp	0x179c	; 0x179c <__fp_nan>

000019e0 <__fp_rempio2>:
    19e0:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <__fp_splitA>
    19e4:	d8 f3       	brcs	.-10     	; 0x19dc <__fp_norm2+0xe>
    19e6:	e8 94       	clt
    19e8:	e0 e0       	ldi	r30, 0x00	; 0
    19ea:	bb 27       	eor	r27, r27
    19ec:	9f 57       	subi	r25, 0x7F	; 127
    19ee:	f0 f0       	brcs	.+60     	; 0x1a2c <__fp_rempio2+0x4c>
    19f0:	2a ed       	ldi	r18, 0xDA	; 218
    19f2:	3f e0       	ldi	r19, 0x0F	; 15
    19f4:	49 ec       	ldi	r20, 0xC9	; 201
    19f6:	06 c0       	rjmp	.+12     	; 0x1a04 <__fp_rempio2+0x24>
    19f8:	ee 0f       	add	r30, r30
    19fa:	bb 0f       	add	r27, r27
    19fc:	66 1f       	adc	r22, r22
    19fe:	77 1f       	adc	r23, r23
    1a00:	88 1f       	adc	r24, r24
    1a02:	28 f0       	brcs	.+10     	; 0x1a0e <__fp_rempio2+0x2e>
    1a04:	b2 3a       	cpi	r27, 0xA2	; 162
    1a06:	62 07       	cpc	r22, r18
    1a08:	73 07       	cpc	r23, r19
    1a0a:	84 07       	cpc	r24, r20
    1a0c:	28 f0       	brcs	.+10     	; 0x1a18 <__fp_rempio2+0x38>
    1a0e:	b2 5a       	subi	r27, 0xA2	; 162
    1a10:	62 0b       	sbc	r22, r18
    1a12:	73 0b       	sbc	r23, r19
    1a14:	84 0b       	sbc	r24, r20
    1a16:	e3 95       	inc	r30
    1a18:	9a 95       	dec	r25
    1a1a:	72 f7       	brpl	.-36     	; 0x19f8 <__fp_rempio2+0x18>
    1a1c:	80 38       	cpi	r24, 0x80	; 128
    1a1e:	30 f4       	brcc	.+12     	; 0x1a2c <__fp_rempio2+0x4c>
    1a20:	9a 95       	dec	r25
    1a22:	bb 0f       	add	r27, r27
    1a24:	66 1f       	adc	r22, r22
    1a26:	77 1f       	adc	r23, r23
    1a28:	88 1f       	adc	r24, r24
    1a2a:	d2 f7       	brpl	.-12     	; 0x1a20 <__fp_rempio2+0x40>
    1a2c:	90 48       	sbci	r25, 0x80	; 128
    1a2e:	0c 94 db 0c 	jmp	0x19b6	; 0x19b6 <__fp_mpack_finite>

00001a32 <__fp_sinus>:
    1a32:	ef 93       	push	r30
    1a34:	e0 ff       	sbrs	r30, 0
    1a36:	07 c0       	rjmp	.+14     	; 0x1a46 <__fp_sinus+0x14>
    1a38:	a2 ea       	ldi	r26, 0xA2	; 162
    1a3a:	2a ed       	ldi	r18, 0xDA	; 218
    1a3c:	3f e0       	ldi	r19, 0x0F	; 15
    1a3e:	49 ec       	ldi	r20, 0xC9	; 201
    1a40:	5f eb       	ldi	r21, 0xBF	; 191
    1a42:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__addsf3x>
    1a46:	0e 94 df 0b 	call	0x17be	; 0x17be <__fp_round>
    1a4a:	0f 90       	pop	r0
    1a4c:	03 94       	inc	r0
    1a4e:	01 fc       	sbrc	r0, 1
    1a50:	90 58       	subi	r25, 0x80	; 128
    1a52:	e8 e8       	ldi	r30, 0x88	; 136
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	0c 94 2d 0d 	jmp	0x1a5a	; 0x1a5a <__fp_powsodd>

00001a5a <__fp_powsodd>:
    1a5a:	9f 93       	push	r25
    1a5c:	8f 93       	push	r24
    1a5e:	7f 93       	push	r23
    1a60:	6f 93       	push	r22
    1a62:	ff 93       	push	r31
    1a64:	ef 93       	push	r30
    1a66:	9b 01       	movw	r18, r22
    1a68:	ac 01       	movw	r20, r24
    1a6a:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3>
    1a6e:	ef 91       	pop	r30
    1a70:	ff 91       	pop	r31
    1a72:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__fp_powser>
    1a76:	2f 91       	pop	r18
    1a78:	3f 91       	pop	r19
    1a7a:	4f 91       	pop	r20
    1a7c:	5f 91       	pop	r21
    1a7e:	0c 94 1e 0c 	jmp	0x183c	; 0x183c <__mulsf3>

00001a82 <__fp_powser>:
    1a82:	df 93       	push	r29
    1a84:	cf 93       	push	r28
    1a86:	1f 93       	push	r17
    1a88:	0f 93       	push	r16
    1a8a:	ff 92       	push	r15
    1a8c:	ef 92       	push	r14
    1a8e:	df 92       	push	r13
    1a90:	7b 01       	movw	r14, r22
    1a92:	8c 01       	movw	r16, r24
    1a94:	68 94       	set
    1a96:	06 c0       	rjmp	.+12     	; 0x1aa4 <__fp_powser+0x22>
    1a98:	da 2e       	mov	r13, r26
    1a9a:	ef 01       	movw	r28, r30
    1a9c:	0e 94 31 0c 	call	0x1862	; 0x1862 <__mulsf3x>
    1aa0:	fe 01       	movw	r30, r28
    1aa2:	e8 94       	clt
    1aa4:	a5 91       	lpm	r26, Z+
    1aa6:	25 91       	lpm	r18, Z+
    1aa8:	35 91       	lpm	r19, Z+
    1aaa:	45 91       	lpm	r20, Z+
    1aac:	55 91       	lpm	r21, Z+
    1aae:	a6 f3       	brts	.-24     	; 0x1a98 <__fp_powser+0x16>
    1ab0:	ef 01       	movw	r28, r30
    1ab2:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__addsf3x>
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	97 01       	movw	r18, r14
    1aba:	a8 01       	movw	r20, r16
    1abc:	da 94       	dec	r13
    1abe:	69 f7       	brne	.-38     	; 0x1a9a <__fp_powser+0x18>
    1ac0:	df 90       	pop	r13
    1ac2:	ef 90       	pop	r14
    1ac4:	ff 90       	pop	r15
    1ac6:	0f 91       	pop	r16
    1ac8:	1f 91       	pop	r17
    1aca:	cf 91       	pop	r28
    1acc:	df 91       	pop	r29
    1ace:	08 95       	ret

00001ad0 <_ZL16currentCharacterv>:
    1ad0:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <_ZL17use_program_space>
    1ad4:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <__data_end>
    1ad8:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <__data_end+0x1>
    1adc:	99 23       	and	r25, r25
    1ade:	11 f0       	breq	.+4      	; 0x1ae4 <_ZL16currentCharacterv+0x14>
    1ae0:	84 91       	lpm	r24, Z
    1ae2:	01 c0       	rjmp	.+2      	; 0x1ae6 <_ZL16currentCharacterv+0x16>
    1ae4:	80 81       	ld	r24, Z
    1ae6:	2f eb       	ldi	r18, 0xBF	; 191
    1ae8:	28 0f       	add	r18, r24
    1aea:	2a 31       	cpi	r18, 0x1A	; 26
    1aec:	10 f4       	brcc	.+4      	; 0x1af2 <_ZL16currentCharacterv+0x22>
    1aee:	80 5e       	subi	r24, 0xE0	; 224
    1af0:	08 95       	ret
    1af2:	80 32       	cpi	r24, 0x20	; 32
    1af4:	49 f4       	brne	.+18     	; 0x1b08 <_ZL16currentCharacterv+0x38>
    1af6:	9f 01       	movw	r18, r30
    1af8:	2f 5f       	subi	r18, 0xFF	; 255
    1afa:	3f 4f       	sbci	r19, 0xFF	; 255
    1afc:	30 93 3b 01 	sts	0x013B, r19	; 0x80013b <__data_end+0x1>
    1b00:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <__data_end>
    1b04:	ef 2b       	or	r30, r31
    1b06:	31 f7       	brne	.-52     	; 0x1ad4 <_ZL16currentCharacterv+0x4>
    1b08:	08 95       	ret

00001b0a <_ZL9getNumberv>:
    1b0a:	1f 93       	push	r17
    1b0c:	cf 93       	push	r28
    1b0e:	df 93       	push	r29
    1b10:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <_ZL16currentCharacterv>
    1b14:	c0 e0       	ldi	r28, 0x00	; 0
    1b16:	d0 e0       	ldi	r29, 0x00	; 0
    1b18:	1a e0       	ldi	r17, 0x0A	; 10
    1b1a:	90 ed       	ldi	r25, 0xD0	; 208
    1b1c:	98 0f       	add	r25, r24
    1b1e:	9a 30       	cpi	r25, 0x0A	; 10
    1b20:	b8 f4       	brcc	.+46     	; 0x1b50 <_ZL9getNumberv+0x46>
    1b22:	9e 01       	movw	r18, r28
    1b24:	12 9f       	mul	r17, r18
    1b26:	e0 01       	movw	r28, r0
    1b28:	13 9f       	mul	r17, r19
    1b2a:	d0 0d       	add	r29, r0
    1b2c:	11 24       	eor	r1, r1
    1b2e:	c8 0f       	add	r28, r24
    1b30:	d1 1d       	adc	r29, r1
    1b32:	87 fd       	sbrc	r24, 7
    1b34:	da 95       	dec	r29
    1b36:	e0 97       	sbiw	r28, 0x30	; 48
    1b38:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
    1b3c:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <__data_end+0x1>
    1b40:	01 96       	adiw	r24, 0x01	; 1
    1b42:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__data_end+0x1>
    1b46:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
    1b4a:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <_ZL16currentCharacterv>
    1b4e:	e5 cf       	rjmp	.-54     	; 0x1b1a <_ZL9getNumberv+0x10>
    1b50:	ce 01       	movw	r24, r28
    1b52:	df 91       	pop	r29
    1b54:	cf 91       	pop	r28
    1b56:	1f 91       	pop	r17
    1b58:	08 95       	ret

00001b5a <_ZN15OrangutanBuzzer5init2Ev>:
    1b5a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1b5e:	83 e2       	ldi	r24, 0x23	; 35
    1b60:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1b64:	81 e1       	ldi	r24, 0x11	; 17
    1b66:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1b6a:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    1b6e:	80 e1       	ldi	r24, 0x10	; 16
    1b70:	97 e2       	ldi	r25, 0x27	; 39
    1b72:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1b76:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1b7a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1b7e:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1b82:	22 9a       	sbi	0x04, 2	; 4
    1b84:	78 94       	sei
    1b86:	08 95       	ret

00001b88 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
    1b88:	8f 92       	push	r8
    1b8a:	9f 92       	push	r9
    1b8c:	af 92       	push	r10
    1b8e:	bf 92       	push	r11
    1b90:	df 92       	push	r13
    1b92:	ef 92       	push	r14
    1b94:	ff 92       	push	r15
    1b96:	0f 93       	push	r16
    1b98:	1f 93       	push	r17
    1b9a:	cf 93       	push	r28
    1b9c:	df 93       	push	r29
    1b9e:	5c 01       	movw	r10, r24
    1ba0:	8b 01       	movw	r16, r22
    1ba2:	d4 2e       	mov	r13, r20
    1ba4:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <buzzerInitialized>
    1ba8:	81 11       	cpse	r24, r1
    1baa:	05 c0       	rjmp	.+10     	; 0x1bb6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <buzzerInitialized>
    1bb2:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <_ZN15OrangutanBuzzer5init2Ev>
    1bb6:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <buzzerFinished>
    1bba:	b7 fe       	sbrs	r11, 7
    1bbc:	05 c0       	rjmp	.+10     	; 0x1bc8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
    1bbe:	e8 94       	clt
    1bc0:	b7 f8       	bld	r11, 7
    1bc2:	2a e0       	ldi	r18, 0x0A	; 10
    1bc4:	f2 2e       	mov	r15, r18
    1bc6:	02 c0       	rjmp	.+4      	; 0x1bcc <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
    1bc8:	ff 24       	eor	r15, r15
    1bca:	f3 94       	inc	r15
    1bcc:	e0 90 81 00 	lds	r14, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1bd0:	2e 2d       	mov	r18, r14
    1bd2:	28 7f       	andi	r18, 0xF8	; 248
    1bd4:	e2 2e       	mov	r14, r18
    1bd6:	48 ec       	ldi	r20, 0xC8	; 200
    1bd8:	f4 9e       	mul	r15, r20
    1bda:	c0 01       	movw	r24, r0
    1bdc:	11 24       	eor	r1, r1
    1bde:	8a 15       	cp	r24, r10
    1be0:	9b 05       	cpc	r25, r11
    1be2:	e0 f4       	brcc	.+56     	; 0x1c1c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
    1be4:	e5 01       	movw	r28, r10
    1be6:	51 e1       	ldi	r21, 0x11	; 17
    1be8:	a5 16       	cp	r10, r21
    1bea:	57 e2       	ldi	r21, 0x27	; 39
    1bec:	b5 06       	cpc	r11, r21
    1bee:	10 f0       	brcs	.+4      	; 0x1bf4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
    1bf0:	c0 e1       	ldi	r28, 0x10	; 16
    1bf2:	d7 e2       	ldi	r29, 0x27	; 39
    1bf4:	be 01       	movw	r22, r28
    1bf6:	76 95       	lsr	r23
    1bf8:	67 95       	ror	r22
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	60 58       	subi	r22, 0x80	; 128
    1c00:	79 46       	sbci	r23, 0x69	; 105
    1c02:	87 46       	sbci	r24, 0x67	; 103
    1c04:	9f 4f       	sbci	r25, 0xFF	; 255
    1c06:	4e 01       	movw	r8, r28
    1c08:	a1 2c       	mov	r10, r1
    1c0a:	b1 2c       	mov	r11, r1
    1c0c:	a5 01       	movw	r20, r10
    1c0e:	94 01       	movw	r18, r8
    1c10:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <__udivmodsi4>
    1c14:	59 01       	movw	r10, r18
    1c16:	8e 2d       	mov	r24, r14
    1c18:	81 60       	ori	r24, 0x01	; 1
    1c1a:	24 c0       	rjmp	.+72     	; 0x1c64 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
    1c1c:	c8 e2       	ldi	r28, 0x28	; 40
    1c1e:	fc 9e       	mul	r15, r28
    1c20:	c0 2d       	mov	r28, r0
    1c22:	11 24       	eor	r1, r1
    1c24:	d0 e0       	ldi	r29, 0x00	; 0
    1c26:	ca 15       	cp	r28, r10
    1c28:	db 05       	cpc	r29, r11
    1c2a:	08 f4       	brcc	.+2      	; 0x1c2e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
    1c2c:	e5 01       	movw	r28, r10
    1c2e:	be 01       	movw	r22, r28
    1c30:	76 95       	lsr	r23
    1c32:	67 95       	ror	r22
    1c34:	9e 01       	movw	r18, r28
    1c36:	40 e0       	ldi	r20, 0x00	; 0
    1c38:	50 e0       	ldi	r21, 0x00	; 0
    1c3a:	8a e0       	ldi	r24, 0x0A	; 10
    1c3c:	f8 12       	cpse	r15, r24
    1c3e:	07 c0       	rjmp	.+14     	; 0x1c4e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	60 5e       	subi	r22, 0xE0	; 224
    1c46:	73 44       	sbci	r23, 0x43	; 67
    1c48:	81 44       	sbci	r24, 0x41	; 65
    1c4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c4c:	06 c0       	rjmp	.+12     	; 0x1c5a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	60 53       	subi	r22, 0x30	; 48
    1c54:	7d 4e       	sbci	r23, 0xED	; 237
    1c56:	8c 4e       	sbci	r24, 0xEC	; 236
    1c58:	9f 4f       	sbci	r25, 0xFF	; 255
    1c5a:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <__udivmodsi4>
    1c5e:	59 01       	movw	r10, r18
    1c60:	8e 2d       	mov	r24, r14
    1c62:	82 60       	ori	r24, 0x02	; 2
    1c64:	88 2e       	mov	r8, r24
    1c66:	2a e0       	ldi	r18, 0x0A	; 10
    1c68:	f2 12       	cpse	r15, r18
    1c6a:	07 c0       	rjmp	.+14     	; 0x1c7a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
    1c6c:	ce 01       	movw	r24, r28
    1c6e:	05 96       	adiw	r24, 0x05	; 5
    1c70:	6a e0       	ldi	r22, 0x0A	; 10
    1c72:	70 e0       	ldi	r23, 0x00	; 0
    1c74:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <__udivmodhi4>
    1c78:	eb 01       	movw	r28, r22
    1c7a:	c8 3e       	cpi	r28, 0xE8	; 232
    1c7c:	43 e0       	ldi	r20, 0x03	; 3
    1c7e:	d4 07       	cpc	r29, r20
    1c80:	59 f0       	breq	.+22     	; 0x1c98 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    1c82:	98 01       	movw	r18, r16
    1c84:	de 01       	movw	r26, r28
    1c86:	0e 94 55 16 	call	0x2caa	; 0x2caa <__umulhisi3>
    1c8a:	28 ee       	ldi	r18, 0xE8	; 232
    1c8c:	33 e0       	ldi	r19, 0x03	; 3
    1c8e:	40 e0       	ldi	r20, 0x00	; 0
    1c90:	50 e0       	ldi	r21, 0x00	; 0
    1c92:	0e 94 30 16 	call	0x2c60	; 0x2c60 <__divmodsi4>
    1c96:	89 01       	movw	r16, r18
    1c98:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1c9c:	80 92 81 00 	sts	0x0081, r8	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1ca0:	b0 92 89 00 	sts	0x0089, r11	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1ca4:	a0 92 88 00 	sts	0x0088, r10	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1ca8:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1cac:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1cb0:	4d 2d       	mov	r20, r13
    1cb2:	40 31       	cpi	r20, 0x10	; 16
    1cb4:	08 f0       	brcs	.+2      	; 0x1cb8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    1cb6:	4f e0       	ldi	r20, 0x0F	; 15
    1cb8:	80 e1       	ldi	r24, 0x10	; 16
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	84 1b       	sub	r24, r20
    1cbe:	91 09       	sbc	r25, r1
    1cc0:	a9 01       	movw	r20, r18
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    1cc4:	56 95       	lsr	r21
    1cc6:	47 95       	ror	r20
    1cc8:	8a 95       	dec	r24
    1cca:	e2 f7       	brpl	.-8      	; 0x1cc4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    1ccc:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1cd0:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1cd4:	10 93 42 01 	sts	0x0142, r17	; 0x800142 <_ZL13buzzerTimeout+0x1>
    1cd8:	00 93 41 01 	sts	0x0141, r16	; 0x800141 <_ZL13buzzerTimeout>
    1cdc:	86 b3       	in	r24, 0x16	; 22
    1cde:	8f ef       	ldi	r24, 0xFF	; 255
    1ce0:	86 bb       	out	0x16, r24	; 22
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1ce8:	df 91       	pop	r29
    1cea:	cf 91       	pop	r28
    1cec:	1f 91       	pop	r17
    1cee:	0f 91       	pop	r16
    1cf0:	ff 90       	pop	r15
    1cf2:	ef 90       	pop	r14
    1cf4:	df 90       	pop	r13
    1cf6:	bf 90       	pop	r11
    1cf8:	af 90       	pop	r10
    1cfa:	9f 90       	pop	r9
    1cfc:	8f 90       	pop	r8
    1cfe:	08 95       	ret

00001d00 <_ZN15OrangutanBuzzer8playNoteEhjh>:
    1d00:	cf 93       	push	r28
    1d02:	df 93       	push	r29
    1d04:	eb 01       	movw	r28, r22
    1d06:	8f 3f       	cpi	r24, 0xFF	; 255
    1d08:	11 f0       	breq	.+4      	; 0x1d0e <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
    1d0a:	41 11       	cpse	r20, r1
    1d0c:	05 c0       	rjmp	.+10     	; 0x1d18 <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
    1d0e:	40 e0       	ldi	r20, 0x00	; 0
    1d10:	be 01       	movw	r22, r28
    1d12:	88 ee       	ldi	r24, 0xE8	; 232
    1d14:	93 e0       	ldi	r25, 0x03	; 3
    1d16:	43 c0       	rjmp	.+134    	; 0x1d9e <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
    1d18:	81 31       	cpi	r24, 0x11	; 17
    1d1a:	30 f0       	brcs	.+12     	; 0x1d28 <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
    1d1c:	50 ef       	ldi	r21, 0xF0	; 240
    1d1e:	58 0f       	add	r21, r24
    1d20:	50 36       	cpi	r21, 0x60	; 96
    1d22:	18 f0       	brcs	.+6      	; 0x1d2a <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1d24:	5f e5       	ldi	r21, 0x5F	; 95
    1d26:	01 c0       	rjmp	.+2      	; 0x1d2a <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1d28:	50 e0       	ldi	r21, 0x00	; 0
    1d2a:	85 2f       	mov	r24, r21
    1d2c:	6c e0       	ldi	r22, 0x0C	; 12
    1d2e:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <__udivmodqi4>
    1d32:	68 2f       	mov	r22, r24
    1d34:	74 ef       	ldi	r23, 0xF4	; 244
    1d36:	76 03       	mulsu	r23, r22
    1d38:	90 01       	movw	r18, r0
    1d3a:	11 24       	eor	r1, r1
    1d3c:	25 0f       	add	r18, r21
    1d3e:	31 1d       	adc	r19, r1
    1d40:	2c 30       	cpi	r18, 0x0C	; 12
    1d42:	31 05       	cpc	r19, r1
    1d44:	40 f4       	brcc	.+16     	; 0x1d56 <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
    1d46:	f9 01       	movw	r30, r18
    1d48:	ee 0f       	add	r30, r30
    1d4a:	ff 1f       	adc	r31, r31
    1d4c:	ee 5d       	subi	r30, 0xDE	; 222
    1d4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d50:	20 81       	ld	r18, Z
    1d52:	31 81       	ldd	r19, Z+1	; 0x01
    1d54:	02 c0       	rjmp	.+4      	; 0x1d5a <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	87 30       	cpi	r24, 0x07	; 7
    1d5c:	81 f0       	breq	.+32     	; 0x1d7e <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
    1d5e:	08 2e       	mov	r0, r24
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
    1d62:	22 0f       	add	r18, r18
    1d64:	33 1f       	adc	r19, r19
    1d66:	0a 94       	dec	r0
    1d68:	e2 f7       	brpl	.-8      	; 0x1d62 <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    1d6a:	82 30       	cpi	r24, 0x02	; 2
    1d6c:	28 f0       	brcs	.+10     	; 0x1d78 <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
    1d6e:	c9 01       	movw	r24, r18
    1d70:	05 96       	adiw	r24, 0x05	; 5
    1d72:	6a e0       	ldi	r22, 0x0A	; 10
    1d74:	70 e0       	ldi	r23, 0x00	; 0
    1d76:	0c c0       	rjmp	.+24     	; 0x1d90 <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
    1d78:	c9 01       	movw	r24, r18
    1d7a:	90 58       	subi	r25, 0x80	; 128
    1d7c:	0c c0       	rjmp	.+24     	; 0x1d96 <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
    1d7e:	c9 01       	movw	r24, r18
    1d80:	36 e0       	ldi	r19, 0x06	; 6
    1d82:	88 0f       	add	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	3a 95       	dec	r19
    1d88:	e1 f7       	brne	.-8      	; 0x1d82 <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
    1d8a:	02 96       	adiw	r24, 0x02	; 2
    1d8c:	65 e0       	ldi	r22, 0x05	; 5
    1d8e:	70 e0       	ldi	r23, 0x00	; 0
    1d90:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <__udivmodhi4>
    1d94:	cb 01       	movw	r24, r22
    1d96:	40 31       	cpi	r20, 0x10	; 16
    1d98:	08 f0       	brcs	.+2      	; 0x1d9c <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    1d9a:	4f e0       	ldi	r20, 0x0F	; 15
    1d9c:	be 01       	movw	r22, r28
    1d9e:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1da2:	df 91       	pop	r29
    1da4:	cf 91       	pop	r28
    1da6:	08 95       	ret

00001da8 <_ZL8nextNotev>:
    1da8:	a2 e0       	ldi	r26, 0x02	; 2
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	ea ed       	ldi	r30, 0xDA	; 218
    1dae:	fe e0       	ldi	r31, 0x0E	; 14
    1db0:	0c 94 79 16 	jmp	0x2cf2	; 0x2cf2 <__prologue_saves__+0x4>
    1db4:	90 90 08 01 	lds	r9, 0x0108	; 0x800108 <_ZL6octave>
    1db8:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <_ZL8staccato>
    1dbc:	88 23       	and	r24, r24
    1dbe:	21 f0       	breq	.+8      	; 0x1dc8 <_ZL8nextNotev+0x20>
    1dc0:	60 91 3d 01 	lds	r22, 0x013D	; 0x80013d <_ZL22staccato_rest_duration>
    1dc4:	61 11       	cpse	r22, r1
    1dc6:	17 c0       	rjmp	.+46     	; 0x1df6 <_ZL8nextNotev+0x4e>
    1dc8:	77 24       	eor	r7, r7
    1dca:	73 94       	inc	r7
    1dcc:	b0 ec       	ldi	r27, 0xC0	; 192
    1dce:	ab 2e       	mov	r10, r27
    1dd0:	bd e5       	ldi	r27, 0x5D	; 93
    1dd2:	bb 2e       	mov	r11, r27
    1dd4:	1a e0       	ldi	r17, 0x0A	; 10
    1dd6:	61 2e       	mov	r6, r17
    1dd8:	04 e0       	ldi	r16, 0x04	; 4
    1dda:	80 2e       	mov	r8, r16
    1ddc:	80 ed       	ldi	r24, 0xD0	; 208
    1dde:	c8 2e       	mov	r12, r24
    1de0:	87 e0       	ldi	r24, 0x07	; 7
    1de2:	d8 2e       	mov	r13, r24
    1de4:	94 e0       	ldi	r25, 0x04	; 4
    1de6:	e9 2e       	mov	r14, r25
    1de8:	f1 2c       	mov	r15, r1
    1dea:	04 ef       	ldi	r16, 0xF4	; 244
    1dec:	11 e0       	ldi	r17, 0x01	; 1
    1dee:	2f e0       	ldi	r18, 0x0F	; 15
    1df0:	42 2e       	mov	r4, r18
    1df2:	51 2c       	mov	r5, r1
    1df4:	15 c0       	rjmp	.+42     	; 0x1e20 <_ZL8nextNotev+0x78>
    1df6:	70 e0       	ldi	r23, 0x00	; 0
    1df8:	40 e0       	ldi	r20, 0x00	; 0
    1dfa:	88 ee       	ldi	r24, 0xE8	; 232
    1dfc:	93 e0       	ldi	r25, 0x03	; 3
    1dfe:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1e02:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <_ZL22staccato_rest_duration>
    1e06:	17 c1       	rjmp	.+558    	; 0x2036 <_ZL8nextNotev+0x28e>
    1e08:	86 36       	cpi	r24, 0x66	; 102
    1e0a:	d4 f5       	brge	.+116    	; 0x1e80 <_ZL8nextNotev+0xd8>
    1e0c:	81 36       	cpi	r24, 0x61	; 97
    1e0e:	09 f4       	brne	.+2      	; 0x1e12 <_ZL8nextNotev+0x6a>
    1e10:	a9 c0       	rjmp	.+338    	; 0x1f64 <_ZL8nextNotev+0x1bc>
    1e12:	7c f5       	brge	.+94     	; 0x1e72 <_ZL8nextNotev+0xca>
    1e14:	8c 33       	cpi	r24, 0x3C	; 60
    1e16:	09 f4       	brne	.+2      	; 0x1e1a <_ZL8nextNotev+0x72>
    1e18:	60 c0       	rjmp	.+192    	; 0x1eda <_ZL8nextNotev+0x132>
    1e1a:	8e 33       	cpi	r24, 0x3E	; 62
    1e1c:	81 f4       	brne	.+32     	; 0x1e3e <_ZL8nextNotev+0x96>
    1e1e:	93 94       	inc	r9
    1e20:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <_ZL16currentCharacterv>
    1e24:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <__data_end>
    1e28:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <__data_end+0x1>
    1e2c:	2f 5f       	subi	r18, 0xFF	; 255
    1e2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e30:	30 93 3b 01 	sts	0x013B, r19	; 0x80013b <__data_end+0x1>
    1e34:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <__data_end>
    1e38:	85 36       	cpi	r24, 0x65	; 101
    1e3a:	31 f7       	brne	.-52     	; 0x1e08 <_ZL8nextNotev+0x60>
    1e3c:	52 c0       	rjmp	.+164    	; 0x1ee2 <_ZL8nextNotev+0x13a>
    1e3e:	81 32       	cpi	r24, 0x21	; 33
    1e40:	09 f0       	breq	.+2      	; 0x1e44 <_ZL8nextNotev+0x9c>
    1e42:	8b c0       	rjmp	.+278    	; 0x1f5a <_ZL8nextNotev+0x1b2>
    1e44:	80 92 08 01 	sts	0x0108, r8	; 0x800108 <_ZL6octave>
    1e48:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_ZL19whole_note_duration+0x1>
    1e4c:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_ZL19whole_note_duration>
    1e50:	f0 92 05 01 	sts	0x0105, r15	; 0x800105 <_ZL9note_type+0x1>
    1e54:	e0 92 04 01 	sts	0x0104, r14	; 0x800104 <_ZL9note_type>
    1e58:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <_ZL8duration+0x1>
    1e5c:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <_ZL8duration>
    1e60:	50 92 01 01 	sts	0x0101, r5	; 0x800101 <__data_start+0x1>
    1e64:	40 92 00 01 	sts	0x0100, r4	; 0x800100 <__data_start>
    1e68:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <_ZL8staccato>
    1e6c:	a4 e0       	ldi	r26, 0x04	; 4
    1e6e:	9a 2e       	mov	r9, r26
    1e70:	d7 cf       	rjmp	.-82     	; 0x1e20 <_ZL8nextNotev+0x78>
    1e72:	83 36       	cpi	r24, 0x63	; 99
    1e74:	a1 f1       	breq	.+104    	; 0x1ede <_ZL8nextNotev+0x136>
    1e76:	0c f4       	brge	.+2      	; 0x1e7a <_ZL8nextNotev+0xd2>
    1e78:	78 c0       	rjmp	.+240    	; 0x1f6a <_ZL8nextNotev+0x1c2>
    1e7a:	10 e0       	ldi	r17, 0x00	; 0
    1e7c:	82 e0       	ldi	r24, 0x02	; 2
    1e7e:	77 c0       	rjmp	.+238    	; 0x1f6e <_ZL8nextNotev+0x1c6>
    1e80:	8d 36       	cpi	r24, 0x6D	; 109
    1e82:	c1 f1       	breq	.+112    	; 0x1ef4 <_ZL8nextNotev+0x14c>
    1e84:	94 f4       	brge	.+36     	; 0x1eaa <_ZL8nextNotev+0x102>
    1e86:	87 36       	cpi	r24, 0x67	; 103
    1e88:	91 f1       	breq	.+100    	; 0x1eee <_ZL8nextNotev+0x146>
    1e8a:	74 f1       	brlt	.+92     	; 0x1ee8 <_ZL8nextNotev+0x140>
    1e8c:	8c 36       	cpi	r24, 0x6C	; 108
    1e8e:	09 f0       	breq	.+2      	; 0x1e92 <_ZL8nextNotev+0xea>
    1e90:	64 c0       	rjmp	.+200    	; 0x1f5a <_ZL8nextNotev+0x1b2>
    1e92:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <_ZL9getNumberv>
    1e96:	bc 01       	movw	r22, r24
    1e98:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_ZL9note_type+0x1>
    1e9c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_ZL9note_type>
    1ea0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL19whole_note_duration>
    1ea4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL19whole_note_duration+0x1>
    1ea8:	51 c0       	rjmp	.+162    	; 0x1f4c <_ZL8nextNotev+0x1a4>
    1eaa:	82 37       	cpi	r24, 0x72	; 114
    1eac:	c9 f1       	breq	.+114    	; 0x1f20 <_ZL8nextNotev+0x178>
    1eae:	4c f4       	brge	.+18     	; 0x1ec2 <_ZL8nextNotev+0x11a>
    1eb0:	8f 36       	cpi	r24, 0x6F	; 111
    1eb2:	09 f0       	breq	.+2      	; 0x1eb6 <_ZL8nextNotev+0x10e>
    1eb4:	52 c0       	rjmp	.+164    	; 0x1f5a <_ZL8nextNotev+0x1b2>
    1eb6:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <_ZL9getNumberv>
    1eba:	98 2e       	mov	r9, r24
    1ebc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL6octave>
    1ec0:	af cf       	rjmp	.-162    	; 0x1e20 <_ZL8nextNotev+0x78>
    1ec2:	84 37       	cpi	r24, 0x74	; 116
    1ec4:	81 f1       	breq	.+96     	; 0x1f26 <_ZL8nextNotev+0x17e>
    1ec6:	86 37       	cpi	r24, 0x76	; 118
    1ec8:	09 f0       	breq	.+2      	; 0x1ecc <_ZL8nextNotev+0x124>
    1eca:	47 c0       	rjmp	.+142    	; 0x1f5a <_ZL8nextNotev+0x1b2>
    1ecc:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <_ZL9getNumberv>
    1ed0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1ed4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1ed8:	a3 cf       	rjmp	.-186    	; 0x1e20 <_ZL8nextNotev+0x78>
    1eda:	9a 94       	dec	r9
    1edc:	a1 cf       	rjmp	.-190    	; 0x1e20 <_ZL8nextNotev+0x78>
    1ede:	10 e0       	ldi	r17, 0x00	; 0
    1ee0:	20 c0       	rjmp	.+64     	; 0x1f22 <_ZL8nextNotev+0x17a>
    1ee2:	10 e0       	ldi	r17, 0x00	; 0
    1ee4:	84 e0       	ldi	r24, 0x04	; 4
    1ee6:	43 c0       	rjmp	.+134    	; 0x1f6e <_ZL8nextNotev+0x1c6>
    1ee8:	10 e0       	ldi	r17, 0x00	; 0
    1eea:	85 e0       	ldi	r24, 0x05	; 5
    1eec:	40 c0       	rjmp	.+128    	; 0x1f6e <_ZL8nextNotev+0x1c6>
    1eee:	10 e0       	ldi	r17, 0x00	; 0
    1ef0:	87 e0       	ldi	r24, 0x07	; 7
    1ef2:	3d c0       	rjmp	.+122    	; 0x1f6e <_ZL8nextNotev+0x1c6>
    1ef4:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <_ZL16currentCharacterv>
    1ef8:	8c 36       	cpi	r24, 0x6C	; 108
    1efa:	19 f4       	brne	.+6      	; 0x1f02 <_ZL8nextNotev+0x15a>
    1efc:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <_ZL8staccato>
    1f00:	04 c0       	rjmp	.+8      	; 0x1f0a <_ZL8nextNotev+0x162>
    1f02:	70 92 3e 01 	sts	0x013E, r7	; 0x80013e <_ZL8staccato>
    1f06:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <_ZL22staccato_rest_duration>
    1f0a:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <__data_end>
    1f0e:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <__data_end+0x1>
    1f12:	2f 5f       	subi	r18, 0xFF	; 255
    1f14:	3f 4f       	sbci	r19, 0xFF	; 255
    1f16:	30 93 3b 01 	sts	0x013B, r19	; 0x80013b <__data_end+0x1>
    1f1a:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <__data_end>
    1f1e:	80 cf       	rjmp	.-256    	; 0x1e20 <_ZL8nextNotev+0x78>
    1f20:	11 e0       	ldi	r17, 0x01	; 1
    1f22:	80 e0       	ldi	r24, 0x00	; 0
    1f24:	24 c0       	rjmp	.+72     	; 0x1f6e <_ZL8nextNotev+0x1c6>
    1f26:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <_ZL9getNumberv>
    1f2a:	bc 01       	movw	r22, r24
    1f2c:	c5 01       	movw	r24, r10
    1f2e:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <__udivmodhi4>
    1f32:	66 9e       	mul	r6, r22
    1f34:	c0 01       	movw	r24, r0
    1f36:	67 9e       	mul	r6, r23
    1f38:	90 0d       	add	r25, r0
    1f3a:	11 24       	eor	r1, r1
    1f3c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL19whole_note_duration+0x1>
    1f40:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL19whole_note_duration>
    1f44:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_ZL9note_type>
    1f48:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_ZL9note_type+0x1>
    1f4c:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <__udivmodhi4>
    1f50:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <_ZL8duration+0x1>
    1f54:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <_ZL8duration>
    1f58:	63 cf       	rjmp	.-314    	; 0x1e20 <_ZL8nextNotev+0x78>
    1f5a:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <__data_end+0x1>
    1f5e:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <__data_end>
    1f62:	69 c0       	rjmp	.+210    	; 0x2036 <_ZL8nextNotev+0x28e>
    1f64:	10 e0       	ldi	r17, 0x00	; 0
    1f66:	89 e0       	ldi	r24, 0x09	; 9
    1f68:	02 c0       	rjmp	.+4      	; 0x1f6e <_ZL8nextNotev+0x1c6>
    1f6a:	10 e0       	ldi	r17, 0x00	; 0
    1f6c:	8b e0       	ldi	r24, 0x0B	; 11
    1f6e:	08 2f       	mov	r16, r24
    1f70:	9c e0       	ldi	r25, 0x0C	; 12
    1f72:	99 9e       	mul	r9, r25
    1f74:	00 0d       	add	r16, r0
    1f76:	11 24       	eor	r1, r1
    1f78:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <_ZL16currentCharacterv>
    1f7c:	98 2f       	mov	r25, r24
    1f7e:	97 7f       	andi	r25, 0xF7	; 247
    1f80:	93 32       	cpi	r25, 0x23	; 35
    1f82:	61 f4       	brne	.+24     	; 0x1f9c <_ZL8nextNotev+0x1f4>
    1f84:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <__data_end>
    1f88:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <__data_end+0x1>
    1f8c:	2f 5f       	subi	r18, 0xFF	; 255
    1f8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f90:	30 93 3b 01 	sts	0x013B, r19	; 0x80013b <__data_end+0x1>
    1f94:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <__data_end>
    1f98:	0f 5f       	subi	r16, 0xFF	; 255
    1f9a:	ee cf       	rjmp	.-36     	; 0x1f78 <_ZL8nextNotev+0x1d0>
    1f9c:	8d 32       	cpi	r24, 0x2D	; 45
    1f9e:	71 f4       	brne	.+28     	; 0x1fbc <_ZL8nextNotev+0x214>
    1fa0:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <__data_end>
    1fa4:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <__data_end+0x1>
    1fa8:	2f 5f       	subi	r18, 0xFF	; 255
    1faa:	3f 4f       	sbci	r19, 0xFF	; 255
    1fac:	30 93 3b 01 	sts	0x013B, r19	; 0x80013b <__data_end+0x1>
    1fb0:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <__data_end>
    1fb4:	01 50       	subi	r16, 0x01	; 1
    1fb6:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <_ZL16currentCharacterv>
    1fba:	f0 cf       	rjmp	.-32     	; 0x1f9c <_ZL8nextNotev+0x1f4>
    1fbc:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <_ZL8duration>
    1fc0:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <_ZL8duration+0x1>
    1fc4:	81 53       	subi	r24, 0x31	; 49
    1fc6:	88 30       	cpi	r24, 0x08	; 8
    1fc8:	50 f4       	brcc	.+20     	; 0x1fde <_ZL8nextNotev+0x236>
    1fca:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <_ZL19whole_note_duration>
    1fce:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <_ZL19whole_note_duration+0x1>
    1fd2:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <_ZL9getNumberv>
    1fd6:	bc 01       	movw	r22, r24
    1fd8:	c7 01       	movw	r24, r14
    1fda:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <__udivmodhi4>
    1fde:	7b 01       	movw	r14, r22
    1fe0:	f6 94       	lsr	r15
    1fe2:	e7 94       	ror	r14
    1fe4:	69 83       	std	Y+1, r22	; 0x01
    1fe6:	7a 83       	std	Y+2, r23	; 0x02
    1fe8:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <_ZL16currentCharacterv>
    1fec:	69 81       	ldd	r22, Y+1	; 0x01
    1fee:	7a 81       	ldd	r23, Y+2	; 0x02
    1ff0:	8e 32       	cpi	r24, 0x2E	; 46
    1ff2:	69 f4       	brne	.+26     	; 0x200e <_ZL8nextNotev+0x266>
    1ff4:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <__data_end>
    1ff8:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <__data_end+0x1>
    1ffc:	2f 5f       	subi	r18, 0xFF	; 255
    1ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    2000:	30 93 3b 01 	sts	0x013B, r19	; 0x80013b <__data_end+0x1>
    2004:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <__data_end>
    2008:	6e 0d       	add	r22, r14
    200a:	7f 1d       	adc	r23, r15
    200c:	e9 cf       	rjmp	.-46     	; 0x1fe0 <_ZL8nextNotev+0x238>
    200e:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <_ZL8staccato>
    2012:	88 23       	and	r24, r24
    2014:	39 f0       	breq	.+14     	; 0x2024 <_ZL8nextNotev+0x27c>
    2016:	9b 01       	movw	r18, r22
    2018:	36 95       	lsr	r19
    201a:	27 95       	ror	r18
    201c:	20 93 3d 01 	sts	0x013D, r18	; 0x80013d <_ZL22staccato_rest_duration>
    2020:	62 1b       	sub	r22, r18
    2022:	71 09       	sbc	r23, r1
    2024:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
    2028:	11 23       	and	r17, r17
    202a:	11 f0       	breq	.+4      	; 0x2030 <_ZL8nextNotev+0x288>
    202c:	8f ef       	ldi	r24, 0xFF	; 255
    202e:	01 c0       	rjmp	.+2      	; 0x2032 <_ZL8nextNotev+0x28a>
    2030:	80 2f       	mov	r24, r16
    2032:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <_ZN15OrangutanBuzzer8playNoteEhjh>
    2036:	22 96       	adiw	r28, 0x02	; 2
    2038:	e0 e1       	ldi	r30, 0x10	; 16
    203a:	0c 94 95 16 	jmp	0x2d2a	; 0x2d2a <__epilogue_restores__+0x4>

0000203e <__vector_13>:
    203e:	1f 92       	push	r1
    2040:	0f 92       	push	r0
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	0f 92       	push	r0
    2046:	11 24       	eor	r1, r1
    2048:	2f 93       	push	r18
    204a:	3f 93       	push	r19
    204c:	4f 93       	push	r20
    204e:	5f 93       	push	r21
    2050:	6f 93       	push	r22
    2052:	7f 93       	push	r23
    2054:	8f 93       	push	r24
    2056:	9f 93       	push	r25
    2058:	af 93       	push	r26
    205a:	bf 93       	push	r27
    205c:	ef 93       	push	r30
    205e:	ff 93       	push	r31
    2060:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <_ZL13buzzerTimeout>
    2064:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <_ZL13buzzerTimeout+0x1>
    2068:	9c 01       	movw	r18, r24
    206a:	21 50       	subi	r18, 0x01	; 1
    206c:	31 09       	sbc	r19, r1
    206e:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <_ZL13buzzerTimeout+0x1>
    2072:	20 93 41 01 	sts	0x0141, r18	; 0x800141 <_ZL13buzzerTimeout>
    2076:	89 2b       	or	r24, r25
    2078:	11 f5       	brne	.+68     	; 0x20be <__vector_13+0x80>
    207a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    207e:	78 94       	sei
    2080:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    2084:	88 7f       	andi	r24, 0xF8	; 248
    2086:	81 60       	ori	r24, 0x01	; 1
    2088:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    208c:	80 e1       	ldi	r24, 0x10	; 16
    208e:	97 e2       	ldi	r25, 0x27	; 39
    2090:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    2094:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    2098:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    209c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <buzzerFinished>
    20a6:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
    20aa:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <__data_end+0x1>
    20ae:	89 2b       	or	r24, r25
    20b0:	31 f0       	breq	.+12     	; 0x20be <__vector_13+0x80>
    20b2:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_ZL17play_mode_setting>
    20b6:	81 11       	cpse	r24, r1
    20b8:	02 c0       	rjmp	.+4      	; 0x20be <__vector_13+0x80>
    20ba:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <_ZL8nextNotev>
    20be:	ff 91       	pop	r31
    20c0:	ef 91       	pop	r30
    20c2:	bf 91       	pop	r27
    20c4:	af 91       	pop	r26
    20c6:	9f 91       	pop	r25
    20c8:	8f 91       	pop	r24
    20ca:	7f 91       	pop	r23
    20cc:	6f 91       	pop	r22
    20ce:	5f 91       	pop	r21
    20d0:	4f 91       	pop	r20
    20d2:	3f 91       	pop	r19
    20d4:	2f 91       	pop	r18
    20d6:	0f 90       	pop	r0
    20d8:	0f be       	out	0x3f, r0	; 63
    20da:	0f 90       	pop	r0
    20dc:	1f 90       	pop	r1
    20de:	18 95       	reti

000020e0 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    20e0:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    20e4:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__data_end+0x1>
    20e8:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <_ZL17use_program_space>
    20f2:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <_ZL22staccato_rest_duration>
    20f6:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <_ZL8nextNotev>
    20fa:	08 95       	ret

000020fc <play_from_program_space>:
    20fc:	0e 94 70 10 	call	0x20e0	; 0x20e0 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    2100:	08 95       	ret

00002102 <delay_us.constprop.0>:
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	6f 93       	push	r22
    2108:	64 e0       	ldi	r22, 0x04	; 4
    210a:	6a 95       	dec	r22
    210c:	f1 f7       	brne	.-4      	; 0x210a <delay_us.constprop.0+0x8>
    210e:	6f 91       	pop	r22
    2110:	01 97       	sbiw	r24, 0x01	; 1
    2112:	c9 f7       	brne	.-14     	; 0x2106 <delay_us.constprop.0+0x4>
    2114:	08 95       	ret

00002116 <_ZN12OrangutanLCD8busyWaitEv>:
    2116:	0f 93       	push	r16
    2118:	1f 93       	push	r17
    211a:	cf 93       	push	r28
    211c:	df 93       	push	r29
    211e:	1a b1       	in	r17, 0x0a	; 10
    2120:	57 98       	cbi	0x0a, 7	; 10
    2122:	5a 98       	cbi	0x0b, 2	; 11
    2124:	28 9a       	sbi	0x05, 0	; 5
    2126:	c0 e0       	ldi	r28, 0x00	; 0
    2128:	d0 e0       	ldi	r29, 0x00	; 0
    212a:	0e 94 81 10 	call	0x2102	; 0x2102 <delay_us.constprop.0>
    212e:	5c 9a       	sbi	0x0b, 4	; 11
    2130:	0e 94 81 10 	call	0x2102	; 0x2102 <delay_us.constprop.0>
    2134:	09 b1       	in	r16, 0x09	; 9
    2136:	5c 98       	cbi	0x0b, 4	; 11
    2138:	0e 94 81 10 	call	0x2102	; 0x2102 <delay_us.constprop.0>
    213c:	5c 9a       	sbi	0x0b, 4	; 11
    213e:	0e 94 81 10 	call	0x2102	; 0x2102 <delay_us.constprop.0>
    2142:	5c 98       	cbi	0x0b, 4	; 11
    2144:	24 96       	adiw	r28, 0x04	; 4
    2146:	07 ff       	sbrs	r16, 7
    2148:	10 c0       	rjmp	.+32     	; 0x216a <_ZN12OrangutanLCD8busyWaitEv+0x54>
    214a:	ae 01       	movw	r20, r28
    214c:	60 e0       	ldi	r22, 0x00	; 0
    214e:	70 e0       	ldi	r23, 0x00	; 0
    2150:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <lcdTimeout>
    2154:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <lcdTimeout+0x1>
    2158:	a0 91 45 01 	lds	r26, 0x0145	; 0x800145 <lcdTimeout+0x2>
    215c:	b0 91 46 01 	lds	r27, 0x0146	; 0x800146 <lcdTimeout+0x3>
    2160:	48 17       	cp	r20, r24
    2162:	59 07       	cpc	r21, r25
    2164:	6a 07       	cpc	r22, r26
    2166:	7b 07       	cpc	r23, r27
    2168:	00 f3       	brcs	.-64     	; 0x212a <_ZN12OrangutanLCD8busyWaitEv+0x14>
    216a:	1a b9       	out	0x0a, r17	; 10
    216c:	df 91       	pop	r29
    216e:	cf 91       	pop	r28
    2170:	1f 91       	pop	r17
    2172:	0f 91       	pop	r16
    2174:	08 95       	ret

00002176 <_ZN12OrangutanLCD8sendDataEh>:
    2176:	95 b1       	in	r25, 0x05	; 5
    2178:	28 2f       	mov	r18, r24
    217a:	21 70       	andi	r18, 0x01	; 1
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	22 0f       	add	r18, r18
    2180:	33 1f       	adc	r19, r19
    2182:	48 2f       	mov	r20, r24
    2184:	46 70       	andi	r20, 0x06	; 6
    2186:	68 e0       	ldi	r22, 0x08	; 8
    2188:	46 9f       	mul	r20, r22
    218a:	a0 01       	movw	r20, r0
    218c:	11 24       	eor	r1, r1
    218e:	24 2b       	or	r18, r20
    2190:	9d 7c       	andi	r25, 0xCD	; 205
    2192:	29 2b       	or	r18, r25
    2194:	25 b9       	out	0x05, r18	; 5
    2196:	9b b1       	in	r25, 0x0b	; 11
    2198:	88 70       	andi	r24, 0x08	; 8
    219a:	82 95       	swap	r24
    219c:	80 7f       	andi	r24, 0xF0	; 240
    219e:	9f 77       	andi	r25, 0x7F	; 127
    21a0:	89 2b       	or	r24, r25
    21a2:	8b b9       	out	0x0b, r24	; 11
    21a4:	5c 9a       	sbi	0x0b, 4	; 11
    21a6:	0e 94 81 10 	call	0x2102	; 0x2102 <delay_us.constprop.0>
    21aa:	5c 98       	cbi	0x0b, 4	; 11
    21ac:	0e 94 81 10 	call	0x2102	; 0x2102 <delay_us.constprop.0>
    21b0:	08 95       	ret

000021b2 <_ZN12OrangutanLCD4sendEhhh>:
    21b2:	a0 e0       	ldi	r26, 0x00	; 0
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	ef ed       	ldi	r30, 0xDF	; 223
    21b8:	f0 e1       	ldi	r31, 0x10	; 16
    21ba:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__prologue_saves__+0x16>
    21be:	c8 2f       	mov	r28, r24
    21c0:	d6 2e       	mov	r13, r22
    21c2:	e4 2e       	mov	r14, r20
    21c4:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <_ZZN12OrangutanLCD4initEvE11initialized>
    21c8:	81 11       	cpse	r24, r1
    21ca:	05 c0       	rjmp	.+10     	; 0x21d6 <_ZN12OrangutanLCD4sendEhhh+0x24>
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <_ZZN12OrangutanLCD4initEvE11initialized>
    21d2:	0e 94 1a 11 	call	0x2234	; 0x2234 <_ZN12OrangutanLCD5init2Ev>
    21d6:	0e 94 8b 10 	call	0x2116	; 0x2116 <_ZN12OrangutanLCD8busyWaitEv>
    21da:	14 b1       	in	r17, 0x04	; 4
    21dc:	d5 b1       	in	r29, 0x05	; 5
    21de:	fa b0       	in	r15, 0x0a	; 10
    21e0:	0b b1       	in	r16, 0x0b	; 11
    21e2:	28 98       	cbi	0x05, 0	; 5
    21e4:	dd 20       	and	r13, r13
    21e6:	11 f0       	breq	.+4      	; 0x21ec <_ZN12OrangutanLCD4sendEhhh+0x3a>
    21e8:	5a 9a       	sbi	0x0b, 2	; 11
    21ea:	01 c0       	rjmp	.+2      	; 0x21ee <_ZN12OrangutanLCD4sendEhhh+0x3c>
    21ec:	5a 98       	cbi	0x0b, 2	; 11
    21ee:	94 b1       	in	r25, 0x04	; 4
    21f0:	92 63       	ori	r25, 0x32	; 50
    21f2:	94 b9       	out	0x04, r25	; 4
    21f4:	57 9a       	sbi	0x0a, 7	; 10
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	e8 16       	cp	r14, r24
    21fa:	29 f0       	breq	.+10     	; 0x2206 <_ZN12OrangutanLCD4sendEhhh+0x54>
    21fc:	8c 2f       	mov	r24, r28
    21fe:	82 95       	swap	r24
    2200:	8f 70       	andi	r24, 0x0F	; 15
    2202:	0e 94 bb 10 	call	0x2176	; 0x2176 <_ZN12OrangutanLCD8sendDataEh>
    2206:	8c 2f       	mov	r24, r28
    2208:	8f 70       	andi	r24, 0x0F	; 15
    220a:	0e 94 bb 10 	call	0x2176	; 0x2176 <_ZN12OrangutanLCD8sendDataEh>
    220e:	fa b8       	out	0x0a, r15	; 10
    2210:	0b b9       	out	0x0b, r16	; 11
    2212:	14 b9       	out	0x04, r17	; 4
    2214:	d5 b9       	out	0x05, r29	; 5
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
    221a:	e7 e0       	ldi	r30, 0x07	; 7
    221c:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__epilogue_restores__+0x16>

00002220 <_ZN12OrangutanLCD8send_cmdEh>:
    2220:	42 e0       	ldi	r20, 0x02	; 2
    2222:	60 e0       	ldi	r22, 0x00	; 0
    2224:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <_ZN12OrangutanLCD4sendEhhh>
    2228:	08 95       	ret

0000222a <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    222a:	41 e0       	ldi	r20, 0x01	; 1
    222c:	60 e0       	ldi	r22, 0x00	; 0
    222e:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <_ZN12OrangutanLCD4sendEhhh>
    2232:	08 95       	ret

00002234 <_ZN12OrangutanLCD5init2Ev>:
    2234:	80 e1       	ldi	r24, 0x10	; 16
    2236:	97 e2       	ldi	r25, 0x27	; 39
    2238:	a0 e0       	ldi	r26, 0x00	; 0
    223a:	b0 e0       	ldi	r27, 0x00	; 0
    223c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lcdTimeout>
    2240:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <lcdTimeout+0x1>
    2244:	a0 93 45 01 	sts	0x0145, r26	; 0x800145 <lcdTimeout+0x2>
    2248:	b0 93 46 01 	sts	0x0146, r27	; 0x800146 <lcdTimeout+0x3>
    224c:	52 9a       	sbi	0x0a, 2	; 10
    224e:	20 9a       	sbi	0x04, 0	; 4
    2250:	54 9a       	sbi	0x0a, 4	; 10
    2252:	8e e1       	ldi	r24, 0x1E	; 30
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	0e 94 83 12 	call	0x2506	; 0x2506 <delay_ms>
    225a:	83 e0       	ldi	r24, 0x03	; 3
    225c:	0e 94 15 11 	call	0x222a	; 0x222a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2260:	86 e0       	ldi	r24, 0x06	; 6
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	0e 94 83 12 	call	0x2506	; 0x2506 <delay_ms>
    2268:	83 e0       	ldi	r24, 0x03	; 3
    226a:	0e 94 15 11 	call	0x222a	; 0x222a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    226e:	82 e0       	ldi	r24, 0x02	; 2
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	0e 94 83 12 	call	0x2506	; 0x2506 <delay_ms>
    2276:	83 e0       	ldi	r24, 0x03	; 3
    2278:	0e 94 15 11 	call	0x222a	; 0x222a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    227c:	82 e0       	ldi	r24, 0x02	; 2
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	0e 94 83 12 	call	0x2506	; 0x2506 <delay_ms>
    2284:	82 e0       	ldi	r24, 0x02	; 2
    2286:	0e 94 15 11 	call	0x222a	; 0x222a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    228a:	82 e0       	ldi	r24, 0x02	; 2
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	0e 94 83 12 	call	0x2506	; 0x2506 <delay_ms>
    2292:	88 e2       	ldi	r24, 0x28	; 40
    2294:	0e 94 10 11 	call	0x2220	; 0x2220 <_ZN12OrangutanLCD8send_cmdEh>
    2298:	88 e0       	ldi	r24, 0x08	; 8
    229a:	0e 94 10 11 	call	0x2220	; 0x2220 <_ZN12OrangutanLCD8send_cmdEh>
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	0e 94 10 11 	call	0x2220	; 0x2220 <_ZN12OrangutanLCD8send_cmdEh>
    22a4:	86 e0       	ldi	r24, 0x06	; 6
    22a6:	0e 94 10 11 	call	0x2220	; 0x2220 <_ZN12OrangutanLCD8send_cmdEh>
    22aa:	8c e0       	ldi	r24, 0x0C	; 12
    22ac:	0e 94 10 11 	call	0x2220	; 0x2220 <_ZN12OrangutanLCD8send_cmdEh>
    22b0:	08 95       	ret

000022b2 <_ZN12OrangutanLCD5clearEv>:
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	0e 94 10 11 	call	0x2220	; 0x2220 <_ZN12OrangutanLCD8send_cmdEh>
    22b8:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <printf_chars>
    22bc:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <printf_chars+0x1>
    22c0:	89 2b       	or	r24, r25
    22c2:	f9 f0       	breq	.+62     	; 0x2302 <_ZN12OrangutanLCD5clearEv+0x50>
    22c4:	60 e0       	ldi	r22, 0x00	; 0
    22c6:	a0 e2       	ldi	r26, 0x20	; 32
    22c8:	26 2f       	mov	r18, r22
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <numLCDCols>
    22d0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <numLCDRows>
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	01 97       	sbiw	r24, 0x01	; 1
    22d8:	78 9f       	mul	r23, r24
    22da:	a0 01       	movw	r20, r0
    22dc:	79 9f       	mul	r23, r25
    22de:	50 0d       	add	r21, r0
    22e0:	11 24       	eor	r1, r1
    22e2:	24 17       	cp	r18, r20
    22e4:	35 07       	cpc	r19, r21
    22e6:	4c f4       	brge	.+18     	; 0x22fa <_ZN12OrangutanLCD5clearEv+0x48>
    22e8:	e0 91 49 01 	lds	r30, 0x0149	; 0x800149 <printf_chars>
    22ec:	f0 91 4a 01 	lds	r31, 0x014A	; 0x80014a <printf_chars+0x1>
    22f0:	e2 0f       	add	r30, r18
    22f2:	f3 1f       	adc	r31, r19
    22f4:	a0 83       	st	Z, r26
    22f6:	6f 5f       	subi	r22, 0xFF	; 255
    22f8:	e7 cf       	rjmp	.-50     	; 0x22c8 <_ZN12OrangutanLCD5clearEv+0x16>
    22fa:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <col>
    22fe:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <row>
    2302:	08 95       	ret

00002304 <clear>:
    2304:	0e 94 59 11 	call	0x22b2	; 0x22b2 <_ZN12OrangutanLCD5clearEv>
    2308:	08 95       	ret

0000230a <_ZN16OrangutanDigital9setOutputEhh>:
    230a:	88 30       	cpi	r24, 0x08	; 8
    230c:	58 f4       	brcc	.+22     	; 0x2324 <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    230e:	91 e0       	ldi	r25, 0x01	; 1
    2310:	01 c0       	rjmp	.+2      	; 0x2314 <_ZN16OrangutanDigital9setOutputEhh+0xa>
    2312:	99 0f       	add	r25, r25
    2314:	8a 95       	dec	r24
    2316:	ea f7       	brpl	.-6      	; 0x2312 <_ZN16OrangutanDigital9setOutputEhh+0x8>
    2318:	89 2f       	mov	r24, r25
    231a:	aa e2       	ldi	r26, 0x2A	; 42
    231c:	b0 e0       	ldi	r27, 0x00	; 0
    231e:	eb e2       	ldi	r30, 0x2B	; 43
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	21 c0       	rjmp	.+66     	; 0x2366 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    2324:	8e 30       	cpi	r24, 0x0E	; 14
    2326:	60 f4       	brcc	.+24     	; 0x2340 <_ZN16OrangutanDigital9setOutputEhh+0x36>
    2328:	98 ef       	ldi	r25, 0xF8	; 248
    232a:	98 0f       	add	r25, r24
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	01 c0       	rjmp	.+2      	; 0x2332 <_ZN16OrangutanDigital9setOutputEhh+0x28>
    2330:	88 0f       	add	r24, r24
    2332:	9a 95       	dec	r25
    2334:	ea f7       	brpl	.-6      	; 0x2330 <_ZN16OrangutanDigital9setOutputEhh+0x26>
    2336:	a4 e2       	ldi	r26, 0x24	; 36
    2338:	b0 e0       	ldi	r27, 0x00	; 0
    233a:	e5 e2       	ldi	r30, 0x25	; 37
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	13 c0       	rjmp	.+38     	; 0x2366 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    2340:	85 31       	cpi	r24, 0x15	; 21
    2342:	60 f4       	brcc	.+24     	; 0x235c <_ZN16OrangutanDigital9setOutputEhh+0x52>
    2344:	92 ef       	ldi	r25, 0xF2	; 242
    2346:	98 0f       	add	r25, r24
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	01 c0       	rjmp	.+2      	; 0x234e <_ZN16OrangutanDigital9setOutputEhh+0x44>
    234c:	88 0f       	add	r24, r24
    234e:	9a 95       	dec	r25
    2350:	ea f7       	brpl	.-6      	; 0x234c <_ZN16OrangutanDigital9setOutputEhh+0x42>
    2352:	a7 e2       	ldi	r26, 0x27	; 39
    2354:	b0 e0       	ldi	r27, 0x00	; 0
    2356:	e8 e2       	ldi	r30, 0x28	; 40
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	05 c0       	rjmp	.+10     	; 0x2366 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	a0 e0       	ldi	r26, 0x00	; 0
    2360:	b0 e0       	ldi	r27, 0x00	; 0
    2362:	e0 e0       	ldi	r30, 0x00	; 0
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	6f 3f       	cpi	r22, 0xFF	; 255
    2368:	19 f4       	brne	.+6      	; 0x2370 <_ZN16OrangutanDigital9setOutputEhh+0x66>
    236a:	90 81       	ld	r25, Z
    236c:	98 27       	eor	r25, r24
    236e:	09 c0       	rjmp	.+18     	; 0x2382 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    2370:	66 23       	and	r22, r22
    2372:	19 f0       	breq	.+6      	; 0x237a <_ZN16OrangutanDigital9setOutputEhh+0x70>
    2374:	90 81       	ld	r25, Z
    2376:	98 2b       	or	r25, r24
    2378:	04 c0       	rjmp	.+8      	; 0x2382 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    237a:	20 81       	ld	r18, Z
    237c:	98 2f       	mov	r25, r24
    237e:	90 95       	com	r25
    2380:	92 23       	and	r25, r18
    2382:	90 83       	st	Z, r25
    2384:	9c 91       	ld	r25, X
    2386:	98 2b       	or	r25, r24
    2388:	9c 93       	st	X, r25
    238a:	08 95       	ret

0000238c <_ZN15OrangutanMotors5init2Ev>:
    238c:	83 ef       	ldi	r24, 0xF3	; 243
    238e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2392:	84 bd       	out	0x24, r24	; 36
    2394:	82 e0       	ldi	r24, 0x02	; 2
    2396:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    239a:	85 bd       	out	0x25, r24	; 37
    239c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    23a0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    23a4:	18 bc       	out	0x28, r1	; 40
    23a6:	17 bc       	out	0x27, r1	; 39
    23a8:	60 e0       	ldi	r22, 0x00	; 0
    23aa:	86 e0       	ldi	r24, 0x06	; 6
    23ac:	0e 94 85 11 	call	0x230a	; 0x230a <_ZN16OrangutanDigital9setOutputEhh>
    23b0:	60 e0       	ldi	r22, 0x00	; 0
    23b2:	85 e0       	ldi	r24, 0x05	; 5
    23b4:	0e 94 85 11 	call	0x230a	; 0x230a <_ZN16OrangutanDigital9setOutputEhh>
    23b8:	60 e0       	ldi	r22, 0x00	; 0
    23ba:	8b e0       	ldi	r24, 0x0B	; 11
    23bc:	0e 94 85 11 	call	0x230a	; 0x230a <_ZN16OrangutanDigital9setOutputEhh>
    23c0:	60 e0       	ldi	r22, 0x00	; 0
    23c2:	83 e0       	ldi	r24, 0x03	; 3
    23c4:	0e 94 85 11 	call	0x230a	; 0x230a <_ZN16OrangutanDigital9setOutputEhh>
    23c8:	08 95       	ret

000023ca <_ZN15OrangutanMotors4initEv>:
    23ca:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <_ZZN15OrangutanMotors4initEvE11initialized>
    23ce:	81 11       	cpse	r24, r1
    23d0:	05 c0       	rjmp	.+10     	; 0x23dc <_ZN15OrangutanMotors4initEv+0x12>
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <_ZZN15OrangutanMotors4initEvE11initialized>
    23d8:	0e 94 c6 11 	call	0x238c	; 0x238c <_ZN15OrangutanMotors5init2Ev>
    23dc:	08 95       	ret

000023de <_ZN15OrangutanMotors10setM1SpeedEi>:
    23de:	cf 93       	push	r28
    23e0:	df 93       	push	r29
    23e2:	ec 01       	movw	r28, r24
    23e4:	0e 94 e5 11 	call	0x23ca	; 0x23ca <_ZN15OrangutanMotors4initEv>
    23e8:	d7 ff       	sbrs	r29, 7
    23ea:	05 c0       	rjmp	.+10     	; 0x23f6 <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    23ec:	d1 95       	neg	r29
    23ee:	c1 95       	neg	r28
    23f0:	d1 09       	sbc	r29, r1
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	01 c0       	rjmp	.+2      	; 0x23f8 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    23f6:	80 e0       	ldi	r24, 0x00	; 0
    23f8:	cf 3f       	cpi	r28, 0xFF	; 255
    23fa:	d1 05       	cpc	r29, r1
    23fc:	19 f0       	breq	.+6      	; 0x2404 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    23fe:	14 f0       	brlt	.+4      	; 0x2404 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    2400:	cf ef       	ldi	r28, 0xFF	; 255
    2402:	d0 e0       	ldi	r29, 0x00	; 0
    2404:	88 23       	and	r24, r24
    2406:	19 f0       	breq	.+6      	; 0x240e <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    2408:	18 bc       	out	0x28, r1	; 40
    240a:	c7 bd       	out	0x27, r28	; 39
    240c:	02 c0       	rjmp	.+4      	; 0x2412 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    240e:	c8 bd       	out	0x28, r28	; 40
    2410:	17 bc       	out	0x27, r1	; 39
    2412:	df 91       	pop	r29
    2414:	cf 91       	pop	r28
    2416:	08 95       	ret

00002418 <_ZN15OrangutanMotors10setM2SpeedEi>:
    2418:	cf 93       	push	r28
    241a:	df 93       	push	r29
    241c:	ec 01       	movw	r28, r24
    241e:	0e 94 e5 11 	call	0x23ca	; 0x23ca <_ZN15OrangutanMotors4initEv>
    2422:	d7 ff       	sbrs	r29, 7
    2424:	05 c0       	rjmp	.+10     	; 0x2430 <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    2426:	d1 95       	neg	r29
    2428:	c1 95       	neg	r28
    242a:	d1 09       	sbc	r29, r1
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	01 c0       	rjmp	.+2      	; 0x2432 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	cf 3f       	cpi	r28, 0xFF	; 255
    2434:	d1 05       	cpc	r29, r1
    2436:	19 f0       	breq	.+6      	; 0x243e <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    2438:	14 f0       	brlt	.+4      	; 0x243e <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    243a:	cf ef       	ldi	r28, 0xFF	; 255
    243c:	d0 e0       	ldi	r29, 0x00	; 0
    243e:	88 23       	and	r24, r24
    2440:	29 f0       	breq	.+10     	; 0x244c <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    2442:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    2446:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    244a:	04 c0       	rjmp	.+8      	; 0x2454 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    244c:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    2450:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    2454:	df 91       	pop	r29
    2456:	cf 91       	pop	r28
    2458:	08 95       	ret

0000245a <_ZN15OrangutanMotors9setSpeedsEii>:
    245a:	cf 93       	push	r28
    245c:	df 93       	push	r29
    245e:	eb 01       	movw	r28, r22
    2460:	0e 94 ef 11 	call	0x23de	; 0x23de <_ZN15OrangutanMotors10setM1SpeedEi>
    2464:	ce 01       	movw	r24, r28
    2466:	0e 94 0c 12 	call	0x2418	; 0x2418 <_ZN15OrangutanMotors10setM2SpeedEi>
    246a:	df 91       	pop	r29
    246c:	cf 91       	pop	r28
    246e:	08 95       	ret

00002470 <set_motors>:
    2470:	0e 94 2d 12 	call	0x245a	; 0x245a <_ZN15OrangutanMotors9setSpeedsEii>
    2474:	08 95       	ret

00002476 <__vector_9>:
    2476:	2f 92       	push	r2
    2478:	8f 93       	push	r24
    247a:	9f 93       	push	r25
    247c:	2f b6       	in	r2, 0x3f	; 63
    247e:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <tickCount+0x1>
    2482:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <tickCount+0x2>
    2486:	01 96       	adiw	r24, 0x01	; 1
    2488:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <tickCount+0x1>
    248c:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <tickCount+0x2>
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <tickCount+0x3>
    2496:	89 1f       	adc	r24, r25
    2498:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <tickCount+0x3>
    249c:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <us_over_10+0x1>
    24a0:	9c 5f       	subi	r25, 0xFC	; 252
    24a2:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <us_over_10+0x1>
    24a6:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <us_over_10>
    24aa:	80 51       	subi	r24, 0x10	; 16
    24ac:	97 42       	sbci	r25, 0x27	; 39
    24ae:	c0 f0       	brcs	.+48     	; 0x24e0 <end>
    24b0:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <us_over_10+0x1>
    24b4:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <us_over_10>
    24b8:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <msCounter>
    24bc:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <msCounter+0x1>
    24c0:	01 96       	adiw	r24, 0x01	; 1
    24c2:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <msCounter>
    24c6:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <msCounter+0x1>
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <msCounter+0x2>
    24d0:	89 1f       	adc	r24, r25
    24d2:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <msCounter+0x2>
    24d6:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <msCounter+0x3>
    24da:	89 1f       	adc	r24, r25
    24dc:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <msCounter+0x3>

000024e0 <end>:
    24e0:	2f be       	out	0x3f, r2	; 63
    24e2:	9f 91       	pop	r25
    24e4:	8f 91       	pop	r24
    24e6:	2f 90       	pop	r2
    24e8:	18 95       	reti

000024ea <_ZN13OrangutanTime17delayMillisecondsEj>:
    24ea:	28 ee       	ldi	r18, 0xE8	; 232
    24ec:	33 e0       	ldi	r19, 0x03	; 3
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	48 f0       	brcs	.+18     	; 0x2504 <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    24f2:	f9 01       	movw	r30, r18
    24f4:	6f 93       	push	r22
    24f6:	64 e0       	ldi	r22, 0x04	; 4
    24f8:	6a 95       	dec	r22
    24fa:	f1 f7       	brne	.-4      	; 0x24f8 <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    24fc:	6f 91       	pop	r22
    24fe:	31 97       	sbiw	r30, 0x01	; 1
    2500:	c9 f7       	brne	.-14     	; 0x24f4 <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    2502:	f5 cf       	rjmp	.-22     	; 0x24ee <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    2504:	08 95       	ret

00002506 <delay_ms>:
    2506:	0e 94 75 12 	call	0x24ea	; 0x24ea <_ZN13OrangutanTime17delayMillisecondsEj>
    250a:	08 95       	ret

0000250c <_ZN13OrangutanTime5init2Ev>:
    250c:	e0 e7       	ldi	r30, 0x70	; 112
    250e:	f0 e0       	ldi	r31, 0x00	; 0
    2510:	80 81       	ld	r24, Z
    2512:	8e 7f       	andi	r24, 0xFE	; 254
    2514:	80 83       	st	Z, r24
    2516:	a0 eb       	ldi	r26, 0xB0	; 176
    2518:	b0 e0       	ldi	r27, 0x00	; 0
    251a:	8c 91       	ld	r24, X
    251c:	83 60       	ori	r24, 0x03	; 3
    251e:	8c 93       	st	X, r24
    2520:	a1 eb       	ldi	r26, 0xB1	; 177
    2522:	b0 e0       	ldi	r27, 0x00	; 0
    2524:	8c 91       	ld	r24, X
    2526:	80 7f       	andi	r24, 0xF0	; 240
    2528:	8c 93       	st	X, r24
    252a:	8c 91       	ld	r24, X
    252c:	82 60       	ori	r24, 0x02	; 2
    252e:	8c 93       	st	X, r24
    2530:	b8 9a       	sbi	0x17, 0	; 23
    2532:	80 81       	ld	r24, Z
    2534:	81 60       	ori	r24, 0x01	; 1
    2536:	80 83       	st	Z, r24
    2538:	78 94       	sei
    253a:	08 95       	ret

0000253c <_ZN13OrangutanTime4initEv>:
    253c:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <_ZZN13OrangutanTime4initEvE11initialized>
    2540:	81 11       	cpse	r24, r1
    2542:	05 c0       	rjmp	.+10     	; 0x254e <_ZN13OrangutanTime4initEv+0x12>
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <_ZZN13OrangutanTime4initEvE11initialized>
    254a:	0e 94 86 12 	call	0x250c	; 0x250c <_ZN13OrangutanTime5init2Ev>
    254e:	08 95       	ret

00002550 <_ZN13OrangutanTime2msEv>:
    2550:	0e 94 9e 12 	call	0x253c	; 0x253c <_ZN13OrangutanTime4initEv>
    2554:	e0 e7       	ldi	r30, 0x70	; 112
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	80 81       	ld	r24, Z
    255a:	8e 7f       	andi	r24, 0xFE	; 254
    255c:	80 83       	st	Z, r24
    255e:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <msCounter>
    2562:	70 91 4e 01 	lds	r23, 0x014E	; 0x80014e <msCounter+0x1>
    2566:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <msCounter+0x2>
    256a:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <msCounter+0x3>
    256e:	20 81       	ld	r18, Z
    2570:	21 60       	ori	r18, 0x01	; 1
    2572:	20 83       	st	Z, r18
    2574:	08 95       	ret

00002576 <get_ms>:
    2576:	0e 94 a8 12 	call	0x2550	; 0x2550 <_ZN13OrangutanTime2msEv>
    257a:	08 95       	ret

0000257c <read_line>:
    257c:	46 2f       	mov	r20, r22
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	bc 01       	movw	r22, r24
    2582:	85 e5       	ldi	r24, 0x55	; 85
    2584:	91 e0       	ldi	r25, 0x01	; 1
    2586:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <_ZN16PololuQTRSensors8readLineEPjhh>
    258a:	08 95       	ret

0000258c <_GLOBAL__sub_D_pololu_3pi_init>:
    258c:	85 e5       	ldi	r24, 0x55	; 85
    258e:	91 e0       	ldi	r25, 0x01	; 1
    2590:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <_ZN16PololuQTRSensorsD1Ev>
    2594:	08 95       	ret

00002596 <delay_us>:
    2596:	6f 93       	push	r22
    2598:	64 e0       	ldi	r22, 0x04	; 4
    259a:	6a 95       	dec	r22
    259c:	f1 f7       	brne	.-4      	; 0x259a <delay_us+0x4>
    259e:	6f 91       	pop	r22
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	c9 f7       	brne	.-14     	; 0x2596 <delay_us>
    25a4:	08 95       	ret

000025a6 <_ZN16PololuQTRSensors11emittersOffEv>:
    25a6:	fc 01       	movw	r30, r24
    25a8:	a4 85       	ldd	r26, Z+12	; 0x0c
    25aa:	b5 85       	ldd	r27, Z+13	; 0x0d
    25ac:	10 97       	sbiw	r26, 0x00	; 0
    25ae:	79 f0       	breq	.+30     	; 0x25ce <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    25b0:	8c 91       	ld	r24, X
    25b2:	91 85       	ldd	r25, Z+9	; 0x09
    25b4:	89 2b       	or	r24, r25
    25b6:	8c 93       	st	X, r24
    25b8:	a2 85       	ldd	r26, Z+10	; 0x0a
    25ba:	b3 85       	ldd	r27, Z+11	; 0x0b
    25bc:	9c 91       	ld	r25, X
    25be:	81 85       	ldd	r24, Z+9	; 0x09
    25c0:	80 95       	com	r24
    25c2:	89 23       	and	r24, r25
    25c4:	8c 93       	st	X, r24
    25c6:	88 ec       	ldi	r24, 0xC8	; 200
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	0e 94 cb 12 	call	0x2596	; 0x2596 <delay_us>
    25ce:	08 95       	ret

000025d0 <_ZN16PololuQTRSensors10emittersOnEv>:
    25d0:	fc 01       	movw	r30, r24
    25d2:	a4 85       	ldd	r26, Z+12	; 0x0c
    25d4:	b5 85       	ldd	r27, Z+13	; 0x0d
    25d6:	10 97       	sbiw	r26, 0x00	; 0
    25d8:	71 f0       	breq	.+28     	; 0x25f6 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    25da:	8c 91       	ld	r24, X
    25dc:	91 85       	ldd	r25, Z+9	; 0x09
    25de:	89 2b       	or	r24, r25
    25e0:	8c 93       	st	X, r24
    25e2:	a2 85       	ldd	r26, Z+10	; 0x0a
    25e4:	b3 85       	ldd	r27, Z+11	; 0x0b
    25e6:	8c 91       	ld	r24, X
    25e8:	91 85       	ldd	r25, Z+9	; 0x09
    25ea:	89 2b       	or	r24, r25
    25ec:	8c 93       	st	X, r24
    25ee:	88 ec       	ldi	r24, 0xC8	; 200
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	0e 94 cb 12 	call	0x2596	; 0x2596 <delay_us>
    25f6:	08 95       	ret

000025f8 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    25f8:	a0 e0       	ldi	r26, 0x00	; 0
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	e2 e0       	ldi	r30, 0x02	; 2
    25fe:	f3 e1       	ldi	r31, 0x13	; 19
    2600:	0c 94 7c 16 	jmp	0x2cf8	; 0x2cf8 <__prologue_saves__+0xa>
    2604:	ec 01       	movw	r28, r24
    2606:	5b 01       	movw	r10, r22
    2608:	6c 01       	movw	r12, r24
    260a:	81 e4       	ldi	r24, 0x41	; 65
    260c:	c8 0e       	add	r12, r24
    260e:	d1 1c       	adc	r13, r1
    2610:	f6 01       	movw	r30, r12
    2612:	80 80       	ld	r8, Z
    2614:	7e 01       	movw	r14, r28
    2616:	f2 e4       	ldi	r31, 0x42	; 66
    2618:	ef 0e       	add	r14, r31
    261a:	f1 1c       	adc	r15, r1
    261c:	f7 01       	movw	r30, r14
    261e:	70 80       	ld	r7, Z
    2620:	8e 01       	movw	r16, r28
    2622:	0d 5b       	subi	r16, 0xBD	; 189
    2624:	1f 4f       	sbci	r17, 0xFF	; 255
    2626:	f8 01       	movw	r30, r16
    2628:	90 80       	ld	r9, Z
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	98 85       	ldd	r25, Y+8	; 0x08
    262e:	89 17       	cp	r24, r25
    2630:	48 f4       	brcc	.+18     	; 0x2644 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    2632:	f5 01       	movw	r30, r10
    2634:	e8 0f       	add	r30, r24
    2636:	f1 1d       	adc	r31, r1
    2638:	e8 0f       	add	r30, r24
    263a:	f1 1d       	adc	r31, r1
    263c:	11 82       	std	Z+1, r1	; 0x01
    263e:	10 82       	st	Z, r1
    2640:	8f 5f       	subi	r24, 0xFF	; 255
    2642:	f4 cf       	rjmp	.-24     	; 0x262c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    2644:	84 b1       	in	r24, 0x04	; 4
    2646:	f6 01       	movw	r30, r12
    2648:	90 81       	ld	r25, Z
    264a:	89 2b       	or	r24, r25
    264c:	84 b9       	out	0x04, r24	; 4
    264e:	87 b1       	in	r24, 0x07	; 7
    2650:	f7 01       	movw	r30, r14
    2652:	90 81       	ld	r25, Z
    2654:	89 2b       	or	r24, r25
    2656:	87 b9       	out	0x07, r24	; 7
    2658:	8a b1       	in	r24, 0x0a	; 10
    265a:	f8 01       	movw	r30, r16
    265c:	90 81       	ld	r25, Z
    265e:	89 2b       	or	r24, r25
    2660:	8a b9       	out	0x0a, r24	; 10
    2662:	85 b1       	in	r24, 0x05	; 5
    2664:	f6 01       	movw	r30, r12
    2666:	90 81       	ld	r25, Z
    2668:	89 2b       	or	r24, r25
    266a:	85 b9       	out	0x05, r24	; 5
    266c:	88 b1       	in	r24, 0x08	; 8
    266e:	f7 01       	movw	r30, r14
    2670:	90 81       	ld	r25, Z
    2672:	89 2b       	or	r24, r25
    2674:	88 b9       	out	0x08, r24	; 8
    2676:	8b b1       	in	r24, 0x0b	; 11
    2678:	f8 01       	movw	r30, r16
    267a:	90 81       	ld	r25, Z
    267c:	89 2b       	or	r24, r25
    267e:	8b b9       	out	0x0b, r24	; 11
    2680:	8a e0       	ldi	r24, 0x0A	; 10
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	0e 94 cb 12 	call	0x2596	; 0x2596 <delay_us>
    2688:	94 b1       	in	r25, 0x04	; 4
    268a:	f6 01       	movw	r30, r12
    268c:	80 81       	ld	r24, Z
    268e:	80 95       	com	r24
    2690:	89 23       	and	r24, r25
    2692:	84 b9       	out	0x04, r24	; 4
    2694:	97 b1       	in	r25, 0x07	; 7
    2696:	f7 01       	movw	r30, r14
    2698:	80 81       	ld	r24, Z
    269a:	80 95       	com	r24
    269c:	89 23       	and	r24, r25
    269e:	87 b9       	out	0x07, r24	; 7
    26a0:	9a b1       	in	r25, 0x0a	; 10
    26a2:	f8 01       	movw	r30, r16
    26a4:	80 81       	ld	r24, Z
    26a6:	80 95       	com	r24
    26a8:	89 23       	and	r24, r25
    26aa:	8a b9       	out	0x0a, r24	; 10
    26ac:	95 b1       	in	r25, 0x05	; 5
    26ae:	f6 01       	movw	r30, r12
    26b0:	80 81       	ld	r24, Z
    26b2:	80 95       	com	r24
    26b4:	89 23       	and	r24, r25
    26b6:	85 b9       	out	0x05, r24	; 5
    26b8:	98 b1       	in	r25, 0x08	; 8
    26ba:	f7 01       	movw	r30, r14
    26bc:	80 81       	ld	r24, Z
    26be:	80 95       	com	r24
    26c0:	89 23       	and	r24, r25
    26c2:	88 b9       	out	0x08, r24	; 8
    26c4:	9b b1       	in	r25, 0x0b	; 11
    26c6:	f8 01       	movw	r30, r16
    26c8:	80 81       	ld	r24, Z
    26ca:	80 95       	com	r24
    26cc:	89 23       	and	r24, r25
    26ce:	8b b9       	out	0x0b, r24	; 11
    26d0:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    26d4:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    26d8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    26dc:	83 60       	ori	r24, 0x03	; 3
    26de:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    26e2:	82 e0       	ldi	r24, 0x02	; 2
    26e4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    26e8:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	2e 85       	ldd	r18, Y+14	; 0x0e
    26f2:	3f 85       	ldd	r19, Y+15	; 0x0f
    26f4:	82 17       	cp	r24, r18
    26f6:	93 07       	cpc	r25, r19
    26f8:	20 f5       	brcc	.+72     	; 0x2742 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    26fa:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    26fe:	2c 2d       	mov	r18, r12
    2700:	24 1b       	sub	r18, r20
    2702:	82 0f       	add	r24, r18
    2704:	91 1d       	adc	r25, r1
    2706:	03 b1       	in	r16, 0x03	; 3
    2708:	08 11       	cpse	r16, r8
    270a:	32 c0       	rjmp	.+100    	; 0x2770 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    270c:	f6 b0       	in	r15, 0x06	; 6
    270e:	f7 10       	cpse	r15, r7
    2710:	2f c0       	rjmp	.+94     	; 0x2770 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2712:	29 b1       	in	r18, 0x09	; 9
    2714:	29 11       	cpse	r18, r9
    2716:	2c c0       	rjmp	.+88     	; 0x2770 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2718:	10 c0       	rjmp	.+32     	; 0x273a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    271a:	21 2f       	mov	r18, r17
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	a9 01       	movw	r20, r18
    2720:	44 0f       	add	r20, r20
    2722:	55 1f       	adc	r21, r21
    2724:	f5 01       	movw	r30, r10
    2726:	e4 0f       	add	r30, r20
    2728:	f5 1f       	adc	r31, r21
    272a:	60 81       	ld	r22, Z
    272c:	71 81       	ldd	r23, Z+1	; 0x01
    272e:	67 2b       	or	r22, r23
    2730:	21 f1       	breq	.+72     	; 0x277a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    2732:	1f 5f       	subi	r17, 0xFF	; 255
    2734:	28 85       	ldd	r18, Y+8	; 0x08
    2736:	12 17       	cp	r17, r18
    2738:	80 f3       	brcs	.-32     	; 0x271a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    273a:	7f 2c       	mov	r7, r15
    273c:	80 2e       	mov	r8, r16
    273e:	4c 2d       	mov	r20, r12
    2740:	d7 cf       	rjmp	.-82     	; 0x26f0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    2742:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2746:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	88 85       	ldd	r24, Y+8	; 0x08
    274e:	28 17       	cp	r18, r24
    2750:	30 f5       	brcc	.+76     	; 0x279e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    2752:	f5 01       	movw	r30, r10
    2754:	e2 0f       	add	r30, r18
    2756:	f1 1d       	adc	r31, r1
    2758:	e2 0f       	add	r30, r18
    275a:	f1 1d       	adc	r31, r1
    275c:	80 81       	ld	r24, Z
    275e:	91 81       	ldd	r25, Z+1	; 0x01
    2760:	89 2b       	or	r24, r25
    2762:	21 f4       	brne	.+8      	; 0x276c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    2764:	8e 85       	ldd	r24, Y+14	; 0x0e
    2766:	9f 85       	ldd	r25, Y+15	; 0x0f
    2768:	91 83       	std	Z+1, r25	; 0x01
    276a:	80 83       	st	Z, r24
    276c:	2f 5f       	subi	r18, 0xFF	; 255
    276e:	ee cf       	rjmp	.-36     	; 0x274c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    2770:	03 b1       	in	r16, 0x03	; 3
    2772:	f6 b0       	in	r15, 0x06	; 6
    2774:	99 b0       	in	r9, 0x09	; 9
    2776:	10 e0       	ldi	r17, 0x00	; 0
    2778:	dd cf       	rjmp	.-70     	; 0x2734 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    277a:	de 01       	movw	r26, r28
    277c:	a4 0f       	add	r26, r20
    277e:	b5 1f       	adc	r27, r21
    2780:	91 96       	adiw	r26, 0x21	; 33
    2782:	0d 90       	ld	r0, X+
    2784:	bc 91       	ld	r27, X
    2786:	a0 2d       	mov	r26, r0
    2788:	4c 91       	ld	r20, X
    278a:	de 01       	movw	r26, r28
    278c:	a2 0f       	add	r26, r18
    278e:	b3 1f       	adc	r27, r19
    2790:	51 96       	adiw	r26, 0x11	; 17
    2792:	2c 91       	ld	r18, X
    2794:	42 23       	and	r20, r18
    2796:	69 f6       	brne	.-102    	; 0x2732 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    2798:	91 83       	std	Z+1, r25	; 0x01
    279a:	80 83       	st	Z, r24
    279c:	ca cf       	rjmp	.-108    	; 0x2732 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    279e:	cd b7       	in	r28, 0x3d	; 61
    27a0:	de b7       	in	r29, 0x3e	; 62
    27a2:	ed e0       	ldi	r30, 0x0D	; 13
    27a4:	0c 94 98 16 	jmp	0x2d30	; 0x2d30 <__epilogue_restores__+0xa>

000027a8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    27a8:	ef 92       	push	r14
    27aa:	ff 92       	push	r15
    27ac:	0f 93       	push	r16
    27ae:	1f 93       	push	r17
    27b0:	cf 93       	push	r28
    27b2:	df 93       	push	r29
    27b4:	fc 01       	movw	r30, r24
    27b6:	9b 01       	movw	r18, r22
    27b8:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    27bc:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    27c0:	47 b1       	in	r20, 0x07	; 7
    27c2:	18 b1       	in	r17, 0x08	; 8
    27c4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    27c8:	86 fd       	sbrc	r24, 6
    27ca:	fc cf       	rjmp	.-8      	; 0x27c4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    27cc:	80 e0       	ldi	r24, 0x00	; 0
    27ce:	90 85       	ldd	r25, Z+8	; 0x08
    27d0:	89 17       	cp	r24, r25
    27d2:	48 f4       	brcc	.+18     	; 0x27e6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    27d4:	d9 01       	movw	r26, r18
    27d6:	a8 0f       	add	r26, r24
    27d8:	b1 1d       	adc	r27, r1
    27da:	a8 0f       	add	r26, r24
    27dc:	b1 1d       	adc	r27, r1
    27de:	1d 92       	st	X+, r1
    27e0:	1c 92       	st	X, r1
    27e2:	8f 5f       	subi	r24, 0xFF	; 255
    27e4:	f4 cf       	rjmp	.-24     	; 0x27ce <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    27e6:	97 b1       	in	r25, 0x07	; 7
    27e8:	82 a1       	ldd	r24, Z+34	; 0x22
    27ea:	80 95       	com	r24
    27ec:	89 23       	and	r24, r25
    27ee:	87 b9       	out	0x07, r24	; 7
    27f0:	98 b1       	in	r25, 0x08	; 8
    27f2:	82 a1       	ldd	r24, Z+34	; 0x22
    27f4:	80 95       	com	r24
    27f6:	89 23       	and	r24, r25
    27f8:	88 b9       	out	0x08, r24	; 8
    27fa:	87 e8       	ldi	r24, 0x87	; 135
    27fc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2800:	e1 2c       	mov	r14, r1
    2802:	81 a1       	ldd	r24, Z+33	; 0x21
    2804:	e8 16       	cp	r14, r24
    2806:	10 f0       	brcs	.+4      	; 0x280c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    2808:	e1 2c       	mov	r14, r1
    280a:	29 c0       	rjmp	.+82     	; 0x285e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    280c:	50 e0       	ldi	r21, 0x00	; 0
    280e:	80 85       	ldd	r24, Z+8	; 0x08
    2810:	58 17       	cp	r21, r24
    2812:	18 f5       	brcc	.+70     	; 0x285a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    2814:	a5 2f       	mov	r26, r21
    2816:	b0 e0       	ldi	r27, 0x00	; 0
    2818:	ef 01       	movw	r28, r30
    281a:	ca 0f       	add	r28, r26
    281c:	db 1f       	adc	r29, r27
    281e:	89 89       	ldd	r24, Y+17	; 0x11
    2820:	80 64       	ori	r24, 0x40	; 64
    2822:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2826:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    282a:	80 64       	ori	r24, 0x40	; 64
    282c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2830:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2834:	86 fd       	sbrc	r24, 6
    2836:	fc cf       	rjmp	.-8      	; 0x2830 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    2838:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    283c:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    2840:	aa 0f       	add	r26, r26
    2842:	bb 1f       	adc	r27, r27
    2844:	a2 0f       	add	r26, r18
    2846:	b3 1f       	adc	r27, r19
    2848:	8d 91       	ld	r24, X+
    284a:	9c 91       	ld	r25, X
    284c:	11 97       	sbiw	r26, 0x01	; 1
    284e:	86 0f       	add	r24, r22
    2850:	97 1f       	adc	r25, r23
    2852:	8d 93       	st	X+, r24
    2854:	9c 93       	st	X, r25
    2856:	5f 5f       	subi	r21, 0xFF	; 255
    2858:	da cf       	rjmp	.-76     	; 0x280e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    285a:	e3 94       	inc	r14
    285c:	d2 cf       	rjmp	.-92     	; 0x2802 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    285e:	80 85       	ldd	r24, Z+8	; 0x08
    2860:	e8 16       	cp	r14, r24
    2862:	a0 f4       	brcc	.+40     	; 0x288c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    2864:	e9 01       	movw	r28, r18
    2866:	ce 0d       	add	r28, r14
    2868:	d1 1d       	adc	r29, r1
    286a:	ce 0d       	add	r28, r14
    286c:	d1 1d       	adc	r29, r1
    286e:	61 a1       	ldd	r22, Z+33	; 0x21
    2870:	70 e0       	ldi	r23, 0x00	; 0
    2872:	cb 01       	movw	r24, r22
    2874:	95 95       	asr	r25
    2876:	87 95       	ror	r24
    2878:	a8 81       	ld	r26, Y
    287a:	b9 81       	ldd	r27, Y+1	; 0x01
    287c:	8a 0f       	add	r24, r26
    287e:	9b 1f       	adc	r25, r27
    2880:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <__udivmodhi4>
    2884:	79 83       	std	Y+1, r23	; 0x01
    2886:	68 83       	st	Y, r22
    2888:	e3 94       	inc	r14
    288a:	e9 cf       	rjmp	.-46     	; 0x285e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    288c:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2890:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2894:	18 b9       	out	0x08, r17	; 8
    2896:	47 b9       	out	0x07, r20	; 7
    2898:	cd b7       	in	r28, 0x3d	; 61
    289a:	de b7       	in	r29, 0x3e	; 62
    289c:	e6 e0       	ldi	r30, 0x06	; 6
    289e:	0c 94 9f 16 	jmp	0x2d3e	; 0x2d3e <__epilogue_restores__+0x18>

000028a2 <_ZN16PololuQTRSensors4readEPjh>:
    28a2:	a0 e2       	ldi	r26, 0x20	; 32
    28a4:	b0 e0       	ldi	r27, 0x00	; 0
    28a6:	e7 e5       	ldi	r30, 0x57	; 87
    28a8:	f4 e1       	ldi	r31, 0x14	; 20
    28aa:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__prologue_saves__+0x16>
    28ae:	8c 01       	movw	r16, r24
    28b0:	7b 01       	movw	r14, r22
    28b2:	d4 2e       	mov	r13, r20
    28b4:	8f ef       	ldi	r24, 0xFF	; 255
    28b6:	84 0f       	add	r24, r20
    28b8:	82 30       	cpi	r24, 0x02	; 2
    28ba:	18 f4       	brcc	.+6      	; 0x28c2 <_ZN16PololuQTRSensors4readEPjh+0x20>
    28bc:	c8 01       	movw	r24, r16
    28be:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <_ZN16PololuQTRSensors10emittersOnEv>
    28c2:	d8 01       	movw	r26, r16
    28c4:	50 96       	adiw	r26, 0x10	; 16
    28c6:	8c 91       	ld	r24, X
    28c8:	b7 01       	movw	r22, r14
    28ca:	81 11       	cpse	r24, r1
    28cc:	10 c0       	rjmp	.+32     	; 0x28ee <_ZN16PololuQTRSensors4readEPjh+0x4c>
    28ce:	c8 01       	movw	r24, r16
    28d0:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    28d4:	c8 01       	movw	r24, r16
    28d6:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <_ZN16PololuQTRSensors11emittersOffEv>
    28da:	b2 e0       	ldi	r27, 0x02	; 2
    28dc:	db 12       	cpse	r13, r27
    28de:	3a c0       	rjmp	.+116    	; 0x2954 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    28e0:	be 01       	movw	r22, r28
    28e2:	6f 5f       	subi	r22, 0xFF	; 255
    28e4:	7f 4f       	sbci	r23, 0xFF	; 255
    28e6:	c8 01       	movw	r24, r16
    28e8:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    28ec:	0f c0       	rjmp	.+30     	; 0x290c <_ZN16PololuQTRSensors4readEPjh+0x6a>
    28ee:	c8 01       	movw	r24, r16
    28f0:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    28f4:	c8 01       	movw	r24, r16
    28f6:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <_ZN16PololuQTRSensors11emittersOffEv>
    28fa:	e2 e0       	ldi	r30, 0x02	; 2
    28fc:	de 12       	cpse	r13, r30
    28fe:	2a c0       	rjmp	.+84     	; 0x2954 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2900:	be 01       	movw	r22, r28
    2902:	6f 5f       	subi	r22, 0xFF	; 255
    2904:	7f 4f       	sbci	r23, 0xFF	; 255
    2906:	c8 01       	movw	r24, r16
    2908:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    290c:	40 e0       	ldi	r20, 0x00	; 0
    290e:	f8 01       	movw	r30, r16
    2910:	80 85       	ldd	r24, Z+8	; 0x08
    2912:	48 17       	cp	r20, r24
    2914:	f8 f4       	brcc	.+62     	; 0x2954 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2916:	84 2f       	mov	r24, r20
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	88 0f       	add	r24, r24
    291c:	99 1f       	adc	r25, r25
    291e:	f7 01       	movw	r30, r14
    2920:	e8 0f       	add	r30, r24
    2922:	f9 1f       	adc	r31, r25
    2924:	21 e0       	ldi	r18, 0x01	; 1
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	2c 0f       	add	r18, r28
    292a:	3d 1f       	adc	r19, r29
    292c:	82 0f       	add	r24, r18
    292e:	93 1f       	adc	r25, r19
    2930:	d8 01       	movw	r26, r16
    2932:	1e 96       	adiw	r26, 0x0e	; 14
    2934:	2d 91       	ld	r18, X+
    2936:	3c 91       	ld	r19, X
    2938:	1f 97       	sbiw	r26, 0x0f	; 15
    293a:	dc 01       	movw	r26, r24
    293c:	8d 91       	ld	r24, X+
    293e:	9c 91       	ld	r25, X
    2940:	28 1b       	sub	r18, r24
    2942:	39 0b       	sbc	r19, r25
    2944:	80 81       	ld	r24, Z
    2946:	91 81       	ldd	r25, Z+1	; 0x01
    2948:	82 0f       	add	r24, r18
    294a:	93 1f       	adc	r25, r19
    294c:	91 83       	std	Z+1, r25	; 0x01
    294e:	80 83       	st	Z, r24
    2950:	4f 5f       	subi	r20, 0xFF	; 255
    2952:	dd cf       	rjmp	.-70     	; 0x290e <_ZN16PololuQTRSensors4readEPjh+0x6c>
    2954:	a0 96       	adiw	r28, 0x20	; 32
    2956:	e7 e0       	ldi	r30, 0x07	; 7
    2958:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__epilogue_restores__+0x16>

0000295c <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    295c:	a0 e0       	ldi	r26, 0x00	; 0
    295e:	b0 e0       	ldi	r27, 0x00	; 0
    2960:	e4 eb       	ldi	r30, 0xB4	; 180
    2962:	f4 e1       	ldi	r31, 0x14	; 20
    2964:	0c 94 80 16 	jmp	0x2d00	; 0x2d00 <__prologue_saves__+0x12>
    2968:	ec 01       	movw	r28, r24
    296a:	8b 01       	movw	r16, r22
    296c:	b4 2e       	mov	r11, r20
    296e:	84 2f       	mov	r24, r20
    2970:	8d 7f       	andi	r24, 0xFD	; 253
    2972:	51 f4       	brne	.+20     	; 0x2988 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    2974:	8c 81       	ldd	r24, Y+4	; 0x04
    2976:	9d 81       	ldd	r25, Y+5	; 0x05
    2978:	89 2b       	or	r24, r25
    297a:	09 f4       	brne	.+2      	; 0x297e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x22>
    297c:	97 c0       	rjmp	.+302    	; 0x2aac <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    297e:	8e 81       	ldd	r24, Y+6	; 0x06
    2980:	9f 81       	ldd	r25, Y+7	; 0x07
    2982:	89 2b       	or	r24, r25
    2984:	09 f4       	brne	.+2      	; 0x2988 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    2986:	92 c0       	rjmp	.+292    	; 0x2aac <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2988:	8f ef       	ldi	r24, 0xFF	; 255
    298a:	8b 0d       	add	r24, r11
    298c:	82 30       	cpi	r24, 0x02	; 2
    298e:	50 f4       	brcc	.+20     	; 0x29a4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    2990:	88 81       	ld	r24, Y
    2992:	99 81       	ldd	r25, Y+1	; 0x01
    2994:	89 2b       	or	r24, r25
    2996:	09 f4       	brne	.+2      	; 0x299a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3e>
    2998:	89 c0       	rjmp	.+274    	; 0x2aac <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    299a:	8a 81       	ldd	r24, Y+2	; 0x02
    299c:	9b 81       	ldd	r25, Y+3	; 0x03
    299e:	89 2b       	or	r24, r25
    29a0:	09 f4       	brne	.+2      	; 0x29a4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    29a2:	84 c0       	rjmp	.+264    	; 0x2aac <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    29a4:	4b 2d       	mov	r20, r11
    29a6:	b8 01       	movw	r22, r16
    29a8:	ce 01       	movw	r24, r28
    29aa:	0e 94 51 14 	call	0x28a2	; 0x28a2 <_ZN16PololuQTRSensors4readEPjh>
    29ae:	78 01       	movw	r14, r16
    29b0:	00 e0       	ldi	r16, 0x00	; 0
    29b2:	10 e0       	ldi	r17, 0x00	; 0
    29b4:	c1 2c       	mov	r12, r1
    29b6:	d1 2c       	mov	r13, r1
    29b8:	88 85       	ldd	r24, Y+8	; 0x08
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	c8 16       	cp	r12, r24
    29be:	d9 06       	cpc	r13, r25
    29c0:	0c f0       	brlt	.+2      	; 0x29c4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x68>
    29c2:	74 c0       	rjmp	.+232    	; 0x2aac <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	b8 12       	cpse	r11, r24
    29c8:	0a c0       	rjmp	.+20     	; 0x29de <_ZN16PololuQTRSensors14readCalibratedEPjh+0x82>
    29ca:	ea 81       	ldd	r30, Y+2	; 0x02
    29cc:	fb 81       	ldd	r31, Y+3	; 0x03
    29ce:	e0 0f       	add	r30, r16
    29d0:	f1 1f       	adc	r31, r17
    29d2:	01 90       	ld	r0, Z+
    29d4:	f0 81       	ld	r31, Z
    29d6:	e0 2d       	mov	r30, r0
    29d8:	a8 81       	ld	r26, Y
    29da:	b9 81       	ldd	r27, Y+1	; 0x01
    29dc:	0d c0       	rjmp	.+26     	; 0x29f8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x9c>
    29de:	8c 81       	ldd	r24, Y+4	; 0x04
    29e0:	9d 81       	ldd	r25, Y+5	; 0x05
    29e2:	2e 81       	ldd	r18, Y+6	; 0x06
    29e4:	3f 81       	ldd	r19, Y+7	; 0x07
    29e6:	b1 10       	cpse	r11, r1
    29e8:	0c c0       	rjmp	.+24     	; 0x2a02 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    29ea:	f9 01       	movw	r30, r18
    29ec:	e0 0f       	add	r30, r16
    29ee:	f1 1f       	adc	r31, r17
    29f0:	01 90       	ld	r0, Z+
    29f2:	f0 81       	ld	r31, Z
    29f4:	e0 2d       	mov	r30, r0
    29f6:	dc 01       	movw	r26, r24
    29f8:	a0 0f       	add	r26, r16
    29fa:	b1 1f       	adc	r27, r17
    29fc:	8d 91       	ld	r24, X+
    29fe:	9c 91       	ld	r25, X
    2a00:	28 c0       	rjmp	.+80     	; 0x2a52 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    2a02:	fc 01       	movw	r30, r24
    2a04:	e0 0f       	add	r30, r16
    2a06:	f1 1f       	adc	r31, r17
    2a08:	40 81       	ld	r20, Z
    2a0a:	51 81       	ldd	r21, Z+1	; 0x01
    2a0c:	e8 81       	ld	r30, Y
    2a0e:	f9 81       	ldd	r31, Y+1	; 0x01
    2a10:	e0 0f       	add	r30, r16
    2a12:	f1 1f       	adc	r31, r17
    2a14:	80 81       	ld	r24, Z
    2a16:	91 81       	ldd	r25, Z+1	; 0x01
    2a18:	ee 85       	ldd	r30, Y+14	; 0x0e
    2a1a:	ff 85       	ldd	r31, Y+15	; 0x0f
    2a1c:	48 17       	cp	r20, r24
    2a1e:	59 07       	cpc	r21, r25
    2a20:	10 f4       	brcc	.+4      	; 0x2a26 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xca>
    2a22:	cf 01       	movw	r24, r30
    2a24:	04 c0       	rjmp	.+8      	; 0x2a2e <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd2>
    2a26:	8e 0f       	add	r24, r30
    2a28:	9f 1f       	adc	r25, r31
    2a2a:	84 1b       	sub	r24, r20
    2a2c:	95 0b       	sbc	r25, r21
    2a2e:	d9 01       	movw	r26, r18
    2a30:	a0 0f       	add	r26, r16
    2a32:	b1 1f       	adc	r27, r17
    2a34:	2d 91       	ld	r18, X+
    2a36:	3c 91       	ld	r19, X
    2a38:	aa 81       	ldd	r26, Y+2	; 0x02
    2a3a:	bb 81       	ldd	r27, Y+3	; 0x03
    2a3c:	a0 0f       	add	r26, r16
    2a3e:	b1 1f       	adc	r27, r17
    2a40:	4d 91       	ld	r20, X+
    2a42:	5c 91       	ld	r21, X
    2a44:	24 17       	cp	r18, r20
    2a46:	35 07       	cpc	r19, r21
    2a48:	20 f0       	brcs	.+8      	; 0x2a52 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    2a4a:	e4 0f       	add	r30, r20
    2a4c:	f5 1f       	adc	r31, r21
    2a4e:	e2 1b       	sub	r30, r18
    2a50:	f3 0b       	sbc	r31, r19
    2a52:	e8 1b       	sub	r30, r24
    2a54:	f9 0b       	sbc	r31, r25
    2a56:	a9 f0       	breq	.+42     	; 0x2a82 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x126>
    2a58:	d7 01       	movw	r26, r14
    2a5a:	2d 91       	ld	r18, X+
    2a5c:	3c 91       	ld	r19, X
    2a5e:	40 e0       	ldi	r20, 0x00	; 0
    2a60:	50 e0       	ldi	r21, 0x00	; 0
    2a62:	28 1b       	sub	r18, r24
    2a64:	39 0b       	sbc	r19, r25
    2a66:	41 09       	sbc	r20, r1
    2a68:	51 09       	sbc	r21, r1
    2a6a:	a8 ee       	ldi	r26, 0xE8	; 232
    2a6c:	b3 e0       	ldi	r27, 0x03	; 3
    2a6e:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__muluhisi3>
    2a72:	9f 01       	movw	r18, r30
    2a74:	40 e0       	ldi	r20, 0x00	; 0
    2a76:	50 e0       	ldi	r21, 0x00	; 0
    2a78:	0e 94 30 16 	call	0x2c60	; 0x2c60 <__divmodsi4>
    2a7c:	37 fd       	sbrc	r19, 7
    2a7e:	0a c0       	rjmp	.+20     	; 0x2a94 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x138>
    2a80:	02 c0       	rjmp	.+4      	; 0x2a86 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x12a>
    2a82:	20 e0       	ldi	r18, 0x00	; 0
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	29 3e       	cpi	r18, 0xE9	; 233
    2a88:	b3 e0       	ldi	r27, 0x03	; 3
    2a8a:	3b 07       	cpc	r19, r27
    2a8c:	2c f0       	brlt	.+10     	; 0x2a98 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    2a8e:	28 ee       	ldi	r18, 0xE8	; 232
    2a90:	33 e0       	ldi	r19, 0x03	; 3
    2a92:	02 c0       	rjmp	.+4      	; 0x2a98 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    2a94:	20 e0       	ldi	r18, 0x00	; 0
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	f7 01       	movw	r30, r14
    2a9a:	21 93       	st	Z+, r18
    2a9c:	31 93       	st	Z+, r19
    2a9e:	7f 01       	movw	r14, r30
    2aa0:	ff ef       	ldi	r31, 0xFF	; 255
    2aa2:	cf 1a       	sub	r12, r31
    2aa4:	df 0a       	sbc	r13, r31
    2aa6:	0e 5f       	subi	r16, 0xFE	; 254
    2aa8:	1f 4f       	sbci	r17, 0xFF	; 255
    2aaa:	86 cf       	rjmp	.-244    	; 0x29b8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x5c>
    2aac:	cd b7       	in	r28, 0x3d	; 61
    2aae:	de b7       	in	r29, 0x3e	; 62
    2ab0:	e9 e0       	ldi	r30, 0x09	; 9
    2ab2:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <__epilogue_restores__+0x12>

00002ab6 <_ZN16PololuQTRSensors8readLineEPjhh>:
    2ab6:	a0 e0       	ldi	r26, 0x00	; 0
    2ab8:	b0 e0       	ldi	r27, 0x00	; 0
    2aba:	e1 e6       	ldi	r30, 0x61	; 97
    2abc:	f5 e1       	ldi	r31, 0x15	; 21
    2abe:	0c 94 77 16 	jmp	0x2cee	; 0x2cee <__prologue_saves__>
    2ac2:	ec 01       	movw	r28, r24
    2ac4:	8b 01       	movw	r16, r22
    2ac6:	82 2e       	mov	r8, r18
    2ac8:	0e 94 ae 14 	call	0x295c	; 0x295c <_ZN16PololuQTRSensors14readCalibratedEPjh>
    2acc:	28 84       	ldd	r2, Y+8	; 0x08
    2ace:	e8 01       	movw	r28, r16
    2ad0:	41 2c       	mov	r4, r1
    2ad2:	51 2c       	mov	r5, r1
    2ad4:	32 01       	movw	r6, r4
    2ad6:	00 e0       	ldi	r16, 0x00	; 0
    2ad8:	10 e0       	ldi	r17, 0x00	; 0
    2ada:	c1 2c       	mov	r12, r1
    2adc:	d1 2c       	mov	r13, r1
    2ade:	76 01       	movw	r14, r12
    2ae0:	31 2c       	mov	r3, r1
    2ae2:	91 2c       	mov	r9, r1
    2ae4:	58 ee       	ldi	r21, 0xE8	; 232
    2ae6:	a5 2e       	mov	r10, r21
    2ae8:	53 e0       	ldi	r21, 0x03	; 3
    2aea:	b5 2e       	mov	r11, r21
    2aec:	92 14       	cp	r9, r2
    2aee:	21 f1       	breq	.+72     	; 0x2b38 <_ZN16PololuQTRSensors8readLineEPjhh+0x82>
    2af0:	e9 91       	ld	r30, Y+
    2af2:	f9 91       	ld	r31, Y+
    2af4:	88 20       	and	r8, r8
    2af6:	21 f0       	breq	.+8      	; 0x2b00 <_ZN16PololuQTRSensors8readLineEPjhh+0x4a>
    2af8:	c5 01       	movw	r24, r10
    2afa:	8e 1b       	sub	r24, r30
    2afc:	9f 0b       	sbc	r25, r31
    2afe:	fc 01       	movw	r30, r24
    2b00:	e9 3c       	cpi	r30, 0xC9	; 201
    2b02:	f1 05       	cpc	r31, r1
    2b04:	24 f4       	brge	.+8      	; 0x2b0e <_ZN16PololuQTRSensors8readLineEPjhh+0x58>
    2b06:	e3 33       	cpi	r30, 0x33	; 51
    2b08:	f1 05       	cpc	r31, r1
    2b0a:	74 f0       	brlt	.+28     	; 0x2b28 <_ZN16PololuQTRSensors8readLineEPjhh+0x72>
    2b0c:	02 c0       	rjmp	.+4      	; 0x2b12 <_ZN16PololuQTRSensors8readLineEPjhh+0x5c>
    2b0e:	33 24       	eor	r3, r3
    2b10:	33 94       	inc	r3
    2b12:	df 01       	movw	r26, r30
    2b14:	a3 01       	movw	r20, r6
    2b16:	92 01       	movw	r18, r4
    2b18:	0e 94 6f 16 	call	0x2cde	; 0x2cde <__mulshisi3>
    2b1c:	c6 0e       	add	r12, r22
    2b1e:	d7 1e       	adc	r13, r23
    2b20:	e8 1e       	adc	r14, r24
    2b22:	f9 1e       	adc	r15, r25
    2b24:	0e 0f       	add	r16, r30
    2b26:	1f 1f       	adc	r17, r31
    2b28:	93 94       	inc	r9
    2b2a:	98 ee       	ldi	r25, 0xE8	; 232
    2b2c:	49 0e       	add	r4, r25
    2b2e:	93 e0       	ldi	r25, 0x03	; 3
    2b30:	59 1e       	adc	r5, r25
    2b32:	61 1c       	adc	r6, r1
    2b34:	71 1c       	adc	r7, r1
    2b36:	da cf       	rjmp	.-76     	; 0x2aec <_ZN16PololuQTRSensors8readLineEPjhh+0x36>
    2b38:	31 10       	cpse	r3, r1
    2b3a:	1e c0       	rjmp	.+60     	; 0x2b78 <_ZN16PololuQTRSensors8readLineEPjhh+0xc2>
    2b3c:	49 2d       	mov	r20, r9
    2b3e:	50 e0       	ldi	r21, 0x00	; 0
    2b40:	41 50       	subi	r20, 0x01	; 1
    2b42:	51 09       	sbc	r21, r1
    2b44:	24 ef       	ldi	r18, 0xF4	; 244
    2b46:	31 e0       	ldi	r19, 0x01	; 1
    2b48:	42 9f       	mul	r20, r18
    2b4a:	c0 01       	movw	r24, r0
    2b4c:	43 9f       	mul	r20, r19
    2b4e:	90 0d       	add	r25, r0
    2b50:	52 9f       	mul	r21, r18
    2b52:	90 0d       	add	r25, r0
    2b54:	11 24       	eor	r1, r1
    2b56:	20 91 99 01 	lds	r18, 0x0199	; 0x800199 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    2b5a:	30 91 9a 01 	lds	r19, 0x019A	; 0x80019a <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    2b5e:	28 17       	cp	r18, r24
    2b60:	39 07       	cpc	r19, r25
    2b62:	b4 f0       	brlt	.+44     	; 0x2b90 <_ZN16PololuQTRSensors8readLineEPjhh+0xda>
    2b64:	88 ee       	ldi	r24, 0xE8	; 232
    2b66:	93 e0       	ldi	r25, 0x03	; 3
    2b68:	48 9f       	mul	r20, r24
    2b6a:	90 01       	movw	r18, r0
    2b6c:	49 9f       	mul	r20, r25
    2b6e:	30 0d       	add	r19, r0
    2b70:	58 9f       	mul	r21, r24
    2b72:	30 0d       	add	r19, r0
    2b74:	11 24       	eor	r1, r1
    2b76:	0e c0       	rjmp	.+28     	; 0x2b94 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    2b78:	98 01       	movw	r18, r16
    2b7a:	40 e0       	ldi	r20, 0x00	; 0
    2b7c:	50 e0       	ldi	r21, 0x00	; 0
    2b7e:	c7 01       	movw	r24, r14
    2b80:	b6 01       	movw	r22, r12
    2b82:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <__udivmodsi4>
    2b86:	30 93 9a 01 	sts	0x019A, r19	; 0x80019a <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    2b8a:	20 93 99 01 	sts	0x0199, r18	; 0x800199 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    2b8e:	02 c0       	rjmp	.+4      	; 0x2b94 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	c9 01       	movw	r24, r18
    2b96:	cd b7       	in	r28, 0x3d	; 61
    2b98:	de b7       	in	r29, 0x3e	; 62
    2b9a:	e2 e1       	ldi	r30, 0x12	; 18
    2b9c:	0c 94 93 16 	jmp	0x2d26	; 0x2d26 <__epilogue_restores__>

00002ba0 <_ZN16PololuQTRSensorsD1Ev>:
    2ba0:	cf 93       	push	r28
    2ba2:	df 93       	push	r29
    2ba4:	ec 01       	movw	r28, r24
    2ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba8:	9b 81       	ldd	r25, Y+3	; 0x03
    2baa:	00 97       	sbiw	r24, 0x00	; 0
    2bac:	11 f0       	breq	.+4      	; 0x2bb2 <_ZN16PololuQTRSensorsD1Ev+0x12>
    2bae:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <free>
    2bb2:	8e 81       	ldd	r24, Y+6	; 0x06
    2bb4:	9f 81       	ldd	r25, Y+7	; 0x07
    2bb6:	00 97       	sbiw	r24, 0x00	; 0
    2bb8:	11 f0       	breq	.+4      	; 0x2bbe <_ZN16PololuQTRSensorsD1Ev+0x1e>
    2bba:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <free>
    2bbe:	88 81       	ld	r24, Y
    2bc0:	99 81       	ldd	r25, Y+1	; 0x01
    2bc2:	00 97       	sbiw	r24, 0x00	; 0
    2bc4:	11 f0       	breq	.+4      	; 0x2bca <_ZN16PololuQTRSensorsD1Ev+0x2a>
    2bc6:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <free>
    2bca:	8c 81       	ldd	r24, Y+4	; 0x04
    2bcc:	9d 81       	ldd	r25, Y+5	; 0x05
    2bce:	00 97       	sbiw	r24, 0x00	; 0
    2bd0:	11 f0       	breq	.+4      	; 0x2bd6 <_ZN16PololuQTRSensorsD1Ev+0x36>
    2bd2:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <free>
    2bd6:	df 91       	pop	r29
    2bd8:	cf 91       	pop	r28
    2bda:	08 95       	ret

00002bdc <__udivmodqi4>:
    2bdc:	99 1b       	sub	r25, r25
    2bde:	79 e0       	ldi	r23, 0x09	; 9
    2be0:	04 c0       	rjmp	.+8      	; 0x2bea <__udivmodqi4_ep>

00002be2 <__udivmodqi4_loop>:
    2be2:	99 1f       	adc	r25, r25
    2be4:	96 17       	cp	r25, r22
    2be6:	08 f0       	brcs	.+2      	; 0x2bea <__udivmodqi4_ep>
    2be8:	96 1b       	sub	r25, r22

00002bea <__udivmodqi4_ep>:
    2bea:	88 1f       	adc	r24, r24
    2bec:	7a 95       	dec	r23
    2bee:	c9 f7       	brne	.-14     	; 0x2be2 <__udivmodqi4_loop>
    2bf0:	80 95       	com	r24
    2bf2:	08 95       	ret

00002bf4 <__udivmodhi4>:
    2bf4:	aa 1b       	sub	r26, r26
    2bf6:	bb 1b       	sub	r27, r27
    2bf8:	51 e1       	ldi	r21, 0x11	; 17
    2bfa:	07 c0       	rjmp	.+14     	; 0x2c0a <__udivmodhi4_ep>

00002bfc <__udivmodhi4_loop>:
    2bfc:	aa 1f       	adc	r26, r26
    2bfe:	bb 1f       	adc	r27, r27
    2c00:	a6 17       	cp	r26, r22
    2c02:	b7 07       	cpc	r27, r23
    2c04:	10 f0       	brcs	.+4      	; 0x2c0a <__udivmodhi4_ep>
    2c06:	a6 1b       	sub	r26, r22
    2c08:	b7 0b       	sbc	r27, r23

00002c0a <__udivmodhi4_ep>:
    2c0a:	88 1f       	adc	r24, r24
    2c0c:	99 1f       	adc	r25, r25
    2c0e:	5a 95       	dec	r21
    2c10:	a9 f7       	brne	.-22     	; 0x2bfc <__udivmodhi4_loop>
    2c12:	80 95       	com	r24
    2c14:	90 95       	com	r25
    2c16:	bc 01       	movw	r22, r24
    2c18:	cd 01       	movw	r24, r26
    2c1a:	08 95       	ret

00002c1c <__udivmodsi4>:
    2c1c:	a1 e2       	ldi	r26, 0x21	; 33
    2c1e:	1a 2e       	mov	r1, r26
    2c20:	aa 1b       	sub	r26, r26
    2c22:	bb 1b       	sub	r27, r27
    2c24:	fd 01       	movw	r30, r26
    2c26:	0d c0       	rjmp	.+26     	; 0x2c42 <__udivmodsi4_ep>

00002c28 <__udivmodsi4_loop>:
    2c28:	aa 1f       	adc	r26, r26
    2c2a:	bb 1f       	adc	r27, r27
    2c2c:	ee 1f       	adc	r30, r30
    2c2e:	ff 1f       	adc	r31, r31
    2c30:	a2 17       	cp	r26, r18
    2c32:	b3 07       	cpc	r27, r19
    2c34:	e4 07       	cpc	r30, r20
    2c36:	f5 07       	cpc	r31, r21
    2c38:	20 f0       	brcs	.+8      	; 0x2c42 <__udivmodsi4_ep>
    2c3a:	a2 1b       	sub	r26, r18
    2c3c:	b3 0b       	sbc	r27, r19
    2c3e:	e4 0b       	sbc	r30, r20
    2c40:	f5 0b       	sbc	r31, r21

00002c42 <__udivmodsi4_ep>:
    2c42:	66 1f       	adc	r22, r22
    2c44:	77 1f       	adc	r23, r23
    2c46:	88 1f       	adc	r24, r24
    2c48:	99 1f       	adc	r25, r25
    2c4a:	1a 94       	dec	r1
    2c4c:	69 f7       	brne	.-38     	; 0x2c28 <__udivmodsi4_loop>
    2c4e:	60 95       	com	r22
    2c50:	70 95       	com	r23
    2c52:	80 95       	com	r24
    2c54:	90 95       	com	r25
    2c56:	9b 01       	movw	r18, r22
    2c58:	ac 01       	movw	r20, r24
    2c5a:	bd 01       	movw	r22, r26
    2c5c:	cf 01       	movw	r24, r30
    2c5e:	08 95       	ret

00002c60 <__divmodsi4>:
    2c60:	05 2e       	mov	r0, r21
    2c62:	97 fb       	bst	r25, 7
    2c64:	1e f4       	brtc	.+6      	; 0x2c6c <__divmodsi4+0xc>
    2c66:	00 94       	com	r0
    2c68:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__negsi2>
    2c6c:	57 fd       	sbrc	r21, 7
    2c6e:	07 d0       	rcall	.+14     	; 0x2c7e <__divmodsi4_neg2>
    2c70:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <__udivmodsi4>
    2c74:	07 fc       	sbrc	r0, 7
    2c76:	03 d0       	rcall	.+6      	; 0x2c7e <__divmodsi4_neg2>
    2c78:	4e f4       	brtc	.+18     	; 0x2c8c <__divmodsi4_exit>
    2c7a:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__negsi2>

00002c7e <__divmodsi4_neg2>:
    2c7e:	50 95       	com	r21
    2c80:	40 95       	com	r20
    2c82:	30 95       	com	r19
    2c84:	21 95       	neg	r18
    2c86:	3f 4f       	sbci	r19, 0xFF	; 255
    2c88:	4f 4f       	sbci	r20, 0xFF	; 255
    2c8a:	5f 4f       	sbci	r21, 0xFF	; 255

00002c8c <__divmodsi4_exit>:
    2c8c:	08 95       	ret

00002c8e <__negsi2>:
    2c8e:	90 95       	com	r25
    2c90:	80 95       	com	r24
    2c92:	70 95       	com	r23
    2c94:	61 95       	neg	r22
    2c96:	7f 4f       	sbci	r23, 0xFF	; 255
    2c98:	8f 4f       	sbci	r24, 0xFF	; 255
    2c9a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c9c:	08 95       	ret

00002c9e <__tablejump2__>:
    2c9e:	ee 0f       	add	r30, r30
    2ca0:	ff 1f       	adc	r31, r31
    2ca2:	05 90       	lpm	r0, Z+
    2ca4:	f4 91       	lpm	r31, Z
    2ca6:	e0 2d       	mov	r30, r0
    2ca8:	09 94       	ijmp

00002caa <__umulhisi3>:
    2caa:	a2 9f       	mul	r26, r18
    2cac:	b0 01       	movw	r22, r0
    2cae:	b3 9f       	mul	r27, r19
    2cb0:	c0 01       	movw	r24, r0
    2cb2:	a3 9f       	mul	r26, r19
    2cb4:	70 0d       	add	r23, r0
    2cb6:	81 1d       	adc	r24, r1
    2cb8:	11 24       	eor	r1, r1
    2cba:	91 1d       	adc	r25, r1
    2cbc:	b2 9f       	mul	r27, r18
    2cbe:	70 0d       	add	r23, r0
    2cc0:	81 1d       	adc	r24, r1
    2cc2:	11 24       	eor	r1, r1
    2cc4:	91 1d       	adc	r25, r1
    2cc6:	08 95       	ret

00002cc8 <__muluhisi3>:
    2cc8:	0e 94 55 16 	call	0x2caa	; 0x2caa <__umulhisi3>
    2ccc:	a5 9f       	mul	r26, r21
    2cce:	90 0d       	add	r25, r0
    2cd0:	b4 9f       	mul	r27, r20
    2cd2:	90 0d       	add	r25, r0
    2cd4:	a4 9f       	mul	r26, r20
    2cd6:	80 0d       	add	r24, r0
    2cd8:	91 1d       	adc	r25, r1
    2cda:	11 24       	eor	r1, r1
    2cdc:	08 95       	ret

00002cde <__mulshisi3>:
    2cde:	b7 ff       	sbrs	r27, 7
    2ce0:	0c 94 64 16 	jmp	0x2cc8	; 0x2cc8 <__muluhisi3>

00002ce4 <__mulohisi3>:
    2ce4:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <__muluhisi3>
    2ce8:	82 1b       	sub	r24, r18
    2cea:	93 0b       	sbc	r25, r19
    2cec:	08 95       	ret

00002cee <__prologue_saves__>:
    2cee:	2f 92       	push	r2
    2cf0:	3f 92       	push	r3
    2cf2:	4f 92       	push	r4
    2cf4:	5f 92       	push	r5
    2cf6:	6f 92       	push	r6
    2cf8:	7f 92       	push	r7
    2cfa:	8f 92       	push	r8
    2cfc:	9f 92       	push	r9
    2cfe:	af 92       	push	r10
    2d00:	bf 92       	push	r11
    2d02:	cf 92       	push	r12
    2d04:	df 92       	push	r13
    2d06:	ef 92       	push	r14
    2d08:	ff 92       	push	r15
    2d0a:	0f 93       	push	r16
    2d0c:	1f 93       	push	r17
    2d0e:	cf 93       	push	r28
    2d10:	df 93       	push	r29
    2d12:	cd b7       	in	r28, 0x3d	; 61
    2d14:	de b7       	in	r29, 0x3e	; 62
    2d16:	ca 1b       	sub	r28, r26
    2d18:	db 0b       	sbc	r29, r27
    2d1a:	0f b6       	in	r0, 0x3f	; 63
    2d1c:	f8 94       	cli
    2d1e:	de bf       	out	0x3e, r29	; 62
    2d20:	0f be       	out	0x3f, r0	; 63
    2d22:	cd bf       	out	0x3d, r28	; 61
    2d24:	09 94       	ijmp

00002d26 <__epilogue_restores__>:
    2d26:	2a 88       	ldd	r2, Y+18	; 0x12
    2d28:	39 88       	ldd	r3, Y+17	; 0x11
    2d2a:	48 88       	ldd	r4, Y+16	; 0x10
    2d2c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d2e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d30:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d32:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d34:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d36:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d38:	b9 84       	ldd	r11, Y+9	; 0x09
    2d3a:	c8 84       	ldd	r12, Y+8	; 0x08
    2d3c:	df 80       	ldd	r13, Y+7	; 0x07
    2d3e:	ee 80       	ldd	r14, Y+6	; 0x06
    2d40:	fd 80       	ldd	r15, Y+5	; 0x05
    2d42:	0c 81       	ldd	r16, Y+4	; 0x04
    2d44:	1b 81       	ldd	r17, Y+3	; 0x03
    2d46:	aa 81       	ldd	r26, Y+2	; 0x02
    2d48:	b9 81       	ldd	r27, Y+1	; 0x01
    2d4a:	ce 0f       	add	r28, r30
    2d4c:	d1 1d       	adc	r29, r1
    2d4e:	0f b6       	in	r0, 0x3f	; 63
    2d50:	f8 94       	cli
    2d52:	de bf       	out	0x3e, r29	; 62
    2d54:	0f be       	out	0x3f, r0	; 63
    2d56:	cd bf       	out	0x3d, r28	; 61
    2d58:	ed 01       	movw	r28, r26
    2d5a:	08 95       	ret

00002d5c <malloc>:
    2d5c:	0f 93       	push	r16
    2d5e:	1f 93       	push	r17
    2d60:	cf 93       	push	r28
    2d62:	df 93       	push	r29
    2d64:	82 30       	cpi	r24, 0x02	; 2
    2d66:	91 05       	cpc	r25, r1
    2d68:	10 f4       	brcc	.+4      	; 0x2d6e <malloc+0x12>
    2d6a:	82 e0       	ldi	r24, 0x02	; 2
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <__flp>
    2d72:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <__flp+0x1>
    2d76:	20 e0       	ldi	r18, 0x00	; 0
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	a0 e0       	ldi	r26, 0x00	; 0
    2d7c:	b0 e0       	ldi	r27, 0x00	; 0
    2d7e:	30 97       	sbiw	r30, 0x00	; 0
    2d80:	19 f1       	breq	.+70     	; 0x2dc8 <malloc+0x6c>
    2d82:	40 81       	ld	r20, Z
    2d84:	51 81       	ldd	r21, Z+1	; 0x01
    2d86:	02 81       	ldd	r16, Z+2	; 0x02
    2d88:	13 81       	ldd	r17, Z+3	; 0x03
    2d8a:	48 17       	cp	r20, r24
    2d8c:	59 07       	cpc	r21, r25
    2d8e:	c8 f0       	brcs	.+50     	; 0x2dc2 <malloc+0x66>
    2d90:	84 17       	cp	r24, r20
    2d92:	95 07       	cpc	r25, r21
    2d94:	69 f4       	brne	.+26     	; 0x2db0 <malloc+0x54>
    2d96:	10 97       	sbiw	r26, 0x00	; 0
    2d98:	31 f0       	breq	.+12     	; 0x2da6 <malloc+0x4a>
    2d9a:	12 96       	adiw	r26, 0x02	; 2
    2d9c:	0c 93       	st	X, r16
    2d9e:	12 97       	sbiw	r26, 0x02	; 2
    2da0:	13 96       	adiw	r26, 0x03	; 3
    2da2:	1c 93       	st	X, r17
    2da4:	27 c0       	rjmp	.+78     	; 0x2df4 <malloc+0x98>
    2da6:	00 93 0a 02 	sts	0x020A, r16	; 0x80020a <__flp>
    2daa:	10 93 0b 02 	sts	0x020B, r17	; 0x80020b <__flp+0x1>
    2dae:	22 c0       	rjmp	.+68     	; 0x2df4 <malloc+0x98>
    2db0:	21 15       	cp	r18, r1
    2db2:	31 05       	cpc	r19, r1
    2db4:	19 f0       	breq	.+6      	; 0x2dbc <malloc+0x60>
    2db6:	42 17       	cp	r20, r18
    2db8:	53 07       	cpc	r21, r19
    2dba:	18 f4       	brcc	.+6      	; 0x2dc2 <malloc+0x66>
    2dbc:	9a 01       	movw	r18, r20
    2dbe:	bd 01       	movw	r22, r26
    2dc0:	ef 01       	movw	r28, r30
    2dc2:	df 01       	movw	r26, r30
    2dc4:	f8 01       	movw	r30, r16
    2dc6:	db cf       	rjmp	.-74     	; 0x2d7e <malloc+0x22>
    2dc8:	21 15       	cp	r18, r1
    2dca:	31 05       	cpc	r19, r1
    2dcc:	f9 f0       	breq	.+62     	; 0x2e0c <malloc+0xb0>
    2dce:	28 1b       	sub	r18, r24
    2dd0:	39 0b       	sbc	r19, r25
    2dd2:	24 30       	cpi	r18, 0x04	; 4
    2dd4:	31 05       	cpc	r19, r1
    2dd6:	80 f4       	brcc	.+32     	; 0x2df8 <malloc+0x9c>
    2dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dda:	9b 81       	ldd	r25, Y+3	; 0x03
    2ddc:	61 15       	cp	r22, r1
    2dde:	71 05       	cpc	r23, r1
    2de0:	21 f0       	breq	.+8      	; 0x2dea <malloc+0x8e>
    2de2:	fb 01       	movw	r30, r22
    2de4:	93 83       	std	Z+3, r25	; 0x03
    2de6:	82 83       	std	Z+2, r24	; 0x02
    2de8:	04 c0       	rjmp	.+8      	; 0x2df2 <malloc+0x96>
    2dea:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <__flp+0x1>
    2dee:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <__flp>
    2df2:	fe 01       	movw	r30, r28
    2df4:	32 96       	adiw	r30, 0x02	; 2
    2df6:	44 c0       	rjmp	.+136    	; 0x2e80 <malloc+0x124>
    2df8:	fe 01       	movw	r30, r28
    2dfa:	e2 0f       	add	r30, r18
    2dfc:	f3 1f       	adc	r31, r19
    2dfe:	81 93       	st	Z+, r24
    2e00:	91 93       	st	Z+, r25
    2e02:	22 50       	subi	r18, 0x02	; 2
    2e04:	31 09       	sbc	r19, r1
    2e06:	39 83       	std	Y+1, r19	; 0x01
    2e08:	28 83       	st	Y, r18
    2e0a:	3a c0       	rjmp	.+116    	; 0x2e80 <malloc+0x124>
    2e0c:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <__brkval>
    2e10:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <__brkval+0x1>
    2e14:	23 2b       	or	r18, r19
    2e16:	41 f4       	brne	.+16     	; 0x2e28 <malloc+0xcc>
    2e18:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__malloc_heap_start>
    2e1c:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__malloc_heap_start+0x1>
    2e20:	30 93 09 02 	sts	0x0209, r19	; 0x800209 <__brkval+0x1>
    2e24:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <__brkval>
    2e28:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__malloc_heap_end>
    2e2c:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__malloc_heap_end+0x1>
    2e30:	21 15       	cp	r18, r1
    2e32:	31 05       	cpc	r19, r1
    2e34:	41 f4       	brne	.+16     	; 0x2e46 <malloc+0xea>
    2e36:	2d b7       	in	r18, 0x3d	; 61
    2e38:	3e b7       	in	r19, 0x3e	; 62
    2e3a:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <__malloc_margin>
    2e3e:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <__malloc_margin+0x1>
    2e42:	24 1b       	sub	r18, r20
    2e44:	35 0b       	sbc	r19, r21
    2e46:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <__brkval>
    2e4a:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <__brkval+0x1>
    2e4e:	e2 17       	cp	r30, r18
    2e50:	f3 07       	cpc	r31, r19
    2e52:	a0 f4       	brcc	.+40     	; 0x2e7c <malloc+0x120>
    2e54:	2e 1b       	sub	r18, r30
    2e56:	3f 0b       	sbc	r19, r31
    2e58:	28 17       	cp	r18, r24
    2e5a:	39 07       	cpc	r19, r25
    2e5c:	78 f0       	brcs	.+30     	; 0x2e7c <malloc+0x120>
    2e5e:	ac 01       	movw	r20, r24
    2e60:	4e 5f       	subi	r20, 0xFE	; 254
    2e62:	5f 4f       	sbci	r21, 0xFF	; 255
    2e64:	24 17       	cp	r18, r20
    2e66:	35 07       	cpc	r19, r21
    2e68:	48 f0       	brcs	.+18     	; 0x2e7c <malloc+0x120>
    2e6a:	4e 0f       	add	r20, r30
    2e6c:	5f 1f       	adc	r21, r31
    2e6e:	50 93 09 02 	sts	0x0209, r21	; 0x800209 <__brkval+0x1>
    2e72:	40 93 08 02 	sts	0x0208, r20	; 0x800208 <__brkval>
    2e76:	81 93       	st	Z+, r24
    2e78:	91 93       	st	Z+, r25
    2e7a:	02 c0       	rjmp	.+4      	; 0x2e80 <malloc+0x124>
    2e7c:	e0 e0       	ldi	r30, 0x00	; 0
    2e7e:	f0 e0       	ldi	r31, 0x00	; 0
    2e80:	cf 01       	movw	r24, r30
    2e82:	df 91       	pop	r29
    2e84:	cf 91       	pop	r28
    2e86:	1f 91       	pop	r17
    2e88:	0f 91       	pop	r16
    2e8a:	08 95       	ret

00002e8c <free>:
    2e8c:	cf 93       	push	r28
    2e8e:	df 93       	push	r29
    2e90:	00 97       	sbiw	r24, 0x00	; 0
    2e92:	09 f4       	brne	.+2      	; 0x2e96 <free+0xa>
    2e94:	81 c0       	rjmp	.+258    	; 0x2f98 <free+0x10c>
    2e96:	fc 01       	movw	r30, r24
    2e98:	32 97       	sbiw	r30, 0x02	; 2
    2e9a:	13 82       	std	Z+3, r1	; 0x03
    2e9c:	12 82       	std	Z+2, r1	; 0x02
    2e9e:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <__flp>
    2ea2:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <__flp+0x1>
    2ea6:	10 97       	sbiw	r26, 0x00	; 0
    2ea8:	81 f4       	brne	.+32     	; 0x2eca <free+0x3e>
    2eaa:	20 81       	ld	r18, Z
    2eac:	31 81       	ldd	r19, Z+1	; 0x01
    2eae:	82 0f       	add	r24, r18
    2eb0:	93 1f       	adc	r25, r19
    2eb2:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <__brkval>
    2eb6:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <__brkval+0x1>
    2eba:	28 17       	cp	r18, r24
    2ebc:	39 07       	cpc	r19, r25
    2ebe:	51 f5       	brne	.+84     	; 0x2f14 <free+0x88>
    2ec0:	f0 93 09 02 	sts	0x0209, r31	; 0x800209 <__brkval+0x1>
    2ec4:	e0 93 08 02 	sts	0x0208, r30	; 0x800208 <__brkval>
    2ec8:	67 c0       	rjmp	.+206    	; 0x2f98 <free+0x10c>
    2eca:	ed 01       	movw	r28, r26
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	ce 17       	cp	r28, r30
    2ed2:	df 07       	cpc	r29, r31
    2ed4:	40 f4       	brcc	.+16     	; 0x2ee6 <free+0x5a>
    2ed6:	4a 81       	ldd	r20, Y+2	; 0x02
    2ed8:	5b 81       	ldd	r21, Y+3	; 0x03
    2eda:	9e 01       	movw	r18, r28
    2edc:	41 15       	cp	r20, r1
    2ede:	51 05       	cpc	r21, r1
    2ee0:	f1 f0       	breq	.+60     	; 0x2f1e <free+0x92>
    2ee2:	ea 01       	movw	r28, r20
    2ee4:	f5 cf       	rjmp	.-22     	; 0x2ed0 <free+0x44>
    2ee6:	d3 83       	std	Z+3, r29	; 0x03
    2ee8:	c2 83       	std	Z+2, r28	; 0x02
    2eea:	40 81       	ld	r20, Z
    2eec:	51 81       	ldd	r21, Z+1	; 0x01
    2eee:	84 0f       	add	r24, r20
    2ef0:	95 1f       	adc	r25, r21
    2ef2:	c8 17       	cp	r28, r24
    2ef4:	d9 07       	cpc	r29, r25
    2ef6:	59 f4       	brne	.+22     	; 0x2f0e <free+0x82>
    2ef8:	88 81       	ld	r24, Y
    2efa:	99 81       	ldd	r25, Y+1	; 0x01
    2efc:	84 0f       	add	r24, r20
    2efe:	95 1f       	adc	r25, r21
    2f00:	02 96       	adiw	r24, 0x02	; 2
    2f02:	91 83       	std	Z+1, r25	; 0x01
    2f04:	80 83       	st	Z, r24
    2f06:	8a 81       	ldd	r24, Y+2	; 0x02
    2f08:	9b 81       	ldd	r25, Y+3	; 0x03
    2f0a:	93 83       	std	Z+3, r25	; 0x03
    2f0c:	82 83       	std	Z+2, r24	; 0x02
    2f0e:	21 15       	cp	r18, r1
    2f10:	31 05       	cpc	r19, r1
    2f12:	29 f4       	brne	.+10     	; 0x2f1e <free+0x92>
    2f14:	f0 93 0b 02 	sts	0x020B, r31	; 0x80020b <__flp+0x1>
    2f18:	e0 93 0a 02 	sts	0x020A, r30	; 0x80020a <__flp>
    2f1c:	3d c0       	rjmp	.+122    	; 0x2f98 <free+0x10c>
    2f1e:	e9 01       	movw	r28, r18
    2f20:	fb 83       	std	Y+3, r31	; 0x03
    2f22:	ea 83       	std	Y+2, r30	; 0x02
    2f24:	49 91       	ld	r20, Y+
    2f26:	59 91       	ld	r21, Y+
    2f28:	c4 0f       	add	r28, r20
    2f2a:	d5 1f       	adc	r29, r21
    2f2c:	ec 17       	cp	r30, r28
    2f2e:	fd 07       	cpc	r31, r29
    2f30:	61 f4       	brne	.+24     	; 0x2f4a <free+0xbe>
    2f32:	80 81       	ld	r24, Z
    2f34:	91 81       	ldd	r25, Z+1	; 0x01
    2f36:	84 0f       	add	r24, r20
    2f38:	95 1f       	adc	r25, r21
    2f3a:	02 96       	adiw	r24, 0x02	; 2
    2f3c:	e9 01       	movw	r28, r18
    2f3e:	99 83       	std	Y+1, r25	; 0x01
    2f40:	88 83       	st	Y, r24
    2f42:	82 81       	ldd	r24, Z+2	; 0x02
    2f44:	93 81       	ldd	r25, Z+3	; 0x03
    2f46:	9b 83       	std	Y+3, r25	; 0x03
    2f48:	8a 83       	std	Y+2, r24	; 0x02
    2f4a:	e0 e0       	ldi	r30, 0x00	; 0
    2f4c:	f0 e0       	ldi	r31, 0x00	; 0
    2f4e:	12 96       	adiw	r26, 0x02	; 2
    2f50:	8d 91       	ld	r24, X+
    2f52:	9c 91       	ld	r25, X
    2f54:	13 97       	sbiw	r26, 0x03	; 3
    2f56:	00 97       	sbiw	r24, 0x00	; 0
    2f58:	19 f0       	breq	.+6      	; 0x2f60 <free+0xd4>
    2f5a:	fd 01       	movw	r30, r26
    2f5c:	dc 01       	movw	r26, r24
    2f5e:	f7 cf       	rjmp	.-18     	; 0x2f4e <free+0xc2>
    2f60:	8d 91       	ld	r24, X+
    2f62:	9c 91       	ld	r25, X
    2f64:	11 97       	sbiw	r26, 0x01	; 1
    2f66:	9d 01       	movw	r18, r26
    2f68:	2e 5f       	subi	r18, 0xFE	; 254
    2f6a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f6c:	82 0f       	add	r24, r18
    2f6e:	93 1f       	adc	r25, r19
    2f70:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <__brkval>
    2f74:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <__brkval+0x1>
    2f78:	28 17       	cp	r18, r24
    2f7a:	39 07       	cpc	r19, r25
    2f7c:	69 f4       	brne	.+26     	; 0x2f98 <free+0x10c>
    2f7e:	30 97       	sbiw	r30, 0x00	; 0
    2f80:	29 f4       	brne	.+10     	; 0x2f8c <free+0x100>
    2f82:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <__flp+0x1>
    2f86:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <__flp>
    2f8a:	02 c0       	rjmp	.+4      	; 0x2f90 <free+0x104>
    2f8c:	13 82       	std	Z+3, r1	; 0x03
    2f8e:	12 82       	std	Z+2, r1	; 0x02
    2f90:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <__brkval+0x1>
    2f94:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <__brkval>
    2f98:	df 91       	pop	r29
    2f9a:	cf 91       	pop	r28
    2f9c:	08 95       	ret

00002f9e <__do_global_dtors>:
    2f9e:	10 e0       	ldi	r17, 0x00	; 0
    2fa0:	cd e5       	ldi	r28, 0x5D	; 93
    2fa2:	d0 e0       	ldi	r29, 0x00	; 0
    2fa4:	04 c0       	rjmp	.+8      	; 0x2fae <__do_global_dtors+0x10>
    2fa6:	fe 01       	movw	r30, r28
    2fa8:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <__tablejump2__>
    2fac:	21 96       	adiw	r28, 0x01	; 1
    2fae:	ce 35       	cpi	r28, 0x5E	; 94
    2fb0:	d1 07       	cpc	r29, r17
    2fb2:	c9 f7       	brne	.-14     	; 0x2fa6 <__do_global_dtors+0x8>
    2fb4:	f8 94       	cli

00002fb6 <__stop_program>:
    2fb6:	ff cf       	rjmp	.-2      	; 0x2fb6 <__stop_program>
