
RobotRunGrid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  0000395e  000039f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000395e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000dd  00800162  00800162  00003a54  2**0
                  ALLOC
  3 .stab         000074ac  00000000  00000000  00003a54  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000a086  00000000  00000000  0000af00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  00014f86  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00014fc8  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000130  00000000  00000000  00015008  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002c07  00000000  00000000  00015138  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000dbb  00000000  00000000  00017d3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001ba5  00000000  00000000  00018afa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000404  00000000  00000000  0001a6a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000987  00000000  00000000  0001aaa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001723  00000000  00000000  0001b42b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000f8  00000000  00000000  0001cb4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__dtors_end>
       4:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
       8:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
       c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      10:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      14:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      18:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      1c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      20:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      24:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <__vector_9>
      28:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      2c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      30:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      34:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <__vector_13>
      38:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      3c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      40:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      44:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      48:	0c 94 53 14 	jmp	0x28a6	; 0x28a6 <__vector_18>
      4c:	0c 94 b6 14 	jmp	0x296c	; 0x296c <__vector_19>
      50:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      54:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      58:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      5c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      60:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      64:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
      68:	05 a8       	ldd	r0, Z+53	; 0x35
      6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
      6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <main+0x5e>
      6e:	4e b9       	out	0x0e, r20	; 14
      70:	38 36       	cpi	r19, 0x68	; 104
      72:	a9 02       	muls	r26, r25
      74:	0c 50       	subi	r16, 0x0C	; 12
      76:	b9 91       	ld	r27, Y+
      78:	86 88       	ldd	r8, Z+22	; 0x16
      7a:	08 3c       	cpi	r16, 0xC8	; 200
      7c:	a6 aa       	std	Z+54, r10	; 0x36
      7e:	aa 2a       	or	r10, r26
      80:	be 00       	.word	0x00be	; ????
      82:	00 00       	nop
      84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__trampolines_end>:
      86:	3e 67       	ori	r19, 0x7E	; 126
      88:	33 32       	cpi	r19, 0x23	; 35
      8a:	3e 3e       	cpi	r19, 0xEE	; 238
      8c:	63 33       	cpi	r22, 0x33	; 51
      8e:	32 00       	.word	0x0032	; ????

00000090 <__c.2341>:
      90:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

0000009a <__c.2394>:
      9a:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

000000a4 <__c.2209>:
      a4:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

000000ae <__ctors_end>:
      ae:	b5 15       	cp	r27, r5

000000b0 <__dtors_end>:
      b0:	11 24       	eor	r1, r1
      b2:	1f be       	out	0x3f, r1	; 63
      b4:	cf ef       	ldi	r28, 0xFF	; 255
      b6:	d8 e0       	ldi	r29, 0x08	; 8
      b8:	de bf       	out	0x3e, r29	; 62
      ba:	cd bf       	out	0x3d, r28	; 61

000000bc <__do_copy_data>:
      bc:	11 e0       	ldi	r17, 0x01	; 1
      be:	a0 e0       	ldi	r26, 0x00	; 0
      c0:	b1 e0       	ldi	r27, 0x01	; 1
      c2:	ee e5       	ldi	r30, 0x5E	; 94
      c4:	f9 e3       	ldi	r31, 0x39	; 57
      c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x10>
      c8:	05 90       	lpm	r0, Z+
      ca:	0d 92       	st	X+, r0
      cc:	a2 36       	cpi	r26, 0x62	; 98
      ce:	b1 07       	cpc	r27, r17
      d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0xc>

000000d2 <__do_clear_bss>:
      d2:	22 e0       	ldi	r18, 0x02	; 2
      d4:	a2 e6       	ldi	r26, 0x62	; 98
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
      da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
      dc:	af 33       	cpi	r26, 0x3F	; 63
      de:	b2 07       	cpc	r27, r18
      e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
      e2:	0e 94 ba 04 	call	0x974	; 0x974 <main>
      e6:	0c 94 a2 1c 	jmp	0x3944	; 0x3944 <__do_global_dtors>

000000ea <__bad_interrupt>:
      ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ee <swapOne>:
	temp = *secondYValue;                                                                               //Verwissel Y-coordinaten
	*secondYValue = *firstYValue;
	*firstYValue = temp;
}

void swapOne(float *firstValue, float *secondValue) {
      ee:	cf 92       	push	r12
      f0:	df 92       	push	r13
      f2:	ef 92       	push	r14
      f4:	ff 92       	push	r15
      f6:	0f 93       	push	r16
      f8:	1f 93       	push	r17
	float temp;

	temp = *secondValue;
      fa:	fb 01       	movw	r30, r22
      fc:	00 81       	ld	r16, Z
      fe:	11 81       	ldd	r17, Z+1	; 0x01
     100:	22 81       	ldd	r18, Z+2	; 0x02
     102:	33 81       	ldd	r19, Z+3	; 0x03
	*secondValue = *firstValue;
     104:	fc 01       	movw	r30, r24
     106:	c0 80       	ld	r12, Z
     108:	d1 80       	ldd	r13, Z+1	; 0x01
     10a:	e2 80       	ldd	r14, Z+2	; 0x02
     10c:	f3 80       	ldd	r15, Z+3	; 0x03
     10e:	fb 01       	movw	r30, r22
     110:	c0 82       	st	Z, r12
     112:	d1 82       	std	Z+1, r13	; 0x01
     114:	e2 82       	std	Z+2, r14	; 0x02
     116:	f3 82       	std	Z+3, r15	; 0x03
	*firstValue = temp;
     118:	fc 01       	movw	r30, r24
     11a:	00 83       	st	Z, r16
     11c:	11 83       	std	Z+1, r17	; 0x01
     11e:	22 83       	std	Z+2, r18	; 0x02
     120:	33 83       	std	Z+3, r19	; 0x03
}
     122:	1f 91       	pop	r17
     124:	0f 91       	pop	r16
     126:	ff 90       	pop	r15
     128:	ef 90       	pop	r14
     12a:	df 90       	pop	r13
     12c:	cf 90       	pop	r12
     12e:	08 95       	ret

00000130 <sortOrder>:

void sortOrder(int X[], int Y[]) {
     130:	2f 92       	push	r2
     132:	3f 92       	push	r3
     134:	4f 92       	push	r4
     136:	5f 92       	push	r5
     138:	6f 92       	push	r6
     13a:	7f 92       	push	r7
     13c:	8f 92       	push	r8
     13e:	9f 92       	push	r9
     140:	af 92       	push	r10
     142:	bf 92       	push	r11
     144:	cf 92       	push	r12
     146:	df 92       	push	r13
     148:	ef 92       	push	r14
     14a:	ff 92       	push	r15
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	cd b7       	in	r28, 0x3d	; 61
     156:	de b7       	in	r29, 0x3e	; 62
     158:	a5 97       	sbiw	r28, 0x25	; 37
     15a:	0f b6       	in	r0, 0x3f	; 63
     15c:	f8 94       	cli
     15e:	de bf       	out	0x3e, r29	; 62
     160:	0f be       	out	0x3f, r0	; 63
     162:	cd bf       	out	0x3d, r28	; 61
     164:	9b a3       	std	Y+35, r25	; 0x23
     166:	8a a3       	std	Y+34, r24	; 0x22
     168:	6c a3       	std	Y+36, r22	; 0x24
     16a:	7d a3       	std	Y+37, r23	; 0x25
     16c:	06 96       	adiw	r24, 0x06	; 6
     16e:	98 a3       	std	Y+32, r25	; 0x20
     170:	8f 8f       	std	Y+31, r24	; 0x1f
     172:	b6 c0       	rjmp	.+364    	; 0x2e0 <sortOrder+0x1b0>
     174:	7e 8e       	std	Y+30, r7	; 0x1e
     176:	6d 8e       	std	Y+29, r6	; 0x1d

	while (check != 1) {
		orderCorrect = 1;

		for (int i = 0; i < (sizeOfOrder - 1); i++) {
			Distance[i] = sqrt((pow(X[i], 2)) + (pow(Y[i], 2)));      //Pythagoras
     178:	f3 01       	movw	r30, r6
     17a:	01 90       	ld	r0, Z+
     17c:	f0 81       	ld	r31, Z
     17e:	e0 2d       	mov	r30, r0
     180:	fa 8f       	std	Y+26, r31	; 0x1a
     182:	e9 8f       	std	Y+25, r30	; 0x19
     184:	bf 01       	movw	r22, r30
     186:	ff 0f       	add	r31, r31
     188:	88 0b       	sbc	r24, r24
     18a:	99 0b       	sbc	r25, r25
     18c:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__floatsisf>
     190:	6b 01       	movw	r12, r22
     192:	7c 01       	movw	r14, r24
     194:	3c 8e       	std	Y+28, r3	; 0x1c
     196:	2b 8e       	std	Y+27, r2	; 0x1b
     198:	f1 01       	movw	r30, r2
     19a:	00 81       	ld	r16, Z
     19c:	11 81       	ldd	r17, Z+1	; 0x01
     19e:	b8 01       	movw	r22, r16
     1a0:	01 2e       	mov	r0, r17
     1a2:	00 0c       	add	r0, r0
     1a4:	88 0b       	sbc	r24, r24
     1a6:	99 0b       	sbc	r25, r25
     1a8:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__floatsisf>
     1ac:	4b 01       	movw	r8, r22
     1ae:	5c 01       	movw	r10, r24
     1b0:	9b 01       	movw	r18, r22
     1b2:	ac 01       	movw	r20, r24
     1b4:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__mulsf3>
     1b8:	69 8b       	std	Y+17, r22	; 0x11
     1ba:	7a 8b       	std	Y+18, r23	; 0x12
     1bc:	8b 8b       	std	Y+19, r24	; 0x13
     1be:	9c 8b       	std	Y+20, r25	; 0x14
     1c0:	a5 01       	movw	r20, r10
     1c2:	94 01       	movw	r18, r8
     1c4:	c5 01       	movw	r24, r10
     1c6:	b4 01       	movw	r22, r8
     1c8:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__mulsf3>
     1cc:	4b 01       	movw	r8, r22
     1ce:	5c 01       	movw	r10, r24
     1d0:	a7 01       	movw	r20, r14
     1d2:	96 01       	movw	r18, r12
     1d4:	c7 01       	movw	r24, r14
     1d6:	b6 01       	movw	r22, r12
     1d8:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__mulsf3>
     1dc:	9b 01       	movw	r18, r22
     1de:	ac 01       	movw	r20, r24
     1e0:	c5 01       	movw	r24, r10
     1e2:	b4 01       	movw	r22, r8
     1e4:	0e 94 07 0b 	call	0x160e	; 0x160e <__addsf3>
     1e8:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <sqrt>
     1ec:	6b 01       	movw	r12, r22
     1ee:	7c 01       	movw	r14, r24
     1f0:	f2 01       	movw	r30, r4
     1f2:	61 93       	st	Z+, r22
     1f4:	71 93       	st	Z+, r23
     1f6:	81 93       	st	Z+, r24
     1f8:	91 93       	st	Z+, r25
     1fa:	2f 01       	movw	r4, r30
     1fc:	e9 8b       	std	Y+17, r30	; 0x11
     1fe:	59 a2       	std	Y+33, r5	; 0x21
			firstDistanceValue =  Distance[i];
			secondDistanceValue =  Distance[i + 1];
     200:	80 80       	ld	r8, Z
     202:	91 80       	ldd	r9, Z+1	; 0x01
     204:	a2 80       	ldd	r10, Z+2	; 0x02
     206:	b3 80       	ldd	r11, Z+3	; 0x03

			if ( Distance[i] >  Distance[i + 1]) {
     208:	a5 01       	movw	r20, r10
     20a:	94 01       	movw	r18, r8
     20c:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <__gesf2>
     210:	18 16       	cp	r1, r24
     212:	d4 f4       	brge	.+52     	; 0x248 <sortOrder+0x118>
				swapOne(& Distance[i], & Distance[i + 1]);
     214:	b2 01       	movw	r22, r4
     216:	8d 89       	ldd	r24, Y+21	; 0x15
     218:	9e 89       	ldd	r25, Y+22	; 0x16
     21a:	0e 94 77 00 	call	0xee	; 0xee <swapOne>


void swapTwo( int *firstXValue, int *secondXValue, int *firstYValue, int *secondYValue){
	int temp;

	temp = *secondXValue;                                                                               //Verwissel X-coordinaten
     21e:	f3 01       	movw	r30, r6
     220:	82 81       	ldd	r24, Z+2	; 0x02
     222:	93 81       	ldd	r25, Z+3	; 0x03
	*secondXValue = *firstXValue;
     224:	20 81       	ld	r18, Z
     226:	31 81       	ldd	r19, Z+1	; 0x01
     228:	33 83       	std	Z+3, r19	; 0x03
     22a:	22 83       	std	Z+2, r18	; 0x02
	*firstXValue = temp;
     22c:	91 83       	std	Z+1, r25	; 0x01
     22e:	80 83       	st	Z, r24

	temp = *secondYValue;                                                                               //Verwissel Y-coordinaten
     230:	f1 01       	movw	r30, r2
     232:	82 81       	ldd	r24, Z+2	; 0x02
     234:	93 81       	ldd	r25, Z+3	; 0x03
	*secondYValue = *firstYValue;
     236:	20 81       	ld	r18, Z
     238:	31 81       	ldd	r19, Z+1	; 0x01
     23a:	33 83       	std	Z+3, r19	; 0x03
     23c:	22 83       	std	Z+2, r18	; 0x02
	*firstYValue = temp;
     23e:	91 83       	std	Z+1, r25	; 0x01
     240:	80 83       	st	Z, r24
			secondDistanceValue =  Distance[i + 1];

			if ( Distance[i] >  Distance[i + 1]) {
				swapOne(& Distance[i], & Distance[i + 1]);
				swapTwo(&X[i], &X[i + 1], &Y[i], &Y[i + 1]);
				orderCorrect = 0;
     242:	1f 8a       	std	Y+23, r1	; 0x17
     244:	18 8e       	std	Y+24, r1	; 0x18
     246:	36 c0       	rjmp	.+108    	; 0x2b4 <sortOrder+0x184>
				} else if ((firstDistanceValue == secondDistanceValue) && (Y[i] == Y[i + 1])) {
     248:	c7 01       	movw	r24, r14
     24a:	b6 01       	movw	r22, r12
     24c:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__fixsfsi>
     250:	7b 01       	movw	r14, r22
     252:	c5 01       	movw	r24, r10
     254:	b4 01       	movw	r22, r8
     256:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__fixsfsi>
     25a:	e6 16       	cp	r14, r22
     25c:	f7 06       	cpc	r15, r23
     25e:	51 f5       	brne	.+84     	; 0x2b4 <sortOrder+0x184>
     260:	eb 8d       	ldd	r30, Y+27	; 0x1b
     262:	fc 8d       	ldd	r31, Y+28	; 0x1c
     264:	82 81       	ldd	r24, Z+2	; 0x02
     266:	93 81       	ldd	r25, Z+3	; 0x03
     268:	08 17       	cp	r16, r24
     26a:	19 07       	cpc	r17, r25
     26c:	19 f5       	brne	.+70     	; 0x2b4 <sortOrder+0x184>
				if (X[i] < X[i + 1]) {
     26e:	ed 8d       	ldd	r30, Y+29	; 0x1d
     270:	fe 8d       	ldd	r31, Y+30	; 0x1e
     272:	82 81       	ldd	r24, Z+2	; 0x02
     274:	93 81       	ldd	r25, Z+3	; 0x03
     276:	29 8d       	ldd	r18, Y+25	; 0x19
     278:	3a 8d       	ldd	r19, Y+26	; 0x1a
     27a:	28 17       	cp	r18, r24
     27c:	39 07       	cpc	r19, r25
     27e:	d4 f4       	brge	.+52     	; 0x2b4 <sortOrder+0x184>
					swapOne(& Distance[i], & Distance[i + 1]);
     280:	69 89       	ldd	r22, Y+17	; 0x11
     282:	79 a1       	ldd	r23, Y+33	; 0x21
     284:	8d 89       	ldd	r24, Y+21	; 0x15
     286:	9e 89       	ldd	r25, Y+22	; 0x16
     288:	0e 94 77 00 	call	0xee	; 0xee <swapOne>


void swapTwo( int *firstXValue, int *secondXValue, int *firstYValue, int *secondYValue){
	int temp;

	temp = *secondXValue;                                                                               //Verwissel X-coordinaten
     28c:	ed 8d       	ldd	r30, Y+29	; 0x1d
     28e:	fe 8d       	ldd	r31, Y+30	; 0x1e
     290:	82 81       	ldd	r24, Z+2	; 0x02
     292:	93 81       	ldd	r25, Z+3	; 0x03
	*secondXValue = *firstXValue;
     294:	20 81       	ld	r18, Z
     296:	31 81       	ldd	r19, Z+1	; 0x01
     298:	33 83       	std	Z+3, r19	; 0x03
     29a:	22 83       	std	Z+2, r18	; 0x02
	*firstXValue = temp;
     29c:	91 83       	std	Z+1, r25	; 0x01
     29e:	80 83       	st	Z, r24

	temp = *secondYValue;                                                                               //Verwissel Y-coordinaten
     2a0:	eb 8d       	ldd	r30, Y+27	; 0x1b
     2a2:	fc 8d       	ldd	r31, Y+28	; 0x1c
     2a4:	82 81       	ldd	r24, Z+2	; 0x02
     2a6:	93 81       	ldd	r25, Z+3	; 0x03
	*secondYValue = *firstYValue;
     2a8:	20 81       	ld	r18, Z
     2aa:	31 81       	ldd	r19, Z+1	; 0x01
     2ac:	33 83       	std	Z+3, r19	; 0x03
     2ae:	22 83       	std	Z+2, r18	; 0x02
	*firstYValue = temp;
     2b0:	91 83       	std	Z+1, r25	; 0x01
     2b2:	80 83       	st	Z, r24
     2b4:	f2 e0       	ldi	r31, 0x02	; 2
     2b6:	6f 0e       	add	r6, r31
     2b8:	71 1c       	adc	r7, r1
     2ba:	22 e0       	ldi	r18, 0x02	; 2
     2bc:	22 0e       	add	r2, r18
     2be:	31 1c       	adc	r3, r1
     2c0:	8d 89       	ldd	r24, Y+21	; 0x15
     2c2:	9e 89       	ldd	r25, Y+22	; 0x16
     2c4:	04 96       	adiw	r24, 0x04	; 4
     2c6:	9e 8b       	std	Y+22, r25	; 0x16
     2c8:	8d 8b       	std	Y+21, r24	; 0x15
	float Distance[sizeOfOrder];

	while (check != 1) {
		orderCorrect = 1;

		for (int i = 0; i < (sizeOfOrder - 1); i++) {
     2ca:	ef 8d       	ldd	r30, Y+31	; 0x1f
     2cc:	f8 a1       	ldd	r31, Y+32	; 0x20
     2ce:	6e 16       	cp	r6, r30
     2d0:	7f 06       	cpc	r7, r31
     2d2:	09 f0       	breq	.+2      	; 0x2d6 <sortOrder+0x1a6>
     2d4:	4f cf       	rjmp	.-354    	; 0x174 <sortOrder+0x44>
					swapOne(& Distance[i], & Distance[i + 1]);
					swapTwo(&X[i], &X[i + 1], &Y[i], &Y[i + 1]);
				}
			}
		}
		if (orderCorrect == 1) {
     2d6:	2f 89       	ldd	r18, Y+23	; 0x17
     2d8:	38 8d       	ldd	r19, Y+24	; 0x18
     2da:	21 30       	cpi	r18, 0x01	; 1
     2dc:	31 05       	cpc	r19, r1
     2de:	69 f0       	breq	.+26     	; 0x2fa <sortOrder+0x1ca>
     2e0:	6a a0       	ldd	r6, Y+34	; 0x22
     2e2:	7b a0       	ldd	r7, Y+35	; 0x23
     2e4:	2c a0       	ldd	r2, Y+36	; 0x24
     2e6:	3d a0       	ldd	r3, Y+37	; 0x25
     2e8:	ce 01       	movw	r24, r28
     2ea:	01 96       	adiw	r24, 0x01	; 1
     2ec:	2c 01       	movw	r4, r24
	temp = *secondValue;
	*secondValue = *firstValue;
	*firstValue = temp;
}

void sortOrder(int X[], int Y[]) {
     2ee:	9e 8b       	std	Y+22, r25	; 0x16
     2f0:	8d 8b       	std	Y+21, r24	; 0x15
     2f2:	91 e0       	ldi	r25, 0x01	; 1
     2f4:	9f 8b       	std	Y+23, r25	; 0x17
     2f6:	18 8e       	std	Y+24, r1	; 0x18
     2f8:	3d cf       	rjmp	.-390    	; 0x174 <sortOrder+0x44>
		}
		if (orderCorrect == 1) {
			check = 1;
		}
	}
}
     2fa:	a5 96       	adiw	r28, 0x25	; 37
     2fc:	0f b6       	in	r0, 0x3f	; 63
     2fe:	f8 94       	cli
     300:	de bf       	out	0x3e, r29	; 62
     302:	0f be       	out	0x3f, r0	; 63
     304:	cd bf       	out	0x3d, r28	; 61
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	1f 91       	pop	r17
     30c:	0f 91       	pop	r16
     30e:	ff 90       	pop	r15
     310:	ef 90       	pop	r14
     312:	df 90       	pop	r13
     314:	cf 90       	pop	r12
     316:	bf 90       	pop	r11
     318:	af 90       	pop	r10
     31a:	9f 90       	pop	r9
     31c:	8f 90       	pop	r8
     31e:	7f 90       	pop	r7
     320:	6f 90       	pop	r6
     322:	5f 90       	pop	r5
     324:	4f 90       	pop	r4
     326:	3f 90       	pop	r3
     328:	2f 90       	pop	r2
     32a:	08 95       	ret

0000032c <readGrid>:
	}
	driveRoute(route, 1, 1, amountOfIntersects);    //Rij terug naar begipunt
	play_from_program_space(PSTR(">g32>>c32"));
}

int readGrid(int routes[4][20]){
     32c:	2f 92       	push	r2
     32e:	3f 92       	push	r3
     330:	4f 92       	push	r4
     332:	5f 92       	push	r5
     334:	6f 92       	push	r6
     336:	7f 92       	push	r7
     338:	8f 92       	push	r8
     33a:	9f 92       	push	r9
     33c:	af 92       	push	r10
     33e:	bf 92       	push	r11
     340:	cf 92       	push	r12
     342:	df 92       	push	r13
     344:	ef 92       	push	r14
     346:	ff 92       	push	r15
     348:	0f 93       	push	r16
     34a:	1f 93       	push	r17
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	8c 01       	movw	r16, r24
	int i = 1, grid = 0, numOfIntersects, crossing = 0, routeNum = 1;
	int resultTemp;
	char test;
	routes[1][0] = 5;                    //Markeert begin van de route
     352:	85 e0       	ldi	r24, 0x05	; 5
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	d8 01       	movw	r26, r16
     358:	99 96       	adiw	r26, 0x29	; 41
     35a:	9c 93       	st	X, r25
     35c:	8e 93       	st	-X, r24
     35e:	98 97       	sbiw	r26, 0x28	; 40
	driveRoute(route, 1, 1, amountOfIntersects);    //Rij terug naar begipunt
	play_from_program_space(PSTR(">g32>>c32"));
}

int readGrid(int routes[4][20]){
	int i = 1, grid = 0, numOfIntersects, crossing = 0, routeNum = 1;
     360:	c1 e0       	ldi	r28, 0x01	; 1
     362:	d0 e0       	ldi	r29, 0x00	; 0
			case 4:                 //R
			routes[0][i] = 4;
			motorControl(80, 'F', 0.89);
			break;
			case 5:                //L
			routes[0][i] = 5;
     364:	0f 2e       	mov	r0, r31
     366:	f5 e0       	ldi	r31, 0x05	; 5
     368:	8f 2e       	mov	r8, r31
     36a:	91 2c       	mov	r9, r1
     36c:	f0 2d       	mov	r31, r0
			motorControl(60, 'L', 0.30);
			i++;
			routes[0][i] = 6;
			break;
			case 7:              //Doodlopende weg
			routes[0][i] = 7;
     36e:	0f 2e       	mov	r0, r31
     370:	f7 e0       	ldi	r31, 0x07	; 7
     372:	af 2e       	mov	r10, r31
     374:	b1 2c       	mov	r11, r1
     376:	f0 2d       	mov	r31, r0
			motorControl(80, 'F', 0.89);
			break;
			case 6:               //Het is een kruispunt
			motorControl(60, 'L', 0.30);
			i++;
			routes[0][i] = 6;
     378:	0f 2e       	mov	r0, r31
     37a:	f6 e0       	ldi	r31, 0x06	; 6
     37c:	cf 2e       	mov	r12, r31
     37e:	d1 2c       	mov	r13, r1
     380:	f0 2d       	mov	r31, r0
		test = resultTemp+'0';
		print_character(test);
		switch(resultTemp){
			case 3:                  //Het is een T-splitsing    L R
			motorControl(60, 'L', 0.30);
			routes[0][i] = 3;
     382:	0f 2e       	mov	r0, r31
     384:	f3 e0       	ldi	r31, 0x03	; 3
     386:	6f 2e       	mov	r6, r31
     388:	71 2c       	mov	r7, r1
     38a:	f0 2d       	mov	r31, r0
			i++;
			break;
			case 4:                 //R
			routes[0][i] = 4;
     38c:	68 94       	set
     38e:	44 24       	eor	r4, r4
     390:	42 f8       	bld	r4, 2
     392:	51 2c       	mov	r5, r1
	int i = 1, grid = 0, numOfIntersects, crossing = 0, routeNum = 1;
	int resultTemp;
	char test;
	routes[1][0] = 5;                    //Markeert begin van de route
	do{
		if(checkAfslag() == 0){
     394:	0e 94 07 0a 	call	0x140e	; 0x140e <checkAfslag>
     398:	89 2b       	or	r24, r25
     39a:	11 f4       	brne	.+4      	; 0x3a0 <readGrid+0x74>
			followLine();
     39c:	0e 94 c2 09 	call	0x1384	; 0x1384 <followLine>
		}
		resultTemp = checkAfslag();
     3a0:	0e 94 07 0a 	call	0x140e	; 0x140e <checkAfslag>
     3a4:	7c 01       	movw	r14, r24
		test = resultTemp+'0';
		print_character(test);
     3a6:	80 e3       	ldi	r24, 0x30	; 48
     3a8:	8e 0d       	add	r24, r14
     3aa:	0e 94 35 12 	call	0x246a	; 0x246a <print_character>
		switch(resultTemp){
     3ae:	b5 e0       	ldi	r27, 0x05	; 5
     3b0:	eb 16       	cp	r14, r27
     3b2:	f1 04       	cpc	r15, r1
     3b4:	c9 f1       	breq	.+114    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     3b6:	4c f4       	brge	.+18     	; 0x3ca <readGrid+0x9e>
     3b8:	f3 e0       	ldi	r31, 0x03	; 3
     3ba:	ef 16       	cp	r14, r31
     3bc:	f1 04       	cpc	r15, r1
     3be:	89 f0       	breq	.+34     	; 0x3e2 <readGrid+0xb6>
     3c0:	54 e0       	ldi	r21, 0x04	; 4
     3c2:	e5 16       	cp	r14, r21
     3c4:	f1 04       	cpc	r15, r1
     3c6:	f9 f0       	breq	.+62     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3c8:	e5 cf       	rjmp	.-54     	; 0x394 <readGrid+0x68>
     3ca:	87 e0       	ldi	r24, 0x07	; 7
     3cc:	e8 16       	cp	r14, r24
     3ce:	f1 04       	cpc	r15, r1
     3d0:	09 f4       	brne	.+2      	; 0x3d4 <readGrid+0xa8>
     3d2:	4d c0       	rjmp	.+154    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     3d4:	d4 f1       	brlt	.+116    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     3d6:	b8 e0       	ldi	r27, 0x08	; 8
     3d8:	eb 16       	cp	r14, r27
     3da:	f1 04       	cpc	r15, r1
     3dc:	09 f4       	brne	.+2      	; 0x3e0 <readGrid+0xb4>
     3de:	61 c0       	rjmp	.+194    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     3e0:	d9 cf       	rjmp	.-78     	; 0x394 <readGrid+0x68>
			case 3:                  //Het is een T-splitsing    L R
			motorControl(60, 'L', 0.30);
     3e2:	2a e9       	ldi	r18, 0x9A	; 154
     3e4:	39 e9       	ldi	r19, 0x99	; 153
     3e6:	49 e9       	ldi	r20, 0x99	; 153
     3e8:	5e e3       	ldi	r21, 0x3E	; 62
     3ea:	6c e4       	ldi	r22, 0x4C	; 76
     3ec:	8c e3       	ldi	r24, 0x3C	; 60
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <motorControl>
			routes[0][i] = 3;
     3f4:	fe 01       	movw	r30, r28
     3f6:	ee 0f       	add	r30, r30
     3f8:	ff 1f       	adc	r31, r31
     3fa:	e0 0f       	add	r30, r16
     3fc:	f1 1f       	adc	r31, r17
     3fe:	71 82       	std	Z+1, r7	; 0x01
     400:	60 82       	st	Z, r6
			i++;
     402:	21 96       	adiw	r28, 0x01	; 1
			break;
     404:	c7 cf       	rjmp	.-114    	; 0x394 <readGrid+0x68>
			case 4:                 //R
			routes[0][i] = 4;
     406:	fe 01       	movw	r30, r28
     408:	ee 0f       	add	r30, r30
     40a:	ff 1f       	adc	r31, r31
     40c:	e0 0f       	add	r30, r16
     40e:	f1 1f       	adc	r31, r17
     410:	51 82       	std	Z+1, r5	; 0x01
     412:	40 82       	st	Z, r4
			motorControl(80, 'F', 0.89);
     414:	2a e0       	ldi	r18, 0x0A	; 10
     416:	37 ed       	ldi	r19, 0xD7	; 215
     418:	43 e6       	ldi	r20, 0x63	; 99
     41a:	5f e3       	ldi	r21, 0x3F	; 63
     41c:	66 e4       	ldi	r22, 0x46	; 70
     41e:	80 e5       	ldi	r24, 0x50	; 80
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <motorControl>
			break;
     426:	b6 cf       	rjmp	.-148    	; 0x394 <readGrid+0x68>
			case 5:                //L
			routes[0][i] = 5;
     428:	fe 01       	movw	r30, r28
     42a:	ee 0f       	add	r30, r30
     42c:	ff 1f       	adc	r31, r31
     42e:	e0 0f       	add	r30, r16
     430:	f1 1f       	adc	r31, r17
     432:	91 82       	std	Z+1, r9	; 0x01
     434:	80 82       	st	Z, r8
			motorControl(80, 'F', 0.89);
     436:	2a e0       	ldi	r18, 0x0A	; 10
     438:	37 ed       	ldi	r19, 0xD7	; 215
     43a:	43 e6       	ldi	r20, 0x63	; 99
     43c:	5f e3       	ldi	r21, 0x3F	; 63
     43e:	66 e4       	ldi	r22, 0x46	; 70
     440:	80 e5       	ldi	r24, 0x50	; 80
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <motorControl>
			break;
     448:	a5 cf       	rjmp	.-182    	; 0x394 <readGrid+0x68>
			case 6:               //Het is een kruispunt
			motorControl(60, 'L', 0.30);
     44a:	2a e9       	ldi	r18, 0x9A	; 154
     44c:	39 e9       	ldi	r19, 0x99	; 153
     44e:	49 e9       	ldi	r20, 0x99	; 153
     450:	5e e3       	ldi	r21, 0x3E	; 62
     452:	6c e4       	ldi	r22, 0x4C	; 76
     454:	8c e3       	ldi	r24, 0x3C	; 60
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <motorControl>
			i++;
     45c:	21 96       	adiw	r28, 0x01	; 1
			routes[0][i] = 6;
     45e:	fe 01       	movw	r30, r28
     460:	ee 0f       	add	r30, r30
     462:	ff 1f       	adc	r31, r31
     464:	e0 0f       	add	r30, r16
     466:	f1 1f       	adc	r31, r17
     468:	d1 82       	std	Z+1, r13	; 0x01
     46a:	c0 82       	st	Z, r12
			break;
     46c:	93 cf       	rjmp	.-218    	; 0x394 <readGrid+0x68>
			case 7:              //Doodlopende weg
			routes[0][i] = 7;
     46e:	fe 01       	movw	r30, r28
     470:	ee 0f       	add	r30, r30
     472:	ff 1f       	adc	r31, r31
     474:	e0 0f       	add	r30, r16
     476:	f1 1f       	adc	r31, r17
     478:	b1 82       	std	Z+1, r11	; 0x01
     47a:	a0 82       	st	Z, r10
			motorControl(60, 'R', 0.30);
     47c:	2a e9       	ldi	r18, 0x9A	; 154
     47e:	39 e9       	ldi	r19, 0x99	; 153
     480:	49 e9       	ldi	r20, 0x99	; 153
     482:	5e e3       	ldi	r21, 0x3E	; 62
     484:	62 e5       	ldi	r22, 0x52	; 82
     486:	8c e3       	ldi	r24, 0x3C	; 60
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <motorControl>
			motorControl(0, 'R', 0.30);
     48e:	2a e9       	ldi	r18, 0x9A	; 154
     490:	39 e9       	ldi	r19, 0x99	; 153
     492:	49 e9       	ldi	r20, 0x99	; 153
     494:	5e e3       	ldi	r21, 0x3E	; 62
     496:	62 e5       	ldi	r22, 0x52	; 82
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <motorControl>
			break;
     4a0:	79 cf       	rjmp	.-270    	; 0x394 <readGrid+0x68>
			case 8:
			grid = 1;
			routes[0][i] = 8; //Markeert einde van de route
     4a2:	fe 01       	movw	r30, r28
     4a4:	ee 0f       	add	r30, r30
     4a6:	ff 1f       	adc	r31, r31
     4a8:	e0 0f       	add	r30, r16
     4aa:	f1 1f       	adc	r31, r17
     4ac:	88 e0       	ldi	r24, 0x08	; 8
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	91 83       	std	Z+1, r25	; 0x01
     4b2:	80 83       	st	Z, r24
		}
	}while(grid == 0);
	numOfIntersects = i;
	
	for(i = 1; i <= numOfIntersects; i++){   //Writing route towards X
     4b4:	1c 16       	cp	r1, r28
     4b6:	1d 06       	cpc	r1, r29
     4b8:	0c f0       	brlt	.+2      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     4ba:	f1 c0       	rjmp	.+482    	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
     4bc:	f8 01       	movw	r30, r16
     4be:	32 96       	adiw	r30, 0x02	; 2
     4c0:	21 e0       	ldi	r18, 0x01	; 1
     4c2:	30 e0       	ldi	r19, 0x00	; 0
     4c4:	21 2c       	mov	r2, r1
     4c6:	31 2c       	mov	r3, r1
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	90 e0       	ldi	r25, 0x00	; 0
			case 5:
			if(routes[0][i + 1] == 7){
				routes[routeNum][i] = 1;
			}
			else if(routes[0][i] != 7){
				routes[routeNum][i] = 2;
     4cc:	48 e2       	ldi	r20, 0x28	; 40
     4ce:	68 94       	set
     4d0:	ee 24       	eor	r14, r14
     4d2:	e1 f8       	bld	r14, 1
     4d4:	f1 2c       	mov	r15, r1
				routes[routeNum][i] = 3;
			}
			break;
			case 5:
			if(routes[0][i + 1] == 7){
				routes[routeNum][i] = 1;
     4d6:	66 24       	eor	r6, r6
     4d8:	63 94       	inc	r6
     4da:	71 2c       	mov	r7, r1
				routes[routeNum][i] = 2;
			}
			break;
			case 6:
			crossing++;
			routes[routeNum][i] = 6;
     4dc:	0f 2e       	mov	r0, r31
     4de:	f6 e0       	ldi	r31, 0x06	; 6
     4e0:	8f 2e       	mov	r8, r31
     4e2:	91 2c       	mov	r9, r1
     4e4:	f0 2d       	mov	r31, r0
			if((crossing == 2) && (routes[routeNum][i - 1] == 6)){
				crossing = 0;
				routes[1][i - 1] = 3;
     4e6:	0f 2e       	mov	r0, r31
     4e8:	f3 e0       	ldi	r31, 0x03	; 3
     4ea:	4f 2e       	mov	r4, r31
     4ec:	51 2c       	mov	r5, r1
     4ee:	f0 2d       	mov	r31, r0
			}
			break;
			case 8:                                                     //case 7 isn't part of a route
			routes[routeNum][i] = 8;                                    //Marks end of route
     4f0:	68 94       	set
     4f2:	aa 24       	eor	r10, r10
     4f4:	a3 f8       	bld	r10, 3
     4f6:	b1 2c       	mov	r11, r1
		}
	}while(grid == 0);
	numOfIntersects = i;
	
	for(i = 1; i <= numOfIntersects; i++){   //Writing route towards X
		switch(routes[0][i]){
     4f8:	61 91       	ld	r22, Z+
     4fa:	71 91       	ld	r23, Z+
     4fc:	65 30       	cpi	r22, 0x05	; 5
     4fe:	71 05       	cpc	r23, r1
     500:	09 f4       	brne	.+2      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
     502:	5b c0       	rjmp	.+182    	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
     504:	3c f4       	brge	.+14     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
     506:	63 30       	cpi	r22, 0x03	; 3
     508:	71 05       	cpc	r23, r1
     50a:	69 f0       	breq	.+26     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
     50c:	64 30       	cpi	r22, 0x04	; 4
     50e:	71 05       	cpc	r23, r1
     510:	79 f1       	breq	.+94     	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
     512:	c0 c0       	rjmp	.+384    	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
     514:	66 30       	cpi	r22, 0x06	; 6
     516:	71 05       	cpc	r23, r1
     518:	09 f4       	brne	.+2      	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
     51a:	74 c0       	rjmp	.+232    	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
     51c:	68 30       	cpi	r22, 0x08	; 8
     51e:	71 05       	cpc	r23, r1
     520:	09 f4       	brne	.+2      	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
     522:	99 c0       	rjmp	.+306    	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
     524:	b7 c0       	rjmp	.+366    	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
			case 3:
			if(routes[0][i + 1] == 7){
     526:	60 81       	ld	r22, Z
     528:	71 81       	ldd	r23, Z+1	; 0x01
     52a:	67 30       	cpi	r22, 0x07	; 7
     52c:	71 05       	cpc	r23, r1
     52e:	81 f4       	brne	.+32     	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
				routes[routeNum][i] = 1;
     530:	42 9f       	mul	r20, r18
     532:	60 01       	movw	r12, r0
     534:	43 9f       	mul	r20, r19
     536:	d0 0c       	add	r13, r0
     538:	11 24       	eor	r1, r1
     53a:	c0 0e       	add	r12, r16
     53c:	d1 1e       	adc	r13, r17
     53e:	bc 01       	movw	r22, r24
     540:	66 0f       	add	r22, r22
     542:	77 1f       	adc	r23, r23
     544:	6c 0d       	add	r22, r12
     546:	7d 1d       	adc	r23, r13
     548:	db 01       	movw	r26, r22
     54a:	6d 92       	st	X+, r6
     54c:	7c 92       	st	X, r7
     54e:	a2 c0       	rjmp	.+324    	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
			}
			else if(routes[0][i + 1] != 7){
				routes[routeNum][i] = 2;
     550:	42 9f       	mul	r20, r18
     552:	60 01       	movw	r12, r0
     554:	43 9f       	mul	r20, r19
     556:	d0 0c       	add	r13, r0
     558:	11 24       	eor	r1, r1
     55a:	c0 0e       	add	r12, r16
     55c:	d1 1e       	adc	r13, r17
     55e:	bc 01       	movw	r22, r24
     560:	66 0f       	add	r22, r22
     562:	77 1f       	adc	r23, r23
     564:	6c 0d       	add	r22, r12
     566:	7d 1d       	adc	r23, r13
     568:	db 01       	movw	r26, r22
     56a:	ed 92       	st	X+, r14
     56c:	fc 92       	st	X, r15
     56e:	92 c0       	rjmp	.+292    	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
			}
			break;
			case 4:
			if(routes[0][i + 1] == 7){
     570:	60 81       	ld	r22, Z
     572:	71 81       	ldd	r23, Z+1	; 0x01
     574:	67 30       	cpi	r22, 0x07	; 7
     576:	71 05       	cpc	r23, r1
     578:	81 f4       	brne	.+32     	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
				routes[routeNum][i] = 1;
     57a:	42 9f       	mul	r20, r18
     57c:	60 01       	movw	r12, r0
     57e:	43 9f       	mul	r20, r19
     580:	d0 0c       	add	r13, r0
     582:	11 24       	eor	r1, r1
     584:	c0 0e       	add	r12, r16
     586:	d1 1e       	adc	r13, r17
     588:	bc 01       	movw	r22, r24
     58a:	66 0f       	add	r22, r22
     58c:	77 1f       	adc	r23, r23
     58e:	6c 0d       	add	r22, r12
     590:	7d 1d       	adc	r23, r13
     592:	db 01       	movw	r26, r22
     594:	6d 92       	st	X+, r6
     596:	7c 92       	st	X, r7
     598:	7d c0       	rjmp	.+250    	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
			}
			else if(routes[0][i] != 7){
				routes[routeNum][i] = 3;
     59a:	42 9f       	mul	r20, r18
     59c:	60 01       	movw	r12, r0
     59e:	43 9f       	mul	r20, r19
     5a0:	d0 0c       	add	r13, r0
     5a2:	11 24       	eor	r1, r1
     5a4:	c0 0e       	add	r12, r16
     5a6:	d1 1e       	adc	r13, r17
     5a8:	bc 01       	movw	r22, r24
     5aa:	66 0f       	add	r22, r22
     5ac:	77 1f       	adc	r23, r23
     5ae:	6c 0d       	add	r22, r12
     5b0:	7d 1d       	adc	r23, r13
     5b2:	db 01       	movw	r26, r22
     5b4:	4d 92       	st	X+, r4
     5b6:	5c 92       	st	X, r5
     5b8:	6d c0       	rjmp	.+218    	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
			}
			break;
			case 5:
			if(routes[0][i + 1] == 7){
     5ba:	60 81       	ld	r22, Z
     5bc:	71 81       	ldd	r23, Z+1	; 0x01
     5be:	67 30       	cpi	r22, 0x07	; 7
     5c0:	71 05       	cpc	r23, r1
     5c2:	81 f4       	brne	.+32     	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
				routes[routeNum][i] = 1;
     5c4:	42 9f       	mul	r20, r18
     5c6:	60 01       	movw	r12, r0
     5c8:	43 9f       	mul	r20, r19
     5ca:	d0 0c       	add	r13, r0
     5cc:	11 24       	eor	r1, r1
     5ce:	c0 0e       	add	r12, r16
     5d0:	d1 1e       	adc	r13, r17
     5d2:	bc 01       	movw	r22, r24
     5d4:	66 0f       	add	r22, r22
     5d6:	77 1f       	adc	r23, r23
     5d8:	6c 0d       	add	r22, r12
     5da:	7d 1d       	adc	r23, r13
     5dc:	db 01       	movw	r26, r22
     5de:	6d 92       	st	X+, r6
     5e0:	7c 92       	st	X, r7
     5e2:	58 c0       	rjmp	.+176    	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
			}
			else if(routes[0][i] != 7){
				routes[routeNum][i] = 2;
     5e4:	42 9f       	mul	r20, r18
     5e6:	60 01       	movw	r12, r0
     5e8:	43 9f       	mul	r20, r19
     5ea:	d0 0c       	add	r13, r0
     5ec:	11 24       	eor	r1, r1
     5ee:	c0 0e       	add	r12, r16
     5f0:	d1 1e       	adc	r13, r17
     5f2:	bc 01       	movw	r22, r24
     5f4:	66 0f       	add	r22, r22
     5f6:	77 1f       	adc	r23, r23
     5f8:	6c 0d       	add	r22, r12
     5fa:	7d 1d       	adc	r23, r13
     5fc:	db 01       	movw	r26, r22
     5fe:	ed 92       	st	X+, r14
     600:	fc 92       	st	X, r15
     602:	48 c0       	rjmp	.+144    	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
			}
			break;
			case 6:
			crossing++;
     604:	bf ef       	ldi	r27, 0xFF	; 255
     606:	2b 1a       	sub	r2, r27
     608:	3b 0a       	sbc	r3, r27
			routes[routeNum][i] = 6;
     60a:	42 9f       	mul	r20, r18
     60c:	b0 01       	movw	r22, r0
     60e:	43 9f       	mul	r20, r19
     610:	70 0d       	add	r23, r0
     612:	11 24       	eor	r1, r1
     614:	60 0f       	add	r22, r16
     616:	71 1f       	adc	r23, r17
     618:	6c 01       	movw	r12, r24
     61a:	cc 0c       	add	r12, r12
     61c:	dd 1c       	adc	r13, r13
     61e:	c6 0e       	add	r12, r22
     620:	d7 1e       	adc	r13, r23
     622:	d6 01       	movw	r26, r12
     624:	8d 92       	st	X+, r8
     626:	9c 92       	st	X, r9
			if((crossing == 2) && (routes[routeNum][i - 1] == 6)){
     628:	b2 e0       	ldi	r27, 0x02	; 2
     62a:	2b 16       	cp	r2, r27
     62c:	31 04       	cpc	r3, r1
     62e:	91 f5       	brne	.+100    	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
     630:	6c 01       	movw	r12, r24
     632:	51 e0       	ldi	r21, 0x01	; 1
     634:	c5 1a       	sub	r12, r21
     636:	d1 08       	sbc	r13, r1
     638:	cc 0c       	add	r12, r12
     63a:	dd 1c       	adc	r13, r13
     63c:	6c 0d       	add	r22, r12
     63e:	7d 1d       	adc	r23, r13
     640:	db 01       	movw	r26, r22
     642:	6d 91       	ld	r22, X+
     644:	7c 91       	ld	r23, X
     646:	66 30       	cpi	r22, 0x06	; 6
     648:	71 05       	cpc	r23, r1
     64a:	21 f5       	brne	.+72     	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
				crossing = 0;
				routes[1][i - 1] = 3;
     64c:	55 a2       	std	Z+37, r5	; 0x25
     64e:	44 a2       	std	Z+36, r4	; 0x24
			break;
			case 6:
			crossing++;
			routes[routeNum][i] = 6;
			if((crossing == 2) && (routes[routeNum][i - 1] == 6)){
				crossing = 0;
     650:	21 2c       	mov	r2, r1
     652:	31 2c       	mov	r3, r1
     654:	1f c0       	rjmp	.+62     	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
				routes[1][i - 1] = 3;
			}
			break;
			case 8:                                                     //case 7 isn't part of a route
			routes[routeNum][i] = 8;                                    //Marks end of route
     656:	42 9f       	mul	r20, r18
     658:	60 01       	movw	r12, r0
     65a:	43 9f       	mul	r20, r19
     65c:	d0 0c       	add	r13, r0
     65e:	11 24       	eor	r1, r1
     660:	c0 0e       	add	r12, r16
     662:	d1 1e       	adc	r13, r17
     664:	bc 01       	movw	r22, r24
     666:	66 0f       	add	r22, r22
     668:	77 1f       	adc	r23, r23
     66a:	6c 0d       	add	r22, r12
     66c:	7d 1d       	adc	r23, r13
     66e:	db 01       	movw	r26, r22
     670:	ad 92       	st	X+, r10
     672:	bc 92       	st	X, r11
     674:	64 e1       	ldi	r22, 0x14	; 20
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	61 50       	subi	r22, 0x01	; 1
     67a:	71 09       	sbc	r23, r1
			for(int j = 0; j < 20; j++){                                //reset decoy array
     67c:	e9 f7       	brne	.-6      	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
     67e:	bf 01       	movw	r22, r30
     680:	62 50       	subi	r22, 0x02	; 2
     682:	71 09       	sbc	r23, r1
     684:	db 01       	movw	r26, r22
     686:	1d 92       	st	X+, r1
     688:	1c 92       	st	X, r1
				routes[0][i] = 0;
			}
			if(routeNum < 4){
     68a:	24 30       	cpi	r18, 0x04	; 4
     68c:	31 05       	cpc	r19, r1
     68e:	14 f4       	brge	.+4      	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
				routeNum++;
     690:	2f 5f       	subi	r18, 0xFF	; 255
     692:	3f 4f       	sbci	r19, 0xFF	; 255
			routes[0][i] = 8; //Markeert einde van de route
		}
	}while(grid == 0);
	numOfIntersects = i;
	
	for(i = 1; i <= numOfIntersects; i++){   //Writing route towards X
     694:	01 96       	adiw	r24, 0x01	; 1
     696:	c8 17       	cp	r28, r24
     698:	d9 07       	cpc	r29, r25
     69a:	0c f0       	brlt	.+2      	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
     69c:	2d cf       	rjmp	.-422    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
			
		}
	}
	
	return numOfIntersects;                                                       //returns intersect count, so amount of intersects on route
}
     69e:	ce 01       	movw	r24, r28
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	1f 91       	pop	r17
     6a6:	0f 91       	pop	r16
     6a8:	ff 90       	pop	r15
     6aa:	ef 90       	pop	r14
     6ac:	df 90       	pop	r13
     6ae:	cf 90       	pop	r12
     6b0:	bf 90       	pop	r11
     6b2:	af 90       	pop	r10
     6b4:	9f 90       	pop	r9
     6b6:	8f 90       	pop	r8
     6b8:	7f 90       	pop	r7
     6ba:	6f 90       	pop	r6
     6bc:	5f 90       	pop	r5
     6be:	4f 90       	pop	r4
     6c0:	3f 90       	pop	r3
     6c2:	2f 90       	pop	r2
     6c4:	08 95       	ret

000006c6 <driveRoute>:

void driveRoute(int route[2][20], int flag, int flagReturn, int max){             //go to or return from, grid or chargepoint
     6c6:	cf 92       	push	r12
     6c8:	df 92       	push	r13
     6ca:	ef 92       	push	r14
     6cc:	ff 92       	push	r15
     6ce:	0f 93       	push	r16
     6d0:	1f 93       	push	r17
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	6c 01       	movw	r12, r24
     6d8:	eb 01       	movw	r28, r22
     6da:	7a 01       	movw	r14, r20
     6dc:	89 01       	movw	r16, r18
	int intersectnum = 1;                                       // flag 1 =  from or to home, flag 2 is from or to chargepoint
	
	if(flagReturn == 1){
     6de:	41 30       	cpi	r20, 0x01	; 1
     6e0:	51 05       	cpc	r21, r1
     6e2:	11 f0       	breq	.+4      	; 0x6e8 <driveRoute+0x22>
	
	return numOfIntersects;                                                       //returns intersect count, so amount of intersects on route
}

void driveRoute(int route[2][20], int flag, int flagReturn, int max){             //go to or return from, grid or chargepoint
	int intersectnum = 1;                                       // flag 1 =  from or to home, flag 2 is from or to chargepoint
     6e4:	01 e0       	ldi	r16, 0x01	; 1
     6e6:	10 e0       	ldi	r17, 0x00	; 0
	
	if(flagReturn == 1){
		intersectnum = max;
	}
	
	if(flag == 2){
     6e8:	c2 30       	cpi	r28, 0x02	; 2
     6ea:	d1 05       	cpc	r29, r1
     6ec:	49 f4       	brne	.+18     	; 0x700 <driveRoute+0x3a>
		motorControl(70, 'R', 0.30);
     6ee:	2a e9       	ldi	r18, 0x9A	; 154
     6f0:	39 e9       	ldi	r19, 0x99	; 153
     6f2:	49 e9       	ldi	r20, 0x99	; 153
     6f4:	5e e3       	ldi	r21, 0x3E	; 62
     6f6:	62 e5       	ldi	r22, 0x52	; 82
     6f8:	86 e4       	ldi	r24, 0x46	; 70
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <motorControl>
	}while(checkAfslag() == 0);
	
	if(checkAfslag() != 0){
		
		if(flagReturn == 0){
			switch(route[flag][intersectnum]){
     700:	28 e2       	ldi	r18, 0x28	; 40
     702:	2c 9f       	mul	r18, r28
     704:	c0 01       	movw	r24, r0
     706:	2d 9f       	mul	r18, r29
     708:	90 0d       	add	r25, r0
     70a:	11 24       	eor	r1, r1
     70c:	e8 01       	movw	r28, r16
     70e:	cc 0f       	add	r28, r28
     710:	dd 1f       	adc	r29, r29
     712:	c8 0f       	add	r28, r24
     714:	d9 1f       	adc	r29, r25
     716:	cc 0d       	add	r28, r12
     718:	dd 1d       	adc	r29, r13
		motorControl(70, 'R', 0.30);
	}
	
	Next:
	do{
		followLine();
     71a:	0e 94 c2 09 	call	0x1384	; 0x1384 <followLine>
	}while(checkAfslag() == 0);
     71e:	0e 94 07 0a 	call	0x140e	; 0x140e <checkAfslag>
     722:	89 2b       	or	r24, r25
     724:	d1 f3       	breq	.-12     	; 0x71a <driveRoute+0x54>
	
	if(checkAfslag() != 0){
     726:	0e 94 07 0a 	call	0x140e	; 0x140e <checkAfslag>
     72a:	89 2b       	or	r24, r25
     72c:	c9 f1       	breq	.+114    	; 0x7a0 <driveRoute+0xda>
		
		if(flagReturn == 0){
     72e:	e1 14       	cp	r14, r1
     730:	f1 04       	cpc	r15, r1
     732:	b1 f5       	brne	.+108    	; 0x7a0 <driveRoute+0xda>
			switch(route[flag][intersectnum]){
     734:	89 91       	ld	r24, Y+
     736:	99 91       	ld	r25, Y+
     738:	82 30       	cpi	r24, 0x02	; 2
     73a:	91 05       	cpc	r25, r1
     73c:	a1 f0       	breq	.+40     	; 0x766 <driveRoute+0xa0>
     73e:	1c f4       	brge	.+6      	; 0x746 <driveRoute+0x80>
     740:	01 97       	sbiw	r24, 0x01	; 1
     742:	39 f0       	breq	.+14     	; 0x752 <driveRoute+0x8c>
     744:	2d c0       	rjmp	.+90     	; 0x7a0 <driveRoute+0xda>
     746:	83 30       	cpi	r24, 0x03	; 3
     748:	91 05       	cpc	r25, r1
     74a:	b9 f0       	breq	.+46     	; 0x77a <driveRoute+0xb4>
     74c:	05 97       	sbiw	r24, 0x05	; 5
     74e:	f9 f0       	breq	.+62     	; 0x78e <driveRoute+0xc8>
     750:	27 c0       	rjmp	.+78     	; 0x7a0 <driveRoute+0xda>
				case 1:
				motorControl(70, 'R', 0.30);
     752:	2a e9       	ldi	r18, 0x9A	; 154
     754:	39 e9       	ldi	r19, 0x99	; 153
     756:	49 e9       	ldi	r20, 0x99	; 153
     758:	5e e3       	ldi	r21, 0x3E	; 62
     75a:	62 e5       	ldi	r22, 0x52	; 82
     75c:	86 e4       	ldi	r24, 0x46	; 70
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <motorControl>
				intersectnum++;
				goto Next;
     764:	da cf       	rjmp	.-76     	; 0x71a <driveRoute+0x54>
				case 2:
				motorControl(70, 'L', 0.30);
     766:	2a e9       	ldi	r18, 0x9A	; 154
     768:	39 e9       	ldi	r19, 0x99	; 153
     76a:	49 e9       	ldi	r20, 0x99	; 153
     76c:	5e e3       	ldi	r21, 0x3E	; 62
     76e:	6c e4       	ldi	r22, 0x4C	; 76
     770:	86 e4       	ldi	r24, 0x46	; 70
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <motorControl>
				intersectnum++;
				goto Next;
     778:	d0 cf       	rjmp	.-96     	; 0x71a <driveRoute+0x54>
				case 3:
				motorControl(80, 'F', 0.89);
     77a:	2a e0       	ldi	r18, 0x0A	; 10
     77c:	37 ed       	ldi	r19, 0xD7	; 215
     77e:	43 e6       	ldi	r20, 0x63	; 99
     780:	5f e3       	ldi	r21, 0x3F	; 63
     782:	66 e4       	ldi	r22, 0x46	; 70
     784:	80 e5       	ldi	r24, 0x50	; 80
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <motorControl>
				intersectnum++;
				goto Next;
     78c:	c6 cf       	rjmp	.-116    	; 0x71a <driveRoute+0x54>
				case 5:
				motorControl(0, 'F', 0.89);    //stop
     78e:	2a e0       	ldi	r18, 0x0A	; 10
     790:	37 ed       	ldi	r19, 0xD7	; 215
     792:	43 e6       	ldi	r20, 0x63	; 99
     794:	5f e3       	ldi	r21, 0x3F	; 63
     796:	66 e4       	ldi	r22, 0x46	; 70
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <motorControl>
				play_from_program_space(PSTR(">g32>>c32"));

			}
		}
	}
}
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	ff 90       	pop	r15
     7aa:	ef 90       	pop	r14
     7ac:	df 90       	pop	r13
     7ae:	cf 90       	pop	r12
     7b0:	08 95       	ret

000007b2 <fetchOrder>:
			check = 1;
		}
	}
}

void fetchOrder(int OrderX[], int orderY[], int route[2][20]){
     7b2:	4f 92       	push	r4
     7b4:	5f 92       	push	r5
     7b6:	6f 92       	push	r6
     7b8:	7f 92       	push	r7
     7ba:	8f 92       	push	r8
     7bc:	9f 92       	push	r9
     7be:	af 92       	push	r10
     7c0:	bf 92       	push	r11
     7c2:	cf 92       	push	r12
     7c4:	df 92       	push	r13
     7c6:	ef 92       	push	r14
     7c8:	ff 92       	push	r15
     7ca:	0f 93       	push	r16
     7cc:	1f 93       	push	r17
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	08 2f       	mov	r16, r24
     7d4:	19 2f       	mov	r17, r25
     7d6:	d6 2f       	mov	r29, r22
     7d8:	c7 2f       	mov	r28, r23
     7da:	4a 01       	movw	r8, r20
	int crossCountX = 0, crossCountY = 0, flagY = 0, flagX = 0, endX = 5, endY = 0, endFlag = 0;
	int amountOfIntersects = readGrid(route);
     7dc:	ca 01       	movw	r24, r20
     7de:	0e 94 96 01 	call	0x32c	; 0x32c <readGrid>
     7e2:	3c 01       	movw	r6, r24
	driveRoute(route, 1, 0, amountOfIntersects);    //Rij naar grid ingang
     7e4:	9c 01       	movw	r18, r24
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	50 e0       	ldi	r21, 0x00	; 0
     7ea:	61 e0       	ldi	r22, 0x01	; 1
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	c4 01       	movw	r24, r8
     7f0:	0e 94 63 03 	call	0x6c6	; 0x6c6 <driveRoute>
	motorControl(70, 'R', 0.89);
     7f4:	2a e0       	ldi	r18, 0x0A	; 10
     7f6:	37 ed       	ldi	r19, 0xD7	; 215
     7f8:	43 e6       	ldi	r20, 0x63	; 99
     7fa:	5f e3       	ldi	r21, 0x3F	; 63
     7fc:	62 e5       	ldi	r22, 0x52	; 82
     7fe:	86 e4       	ldi	r24, 0x46	; 70
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <motorControl>
		    : "0" ( microseconds )
		    );  
}

// These are alternative aliases:
static inline void delay(unsigned int milliseconds) { delay_ms(milliseconds); }
     806:	82 e3       	ldi	r24, 0x32	; 50
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	0e 94 23 15 	call	0x2a46	; 0x2a46 <delay_ms>
	delay(50);
	motorControl(0, 'R', 0.89);
     80e:	2a e0       	ldi	r18, 0x0A	; 10
     810:	37 ed       	ldi	r19, 0xD7	; 215
     812:	43 e6       	ldi	r20, 0x63	; 99
     814:	5f e3       	ldi	r21, 0x3F	; 63
     816:	62 e5       	ldi	r22, 0x52	; 82
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <motorControl>
     820:	c0 2e       	mov	r12, r16
     822:	d1 2e       	mov	r13, r17
     824:	ed 2e       	mov	r14, r29
     826:	fc 2e       	mov	r15, r28
	for(int i = 0; i < sizeOfOrder + 1; i ++){
     828:	a1 2c       	mov	r10, r1
     82a:	b1 2c       	mov	r11, r1
		}
	}
}

void fetchOrder(int OrderX[], int orderY[], int route[2][20]){
	int crossCountX = 0, crossCountY = 0, flagY = 0, flagX = 0, endX = 5, endY = 0, endFlag = 0;
     82c:	00 e0       	ldi	r16, 0x00	; 0
     82e:	10 e0       	ldi	r17, 0x00	; 0
	motorControl(70, 'R', 0.89);
	delay(50);
	motorControl(0, 'R', 0.89);
	for(int i = 0; i < sizeOfOrder + 1; i ++){
		if(i == sizeOfOrder){
			endFlag = 1;
     830:	44 24       	eor	r4, r4
     832:	43 94       	inc	r4
     834:	51 2c       	mov	r5, r1
     836:	0c c0       	rjmp	.+24     	; 0x850 <fetchOrder+0x9e>
	driveRoute(route, 1, 0, amountOfIntersects);    //Rij naar grid ingang
	motorControl(70, 'R', 0.89);
	delay(50);
	motorControl(0, 'R', 0.89);
	for(int i = 0; i < sizeOfOrder + 1; i ++){
		if(i == sizeOfOrder){
     838:	84 e0       	ldi	r24, 0x04	; 4
     83a:	a8 16       	cp	r10, r24
     83c:	b1 04       	cpc	r11, r1
     83e:	11 f4       	brne	.+4      	; 0x844 <fetchOrder+0x92>
			endFlag = 1;
     840:	04 2d       	mov	r16, r4
     842:	15 2d       	mov	r17, r5
     844:	e2 e0       	ldi	r30, 0x02	; 2
     846:	ce 0e       	add	r12, r30
     848:	d1 1c       	adc	r13, r1
     84a:	f2 e0       	ldi	r31, 0x02	; 2
     84c:	ef 0e       	add	r14, r31
     84e:	f1 1c       	adc	r15, r1
     850:	e6 01       	movw	r28, r12
		}
		if((crossCountX > OrderX[i]) || (endFlag == 1 && (crossCountX > endX))){
     852:	88 81       	ld	r24, Y
     854:	99 81       	ldd	r25, Y+1	; 0x01
     856:	99 23       	and	r25, r25
     858:	54 f4       	brge	.+20     	; 0x86e <fetchOrder+0xbc>
			motorControl(70, 'L', 0.89);
     85a:	2a e0       	ldi	r18, 0x0A	; 10
     85c:	37 ed       	ldi	r19, 0xD7	; 215
     85e:	43 e6       	ldi	r20, 0x63	; 99
     860:	5f e3       	ldi	r21, 0x3F	; 63
     862:	6c e4       	ldi	r22, 0x4C	; 76
     864:	86 e4       	ldi	r24, 0x46	; 70
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <motorControl>
			flagX = 1;
     86c:	19 c0       	rjmp	.+50     	; 0x8a0 <fetchOrder+0xee>
		}
		else if((crossCountX < OrderX[i]) || (endFlag == 1 && (crossCountX < endX))){
     86e:	18 16       	cp	r1, r24
     870:	19 06       	cpc	r1, r25
     872:	1c f0       	brlt	.+6      	; 0x87a <fetchOrder+0xc8>
     874:	01 30       	cpi	r16, 0x01	; 1
     876:	11 05       	cpc	r17, r1
     878:	99 f4       	brne	.+38     	; 0x8a0 <fetchOrder+0xee>
			motorControl(70, 'R', 0.89);
     87a:	2a e0       	ldi	r18, 0x0A	; 10
     87c:	37 ed       	ldi	r19, 0xD7	; 215
     87e:	43 e6       	ldi	r20, 0x63	; 99
     880:	5f e3       	ldi	r21, 0x3F	; 63
     882:	62 e5       	ldi	r22, 0x52	; 82
     884:	86 e4       	ldi	r24, 0x46	; 70
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <motorControl>
     88c:	09 c0       	rjmp	.+18     	; 0x8a0 <fetchOrder+0xee>
				//Als er een splitsing gedetecteerd wordt crossCountX++
			}
			else if(flagX == 2){
				//Als er een splitsing gedetecteerd wordt crossCountX--
			}
			motorControl(90, 'F', 0.89);
     88e:	2a e0       	ldi	r18, 0x0A	; 10
     890:	37 ed       	ldi	r19, 0xD7	; 215
     892:	43 e6       	ldi	r20, 0x63	; 99
     894:	5f e3       	ldi	r21, 0x3F	; 63
     896:	66 e4       	ldi	r22, 0x46	; 70
     898:	8a e5       	ldi	r24, 0x5A	; 90
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <motorControl>
		}
		else if((crossCountX < OrderX[i]) || (endFlag == 1 && (crossCountX < endX))){
			motorControl(70, 'R', 0.89);
			flagX = 2;
		}
		while((crossCountX != OrderX[i]) || (endFlag == 1 && (crossCountX != endX))){
     8a0:	88 81       	ld	r24, Y
     8a2:	99 81       	ldd	r25, Y+1	; 0x01
     8a4:	89 2b       	or	r24, r25
     8a6:	99 f7       	brne	.-26     	; 0x88e <fetchOrder+0xdc>
     8a8:	01 30       	cpi	r16, 0x01	; 1
     8aa:	11 05       	cpc	r17, r1
     8ac:	81 f3       	breq	.-32     	; 0x88e <fetchOrder+0xdc>
				//Als er een splitsing gedetecteerd wordt crossCountX--
			}
			motorControl(90, 'F', 0.89);
			//Als er een splitsing gedetecteerd wordt crossCountX++
		}
		motorControl(0, 'F', 0.89);
     8ae:	2a e0       	ldi	r18, 0x0A	; 10
     8b0:	37 ed       	ldi	r19, 0xD7	; 215
     8b2:	43 e6       	ldi	r20, 0x63	; 99
     8b4:	5f e3       	ldi	r21, 0x3F	; 63
     8b6:	66 e4       	ldi	r22, 0x46	; 70
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <motorControl>
     8c0:	e7 01       	movw	r28, r14
		if((crossCountY > orderY[i]) || (endFlag == 1 && (crossCountY > endY))){
     8c2:	88 81       	ld	r24, Y
     8c4:	99 81       	ldd	r25, Y+1	; 0x01
     8c6:	99 23       	and	r25, r25
     8c8:	74 f4       	brge	.+28     	; 0x8e6 <fetchOrder+0x134>
			motorControl(70, 'L', 0.89);
     8ca:	2a e0       	ldi	r18, 0x0A	; 10
     8cc:	37 ed       	ldi	r19, 0xD7	; 215
     8ce:	43 e6       	ldi	r20, 0x63	; 99
     8d0:	5f e3       	ldi	r21, 0x3F	; 63
     8d2:	6c e4       	ldi	r22, 0x4C	; 76
     8d4:	86 e4       	ldi	r24, 0x46	; 70
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <motorControl>
		}
		else if((crossCountY < orderY[i]) || (endFlag == 1 && (crossCountY < endY))){
			motorControl(70, 'R', 0.89);
			flagY = 2;
		}
		while((crossCountY != orderY[i]) || (endFlag == 1 && (crossCountY != endY))){
     8dc:	88 81       	ld	r24, Y
     8de:	99 81       	ldd	r25, Y+1	; 0x01
     8e0:	89 2b       	or	r24, r25
     8e2:	71 f4       	brne	.+28     	; 0x900 <__stack+0x1>
     8e4:	1a c0       	rjmp	.+52     	; 0x91a <__stack+0x1b>
		motorControl(0, 'F', 0.89);
		if((crossCountY > orderY[i]) || (endFlag == 1 && (crossCountY > endY))){
			motorControl(70, 'L', 0.89);
			flagY = 1;
		}
		else if((crossCountY < orderY[i]) || (endFlag == 1 && (crossCountY < endY))){
     8e6:	18 16       	cp	r1, r24
     8e8:	19 06       	cpc	r1, r25
     8ea:	c4 f7       	brge	.-16     	; 0x8dc <fetchOrder+0x12a>
			motorControl(70, 'R', 0.89);
     8ec:	2a e0       	ldi	r18, 0x0A	; 10
     8ee:	37 ed       	ldi	r19, 0xD7	; 215
     8f0:	43 e6       	ldi	r20, 0x63	; 99
     8f2:	5f e3       	ldi	r21, 0x3F	; 63
     8f4:	62 e5       	ldi	r22, 0x52	; 82
     8f6:	86 e4       	ldi	r24, 0x46	; 70
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <motorControl>
     8fe:	ee cf       	rjmp	.-36     	; 0x8dc <fetchOrder+0x12a>
				//Als er een splitsing gedetecteerd wordt crossCountX++
			}
			else if(flagY == 2){
				//Als er een splitsing gedetecteerd wordt crossCountX--
			}
			motorControl(90, 'F', 0.89);
     900:	2a e0       	ldi	r18, 0x0A	; 10
     902:	37 ed       	ldi	r19, 0xD7	; 215
     904:	43 e6       	ldi	r20, 0x63	; 99
     906:	5f e3       	ldi	r21, 0x3F	; 63
     908:	66 e4       	ldi	r22, 0x46	; 70
     90a:	8a e5       	ldi	r24, 0x5A	; 90
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <motorControl>
		}
		else if((crossCountY < orderY[i]) || (endFlag == 1 && (crossCountY < endY))){
			motorControl(70, 'R', 0.89);
			flagY = 2;
		}
		while((crossCountY != orderY[i]) || (endFlag == 1 && (crossCountY != endY))){
     912:	88 81       	ld	r24, Y
     914:	99 81       	ldd	r25, Y+1	; 0x01
     916:	89 2b       	or	r24, r25
     918:	99 f7       	brne	.-26     	; 0x900 <__stack+0x1>
			else if(flagY == 2){
				//Als er een splitsing gedetecteerd wordt crossCountX--
			}
			motorControl(90, 'F', 0.89);
		}
		play_from_program_space(PSTR(">g32>>c32"));
     91a:	80 e9       	ldi	r24, 0x90	; 144
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	0e 94 99 11 	call	0x2332	; 0x2332 <play_from_program_space>
     922:	88 ec       	ldi	r24, 0xC8	; 200
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	0e 94 23 15 	call	0x2a46	; 0x2a46 <delay_ms>
	int amountOfIntersects = readGrid(route);
	driveRoute(route, 1, 0, amountOfIntersects);    //Rij naar grid ingang
	motorControl(70, 'R', 0.89);
	delay(50);
	motorControl(0, 'R', 0.89);
	for(int i = 0; i < sizeOfOrder + 1; i ++){
     92a:	8f ef       	ldi	r24, 0xFF	; 255
     92c:	a8 1a       	sub	r10, r24
     92e:	b8 0a       	sbc	r11, r24
     930:	e5 e0       	ldi	r30, 0x05	; 5
     932:	ae 16       	cp	r10, r30
     934:	b1 04       	cpc	r11, r1
     936:	09 f0       	breq	.+2      	; 0x93a <__stack+0x3b>
     938:	7f cf       	rjmp	.-258    	; 0x838 <fetchOrder+0x86>
			motorControl(90, 'F', 0.89);
		}
		play_from_program_space(PSTR(">g32>>c32"));
		delay(200);
	}
	driveRoute(route, 1, 1, amountOfIntersects);    //Rij terug naar begipunt
     93a:	93 01       	movw	r18, r6
     93c:	41 e0       	ldi	r20, 0x01	; 1
     93e:	50 e0       	ldi	r21, 0x00	; 0
     940:	61 e0       	ldi	r22, 0x01	; 1
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	c4 01       	movw	r24, r8
     946:	0e 94 63 03 	call	0x6c6	; 0x6c6 <driveRoute>
	play_from_program_space(PSTR(">g32>>c32"));
     94a:	86 e8       	ldi	r24, 0x86	; 134
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	0e 94 99 11 	call	0x2332	; 0x2332 <play_from_program_space>
}
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	1f 91       	pop	r17
     958:	0f 91       	pop	r16
     95a:	ff 90       	pop	r15
     95c:	ef 90       	pop	r14
     95e:	df 90       	pop	r13
     960:	cf 90       	pop	r12
     962:	bf 90       	pop	r11
     964:	af 90       	pop	r10
     966:	9f 90       	pop	r9
     968:	8f 90       	pop	r8
     96a:	7f 90       	pop	r7
     96c:	6f 90       	pop	r6
     96e:	5f 90       	pop	r5
     970:	4f 90       	pop	r4
     972:	08 95       	ret

00000974 <main>:
#include <pololu/3pi.h>
#include <avr/pgmspace.h>
#include <avr/io.h>
#include <avr/interrupt.h>

int main(){
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	cd b7       	in	r28, 0x3d	; 61
     97a:	de b7       	in	r29, 0x3e	; 62
     97c:	c0 56       	subi	r28, 0x60	; 96
     97e:	d1 09       	sbc	r29, r1
     980:	0f b6       	in	r0, 0x3f	; 63
     982:	f8 94       	cli
     984:	de bf       	out	0x3e, r29	; 62
     986:	0f be       	out	0x3f, r0	; 63
     988:	cd bf       	out	0x3d, r28	; 61
	initialize();
     98a:	0e 94 3e 09 	call	0x127c	; 0x127c <initialize>
	
		int amountOfIntersects = 0;
		int routes[2][20];
		amountOfIntersects = readGrid(routes);
     98e:	ce 01       	movw	r24, r28
     990:	01 96       	adiw	r24, 0x01	; 1
     992:	0e 94 96 01 	call	0x32c	; 0x32c <readGrid>
     996:	8c 01       	movw	r16, r24
		int orderX[sizeOfOrder];
		int orderY[sizeOfOrder];
		wirMain(orderX, orderY);
     998:	be 01       	movw	r22, r28
     99a:	67 5a       	subi	r22, 0xA7	; 167
     99c:	7f 4f       	sbci	r23, 0xFF	; 255
     99e:	ce 01       	movw	r24, r28
     9a0:	8f 5a       	subi	r24, 0xAF	; 175
     9a2:	9f 4f       	sbci	r25, 0xFF	; 255
     9a4:	0e 94 01 0b 	call	0x1602	; 0x1602 <wirMain>
		sortOrder(orderX, orderY);
     9a8:	be 01       	movw	r22, r28
     9aa:	67 5a       	subi	r22, 0xA7	; 167
     9ac:	7f 4f       	sbci	r23, 0xFF	; 255
     9ae:	ce 01       	movw	r24, r28
     9b0:	8f 5a       	subi	r24, 0xAF	; 175
     9b2:	9f 4f       	sbci	r25, 0xFF	; 255
     9b4:	0e 94 98 00 	call	0x130	; 0x130 <sortOrder>
	
	while (1){
	driveRoute(routes, 1, 0, amountOfIntersects);
     9b8:	98 01       	movw	r18, r16
     9ba:	40 e0       	ldi	r20, 0x00	; 0
     9bc:	50 e0       	ldi	r21, 0x00	; 0
     9be:	61 e0       	ldi	r22, 0x01	; 1
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	ce 01       	movw	r24, r28
     9c4:	01 96       	adiw	r24, 0x01	; 1
     9c6:	0e 94 63 03 	call	0x6c6	; 0x6c6 <driveRoute>
	fetchOrder(orderX, orderY, routes);
     9ca:	ae 01       	movw	r20, r28
     9cc:	4f 5f       	subi	r20, 0xFF	; 255
     9ce:	5f 4f       	sbci	r21, 0xFF	; 255
     9d0:	be 01       	movw	r22, r28
     9d2:	67 5a       	subi	r22, 0xA7	; 167
     9d4:	7f 4f       	sbci	r23, 0xFF	; 255
     9d6:	ce 01       	movw	r24, r28
     9d8:	8f 5a       	subi	r24, 0xAF	; 175
     9da:	9f 4f       	sbci	r25, 0xFF	; 255
     9dc:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <fetchOrder>
     9e0:	eb cf       	rjmp	.-42     	; 0x9b8 <main+0x44>

000009e2 <motorControl>:

int speedCurrent = 0;
int speedCurrentRight = 0;
int speedCurrentLeft = 0;

void motorControl(int speed, char direction, float aggressionFactor){
     9e2:	2f 92       	push	r2
     9e4:	3f 92       	push	r3
     9e6:	4f 92       	push	r4
     9e8:	5f 92       	push	r5
     9ea:	6f 92       	push	r6
     9ec:	7f 92       	push	r7
     9ee:	8f 92       	push	r8
     9f0:	9f 92       	push	r9
     9f2:	af 92       	push	r10
     9f4:	bf 92       	push	r11
     9f6:	cf 92       	push	r12
     9f8:	df 92       	push	r13
     9fa:	ef 92       	push	r14
     9fc:	ff 92       	push	r15
     9fe:	0f 93       	push	r16
     a00:	1f 93       	push	r17
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	cd b7       	in	r28, 0x3d	; 61
     a08:	de b7       	in	r29, 0x3e	; 62
     a0a:	66 97       	sbiw	r28, 0x16	; 22
     a0c:	0f b6       	in	r0, 0x3f	; 63
     a0e:	f8 94       	cli
     a10:	de bf       	out	0x3e, r29	; 62
     a12:	0f be       	out	0x3f, r0	; 63
     a14:	cd bf       	out	0x3d, r28	; 61
     a16:	1c 01       	movw	r2, r24
     a18:	29 83       	std	Y+1, r18	; 0x01
     a1a:	3a 83       	std	Y+2, r19	; 0x02
     a1c:	4b 83       	std	Y+3, r20	; 0x03
     a1e:	5c 83       	std	Y+4, r21	; 0x04
	int setSpeedRight = 0;
	int setSpeedLeft = 0;
	
	//directions direction;

	switch (direction){
     a20:	66 34       	cpi	r22, 0x46	; 70
     a22:	61 f0       	breq	.+24     	; 0xa3c <motorControl+0x5a>
     a24:	20 f4       	brcc	.+8      	; 0xa2e <motorControl+0x4c>
     a26:	62 34       	cpi	r22, 0x42	; 66
     a28:	09 f4       	brne	.+2      	; 0xa2c <motorControl+0x4a>
     a2a:	95 c0       	rjmp	.+298    	; 0xb56 <motorControl+0x174>
     a2c:	08 c4       	rjmp	.+2064   	; 0x123e <motorControl+0x85c>
     a2e:	6c 34       	cpi	r22, 0x4C	; 76
     a30:	09 f4       	brne	.+2      	; 0xa34 <motorControl+0x52>
     a32:	a9 c2       	rjmp	.+1362   	; 0xf86 <motorControl+0x5a4>
     a34:	62 35       	cpi	r22, 0x52	; 82
     a36:	09 f4       	brne	.+2      	; 0xa3a <motorControl+0x58>
     a38:	1b c1       	rjmp	.+566    	; 0xc70 <motorControl+0x28e>
     a3a:	01 c4       	rjmp	.+2050   	; 0x123e <motorControl+0x85c>
		case 'F':
		
		setSpeed = speed - speedCurrent;
     a3c:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <speedCurrent>
     a40:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <speedCurrent+0x1>
     a44:	91 01       	movw	r18, r2
     a46:	28 1b       	sub	r18, r24
     a48:	39 0b       	sbc	r19, r25
     a4a:	45 e6       	ldi	r20, 0x65	; 101
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	5a 87       	std	Y+10, r21	; 0x0a
     a50:	49 87       	std	Y+9, r20	; 0x09
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     a52:	41 2c       	mov	r4, r1
     a54:	51 2c       	mov	r5, r1
     a56:	32 01       	movw	r6, r4
			timerStart = get_ms();
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2*M_PI ) ) * sin ( 2* M_PI * accelerationCounter ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     a58:	03 2e       	mov	r0, r19
     a5a:	00 0c       	add	r0, r0
     a5c:	44 0b       	sbc	r20, r20
     a5e:	55 0b       	sbc	r21, r21
     a60:	2d 83       	std	Y+5, r18	; 0x05
     a62:	3e 83       	std	Y+6, r19	; 0x06
     a64:	4f 83       	std	Y+7, r20	; 0x07
     a66:	58 87       	std	Y+8, r21	; 0x08
		case 'F':
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     a68:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <get_ms>
     a6c:	8b 01       	movw	r16, r22
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2*M_PI ) ) * sin ( 2* M_PI * accelerationCounter ) ) );
     a6e:	2b ed       	ldi	r18, 0xDB	; 219
     a70:	3f e0       	ldi	r19, 0x0F	; 15
     a72:	49 ec       	ldi	r20, 0xC9	; 201
     a74:	50 e4       	ldi	r21, 0x40	; 64
     a76:	c3 01       	movw	r24, r6
     a78:	b2 01       	movw	r22, r4
     a7a:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__mulsf3>
     a7e:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <sin>
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     a82:	23 e8       	ldi	r18, 0x83	; 131
     a84:	39 ef       	ldi	r19, 0xF9	; 249
     a86:	42 e2       	ldi	r20, 0x22	; 34
     a88:	5e e3       	ldi	r21, 0x3E	; 62
     a8a:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__mulsf3>
     a8e:	9b 01       	movw	r18, r22
     a90:	ac 01       	movw	r20, r24
     a92:	c3 01       	movw	r24, r6
     a94:	b2 01       	movw	r22, r4
     a96:	0e 94 06 0b 	call	0x160c	; 0x160c <__subsf3>
     a9a:	4b 01       	movw	r8, r22
     a9c:	5c 01       	movw	r10, r24
     a9e:	6d 81       	ldd	r22, Y+5	; 0x05
     aa0:	7e 81       	ldd	r23, Y+6	; 0x06
     aa2:	8f 81       	ldd	r24, Y+7	; 0x07
     aa4:	98 85       	ldd	r25, Y+8	; 0x08
     aa6:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__floatsisf>
     aaa:	9b 01       	movw	r18, r22
     aac:	ac 01       	movw	r20, r24
     aae:	c5 01       	movw	r24, r10
     ab0:	b4 01       	movw	r22, r8
     ab2:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__mulsf3>
     ab6:	4b 01       	movw	r8, r22
     ab8:	5c 01       	movw	r10, r24
     aba:	60 91 d3 01 	lds	r22, 0x01D3	; 0x8001d3 <speedCurrent>
     abe:	70 91 d4 01 	lds	r23, 0x01D4	; 0x8001d4 <speedCurrent+0x1>
     ac2:	07 2e       	mov	r0, r23
     ac4:	00 0c       	add	r0, r0
     ac6:	88 0b       	sbc	r24, r24
     ac8:	99 0b       	sbc	r25, r25
     aca:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__floatsisf>
     ace:	9b 01       	movw	r18, r22
     ad0:	ac 01       	movw	r20, r24
     ad2:	c5 01       	movw	r24, r10
     ad4:	b4 01       	movw	r22, r8
     ad6:	0e 94 07 0b 	call	0x160e	; 0x160e <__addsf3>
     ada:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__fixsfsi>
     ade:	dc 01       	movw	r26, r24
     ae0:	cb 01       	movw	r24, r22
     ae2:	bc 01       	movw	r22, r24
     ae4:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     ae8:	48 01       	movw	r8, r16
     aea:	11 0f       	add	r17, r17
     aec:	aa 08       	sbc	r10, r10
     aee:	bb 08       	sbc	r11, r11
     af0:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <get_ms>
     af4:	68 19       	sub	r22, r8
     af6:	79 09       	sbc	r23, r9
     af8:	8a 09       	sbc	r24, r10
     afa:	9b 09       	sbc	r25, r11
     afc:	0e 94 ae 0b 	call	0x175c	; 0x175c <__floatunsisf>
     b00:	6b 01       	movw	r12, r22
     b02:	7c 01       	movw	r14, r24
     b04:	20 e0       	ldi	r18, 0x00	; 0
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	40 e2       	ldi	r20, 0x20	; 32
     b0a:	51 e4       	ldi	r21, 0x41	; 65
     b0c:	69 81       	ldd	r22, Y+1	; 0x01
     b0e:	7a 81       	ldd	r23, Y+2	; 0x02
     b10:	8b 81       	ldd	r24, Y+3	; 0x03
     b12:	9c 81       	ldd	r25, Y+4	; 0x04
     b14:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__mulsf3>
     b18:	9b 01       	movw	r18, r22
     b1a:	ac 01       	movw	r20, r24
     b1c:	c7 01       	movw	r24, r14
     b1e:	b6 01       	movw	r22, r12
     b20:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__cmpsf2>
     b24:	88 23       	and	r24, r24
     b26:	24 f3       	brlt	.-56     	; 0xaf0 <motorControl+0x10e>
	switch (direction){
		case 'F':
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     b28:	2a e0       	ldi	r18, 0x0A	; 10
     b2a:	37 ed       	ldi	r19, 0xD7	; 215
     b2c:	43 e2       	ldi	r20, 0x23	; 35
     b2e:	5c e3       	ldi	r21, 0x3C	; 60
     b30:	c3 01       	movw	r24, r6
     b32:	b2 01       	movw	r22, r4
     b34:	0e 94 07 0b 	call	0x160e	; 0x160e <__addsf3>
     b38:	2b 01       	movw	r4, r22
     b3a:	3c 01       	movw	r6, r24
     b3c:	a9 85       	ldd	r26, Y+9	; 0x09
     b3e:	ba 85       	ldd	r27, Y+10	; 0x0a
     b40:	11 97       	sbiw	r26, 0x01	; 1
     b42:	ba 87       	std	Y+10, r27	; 0x0a
     b44:	a9 87       	std	Y+9, r26	; 0x09
     b46:	ab 2b       	or	r26, r27
     b48:	09 f0       	breq	.+2      	; 0xb4c <motorControl+0x16a>
     b4a:	8e cf       	rjmp	.-228    	; 0xa68 <motorControl+0x86>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrent = speed;
     b4c:	30 92 d4 01 	sts	0x01D4, r3	; 0x8001d4 <speedCurrent+0x1>
     b50:	20 92 d3 01 	sts	0x01D3, r2	; 0x8001d3 <speedCurrent>
		break;
     b54:	7a c3       	rjmp	.+1780   	; 0x124a <motorControl+0x868>
		
		case 'B':
		
		setSpeed = speed - speedCurrent;
     b56:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <speedCurrent>
     b5a:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <speedCurrent+0x1>
     b5e:	91 01       	movw	r18, r2
     b60:	28 1b       	sub	r18, r24
     b62:	39 0b       	sbc	r19, r25
     b64:	45 e6       	ldi	r20, 0x65	; 101
     b66:	50 e0       	ldi	r21, 0x00	; 0
     b68:	5a 87       	std	Y+10, r21	; 0x0a
     b6a:	49 87       	std	Y+9, r20	; 0x09
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     b6c:	41 2c       	mov	r4, r1
     b6e:	51 2c       	mov	r5, r1
     b70:	32 01       	movw	r6, r4
			timerStart = get_ms();
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     b72:	03 2e       	mov	r0, r19
     b74:	00 0c       	add	r0, r0
     b76:	44 0b       	sbc	r20, r20
     b78:	55 0b       	sbc	r21, r21
     b7a:	2d 83       	std	Y+5, r18	; 0x05
     b7c:	3e 83       	std	Y+6, r19	; 0x06
     b7e:	4f 83       	std	Y+7, r20	; 0x07
     b80:	58 87       	std	Y+8, r21	; 0x08
		case 'B':
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     b82:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <get_ms>
     b86:	8b 01       	movw	r16, r22
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) );
     b88:	2b ed       	ldi	r18, 0xDB	; 219
     b8a:	3f e0       	ldi	r19, 0x0F	; 15
     b8c:	49 ec       	ldi	r20, 0xC9	; 201
     b8e:	50 e4       	ldi	r21, 0x40	; 64
     b90:	c3 01       	movw	r24, r6
     b92:	b2 01       	movw	r22, r4
     b94:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__mulsf3>
     b98:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <sin>
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     b9c:	23 e8       	ldi	r18, 0x83	; 131
     b9e:	39 ef       	ldi	r19, 0xF9	; 249
     ba0:	42 e2       	ldi	r20, 0x22	; 34
     ba2:	5e e3       	ldi	r21, 0x3E	; 62
     ba4:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__mulsf3>
     ba8:	9b 01       	movw	r18, r22
     baa:	ac 01       	movw	r20, r24
     bac:	c3 01       	movw	r24, r6
     bae:	b2 01       	movw	r22, r4
     bb0:	0e 94 06 0b 	call	0x160c	; 0x160c <__subsf3>
     bb4:	4b 01       	movw	r8, r22
     bb6:	5c 01       	movw	r10, r24
     bb8:	6d 81       	ldd	r22, Y+5	; 0x05
     bba:	7e 81       	ldd	r23, Y+6	; 0x06
     bbc:	8f 81       	ldd	r24, Y+7	; 0x07
     bbe:	98 85       	ldd	r25, Y+8	; 0x08
     bc0:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__floatsisf>
     bc4:	9b 01       	movw	r18, r22
     bc6:	ac 01       	movw	r20, r24
     bc8:	c5 01       	movw	r24, r10
     bca:	b4 01       	movw	r22, r8
     bcc:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__mulsf3>
     bd0:	4b 01       	movw	r8, r22
     bd2:	5c 01       	movw	r10, r24
     bd4:	60 91 d3 01 	lds	r22, 0x01D3	; 0x8001d3 <speedCurrent>
     bd8:	70 91 d4 01 	lds	r23, 0x01D4	; 0x8001d4 <speedCurrent+0x1>
     bdc:	07 2e       	mov	r0, r23
     bde:	00 0c       	add	r0, r0
     be0:	88 0b       	sbc	r24, r24
     be2:	99 0b       	sbc	r25, r25
     be4:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__floatsisf>
     be8:	9b 01       	movw	r18, r22
     bea:	ac 01       	movw	r20, r24
     bec:	c5 01       	movw	r24, r10
     bee:	b4 01       	movw	r22, r8
     bf0:	0e 94 07 0b 	call	0x160e	; 0x160e <__addsf3>
     bf4:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__fixsfsi>
     bf8:	dc 01       	movw	r26, r24
     bfa:	cb 01       	movw	r24, r22
     bfc:	bc 01       	movw	r22, r24
     bfe:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     c02:	48 01       	movw	r8, r16
     c04:	11 0f       	add	r17, r17
     c06:	aa 08       	sbc	r10, r10
     c08:	bb 08       	sbc	r11, r11
     c0a:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <get_ms>
     c0e:	68 19       	sub	r22, r8
     c10:	79 09       	sbc	r23, r9
     c12:	8a 09       	sbc	r24, r10
     c14:	9b 09       	sbc	r25, r11
     c16:	0e 94 ae 0b 	call	0x175c	; 0x175c <__floatunsisf>
     c1a:	6b 01       	movw	r12, r22
     c1c:	7c 01       	movw	r14, r24
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	40 e2       	ldi	r20, 0x20	; 32
     c24:	51 e4       	ldi	r21, 0x41	; 65
     c26:	69 81       	ldd	r22, Y+1	; 0x01
     c28:	7a 81       	ldd	r23, Y+2	; 0x02
     c2a:	8b 81       	ldd	r24, Y+3	; 0x03
     c2c:	9c 81       	ldd	r25, Y+4	; 0x04
     c2e:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__mulsf3>
     c32:	9b 01       	movw	r18, r22
     c34:	ac 01       	movw	r20, r24
     c36:	c7 01       	movw	r24, r14
     c38:	b6 01       	movw	r22, r12
     c3a:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__cmpsf2>
     c3e:	88 23       	and	r24, r24
     c40:	24 f3       	brlt	.-56     	; 0xc0a <motorControl+0x228>
		
		case 'B':
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     c42:	2a e0       	ldi	r18, 0x0A	; 10
     c44:	37 ed       	ldi	r19, 0xD7	; 215
     c46:	43 e2       	ldi	r20, 0x23	; 35
     c48:	5c e3       	ldi	r21, 0x3C	; 60
     c4a:	c3 01       	movw	r24, r6
     c4c:	b2 01       	movw	r22, r4
     c4e:	0e 94 07 0b 	call	0x160e	; 0x160e <__addsf3>
     c52:	2b 01       	movw	r4, r22
     c54:	3c 01       	movw	r6, r24
     c56:	a9 85       	ldd	r26, Y+9	; 0x09
     c58:	ba 85       	ldd	r27, Y+10	; 0x0a
     c5a:	11 97       	sbiw	r26, 0x01	; 1
     c5c:	ba 87       	std	Y+10, r27	; 0x0a
     c5e:	a9 87       	std	Y+9, r26	; 0x09
     c60:	ab 2b       	or	r26, r27
     c62:	09 f0       	breq	.+2      	; 0xc66 <motorControl+0x284>
     c64:	8e cf       	rjmp	.-228    	; 0xb82 <motorControl+0x1a0>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrent = speed;
     c66:	30 92 d4 01 	sts	0x01D4, r3	; 0x8001d4 <speedCurrent+0x1>
     c6a:	20 92 d3 01 	sts	0x01D3, r2	; 0x8001d3 <speedCurrent>
		break;
     c6e:	ed c2       	rjmp	.+1498   	; 0x124a <motorControl+0x868>

		case 'R':
		
		setSpeedRight = speed + speedCurrentRight;
     c70:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <speedCurrentRight>
     c74:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <speedCurrentRight+0x1>
     c78:	82 0d       	add	r24, r2
     c7a:	93 1d       	adc	r25, r3
		setSpeedLeft = speed - speedCurrentLeft;
     c7c:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <speedCurrentLeft>
     c80:	30 91 d0 01 	lds	r19, 0x01D0	; 0x8001d0 <speedCurrentLeft+0x1>
     c84:	a1 01       	movw	r20, r2
     c86:	42 1b       	sub	r20, r18
     c88:	53 0b       	sbc	r21, r19
     c8a:	9a 01       	movw	r18, r20
     c8c:	05 e6       	ldi	r16, 0x65	; 101
     c8e:	10 e0       	ldi	r17, 0x00	; 0
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     c90:	1d 82       	std	Y+5, r1	; 0x05
     c92:	1e 82       	std	Y+6, r1	; 0x06
     c94:	1f 82       	std	Y+7, r1	; 0x07
     c96:	18 86       	std	Y+8, r1	; 0x08
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			motorLeftSpeed = speedCurrent + (speedCurrentLeft + (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     c98:	ac 01       	movw	r20, r24
     c9a:	99 0f       	add	r25, r25
     c9c:	66 0b       	sbc	r22, r22
     c9e:	77 0b       	sbc	r23, r23
     ca0:	4d 87       	std	Y+13, r20	; 0x0d
     ca2:	5e 87       	std	Y+14, r21	; 0x0e
     ca4:	6f 87       	std	Y+15, r22	; 0x0f
     ca6:	78 8b       	std	Y+16, r23	; 0x10
     ca8:	b9 01       	movw	r22, r18
     caa:	33 0f       	add	r19, r19
     cac:	88 0b       	sbc	r24, r24
     cae:	99 0b       	sbc	r25, r25
     cb0:	69 8b       	std	Y+17, r22	; 0x11
     cb2:	7a 8b       	std	Y+18, r23	; 0x12
     cb4:	8b 8b       	std	Y+19, r24	; 0x13
     cb6:	9c 8b       	std	Y+20, r25	; 0x14
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     cb8:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <get_ms>
     cbc:	7e 8b       	std	Y+22, r23	; 0x16
     cbe:	6d 8b       	std	Y+21, r22	; 0x15
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
     cc0:	60 91 d3 01 	lds	r22, 0x01D3	; 0x8001d3 <speedCurrent>
     cc4:	70 91 d4 01 	lds	r23, 0x01D4	; 0x8001d4 <speedCurrent+0x1>
     cc8:	07 2e       	mov	r0, r23
     cca:	00 0c       	add	r0, r0
     ccc:	88 0b       	sbc	r24, r24
     cce:	99 0b       	sbc	r25, r25
     cd0:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__floatsisf>
     cd4:	69 87       	std	Y+9, r22	; 0x09
     cd6:	7a 87       	std	Y+10, r23	; 0x0a
     cd8:	8b 87       	std	Y+11, r24	; 0x0b
     cda:	9c 87       	std	Y+12, r25	; 0x0c
     cdc:	2b ed       	ldi	r18, 0xDB	; 219
     cde:	3f e0       	ldi	r19, 0x0F	; 15
     ce0:	49 ec       	ldi	r20, 0xC9	; 201
     ce2:	50 e4       	ldi	r21, 0x40	; 64
     ce4:	6d 81       	ldd	r22, Y+5	; 0x05
     ce6:	7e 81       	ldd	r23, Y+6	; 0x06
     ce8:	8f 81       	ldd	r24, Y+7	; 0x07
     cea:	98 85       	ldd	r25, Y+8	; 0x08
     cec:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__mulsf3>
     cf0:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <sin>
     cf4:	23 e8       	ldi	r18, 0x83	; 131
     cf6:	39 ef       	ldi	r19, 0xF9	; 249
     cf8:	42 e2       	ldi	r20, 0x22	; 34
     cfa:	5e e3       	ldi	r21, 0x3E	; 62
     cfc:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__mulsf3>
     d00:	2d 81       	ldd	r18, Y+5	; 0x05
     d02:	3e 81       	ldd	r19, Y+6	; 0x06
     d04:	4f 81       	ldd	r20, Y+7	; 0x07
     d06:	58 85       	ldd	r21, Y+8	; 0x08
     d08:	0e 94 07 0b 	call	0x160e	; 0x160e <__addsf3>
     d0c:	4b 01       	movw	r8, r22
     d0e:	5c 01       	movw	r10, r24
			
			motorLeftSpeed = speedCurrent + (speedCurrentLeft + (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     d10:	60 91 d1 01 	lds	r22, 0x01D1	; 0x8001d1 <speedCurrentRight>
     d14:	70 91 d2 01 	lds	r23, 0x01D2	; 0x8001d2 <speedCurrentRight+0x1>
     d18:	07 2e       	mov	r0, r23
     d1a:	00 0c       	add	r0, r0
     d1c:	88 0b       	sbc	r24, r24
     d1e:	99 0b       	sbc	r25, r25
     d20:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__floatsisf>
     d24:	2b 01       	movw	r4, r22
     d26:	3c 01       	movw	r6, r24
     d28:	6d 85       	ldd	r22, Y+13	; 0x0d
     d2a:	7e 85       	ldd	r23, Y+14	; 0x0e
     d2c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d2e:	98 89       	ldd	r25, Y+16	; 0x10
     d30:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__floatsisf>
     d34:	a5 01       	movw	r20, r10
     d36:	94 01       	movw	r18, r8
     d38:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__mulsf3>
     d3c:	9b 01       	movw	r18, r22
     d3e:	ac 01       	movw	r20, r24
     d40:	c3 01       	movw	r24, r6
     d42:	b2 01       	movw	r22, r4
     d44:	0e 94 06 0b 	call	0x160c	; 0x160c <__subsf3>
     d48:	29 85       	ldd	r18, Y+9	; 0x09
     d4a:	3a 85       	ldd	r19, Y+10	; 0x0a
     d4c:	4b 85       	ldd	r20, Y+11	; 0x0b
     d4e:	5c 85       	ldd	r21, Y+12	; 0x0c
     d50:	0e 94 07 0b 	call	0x160e	; 0x160e <__addsf3>
     d54:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__fixsfsi>
     d58:	2b 01       	movw	r4, r22
     d5a:	3c 01       	movw	r6, r24
     d5c:	60 91 cf 01 	lds	r22, 0x01CF	; 0x8001cf <speedCurrentLeft>
     d60:	70 91 d0 01 	lds	r23, 0x01D0	; 0x8001d0 <speedCurrentLeft+0x1>
     d64:	07 2e       	mov	r0, r23
     d66:	00 0c       	add	r0, r0
     d68:	88 0b       	sbc	r24, r24
     d6a:	99 0b       	sbc	r25, r25
     d6c:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__floatsisf>
     d70:	6b 01       	movw	r12, r22
     d72:	7c 01       	movw	r14, r24
     d74:	69 89       	ldd	r22, Y+17	; 0x11
     d76:	7a 89       	ldd	r23, Y+18	; 0x12
     d78:	8b 89       	ldd	r24, Y+19	; 0x13
     d7a:	9c 89       	ldd	r25, Y+20	; 0x14
     d7c:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__floatsisf>
     d80:	a5 01       	movw	r20, r10
     d82:	94 01       	movw	r18, r8
     d84:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__mulsf3>
     d88:	9b 01       	movw	r18, r22
     d8a:	ac 01       	movw	r20, r24
     d8c:	c7 01       	movw	r24, r14
     d8e:	b6 01       	movw	r22, r12
     d90:	0e 94 07 0b 	call	0x160e	; 0x160e <__addsf3>
     d94:	29 85       	ldd	r18, Y+9	; 0x09
     d96:	3a 85       	ldd	r19, Y+10	; 0x0a
     d98:	4b 85       	ldd	r20, Y+11	; 0x0b
     d9a:	5c 85       	ldd	r21, Y+12	; 0x0c
     d9c:	0e 94 07 0b 	call	0x160e	; 0x160e <__addsf3>
     da0:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__fixsfsi>
     da4:	dc 01       	movw	r26, r24
     da6:	cb 01       	movw	r24, r22
     da8:	b2 01       	movw	r22, r4
     daa:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     dae:	8d 89       	ldd	r24, Y+21	; 0x15
     db0:	9e 89       	ldd	r25, Y+22	; 0x16
     db2:	4c 01       	movw	r8, r24
     db4:	99 0f       	add	r25, r25
     db6:	aa 08       	sbc	r10, r10
     db8:	bb 08       	sbc	r11, r11
     dba:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <get_ms>
     dbe:	6b 01       	movw	r12, r22
     dc0:	7c 01       	movw	r14, r24
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	40 e2       	ldi	r20, 0x20	; 32
     dc8:	51 e4       	ldi	r21, 0x41	; 65
     dca:	69 81       	ldd	r22, Y+1	; 0x01
     dcc:	7a 81       	ldd	r23, Y+2	; 0x02
     dce:	8b 81       	ldd	r24, Y+3	; 0x03
     dd0:	9c 81       	ldd	r25, Y+4	; 0x04
     dd2:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__mulsf3>
     dd6:	2b 01       	movw	r4, r22
     dd8:	3c 01       	movw	r6, r24
     dda:	c7 01       	movw	r24, r14
     ddc:	b6 01       	movw	r22, r12
     dde:	68 19       	sub	r22, r8
     de0:	79 09       	sbc	r23, r9
     de2:	8a 09       	sbc	r24, r10
     de4:	9b 09       	sbc	r25, r11
     de6:	0e 94 ae 0b 	call	0x175c	; 0x175c <__floatunsisf>
     dea:	a3 01       	movw	r20, r6
     dec:	92 01       	movw	r18, r4
     dee:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__cmpsf2>
     df2:	88 23       	and	r24, r24
     df4:	14 f3       	brlt	.-60     	; 0xdba <motorControl+0x3d8>
		case 'R':
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     df6:	2a e0       	ldi	r18, 0x0A	; 10
     df8:	37 ed       	ldi	r19, 0xD7	; 215
     dfa:	43 e2       	ldi	r20, 0x23	; 35
     dfc:	5c e3       	ldi	r21, 0x3C	; 60
     dfe:	6d 81       	ldd	r22, Y+5	; 0x05
     e00:	7e 81       	ldd	r23, Y+6	; 0x06
     e02:	8f 81       	ldd	r24, Y+7	; 0x07
     e04:	98 85       	ldd	r25, Y+8	; 0x08
     e06:	0e 94 07 0b 	call	0x160e	; 0x160e <__addsf3>
     e0a:	6d 83       	std	Y+5, r22	; 0x05
     e0c:	7e 83       	std	Y+6, r23	; 0x06
     e0e:	8f 83       	std	Y+7, r24	; 0x07
     e10:	98 87       	std	Y+8, r25	; 0x08
     e12:	01 50       	subi	r16, 0x01	; 1
     e14:	11 09       	sbc	r17, r1
     e16:	09 f0       	breq	.+2      	; 0xe1a <motorControl+0x438>
     e18:	4f cf       	rjmp	.-354    	; 0xcb8 <motorControl+0x2d6>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = -speed;
     e1a:	88 27       	eor	r24, r24
     e1c:	99 27       	eor	r25, r25
     e1e:	82 19       	sub	r24, r2
     e20:	93 09       	sbc	r25, r3
     e22:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <speedCurrentRight+0x1>
     e26:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <speedCurrentRight>
		speedCurrentLeft = speed;
     e2a:	30 92 d0 01 	sts	0x01D0, r3	; 0x8001d0 <speedCurrentLeft+0x1>
     e2e:	20 92 cf 01 	sts	0x01CF, r2	; 0x8001cf <speedCurrentLeft>
     e32:	05 e6       	ldi	r16, 0x65	; 101
     e34:	10 e0       	ldi	r17, 0x00	; 0
		speed = 0;
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     e36:	19 82       	std	Y+1, r1	; 0x01
     e38:	1a 82       	std	Y+2, r1	; 0x02
     e3a:	1b 82       	std	Y+3, r1	; 0x03
     e3c:	1c 82       	std	Y+4, r1	; 0x04
			timerStart = get_ms();
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
     e3e:	9c 01       	movw	r18, r24
     e40:	99 0f       	add	r25, r25
     e42:	44 0b       	sbc	r20, r20
     e44:	55 0b       	sbc	r21, r21
     e46:	29 87       	std	Y+9, r18	; 0x09
     e48:	3a 87       	std	Y+10, r19	; 0x0a
     e4a:	4b 87       	std	Y+11, r20	; 0x0b
     e4c:	5c 87       	std	Y+12, r21	; 0x0c
     e4e:	c1 2c       	mov	r12, r1
     e50:	d1 2c       	mov	r13, r1
     e52:	76 01       	movw	r14, r12
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     e54:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <get_ms>
     e58:	7e 87       	std	Y+14, r23	; 0x0e
     e5a:	6d 87       	std	Y+13, r22	; 0x0d
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
     e5c:	60 91 d3 01 	lds	r22, 0x01D3	; 0x8001d3 <speedCurrent>
     e60:	70 91 d4 01 	lds	r23, 0x01D4	; 0x8001d4 <speedCurrent+0x1>
     e64:	07 2e       	mov	r0, r23
     e66:	00 0c       	add	r0, r0
     e68:	88 0b       	sbc	r24, r24
     e6a:	99 0b       	sbc	r25, r25
     e6c:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__floatsisf>
     e70:	69 83       	std	Y+1, r22	; 0x01
     e72:	7a 83       	std	Y+2, r23	; 0x02
     e74:	8b 83       	std	Y+3, r24	; 0x03
     e76:	9c 83       	std	Y+4, r25	; 0x04
     e78:	2b ed       	ldi	r18, 0xDB	; 219
     e7a:	3f e0       	ldi	r19, 0x0F	; 15
     e7c:	49 ec       	ldi	r20, 0xC9	; 201
     e7e:	50 e4       	ldi	r21, 0x40	; 64
     e80:	c7 01       	movw	r24, r14
     e82:	b6 01       	movw	r22, r12
     e84:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__mulsf3>
     e88:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <sin>
     e8c:	23 e8       	ldi	r18, 0x83	; 131
     e8e:	39 ef       	ldi	r19, 0xF9	; 249
     e90:	42 e2       	ldi	r20, 0x22	; 34
     e92:	5e e3       	ldi	r21, 0x3E	; 62
     e94:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__mulsf3>
     e98:	a7 01       	movw	r20, r14
     e9a:	96 01       	movw	r18, r12
     e9c:	0e 94 07 0b 	call	0x160e	; 0x160e <__addsf3>
     ea0:	4b 01       	movw	r8, r22
     ea2:	5c 01       	movw	r10, r24
     ea4:	69 85       	ldd	r22, Y+9	; 0x09
     ea6:	7a 85       	ldd	r23, Y+10	; 0x0a
     ea8:	8b 85       	ldd	r24, Y+11	; 0x0b
     eaa:	9c 85       	ldd	r25, Y+12	; 0x0c
     eac:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__floatsisf>
     eb0:	9b 01       	movw	r18, r22
     eb2:	ac 01       	movw	r20, r24
     eb4:	c5 01       	movw	r24, r10
     eb6:	b4 01       	movw	r22, r8
     eb8:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__mulsf3>
     ebc:	4b 01       	movw	r8, r22
     ebe:	5c 01       	movw	r10, r24
			
			motorLeftSpeed = speedCurrent + (speedCurrentLeft + (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     ec0:	60 91 d1 01 	lds	r22, 0x01D1	; 0x8001d1 <speedCurrentRight>
     ec4:	70 91 d2 01 	lds	r23, 0x01D2	; 0x8001d2 <speedCurrentRight+0x1>
     ec8:	07 2e       	mov	r0, r23
     eca:	00 0c       	add	r0, r0
     ecc:	88 0b       	sbc	r24, r24
     ece:	99 0b       	sbc	r25, r25
     ed0:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__floatsisf>
     ed4:	a5 01       	movw	r20, r10
     ed6:	94 01       	movw	r18, r8
     ed8:	0e 94 06 0b 	call	0x160c	; 0x160c <__subsf3>
     edc:	29 81       	ldd	r18, Y+1	; 0x01
     ede:	3a 81       	ldd	r19, Y+2	; 0x02
     ee0:	4b 81       	ldd	r20, Y+3	; 0x03
     ee2:	5c 81       	ldd	r21, Y+4	; 0x04
     ee4:	0e 94 07 0b 	call	0x160e	; 0x160e <__addsf3>
     ee8:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__fixsfsi>
     eec:	6d 83       	std	Y+5, r22	; 0x05
     eee:	7e 83       	std	Y+6, r23	; 0x06
     ef0:	8f 83       	std	Y+7, r24	; 0x07
     ef2:	98 87       	std	Y+8, r25	; 0x08
     ef4:	60 91 cf 01 	lds	r22, 0x01CF	; 0x8001cf <speedCurrentLeft>
     ef8:	70 91 d0 01 	lds	r23, 0x01D0	; 0x8001d0 <speedCurrentLeft+0x1>
     efc:	07 2e       	mov	r0, r23
     efe:	00 0c       	add	r0, r0
     f00:	88 0b       	sbc	r24, r24
     f02:	99 0b       	sbc	r25, r25
     f04:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__floatsisf>
     f08:	a5 01       	movw	r20, r10
     f0a:	94 01       	movw	r18, r8
     f0c:	0e 94 07 0b 	call	0x160e	; 0x160e <__addsf3>
     f10:	29 81       	ldd	r18, Y+1	; 0x01
     f12:	3a 81       	ldd	r19, Y+2	; 0x02
     f14:	4b 81       	ldd	r20, Y+3	; 0x03
     f16:	5c 81       	ldd	r21, Y+4	; 0x04
     f18:	0e 94 07 0b 	call	0x160e	; 0x160e <__addsf3>
     f1c:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__fixsfsi>
     f20:	dc 01       	movw	r26, r24
     f22:	cb 01       	movw	r24, r22
     f24:	6d 81       	ldd	r22, Y+5	; 0x05
     f26:	7e 81       	ldd	r23, Y+6	; 0x06
     f28:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     f2c:	4d 85       	ldd	r20, Y+13	; 0x0d
     f2e:	5e 85       	ldd	r21, Y+14	; 0x0e
     f30:	4a 01       	movw	r8, r20
     f32:	55 0f       	add	r21, r21
     f34:	aa 08       	sbc	r10, r10
     f36:	bb 08       	sbc	r11, r11
     f38:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <get_ms>
     f3c:	68 19       	sub	r22, r8
     f3e:	79 09       	sbc	r23, r9
     f40:	8a 09       	sbc	r24, r10
     f42:	9b 09       	sbc	r25, r11
     f44:	0e 94 ae 0b 	call	0x175c	; 0x175c <__floatunsisf>
     f48:	9b 01       	movw	r18, r22
     f4a:	ac 01       	movw	r20, r24
     f4c:	c3 01       	movw	r24, r6
     f4e:	b2 01       	movw	r22, r4
     f50:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <__gesf2>
     f54:	18 16       	cp	r1, r24
     f56:	84 f3       	brlt	.-32     	; 0xf38 <motorControl+0x556>
		speed = 0;
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     f58:	2a e0       	ldi	r18, 0x0A	; 10
     f5a:	37 ed       	ldi	r19, 0xD7	; 215
     f5c:	43 e2       	ldi	r20, 0x23	; 35
     f5e:	5c e3       	ldi	r21, 0x3C	; 60
     f60:	c7 01       	movw	r24, r14
     f62:	b6 01       	movw	r22, r12
     f64:	0e 94 07 0b 	call	0x160e	; 0x160e <__addsf3>
     f68:	6b 01       	movw	r12, r22
     f6a:	7c 01       	movw	r14, r24
     f6c:	01 50       	subi	r16, 0x01	; 1
     f6e:	11 09       	sbc	r17, r1
     f70:	09 f0       	breq	.+2      	; 0xf74 <motorControl+0x592>
     f72:	70 cf       	rjmp	.-288    	; 0xe54 <motorControl+0x472>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = -speed;
     f74:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <speedCurrentRight+0x1>
     f78:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <speedCurrentRight>
		speedCurrentLeft = speed;
     f7c:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <speedCurrentLeft+0x1>
     f80:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <speedCurrentLeft>
		
		break;
     f84:	62 c1       	rjmp	.+708    	; 0x124a <motorControl+0x868>

		case 'L':
		
		setSpeedRight = speed - speedCurrentRight;
     f86:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <speedCurrentRight>
     f8a:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <speedCurrentRight+0x1>
     f8e:	91 01       	movw	r18, r2
     f90:	28 1b       	sub	r18, r24
     f92:	39 0b       	sbc	r19, r25
		setSpeedLeft = speed + speedCurrentLeft;
     f94:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <speedCurrentLeft>
     f98:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <speedCurrentLeft+0x1>
     f9c:	82 0d       	add	r24, r2
     f9e:	93 1d       	adc	r25, r3
     fa0:	65 e6       	ldi	r22, 0x65	; 101
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	7a 8b       	std	Y+18, r23	; 0x12
     fa6:	69 8b       	std	Y+17, r22	; 0x11
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     fa8:	1d 82       	std	Y+5, r1	; 0x05
     faa:	1e 82       	std	Y+6, r1	; 0x06
     fac:	1f 82       	std	Y+7, r1	; 0x07
     fae:	18 86       	std	Y+8, r1	; 0x08
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
			
			motorLeftSpeed = speedCurrentLeft - (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ));
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     fb0:	a9 01       	movw	r20, r18
     fb2:	33 0f       	add	r19, r19
     fb4:	66 0b       	sbc	r22, r22
     fb6:	77 0b       	sbc	r23, r23
     fb8:	49 87       	std	Y+9, r20	; 0x09
     fba:	5a 87       	std	Y+10, r21	; 0x0a
     fbc:	6b 87       	std	Y+11, r22	; 0x0b
     fbe:	7c 87       	std	Y+12, r23	; 0x0c
     fc0:	9c 01       	movw	r18, r24
     fc2:	99 0f       	add	r25, r25
     fc4:	44 0b       	sbc	r20, r20
     fc6:	55 0b       	sbc	r21, r21
     fc8:	2d 87       	std	Y+13, r18	; 0x0d
     fca:	3e 87       	std	Y+14, r19	; 0x0e
     fcc:	4f 87       	std	Y+15, r20	; 0x0f
     fce:	58 8b       	std	Y+16, r21	; 0x10
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     fd0:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <get_ms>
     fd4:	8b 01       	movw	r16, r22
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
     fd6:	2b ed       	ldi	r18, 0xDB	; 219
     fd8:	3f e0       	ldi	r19, 0x0F	; 15
     fda:	49 ec       	ldi	r20, 0xC9	; 201
     fdc:	50 e4       	ldi	r21, 0x40	; 64
     fde:	6d 81       	ldd	r22, Y+5	; 0x05
     fe0:	7e 81       	ldd	r23, Y+6	; 0x06
     fe2:	8f 81       	ldd	r24, Y+7	; 0x07
     fe4:	98 85       	ldd	r25, Y+8	; 0x08
     fe6:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__mulsf3>
     fea:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <sin>
     fee:	23 e8       	ldi	r18, 0x83	; 131
     ff0:	39 ef       	ldi	r19, 0xF9	; 249
     ff2:	42 e2       	ldi	r20, 0x22	; 34
     ff4:	5e e3       	ldi	r21, 0x3E	; 62
     ff6:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__mulsf3>
     ffa:	2d 81       	ldd	r18, Y+5	; 0x05
     ffc:	3e 81       	ldd	r19, Y+6	; 0x06
     ffe:	4f 81       	ldd	r20, Y+7	; 0x07
    1000:	58 85       	ldd	r21, Y+8	; 0x08
    1002:	0e 94 07 0b 	call	0x160e	; 0x160e <__addsf3>
    1006:	6b 01       	movw	r12, r22
    1008:	7c 01       	movw	r14, r24
			
			motorLeftSpeed = speedCurrentLeft - (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ));
			
			set_motors(motorLeftSpeed, motorRightSpeed);
    100a:	60 91 d1 01 	lds	r22, 0x01D1	; 0x8001d1 <speedCurrentRight>
    100e:	70 91 d2 01 	lds	r23, 0x01D2	; 0x8001d2 <speedCurrentRight+0x1>
    1012:	07 2e       	mov	r0, r23
    1014:	00 0c       	add	r0, r0
    1016:	88 0b       	sbc	r24, r24
    1018:	99 0b       	sbc	r25, r25
    101a:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__floatsisf>
    101e:	4b 01       	movw	r8, r22
    1020:	5c 01       	movw	r10, r24
    1022:	69 85       	ldd	r22, Y+9	; 0x09
    1024:	7a 85       	ldd	r23, Y+10	; 0x0a
    1026:	8b 85       	ldd	r24, Y+11	; 0x0b
    1028:	9c 85       	ldd	r25, Y+12	; 0x0c
    102a:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__floatsisf>
    102e:	a7 01       	movw	r20, r14
    1030:	96 01       	movw	r18, r12
    1032:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__mulsf3>
    1036:	9b 01       	movw	r18, r22
    1038:	ac 01       	movw	r20, r24
    103a:	c5 01       	movw	r24, r10
    103c:	b4 01       	movw	r22, r8
    103e:	0e 94 07 0b 	call	0x160e	; 0x160e <__addsf3>
    1042:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__fixsfsi>
    1046:	4b 01       	movw	r8, r22
    1048:	5c 01       	movw	r10, r24
    104a:	60 91 cf 01 	lds	r22, 0x01CF	; 0x8001cf <speedCurrentLeft>
    104e:	70 91 d0 01 	lds	r23, 0x01D0	; 0x8001d0 <speedCurrentLeft+0x1>
    1052:	07 2e       	mov	r0, r23
    1054:	00 0c       	add	r0, r0
    1056:	88 0b       	sbc	r24, r24
    1058:	99 0b       	sbc	r25, r25
    105a:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__floatsisf>
    105e:	2b 01       	movw	r4, r22
    1060:	3c 01       	movw	r6, r24
    1062:	6d 85       	ldd	r22, Y+13	; 0x0d
    1064:	7e 85       	ldd	r23, Y+14	; 0x0e
    1066:	8f 85       	ldd	r24, Y+15	; 0x0f
    1068:	98 89       	ldd	r25, Y+16	; 0x10
    106a:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__floatsisf>
    106e:	a7 01       	movw	r20, r14
    1070:	96 01       	movw	r18, r12
    1072:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__mulsf3>
    1076:	9b 01       	movw	r18, r22
    1078:	ac 01       	movw	r20, r24
    107a:	c3 01       	movw	r24, r6
    107c:	b2 01       	movw	r22, r4
    107e:	0e 94 06 0b 	call	0x160c	; 0x160c <__subsf3>
    1082:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__fixsfsi>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	b4 01       	movw	r22, r8
    108c:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
    1090:	48 01       	movw	r8, r16
    1092:	11 0f       	add	r17, r17
    1094:	aa 08       	sbc	r10, r10
    1096:	bb 08       	sbc	r11, r11
    1098:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <get_ms>
    109c:	2b 01       	movw	r4, r22
    109e:	3c 01       	movw	r6, r24
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	40 e2       	ldi	r20, 0x20	; 32
    10a6:	51 e4       	ldi	r21, 0x41	; 65
    10a8:	69 81       	ldd	r22, Y+1	; 0x01
    10aa:	7a 81       	ldd	r23, Y+2	; 0x02
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
    10ae:	9c 81       	ldd	r25, Y+4	; 0x04
    10b0:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__mulsf3>
    10b4:	6b 01       	movw	r12, r22
    10b6:	7c 01       	movw	r14, r24
    10b8:	c3 01       	movw	r24, r6
    10ba:	b2 01       	movw	r22, r4
    10bc:	68 19       	sub	r22, r8
    10be:	79 09       	sbc	r23, r9
    10c0:	8a 09       	sbc	r24, r10
    10c2:	9b 09       	sbc	r25, r11
    10c4:	0e 94 ae 0b 	call	0x175c	; 0x175c <__floatunsisf>
    10c8:	a7 01       	movw	r20, r14
    10ca:	96 01       	movw	r18, r12
    10cc:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__cmpsf2>
    10d0:	88 23       	and	r24, r24
    10d2:	14 f3       	brlt	.-60     	; 0x1098 <motorControl+0x6b6>
		case 'L':
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
    10d4:	2a e0       	ldi	r18, 0x0A	; 10
    10d6:	37 ed       	ldi	r19, 0xD7	; 215
    10d8:	43 e2       	ldi	r20, 0x23	; 35
    10da:	5c e3       	ldi	r21, 0x3C	; 60
    10dc:	6d 81       	ldd	r22, Y+5	; 0x05
    10de:	7e 81       	ldd	r23, Y+6	; 0x06
    10e0:	8f 81       	ldd	r24, Y+7	; 0x07
    10e2:	98 85       	ldd	r25, Y+8	; 0x08
    10e4:	0e 94 07 0b 	call	0x160e	; 0x160e <__addsf3>
    10e8:	6d 83       	std	Y+5, r22	; 0x05
    10ea:	7e 83       	std	Y+6, r23	; 0x06
    10ec:	8f 83       	std	Y+7, r24	; 0x07
    10ee:	98 87       	std	Y+8, r25	; 0x08
    10f0:	a9 89       	ldd	r26, Y+17	; 0x11
    10f2:	ba 89       	ldd	r27, Y+18	; 0x12
    10f4:	11 97       	sbiw	r26, 0x01	; 1
    10f6:	ba 8b       	std	Y+18, r27	; 0x12
    10f8:	a9 8b       	std	Y+17, r26	; 0x11
    10fa:	ab 2b       	or	r26, r27
    10fc:	09 f0       	breq	.+2      	; 0x1100 <motorControl+0x71e>
    10fe:	68 cf       	rjmp	.-304    	; 0xfd0 <motorControl+0x5ee>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = speed;
    1100:	30 92 d2 01 	sts	0x01D2, r3	; 0x8001d2 <speedCurrentRight+0x1>
    1104:	20 92 d1 01 	sts	0x01D1, r2	; 0x8001d1 <speedCurrentRight>
		speedCurrentLeft = -speed;
    1108:	31 94       	neg	r3
    110a:	21 94       	neg	r2
    110c:	31 08       	sbc	r3, r1
    110e:	30 92 d0 01 	sts	0x01D0, r3	; 0x8001d0 <speedCurrentLeft+0x1>
    1112:	20 92 cf 01 	sts	0x01CF, r2	; 0x8001cf <speedCurrentLeft>
    1116:	25 e6       	ldi	r18, 0x65	; 101
    1118:	30 e0       	ldi	r19, 0x00	; 0
		speed = 0;
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
    111a:	19 82       	std	Y+1, r1	; 0x01
    111c:	1a 82       	std	Y+2, r1	; 0x02
    111e:	1b 82       	std	Y+3, r1	; 0x03
    1120:	1c 82       	std	Y+4, r1	; 0x04
			timerStart = get_ms();
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
    1122:	a1 01       	movw	r20, r2
    1124:	33 0c       	add	r3, r3
    1126:	66 0b       	sbc	r22, r22
    1128:	77 0b       	sbc	r23, r23
    112a:	4d 83       	std	Y+5, r20	; 0x05
    112c:	5e 83       	std	Y+6, r21	; 0x06
    112e:	6f 83       	std	Y+7, r22	; 0x07
    1130:	78 87       	std	Y+8, r23	; 0x08
    1132:	3a 87       	std	Y+10, r19	; 0x0a
    1134:	29 87       	std	Y+9, r18	; 0x09
    1136:	81 2c       	mov	r8, r1
    1138:	91 2c       	mov	r9, r1
    113a:	54 01       	movw	r10, r8
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
    113c:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <get_ms>
    1140:	8b 01       	movw	r16, r22
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
    1142:	2b ed       	ldi	r18, 0xDB	; 219
    1144:	3f e0       	ldi	r19, 0x0F	; 15
    1146:	49 ec       	ldi	r20, 0xC9	; 201
    1148:	50 e4       	ldi	r21, 0x40	; 64
    114a:	c5 01       	movw	r24, r10
    114c:	b4 01       	movw	r22, r8
    114e:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__mulsf3>
    1152:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <sin>
    1156:	23 e8       	ldi	r18, 0x83	; 131
    1158:	39 ef       	ldi	r19, 0xF9	; 249
    115a:	42 e2       	ldi	r20, 0x22	; 34
    115c:	5e e3       	ldi	r21, 0x3E	; 62
    115e:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__mulsf3>
    1162:	a5 01       	movw	r20, r10
    1164:	94 01       	movw	r18, r8
    1166:	0e 94 07 0b 	call	0x160e	; 0x160e <__addsf3>
    116a:	2b 01       	movw	r4, r22
    116c:	3c 01       	movw	r6, r24
    116e:	6d 81       	ldd	r22, Y+5	; 0x05
    1170:	7e 81       	ldd	r23, Y+6	; 0x06
    1172:	8f 81       	ldd	r24, Y+7	; 0x07
    1174:	98 85       	ldd	r25, Y+8	; 0x08
    1176:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__floatsisf>
    117a:	9b 01       	movw	r18, r22
    117c:	ac 01       	movw	r20, r24
    117e:	c3 01       	movw	r24, r6
    1180:	b2 01       	movw	r22, r4
    1182:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__mulsf3>
    1186:	2b 01       	movw	r4, r22
    1188:	3c 01       	movw	r6, r24
			
			motorLeftSpeed = speedCurrentLeft - (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ));
			
			set_motors(motorLeftSpeed, motorRightSpeed);
    118a:	60 91 d1 01 	lds	r22, 0x01D1	; 0x8001d1 <speedCurrentRight>
    118e:	70 91 d2 01 	lds	r23, 0x01D2	; 0x8001d2 <speedCurrentRight+0x1>
    1192:	07 2e       	mov	r0, r23
    1194:	00 0c       	add	r0, r0
    1196:	88 0b       	sbc	r24, r24
    1198:	99 0b       	sbc	r25, r25
    119a:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__floatsisf>
    119e:	a3 01       	movw	r20, r6
    11a0:	92 01       	movw	r18, r4
    11a2:	0e 94 07 0b 	call	0x160e	; 0x160e <__addsf3>
    11a6:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__fixsfsi>
    11aa:	69 83       	std	Y+1, r22	; 0x01
    11ac:	7a 83       	std	Y+2, r23	; 0x02
    11ae:	8b 83       	std	Y+3, r24	; 0x03
    11b0:	9c 83       	std	Y+4, r25	; 0x04
    11b2:	60 91 cf 01 	lds	r22, 0x01CF	; 0x8001cf <speedCurrentLeft>
    11b6:	70 91 d0 01 	lds	r23, 0x01D0	; 0x8001d0 <speedCurrentLeft+0x1>
    11ba:	07 2e       	mov	r0, r23
    11bc:	00 0c       	add	r0, r0
    11be:	88 0b       	sbc	r24, r24
    11c0:	99 0b       	sbc	r25, r25
    11c2:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__floatsisf>
    11c6:	a3 01       	movw	r20, r6
    11c8:	92 01       	movw	r18, r4
    11ca:	0e 94 06 0b 	call	0x160c	; 0x160c <__subsf3>
    11ce:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <__fixsfsi>
    11d2:	dc 01       	movw	r26, r24
    11d4:	cb 01       	movw	r24, r22
    11d6:	69 81       	ldd	r22, Y+1	; 0x01
    11d8:	7a 81       	ldd	r23, Y+2	; 0x02
    11da:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
    11de:	28 01       	movw	r4, r16
    11e0:	11 0f       	add	r17, r17
    11e2:	66 08       	sbc	r6, r6
    11e4:	77 08       	sbc	r7, r7
    11e6:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <get_ms>
    11ea:	64 19       	sub	r22, r4
    11ec:	75 09       	sbc	r23, r5
    11ee:	86 09       	sbc	r24, r6
    11f0:	97 09       	sbc	r25, r7
    11f2:	0e 94 ae 0b 	call	0x175c	; 0x175c <__floatunsisf>
    11f6:	9b 01       	movw	r18, r22
    11f8:	ac 01       	movw	r20, r24
    11fa:	c7 01       	movw	r24, r14
    11fc:	b6 01       	movw	r22, r12
    11fe:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <__gesf2>
    1202:	18 16       	cp	r1, r24
    1204:	84 f3       	brlt	.-32     	; 0x11e6 <motorControl+0x804>
		speed = 0;
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
    1206:	2a e0       	ldi	r18, 0x0A	; 10
    1208:	37 ed       	ldi	r19, 0xD7	; 215
    120a:	43 e2       	ldi	r20, 0x23	; 35
    120c:	5c e3       	ldi	r21, 0x3C	; 60
    120e:	c5 01       	movw	r24, r10
    1210:	b4 01       	movw	r22, r8
    1212:	0e 94 07 0b 	call	0x160e	; 0x160e <__addsf3>
    1216:	4b 01       	movw	r8, r22
    1218:	5c 01       	movw	r10, r24
    121a:	69 85       	ldd	r22, Y+9	; 0x09
    121c:	7a 85       	ldd	r23, Y+10	; 0x0a
    121e:	61 50       	subi	r22, 0x01	; 1
    1220:	71 09       	sbc	r23, r1
    1222:	7a 87       	std	Y+10, r23	; 0x0a
    1224:	69 87       	std	Y+9, r22	; 0x09
    1226:	67 2b       	or	r22, r23
    1228:	09 f0       	breq	.+2      	; 0x122c <motorControl+0x84a>
    122a:	88 cf       	rjmp	.-240    	; 0x113c <motorControl+0x75a>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = speed;
    122c:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <speedCurrentRight+0x1>
    1230:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <speedCurrentRight>
		speedCurrentLeft = -speed;
    1234:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <speedCurrentLeft+0x1>
    1238:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <speedCurrentLeft>
		break;
    123c:	06 c0       	rjmp	.+12     	; 0x124a <motorControl+0x868>
		
		default:
		set_motors(0,0);
    123e:	60 e0       	ldi	r22, 0x00	; 0
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <set_motors>
		break;
	}
    124a:	66 96       	adiw	r28, 0x16	; 22
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	de bf       	out	0x3e, r29	; 62
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	cd bf       	out	0x3d, r28	; 61
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	1f 91       	pop	r17
    125c:	0f 91       	pop	r16
    125e:	ff 90       	pop	r15
    1260:	ef 90       	pop	r14
    1262:	df 90       	pop	r13
    1264:	cf 90       	pop	r12
    1266:	bf 90       	pop	r11
    1268:	af 90       	pop	r10
    126a:	9f 90       	pop	r9
    126c:	8f 90       	pop	r8
    126e:	7f 90       	pop	r7
    1270:	6f 90       	pop	r6
    1272:	5f 90       	pop	r5
    1274:	4f 90       	pop	r4
    1276:	3f 90       	pop	r3
    1278:	2f 90       	pop	r2
    127a:	08 95       	ret

0000127c <initialize>:
#include "sensoren.h"
#include "motoren.h"


void initialize()
{
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29

	
	unsigned int counter;
	pololu_3pi_init(2000);
    1280:	80 ed       	ldi	r24, 0xD0	; 208
    1282:	97 e0       	ldi	r25, 0x07	; 7
    1284:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <pololu_3pi_init>
	
	while(!button_is_pressed(BUTTON_B))
    1288:	1b c0       	rjmp	.+54     	; 0x12c0 <initialize+0x44>
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
    128a:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <read_battery_millivolts_3pi>
    128e:	ec 01       	movw	r28, r24
	{
		int bat = read_battery_millivolts();
		clear();
    1290:	0e 94 a5 12 	call	0x254a	; 0x254a <clear>
		print_long(bat);
    1294:	be 01       	movw	r22, r28
    1296:	dd 0f       	add	r29, r29
    1298:	88 0b       	sbc	r24, r24
    129a:	99 0b       	sbc	r25, r25
    129c:	0e 94 09 13 	call	0x2612	; 0x2612 <print_long>
		print("mV");
    12a0:	81 e3       	ldi	r24, 0x31	; 49
    12a2:	91 e0       	ldi	r25, 0x01	; 1
    12a4:	0e 94 b4 12 	call	0x2568	; 0x2568 <print>
		lcd_goto_xy(0,1);
    12a8:	61 e0       	ldi	r22, 0x01	; 1
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	0e 94 2c 13 	call	0x2658	; 0x2658 <lcd_goto_xy>
		print("druk B");
    12b0:	84 e3       	ldi	r24, 0x34	; 52
    12b2:	91 e0       	ldi	r25, 0x01	; 1
    12b4:	0e 94 b4 12 	call	0x2568	; 0x2568 <print>
		delay_ms(100);
    12b8:	84 e6       	ldi	r24, 0x64	; 100
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	0e 94 23 15 	call	0x2a46	; 0x2a46 <delay_ms>

	
	unsigned int counter;
	pololu_3pi_init(2000);
	
	while(!button_is_pressed(BUTTON_B))
    12c0:	80 e1       	ldi	r24, 0x10	; 16
    12c2:	0e 94 25 14 	call	0x284a	; 0x284a <button_is_pressed>
    12c6:	88 23       	and	r24, r24
    12c8:	01 f3       	breq	.-64     	; 0x128a <initialize+0xe>
		lcd_goto_xy(0,1);
		print("druk B");
		delay_ms(100);
	}
	
	wait_for_button_release(BUTTON_B);
    12ca:	80 e1       	ldi	r24, 0x10	; 16
    12cc:	0e 94 11 14 	call	0x2822	; 0x2822 <wait_for_button_release>
	delay_ms(1000);
    12d0:	88 ee       	ldi	r24, 0xE8	; 232
    12d2:	93 e0       	ldi	r25, 0x03	; 3
    12d4:	0e 94 23 15 	call	0x2a46	; 0x2a46 <delay_ms>
    12d8:	cc ee       	ldi	r28, 0xEC	; 236
    12da:	df ef       	ldi	r29, 0xFF	; 255
	
	for(counter=0;counter<80;counter++)
	{
		if(counter < 20 || counter >= 60)
    12dc:	c8 32       	cpi	r28, 0x28	; 40
    12de:	d1 05       	cpc	r29, r1
    12e0:	38 f0       	brcs	.+14     	; 0x12f0 <initialize+0x74>
		set_motors(40,-40);
    12e2:	68 ed       	ldi	r22, 0xD8	; 216
    12e4:	7f ef       	ldi	r23, 0xFF	; 255
    12e6:	88 e2       	ldi	r24, 0x28	; 40
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <set_motors>
    12ee:	06 c0       	rjmp	.+12     	; 0x12fc <initialize+0x80>
		else
		set_motors(-40,40);
    12f0:	68 e2       	ldi	r22, 0x28	; 40
    12f2:	70 e0       	ldi	r23, 0x00	; 0
    12f4:	88 ed       	ldi	r24, 0xD8	; 216
    12f6:	9f ef       	ldi	r25, 0xFF	; 255
    12f8:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <set_motors>
		calibrate_line_sensors(IR_EMITTERS_ON);
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	0e 94 75 15 	call	0x2aea	; 0x2aea <calibrate_line_sensors>
		delay_ms(20);
    1302:	84 e1       	ldi	r24, 0x14	; 20
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	0e 94 23 15 	call	0x2a46	; 0x2a46 <delay_ms>
    130a:	21 96       	adiw	r28, 0x01	; 1
	}
	
	wait_for_button_release(BUTTON_B);
	delay_ms(1000);
	
	for(counter=0;counter<80;counter++)
    130c:	cc 33       	cpi	r28, 0x3C	; 60
    130e:	d1 05       	cpc	r29, r1
    1310:	29 f7       	brne	.-54     	; 0x12dc <initialize+0x60>
		set_motors(-40,40);
		calibrate_line_sensors(IR_EMITTERS_ON);
		delay_ms(20);
	}
	
	set_motors(0,0);
    1312:	60 e0       	ldi	r22, 0x00	; 0
    1314:	70 e0       	ldi	r23, 0x00	; 0
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <set_motors>
	
	while(!button_is_pressed(BUTTON_B))
    131e:	1f c0       	rjmp	.+62     	; 0x135e <initialize+0xe2>
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
    1320:	59 9a       	sbi	0x0b, 1	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    1322:	51 9a       	sbi	0x0a, 1	; 10
	{
		red_led(1);
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);
    1324:	61 e0       	ldi	r22, 0x01	; 1
    1326:	81 e3       	ldi	r24, 0x31	; 49
    1328:	92 e0       	ldi	r25, 0x02	; 2
    132a:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <read_line>
    132e:	ec 01       	movw	r28, r24
		clear();
    1330:	0e 94 a5 12 	call	0x254a	; 0x254a <clear>
		print("  ");
    1334:	8b e3       	ldi	r24, 0x3B	; 59
    1336:	91 e0       	ldi	r25, 0x01	; 1
    1338:	0e 94 b4 12 	call	0x2568	; 0x2568 <print>
		print_long(position);
    133c:	be 01       	movw	r22, r28
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	0e 94 09 13 	call	0x2612	; 0x2612 <print_long>
		lcd_goto_xy(0,1);
    1346:	61 e0       	ldi	r22, 0x01	; 1
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	0e 94 2c 13 	call	0x2658	; 0x2658 <lcd_goto_xy>
		print(" ");
    134e:	8c e3       	ldi	r24, 0x3C	; 60
    1350:	91 e0       	ldi	r25, 0x01	; 1
    1352:	0e 94 b4 12 	call	0x2568	; 0x2568 <print>
		delay_ms(100);
    1356:	84 e6       	ldi	r24, 0x64	; 100
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	0e 94 23 15 	call	0x2a46	; 0x2a46 <delay_ms>
		delay_ms(20);
	}
	
	set_motors(0,0);
	
	while(!button_is_pressed(BUTTON_B))
    135e:	80 e1       	ldi	r24, 0x10	; 16
    1360:	0e 94 25 14 	call	0x284a	; 0x284a <button_is_pressed>
    1364:	88 23       	and	r24, r24
    1366:	e1 f2       	breq	.-72     	; 0x1320 <initialize+0xa4>
		lcd_goto_xy(0,1);
		print(" ");
		delay_ms(100);
	}
	
	wait_for_button_release(BUTTON_B);
    1368:	80 e1       	ldi	r24, 0x10	; 16
    136a:	0e 94 11 14 	call	0x2822	; 0x2822 <wait_for_button_release>
	clear();
    136e:	0e 94 a5 12 	call	0x254a	; 0x254a <clear>
	print("Go!");
    1372:	8e e3       	ldi	r24, 0x3E	; 62
    1374:	91 e0       	ldi	r25, 0x01	; 1
    1376:	0e 94 b4 12 	call	0x2568	; 0x2568 <print>
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
    137a:	59 9a       	sbi	0x0b, 1	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    137c:	51 9a       	sbi	0x0a, 1	; 10
	red_led(1);

}
    137e:	df 91       	pop	r29
    1380:	cf 91       	pop	r28
    1382:	08 95       	ret

00001384 <followLine>:


void followLine()
{
    1384:	cf 93       	push	r28
    1386:	df 93       	push	r29
	
	unsigned int pos = read_line(sensors,IR_EMITTERS_ON);
    1388:	61 e0       	ldi	r22, 0x01	; 1
    138a:	81 e3       	ldi	r24, 0x31	; 49
    138c:	92 e0       	ldi	r25, 0x02	; 2
    138e:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <read_line>
    1392:	ec 01       	movw	r28, r24
	clear();
    1394:	0e 94 a5 12 	call	0x254a	; 0x254a <clear>
	
	if(pos < 1950)
    1398:	ce 39       	cpi	r28, 0x9E	; 158
    139a:	87 e0       	ldi	r24, 0x07	; 7
    139c:	d8 07       	cpc	r29, r24
    139e:	98 f4       	brcc	.+38     	; 0x13c6 <followLine+0x42>
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
    13a0:	5f 9a       	sbi	0x0b, 7	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    13a2:	57 9a       	sbi	0x0a, 7	; 10
	{
		// We are far to the right of the line: turn left.
		green_led(1);

		if(pos < 1800)
    13a4:	c8 30       	cpi	r28, 0x08	; 8
    13a6:	d7 40       	sbci	r29, 0x07	; 7
    13a8:	38 f4       	brcc	.+14     	; 0x13b8 <followLine+0x34>
		{
			set_motors(0,SPEED);
    13aa:	6c e3       	ldi	r22, 0x3C	; 60
    13ac:	70 e0       	ldi	r23, 0x00	; 0
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <set_motors>
    13b6:	28 c0       	rjmp	.+80     	; 0x1408 <followLine+0x84>
		}
		else
		{
			set_motors(SLOW,SPEED);
    13b8:	6c e3       	ldi	r22, 0x3C	; 60
    13ba:	70 e0       	ldi	r23, 0x00	; 0
    13bc:	8d e2       	ldi	r24, 0x2D	; 45
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <set_motors>
    13c4:	21 c0       	rjmp	.+66     	; 0x1408 <followLine+0x84>
		}
		
	}
	
	else if (pos > 2050)
    13c6:	c3 30       	cpi	r28, 0x03	; 3
    13c8:	88 e0       	ldi	r24, 0x08	; 8
    13ca:	d8 07       	cpc	r29, r24
    13cc:	98 f0       	brcs	.+38     	; 0x13f4 <followLine+0x70>
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
    13ce:	59 9a       	sbi	0x0b, 1	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    13d0:	51 9a       	sbi	0x0a, 1	; 10
	{
		// We are far to the left of the line: turn right.
		red_led(1);
		
		if(pos > 2200)
    13d2:	c9 39       	cpi	r28, 0x99	; 153
    13d4:	d8 40       	sbci	r29, 0x08	; 8
    13d6:	38 f0       	brcs	.+14     	; 0x13e6 <followLine+0x62>
		{
			set_motors(SPEED,0);
    13d8:	60 e0       	ldi	r22, 0x00	; 0
    13da:	70 e0       	ldi	r23, 0x00	; 0
    13dc:	8c e3       	ldi	r24, 0x3C	; 60
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <set_motors>
    13e4:	11 c0       	rjmp	.+34     	; 0x1408 <followLine+0x84>
		}
		else
		{
			set_motors(FAST,SLOW);
    13e6:	6d e2       	ldi	r22, 0x2D	; 45
    13e8:	70 e0       	ldi	r23, 0x00	; 0
    13ea:	8b e4       	ldi	r24, 0x4B	; 75
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <set_motors>
    13f2:	0a c0       	rjmp	.+20     	; 0x1408 <followLine+0x84>
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
	else
		*(ioPin->portRegister) &= ~ioPin->bitmask;
    13f4:	59 98       	cbi	0x0b, 1	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    13f6:	51 9a       	sbi	0x0a, 1	; 10
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
	else
		*(ioPin->portRegister) &= ~ioPin->bitmask;
    13f8:	5f 98       	cbi	0x0b, 7	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    13fa:	57 9a       	sbi	0x0a, 7	; 10
	}
	else
	{
		red_led(0);
		green_led(0);
		set_motors(SLOW,SLOW);
    13fc:	6d e2       	ldi	r22, 0x2D	; 45
    13fe:	70 e0       	ldi	r23, 0x00	; 0
    1400:	8d e2       	ldi	r24, 0x2D	; 45
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <set_motors>
		
	}

	
}
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	08 95       	ret

0000140e <checkAfslag>:


int checkAfslag()
{
	read_line(sensors,IR_EMITTERS_ON);
    140e:	61 e0       	ldi	r22, 0x01	; 1
    1410:	81 e3       	ldi	r24, 0x31	; 49
    1412:	92 e0       	ldi	r25, 0x02	; 2
    1414:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <read_line>
	play_from_program_space(PSTR(">g32>>c32"));
    1418:	8a e9       	ldi	r24, 0x9A	; 154
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	0e 94 99 11 	call	0x2332	; 0x2332 <play_from_program_space>
	
	if(SENSOR_C_L > high_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
    1420:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <sensors+0x2>
    1424:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <sensors+0x3>
    1428:	89 30       	cpi	r24, 0x09	; 9
    142a:	27 e0       	ldi	r18, 0x07	; 7
    142c:	92 07       	cpc	r25, r18
    142e:	a8 f0       	brcs	.+42     	; 0x145a <checkAfslag+0x4c>
    1430:	20 91 37 02 	lds	r18, 0x0237	; 0x800237 <sensors+0x6>
    1434:	30 91 38 02 	lds	r19, 0x0238	; 0x800238 <sensors+0x7>
    1438:	28 3e       	cpi	r18, 0xE8	; 232
    143a:	33 40       	sbci	r19, 0x03	; 3
    143c:	70 f4       	brcc	.+28     	; 0x145a <checkAfslag+0x4c>
    143e:	20 91 39 02 	lds	r18, 0x0239	; 0x800239 <sensors+0x8>
    1442:	30 91 3a 02 	lds	r19, 0x023A	; 0x80023a <sensors+0x9>
    1446:	28 3e       	cpi	r18, 0xE8	; 232
    1448:	33 40       	sbci	r19, 0x03	; 3
    144a:	38 f4       	brcc	.+14     	; 0x145a <checkAfslag+0x4c>
	{
		delay_ms(1000);
    144c:	88 ee       	ldi	r24, 0xE8	; 232
    144e:	93 e0       	ldi	r25, 0x03	; 3
    1450:	0e 94 23 15 	call	0x2a46	; 0x2a46 <delay_ms>
		return LEFT; //afslag naar links
    1454:	82 e0       	ldi	r24, 0x02	; 2
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	08 95       	ret
	}
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_R < low_range && SENSOR_R > high_range)
    145a:	20 91 31 02 	lds	r18, 0x0231	; 0x800231 <sensors>
    145e:	30 91 32 02 	lds	r19, 0x0232	; 0x800232 <sensors+0x1>
    1462:	28 3e       	cpi	r18, 0xE8	; 232
    1464:	43 e0       	ldi	r20, 0x03	; 3
    1466:	34 07       	cpc	r19, r20
    1468:	d8 f4       	brcc	.+54     	; 0x14a0 <checkAfslag+0x92>
    146a:	88 3e       	cpi	r24, 0xE8	; 232
    146c:	63 e0       	ldi	r22, 0x03	; 3
    146e:	96 07       	cpc	r25, r22
    1470:	b8 f4       	brcc	.+46     	; 0x14a0 <checkAfslag+0x92>
    1472:	40 91 37 02 	lds	r20, 0x0237	; 0x800237 <sensors+0x6>
    1476:	50 91 38 02 	lds	r21, 0x0238	; 0x800238 <sensors+0x7>
    147a:	48 3e       	cpi	r20, 0xE8	; 232
    147c:	53 40       	sbci	r21, 0x03	; 3
    147e:	08 f0       	brcs	.+2      	; 0x1482 <checkAfslag+0x74>
    1480:	a7 c0       	rjmp	.+334    	; 0x15d0 <checkAfslag+0x1c2>
    1482:	40 91 39 02 	lds	r20, 0x0239	; 0x800239 <sensors+0x8>
    1486:	50 91 3a 02 	lds	r21, 0x023A	; 0x80023a <sensors+0x9>
    148a:	49 30       	cpi	r20, 0x09	; 9
    148c:	57 40       	sbci	r21, 0x07	; 7
    148e:	08 f4       	brcc	.+2      	; 0x1492 <checkAfslag+0x84>
    1490:	9f c0       	rjmp	.+318    	; 0x15d0 <checkAfslag+0x1c2>
	{
				delay_ms(1000);
    1492:	88 ee       	ldi	r24, 0xE8	; 232
    1494:	93 e0       	ldi	r25, 0x03	; 3
    1496:	0e 94 23 15 	call	0x2a46	; 0x2a46 <delay_ms>
		return RIGHT; //afslag naar rechts
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	08 95       	ret
	}
	else if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_R > high_range)
    14a0:	29 30       	cpi	r18, 0x09	; 9
    14a2:	47 e0       	ldi	r20, 0x07	; 7
    14a4:	34 07       	cpc	r19, r20
    14a6:	08 f4       	brcc	.+2      	; 0x14aa <checkAfslag+0x9c>
    14a8:	a4 c0       	rjmp	.+328    	; 0x15f2 <checkAfslag+0x1e4>
    14aa:	88 3e       	cpi	r24, 0xE8	; 232
    14ac:	63 e0       	ldi	r22, 0x03	; 3
    14ae:	96 07       	cpc	r25, r22
    14b0:	08 f0       	brcs	.+2      	; 0x14b4 <checkAfslag+0xa6>
    14b2:	99 c0       	rjmp	.+306    	; 0x15e6 <checkAfslag+0x1d8>
    14b4:	40 91 35 02 	lds	r20, 0x0235	; 0x800235 <sensors+0x4>
    14b8:	50 91 36 02 	lds	r21, 0x0236	; 0x800236 <sensors+0x5>
    14bc:	49 30       	cpi	r20, 0x09	; 9
    14be:	57 40       	sbci	r21, 0x07	; 7
    14c0:	a8 f0       	brcs	.+42     	; 0x14ec <checkAfslag+0xde>
    14c2:	40 91 37 02 	lds	r20, 0x0237	; 0x800237 <sensors+0x6>
    14c6:	50 91 38 02 	lds	r21, 0x0238	; 0x800238 <sensors+0x7>
    14ca:	48 3e       	cpi	r20, 0xE8	; 232
    14cc:	53 40       	sbci	r21, 0x03	; 3
    14ce:	70 f4       	brcc	.+28     	; 0x14ec <checkAfslag+0xde>
    14d0:	40 91 39 02 	lds	r20, 0x0239	; 0x800239 <sensors+0x8>
    14d4:	50 91 3a 02 	lds	r21, 0x023A	; 0x80023a <sensors+0x9>
    14d8:	49 30       	cpi	r20, 0x09	; 9
    14da:	57 40       	sbci	r21, 0x07	; 7
    14dc:	38 f0       	brcs	.+14     	; 0x14ec <checkAfslag+0xde>
	{
				delay_ms(1000);
    14de:	88 ee       	ldi	r24, 0xE8	; 232
    14e0:	93 e0       	ldi	r25, 0x03	; 3
    14e2:	0e 94 23 15 	call	0x2a46	; 0x2a46 <delay_ms>
		return FOUR_WAY_JOINT; //kruispunt
    14e6:	86 e0       	ldi	r24, 0x06	; 6
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	08 95       	ret
	}
	else if(SENSOR_L > high_range && SENSOR_C_L > high_range && SENSOR_C_C < low_range && SENSOR_C_R > high_range && SENSOR_R > high_range)
    14ec:	89 30       	cpi	r24, 0x09	; 9
    14ee:	47 e0       	ldi	r20, 0x07	; 7
    14f0:	94 07       	cpc	r25, r20
    14f2:	e0 f0       	brcs	.+56     	; 0x152c <checkAfslag+0x11e>
    14f4:	40 91 35 02 	lds	r20, 0x0235	; 0x800235 <sensors+0x4>
    14f8:	50 91 36 02 	lds	r21, 0x0236	; 0x800236 <sensors+0x5>
    14fc:	48 3e       	cpi	r20, 0xE8	; 232
    14fe:	53 40       	sbci	r21, 0x03	; 3
    1500:	a8 f4       	brcc	.+42     	; 0x152c <checkAfslag+0x11e>
    1502:	40 91 37 02 	lds	r20, 0x0237	; 0x800237 <sensors+0x6>
    1506:	50 91 38 02 	lds	r21, 0x0238	; 0x800238 <sensors+0x7>
    150a:	49 30       	cpi	r20, 0x09	; 9
    150c:	57 40       	sbci	r21, 0x07	; 7
    150e:	70 f0       	brcs	.+28     	; 0x152c <checkAfslag+0x11e>
    1510:	40 91 39 02 	lds	r20, 0x0239	; 0x800239 <sensors+0x8>
    1514:	50 91 3a 02 	lds	r21, 0x023A	; 0x80023a <sensors+0x9>
    1518:	49 30       	cpi	r20, 0x09	; 9
    151a:	57 40       	sbci	r21, 0x07	; 7
    151c:	38 f0       	brcs	.+14     	; 0x152c <checkAfslag+0x11e>
	{
				delay_ms(1000);
    151e:	88 ee       	ldi	r24, 0xE8	; 232
    1520:	93 e0       	ldi	r25, 0x03	; 3
    1522:	0e 94 23 15 	call	0x2a46	; 0x2a46 <delay_ms>
		return T_LEFT_RIGHT; //t-splitsing rechtdoor
    1526:	83 e0       	ldi	r24, 0x03	; 3
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	08 95       	ret
	}
	else if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
    152c:	88 3e       	cpi	r24, 0xE8	; 232
    152e:	43 e0       	ldi	r20, 0x03	; 3
    1530:	94 07       	cpc	r25, r20
    1532:	08 f0       	brcs	.+2      	; 0x1536 <checkAfslag+0x128>
    1534:	53 c0       	rjmp	.+166    	; 0x15dc <checkAfslag+0x1ce>
    1536:	40 91 35 02 	lds	r20, 0x0235	; 0x800235 <sensors+0x4>
    153a:	50 91 36 02 	lds	r21, 0x0236	; 0x800236 <sensors+0x5>
    153e:	49 30       	cpi	r20, 0x09	; 9
    1540:	57 40       	sbci	r21, 0x07	; 7
    1542:	a8 f0       	brcs	.+42     	; 0x156e <checkAfslag+0x160>
    1544:	40 91 37 02 	lds	r20, 0x0237	; 0x800237 <sensors+0x6>
    1548:	50 91 38 02 	lds	r21, 0x0238	; 0x800238 <sensors+0x7>
    154c:	48 3e       	cpi	r20, 0xE8	; 232
    154e:	53 40       	sbci	r21, 0x03	; 3
    1550:	70 f4       	brcc	.+28     	; 0x156e <checkAfslag+0x160>
    1552:	40 91 39 02 	lds	r20, 0x0239	; 0x800239 <sensors+0x8>
    1556:	50 91 3a 02 	lds	r21, 0x023A	; 0x80023a <sensors+0x9>
    155a:	48 3e       	cpi	r20, 0xE8	; 232
    155c:	53 40       	sbci	r21, 0x03	; 3
    155e:	38 f4       	brcc	.+14     	; 0x156e <checkAfslag+0x160>
	{
				delay_ms(1000);
    1560:	88 ee       	ldi	r24, 0xE8	; 232
    1562:	93 e0       	ldi	r25, 0x03	; 3
    1564:	0e 94 23 15 	call	0x2a46	; 0x2a46 <delay_ms>
		return T_LEFT; //t-splitsing linksaf
    1568:	85 e0       	ldi	r24, 0x05	; 5
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	08 95       	ret
	}
	/*else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_C < low_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
	{
		return DEAD_END; //doodlopende straat
	}*/
	else if(SENSOR_L > high_range && SENSOR_C_L > high_range && SENSOR_C_C > high_range && SENSOR_C_R > high_range && SENSOR_R > high_range)
    156e:	29 30       	cpi	r18, 0x09	; 9
    1570:	37 40       	sbci	r19, 0x07	; 7
    1572:	f8 f0       	brcs	.+62     	; 0x15b2 <checkAfslag+0x1a4>
    1574:	89 30       	cpi	r24, 0x09	; 9
    1576:	97 40       	sbci	r25, 0x07	; 7
    1578:	f8 f0       	brcs	.+62     	; 0x15b8 <checkAfslag+0x1aa>
    157a:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <sensors+0x4>
    157e:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <sensors+0x5>
    1582:	89 30       	cpi	r24, 0x09	; 9
    1584:	97 40       	sbci	r25, 0x07	; 7
    1586:	d8 f0       	brcs	.+54     	; 0x15be <checkAfslag+0x1b0>
    1588:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <sensors+0x6>
    158c:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <sensors+0x7>
    1590:	89 30       	cpi	r24, 0x09	; 9
    1592:	97 40       	sbci	r25, 0x07	; 7
    1594:	b8 f0       	brcs	.+46     	; 0x15c4 <checkAfslag+0x1b6>
    1596:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <sensors+0x8>
    159a:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <sensors+0x9>
    159e:	89 30       	cpi	r24, 0x09	; 9
    15a0:	97 40       	sbci	r25, 0x07	; 7
    15a2:	98 f0       	brcs	.+38     	; 0x15ca <checkAfslag+0x1bc>
	{
				delay_ms(1000);
    15a4:	88 ee       	ldi	r24, 0xE8	; 232
    15a6:	93 e0       	ldi	r25, 0x03	; 3
    15a8:	0e 94 23 15 	call	0x2a46	; 0x2a46 <delay_ms>
		return GRID_HOME; //entry grid/home
    15ac:	88 e0       	ldi	r24, 0x08	; 8
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	08 95       	ret
	}
	else {
		return 0;
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	08 95       	ret
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	08 95       	ret
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	08 95       	ret
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	08 95       	ret
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	08 95       	ret
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_R < low_range && SENSOR_R > high_range)
	{
				delay_ms(1000);
		return RIGHT; //afslag naar rechts
	}
	else if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_R > high_range)
    15d0:	29 30       	cpi	r18, 0x09	; 9
    15d2:	47 e0       	ldi	r20, 0x07	; 7
    15d4:	34 07       	cpc	r19, r20
    15d6:	08 f0       	brcs	.+2      	; 0x15da <checkAfslag+0x1cc>
    15d8:	6d cf       	rjmp	.-294    	; 0x14b4 <checkAfslag+0xa6>
    15da:	c9 cf       	rjmp	.-110    	; 0x156e <checkAfslag+0x160>
	else if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
	{
				delay_ms(1000);
		return T_LEFT; //t-splitsing linksaf
	}
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_C_R > high_range)
    15dc:	28 3e       	cpi	r18, 0xE8	; 232
    15de:	63 e0       	ldi	r22, 0x03	; 3
    15e0:	36 07       	cpc	r19, r22
    15e2:	40 f2       	brcs	.-112    	; 0x1574 <checkAfslag+0x166>
    15e4:	c4 cf       	rjmp	.-120    	; 0x156e <checkAfslag+0x160>
	else if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_R > high_range)
	{
				delay_ms(1000);
		return FOUR_WAY_JOINT; //kruispunt
	}
	else if(SENSOR_L > high_range && SENSOR_C_L > high_range && SENSOR_C_C < low_range && SENSOR_C_R > high_range && SENSOR_R > high_range)
    15e6:	89 30       	cpi	r24, 0x09	; 9
    15e8:	47 e0       	ldi	r20, 0x07	; 7
    15ea:	94 07       	cpc	r25, r20
    15ec:	08 f0       	brcs	.+2      	; 0x15f0 <checkAfslag+0x1e2>
    15ee:	82 cf       	rjmp	.-252    	; 0x14f4 <checkAfslag+0xe6>
    15f0:	f5 cf       	rjmp	.-22     	; 0x15dc <checkAfslag+0x1ce>
	else if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
	{
				delay_ms(1000);
		return T_LEFT; //t-splitsing linksaf
	}
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_C_R > high_range)
    15f2:	28 3e       	cpi	r18, 0xE8	; 232
    15f4:	63 e0       	ldi	r22, 0x03	; 3
    15f6:	36 07       	cpc	r19, r22
    15f8:	08 f4       	brcc	.+2      	; 0x15fc <checkAfslag+0x1ee>
    15fa:	b9 cf       	rjmp	.-142    	; 0x156e <checkAfslag+0x160>
	{
				delay_ms(1000);
		return GRID_HOME; //entry grid/home
	}
	else {
		return 0;
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
}
    1600:	08 95       	ret

00001602 <wirMain>:
    1602:	84 ea       	ldi	r24, 0xA4	; 164
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	0e 94 99 11 	call	0x2332	; 0x2332 <play_from_program_space>
    160a:	08 95       	ret

0000160c <__subsf3>:
    160c:	50 58       	subi	r21, 0x80	; 128

0000160e <__addsf3>:
    160e:	bb 27       	eor	r27, r27
    1610:	aa 27       	eor	r26, r26
    1612:	0e 94 1e 0b 	call	0x163c	; 0x163c <__addsf3x>
    1616:	0c 94 26 0c 	jmp	0x184c	; 0x184c <__fp_round>
    161a:	0e 94 18 0c 	call	0x1830	; 0x1830 <__fp_pscA>
    161e:	38 f0       	brcs	.+14     	; 0x162e <__addsf3+0x20>
    1620:	0e 94 1f 0c 	call	0x183e	; 0x183e <__fp_pscB>
    1624:	20 f0       	brcs	.+8      	; 0x162e <__addsf3+0x20>
    1626:	39 f4       	brne	.+14     	; 0x1636 <__addsf3+0x28>
    1628:	9f 3f       	cpi	r25, 0xFF	; 255
    162a:	19 f4       	brne	.+6      	; 0x1632 <__addsf3+0x24>
    162c:	26 f4       	brtc	.+8      	; 0x1636 <__addsf3+0x28>
    162e:	0c 94 15 0c 	jmp	0x182a	; 0x182a <__fp_nan>
    1632:	0e f4       	brtc	.+2      	; 0x1636 <__addsf3+0x28>
    1634:	e0 95       	com	r30
    1636:	e7 fb       	bst	r30, 7
    1638:	0c 94 0f 0c 	jmp	0x181e	; 0x181e <__fp_inf>

0000163c <__addsf3x>:
    163c:	e9 2f       	mov	r30, r25
    163e:	0e 94 37 0c 	call	0x186e	; 0x186e <__fp_split3>
    1642:	58 f3       	brcs	.-42     	; 0x161a <__addsf3+0xc>
    1644:	ba 17       	cp	r27, r26
    1646:	62 07       	cpc	r22, r18
    1648:	73 07       	cpc	r23, r19
    164a:	84 07       	cpc	r24, r20
    164c:	95 07       	cpc	r25, r21
    164e:	20 f0       	brcs	.+8      	; 0x1658 <__addsf3x+0x1c>
    1650:	79 f4       	brne	.+30     	; 0x1670 <__addsf3x+0x34>
    1652:	a6 f5       	brtc	.+104    	; 0x16bc <__addsf3x+0x80>
    1654:	0c 94 59 0c 	jmp	0x18b2	; 0x18b2 <__fp_zero>
    1658:	0e f4       	brtc	.+2      	; 0x165c <__addsf3x+0x20>
    165a:	e0 95       	com	r30
    165c:	0b 2e       	mov	r0, r27
    165e:	ba 2f       	mov	r27, r26
    1660:	a0 2d       	mov	r26, r0
    1662:	0b 01       	movw	r0, r22
    1664:	b9 01       	movw	r22, r18
    1666:	90 01       	movw	r18, r0
    1668:	0c 01       	movw	r0, r24
    166a:	ca 01       	movw	r24, r20
    166c:	a0 01       	movw	r20, r0
    166e:	11 24       	eor	r1, r1
    1670:	ff 27       	eor	r31, r31
    1672:	59 1b       	sub	r21, r25
    1674:	99 f0       	breq	.+38     	; 0x169c <__addsf3x+0x60>
    1676:	59 3f       	cpi	r21, 0xF9	; 249
    1678:	50 f4       	brcc	.+20     	; 0x168e <__addsf3x+0x52>
    167a:	50 3e       	cpi	r21, 0xE0	; 224
    167c:	68 f1       	brcs	.+90     	; 0x16d8 <__addsf3x+0x9c>
    167e:	1a 16       	cp	r1, r26
    1680:	f0 40       	sbci	r31, 0x00	; 0
    1682:	a2 2f       	mov	r26, r18
    1684:	23 2f       	mov	r18, r19
    1686:	34 2f       	mov	r19, r20
    1688:	44 27       	eor	r20, r20
    168a:	58 5f       	subi	r21, 0xF8	; 248
    168c:	f3 cf       	rjmp	.-26     	; 0x1674 <__addsf3x+0x38>
    168e:	46 95       	lsr	r20
    1690:	37 95       	ror	r19
    1692:	27 95       	ror	r18
    1694:	a7 95       	ror	r26
    1696:	f0 40       	sbci	r31, 0x00	; 0
    1698:	53 95       	inc	r21
    169a:	c9 f7       	brne	.-14     	; 0x168e <__addsf3x+0x52>
    169c:	7e f4       	brtc	.+30     	; 0x16bc <__addsf3x+0x80>
    169e:	1f 16       	cp	r1, r31
    16a0:	ba 0b       	sbc	r27, r26
    16a2:	62 0b       	sbc	r22, r18
    16a4:	73 0b       	sbc	r23, r19
    16a6:	84 0b       	sbc	r24, r20
    16a8:	ba f0       	brmi	.+46     	; 0x16d8 <__addsf3x+0x9c>
    16aa:	91 50       	subi	r25, 0x01	; 1
    16ac:	a1 f0       	breq	.+40     	; 0x16d6 <__addsf3x+0x9a>
    16ae:	ff 0f       	add	r31, r31
    16b0:	bb 1f       	adc	r27, r27
    16b2:	66 1f       	adc	r22, r22
    16b4:	77 1f       	adc	r23, r23
    16b6:	88 1f       	adc	r24, r24
    16b8:	c2 f7       	brpl	.-16     	; 0x16aa <__addsf3x+0x6e>
    16ba:	0e c0       	rjmp	.+28     	; 0x16d8 <__addsf3x+0x9c>
    16bc:	ba 0f       	add	r27, r26
    16be:	62 1f       	adc	r22, r18
    16c0:	73 1f       	adc	r23, r19
    16c2:	84 1f       	adc	r24, r20
    16c4:	48 f4       	brcc	.+18     	; 0x16d8 <__addsf3x+0x9c>
    16c6:	87 95       	ror	r24
    16c8:	77 95       	ror	r23
    16ca:	67 95       	ror	r22
    16cc:	b7 95       	ror	r27
    16ce:	f7 95       	ror	r31
    16d0:	9e 3f       	cpi	r25, 0xFE	; 254
    16d2:	08 f0       	brcs	.+2      	; 0x16d6 <__addsf3x+0x9a>
    16d4:	b0 cf       	rjmp	.-160    	; 0x1636 <__addsf3+0x28>
    16d6:	93 95       	inc	r25
    16d8:	88 0f       	add	r24, r24
    16da:	08 f0       	brcs	.+2      	; 0x16de <__addsf3x+0xa2>
    16dc:	99 27       	eor	r25, r25
    16de:	ee 0f       	add	r30, r30
    16e0:	97 95       	ror	r25
    16e2:	87 95       	ror	r24
    16e4:	08 95       	ret

000016e6 <__cmpsf2>:
    16e6:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fp_cmp>
    16ea:	08 f4       	brcc	.+2      	; 0x16ee <__cmpsf2+0x8>
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	08 95       	ret

000016f0 <__fixsfsi>:
    16f0:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__fixunssfsi>
    16f4:	68 94       	set
    16f6:	b1 11       	cpse	r27, r1
    16f8:	0c 94 5a 0c 	jmp	0x18b4	; 0x18b4 <__fp_szero>
    16fc:	08 95       	ret

000016fe <__fixunssfsi>:
    16fe:	0e 94 3f 0c 	call	0x187e	; 0x187e <__fp_splitA>
    1702:	88 f0       	brcs	.+34     	; 0x1726 <__fixunssfsi+0x28>
    1704:	9f 57       	subi	r25, 0x7F	; 127
    1706:	98 f0       	brcs	.+38     	; 0x172e <__fixunssfsi+0x30>
    1708:	b9 2f       	mov	r27, r25
    170a:	99 27       	eor	r25, r25
    170c:	b7 51       	subi	r27, 0x17	; 23
    170e:	b0 f0       	brcs	.+44     	; 0x173c <__fixunssfsi+0x3e>
    1710:	e1 f0       	breq	.+56     	; 0x174a <__fixunssfsi+0x4c>
    1712:	66 0f       	add	r22, r22
    1714:	77 1f       	adc	r23, r23
    1716:	88 1f       	adc	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	1a f0       	brmi	.+6      	; 0x1722 <__fixunssfsi+0x24>
    171c:	ba 95       	dec	r27
    171e:	c9 f7       	brne	.-14     	; 0x1712 <__fixunssfsi+0x14>
    1720:	14 c0       	rjmp	.+40     	; 0x174a <__fixunssfsi+0x4c>
    1722:	b1 30       	cpi	r27, 0x01	; 1
    1724:	91 f0       	breq	.+36     	; 0x174a <__fixunssfsi+0x4c>
    1726:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <__fp_zero>
    172a:	b1 e0       	ldi	r27, 0x01	; 1
    172c:	08 95       	ret
    172e:	0c 94 59 0c 	jmp	0x18b2	; 0x18b2 <__fp_zero>
    1732:	67 2f       	mov	r22, r23
    1734:	78 2f       	mov	r23, r24
    1736:	88 27       	eor	r24, r24
    1738:	b8 5f       	subi	r27, 0xF8	; 248
    173a:	39 f0       	breq	.+14     	; 0x174a <__fixunssfsi+0x4c>
    173c:	b9 3f       	cpi	r27, 0xF9	; 249
    173e:	cc f3       	brlt	.-14     	; 0x1732 <__fixunssfsi+0x34>
    1740:	86 95       	lsr	r24
    1742:	77 95       	ror	r23
    1744:	67 95       	ror	r22
    1746:	b3 95       	inc	r27
    1748:	d9 f7       	brne	.-10     	; 0x1740 <__fixunssfsi+0x42>
    174a:	3e f4       	brtc	.+14     	; 0x175a <__fixunssfsi+0x5c>
    174c:	90 95       	com	r25
    174e:	80 95       	com	r24
    1750:	70 95       	com	r23
    1752:	61 95       	neg	r22
    1754:	7f 4f       	sbci	r23, 0xFF	; 255
    1756:	8f 4f       	sbci	r24, 0xFF	; 255
    1758:	9f 4f       	sbci	r25, 0xFF	; 255
    175a:	08 95       	ret

0000175c <__floatunsisf>:
    175c:	e8 94       	clt
    175e:	09 c0       	rjmp	.+18     	; 0x1772 <__floatsisf+0x12>

00001760 <__floatsisf>:
    1760:	97 fb       	bst	r25, 7
    1762:	3e f4       	brtc	.+14     	; 0x1772 <__floatsisf+0x12>
    1764:	90 95       	com	r25
    1766:	80 95       	com	r24
    1768:	70 95       	com	r23
    176a:	61 95       	neg	r22
    176c:	7f 4f       	sbci	r23, 0xFF	; 255
    176e:	8f 4f       	sbci	r24, 0xFF	; 255
    1770:	9f 4f       	sbci	r25, 0xFF	; 255
    1772:	99 23       	and	r25, r25
    1774:	a9 f0       	breq	.+42     	; 0x17a0 <__floatsisf+0x40>
    1776:	f9 2f       	mov	r31, r25
    1778:	96 e9       	ldi	r25, 0x96	; 150
    177a:	bb 27       	eor	r27, r27
    177c:	93 95       	inc	r25
    177e:	f6 95       	lsr	r31
    1780:	87 95       	ror	r24
    1782:	77 95       	ror	r23
    1784:	67 95       	ror	r22
    1786:	b7 95       	ror	r27
    1788:	f1 11       	cpse	r31, r1
    178a:	f8 cf       	rjmp	.-16     	; 0x177c <__floatsisf+0x1c>
    178c:	fa f4       	brpl	.+62     	; 0x17cc <__floatsisf+0x6c>
    178e:	bb 0f       	add	r27, r27
    1790:	11 f4       	brne	.+4      	; 0x1796 <__floatsisf+0x36>
    1792:	60 ff       	sbrs	r22, 0
    1794:	1b c0       	rjmp	.+54     	; 0x17cc <__floatsisf+0x6c>
    1796:	6f 5f       	subi	r22, 0xFF	; 255
    1798:	7f 4f       	sbci	r23, 0xFF	; 255
    179a:	8f 4f       	sbci	r24, 0xFF	; 255
    179c:	9f 4f       	sbci	r25, 0xFF	; 255
    179e:	16 c0       	rjmp	.+44     	; 0x17cc <__floatsisf+0x6c>
    17a0:	88 23       	and	r24, r24
    17a2:	11 f0       	breq	.+4      	; 0x17a8 <__floatsisf+0x48>
    17a4:	96 e9       	ldi	r25, 0x96	; 150
    17a6:	11 c0       	rjmp	.+34     	; 0x17ca <__floatsisf+0x6a>
    17a8:	77 23       	and	r23, r23
    17aa:	21 f0       	breq	.+8      	; 0x17b4 <__floatsisf+0x54>
    17ac:	9e e8       	ldi	r25, 0x8E	; 142
    17ae:	87 2f       	mov	r24, r23
    17b0:	76 2f       	mov	r23, r22
    17b2:	05 c0       	rjmp	.+10     	; 0x17be <__floatsisf+0x5e>
    17b4:	66 23       	and	r22, r22
    17b6:	71 f0       	breq	.+28     	; 0x17d4 <__floatsisf+0x74>
    17b8:	96 e8       	ldi	r25, 0x86	; 134
    17ba:	86 2f       	mov	r24, r22
    17bc:	70 e0       	ldi	r23, 0x00	; 0
    17be:	60 e0       	ldi	r22, 0x00	; 0
    17c0:	2a f0       	brmi	.+10     	; 0x17cc <__floatsisf+0x6c>
    17c2:	9a 95       	dec	r25
    17c4:	66 0f       	add	r22, r22
    17c6:	77 1f       	adc	r23, r23
    17c8:	88 1f       	adc	r24, r24
    17ca:	da f7       	brpl	.-10     	; 0x17c2 <__floatsisf+0x62>
    17cc:	88 0f       	add	r24, r24
    17ce:	96 95       	lsr	r25
    17d0:	87 95       	ror	r24
    17d2:	97 f9       	bld	r25, 7
    17d4:	08 95       	ret

000017d6 <__fp_cmp>:
    17d6:	99 0f       	add	r25, r25
    17d8:	00 08       	sbc	r0, r0
    17da:	55 0f       	add	r21, r21
    17dc:	aa 0b       	sbc	r26, r26
    17de:	e0 e8       	ldi	r30, 0x80	; 128
    17e0:	fe ef       	ldi	r31, 0xFE	; 254
    17e2:	16 16       	cp	r1, r22
    17e4:	17 06       	cpc	r1, r23
    17e6:	e8 07       	cpc	r30, r24
    17e8:	f9 07       	cpc	r31, r25
    17ea:	c0 f0       	brcs	.+48     	; 0x181c <__fp_cmp+0x46>
    17ec:	12 16       	cp	r1, r18
    17ee:	13 06       	cpc	r1, r19
    17f0:	e4 07       	cpc	r30, r20
    17f2:	f5 07       	cpc	r31, r21
    17f4:	98 f0       	brcs	.+38     	; 0x181c <__fp_cmp+0x46>
    17f6:	62 1b       	sub	r22, r18
    17f8:	73 0b       	sbc	r23, r19
    17fa:	84 0b       	sbc	r24, r20
    17fc:	95 0b       	sbc	r25, r21
    17fe:	39 f4       	brne	.+14     	; 0x180e <__fp_cmp+0x38>
    1800:	0a 26       	eor	r0, r26
    1802:	61 f0       	breq	.+24     	; 0x181c <__fp_cmp+0x46>
    1804:	23 2b       	or	r18, r19
    1806:	24 2b       	or	r18, r20
    1808:	25 2b       	or	r18, r21
    180a:	21 f4       	brne	.+8      	; 0x1814 <__fp_cmp+0x3e>
    180c:	08 95       	ret
    180e:	0a 26       	eor	r0, r26
    1810:	09 f4       	brne	.+2      	; 0x1814 <__fp_cmp+0x3e>
    1812:	a1 40       	sbci	r26, 0x01	; 1
    1814:	a6 95       	lsr	r26
    1816:	8f ef       	ldi	r24, 0xFF	; 255
    1818:	81 1d       	adc	r24, r1
    181a:	81 1d       	adc	r24, r1
    181c:	08 95       	ret

0000181e <__fp_inf>:
    181e:	97 f9       	bld	r25, 7
    1820:	9f 67       	ori	r25, 0x7F	; 127
    1822:	80 e8       	ldi	r24, 0x80	; 128
    1824:	70 e0       	ldi	r23, 0x00	; 0
    1826:	60 e0       	ldi	r22, 0x00	; 0
    1828:	08 95       	ret

0000182a <__fp_nan>:
    182a:	9f ef       	ldi	r25, 0xFF	; 255
    182c:	80 ec       	ldi	r24, 0xC0	; 192
    182e:	08 95       	ret

00001830 <__fp_pscA>:
    1830:	00 24       	eor	r0, r0
    1832:	0a 94       	dec	r0
    1834:	16 16       	cp	r1, r22
    1836:	17 06       	cpc	r1, r23
    1838:	18 06       	cpc	r1, r24
    183a:	09 06       	cpc	r0, r25
    183c:	08 95       	ret

0000183e <__fp_pscB>:
    183e:	00 24       	eor	r0, r0
    1840:	0a 94       	dec	r0
    1842:	12 16       	cp	r1, r18
    1844:	13 06       	cpc	r1, r19
    1846:	14 06       	cpc	r1, r20
    1848:	05 06       	cpc	r0, r21
    184a:	08 95       	ret

0000184c <__fp_round>:
    184c:	09 2e       	mov	r0, r25
    184e:	03 94       	inc	r0
    1850:	00 0c       	add	r0, r0
    1852:	11 f4       	brne	.+4      	; 0x1858 <__fp_round+0xc>
    1854:	88 23       	and	r24, r24
    1856:	52 f0       	brmi	.+20     	; 0x186c <__fp_round+0x20>
    1858:	bb 0f       	add	r27, r27
    185a:	40 f4       	brcc	.+16     	; 0x186c <__fp_round+0x20>
    185c:	bf 2b       	or	r27, r31
    185e:	11 f4       	brne	.+4      	; 0x1864 <__fp_round+0x18>
    1860:	60 ff       	sbrs	r22, 0
    1862:	04 c0       	rjmp	.+8      	; 0x186c <__fp_round+0x20>
    1864:	6f 5f       	subi	r22, 0xFF	; 255
    1866:	7f 4f       	sbci	r23, 0xFF	; 255
    1868:	8f 4f       	sbci	r24, 0xFF	; 255
    186a:	9f 4f       	sbci	r25, 0xFF	; 255
    186c:	08 95       	ret

0000186e <__fp_split3>:
    186e:	57 fd       	sbrc	r21, 7
    1870:	90 58       	subi	r25, 0x80	; 128
    1872:	44 0f       	add	r20, r20
    1874:	55 1f       	adc	r21, r21
    1876:	59 f0       	breq	.+22     	; 0x188e <__fp_splitA+0x10>
    1878:	5f 3f       	cpi	r21, 0xFF	; 255
    187a:	71 f0       	breq	.+28     	; 0x1898 <__fp_splitA+0x1a>
    187c:	47 95       	ror	r20

0000187e <__fp_splitA>:
    187e:	88 0f       	add	r24, r24
    1880:	97 fb       	bst	r25, 7
    1882:	99 1f       	adc	r25, r25
    1884:	61 f0       	breq	.+24     	; 0x189e <__fp_splitA+0x20>
    1886:	9f 3f       	cpi	r25, 0xFF	; 255
    1888:	79 f0       	breq	.+30     	; 0x18a8 <__fp_splitA+0x2a>
    188a:	87 95       	ror	r24
    188c:	08 95       	ret
    188e:	12 16       	cp	r1, r18
    1890:	13 06       	cpc	r1, r19
    1892:	14 06       	cpc	r1, r20
    1894:	55 1f       	adc	r21, r21
    1896:	f2 cf       	rjmp	.-28     	; 0x187c <__fp_split3+0xe>
    1898:	46 95       	lsr	r20
    189a:	f1 df       	rcall	.-30     	; 0x187e <__fp_splitA>
    189c:	08 c0       	rjmp	.+16     	; 0x18ae <__fp_splitA+0x30>
    189e:	16 16       	cp	r1, r22
    18a0:	17 06       	cpc	r1, r23
    18a2:	18 06       	cpc	r1, r24
    18a4:	99 1f       	adc	r25, r25
    18a6:	f1 cf       	rjmp	.-30     	; 0x188a <__fp_splitA+0xc>
    18a8:	86 95       	lsr	r24
    18aa:	71 05       	cpc	r23, r1
    18ac:	61 05       	cpc	r22, r1
    18ae:	08 94       	sec
    18b0:	08 95       	ret

000018b2 <__fp_zero>:
    18b2:	e8 94       	clt

000018b4 <__fp_szero>:
    18b4:	bb 27       	eor	r27, r27
    18b6:	66 27       	eor	r22, r22
    18b8:	77 27       	eor	r23, r23
    18ba:	cb 01       	movw	r24, r22
    18bc:	97 f9       	bld	r25, 7
    18be:	08 95       	ret

000018c0 <__gesf2>:
    18c0:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fp_cmp>
    18c4:	08 f4       	brcc	.+2      	; 0x18c8 <__gesf2+0x8>
    18c6:	8f ef       	ldi	r24, 0xFF	; 255
    18c8:	08 95       	ret

000018ca <__mulsf3>:
    18ca:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <__mulsf3x>
    18ce:	0c 94 26 0c 	jmp	0x184c	; 0x184c <__fp_round>
    18d2:	0e 94 18 0c 	call	0x1830	; 0x1830 <__fp_pscA>
    18d6:	38 f0       	brcs	.+14     	; 0x18e6 <__mulsf3+0x1c>
    18d8:	0e 94 1f 0c 	call	0x183e	; 0x183e <__fp_pscB>
    18dc:	20 f0       	brcs	.+8      	; 0x18e6 <__mulsf3+0x1c>
    18de:	95 23       	and	r25, r21
    18e0:	11 f0       	breq	.+4      	; 0x18e6 <__mulsf3+0x1c>
    18e2:	0c 94 0f 0c 	jmp	0x181e	; 0x181e <__fp_inf>
    18e6:	0c 94 15 0c 	jmp	0x182a	; 0x182a <__fp_nan>
    18ea:	11 24       	eor	r1, r1
    18ec:	0c 94 5a 0c 	jmp	0x18b4	; 0x18b4 <__fp_szero>

000018f0 <__mulsf3x>:
    18f0:	0e 94 37 0c 	call	0x186e	; 0x186e <__fp_split3>
    18f4:	70 f3       	brcs	.-36     	; 0x18d2 <__mulsf3+0x8>

000018f6 <__mulsf3_pse>:
    18f6:	95 9f       	mul	r25, r21
    18f8:	c1 f3       	breq	.-16     	; 0x18ea <__mulsf3+0x20>
    18fa:	95 0f       	add	r25, r21
    18fc:	50 e0       	ldi	r21, 0x00	; 0
    18fe:	55 1f       	adc	r21, r21
    1900:	62 9f       	mul	r22, r18
    1902:	f0 01       	movw	r30, r0
    1904:	72 9f       	mul	r23, r18
    1906:	bb 27       	eor	r27, r27
    1908:	f0 0d       	add	r31, r0
    190a:	b1 1d       	adc	r27, r1
    190c:	63 9f       	mul	r22, r19
    190e:	aa 27       	eor	r26, r26
    1910:	f0 0d       	add	r31, r0
    1912:	b1 1d       	adc	r27, r1
    1914:	aa 1f       	adc	r26, r26
    1916:	64 9f       	mul	r22, r20
    1918:	66 27       	eor	r22, r22
    191a:	b0 0d       	add	r27, r0
    191c:	a1 1d       	adc	r26, r1
    191e:	66 1f       	adc	r22, r22
    1920:	82 9f       	mul	r24, r18
    1922:	22 27       	eor	r18, r18
    1924:	b0 0d       	add	r27, r0
    1926:	a1 1d       	adc	r26, r1
    1928:	62 1f       	adc	r22, r18
    192a:	73 9f       	mul	r23, r19
    192c:	b0 0d       	add	r27, r0
    192e:	a1 1d       	adc	r26, r1
    1930:	62 1f       	adc	r22, r18
    1932:	83 9f       	mul	r24, r19
    1934:	a0 0d       	add	r26, r0
    1936:	61 1d       	adc	r22, r1
    1938:	22 1f       	adc	r18, r18
    193a:	74 9f       	mul	r23, r20
    193c:	33 27       	eor	r19, r19
    193e:	a0 0d       	add	r26, r0
    1940:	61 1d       	adc	r22, r1
    1942:	23 1f       	adc	r18, r19
    1944:	84 9f       	mul	r24, r20
    1946:	60 0d       	add	r22, r0
    1948:	21 1d       	adc	r18, r1
    194a:	82 2f       	mov	r24, r18
    194c:	76 2f       	mov	r23, r22
    194e:	6a 2f       	mov	r22, r26
    1950:	11 24       	eor	r1, r1
    1952:	9f 57       	subi	r25, 0x7F	; 127
    1954:	50 40       	sbci	r21, 0x00	; 0
    1956:	9a f0       	brmi	.+38     	; 0x197e <__mulsf3_pse+0x88>
    1958:	f1 f0       	breq	.+60     	; 0x1996 <__mulsf3_pse+0xa0>
    195a:	88 23       	and	r24, r24
    195c:	4a f0       	brmi	.+18     	; 0x1970 <__mulsf3_pse+0x7a>
    195e:	ee 0f       	add	r30, r30
    1960:	ff 1f       	adc	r31, r31
    1962:	bb 1f       	adc	r27, r27
    1964:	66 1f       	adc	r22, r22
    1966:	77 1f       	adc	r23, r23
    1968:	88 1f       	adc	r24, r24
    196a:	91 50       	subi	r25, 0x01	; 1
    196c:	50 40       	sbci	r21, 0x00	; 0
    196e:	a9 f7       	brne	.-22     	; 0x195a <__mulsf3_pse+0x64>
    1970:	9e 3f       	cpi	r25, 0xFE	; 254
    1972:	51 05       	cpc	r21, r1
    1974:	80 f0       	brcs	.+32     	; 0x1996 <__mulsf3_pse+0xa0>
    1976:	0c 94 0f 0c 	jmp	0x181e	; 0x181e <__fp_inf>
    197a:	0c 94 5a 0c 	jmp	0x18b4	; 0x18b4 <__fp_szero>
    197e:	5f 3f       	cpi	r21, 0xFF	; 255
    1980:	e4 f3       	brlt	.-8      	; 0x197a <__mulsf3_pse+0x84>
    1982:	98 3e       	cpi	r25, 0xE8	; 232
    1984:	d4 f3       	brlt	.-12     	; 0x197a <__mulsf3_pse+0x84>
    1986:	86 95       	lsr	r24
    1988:	77 95       	ror	r23
    198a:	67 95       	ror	r22
    198c:	b7 95       	ror	r27
    198e:	f7 95       	ror	r31
    1990:	e7 95       	ror	r30
    1992:	9f 5f       	subi	r25, 0xFF	; 255
    1994:	c1 f7       	brne	.-16     	; 0x1986 <__mulsf3_pse+0x90>
    1996:	fe 2b       	or	r31, r30
    1998:	88 0f       	add	r24, r24
    199a:	91 1d       	adc	r25, r1
    199c:	96 95       	lsr	r25
    199e:	87 95       	ror	r24
    19a0:	97 f9       	bld	r25, 7
    19a2:	08 95       	ret

000019a4 <sin>:
    19a4:	9f 93       	push	r25
    19a6:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__fp_rempio2>
    19aa:	0f 90       	pop	r0
    19ac:	07 fc       	sbrc	r0, 7
    19ae:	ee 5f       	subi	r30, 0xFE	; 254
    19b0:	0c 94 60 0d 	jmp	0x1ac0	; 0x1ac0 <__fp_sinus>
    19b4:	19 f4       	brne	.+6      	; 0x19bc <sin+0x18>
    19b6:	16 f4       	brtc	.+4      	; 0x19bc <sin+0x18>
    19b8:	0c 94 15 0c 	jmp	0x182a	; 0x182a <__fp_nan>
    19bc:	0c 94 20 0d 	jmp	0x1a40	; 0x1a40 <__fp_mpack>

000019c0 <sqrt>:
    19c0:	0e 94 3f 0c 	call	0x187e	; 0x187e <__fp_splitA>
    19c4:	b8 f3       	brcs	.-18     	; 0x19b4 <sin+0x10>
    19c6:	99 23       	and	r25, r25
    19c8:	c9 f3       	breq	.-14     	; 0x19bc <sin+0x18>
    19ca:	b6 f3       	brts	.-20     	; 0x19b8 <sin+0x14>
    19cc:	9f 57       	subi	r25, 0x7F	; 127
    19ce:	55 0b       	sbc	r21, r21
    19d0:	87 ff       	sbrs	r24, 7
    19d2:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__fp_norm2>
    19d6:	00 24       	eor	r0, r0
    19d8:	a0 e6       	ldi	r26, 0x60	; 96
    19da:	40 ea       	ldi	r20, 0xA0	; 160
    19dc:	90 01       	movw	r18, r0
    19de:	80 58       	subi	r24, 0x80	; 128
    19e0:	56 95       	lsr	r21
    19e2:	97 95       	ror	r25
    19e4:	28 f4       	brcc	.+10     	; 0x19f0 <sqrt+0x30>
    19e6:	80 5c       	subi	r24, 0xC0	; 192
    19e8:	66 0f       	add	r22, r22
    19ea:	77 1f       	adc	r23, r23
    19ec:	88 1f       	adc	r24, r24
    19ee:	20 f0       	brcs	.+8      	; 0x19f8 <sqrt+0x38>
    19f0:	26 17       	cp	r18, r22
    19f2:	37 07       	cpc	r19, r23
    19f4:	48 07       	cpc	r20, r24
    19f6:	30 f4       	brcc	.+12     	; 0x1a04 <sqrt+0x44>
    19f8:	62 1b       	sub	r22, r18
    19fa:	73 0b       	sbc	r23, r19
    19fc:	84 0b       	sbc	r24, r20
    19fe:	20 29       	or	r18, r0
    1a00:	31 29       	or	r19, r1
    1a02:	4a 2b       	or	r20, r26
    1a04:	a6 95       	lsr	r26
    1a06:	17 94       	ror	r1
    1a08:	07 94       	ror	r0
    1a0a:	20 25       	eor	r18, r0
    1a0c:	31 25       	eor	r19, r1
    1a0e:	4a 27       	eor	r20, r26
    1a10:	58 f7       	brcc	.-42     	; 0x19e8 <sqrt+0x28>
    1a12:	66 0f       	add	r22, r22
    1a14:	77 1f       	adc	r23, r23
    1a16:	88 1f       	adc	r24, r24
    1a18:	20 f0       	brcs	.+8      	; 0x1a22 <sqrt+0x62>
    1a1a:	26 17       	cp	r18, r22
    1a1c:	37 07       	cpc	r19, r23
    1a1e:	48 07       	cpc	r20, r24
    1a20:	30 f4       	brcc	.+12     	; 0x1a2e <sqrt+0x6e>
    1a22:	62 0b       	sbc	r22, r18
    1a24:	73 0b       	sbc	r23, r19
    1a26:	84 0b       	sbc	r24, r20
    1a28:	20 0d       	add	r18, r0
    1a2a:	31 1d       	adc	r19, r1
    1a2c:	41 1d       	adc	r20, r1
    1a2e:	a0 95       	com	r26
    1a30:	81 f7       	brne	.-32     	; 0x1a12 <sqrt+0x52>
    1a32:	b9 01       	movw	r22, r18
    1a34:	84 2f       	mov	r24, r20
    1a36:	91 58       	subi	r25, 0x81	; 129
    1a38:	88 0f       	add	r24, r24
    1a3a:	96 95       	lsr	r25
    1a3c:	87 95       	ror	r24
    1a3e:	08 95       	ret

00001a40 <__fp_mpack>:
    1a40:	9f 3f       	cpi	r25, 0xFF	; 255
    1a42:	31 f0       	breq	.+12     	; 0x1a50 <__fp_mpack_finite+0xc>

00001a44 <__fp_mpack_finite>:
    1a44:	91 50       	subi	r25, 0x01	; 1
    1a46:	20 f4       	brcc	.+8      	; 0x1a50 <__fp_mpack_finite+0xc>
    1a48:	87 95       	ror	r24
    1a4a:	77 95       	ror	r23
    1a4c:	67 95       	ror	r22
    1a4e:	b7 95       	ror	r27
    1a50:	88 0f       	add	r24, r24
    1a52:	91 1d       	adc	r25, r1
    1a54:	96 95       	lsr	r25
    1a56:	87 95       	ror	r24
    1a58:	97 f9       	bld	r25, 7
    1a5a:	08 95       	ret

00001a5c <__fp_norm2>:
    1a5c:	91 50       	subi	r25, 0x01	; 1
    1a5e:	50 40       	sbci	r21, 0x00	; 0
    1a60:	66 0f       	add	r22, r22
    1a62:	77 1f       	adc	r23, r23
    1a64:	88 1f       	adc	r24, r24
    1a66:	d2 f7       	brpl	.-12     	; 0x1a5c <__fp_norm2>
    1a68:	08 95       	ret
    1a6a:	0c 94 15 0c 	jmp	0x182a	; 0x182a <__fp_nan>

00001a6e <__fp_rempio2>:
    1a6e:	0e 94 3f 0c 	call	0x187e	; 0x187e <__fp_splitA>
    1a72:	d8 f3       	brcs	.-10     	; 0x1a6a <__fp_norm2+0xe>
    1a74:	e8 94       	clt
    1a76:	e0 e0       	ldi	r30, 0x00	; 0
    1a78:	bb 27       	eor	r27, r27
    1a7a:	9f 57       	subi	r25, 0x7F	; 127
    1a7c:	f0 f0       	brcs	.+60     	; 0x1aba <__fp_rempio2+0x4c>
    1a7e:	2a ed       	ldi	r18, 0xDA	; 218
    1a80:	3f e0       	ldi	r19, 0x0F	; 15
    1a82:	49 ec       	ldi	r20, 0xC9	; 201
    1a84:	06 c0       	rjmp	.+12     	; 0x1a92 <__fp_rempio2+0x24>
    1a86:	ee 0f       	add	r30, r30
    1a88:	bb 0f       	add	r27, r27
    1a8a:	66 1f       	adc	r22, r22
    1a8c:	77 1f       	adc	r23, r23
    1a8e:	88 1f       	adc	r24, r24
    1a90:	28 f0       	brcs	.+10     	; 0x1a9c <__fp_rempio2+0x2e>
    1a92:	b2 3a       	cpi	r27, 0xA2	; 162
    1a94:	62 07       	cpc	r22, r18
    1a96:	73 07       	cpc	r23, r19
    1a98:	84 07       	cpc	r24, r20
    1a9a:	28 f0       	brcs	.+10     	; 0x1aa6 <__fp_rempio2+0x38>
    1a9c:	b2 5a       	subi	r27, 0xA2	; 162
    1a9e:	62 0b       	sbc	r22, r18
    1aa0:	73 0b       	sbc	r23, r19
    1aa2:	84 0b       	sbc	r24, r20
    1aa4:	e3 95       	inc	r30
    1aa6:	9a 95       	dec	r25
    1aa8:	72 f7       	brpl	.-36     	; 0x1a86 <__fp_rempio2+0x18>
    1aaa:	80 38       	cpi	r24, 0x80	; 128
    1aac:	30 f4       	brcc	.+12     	; 0x1aba <__fp_rempio2+0x4c>
    1aae:	9a 95       	dec	r25
    1ab0:	bb 0f       	add	r27, r27
    1ab2:	66 1f       	adc	r22, r22
    1ab4:	77 1f       	adc	r23, r23
    1ab6:	88 1f       	adc	r24, r24
    1ab8:	d2 f7       	brpl	.-12     	; 0x1aae <__fp_rempio2+0x40>
    1aba:	90 48       	sbci	r25, 0x80	; 128
    1abc:	0c 94 22 0d 	jmp	0x1a44	; 0x1a44 <__fp_mpack_finite>

00001ac0 <__fp_sinus>:
    1ac0:	ef 93       	push	r30
    1ac2:	e0 ff       	sbrs	r30, 0
    1ac4:	07 c0       	rjmp	.+14     	; 0x1ad4 <__fp_sinus+0x14>
    1ac6:	a2 ea       	ldi	r26, 0xA2	; 162
    1ac8:	2a ed       	ldi	r18, 0xDA	; 218
    1aca:	3f e0       	ldi	r19, 0x0F	; 15
    1acc:	49 ec       	ldi	r20, 0xC9	; 201
    1ace:	5f eb       	ldi	r21, 0xBF	; 191
    1ad0:	0e 94 1e 0b 	call	0x163c	; 0x163c <__addsf3x>
    1ad4:	0e 94 26 0c 	call	0x184c	; 0x184c <__fp_round>
    1ad8:	0f 90       	pop	r0
    1ada:	03 94       	inc	r0
    1adc:	01 fc       	sbrc	r0, 1
    1ade:	90 58       	subi	r25, 0x80	; 128
    1ae0:	e8 e6       	ldi	r30, 0x68	; 104
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__fp_powsodd>

00001ae8 <__fp_powsodd>:
    1ae8:	9f 93       	push	r25
    1aea:	8f 93       	push	r24
    1aec:	7f 93       	push	r23
    1aee:	6f 93       	push	r22
    1af0:	ff 93       	push	r31
    1af2:	ef 93       	push	r30
    1af4:	9b 01       	movw	r18, r22
    1af6:	ac 01       	movw	r20, r24
    1af8:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__mulsf3>
    1afc:	ef 91       	pop	r30
    1afe:	ff 91       	pop	r31
    1b00:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__fp_powser>
    1b04:	2f 91       	pop	r18
    1b06:	3f 91       	pop	r19
    1b08:	4f 91       	pop	r20
    1b0a:	5f 91       	pop	r21
    1b0c:	0c 94 65 0c 	jmp	0x18ca	; 0x18ca <__mulsf3>

00001b10 <__fp_powser>:
    1b10:	df 93       	push	r29
    1b12:	cf 93       	push	r28
    1b14:	1f 93       	push	r17
    1b16:	0f 93       	push	r16
    1b18:	ff 92       	push	r15
    1b1a:	ef 92       	push	r14
    1b1c:	df 92       	push	r13
    1b1e:	7b 01       	movw	r14, r22
    1b20:	8c 01       	movw	r16, r24
    1b22:	68 94       	set
    1b24:	06 c0       	rjmp	.+12     	; 0x1b32 <__fp_powser+0x22>
    1b26:	da 2e       	mov	r13, r26
    1b28:	ef 01       	movw	r28, r30
    1b2a:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <__mulsf3x>
    1b2e:	fe 01       	movw	r30, r28
    1b30:	e8 94       	clt
    1b32:	a5 91       	lpm	r26, Z+
    1b34:	25 91       	lpm	r18, Z+
    1b36:	35 91       	lpm	r19, Z+
    1b38:	45 91       	lpm	r20, Z+
    1b3a:	55 91       	lpm	r21, Z+
    1b3c:	a6 f3       	brts	.-24     	; 0x1b26 <__fp_powser+0x16>
    1b3e:	ef 01       	movw	r28, r30
    1b40:	0e 94 1e 0b 	call	0x163c	; 0x163c <__addsf3x>
    1b44:	fe 01       	movw	r30, r28
    1b46:	97 01       	movw	r18, r14
    1b48:	a8 01       	movw	r20, r16
    1b4a:	da 94       	dec	r13
    1b4c:	69 f7       	brne	.-38     	; 0x1b28 <__fp_powser+0x18>
    1b4e:	df 90       	pop	r13
    1b50:	ef 90       	pop	r14
    1b52:	ff 90       	pop	r15
    1b54:	0f 91       	pop	r16
    1b56:	1f 91       	pop	r17
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	08 95       	ret

00001b5e <_ZN15OrangutanAnalog7setModeEh.part.0>:
    1b5e:	ec e7       	ldi	r30, 0x7C	; 124
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	8f 7d       	andi	r24, 0xDF	; 223
    1b66:	80 83       	st	Z, r24
    1b68:	08 95       	ret

00001b6a <_ZN15OrangutanAnalog7setModeEh>:
    1b6a:	81 11       	cpse	r24, r1
    1b6c:	03 c0       	rjmp	.+6      	; 0x1b74 <_ZN15OrangutanAnalog7setModeEh+0xa>
    1b6e:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <_ZN15OrangutanAnalog7setModeEh.part.0>
    1b72:	08 95       	ret
    1b74:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1b78:	80 62       	ori	r24, 0x20	; 32
    1b7a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1b7e:	08 95       	ret

00001b80 <_ZN15OrangutanAnalog7getModeEv>:
    1b80:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1b84:	85 fb       	bst	r24, 5
    1b86:	88 27       	eor	r24, r24
    1b88:	80 f9       	bld	r24, 0
    1b8a:	08 95       	ret

00001b8c <_ZN15OrangutanAnalog16conversionResultEv>:
    1b8c:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <_ZN15OrangutanAnalog7getModeEv>
    1b90:	88 23       	and	r24, r24
    1b92:	21 f0       	breq	.+8      	; 0x1b9c <_ZN15OrangutanAnalog16conversionResultEv+0x10>
    1b94:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	08 95       	ret
    1b9c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1ba0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1ba4:	08 95       	ret

00001ba6 <_ZN15OrangutanAnalog15startConversionEhh>:
    1ba6:	80 32       	cpi	r24, 0x20	; 32
    1ba8:	a0 f4       	brcc	.+40     	; 0x1bd2 <_ZN15OrangutanAnalog15startConversionEhh+0x2c>
    1baa:	97 e8       	ldi	r25, 0x87	; 135
    1bac:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1bb0:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1bb4:	66 23       	and	r22, r22
    1bb6:	11 f0       	breq	.+4      	; 0x1bbc <_ZN15OrangutanAnalog15startConversionEhh+0x16>
    1bb8:	90 6c       	ori	r25, 0xC0	; 192
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
    1bbc:	9f 77       	andi	r25, 0x7F	; 127
    1bbe:	90 64       	ori	r25, 0x40	; 64
    1bc0:	90 7e       	andi	r25, 0xE0	; 224
    1bc2:	98 2b       	or	r25, r24
    1bc4:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1bc8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1bcc:	80 64       	ori	r24, 0x40	; 64
    1bce:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1bd2:	08 95       	ret

00001bd4 <_ZN15OrangutanAnalog11readAverageEhj>:
    1bd4:	a0 e0       	ldi	r26, 0x00	; 0
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	e0 ef       	ldi	r30, 0xF0	; 240
    1bda:	fd e0       	ldi	r31, 0x0D	; 13
    1bdc:	0c 94 4e 1b 	jmp	0x369c	; 0x369c <__prologue_saves__+0x14>
    1be0:	eb 01       	movw	r28, r22
    1be2:	60 e0       	ldi	r22, 0x00	; 0
    1be4:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <_ZN15OrangutanAnalog15startConversionEhh>
    1be8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1bec:	86 fd       	sbrc	r24, 6
    1bee:	fc cf       	rjmp	.-8      	; 0x1be8 <_ZN15OrangutanAnalog11readAverageEhj+0x14>
    1bf0:	8e 01       	movw	r16, r28
    1bf2:	c1 2c       	mov	r12, r1
    1bf4:	d1 2c       	mov	r13, r1
    1bf6:	76 01       	movw	r14, r12
    1bf8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1bfc:	80 64       	ori	r24, 0x40	; 64
    1bfe:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1c02:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1c06:	86 fd       	sbrc	r24, 6
    1c08:	fc cf       	rjmp	.-8      	; 0x1c02 <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
    1c0a:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <_ZN15OrangutanAnalog16conversionResultEv>
    1c0e:	c8 0e       	add	r12, r24
    1c10:	d9 1e       	adc	r13, r25
    1c12:	e1 1c       	adc	r14, r1
    1c14:	f1 1c       	adc	r15, r1
    1c16:	01 50       	subi	r16, 0x01	; 1
    1c18:	11 09       	sbc	r17, r1
    1c1a:	01 15       	cp	r16, r1
    1c1c:	11 05       	cpc	r17, r1
    1c1e:	61 f7       	brne	.-40     	; 0x1bf8 <_ZN15OrangutanAnalog11readAverageEhj+0x24>
    1c20:	ce 01       	movw	r24, r28
    1c22:	96 95       	lsr	r25
    1c24:	87 95       	ror	r24
    1c26:	c0 34       	cpi	r28, 0x40	; 64
    1c28:	d1 05       	cpc	r29, r1
    1c2a:	38 f4       	brcc	.+14     	; 0x1c3a <_ZN15OrangutanAnalog11readAverageEhj+0x66>
    1c2c:	8c 0d       	add	r24, r12
    1c2e:	9d 1d       	adc	r25, r13
    1c30:	be 01       	movw	r22, r28
    1c32:	0e 94 cd 1a 	call	0x359a	; 0x359a <__udivmodhi4>
    1c36:	cb 01       	movw	r24, r22
    1c38:	0e c0       	rjmp	.+28     	; 0x1c56 <_ZN15OrangutanAnalog11readAverageEhj+0x82>
    1c3a:	a7 01       	movw	r20, r14
    1c3c:	96 01       	movw	r18, r12
    1c3e:	28 0f       	add	r18, r24
    1c40:	39 1f       	adc	r19, r25
    1c42:	41 1d       	adc	r20, r1
    1c44:	51 1d       	adc	r21, r1
    1c46:	ca 01       	movw	r24, r20
    1c48:	b9 01       	movw	r22, r18
    1c4a:	9e 01       	movw	r18, r28
    1c4c:	40 e0       	ldi	r20, 0x00	; 0
    1c4e:	50 e0       	ldi	r21, 0x00	; 0
    1c50:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <__udivmodsi4>
    1c54:	c9 01       	movw	r24, r18
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	e8 e0       	ldi	r30, 0x08	; 8
    1c5c:	0c 94 6a 1b 	jmp	0x36d4	; 0x36d4 <__epilogue_restores__+0x14>

00001c60 <_ZN15OrangutanAnalog12toMillivoltsEj>:
    1c60:	cf 92       	push	r12
    1c62:	df 92       	push	r13
    1c64:	ef 92       	push	r14
    1c66:	ff 92       	push	r15
    1c68:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
    1c6c:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
    1c70:	9c 01       	movw	r18, r24
    1c72:	0e 94 22 1b 	call	0x3644	; 0x3644 <__umulhisi3>
    1c76:	6b 01       	movw	r12, r22
    1c78:	7c 01       	movw	r14, r24
    1c7a:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <_ZN15OrangutanAnalog7getModeEv>
    1c7e:	88 23       	and	r24, r24
    1c80:	59 f0       	breq	.+22     	; 0x1c98 <_ZN15OrangutanAnalog12toMillivoltsEj+0x38>
    1c82:	c7 01       	movw	r24, r14
    1c84:	b6 01       	movw	r22, r12
    1c86:	61 58       	subi	r22, 0x81	; 129
    1c88:	7f 4f       	sbci	r23, 0xFF	; 255
    1c8a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c8e:	2f ef       	ldi	r18, 0xFF	; 255
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	40 e0       	ldi	r20, 0x00	; 0
    1c94:	50 e0       	ldi	r21, 0x00	; 0
    1c96:	0a c0       	rjmp	.+20     	; 0x1cac <_ZN15OrangutanAnalog12toMillivoltsEj+0x4c>
    1c98:	c7 01       	movw	r24, r14
    1c9a:	b6 01       	movw	r22, r12
    1c9c:	61 50       	subi	r22, 0x01	; 1
    1c9e:	7e 4f       	sbci	r23, 0xFE	; 254
    1ca0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ca2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca4:	2f ef       	ldi	r18, 0xFF	; 255
    1ca6:	33 e0       	ldi	r19, 0x03	; 3
    1ca8:	40 e0       	ldi	r20, 0x00	; 0
    1caa:	50 e0       	ldi	r21, 0x00	; 0
    1cac:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <__udivmodsi4>
    1cb0:	c9 01       	movw	r24, r18
    1cb2:	ff 90       	pop	r15
    1cb4:	ef 90       	pop	r14
    1cb6:	df 90       	pop	r13
    1cb8:	cf 90       	pop	r12
    1cba:	08 95       	ret

00001cbc <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
    1cbc:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <_ZN15OrangutanAnalog11readAverageEhj>
    1cc0:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <_ZN15OrangutanAnalog12toMillivoltsEj>
    1cc4:	08 95       	ret

00001cc6 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
    1cc6:	1f 93       	push	r17
    1cc8:	cf 93       	push	r28
    1cca:	df 93       	push	r29
    1ccc:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <_ZN15OrangutanAnalog7getModeEv>
    1cd0:	18 2f       	mov	r17, r24
    1cd2:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <_ZN15OrangutanAnalog7setModeEh.part.0>
    1cd6:	6a e0       	ldi	r22, 0x0A	; 10
    1cd8:	70 e0       	ldi	r23, 0x00	; 0
    1cda:	86 e0       	ldi	r24, 0x06	; 6
    1cdc:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
    1ce0:	ec 01       	movw	r28, r24
    1ce2:	81 2f       	mov	r24, r17
    1ce4:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <_ZN15OrangutanAnalog7setModeEh>
    1ce8:	ce 01       	movw	r24, r28
    1cea:	88 0f       	add	r24, r24
    1cec:	99 1f       	adc	r25, r25
    1cee:	8c 0f       	add	r24, r28
    1cf0:	9d 1f       	adc	r25, r29
    1cf2:	01 96       	adiw	r24, 0x01	; 1
    1cf4:	96 95       	lsr	r25
    1cf6:	87 95       	ror	r24
    1cf8:	df 91       	pop	r29
    1cfa:	cf 91       	pop	r28
    1cfc:	1f 91       	pop	r17
    1cfe:	08 95       	ret

00001d00 <read_battery_millivolts_3pi>:
    1d00:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
    1d04:	08 95       	ret

00001d06 <_ZL16currentCharacterv>:
    1d06:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <_ZL17use_program_space>
    1d0a:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <__data_end>
    1d0e:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <__data_end+0x1>
    1d12:	99 23       	and	r25, r25
    1d14:	11 f0       	breq	.+4      	; 0x1d1a <_ZL16currentCharacterv+0x14>
    1d16:	84 91       	lpm	r24, Z
    1d18:	01 c0       	rjmp	.+2      	; 0x1d1c <_ZL16currentCharacterv+0x16>
    1d1a:	80 81       	ld	r24, Z
    1d1c:	2f eb       	ldi	r18, 0xBF	; 191
    1d1e:	28 0f       	add	r18, r24
    1d20:	2a 31       	cpi	r18, 0x1A	; 26
    1d22:	10 f4       	brcc	.+4      	; 0x1d28 <_ZL16currentCharacterv+0x22>
    1d24:	80 5e       	subi	r24, 0xE0	; 224
    1d26:	08 95       	ret
    1d28:	80 32       	cpi	r24, 0x20	; 32
    1d2a:	49 f4       	brne	.+18     	; 0x1d3e <_ZL16currentCharacterv+0x38>
    1d2c:	9f 01       	movw	r18, r30
    1d2e:	2f 5f       	subi	r18, 0xFF	; 255
    1d30:	3f 4f       	sbci	r19, 0xFF	; 255
    1d32:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <__data_end+0x1>
    1d36:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <__data_end>
    1d3a:	ef 2b       	or	r30, r31
    1d3c:	31 f7       	brne	.-52     	; 0x1d0a <_ZL16currentCharacterv+0x4>
    1d3e:	08 95       	ret

00001d40 <_ZL9getNumberv>:
    1d40:	1f 93       	push	r17
    1d42:	cf 93       	push	r28
    1d44:	df 93       	push	r29
    1d46:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <_ZL16currentCharacterv>
    1d4a:	c0 e0       	ldi	r28, 0x00	; 0
    1d4c:	d0 e0       	ldi	r29, 0x00	; 0
    1d4e:	1a e0       	ldi	r17, 0x0A	; 10
    1d50:	90 ed       	ldi	r25, 0xD0	; 208
    1d52:	98 0f       	add	r25, r24
    1d54:	9a 30       	cpi	r25, 0x0A	; 10
    1d56:	b8 f4       	brcc	.+46     	; 0x1d86 <_ZL9getNumberv+0x46>
    1d58:	9e 01       	movw	r18, r28
    1d5a:	12 9f       	mul	r17, r18
    1d5c:	e0 01       	movw	r28, r0
    1d5e:	13 9f       	mul	r17, r19
    1d60:	d0 0d       	add	r29, r0
    1d62:	11 24       	eor	r1, r1
    1d64:	c8 0f       	add	r28, r24
    1d66:	d1 1d       	adc	r29, r1
    1d68:	87 fd       	sbrc	r24, 7
    1d6a:	da 95       	dec	r29
    1d6c:	e0 97       	sbiw	r28, 0x30	; 48
    1d6e:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
    1d72:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <__data_end+0x1>
    1d76:	01 96       	adiw	r24, 0x01	; 1
    1d78:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <__data_end+0x1>
    1d7c:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>
    1d80:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <_ZL16currentCharacterv>
    1d84:	e5 cf       	rjmp	.-54     	; 0x1d50 <_ZL9getNumberv+0x10>
    1d86:	ce 01       	movw	r24, r28
    1d88:	df 91       	pop	r29
    1d8a:	cf 91       	pop	r28
    1d8c:	1f 91       	pop	r17
    1d8e:	08 95       	ret

00001d90 <_ZN15OrangutanBuzzer5init2Ev>:
    1d90:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1d94:	83 e2       	ldi	r24, 0x23	; 35
    1d96:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1d9a:	81 e1       	ldi	r24, 0x11	; 17
    1d9c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1da0:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    1da4:	80 e1       	ldi	r24, 0x10	; 16
    1da6:	97 e2       	ldi	r25, 0x27	; 39
    1da8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1dac:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1db0:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1db4:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1db8:	22 9a       	sbi	0x04, 2	; 4
    1dba:	78 94       	sei
    1dbc:	08 95       	ret

00001dbe <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
    1dbe:	8f 92       	push	r8
    1dc0:	9f 92       	push	r9
    1dc2:	af 92       	push	r10
    1dc4:	bf 92       	push	r11
    1dc6:	df 92       	push	r13
    1dc8:	ef 92       	push	r14
    1dca:	ff 92       	push	r15
    1dcc:	0f 93       	push	r16
    1dce:	1f 93       	push	r17
    1dd0:	cf 93       	push	r28
    1dd2:	df 93       	push	r29
    1dd4:	5c 01       	movw	r10, r24
    1dd6:	8b 01       	movw	r16, r22
    1dd8:	d4 2e       	mov	r13, r20
    1dda:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <buzzerInitialized>
    1dde:	81 11       	cpse	r24, r1
    1de0:	05 c0       	rjmp	.+10     	; 0x1dec <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <buzzerInitialized>
    1de8:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <_ZN15OrangutanBuzzer5init2Ev>
    1dec:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <buzzerFinished>
    1df0:	b7 fe       	sbrs	r11, 7
    1df2:	05 c0       	rjmp	.+10     	; 0x1dfe <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
    1df4:	e8 94       	clt
    1df6:	b7 f8       	bld	r11, 7
    1df8:	2a e0       	ldi	r18, 0x0A	; 10
    1dfa:	f2 2e       	mov	r15, r18
    1dfc:	02 c0       	rjmp	.+4      	; 0x1e02 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
    1dfe:	ff 24       	eor	r15, r15
    1e00:	f3 94       	inc	r15
    1e02:	e0 90 81 00 	lds	r14, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1e06:	2e 2d       	mov	r18, r14
    1e08:	28 7f       	andi	r18, 0xF8	; 248
    1e0a:	e2 2e       	mov	r14, r18
    1e0c:	48 ec       	ldi	r20, 0xC8	; 200
    1e0e:	f4 9e       	mul	r15, r20
    1e10:	c0 01       	movw	r24, r0
    1e12:	11 24       	eor	r1, r1
    1e14:	8a 15       	cp	r24, r10
    1e16:	9b 05       	cpc	r25, r11
    1e18:	e0 f4       	brcc	.+56     	; 0x1e52 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
    1e1a:	e5 01       	movw	r28, r10
    1e1c:	51 e1       	ldi	r21, 0x11	; 17
    1e1e:	a5 16       	cp	r10, r21
    1e20:	57 e2       	ldi	r21, 0x27	; 39
    1e22:	b5 06       	cpc	r11, r21
    1e24:	10 f0       	brcs	.+4      	; 0x1e2a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
    1e26:	c0 e1       	ldi	r28, 0x10	; 16
    1e28:	d7 e2       	ldi	r29, 0x27	; 39
    1e2a:	be 01       	movw	r22, r28
    1e2c:	76 95       	lsr	r23
    1e2e:	67 95       	ror	r22
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	60 58       	subi	r22, 0x80	; 128
    1e36:	79 46       	sbci	r23, 0x69	; 105
    1e38:	87 46       	sbci	r24, 0x67	; 103
    1e3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e3c:	4e 01       	movw	r8, r28
    1e3e:	a1 2c       	mov	r10, r1
    1e40:	b1 2c       	mov	r11, r1
    1e42:	a5 01       	movw	r20, r10
    1e44:	94 01       	movw	r18, r8
    1e46:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <__udivmodsi4>
    1e4a:	59 01       	movw	r10, r18
    1e4c:	8e 2d       	mov	r24, r14
    1e4e:	81 60       	ori	r24, 0x01	; 1
    1e50:	24 c0       	rjmp	.+72     	; 0x1e9a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
    1e52:	c8 e2       	ldi	r28, 0x28	; 40
    1e54:	fc 9e       	mul	r15, r28
    1e56:	c0 2d       	mov	r28, r0
    1e58:	11 24       	eor	r1, r1
    1e5a:	d0 e0       	ldi	r29, 0x00	; 0
    1e5c:	ca 15       	cp	r28, r10
    1e5e:	db 05       	cpc	r29, r11
    1e60:	08 f4       	brcc	.+2      	; 0x1e64 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
    1e62:	e5 01       	movw	r28, r10
    1e64:	be 01       	movw	r22, r28
    1e66:	76 95       	lsr	r23
    1e68:	67 95       	ror	r22
    1e6a:	9e 01       	movw	r18, r28
    1e6c:	40 e0       	ldi	r20, 0x00	; 0
    1e6e:	50 e0       	ldi	r21, 0x00	; 0
    1e70:	8a e0       	ldi	r24, 0x0A	; 10
    1e72:	f8 12       	cpse	r15, r24
    1e74:	07 c0       	rjmp	.+14     	; 0x1e84 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	60 5e       	subi	r22, 0xE0	; 224
    1e7c:	73 44       	sbci	r23, 0x43	; 67
    1e7e:	81 44       	sbci	r24, 0x41	; 65
    1e80:	9f 4f       	sbci	r25, 0xFF	; 255
    1e82:	06 c0       	rjmp	.+12     	; 0x1e90 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	60 53       	subi	r22, 0x30	; 48
    1e8a:	7d 4e       	sbci	r23, 0xED	; 237
    1e8c:	8c 4e       	sbci	r24, 0xEC	; 236
    1e8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e90:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <__udivmodsi4>
    1e94:	59 01       	movw	r10, r18
    1e96:	8e 2d       	mov	r24, r14
    1e98:	82 60       	ori	r24, 0x02	; 2
    1e9a:	88 2e       	mov	r8, r24
    1e9c:	2a e0       	ldi	r18, 0x0A	; 10
    1e9e:	f2 12       	cpse	r15, r18
    1ea0:	07 c0       	rjmp	.+14     	; 0x1eb0 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
    1ea2:	ce 01       	movw	r24, r28
    1ea4:	05 96       	adiw	r24, 0x05	; 5
    1ea6:	6a e0       	ldi	r22, 0x0A	; 10
    1ea8:	70 e0       	ldi	r23, 0x00	; 0
    1eaa:	0e 94 cd 1a 	call	0x359a	; 0x359a <__udivmodhi4>
    1eae:	eb 01       	movw	r28, r22
    1eb0:	c8 3e       	cpi	r28, 0xE8	; 232
    1eb2:	43 e0       	ldi	r20, 0x03	; 3
    1eb4:	d4 07       	cpc	r29, r20
    1eb6:	59 f0       	breq	.+22     	; 0x1ece <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    1eb8:	98 01       	movw	r18, r16
    1eba:	de 01       	movw	r26, r28
    1ebc:	0e 94 22 1b 	call	0x3644	; 0x3644 <__umulhisi3>
    1ec0:	28 ee       	ldi	r18, 0xE8	; 232
    1ec2:	33 e0       	ldi	r19, 0x03	; 3
    1ec4:	40 e0       	ldi	r20, 0x00	; 0
    1ec6:	50 e0       	ldi	r21, 0x00	; 0
    1ec8:	0e 94 03 1b 	call	0x3606	; 0x3606 <__divmodsi4>
    1ecc:	89 01       	movw	r16, r18
    1ece:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1ed2:	80 92 81 00 	sts	0x0081, r8	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1ed6:	b0 92 89 00 	sts	0x0089, r11	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1eda:	a0 92 88 00 	sts	0x0088, r10	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1ede:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1ee2:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1ee6:	4d 2d       	mov	r20, r13
    1ee8:	40 31       	cpi	r20, 0x10	; 16
    1eea:	08 f0       	brcs	.+2      	; 0x1eee <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    1eec:	4f e0       	ldi	r20, 0x0F	; 15
    1eee:	80 e1       	ldi	r24, 0x10	; 16
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	84 1b       	sub	r24, r20
    1ef4:	91 09       	sbc	r25, r1
    1ef6:	a9 01       	movw	r20, r18
    1ef8:	02 c0       	rjmp	.+4      	; 0x1efe <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    1efa:	56 95       	lsr	r21
    1efc:	47 95       	ror	r20
    1efe:	8a 95       	dec	r24
    1f00:	e2 f7       	brpl	.-8      	; 0x1efa <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    1f02:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1f06:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1f0a:	10 93 6a 01 	sts	0x016A, r17	; 0x80016a <_ZL13buzzerTimeout+0x1>
    1f0e:	00 93 69 01 	sts	0x0169, r16	; 0x800169 <_ZL13buzzerTimeout>
    1f12:	86 b3       	in	r24, 0x16	; 22
    1f14:	8f ef       	ldi	r24, 0xFF	; 255
    1f16:	86 bb       	out	0x16, r24	; 22
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1f1e:	df 91       	pop	r29
    1f20:	cf 91       	pop	r28
    1f22:	1f 91       	pop	r17
    1f24:	0f 91       	pop	r16
    1f26:	ff 90       	pop	r15
    1f28:	ef 90       	pop	r14
    1f2a:	df 90       	pop	r13
    1f2c:	bf 90       	pop	r11
    1f2e:	af 90       	pop	r10
    1f30:	9f 90       	pop	r9
    1f32:	8f 90       	pop	r8
    1f34:	08 95       	ret

00001f36 <_ZN15OrangutanBuzzer8playNoteEhjh>:
    1f36:	cf 93       	push	r28
    1f38:	df 93       	push	r29
    1f3a:	eb 01       	movw	r28, r22
    1f3c:	8f 3f       	cpi	r24, 0xFF	; 255
    1f3e:	11 f0       	breq	.+4      	; 0x1f44 <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
    1f40:	41 11       	cpse	r20, r1
    1f42:	05 c0       	rjmp	.+10     	; 0x1f4e <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
    1f44:	40 e0       	ldi	r20, 0x00	; 0
    1f46:	be 01       	movw	r22, r28
    1f48:	88 ee       	ldi	r24, 0xE8	; 232
    1f4a:	93 e0       	ldi	r25, 0x03	; 3
    1f4c:	43 c0       	rjmp	.+134    	; 0x1fd4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
    1f4e:	81 31       	cpi	r24, 0x11	; 17
    1f50:	30 f0       	brcs	.+12     	; 0x1f5e <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
    1f52:	50 ef       	ldi	r21, 0xF0	; 240
    1f54:	58 0f       	add	r21, r24
    1f56:	50 36       	cpi	r21, 0x60	; 96
    1f58:	18 f0       	brcs	.+6      	; 0x1f60 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1f5a:	5f e5       	ldi	r21, 0x5F	; 95
    1f5c:	01 c0       	rjmp	.+2      	; 0x1f60 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1f5e:	50 e0       	ldi	r21, 0x00	; 0
    1f60:	85 2f       	mov	r24, r21
    1f62:	6c e0       	ldi	r22, 0x0C	; 12
    1f64:	0e 94 c1 1a 	call	0x3582	; 0x3582 <__udivmodqi4>
    1f68:	68 2f       	mov	r22, r24
    1f6a:	74 ef       	ldi	r23, 0xF4	; 244
    1f6c:	76 03       	mulsu	r23, r22
    1f6e:	90 01       	movw	r18, r0
    1f70:	11 24       	eor	r1, r1
    1f72:	25 0f       	add	r18, r21
    1f74:	31 1d       	adc	r19, r1
    1f76:	2c 30       	cpi	r18, 0x0C	; 12
    1f78:	31 05       	cpc	r19, r1
    1f7a:	40 f4       	brcc	.+16     	; 0x1f8c <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
    1f7c:	f9 01       	movw	r30, r18
    1f7e:	ee 0f       	add	r30, r30
    1f80:	ff 1f       	adc	r31, r31
    1f82:	ec 5e       	subi	r30, 0xEC	; 236
    1f84:	fe 4f       	sbci	r31, 0xFE	; 254
    1f86:	20 81       	ld	r18, Z
    1f88:	31 81       	ldd	r19, Z+1	; 0x01
    1f8a:	02 c0       	rjmp	.+4      	; 0x1f90 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	87 30       	cpi	r24, 0x07	; 7
    1f92:	81 f0       	breq	.+32     	; 0x1fb4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
    1f94:	08 2e       	mov	r0, r24
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
    1f98:	22 0f       	add	r18, r18
    1f9a:	33 1f       	adc	r19, r19
    1f9c:	0a 94       	dec	r0
    1f9e:	e2 f7       	brpl	.-8      	; 0x1f98 <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    1fa0:	82 30       	cpi	r24, 0x02	; 2
    1fa2:	28 f0       	brcs	.+10     	; 0x1fae <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
    1fa4:	c9 01       	movw	r24, r18
    1fa6:	05 96       	adiw	r24, 0x05	; 5
    1fa8:	6a e0       	ldi	r22, 0x0A	; 10
    1faa:	70 e0       	ldi	r23, 0x00	; 0
    1fac:	0c c0       	rjmp	.+24     	; 0x1fc6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
    1fae:	c9 01       	movw	r24, r18
    1fb0:	90 58       	subi	r25, 0x80	; 128
    1fb2:	0c c0       	rjmp	.+24     	; 0x1fcc <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
    1fb4:	c9 01       	movw	r24, r18
    1fb6:	36 e0       	ldi	r19, 0x06	; 6
    1fb8:	88 0f       	add	r24, r24
    1fba:	99 1f       	adc	r25, r25
    1fbc:	3a 95       	dec	r19
    1fbe:	e1 f7       	brne	.-8      	; 0x1fb8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
    1fc0:	02 96       	adiw	r24, 0x02	; 2
    1fc2:	65 e0       	ldi	r22, 0x05	; 5
    1fc4:	70 e0       	ldi	r23, 0x00	; 0
    1fc6:	0e 94 cd 1a 	call	0x359a	; 0x359a <__udivmodhi4>
    1fca:	cb 01       	movw	r24, r22
    1fcc:	40 31       	cpi	r20, 0x10	; 16
    1fce:	08 f0       	brcs	.+2      	; 0x1fd2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    1fd0:	4f e0       	ldi	r20, 0x0F	; 15
    1fd2:	be 01       	movw	r22, r28
    1fd4:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1fd8:	df 91       	pop	r29
    1fda:	cf 91       	pop	r28
    1fdc:	08 95       	ret

00001fde <_ZL8nextNotev>:
    1fde:	a2 e0       	ldi	r26, 0x02	; 2
    1fe0:	b0 e0       	ldi	r27, 0x00	; 0
    1fe2:	e5 ef       	ldi	r30, 0xF5	; 245
    1fe4:	ff e0       	ldi	r31, 0x0F	; 15
    1fe6:	0c 94 46 1b 	jmp	0x368c	; 0x368c <__prologue_saves__+0x4>
    1fea:	90 90 0a 01 	lds	r9, 0x010A	; 0x80010a <_ZL6octave>
    1fee:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <_ZL8staccato>
    1ff2:	88 23       	and	r24, r24
    1ff4:	21 f0       	breq	.+8      	; 0x1ffe <_ZL8nextNotev+0x20>
    1ff6:	60 91 65 01 	lds	r22, 0x0165	; 0x800165 <_ZL22staccato_rest_duration>
    1ffa:	61 11       	cpse	r22, r1
    1ffc:	17 c0       	rjmp	.+46     	; 0x202c <_ZL8nextNotev+0x4e>
    1ffe:	77 24       	eor	r7, r7
    2000:	73 94       	inc	r7
    2002:	b0 ec       	ldi	r27, 0xC0	; 192
    2004:	ab 2e       	mov	r10, r27
    2006:	bd e5       	ldi	r27, 0x5D	; 93
    2008:	bb 2e       	mov	r11, r27
    200a:	1a e0       	ldi	r17, 0x0A	; 10
    200c:	61 2e       	mov	r6, r17
    200e:	04 e0       	ldi	r16, 0x04	; 4
    2010:	80 2e       	mov	r8, r16
    2012:	80 ed       	ldi	r24, 0xD0	; 208
    2014:	c8 2e       	mov	r12, r24
    2016:	87 e0       	ldi	r24, 0x07	; 7
    2018:	d8 2e       	mov	r13, r24
    201a:	94 e0       	ldi	r25, 0x04	; 4
    201c:	e9 2e       	mov	r14, r25
    201e:	f1 2c       	mov	r15, r1
    2020:	04 ef       	ldi	r16, 0xF4	; 244
    2022:	11 e0       	ldi	r17, 0x01	; 1
    2024:	2f e0       	ldi	r18, 0x0F	; 15
    2026:	42 2e       	mov	r4, r18
    2028:	51 2c       	mov	r5, r1
    202a:	15 c0       	rjmp	.+42     	; 0x2056 <_ZL8nextNotev+0x78>
    202c:	70 e0       	ldi	r23, 0x00	; 0
    202e:	40 e0       	ldi	r20, 0x00	; 0
    2030:	88 ee       	ldi	r24, 0xE8	; 232
    2032:	93 e0       	ldi	r25, 0x03	; 3
    2034:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    2038:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <_ZL22staccato_rest_duration>
    203c:	17 c1       	rjmp	.+558    	; 0x226c <_ZL8nextNotev+0x28e>
    203e:	86 36       	cpi	r24, 0x66	; 102
    2040:	d4 f5       	brge	.+116    	; 0x20b6 <_ZL8nextNotev+0xd8>
    2042:	81 36       	cpi	r24, 0x61	; 97
    2044:	09 f4       	brne	.+2      	; 0x2048 <_ZL8nextNotev+0x6a>
    2046:	a9 c0       	rjmp	.+338    	; 0x219a <_ZL8nextNotev+0x1bc>
    2048:	7c f5       	brge	.+94     	; 0x20a8 <_ZL8nextNotev+0xca>
    204a:	8c 33       	cpi	r24, 0x3C	; 60
    204c:	09 f4       	brne	.+2      	; 0x2050 <_ZL8nextNotev+0x72>
    204e:	60 c0       	rjmp	.+192    	; 0x2110 <_ZL8nextNotev+0x132>
    2050:	8e 33       	cpi	r24, 0x3E	; 62
    2052:	81 f4       	brne	.+32     	; 0x2074 <_ZL8nextNotev+0x96>
    2054:	93 94       	inc	r9
    2056:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <_ZL16currentCharacterv>
    205a:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <__data_end>
    205e:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <__data_end+0x1>
    2062:	2f 5f       	subi	r18, 0xFF	; 255
    2064:	3f 4f       	sbci	r19, 0xFF	; 255
    2066:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <__data_end+0x1>
    206a:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <__data_end>
    206e:	85 36       	cpi	r24, 0x65	; 101
    2070:	31 f7       	brne	.-52     	; 0x203e <_ZL8nextNotev+0x60>
    2072:	52 c0       	rjmp	.+164    	; 0x2118 <_ZL8nextNotev+0x13a>
    2074:	81 32       	cpi	r24, 0x21	; 33
    2076:	09 f0       	breq	.+2      	; 0x207a <_ZL8nextNotev+0x9c>
    2078:	8b c0       	rjmp	.+278    	; 0x2190 <_ZL8nextNotev+0x1b2>
    207a:	80 92 0a 01 	sts	0x010A, r8	; 0x80010a <_ZL6octave>
    207e:	d0 92 09 01 	sts	0x0109, r13	; 0x800109 <_ZL19whole_note_duration+0x1>
    2082:	c0 92 08 01 	sts	0x0108, r12	; 0x800108 <_ZL19whole_note_duration>
    2086:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <_ZL9note_type+0x1>
    208a:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <_ZL9note_type>
    208e:	10 93 05 01 	sts	0x0105, r17	; 0x800105 <_ZL8duration+0x1>
    2092:	00 93 04 01 	sts	0x0104, r16	; 0x800104 <_ZL8duration>
    2096:	50 92 03 01 	sts	0x0103, r5	; 0x800103 <_ZL6volume+0x1>
    209a:	40 92 02 01 	sts	0x0102, r4	; 0x800102 <_ZL6volume>
    209e:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <_ZL8staccato>
    20a2:	a4 e0       	ldi	r26, 0x04	; 4
    20a4:	9a 2e       	mov	r9, r26
    20a6:	d7 cf       	rjmp	.-82     	; 0x2056 <_ZL8nextNotev+0x78>
    20a8:	83 36       	cpi	r24, 0x63	; 99
    20aa:	a1 f1       	breq	.+104    	; 0x2114 <_ZL8nextNotev+0x136>
    20ac:	0c f4       	brge	.+2      	; 0x20b0 <_ZL8nextNotev+0xd2>
    20ae:	78 c0       	rjmp	.+240    	; 0x21a0 <_ZL8nextNotev+0x1c2>
    20b0:	10 e0       	ldi	r17, 0x00	; 0
    20b2:	82 e0       	ldi	r24, 0x02	; 2
    20b4:	77 c0       	rjmp	.+238    	; 0x21a4 <_ZL8nextNotev+0x1c6>
    20b6:	8d 36       	cpi	r24, 0x6D	; 109
    20b8:	c1 f1       	breq	.+112    	; 0x212a <_ZL8nextNotev+0x14c>
    20ba:	94 f4       	brge	.+36     	; 0x20e0 <_ZL8nextNotev+0x102>
    20bc:	87 36       	cpi	r24, 0x67	; 103
    20be:	91 f1       	breq	.+100    	; 0x2124 <_ZL8nextNotev+0x146>
    20c0:	74 f1       	brlt	.+92     	; 0x211e <_ZL8nextNotev+0x140>
    20c2:	8c 36       	cpi	r24, 0x6C	; 108
    20c4:	09 f0       	breq	.+2      	; 0x20c8 <_ZL8nextNotev+0xea>
    20c6:	64 c0       	rjmp	.+200    	; 0x2190 <_ZL8nextNotev+0x1b2>
    20c8:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <_ZL9getNumberv>
    20cc:	bc 01       	movw	r22, r24
    20ce:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL9note_type+0x1>
    20d2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL9note_type>
    20d6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    20da:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    20de:	51 c0       	rjmp	.+162    	; 0x2182 <_ZL8nextNotev+0x1a4>
    20e0:	82 37       	cpi	r24, 0x72	; 114
    20e2:	c9 f1       	breq	.+114    	; 0x2156 <_ZL8nextNotev+0x178>
    20e4:	4c f4       	brge	.+18     	; 0x20f8 <_ZL8nextNotev+0x11a>
    20e6:	8f 36       	cpi	r24, 0x6F	; 111
    20e8:	09 f0       	breq	.+2      	; 0x20ec <_ZL8nextNotev+0x10e>
    20ea:	52 c0       	rjmp	.+164    	; 0x2190 <_ZL8nextNotev+0x1b2>
    20ec:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <_ZL9getNumberv>
    20f0:	98 2e       	mov	r9, r24
    20f2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZL6octave>
    20f6:	af cf       	rjmp	.-162    	; 0x2056 <_ZL8nextNotev+0x78>
    20f8:	84 37       	cpi	r24, 0x74	; 116
    20fa:	81 f1       	breq	.+96     	; 0x215c <_ZL8nextNotev+0x17e>
    20fc:	86 37       	cpi	r24, 0x76	; 118
    20fe:	09 f0       	breq	.+2      	; 0x2102 <_ZL8nextNotev+0x124>
    2100:	47 c0       	rjmp	.+142    	; 0x2190 <_ZL8nextNotev+0x1b2>
    2102:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <_ZL9getNumberv>
    2106:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_ZL6volume+0x1>
    210a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_ZL6volume>
    210e:	a3 cf       	rjmp	.-186    	; 0x2056 <_ZL8nextNotev+0x78>
    2110:	9a 94       	dec	r9
    2112:	a1 cf       	rjmp	.-190    	; 0x2056 <_ZL8nextNotev+0x78>
    2114:	10 e0       	ldi	r17, 0x00	; 0
    2116:	20 c0       	rjmp	.+64     	; 0x2158 <_ZL8nextNotev+0x17a>
    2118:	10 e0       	ldi	r17, 0x00	; 0
    211a:	84 e0       	ldi	r24, 0x04	; 4
    211c:	43 c0       	rjmp	.+134    	; 0x21a4 <_ZL8nextNotev+0x1c6>
    211e:	10 e0       	ldi	r17, 0x00	; 0
    2120:	85 e0       	ldi	r24, 0x05	; 5
    2122:	40 c0       	rjmp	.+128    	; 0x21a4 <_ZL8nextNotev+0x1c6>
    2124:	10 e0       	ldi	r17, 0x00	; 0
    2126:	87 e0       	ldi	r24, 0x07	; 7
    2128:	3d c0       	rjmp	.+122    	; 0x21a4 <_ZL8nextNotev+0x1c6>
    212a:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <_ZL16currentCharacterv>
    212e:	8c 36       	cpi	r24, 0x6C	; 108
    2130:	19 f4       	brne	.+6      	; 0x2138 <_ZL8nextNotev+0x15a>
    2132:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <_ZL8staccato>
    2136:	04 c0       	rjmp	.+8      	; 0x2140 <_ZL8nextNotev+0x162>
    2138:	70 92 66 01 	sts	0x0166, r7	; 0x800166 <_ZL8staccato>
    213c:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <_ZL22staccato_rest_duration>
    2140:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <__data_end>
    2144:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <__data_end+0x1>
    2148:	2f 5f       	subi	r18, 0xFF	; 255
    214a:	3f 4f       	sbci	r19, 0xFF	; 255
    214c:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <__data_end+0x1>
    2150:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <__data_end>
    2154:	80 cf       	rjmp	.-256    	; 0x2056 <_ZL8nextNotev+0x78>
    2156:	11 e0       	ldi	r17, 0x01	; 1
    2158:	80 e0       	ldi	r24, 0x00	; 0
    215a:	24 c0       	rjmp	.+72     	; 0x21a4 <_ZL8nextNotev+0x1c6>
    215c:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <_ZL9getNumberv>
    2160:	bc 01       	movw	r22, r24
    2162:	c5 01       	movw	r24, r10
    2164:	0e 94 cd 1a 	call	0x359a	; 0x359a <__udivmodhi4>
    2168:	66 9e       	mul	r6, r22
    216a:	c0 01       	movw	r24, r0
    216c:	67 9e       	mul	r6, r23
    216e:	90 0d       	add	r25, r0
    2170:	11 24       	eor	r1, r1
    2172:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZL19whole_note_duration+0x1>
    2176:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL19whole_note_duration>
    217a:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <_ZL9note_type>
    217e:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <_ZL9note_type+0x1>
    2182:	0e 94 cd 1a 	call	0x359a	; 0x359a <__udivmodhi4>
    2186:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_ZL8duration+0x1>
    218a:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_ZL8duration>
    218e:	63 cf       	rjmp	.-314    	; 0x2056 <_ZL8nextNotev+0x78>
    2190:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <__data_end+0x1>
    2194:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <__data_end>
    2198:	69 c0       	rjmp	.+210    	; 0x226c <_ZL8nextNotev+0x28e>
    219a:	10 e0       	ldi	r17, 0x00	; 0
    219c:	89 e0       	ldi	r24, 0x09	; 9
    219e:	02 c0       	rjmp	.+4      	; 0x21a4 <_ZL8nextNotev+0x1c6>
    21a0:	10 e0       	ldi	r17, 0x00	; 0
    21a2:	8b e0       	ldi	r24, 0x0B	; 11
    21a4:	08 2f       	mov	r16, r24
    21a6:	9c e0       	ldi	r25, 0x0C	; 12
    21a8:	99 9e       	mul	r9, r25
    21aa:	00 0d       	add	r16, r0
    21ac:	11 24       	eor	r1, r1
    21ae:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <_ZL16currentCharacterv>
    21b2:	98 2f       	mov	r25, r24
    21b4:	97 7f       	andi	r25, 0xF7	; 247
    21b6:	93 32       	cpi	r25, 0x23	; 35
    21b8:	61 f4       	brne	.+24     	; 0x21d2 <_ZL8nextNotev+0x1f4>
    21ba:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <__data_end>
    21be:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <__data_end+0x1>
    21c2:	2f 5f       	subi	r18, 0xFF	; 255
    21c4:	3f 4f       	sbci	r19, 0xFF	; 255
    21c6:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <__data_end+0x1>
    21ca:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <__data_end>
    21ce:	0f 5f       	subi	r16, 0xFF	; 255
    21d0:	ee cf       	rjmp	.-36     	; 0x21ae <_ZL8nextNotev+0x1d0>
    21d2:	8d 32       	cpi	r24, 0x2D	; 45
    21d4:	71 f4       	brne	.+28     	; 0x21f2 <_ZL8nextNotev+0x214>
    21d6:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <__data_end>
    21da:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <__data_end+0x1>
    21de:	2f 5f       	subi	r18, 0xFF	; 255
    21e0:	3f 4f       	sbci	r19, 0xFF	; 255
    21e2:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <__data_end+0x1>
    21e6:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <__data_end>
    21ea:	01 50       	subi	r16, 0x01	; 1
    21ec:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <_ZL16currentCharacterv>
    21f0:	f0 cf       	rjmp	.-32     	; 0x21d2 <_ZL8nextNotev+0x1f4>
    21f2:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_ZL8duration>
    21f6:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_ZL8duration+0x1>
    21fa:	81 53       	subi	r24, 0x31	; 49
    21fc:	88 30       	cpi	r24, 0x08	; 8
    21fe:	50 f4       	brcc	.+20     	; 0x2214 <_ZL8nextNotev+0x236>
    2200:	e0 90 08 01 	lds	r14, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    2204:	f0 90 09 01 	lds	r15, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    2208:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <_ZL9getNumberv>
    220c:	bc 01       	movw	r22, r24
    220e:	c7 01       	movw	r24, r14
    2210:	0e 94 cd 1a 	call	0x359a	; 0x359a <__udivmodhi4>
    2214:	7b 01       	movw	r14, r22
    2216:	f6 94       	lsr	r15
    2218:	e7 94       	ror	r14
    221a:	69 83       	std	Y+1, r22	; 0x01
    221c:	7a 83       	std	Y+2, r23	; 0x02
    221e:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <_ZL16currentCharacterv>
    2222:	69 81       	ldd	r22, Y+1	; 0x01
    2224:	7a 81       	ldd	r23, Y+2	; 0x02
    2226:	8e 32       	cpi	r24, 0x2E	; 46
    2228:	69 f4       	brne	.+26     	; 0x2244 <_ZL8nextNotev+0x266>
    222a:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <__data_end>
    222e:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <__data_end+0x1>
    2232:	2f 5f       	subi	r18, 0xFF	; 255
    2234:	3f 4f       	sbci	r19, 0xFF	; 255
    2236:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <__data_end+0x1>
    223a:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <__data_end>
    223e:	6e 0d       	add	r22, r14
    2240:	7f 1d       	adc	r23, r15
    2242:	e9 cf       	rjmp	.-46     	; 0x2216 <_ZL8nextNotev+0x238>
    2244:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <_ZL8staccato>
    2248:	88 23       	and	r24, r24
    224a:	39 f0       	breq	.+14     	; 0x225a <_ZL8nextNotev+0x27c>
    224c:	9b 01       	movw	r18, r22
    224e:	36 95       	lsr	r19
    2250:	27 95       	ror	r18
    2252:	20 93 65 01 	sts	0x0165, r18	; 0x800165 <_ZL22staccato_rest_duration>
    2256:	62 1b       	sub	r22, r18
    2258:	71 09       	sbc	r23, r1
    225a:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <_ZL6volume>
    225e:	11 23       	and	r17, r17
    2260:	11 f0       	breq	.+4      	; 0x2266 <_ZL8nextNotev+0x288>
    2262:	8f ef       	ldi	r24, 0xFF	; 255
    2264:	01 c0       	rjmp	.+2      	; 0x2268 <_ZL8nextNotev+0x28a>
    2266:	80 2f       	mov	r24, r16
    2268:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <_ZN15OrangutanBuzzer8playNoteEhjh>
    226c:	22 96       	adiw	r28, 0x02	; 2
    226e:	e0 e1       	ldi	r30, 0x10	; 16
    2270:	0c 94 62 1b 	jmp	0x36c4	; 0x36c4 <__epilogue_restores__+0x4>

00002274 <__vector_13>:
    2274:	1f 92       	push	r1
    2276:	0f 92       	push	r0
    2278:	0f b6       	in	r0, 0x3f	; 63
    227a:	0f 92       	push	r0
    227c:	11 24       	eor	r1, r1
    227e:	2f 93       	push	r18
    2280:	3f 93       	push	r19
    2282:	4f 93       	push	r20
    2284:	5f 93       	push	r21
    2286:	6f 93       	push	r22
    2288:	7f 93       	push	r23
    228a:	8f 93       	push	r24
    228c:	9f 93       	push	r25
    228e:	af 93       	push	r26
    2290:	bf 93       	push	r27
    2292:	ef 93       	push	r30
    2294:	ff 93       	push	r31
    2296:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <_ZL13buzzerTimeout>
    229a:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <_ZL13buzzerTimeout+0x1>
    229e:	9c 01       	movw	r18, r24
    22a0:	21 50       	subi	r18, 0x01	; 1
    22a2:	31 09       	sbc	r19, r1
    22a4:	30 93 6a 01 	sts	0x016A, r19	; 0x80016a <_ZL13buzzerTimeout+0x1>
    22a8:	20 93 69 01 	sts	0x0169, r18	; 0x800169 <_ZL13buzzerTimeout>
    22ac:	89 2b       	or	r24, r25
    22ae:	11 f5       	brne	.+68     	; 0x22f4 <__vector_13+0x80>
    22b0:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    22b4:	78 94       	sei
    22b6:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    22ba:	88 7f       	andi	r24, 0xF8	; 248
    22bc:	81 60       	ori	r24, 0x01	; 1
    22be:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    22c2:	80 e1       	ldi	r24, 0x10	; 16
    22c4:	97 e2       	ldi	r25, 0x27	; 39
    22c6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    22ca:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    22ce:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    22d2:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <buzzerFinished>
    22dc:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
    22e0:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <__data_end+0x1>
    22e4:	89 2b       	or	r24, r25
    22e6:	31 f0       	breq	.+12     	; 0x22f4 <__vector_13+0x80>
    22e8:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <_ZL17play_mode_setting>
    22ec:	81 11       	cpse	r24, r1
    22ee:	02 c0       	rjmp	.+4      	; 0x22f4 <__vector_13+0x80>
    22f0:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <_ZL8nextNotev>
    22f4:	ff 91       	pop	r31
    22f6:	ef 91       	pop	r30
    22f8:	bf 91       	pop	r27
    22fa:	af 91       	pop	r26
    22fc:	9f 91       	pop	r25
    22fe:	8f 91       	pop	r24
    2300:	7f 91       	pop	r23
    2302:	6f 91       	pop	r22
    2304:	5f 91       	pop	r21
    2306:	4f 91       	pop	r20
    2308:	3f 91       	pop	r19
    230a:	2f 91       	pop	r18
    230c:	0f 90       	pop	r0
    230e:	0f be       	out	0x3f, r0	; 63
    2310:	0f 90       	pop	r0
    2312:	1f 90       	pop	r1
    2314:	18 95       	reti

00002316 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    2316:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    231a:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <__data_end+0x1>
    231e:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <_ZL17use_program_space>
    2328:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <_ZL22staccato_rest_duration>
    232c:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <_ZL8nextNotev>
    2330:	08 95       	ret

00002332 <play_from_program_space>:
    2332:	0e 94 8b 11 	call	0x2316	; 0x2316 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    2336:	08 95       	ret

00002338 <delay_us.constprop.0>:
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	6f 93       	push	r22
    233e:	64 e0       	ldi	r22, 0x04	; 4
    2340:	6a 95       	dec	r22
    2342:	f1 f7       	brne	.-4      	; 0x2340 <delay_us.constprop.0+0x8>
    2344:	6f 91       	pop	r22
    2346:	01 97       	sbiw	r24, 0x01	; 1
    2348:	c9 f7       	brne	.-14     	; 0x233c <delay_us.constprop.0+0x4>
    234a:	08 95       	ret

0000234c <_ZN12OrangutanLCD8busyWaitEv>:
    234c:	0f 93       	push	r16
    234e:	1f 93       	push	r17
    2350:	cf 93       	push	r28
    2352:	df 93       	push	r29
    2354:	1a b1       	in	r17, 0x0a	; 10
    2356:	57 98       	cbi	0x0a, 7	; 10
    2358:	5a 98       	cbi	0x0b, 2	; 11
    235a:	28 9a       	sbi	0x05, 0	; 5
    235c:	c0 e0       	ldi	r28, 0x00	; 0
    235e:	d0 e0       	ldi	r29, 0x00	; 0
    2360:	0e 94 9c 11 	call	0x2338	; 0x2338 <delay_us.constprop.0>
    2364:	5c 9a       	sbi	0x0b, 4	; 11
    2366:	0e 94 9c 11 	call	0x2338	; 0x2338 <delay_us.constprop.0>
    236a:	09 b1       	in	r16, 0x09	; 9
    236c:	5c 98       	cbi	0x0b, 4	; 11
    236e:	0e 94 9c 11 	call	0x2338	; 0x2338 <delay_us.constprop.0>
    2372:	5c 9a       	sbi	0x0b, 4	; 11
    2374:	0e 94 9c 11 	call	0x2338	; 0x2338 <delay_us.constprop.0>
    2378:	5c 98       	cbi	0x0b, 4	; 11
    237a:	24 96       	adiw	r28, 0x04	; 4
    237c:	07 ff       	sbrs	r16, 7
    237e:	10 c0       	rjmp	.+32     	; 0x23a0 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    2380:	ae 01       	movw	r20, r28
    2382:	60 e0       	ldi	r22, 0x00	; 0
    2384:	70 e0       	ldi	r23, 0x00	; 0
    2386:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <lcdTimeout>
    238a:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <lcdTimeout+0x1>
    238e:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <lcdTimeout+0x2>
    2392:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <lcdTimeout+0x3>
    2396:	48 17       	cp	r20, r24
    2398:	59 07       	cpc	r21, r25
    239a:	6a 07       	cpc	r22, r26
    239c:	7b 07       	cpc	r23, r27
    239e:	00 f3       	brcs	.-64     	; 0x2360 <_ZN12OrangutanLCD8busyWaitEv+0x14>
    23a0:	1a b9       	out	0x0a, r17	; 10
    23a2:	df 91       	pop	r29
    23a4:	cf 91       	pop	r28
    23a6:	1f 91       	pop	r17
    23a8:	0f 91       	pop	r16
    23aa:	08 95       	ret

000023ac <_ZN12OrangutanLCD8sendDataEh>:
    23ac:	95 b1       	in	r25, 0x05	; 5
    23ae:	28 2f       	mov	r18, r24
    23b0:	21 70       	andi	r18, 0x01	; 1
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	22 0f       	add	r18, r18
    23b6:	33 1f       	adc	r19, r19
    23b8:	48 2f       	mov	r20, r24
    23ba:	46 70       	andi	r20, 0x06	; 6
    23bc:	68 e0       	ldi	r22, 0x08	; 8
    23be:	46 9f       	mul	r20, r22
    23c0:	a0 01       	movw	r20, r0
    23c2:	11 24       	eor	r1, r1
    23c4:	24 2b       	or	r18, r20
    23c6:	9d 7c       	andi	r25, 0xCD	; 205
    23c8:	29 2b       	or	r18, r25
    23ca:	25 b9       	out	0x05, r18	; 5
    23cc:	9b b1       	in	r25, 0x0b	; 11
    23ce:	88 70       	andi	r24, 0x08	; 8
    23d0:	82 95       	swap	r24
    23d2:	80 7f       	andi	r24, 0xF0	; 240
    23d4:	9f 77       	andi	r25, 0x7F	; 127
    23d6:	89 2b       	or	r24, r25
    23d8:	8b b9       	out	0x0b, r24	; 11
    23da:	5c 9a       	sbi	0x0b, 4	; 11
    23dc:	0e 94 9c 11 	call	0x2338	; 0x2338 <delay_us.constprop.0>
    23e0:	5c 98       	cbi	0x0b, 4	; 11
    23e2:	0e 94 9c 11 	call	0x2338	; 0x2338 <delay_us.constprop.0>
    23e6:	08 95       	ret

000023e8 <_ZN12OrangutanLCD4sendEhhh>:
    23e8:	a0 e0       	ldi	r26, 0x00	; 0
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	ea ef       	ldi	r30, 0xFA	; 250
    23ee:	f1 e1       	ldi	r31, 0x11	; 17
    23f0:	0c 94 4f 1b 	jmp	0x369e	; 0x369e <__prologue_saves__+0x16>
    23f4:	c8 2f       	mov	r28, r24
    23f6:	d6 2e       	mov	r13, r22
    23f8:	e4 2e       	mov	r14, r20
    23fa:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <_ZZN12OrangutanLCD4initEvE11initialized>
    23fe:	81 11       	cpse	r24, r1
    2400:	05 c0       	rjmp	.+10     	; 0x240c <_ZN12OrangutanLCD4sendEhhh+0x24>
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <_ZZN12OrangutanLCD4initEvE11initialized>
    2408:	0e 94 3d 12 	call	0x247a	; 0x247a <_ZN12OrangutanLCD5init2Ev>
    240c:	0e 94 a6 11 	call	0x234c	; 0x234c <_ZN12OrangutanLCD8busyWaitEv>
    2410:	14 b1       	in	r17, 0x04	; 4
    2412:	d5 b1       	in	r29, 0x05	; 5
    2414:	fa b0       	in	r15, 0x0a	; 10
    2416:	0b b1       	in	r16, 0x0b	; 11
    2418:	28 98       	cbi	0x05, 0	; 5
    241a:	dd 20       	and	r13, r13
    241c:	11 f0       	breq	.+4      	; 0x2422 <_ZN12OrangutanLCD4sendEhhh+0x3a>
    241e:	5a 9a       	sbi	0x0b, 2	; 11
    2420:	01 c0       	rjmp	.+2      	; 0x2424 <_ZN12OrangutanLCD4sendEhhh+0x3c>
    2422:	5a 98       	cbi	0x0b, 2	; 11
    2424:	94 b1       	in	r25, 0x04	; 4
    2426:	92 63       	ori	r25, 0x32	; 50
    2428:	94 b9       	out	0x04, r25	; 4
    242a:	57 9a       	sbi	0x0a, 7	; 10
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	e8 16       	cp	r14, r24
    2430:	29 f0       	breq	.+10     	; 0x243c <_ZN12OrangutanLCD4sendEhhh+0x54>
    2432:	8c 2f       	mov	r24, r28
    2434:	82 95       	swap	r24
    2436:	8f 70       	andi	r24, 0x0F	; 15
    2438:	0e 94 d6 11 	call	0x23ac	; 0x23ac <_ZN12OrangutanLCD8sendDataEh>
    243c:	8c 2f       	mov	r24, r28
    243e:	8f 70       	andi	r24, 0x0F	; 15
    2440:	0e 94 d6 11 	call	0x23ac	; 0x23ac <_ZN12OrangutanLCD8sendDataEh>
    2444:	fa b8       	out	0x0a, r15	; 10
    2446:	0b b9       	out	0x0b, r16	; 11
    2448:	14 b9       	out	0x04, r17	; 4
    244a:	d5 b9       	out	0x05, r29	; 5
    244c:	cd b7       	in	r28, 0x3d	; 61
    244e:	de b7       	in	r29, 0x3e	; 62
    2450:	e7 e0       	ldi	r30, 0x07	; 7
    2452:	0c 94 6b 1b 	jmp	0x36d6	; 0x36d6 <__epilogue_restores__+0x16>

00002456 <_ZN12OrangutanLCD8send_cmdEh>:
    2456:	42 e0       	ldi	r20, 0x02	; 2
    2458:	60 e0       	ldi	r22, 0x00	; 0
    245a:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <_ZN12OrangutanLCD4sendEhhh>
    245e:	08 95       	ret

00002460 <_ZN12OrangutanLCD9send_dataEh>:
    2460:	42 e0       	ldi	r20, 0x02	; 2
    2462:	61 e0       	ldi	r22, 0x01	; 1
    2464:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <_ZN12OrangutanLCD4sendEhhh>
    2468:	08 95       	ret

0000246a <print_character>:
    246a:	0e 94 30 12 	call	0x2460	; 0x2460 <_ZN12OrangutanLCD9send_dataEh>
    246e:	08 95       	ret

00002470 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    2470:	41 e0       	ldi	r20, 0x01	; 1
    2472:	60 e0       	ldi	r22, 0x00	; 0
    2474:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <_ZN12OrangutanLCD4sendEhhh>
    2478:	08 95       	ret

0000247a <_ZN12OrangutanLCD5init2Ev>:
    247a:	80 e1       	ldi	r24, 0x10	; 16
    247c:	97 e2       	ldi	r25, 0x27	; 39
    247e:	a0 e0       	ldi	r26, 0x00	; 0
    2480:	b0 e0       	ldi	r27, 0x00	; 0
    2482:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <lcdTimeout>
    2486:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <lcdTimeout+0x1>
    248a:	a0 93 6d 01 	sts	0x016D, r26	; 0x80016d <lcdTimeout+0x2>
    248e:	b0 93 6e 01 	sts	0x016E, r27	; 0x80016e <lcdTimeout+0x3>
    2492:	52 9a       	sbi	0x0a, 2	; 10
    2494:	20 9a       	sbi	0x04, 0	; 4
    2496:	54 9a       	sbi	0x0a, 4	; 10
    2498:	8e e1       	ldi	r24, 0x1E	; 30
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	0e 94 23 15 	call	0x2a46	; 0x2a46 <delay_ms>
    24a0:	83 e0       	ldi	r24, 0x03	; 3
    24a2:	0e 94 38 12 	call	0x2470	; 0x2470 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    24a6:	86 e0       	ldi	r24, 0x06	; 6
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	0e 94 23 15 	call	0x2a46	; 0x2a46 <delay_ms>
    24ae:	83 e0       	ldi	r24, 0x03	; 3
    24b0:	0e 94 38 12 	call	0x2470	; 0x2470 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    24b4:	82 e0       	ldi	r24, 0x02	; 2
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	0e 94 23 15 	call	0x2a46	; 0x2a46 <delay_ms>
    24bc:	83 e0       	ldi	r24, 0x03	; 3
    24be:	0e 94 38 12 	call	0x2470	; 0x2470 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    24c2:	82 e0       	ldi	r24, 0x02	; 2
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	0e 94 23 15 	call	0x2a46	; 0x2a46 <delay_ms>
    24ca:	82 e0       	ldi	r24, 0x02	; 2
    24cc:	0e 94 38 12 	call	0x2470	; 0x2470 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    24d0:	82 e0       	ldi	r24, 0x02	; 2
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	0e 94 23 15 	call	0x2a46	; 0x2a46 <delay_ms>
    24d8:	88 e2       	ldi	r24, 0x28	; 40
    24da:	0e 94 2b 12 	call	0x2456	; 0x2456 <_ZN12OrangutanLCD8send_cmdEh>
    24de:	88 e0       	ldi	r24, 0x08	; 8
    24e0:	0e 94 2b 12 	call	0x2456	; 0x2456 <_ZN12OrangutanLCD8send_cmdEh>
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	0e 94 2b 12 	call	0x2456	; 0x2456 <_ZN12OrangutanLCD8send_cmdEh>
    24ea:	86 e0       	ldi	r24, 0x06	; 6
    24ec:	0e 94 2b 12 	call	0x2456	; 0x2456 <_ZN12OrangutanLCD8send_cmdEh>
    24f0:	8c e0       	ldi	r24, 0x0C	; 12
    24f2:	0e 94 2b 12 	call	0x2456	; 0x2456 <_ZN12OrangutanLCD8send_cmdEh>
    24f6:	08 95       	ret

000024f8 <_ZN12OrangutanLCD5clearEv>:
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	0e 94 2b 12 	call	0x2456	; 0x2456 <_ZN12OrangutanLCD8send_cmdEh>
    24fe:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <printf_chars>
    2502:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <printf_chars+0x1>
    2506:	89 2b       	or	r24, r25
    2508:	f9 f0       	breq	.+62     	; 0x2548 <_ZN12OrangutanLCD5clearEv+0x50>
    250a:	60 e0       	ldi	r22, 0x00	; 0
    250c:	a0 e2       	ldi	r26, 0x20	; 32
    250e:	26 2f       	mov	r18, r22
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <numLCDCols>
    2516:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <numLCDRows>
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	01 97       	sbiw	r24, 0x01	; 1
    251e:	78 9f       	mul	r23, r24
    2520:	a0 01       	movw	r20, r0
    2522:	79 9f       	mul	r23, r25
    2524:	50 0d       	add	r21, r0
    2526:	11 24       	eor	r1, r1
    2528:	24 17       	cp	r18, r20
    252a:	35 07       	cpc	r19, r21
    252c:	4c f4       	brge	.+18     	; 0x2540 <_ZN12OrangutanLCD5clearEv+0x48>
    252e:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <printf_chars>
    2532:	f0 91 72 01 	lds	r31, 0x0172	; 0x800172 <printf_chars+0x1>
    2536:	e2 0f       	add	r30, r18
    2538:	f3 1f       	adc	r31, r19
    253a:	a0 83       	st	Z, r26
    253c:	6f 5f       	subi	r22, 0xFF	; 255
    253e:	e7 cf       	rjmp	.-50     	; 0x250e <_ZN12OrangutanLCD5clearEv+0x16>
    2540:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <col>
    2544:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <row>
    2548:	08 95       	ret

0000254a <clear>:
    254a:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <_ZN12OrangutanLCD5clearEv>
    254e:	08 95       	ret

00002550 <_ZN12OrangutanLCD5printEPKc>:
    2550:	cf 93       	push	r28
    2552:	df 93       	push	r29
    2554:	ec 01       	movw	r28, r24
    2556:	89 91       	ld	r24, Y+
    2558:	88 23       	and	r24, r24
    255a:	19 f0       	breq	.+6      	; 0x2562 <_ZN12OrangutanLCD5printEPKc+0x12>
    255c:	0e 94 30 12 	call	0x2460	; 0x2460 <_ZN12OrangutanLCD9send_dataEh>
    2560:	fa cf       	rjmp	.-12     	; 0x2556 <_ZN12OrangutanLCD5printEPKc+0x6>
    2562:	df 91       	pop	r29
    2564:	cf 91       	pop	r28
    2566:	08 95       	ret

00002568 <print>:
    2568:	0e 94 a8 12 	call	0x2550	; 0x2550 <_ZN12OrangutanLCD5printEPKc>
    256c:	08 95       	ret

0000256e <_ZN12OrangutanLCD5printEm>:
    256e:	aa e0       	ldi	r26, 0x0A	; 10
    2570:	b0 e0       	ldi	r27, 0x00	; 0
    2572:	ed eb       	ldi	r30, 0xBD	; 189
    2574:	f2 e1       	ldi	r31, 0x12	; 18
    2576:	0c 94 4e 1b 	jmp	0x369c	; 0x369c <__prologue_saves__+0x14>
    257a:	1a e0       	ldi	r17, 0x0A	; 10
    257c:	5a e0       	ldi	r21, 0x0A	; 10
    257e:	c5 2e       	mov	r12, r21
    2580:	d1 2c       	mov	r13, r1
    2582:	e1 2c       	mov	r14, r1
    2584:	f1 2c       	mov	r15, r1
    2586:	06 2f       	mov	r16, r22
    2588:	a7 01       	movw	r20, r14
    258a:	96 01       	movw	r18, r12
    258c:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <__udivmodsi4>
    2590:	ca 01       	movw	r24, r20
    2592:	b9 01       	movw	r22, r18
    2594:	11 50       	subi	r17, 0x01	; 1
    2596:	e1 e0       	ldi	r30, 0x01	; 1
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	ec 0f       	add	r30, r28
    259c:	fd 1f       	adc	r31, r29
    259e:	e1 0f       	add	r30, r17
    25a0:	f1 1d       	adc	r31, r1
    25a2:	00 5d       	subi	r16, 0xD0	; 208
    25a4:	2a e0       	ldi	r18, 0x0A	; 10
    25a6:	62 9f       	mul	r22, r18
    25a8:	00 19       	sub	r16, r0
    25aa:	11 24       	eor	r1, r1
    25ac:	00 83       	st	Z, r16
    25ae:	61 15       	cp	r22, r1
    25b0:	71 05       	cpc	r23, r1
    25b2:	81 05       	cpc	r24, r1
    25b4:	91 05       	cpc	r25, r1
    25b6:	39 f7       	brne	.-50     	; 0x2586 <_ZN12OrangutanLCD5printEm+0x18>
    25b8:	1a 30       	cpi	r17, 0x0A	; 10
    25ba:	58 f4       	brcc	.+22     	; 0x25d2 <_ZN12OrangutanLCD5printEm+0x64>
    25bc:	e1 e0       	ldi	r30, 0x01	; 1
    25be:	f0 e0       	ldi	r31, 0x00	; 0
    25c0:	ec 0f       	add	r30, r28
    25c2:	fd 1f       	adc	r31, r29
    25c4:	e1 0f       	add	r30, r17
    25c6:	f1 1d       	adc	r31, r1
    25c8:	80 81       	ld	r24, Z
    25ca:	0e 94 30 12 	call	0x2460	; 0x2460 <_ZN12OrangutanLCD9send_dataEh>
    25ce:	1f 5f       	subi	r17, 0xFF	; 255
    25d0:	f3 cf       	rjmp	.-26     	; 0x25b8 <_ZN12OrangutanLCD5printEm+0x4a>
    25d2:	2a 96       	adiw	r28, 0x0a	; 10
    25d4:	e8 e0       	ldi	r30, 0x08	; 8
    25d6:	0c 94 6a 1b 	jmp	0x36d4	; 0x36d4 <__epilogue_restores__+0x14>

000025da <_ZN12OrangutanLCD5printEl>:
    25da:	cf 92       	push	r12
    25dc:	df 92       	push	r13
    25de:	ef 92       	push	r14
    25e0:	ff 92       	push	r15
    25e2:	6b 01       	movw	r12, r22
    25e4:	7c 01       	movw	r14, r24
    25e6:	97 ff       	sbrs	r25, 7
    25e8:	0b c0       	rjmp	.+22     	; 0x2600 <_ZN12OrangutanLCD5printEl+0x26>
    25ea:	f0 94       	com	r15
    25ec:	e0 94       	com	r14
    25ee:	d0 94       	com	r13
    25f0:	c0 94       	com	r12
    25f2:	c1 1c       	adc	r12, r1
    25f4:	d1 1c       	adc	r13, r1
    25f6:	e1 1c       	adc	r14, r1
    25f8:	f1 1c       	adc	r15, r1
    25fa:	8d e2       	ldi	r24, 0x2D	; 45
    25fc:	0e 94 30 12 	call	0x2460	; 0x2460 <_ZN12OrangutanLCD9send_dataEh>
    2600:	c7 01       	movw	r24, r14
    2602:	b6 01       	movw	r22, r12
    2604:	0e 94 b7 12 	call	0x256e	; 0x256e <_ZN12OrangutanLCD5printEm>
    2608:	ff 90       	pop	r15
    260a:	ef 90       	pop	r14
    260c:	df 90       	pop	r13
    260e:	cf 90       	pop	r12
    2610:	08 95       	ret

00002612 <print_long>:
    2612:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN12OrangutanLCD5printEl>
    2616:	08 95       	ret

00002618 <_ZN12OrangutanLCD6gotoXYEhh>:
    2618:	a5 e0       	ldi	r26, 0x05	; 5
    261a:	b0 e0       	ldi	r27, 0x00	; 0
    261c:	e2 e1       	ldi	r30, 0x12	; 18
    261e:	f3 e1       	ldi	r31, 0x13	; 19
    2620:	0c 94 53 1b 	jmp	0x36a6	; 0x36a6 <__prologue_saves__+0x1e>
    2624:	18 2f       	mov	r17, r24
    2626:	80 e8       	ldi	r24, 0x80	; 128
    2628:	89 83       	std	Y+1, r24	; 0x01
    262a:	80 ec       	ldi	r24, 0xC0	; 192
    262c:	8a 83       	std	Y+2, r24	; 0x02
    262e:	84 e9       	ldi	r24, 0x94	; 148
    2630:	8b 83       	std	Y+3, r24	; 0x03
    2632:	84 ed       	ldi	r24, 0xD4	; 212
    2634:	8c 83       	std	Y+4, r24	; 0x04
    2636:	fe 01       	movw	r30, r28
    2638:	e6 0f       	add	r30, r22
    263a:	f1 1d       	adc	r31, r1
    263c:	81 81       	ldd	r24, Z+1	; 0x01
    263e:	81 0f       	add	r24, r17
    2640:	6d 83       	std	Y+5, r22	; 0x05
    2642:	0e 94 2b 12 	call	0x2456	; 0x2456 <_ZN12OrangutanLCD8send_cmdEh>
    2646:	10 93 6f 01 	sts	0x016F, r17	; 0x80016f <col>
    264a:	6d 81       	ldd	r22, Y+5	; 0x05
    264c:	60 93 70 01 	sts	0x0170, r22	; 0x800170 <row>
    2650:	25 96       	adiw	r28, 0x05	; 5
    2652:	e3 e0       	ldi	r30, 0x03	; 3
    2654:	0c 94 6f 1b 	jmp	0x36de	; 0x36de <__epilogue_restores__+0x1e>

00002658 <lcd_goto_xy>:
    2658:	0e 94 0c 13 	call	0x2618	; 0x2618 <_ZN12OrangutanLCD6gotoXYEhh>
    265c:	08 95       	ret

0000265e <_ZN16OrangutanDigital9setOutputEhh>:
    265e:	88 30       	cpi	r24, 0x08	; 8
    2660:	58 f4       	brcc	.+22     	; 0x2678 <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    2662:	91 e0       	ldi	r25, 0x01	; 1
    2664:	01 c0       	rjmp	.+2      	; 0x2668 <_ZN16OrangutanDigital9setOutputEhh+0xa>
    2666:	99 0f       	add	r25, r25
    2668:	8a 95       	dec	r24
    266a:	ea f7       	brpl	.-6      	; 0x2666 <_ZN16OrangutanDigital9setOutputEhh+0x8>
    266c:	89 2f       	mov	r24, r25
    266e:	aa e2       	ldi	r26, 0x2A	; 42
    2670:	b0 e0       	ldi	r27, 0x00	; 0
    2672:	eb e2       	ldi	r30, 0x2B	; 43
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	21 c0       	rjmp	.+66     	; 0x26ba <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    2678:	8e 30       	cpi	r24, 0x0E	; 14
    267a:	60 f4       	brcc	.+24     	; 0x2694 <_ZN16OrangutanDigital9setOutputEhh+0x36>
    267c:	98 ef       	ldi	r25, 0xF8	; 248
    267e:	98 0f       	add	r25, r24
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	01 c0       	rjmp	.+2      	; 0x2686 <_ZN16OrangutanDigital9setOutputEhh+0x28>
    2684:	88 0f       	add	r24, r24
    2686:	9a 95       	dec	r25
    2688:	ea f7       	brpl	.-6      	; 0x2684 <_ZN16OrangutanDigital9setOutputEhh+0x26>
    268a:	a4 e2       	ldi	r26, 0x24	; 36
    268c:	b0 e0       	ldi	r27, 0x00	; 0
    268e:	e5 e2       	ldi	r30, 0x25	; 37
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	13 c0       	rjmp	.+38     	; 0x26ba <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    2694:	85 31       	cpi	r24, 0x15	; 21
    2696:	60 f4       	brcc	.+24     	; 0x26b0 <_ZN16OrangutanDigital9setOutputEhh+0x52>
    2698:	92 ef       	ldi	r25, 0xF2	; 242
    269a:	98 0f       	add	r25, r24
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	01 c0       	rjmp	.+2      	; 0x26a2 <_ZN16OrangutanDigital9setOutputEhh+0x44>
    26a0:	88 0f       	add	r24, r24
    26a2:	9a 95       	dec	r25
    26a4:	ea f7       	brpl	.-6      	; 0x26a0 <_ZN16OrangutanDigital9setOutputEhh+0x42>
    26a6:	a7 e2       	ldi	r26, 0x27	; 39
    26a8:	b0 e0       	ldi	r27, 0x00	; 0
    26aa:	e8 e2       	ldi	r30, 0x28	; 40
    26ac:	f0 e0       	ldi	r31, 0x00	; 0
    26ae:	05 c0       	rjmp	.+10     	; 0x26ba <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	a0 e0       	ldi	r26, 0x00	; 0
    26b4:	b0 e0       	ldi	r27, 0x00	; 0
    26b6:	e0 e0       	ldi	r30, 0x00	; 0
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	6f 3f       	cpi	r22, 0xFF	; 255
    26bc:	19 f4       	brne	.+6      	; 0x26c4 <_ZN16OrangutanDigital9setOutputEhh+0x66>
    26be:	90 81       	ld	r25, Z
    26c0:	98 27       	eor	r25, r24
    26c2:	09 c0       	rjmp	.+18     	; 0x26d6 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    26c4:	66 23       	and	r22, r22
    26c6:	19 f0       	breq	.+6      	; 0x26ce <_ZN16OrangutanDigital9setOutputEhh+0x70>
    26c8:	90 81       	ld	r25, Z
    26ca:	98 2b       	or	r25, r24
    26cc:	04 c0       	rjmp	.+8      	; 0x26d6 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    26ce:	20 81       	ld	r18, Z
    26d0:	98 2f       	mov	r25, r24
    26d2:	90 95       	com	r25
    26d4:	92 23       	and	r25, r18
    26d6:	90 83       	st	Z, r25
    26d8:	9c 91       	ld	r25, X
    26da:	98 2b       	or	r25, r24
    26dc:	9c 93       	st	X, r25
    26de:	08 95       	ret

000026e0 <_ZN15OrangutanMotors5init2Ev>:
    26e0:	83 ef       	ldi	r24, 0xF3	; 243
    26e2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    26e6:	84 bd       	out	0x24, r24	; 36
    26e8:	82 e0       	ldi	r24, 0x02	; 2
    26ea:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    26ee:	85 bd       	out	0x25, r24	; 37
    26f0:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    26f4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    26f8:	18 bc       	out	0x28, r1	; 40
    26fa:	17 bc       	out	0x27, r1	; 39
    26fc:	60 e0       	ldi	r22, 0x00	; 0
    26fe:	86 e0       	ldi	r24, 0x06	; 6
    2700:	0e 94 2f 13 	call	0x265e	; 0x265e <_ZN16OrangutanDigital9setOutputEhh>
    2704:	60 e0       	ldi	r22, 0x00	; 0
    2706:	85 e0       	ldi	r24, 0x05	; 5
    2708:	0e 94 2f 13 	call	0x265e	; 0x265e <_ZN16OrangutanDigital9setOutputEhh>
    270c:	60 e0       	ldi	r22, 0x00	; 0
    270e:	8b e0       	ldi	r24, 0x0B	; 11
    2710:	0e 94 2f 13 	call	0x265e	; 0x265e <_ZN16OrangutanDigital9setOutputEhh>
    2714:	60 e0       	ldi	r22, 0x00	; 0
    2716:	83 e0       	ldi	r24, 0x03	; 3
    2718:	0e 94 2f 13 	call	0x265e	; 0x265e <_ZN16OrangutanDigital9setOutputEhh>
    271c:	08 95       	ret

0000271e <_ZN15OrangutanMotors4initEv>:
    271e:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <_ZZN15OrangutanMotors4initEvE11initialized>
    2722:	81 11       	cpse	r24, r1
    2724:	05 c0       	rjmp	.+10     	; 0x2730 <_ZN15OrangutanMotors4initEv+0x12>
    2726:	81 e0       	ldi	r24, 0x01	; 1
    2728:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <_ZZN15OrangutanMotors4initEvE11initialized>
    272c:	0e 94 70 13 	call	0x26e0	; 0x26e0 <_ZN15OrangutanMotors5init2Ev>
    2730:	08 95       	ret

00002732 <_ZN15OrangutanMotors10setM1SpeedEi>:
    2732:	cf 93       	push	r28
    2734:	df 93       	push	r29
    2736:	ec 01       	movw	r28, r24
    2738:	0e 94 8f 13 	call	0x271e	; 0x271e <_ZN15OrangutanMotors4initEv>
    273c:	d7 ff       	sbrs	r29, 7
    273e:	05 c0       	rjmp	.+10     	; 0x274a <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    2740:	d1 95       	neg	r29
    2742:	c1 95       	neg	r28
    2744:	d1 09       	sbc	r29, r1
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	01 c0       	rjmp	.+2      	; 0x274c <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	cf 3f       	cpi	r28, 0xFF	; 255
    274e:	d1 05       	cpc	r29, r1
    2750:	19 f0       	breq	.+6      	; 0x2758 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    2752:	14 f0       	brlt	.+4      	; 0x2758 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    2754:	cf ef       	ldi	r28, 0xFF	; 255
    2756:	d0 e0       	ldi	r29, 0x00	; 0
    2758:	88 23       	and	r24, r24
    275a:	19 f0       	breq	.+6      	; 0x2762 <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    275c:	18 bc       	out	0x28, r1	; 40
    275e:	c7 bd       	out	0x27, r28	; 39
    2760:	02 c0       	rjmp	.+4      	; 0x2766 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    2762:	c8 bd       	out	0x28, r28	; 40
    2764:	17 bc       	out	0x27, r1	; 39
    2766:	df 91       	pop	r29
    2768:	cf 91       	pop	r28
    276a:	08 95       	ret

0000276c <_ZN15OrangutanMotors10setM2SpeedEi>:
    276c:	cf 93       	push	r28
    276e:	df 93       	push	r29
    2770:	ec 01       	movw	r28, r24
    2772:	0e 94 8f 13 	call	0x271e	; 0x271e <_ZN15OrangutanMotors4initEv>
    2776:	d7 ff       	sbrs	r29, 7
    2778:	05 c0       	rjmp	.+10     	; 0x2784 <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    277a:	d1 95       	neg	r29
    277c:	c1 95       	neg	r28
    277e:	d1 09       	sbc	r29, r1
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	01 c0       	rjmp	.+2      	; 0x2786 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    2784:	80 e0       	ldi	r24, 0x00	; 0
    2786:	cf 3f       	cpi	r28, 0xFF	; 255
    2788:	d1 05       	cpc	r29, r1
    278a:	19 f0       	breq	.+6      	; 0x2792 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    278c:	14 f0       	brlt	.+4      	; 0x2792 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    278e:	cf ef       	ldi	r28, 0xFF	; 255
    2790:	d0 e0       	ldi	r29, 0x00	; 0
    2792:	88 23       	and	r24, r24
    2794:	29 f0       	breq	.+10     	; 0x27a0 <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    2796:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    279a:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    279e:	04 c0       	rjmp	.+8      	; 0x27a8 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    27a0:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    27a4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    27a8:	df 91       	pop	r29
    27aa:	cf 91       	pop	r28
    27ac:	08 95       	ret

000027ae <_ZN15OrangutanMotors9setSpeedsEii>:
    27ae:	cf 93       	push	r28
    27b0:	df 93       	push	r29
    27b2:	eb 01       	movw	r28, r22
    27b4:	0e 94 99 13 	call	0x2732	; 0x2732 <_ZN15OrangutanMotors10setM1SpeedEi>
    27b8:	ce 01       	movw	r24, r28
    27ba:	0e 94 b6 13 	call	0x276c	; 0x276c <_ZN15OrangutanMotors10setM2SpeedEi>
    27be:	df 91       	pop	r29
    27c0:	cf 91       	pop	r28
    27c2:	08 95       	ret

000027c4 <set_motors>:
    27c4:	0e 94 d7 13 	call	0x27ae	; 0x27ae <_ZN15OrangutanMotors9setSpeedsEii>
    27c8:	08 95       	ret

000027ca <_ZN20OrangutanPushbuttons5init2Ev>:
    27ca:	84 b1       	in	r24, 0x04	; 4
    27cc:	8d 7c       	andi	r24, 0xCD	; 205
    27ce:	84 b9       	out	0x04, r24	; 4
    27d0:	85 b1       	in	r24, 0x05	; 5
    27d2:	82 63       	ori	r24, 0x32	; 50
    27d4:	85 b9       	out	0x05, r24	; 5
    27d6:	85 e0       	ldi	r24, 0x05	; 5
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	6f 93       	push	r22
    27dc:	64 e0       	ldi	r22, 0x04	; 4
    27de:	6a 95       	dec	r22
    27e0:	f1 f7       	brne	.-4      	; 0x27de <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    27e2:	6f 91       	pop	r22
    27e4:	01 97       	sbiw	r24, 0x01	; 1
    27e6:	c9 f7       	brne	.-14     	; 0x27da <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    27e8:	08 95       	ret

000027ea <_ZN20OrangutanPushbuttons4initEv>:
    27ea:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    27ee:	81 11       	cpse	r24, r1
    27f0:	05 c0       	rjmp	.+10     	; 0x27fc <_ZN20OrangutanPushbuttons4initEv+0x12>
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    27f8:	0e 94 e5 13 	call	0x27ca	; 0x27ca <_ZN20OrangutanPushbuttons5init2Ev>
    27fc:	08 95       	ret

000027fe <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    27fe:	cf 93       	push	r28
    2800:	c8 2f       	mov	r28, r24
    2802:	0e 94 f5 13 	call	0x27ea	; 0x27ea <_ZN20OrangutanPushbuttons4initEv>
    2806:	83 b1       	in	r24, 0x03	; 3
    2808:	8c 23       	and	r24, r28
    280a:	e9 f3       	breq	.-6      	; 0x2806 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    280c:	8a e0       	ldi	r24, 0x0A	; 10
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	0e 94 23 15 	call	0x2a46	; 0x2a46 <delay_ms>
    2814:	83 b1       	in	r24, 0x03	; 3
    2816:	8c 23       	and	r24, r28
    2818:	b1 f3       	breq	.-20     	; 0x2806 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    281a:	83 b1       	in	r24, 0x03	; 3
    281c:	8c 23       	and	r24, r28
    281e:	cf 91       	pop	r28
    2820:	08 95       	ret

00002822 <wait_for_button_release>:
    2822:	0e 94 ff 13 	call	0x27fe	; 0x27fe <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    2826:	08 95       	ret

00002828 <_ZN20OrangutanPushbuttons9isPressedEh>:
    2828:	a1 e0       	ldi	r26, 0x01	; 1
    282a:	b0 e0       	ldi	r27, 0x00	; 0
    282c:	ea e1       	ldi	r30, 0x1A	; 26
    282e:	f4 e1       	ldi	r31, 0x14	; 20
    2830:	0c 94 54 1b 	jmp	0x36a8	; 0x36a8 <__prologue_saves__+0x20>
    2834:	89 83       	std	Y+1, r24	; 0x01
    2836:	0e 94 f5 13 	call	0x27ea	; 0x27ea <_ZN20OrangutanPushbuttons4initEv>
    283a:	93 b1       	in	r25, 0x03	; 3
    283c:	90 95       	com	r25
    283e:	89 81       	ldd	r24, Y+1	; 0x01
    2840:	89 23       	and	r24, r25
    2842:	21 96       	adiw	r28, 0x01	; 1
    2844:	e2 e0       	ldi	r30, 0x02	; 2
    2846:	0c 94 70 1b 	jmp	0x36e0	; 0x36e0 <__epilogue_restores__+0x20>

0000284a <button_is_pressed>:
    284a:	0e 94 14 14 	call	0x2828	; 0x2828 <_ZN20OrangutanPushbuttons9isPressedEh>
    284e:	08 95       	ret

00002850 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>:
    2850:	28 2f       	mov	r18, r24
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	9a e0       	ldi	r25, 0x0A	; 10
    2856:	89 9f       	mul	r24, r25
    2858:	f0 01       	movw	r30, r0
    285a:	11 24       	eor	r1, r1
    285c:	ed 58       	subi	r30, 0x8D	; 141
    285e:	fe 4f       	sbci	r31, 0xFE	; 254
    2860:	80 85       	ldd	r24, Z+8	; 0x08
    2862:	91 85       	ldd	r25, Z+9	; 0x09
    2864:	00 97       	sbiw	r24, 0x00	; 0
    2866:	21 f0       	breq	.+8      	; 0x2870 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    2868:	52 81       	ldd	r21, Z+2	; 0x02
    286a:	44 81       	ldd	r20, Z+4	; 0x04
    286c:	54 17       	cp	r21, r20
    286e:	80 f0       	brcs	.+32     	; 0x2890 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x40>
    2870:	8a e0       	ldi	r24, 0x0A	; 10
    2872:	82 9f       	mul	r24, r18
    2874:	f0 01       	movw	r30, r0
    2876:	83 9f       	mul	r24, r19
    2878:	f0 0d       	add	r31, r0
    287a:	11 24       	eor	r1, r1
    287c:	ed 58       	subi	r30, 0x8D	; 141
    287e:	fe 4f       	sbci	r31, 0xFE	; 254
    2880:	92 81       	ldd	r25, Z+2	; 0x02
    2882:	84 81       	ldd	r24, Z+4	; 0x04
    2884:	98 13       	cpse	r25, r24
    2886:	0e c0       	rjmp	.+28     	; 0x28a4 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x54>
    2888:	85 81       	ldd	r24, Z+5	; 0x05
    288a:	81 11       	cpse	r24, r1
    288c:	0a c0       	rjmp	.+20     	; 0x28a2 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x52>
    288e:	08 95       	ret
    2890:	42 81       	ldd	r20, Z+2	; 0x02
    2892:	dc 01       	movw	r26, r24
    2894:	a4 0f       	add	r26, r20
    2896:	b1 1d       	adc	r27, r1
    2898:	6c 93       	st	X, r22
    289a:	82 81       	ldd	r24, Z+2	; 0x02
    289c:	8f 5f       	subi	r24, 0xFF	; 255
    289e:	82 83       	std	Z+2, r24	; 0x02
    28a0:	e7 cf       	rjmp	.-50     	; 0x2870 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    28a2:	12 82       	std	Z+2, r1	; 0x02
    28a4:	08 95       	ret

000028a6 <__vector_18>:
    28a6:	1f 92       	push	r1
    28a8:	0f 92       	push	r0
    28aa:	0f b6       	in	r0, 0x3f	; 63
    28ac:	0f 92       	push	r0
    28ae:	11 24       	eor	r1, r1
    28b0:	2f 93       	push	r18
    28b2:	3f 93       	push	r19
    28b4:	4f 93       	push	r20
    28b6:	5f 93       	push	r21
    28b8:	6f 93       	push	r22
    28ba:	7f 93       	push	r23
    28bc:	8f 93       	push	r24
    28be:	9f 93       	push	r25
    28c0:	af 93       	push	r26
    28c2:	bf 93       	push	r27
    28c4:	ef 93       	push	r30
    28c6:	ff 93       	push	r31
    28c8:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    28cc:	80 e0       	ldi	r24, 0x00	; 0
    28ce:	0e 94 28 14 	call	0x2850	; 0x2850 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>
    28d2:	ff 91       	pop	r31
    28d4:	ef 91       	pop	r30
    28d6:	bf 91       	pop	r27
    28d8:	af 91       	pop	r26
    28da:	9f 91       	pop	r25
    28dc:	8f 91       	pop	r24
    28de:	7f 91       	pop	r23
    28e0:	6f 91       	pop	r22
    28e2:	5f 91       	pop	r21
    28e4:	4f 91       	pop	r20
    28e6:	3f 91       	pop	r19
    28e8:	2f 91       	pop	r18
    28ea:	0f 90       	pop	r0
    28ec:	0f be       	out	0x3f, r0	; 63
    28ee:	0f 90       	pop	r0
    28f0:	1f 90       	pop	r1
    28f2:	18 95       	reti

000028f4 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>:
    28f4:	9a e0       	ldi	r25, 0x0A	; 10
    28f6:	89 9f       	mul	r24, r25
    28f8:	f0 01       	movw	r30, r0
    28fa:	11 24       	eor	r1, r1
    28fc:	ed 58       	subi	r30, 0x8D	; 141
    28fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2900:	86 81       	ldd	r24, Z+6	; 0x06
    2902:	97 81       	ldd	r25, Z+7	; 0x07
    2904:	89 2b       	or	r24, r25
    2906:	59 f0       	breq	.+22     	; 0x291e <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    2908:	91 81       	ldd	r25, Z+1	; 0x01
    290a:	83 81       	ldd	r24, Z+3	; 0x03
    290c:	98 17       	cp	r25, r24
    290e:	38 f4       	brcc	.+14     	; 0x291e <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    2910:	80 81       	ld	r24, Z
    2912:	81 11       	cpse	r24, r1
    2914:	04 c0       	rjmp	.+8      	; 0x291e <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    2916:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    291a:	80 62       	ori	r24, 0x20	; 32
    291c:	03 c0       	rjmp	.+6      	; 0x2924 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x30>
    291e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2922:	8f 7d       	andi	r24, 0xDF	; 223
    2924:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2928:	08 95       	ret

0000292a <_ZN15OrangutanSerial11uart_tx_isrEh>:
    292a:	9a e0       	ldi	r25, 0x0A	; 10
    292c:	89 9f       	mul	r24, r25
    292e:	f0 01       	movw	r30, r0
    2930:	11 24       	eor	r1, r1
    2932:	ed 58       	subi	r30, 0x8D	; 141
    2934:	fe 4f       	sbci	r31, 0xFE	; 254
    2936:	26 81       	ldd	r18, Z+6	; 0x06
    2938:	37 81       	ldd	r19, Z+7	; 0x07
    293a:	21 15       	cp	r18, r1
    293c:	31 05       	cpc	r19, r1
    293e:	41 f0       	breq	.+16     	; 0x2950 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    2940:	41 81       	ldd	r20, Z+1	; 0x01
    2942:	93 81       	ldd	r25, Z+3	; 0x03
    2944:	49 17       	cp	r20, r25
    2946:	20 f4       	brcc	.+8      	; 0x2950 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    2948:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    294c:	95 fd       	sbrc	r25, 5
    294e:	03 c0       	rjmp	.+6      	; 0x2956 <_ZN15OrangutanSerial11uart_tx_isrEh+0x2c>
    2950:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    2954:	08 95       	ret
    2956:	91 81       	ldd	r25, Z+1	; 0x01
    2958:	d9 01       	movw	r26, r18
    295a:	a9 0f       	add	r26, r25
    295c:	b1 1d       	adc	r27, r1
    295e:	9c 91       	ld	r25, X
    2960:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    2964:	91 81       	ldd	r25, Z+1	; 0x01
    2966:	9f 5f       	subi	r25, 0xFF	; 255
    2968:	91 83       	std	Z+1, r25	; 0x01
    296a:	f2 cf       	rjmp	.-28     	; 0x2950 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>

0000296c <__vector_19>:
    296c:	1f 92       	push	r1
    296e:	0f 92       	push	r0
    2970:	0f b6       	in	r0, 0x3f	; 63
    2972:	0f 92       	push	r0
    2974:	11 24       	eor	r1, r1
    2976:	2f 93       	push	r18
    2978:	3f 93       	push	r19
    297a:	4f 93       	push	r20
    297c:	5f 93       	push	r21
    297e:	6f 93       	push	r22
    2980:	7f 93       	push	r23
    2982:	8f 93       	push	r24
    2984:	9f 93       	push	r25
    2986:	af 93       	push	r26
    2988:	bf 93       	push	r27
    298a:	ef 93       	push	r30
    298c:	ff 93       	push	r31
    298e:	80 e0       	ldi	r24, 0x00	; 0
    2990:	0e 94 95 14 	call	0x292a	; 0x292a <_ZN15OrangutanSerial11uart_tx_isrEh>
    2994:	ff 91       	pop	r31
    2996:	ef 91       	pop	r30
    2998:	bf 91       	pop	r27
    299a:	af 91       	pop	r26
    299c:	9f 91       	pop	r25
    299e:	8f 91       	pop	r24
    29a0:	7f 91       	pop	r23
    29a2:	6f 91       	pop	r22
    29a4:	5f 91       	pop	r21
    29a6:	4f 91       	pop	r20
    29a8:	3f 91       	pop	r19
    29aa:	2f 91       	pop	r18
    29ac:	0f 90       	pop	r0
    29ae:	0f be       	out	0x3f, r0	; 63
    29b0:	0f 90       	pop	r0
    29b2:	1f 90       	pop	r1
    29b4:	18 95       	reti

000029b6 <__vector_9>:
    29b6:	2f 92       	push	r2
    29b8:	8f 93       	push	r24
    29ba:	9f 93       	push	r25
    29bc:	2f b6       	in	r2, 0x3f	; 63
    29be:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <tickCount+0x1>
    29c2:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <tickCount+0x2>
    29c6:	01 96       	adiw	r24, 0x01	; 1
    29c8:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <tickCount+0x1>
    29cc:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <tickCount+0x2>
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <tickCount+0x3>
    29d6:	89 1f       	adc	r24, r25
    29d8:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <tickCount+0x3>
    29dc:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <us_over_10+0x1>
    29e0:	9c 5f       	subi	r25, 0xFC	; 252
    29e2:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <us_over_10+0x1>
    29e6:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <us_over_10>
    29ea:	80 51       	subi	r24, 0x10	; 16
    29ec:	97 42       	sbci	r25, 0x27	; 39
    29ee:	c0 f0       	brcs	.+48     	; 0x2a20 <end>
    29f0:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <us_over_10+0x1>
    29f4:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <us_over_10>
    29f8:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <msCounter>
    29fc:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <msCounter+0x1>
    2a00:	01 96       	adiw	r24, 0x01	; 1
    2a02:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <msCounter>
    2a06:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <msCounter+0x1>
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <msCounter+0x2>
    2a10:	89 1f       	adc	r24, r25
    2a12:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <msCounter+0x2>
    2a16:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <msCounter+0x3>
    2a1a:	89 1f       	adc	r24, r25
    2a1c:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <msCounter+0x3>

00002a20 <end>:
    2a20:	2f be       	out	0x3f, r2	; 63
    2a22:	9f 91       	pop	r25
    2a24:	8f 91       	pop	r24
    2a26:	2f 90       	pop	r2
    2a28:	18 95       	reti

00002a2a <_ZN13OrangutanTime17delayMillisecondsEj>:
    2a2a:	28 ee       	ldi	r18, 0xE8	; 232
    2a2c:	33 e0       	ldi	r19, 0x03	; 3
    2a2e:	01 97       	sbiw	r24, 0x01	; 1
    2a30:	48 f0       	brcs	.+18     	; 0x2a44 <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    2a32:	f9 01       	movw	r30, r18
    2a34:	6f 93       	push	r22
    2a36:	64 e0       	ldi	r22, 0x04	; 4
    2a38:	6a 95       	dec	r22
    2a3a:	f1 f7       	brne	.-4      	; 0x2a38 <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    2a3c:	6f 91       	pop	r22
    2a3e:	31 97       	sbiw	r30, 0x01	; 1
    2a40:	c9 f7       	brne	.-14     	; 0x2a34 <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    2a42:	f5 cf       	rjmp	.-22     	; 0x2a2e <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    2a44:	08 95       	ret

00002a46 <delay_ms>:
    2a46:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <_ZN13OrangutanTime17delayMillisecondsEj>
    2a4a:	08 95       	ret

00002a4c <_ZN13OrangutanTime5init2Ev>:
    2a4c:	e0 e7       	ldi	r30, 0x70	; 112
    2a4e:	f0 e0       	ldi	r31, 0x00	; 0
    2a50:	80 81       	ld	r24, Z
    2a52:	8e 7f       	andi	r24, 0xFE	; 254
    2a54:	80 83       	st	Z, r24
    2a56:	a0 eb       	ldi	r26, 0xB0	; 176
    2a58:	b0 e0       	ldi	r27, 0x00	; 0
    2a5a:	8c 91       	ld	r24, X
    2a5c:	83 60       	ori	r24, 0x03	; 3
    2a5e:	8c 93       	st	X, r24
    2a60:	a1 eb       	ldi	r26, 0xB1	; 177
    2a62:	b0 e0       	ldi	r27, 0x00	; 0
    2a64:	8c 91       	ld	r24, X
    2a66:	80 7f       	andi	r24, 0xF0	; 240
    2a68:	8c 93       	st	X, r24
    2a6a:	8c 91       	ld	r24, X
    2a6c:	82 60       	ori	r24, 0x02	; 2
    2a6e:	8c 93       	st	X, r24
    2a70:	b8 9a       	sbi	0x17, 0	; 23
    2a72:	80 81       	ld	r24, Z
    2a74:	81 60       	ori	r24, 0x01	; 1
    2a76:	80 83       	st	Z, r24
    2a78:	78 94       	sei
    2a7a:	08 95       	ret

00002a7c <_ZN13OrangutanTime4initEv>:
    2a7c:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <_ZZN13OrangutanTime4initEvE11initialized>
    2a80:	81 11       	cpse	r24, r1
    2a82:	05 c0       	rjmp	.+10     	; 0x2a8e <_ZN13OrangutanTime4initEv+0x12>
    2a84:	81 e0       	ldi	r24, 0x01	; 1
    2a86:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <_ZZN13OrangutanTime4initEvE11initialized>
    2a8a:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <_ZN13OrangutanTime5init2Ev>
    2a8e:	08 95       	ret

00002a90 <_ZN13OrangutanTime2msEv>:
    2a90:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <_ZN13OrangutanTime4initEv>
    2a94:	e0 e7       	ldi	r30, 0x70	; 112
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	80 81       	ld	r24, Z
    2a9a:	8e 7f       	andi	r24, 0xFE	; 254
    2a9c:	80 83       	st	Z, r24
    2a9e:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <msCounter>
    2aa2:	70 91 80 01 	lds	r23, 0x0180	; 0x800180 <msCounter+0x1>
    2aa6:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <msCounter+0x2>
    2aaa:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <msCounter+0x3>
    2aae:	20 81       	ld	r18, Z
    2ab0:	21 60       	ori	r18, 0x01	; 1
    2ab2:	20 83       	st	Z, r18
    2ab4:	08 95       	ret

00002ab6 <get_ms>:
    2ab6:	0e 94 48 15 	call	0x2a90	; 0x2a90 <_ZN13OrangutanTime2msEv>
    2aba:	08 95       	ret

00002abc <_ZN13OrangutanTime5resetEv>:
    2abc:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <_ZN13OrangutanTime4initEv>
    2ac0:	e0 e7       	ldi	r30, 0x70	; 112
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	80 81       	ld	r24, Z
    2ac6:	8e 7f       	andi	r24, 0xFE	; 254
    2ac8:	80 83       	st	Z, r24
    2aca:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <msCounter>
    2ace:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <msCounter+0x1>
    2ad2:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <msCounter+0x2>
    2ad6:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <msCounter+0x3>
    2ada:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <us_over_10+0x1>
    2ade:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <us_over_10>
    2ae2:	80 81       	ld	r24, Z
    2ae4:	81 60       	ori	r24, 0x01	; 1
    2ae6:	80 83       	st	Z, r24
    2ae8:	08 95       	ret

00002aea <calibrate_line_sensors>:
    2aea:	68 2f       	mov	r22, r24
    2aec:	87 e8       	ldi	r24, 0x87	; 135
    2aee:	91 e0       	ldi	r25, 0x01	; 1
    2af0:	0e 94 5d 19 	call	0x32ba	; 0x32ba <_ZN16PololuQTRSensors9calibrateEh>
    2af4:	08 95       	ret

00002af6 <read_line>:
    2af6:	46 2f       	mov	r20, r22
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	bc 01       	movw	r22, r24
    2afc:	87 e8       	ldi	r24, 0x87	; 135
    2afe:	91 e0       	ldi	r25, 0x01	; 1
    2b00:	0e 94 2e 1a 	call	0x345c	; 0x345c <_ZN16PololuQTRSensors8readLineEPjhh>
    2b04:	08 95       	ret

00002b06 <_ZN9Pololu3pi4initEjh>:
    2b06:	0f 93       	push	r16
    2b08:	cf 93       	push	r28
    2b0a:	df 93       	push	r29
    2b0c:	00 d0       	rcall	.+0      	; 0x2b0e <_ZN9Pololu3pi4initEjh+0x8>
    2b0e:	00 d0       	rcall	.+0      	; 0x2b10 <_ZN9Pololu3pi4initEjh+0xa>
    2b10:	1f 92       	push	r1
    2b12:	cd b7       	in	r28, 0x3d	; 61
    2b14:	de b7       	in	r29, 0x3e	; 62
    2b16:	9c 01       	movw	r18, r24
    2b18:	85 e0       	ldi	r24, 0x05	; 5
    2b1a:	ec e2       	ldi	r30, 0x2C	; 44
    2b1c:	f1 e0       	ldi	r31, 0x01	; 1
    2b1e:	de 01       	movw	r26, r28
    2b20:	11 96       	adiw	r26, 0x01	; 1
    2b22:	01 90       	ld	r0, Z+
    2b24:	0d 92       	st	X+, r0
    2b26:	8a 95       	dec	r24
    2b28:	e1 f7       	brne	.-8      	; 0x2b22 <_ZN9Pololu3pi4initEjh+0x1c>
    2b2a:	66 23       	and	r22, r22
    2b2c:	11 f0       	breq	.+4      	; 0x2b32 <_ZN9Pololu3pi4initEjh+0x2c>
    2b2e:	0f ef       	ldi	r16, 0xFF	; 255
    2b30:	01 c0       	rjmp	.+2      	; 0x2b34 <_ZN9Pololu3pi4initEjh+0x2e>
    2b32:	03 e1       	ldi	r16, 0x13	; 19
    2b34:	45 e0       	ldi	r20, 0x05	; 5
    2b36:	be 01       	movw	r22, r28
    2b38:	6f 5f       	subi	r22, 0xFF	; 255
    2b3a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b3c:	87 e8       	ldi	r24, 0x87	; 135
    2b3e:	91 e0       	ldi	r25, 0x01	; 1
    2b40:	0e 94 55 16 	call	0x2caa	; 0x2caa <_ZN18PololuQTRSensorsRC4initEPhhjh>
    2b44:	87 e8       	ldi	r24, 0x87	; 135
    2b46:	91 e0       	ldi	r25, 0x01	; 1
    2b48:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <_ZN16PololuQTRSensors11emittersOffEv>
    2b4c:	0e 94 5e 15 	call	0x2abc	; 0x2abc <_ZN13OrangutanTime5resetEv>
    2b50:	0f 90       	pop	r0
    2b52:	0f 90       	pop	r0
    2b54:	0f 90       	pop	r0
    2b56:	0f 90       	pop	r0
    2b58:	0f 90       	pop	r0
    2b5a:	df 91       	pop	r29
    2b5c:	cf 91       	pop	r28
    2b5e:	0f 91       	pop	r16
    2b60:	08 95       	ret

00002b62 <pololu_3pi_init>:
    2b62:	60 e0       	ldi	r22, 0x00	; 0
    2b64:	0e 94 83 15 	call	0x2b06	; 0x2b06 <_ZN9Pololu3pi4initEjh>
    2b68:	08 95       	ret

00002b6a <_GLOBAL__sub_D_pololu_3pi_init>:
    2b6a:	87 e8       	ldi	r24, 0x87	; 135
    2b6c:	91 e0       	ldi	r25, 0x01	; 1
    2b6e:	0e 94 a3 1a 	call	0x3546	; 0x3546 <_ZN16PololuQTRSensorsD1Ev>
    2b72:	08 95       	ret

00002b74 <delay_us>:
    2b74:	6f 93       	push	r22
    2b76:	64 e0       	ldi	r22, 0x04	; 4
    2b78:	6a 95       	dec	r22
    2b7a:	f1 f7       	brne	.-4      	; 0x2b78 <delay_us+0x4>
    2b7c:	6f 91       	pop	r22
    2b7e:	01 97       	sbiw	r24, 0x01	; 1
    2b80:	c9 f7       	brne	.-14     	; 0x2b74 <delay_us>
    2b82:	08 95       	ret

00002b84 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    2b84:	fc 01       	movw	r30, r24
    2b86:	11 82       	std	Z+1, r1	; 0x01
    2b88:	10 82       	st	Z, r1
    2b8a:	13 82       	std	Z+3, r1	; 0x03
    2b8c:	12 82       	std	Z+2, r1	; 0x02
    2b8e:	15 82       	std	Z+5, r1	; 0x05
    2b90:	14 82       	std	Z+4, r1	; 0x04
    2b92:	16 82       	std	Z+6, r1	; 0x06
    2b94:	68 30       	cpi	r22, 0x08	; 8
    2b96:	68 f4       	brcc	.+26     	; 0x2bb2 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    2b98:	89 e2       	ldi	r24, 0x29	; 41
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	91 83       	std	Z+1, r25	; 0x01
    2b9e:	80 83       	st	Z, r24
    2ba0:	8b e2       	ldi	r24, 0x2B	; 43
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	93 83       	std	Z+3, r25	; 0x03
    2ba6:	82 83       	std	Z+2, r24	; 0x02
    2ba8:	8a e2       	ldi	r24, 0x2A	; 42
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	95 83       	std	Z+5, r25	; 0x05
    2bae:	84 83       	std	Z+4, r24	; 0x04
    2bb0:	1f c0       	rjmp	.+62     	; 0x2bf0 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    2bb2:	6e 30       	cpi	r22, 0x0E	; 14
    2bb4:	70 f4       	brcc	.+28     	; 0x2bd2 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    2bb6:	83 e2       	ldi	r24, 0x23	; 35
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	91 83       	std	Z+1, r25	; 0x01
    2bbc:	80 83       	st	Z, r24
    2bbe:	85 e2       	ldi	r24, 0x25	; 37
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	93 83       	std	Z+3, r25	; 0x03
    2bc4:	82 83       	std	Z+2, r24	; 0x02
    2bc6:	84 e2       	ldi	r24, 0x24	; 36
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	95 83       	std	Z+5, r25	; 0x05
    2bcc:	84 83       	std	Z+4, r24	; 0x04
    2bce:	68 50       	subi	r22, 0x08	; 8
    2bd0:	0f c0       	rjmp	.+30     	; 0x2bf0 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    2bd2:	65 31       	cpi	r22, 0x15	; 21
    2bd4:	98 f4       	brcc	.+38     	; 0x2bfc <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    2bd6:	86 e2       	ldi	r24, 0x26	; 38
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	91 83       	std	Z+1, r25	; 0x01
    2bdc:	80 83       	st	Z, r24
    2bde:	88 e2       	ldi	r24, 0x28	; 40
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	93 83       	std	Z+3, r25	; 0x03
    2be4:	82 83       	std	Z+2, r24	; 0x02
    2be6:	87 e2       	ldi	r24, 0x27	; 39
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	95 83       	std	Z+5, r25	; 0x05
    2bec:	84 83       	std	Z+4, r24	; 0x04
    2bee:	6e 50       	subi	r22, 0x0E	; 14
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	01 c0       	rjmp	.+2      	; 0x2bf6 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    2bf4:	88 0f       	add	r24, r24
    2bf6:	6a 95       	dec	r22
    2bf8:	ea f7       	brpl	.-6      	; 0x2bf4 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    2bfa:	86 83       	std	Z+6, r24	; 0x06
    2bfc:	08 95       	ret

00002bfe <_ZN16PololuQTRSensors4initEhhh>:
    2bfe:	a7 e0       	ldi	r26, 0x07	; 7
    2c00:	b0 e0       	ldi	r27, 0x00	; 0
    2c02:	e5 e0       	ldi	r30, 0x05	; 5
    2c04:	f6 e1       	ldi	r31, 0x16	; 22
    2c06:	0c 94 52 1b 	jmp	0x36a4	; 0x36a4 <__prologue_saves__+0x1c>
    2c0a:	8c 01       	movw	r16, r24
    2c0c:	fc 01       	movw	r30, r24
    2c0e:	11 82       	std	Z+1, r1	; 0x01
    2c10:	10 82       	st	Z, r1
    2c12:	13 82       	std	Z+3, r1	; 0x03
    2c14:	12 82       	std	Z+2, r1	; 0x02
    2c16:	15 82       	std	Z+5, r1	; 0x05
    2c18:	14 82       	std	Z+4, r1	; 0x04
    2c1a:	17 82       	std	Z+7, r1	; 0x07
    2c1c:	16 82       	std	Z+6, r1	; 0x06
    2c1e:	61 31       	cpi	r22, 0x11	; 17
    2c20:	18 f0       	brcs	.+6      	; 0x2c28 <_ZN16PololuQTRSensors4initEhhh+0x2a>
    2c22:	80 e1       	ldi	r24, 0x10	; 16
    2c24:	80 87       	std	Z+8, r24	; 0x08
    2c26:	02 c0       	rjmp	.+4      	; 0x2c2c <_ZN16PololuQTRSensors4initEhhh+0x2e>
    2c28:	fc 01       	movw	r30, r24
    2c2a:	60 87       	std	Z+8, r22	; 0x08
    2c2c:	f8 01       	movw	r30, r16
    2c2e:	20 8b       	std	Z+16, r18	; 0x10
    2c30:	64 2f       	mov	r22, r20
    2c32:	ce 01       	movw	r24, r28
    2c34:	01 96       	adiw	r24, 0x01	; 1
    2c36:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    2c3a:	8f 81       	ldd	r24, Y+7	; 0x07
    2c3c:	f8 01       	movw	r30, r16
    2c3e:	81 87       	std	Z+9, r24	; 0x09
    2c40:	8b 81       	ldd	r24, Y+3	; 0x03
    2c42:	9c 81       	ldd	r25, Y+4	; 0x04
    2c44:	93 87       	std	Z+11, r25	; 0x0b
    2c46:	82 87       	std	Z+10, r24	; 0x0a
    2c48:	8d 81       	ldd	r24, Y+5	; 0x05
    2c4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c4c:	95 87       	std	Z+13, r25	; 0x0d
    2c4e:	84 87       	std	Z+12, r24	; 0x0c
    2c50:	27 96       	adiw	r28, 0x07	; 7
    2c52:	e4 e0       	ldi	r30, 0x04	; 4
    2c54:	0c 94 6e 1b 	jmp	0x36dc	; 0x36dc <__epilogue_restores__+0x1c>

00002c58 <_ZN16PololuQTRSensors11emittersOffEv>:
    2c58:	fc 01       	movw	r30, r24
    2c5a:	a4 85       	ldd	r26, Z+12	; 0x0c
    2c5c:	b5 85       	ldd	r27, Z+13	; 0x0d
    2c5e:	10 97       	sbiw	r26, 0x00	; 0
    2c60:	79 f0       	breq	.+30     	; 0x2c80 <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    2c62:	8c 91       	ld	r24, X
    2c64:	91 85       	ldd	r25, Z+9	; 0x09
    2c66:	89 2b       	or	r24, r25
    2c68:	8c 93       	st	X, r24
    2c6a:	a2 85       	ldd	r26, Z+10	; 0x0a
    2c6c:	b3 85       	ldd	r27, Z+11	; 0x0b
    2c6e:	9c 91       	ld	r25, X
    2c70:	81 85       	ldd	r24, Z+9	; 0x09
    2c72:	80 95       	com	r24
    2c74:	89 23       	and	r24, r25
    2c76:	8c 93       	st	X, r24
    2c78:	88 ec       	ldi	r24, 0xC8	; 200
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <delay_us>
    2c80:	08 95       	ret

00002c82 <_ZN16PololuQTRSensors10emittersOnEv>:
    2c82:	fc 01       	movw	r30, r24
    2c84:	a4 85       	ldd	r26, Z+12	; 0x0c
    2c86:	b5 85       	ldd	r27, Z+13	; 0x0d
    2c88:	10 97       	sbiw	r26, 0x00	; 0
    2c8a:	71 f0       	breq	.+28     	; 0x2ca8 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    2c8c:	8c 91       	ld	r24, X
    2c8e:	91 85       	ldd	r25, Z+9	; 0x09
    2c90:	89 2b       	or	r24, r25
    2c92:	8c 93       	st	X, r24
    2c94:	a2 85       	ldd	r26, Z+10	; 0x0a
    2c96:	b3 85       	ldd	r27, Z+11	; 0x0b
    2c98:	8c 91       	ld	r24, X
    2c9a:	91 85       	ldd	r25, Z+9	; 0x09
    2c9c:	89 2b       	or	r24, r25
    2c9e:	8c 93       	st	X, r24
    2ca0:	88 ec       	ldi	r24, 0xC8	; 200
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <delay_us>
    2ca8:	08 95       	ret

00002caa <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    2caa:	a7 e0       	ldi	r26, 0x07	; 7
    2cac:	b0 e0       	ldi	r27, 0x00	; 0
    2cae:	eb e5       	ldi	r30, 0x5B	; 91
    2cb0:	f6 e1       	ldi	r31, 0x16	; 22
    2cb2:	0c 94 47 1b 	jmp	0x368e	; 0x368e <__prologue_saves__+0x6>
    2cb6:	7c 01       	movw	r14, r24
    2cb8:	4b 01       	movw	r8, r22
    2cba:	64 2f       	mov	r22, r20
    2cbc:	39 01       	movw	r6, r18
    2cbe:	40 2f       	mov	r20, r16
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <_ZN16PololuQTRSensors4initEhhh>
    2cc6:	87 01       	movw	r16, r14
    2cc8:	0f 5b       	subi	r16, 0xBF	; 191
    2cca:	1f 4f       	sbci	r17, 0xFF	; 255
    2ccc:	f8 01       	movw	r30, r16
    2cce:	10 82       	st	Z, r1
    2cd0:	67 01       	movw	r12, r14
    2cd2:	f2 e4       	ldi	r31, 0x42	; 66
    2cd4:	cf 0e       	add	r12, r31
    2cd6:	d1 1c       	adc	r13, r1
    2cd8:	f6 01       	movw	r30, r12
    2cda:	10 82       	st	Z, r1
    2cdc:	57 01       	movw	r10, r14
    2cde:	f3 e4       	ldi	r31, 0x43	; 67
    2ce0:	af 0e       	add	r10, r31
    2ce2:	b1 1c       	adc	r11, r1
    2ce4:	f5 01       	movw	r30, r10
    2ce6:	10 82       	st	Z, r1
    2ce8:	f7 01       	movw	r30, r14
    2cea:	77 86       	std	Z+15, r7	; 0x0f
    2cec:	66 86       	std	Z+14, r6	; 0x0e
    2cee:	51 2c       	mov	r5, r1
    2cf0:	f7 01       	movw	r30, r14
    2cf2:	80 85       	ldd	r24, Z+8	; 0x08
    2cf4:	58 16       	cp	r5, r24
    2cf6:	50 f5       	brcc	.+84     	; 0x2d4c <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    2cf8:	65 2c       	mov	r6, r5
    2cfa:	71 2c       	mov	r7, r1
    2cfc:	f4 01       	movw	r30, r8
    2cfe:	e6 0d       	add	r30, r6
    2d00:	f7 1d       	adc	r31, r7
    2d02:	60 81       	ld	r22, Z
    2d04:	ce 01       	movw	r24, r28
    2d06:	01 96       	adiw	r24, 0x01	; 1
    2d08:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    2d0c:	2f 81       	ldd	r18, Y+7	; 0x07
    2d0e:	f7 01       	movw	r30, r14
    2d10:	e6 0d       	add	r30, r6
    2d12:	f7 1d       	adc	r31, r7
    2d14:	21 8b       	std	Z+17, r18	; 0x11
    2d16:	89 81       	ldd	r24, Y+1	; 0x01
    2d18:	9a 81       	ldd	r25, Y+2	; 0x02
    2d1a:	f3 01       	movw	r30, r6
    2d1c:	ee 0f       	add	r30, r30
    2d1e:	ff 1f       	adc	r31, r31
    2d20:	ee 0d       	add	r30, r14
    2d22:	ff 1d       	adc	r31, r15
    2d24:	92 a3       	std	Z+34, r25	; 0x22
    2d26:	81 a3       	std	Z+33, r24	; 0x21
    2d28:	83 32       	cpi	r24, 0x23	; 35
    2d2a:	91 05       	cpc	r25, r1
    2d2c:	11 f4       	brne	.+4      	; 0x2d32 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    2d2e:	f8 01       	movw	r30, r16
    2d30:	08 c0       	rjmp	.+16     	; 0x2d42 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    2d32:	86 32       	cpi	r24, 0x26	; 38
    2d34:	91 05       	cpc	r25, r1
    2d36:	11 f4       	brne	.+4      	; 0x2d3c <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    2d38:	f6 01       	movw	r30, r12
    2d3a:	03 c0       	rjmp	.+6      	; 0x2d42 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    2d3c:	89 97       	sbiw	r24, 0x29	; 41
    2d3e:	21 f4       	brne	.+8      	; 0x2d48 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    2d40:	f5 01       	movw	r30, r10
    2d42:	80 81       	ld	r24, Z
    2d44:	82 2b       	or	r24, r18
    2d46:	80 83       	st	Z, r24
    2d48:	53 94       	inc	r5
    2d4a:	d2 cf       	rjmp	.-92     	; 0x2cf0 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    2d4c:	27 96       	adiw	r28, 0x07	; 7
    2d4e:	ef e0       	ldi	r30, 0x0F	; 15
    2d50:	0c 94 63 1b 	jmp	0x36c6	; 0x36c6 <__epilogue_restores__+0x6>

00002d54 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    2d54:	a0 e0       	ldi	r26, 0x00	; 0
    2d56:	b0 e0       	ldi	r27, 0x00	; 0
    2d58:	e0 eb       	ldi	r30, 0xB0	; 176
    2d5a:	f6 e1       	ldi	r31, 0x16	; 22
    2d5c:	0c 94 49 1b 	jmp	0x3692	; 0x3692 <__prologue_saves__+0xa>
    2d60:	ec 01       	movw	r28, r24
    2d62:	5b 01       	movw	r10, r22
    2d64:	6c 01       	movw	r12, r24
    2d66:	81 e4       	ldi	r24, 0x41	; 65
    2d68:	c8 0e       	add	r12, r24
    2d6a:	d1 1c       	adc	r13, r1
    2d6c:	f6 01       	movw	r30, r12
    2d6e:	80 80       	ld	r8, Z
    2d70:	7e 01       	movw	r14, r28
    2d72:	f2 e4       	ldi	r31, 0x42	; 66
    2d74:	ef 0e       	add	r14, r31
    2d76:	f1 1c       	adc	r15, r1
    2d78:	f7 01       	movw	r30, r14
    2d7a:	70 80       	ld	r7, Z
    2d7c:	8e 01       	movw	r16, r28
    2d7e:	0d 5b       	subi	r16, 0xBD	; 189
    2d80:	1f 4f       	sbci	r17, 0xFF	; 255
    2d82:	f8 01       	movw	r30, r16
    2d84:	90 80       	ld	r9, Z
    2d86:	80 e0       	ldi	r24, 0x00	; 0
    2d88:	98 85       	ldd	r25, Y+8	; 0x08
    2d8a:	89 17       	cp	r24, r25
    2d8c:	48 f4       	brcc	.+18     	; 0x2da0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    2d8e:	f5 01       	movw	r30, r10
    2d90:	e8 0f       	add	r30, r24
    2d92:	f1 1d       	adc	r31, r1
    2d94:	e8 0f       	add	r30, r24
    2d96:	f1 1d       	adc	r31, r1
    2d98:	11 82       	std	Z+1, r1	; 0x01
    2d9a:	10 82       	st	Z, r1
    2d9c:	8f 5f       	subi	r24, 0xFF	; 255
    2d9e:	f4 cf       	rjmp	.-24     	; 0x2d88 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    2da0:	84 b1       	in	r24, 0x04	; 4
    2da2:	f6 01       	movw	r30, r12
    2da4:	90 81       	ld	r25, Z
    2da6:	89 2b       	or	r24, r25
    2da8:	84 b9       	out	0x04, r24	; 4
    2daa:	87 b1       	in	r24, 0x07	; 7
    2dac:	f7 01       	movw	r30, r14
    2dae:	90 81       	ld	r25, Z
    2db0:	89 2b       	or	r24, r25
    2db2:	87 b9       	out	0x07, r24	; 7
    2db4:	8a b1       	in	r24, 0x0a	; 10
    2db6:	f8 01       	movw	r30, r16
    2db8:	90 81       	ld	r25, Z
    2dba:	89 2b       	or	r24, r25
    2dbc:	8a b9       	out	0x0a, r24	; 10
    2dbe:	85 b1       	in	r24, 0x05	; 5
    2dc0:	f6 01       	movw	r30, r12
    2dc2:	90 81       	ld	r25, Z
    2dc4:	89 2b       	or	r24, r25
    2dc6:	85 b9       	out	0x05, r24	; 5
    2dc8:	88 b1       	in	r24, 0x08	; 8
    2dca:	f7 01       	movw	r30, r14
    2dcc:	90 81       	ld	r25, Z
    2dce:	89 2b       	or	r24, r25
    2dd0:	88 b9       	out	0x08, r24	; 8
    2dd2:	8b b1       	in	r24, 0x0b	; 11
    2dd4:	f8 01       	movw	r30, r16
    2dd6:	90 81       	ld	r25, Z
    2dd8:	89 2b       	or	r24, r25
    2dda:	8b b9       	out	0x0b, r24	; 11
    2ddc:	8a e0       	ldi	r24, 0x0A	; 10
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <delay_us>
    2de4:	94 b1       	in	r25, 0x04	; 4
    2de6:	f6 01       	movw	r30, r12
    2de8:	80 81       	ld	r24, Z
    2dea:	80 95       	com	r24
    2dec:	89 23       	and	r24, r25
    2dee:	84 b9       	out	0x04, r24	; 4
    2df0:	97 b1       	in	r25, 0x07	; 7
    2df2:	f7 01       	movw	r30, r14
    2df4:	80 81       	ld	r24, Z
    2df6:	80 95       	com	r24
    2df8:	89 23       	and	r24, r25
    2dfa:	87 b9       	out	0x07, r24	; 7
    2dfc:	9a b1       	in	r25, 0x0a	; 10
    2dfe:	f8 01       	movw	r30, r16
    2e00:	80 81       	ld	r24, Z
    2e02:	80 95       	com	r24
    2e04:	89 23       	and	r24, r25
    2e06:	8a b9       	out	0x0a, r24	; 10
    2e08:	95 b1       	in	r25, 0x05	; 5
    2e0a:	f6 01       	movw	r30, r12
    2e0c:	80 81       	ld	r24, Z
    2e0e:	80 95       	com	r24
    2e10:	89 23       	and	r24, r25
    2e12:	85 b9       	out	0x05, r24	; 5
    2e14:	98 b1       	in	r25, 0x08	; 8
    2e16:	f7 01       	movw	r30, r14
    2e18:	80 81       	ld	r24, Z
    2e1a:	80 95       	com	r24
    2e1c:	89 23       	and	r24, r25
    2e1e:	88 b9       	out	0x08, r24	; 8
    2e20:	9b b1       	in	r25, 0x0b	; 11
    2e22:	f8 01       	movw	r30, r16
    2e24:	80 81       	ld	r24, Z
    2e26:	80 95       	com	r24
    2e28:	89 23       	and	r24, r25
    2e2a:	8b b9       	out	0x0b, r24	; 11
    2e2c:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2e30:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2e34:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2e38:	83 60       	ori	r24, 0x03	; 3
    2e3a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2e3e:	82 e0       	ldi	r24, 0x02	; 2
    2e40:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2e44:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	2e 85       	ldd	r18, Y+14	; 0x0e
    2e4e:	3f 85       	ldd	r19, Y+15	; 0x0f
    2e50:	82 17       	cp	r24, r18
    2e52:	93 07       	cpc	r25, r19
    2e54:	20 f5       	brcc	.+72     	; 0x2e9e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    2e56:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    2e5a:	2c 2d       	mov	r18, r12
    2e5c:	24 1b       	sub	r18, r20
    2e5e:	82 0f       	add	r24, r18
    2e60:	91 1d       	adc	r25, r1
    2e62:	03 b1       	in	r16, 0x03	; 3
    2e64:	08 11       	cpse	r16, r8
    2e66:	32 c0       	rjmp	.+100    	; 0x2ecc <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2e68:	f6 b0       	in	r15, 0x06	; 6
    2e6a:	f7 10       	cpse	r15, r7
    2e6c:	2f c0       	rjmp	.+94     	; 0x2ecc <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2e6e:	29 b1       	in	r18, 0x09	; 9
    2e70:	29 11       	cpse	r18, r9
    2e72:	2c c0       	rjmp	.+88     	; 0x2ecc <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2e74:	10 c0       	rjmp	.+32     	; 0x2e96 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    2e76:	21 2f       	mov	r18, r17
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	a9 01       	movw	r20, r18
    2e7c:	44 0f       	add	r20, r20
    2e7e:	55 1f       	adc	r21, r21
    2e80:	f5 01       	movw	r30, r10
    2e82:	e4 0f       	add	r30, r20
    2e84:	f5 1f       	adc	r31, r21
    2e86:	60 81       	ld	r22, Z
    2e88:	71 81       	ldd	r23, Z+1	; 0x01
    2e8a:	67 2b       	or	r22, r23
    2e8c:	21 f1       	breq	.+72     	; 0x2ed6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    2e8e:	1f 5f       	subi	r17, 0xFF	; 255
    2e90:	28 85       	ldd	r18, Y+8	; 0x08
    2e92:	12 17       	cp	r17, r18
    2e94:	80 f3       	brcs	.-32     	; 0x2e76 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    2e96:	7f 2c       	mov	r7, r15
    2e98:	80 2e       	mov	r8, r16
    2e9a:	4c 2d       	mov	r20, r12
    2e9c:	d7 cf       	rjmp	.-82     	; 0x2e4c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    2e9e:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2ea2:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2ea6:	20 e0       	ldi	r18, 0x00	; 0
    2ea8:	88 85       	ldd	r24, Y+8	; 0x08
    2eaa:	28 17       	cp	r18, r24
    2eac:	30 f5       	brcc	.+76     	; 0x2efa <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    2eae:	f5 01       	movw	r30, r10
    2eb0:	e2 0f       	add	r30, r18
    2eb2:	f1 1d       	adc	r31, r1
    2eb4:	e2 0f       	add	r30, r18
    2eb6:	f1 1d       	adc	r31, r1
    2eb8:	80 81       	ld	r24, Z
    2eba:	91 81       	ldd	r25, Z+1	; 0x01
    2ebc:	89 2b       	or	r24, r25
    2ebe:	21 f4       	brne	.+8      	; 0x2ec8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    2ec0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ec2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ec4:	91 83       	std	Z+1, r25	; 0x01
    2ec6:	80 83       	st	Z, r24
    2ec8:	2f 5f       	subi	r18, 0xFF	; 255
    2eca:	ee cf       	rjmp	.-36     	; 0x2ea8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    2ecc:	03 b1       	in	r16, 0x03	; 3
    2ece:	f6 b0       	in	r15, 0x06	; 6
    2ed0:	99 b0       	in	r9, 0x09	; 9
    2ed2:	10 e0       	ldi	r17, 0x00	; 0
    2ed4:	dd cf       	rjmp	.-70     	; 0x2e90 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    2ed6:	de 01       	movw	r26, r28
    2ed8:	a4 0f       	add	r26, r20
    2eda:	b5 1f       	adc	r27, r21
    2edc:	91 96       	adiw	r26, 0x21	; 33
    2ede:	0d 90       	ld	r0, X+
    2ee0:	bc 91       	ld	r27, X
    2ee2:	a0 2d       	mov	r26, r0
    2ee4:	4c 91       	ld	r20, X
    2ee6:	de 01       	movw	r26, r28
    2ee8:	a2 0f       	add	r26, r18
    2eea:	b3 1f       	adc	r27, r19
    2eec:	51 96       	adiw	r26, 0x11	; 17
    2eee:	2c 91       	ld	r18, X
    2ef0:	42 23       	and	r20, r18
    2ef2:	69 f6       	brne	.-102    	; 0x2e8e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    2ef4:	91 83       	std	Z+1, r25	; 0x01
    2ef6:	80 83       	st	Z, r24
    2ef8:	ca cf       	rjmp	.-108    	; 0x2e8e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    2efa:	cd b7       	in	r28, 0x3d	; 61
    2efc:	de b7       	in	r29, 0x3e	; 62
    2efe:	ed e0       	ldi	r30, 0x0D	; 13
    2f00:	0c 94 65 1b 	jmp	0x36ca	; 0x36ca <__epilogue_restores__+0xa>

00002f04 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    2f04:	ef 92       	push	r14
    2f06:	ff 92       	push	r15
    2f08:	0f 93       	push	r16
    2f0a:	1f 93       	push	r17
    2f0c:	cf 93       	push	r28
    2f0e:	df 93       	push	r29
    2f10:	fc 01       	movw	r30, r24
    2f12:	9b 01       	movw	r18, r22
    2f14:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2f18:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2f1c:	47 b1       	in	r20, 0x07	; 7
    2f1e:	18 b1       	in	r17, 0x08	; 8
    2f20:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2f24:	86 fd       	sbrc	r24, 6
    2f26:	fc cf       	rjmp	.-8      	; 0x2f20 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    2f28:	80 e0       	ldi	r24, 0x00	; 0
    2f2a:	90 85       	ldd	r25, Z+8	; 0x08
    2f2c:	89 17       	cp	r24, r25
    2f2e:	48 f4       	brcc	.+18     	; 0x2f42 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    2f30:	d9 01       	movw	r26, r18
    2f32:	a8 0f       	add	r26, r24
    2f34:	b1 1d       	adc	r27, r1
    2f36:	a8 0f       	add	r26, r24
    2f38:	b1 1d       	adc	r27, r1
    2f3a:	1d 92       	st	X+, r1
    2f3c:	1c 92       	st	X, r1
    2f3e:	8f 5f       	subi	r24, 0xFF	; 255
    2f40:	f4 cf       	rjmp	.-24     	; 0x2f2a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    2f42:	97 b1       	in	r25, 0x07	; 7
    2f44:	82 a1       	ldd	r24, Z+34	; 0x22
    2f46:	80 95       	com	r24
    2f48:	89 23       	and	r24, r25
    2f4a:	87 b9       	out	0x07, r24	; 7
    2f4c:	98 b1       	in	r25, 0x08	; 8
    2f4e:	82 a1       	ldd	r24, Z+34	; 0x22
    2f50:	80 95       	com	r24
    2f52:	89 23       	and	r24, r25
    2f54:	88 b9       	out	0x08, r24	; 8
    2f56:	87 e8       	ldi	r24, 0x87	; 135
    2f58:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2f5c:	e1 2c       	mov	r14, r1
    2f5e:	81 a1       	ldd	r24, Z+33	; 0x21
    2f60:	e8 16       	cp	r14, r24
    2f62:	10 f0       	brcs	.+4      	; 0x2f68 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    2f64:	e1 2c       	mov	r14, r1
    2f66:	29 c0       	rjmp	.+82     	; 0x2fba <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    2f68:	50 e0       	ldi	r21, 0x00	; 0
    2f6a:	80 85       	ldd	r24, Z+8	; 0x08
    2f6c:	58 17       	cp	r21, r24
    2f6e:	18 f5       	brcc	.+70     	; 0x2fb6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    2f70:	a5 2f       	mov	r26, r21
    2f72:	b0 e0       	ldi	r27, 0x00	; 0
    2f74:	ef 01       	movw	r28, r30
    2f76:	ca 0f       	add	r28, r26
    2f78:	db 1f       	adc	r29, r27
    2f7a:	89 89       	ldd	r24, Y+17	; 0x11
    2f7c:	80 64       	ori	r24, 0x40	; 64
    2f7e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2f82:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2f86:	80 64       	ori	r24, 0x40	; 64
    2f88:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2f8c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2f90:	86 fd       	sbrc	r24, 6
    2f92:	fc cf       	rjmp	.-8      	; 0x2f8c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    2f94:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    2f98:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    2f9c:	aa 0f       	add	r26, r26
    2f9e:	bb 1f       	adc	r27, r27
    2fa0:	a2 0f       	add	r26, r18
    2fa2:	b3 1f       	adc	r27, r19
    2fa4:	8d 91       	ld	r24, X+
    2fa6:	9c 91       	ld	r25, X
    2fa8:	11 97       	sbiw	r26, 0x01	; 1
    2faa:	86 0f       	add	r24, r22
    2fac:	97 1f       	adc	r25, r23
    2fae:	8d 93       	st	X+, r24
    2fb0:	9c 93       	st	X, r25
    2fb2:	5f 5f       	subi	r21, 0xFF	; 255
    2fb4:	da cf       	rjmp	.-76     	; 0x2f6a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    2fb6:	e3 94       	inc	r14
    2fb8:	d2 cf       	rjmp	.-92     	; 0x2f5e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    2fba:	80 85       	ldd	r24, Z+8	; 0x08
    2fbc:	e8 16       	cp	r14, r24
    2fbe:	a0 f4       	brcc	.+40     	; 0x2fe8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    2fc0:	e9 01       	movw	r28, r18
    2fc2:	ce 0d       	add	r28, r14
    2fc4:	d1 1d       	adc	r29, r1
    2fc6:	ce 0d       	add	r28, r14
    2fc8:	d1 1d       	adc	r29, r1
    2fca:	61 a1       	ldd	r22, Z+33	; 0x21
    2fcc:	70 e0       	ldi	r23, 0x00	; 0
    2fce:	cb 01       	movw	r24, r22
    2fd0:	95 95       	asr	r25
    2fd2:	87 95       	ror	r24
    2fd4:	a8 81       	ld	r26, Y
    2fd6:	b9 81       	ldd	r27, Y+1	; 0x01
    2fd8:	8a 0f       	add	r24, r26
    2fda:	9b 1f       	adc	r25, r27
    2fdc:	0e 94 cd 1a 	call	0x359a	; 0x359a <__udivmodhi4>
    2fe0:	79 83       	std	Y+1, r23	; 0x01
    2fe2:	68 83       	st	Y, r22
    2fe4:	e3 94       	inc	r14
    2fe6:	e9 cf       	rjmp	.-46     	; 0x2fba <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    2fe8:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2fec:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2ff0:	18 b9       	out	0x08, r17	; 8
    2ff2:	47 b9       	out	0x07, r20	; 7
    2ff4:	cd b7       	in	r28, 0x3d	; 61
    2ff6:	de b7       	in	r29, 0x3e	; 62
    2ff8:	e6 e0       	ldi	r30, 0x06	; 6
    2ffa:	0c 94 6c 1b 	jmp	0x36d8	; 0x36d8 <__epilogue_restores__+0x18>

00002ffe <_ZN16PololuQTRSensors4readEPjh>:
    2ffe:	a0 e2       	ldi	r26, 0x20	; 32
    3000:	b0 e0       	ldi	r27, 0x00	; 0
    3002:	e5 e0       	ldi	r30, 0x05	; 5
    3004:	f8 e1       	ldi	r31, 0x18	; 24
    3006:	0c 94 4f 1b 	jmp	0x369e	; 0x369e <__prologue_saves__+0x16>
    300a:	8c 01       	movw	r16, r24
    300c:	7b 01       	movw	r14, r22
    300e:	d4 2e       	mov	r13, r20
    3010:	8f ef       	ldi	r24, 0xFF	; 255
    3012:	84 0f       	add	r24, r20
    3014:	82 30       	cpi	r24, 0x02	; 2
    3016:	18 f4       	brcc	.+6      	; 0x301e <_ZN16PololuQTRSensors4readEPjh+0x20>
    3018:	c8 01       	movw	r24, r16
    301a:	0e 94 41 16 	call	0x2c82	; 0x2c82 <_ZN16PololuQTRSensors10emittersOnEv>
    301e:	d8 01       	movw	r26, r16
    3020:	50 96       	adiw	r26, 0x10	; 16
    3022:	8c 91       	ld	r24, X
    3024:	b7 01       	movw	r22, r14
    3026:	81 11       	cpse	r24, r1
    3028:	10 c0       	rjmp	.+32     	; 0x304a <_ZN16PololuQTRSensors4readEPjh+0x4c>
    302a:	c8 01       	movw	r24, r16
    302c:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    3030:	c8 01       	movw	r24, r16
    3032:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <_ZN16PololuQTRSensors11emittersOffEv>
    3036:	b2 e0       	ldi	r27, 0x02	; 2
    3038:	db 12       	cpse	r13, r27
    303a:	3a c0       	rjmp	.+116    	; 0x30b0 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    303c:	be 01       	movw	r22, r28
    303e:	6f 5f       	subi	r22, 0xFF	; 255
    3040:	7f 4f       	sbci	r23, 0xFF	; 255
    3042:	c8 01       	movw	r24, r16
    3044:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    3048:	0f c0       	rjmp	.+30     	; 0x3068 <_ZN16PololuQTRSensors4readEPjh+0x6a>
    304a:	c8 01       	movw	r24, r16
    304c:	0e 94 82 17 	call	0x2f04	; 0x2f04 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    3050:	c8 01       	movw	r24, r16
    3052:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <_ZN16PololuQTRSensors11emittersOffEv>
    3056:	e2 e0       	ldi	r30, 0x02	; 2
    3058:	de 12       	cpse	r13, r30
    305a:	2a c0       	rjmp	.+84     	; 0x30b0 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    305c:	be 01       	movw	r22, r28
    305e:	6f 5f       	subi	r22, 0xFF	; 255
    3060:	7f 4f       	sbci	r23, 0xFF	; 255
    3062:	c8 01       	movw	r24, r16
    3064:	0e 94 82 17 	call	0x2f04	; 0x2f04 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    3068:	40 e0       	ldi	r20, 0x00	; 0
    306a:	f8 01       	movw	r30, r16
    306c:	80 85       	ldd	r24, Z+8	; 0x08
    306e:	48 17       	cp	r20, r24
    3070:	f8 f4       	brcc	.+62     	; 0x30b0 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    3072:	84 2f       	mov	r24, r20
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	88 0f       	add	r24, r24
    3078:	99 1f       	adc	r25, r25
    307a:	f7 01       	movw	r30, r14
    307c:	e8 0f       	add	r30, r24
    307e:	f9 1f       	adc	r31, r25
    3080:	21 e0       	ldi	r18, 0x01	; 1
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	2c 0f       	add	r18, r28
    3086:	3d 1f       	adc	r19, r29
    3088:	82 0f       	add	r24, r18
    308a:	93 1f       	adc	r25, r19
    308c:	d8 01       	movw	r26, r16
    308e:	1e 96       	adiw	r26, 0x0e	; 14
    3090:	2d 91       	ld	r18, X+
    3092:	3c 91       	ld	r19, X
    3094:	1f 97       	sbiw	r26, 0x0f	; 15
    3096:	dc 01       	movw	r26, r24
    3098:	8d 91       	ld	r24, X+
    309a:	9c 91       	ld	r25, X
    309c:	28 1b       	sub	r18, r24
    309e:	39 0b       	sbc	r19, r25
    30a0:	80 81       	ld	r24, Z
    30a2:	91 81       	ldd	r25, Z+1	; 0x01
    30a4:	82 0f       	add	r24, r18
    30a6:	93 1f       	adc	r25, r19
    30a8:	91 83       	std	Z+1, r25	; 0x01
    30aa:	80 83       	st	Z, r24
    30ac:	4f 5f       	subi	r20, 0xFF	; 255
    30ae:	dd cf       	rjmp	.-70     	; 0x306a <_ZN16PololuQTRSensors4readEPjh+0x6c>
    30b0:	a0 96       	adiw	r28, 0x20	; 32
    30b2:	e7 e0       	ldi	r30, 0x07	; 7
    30b4:	0c 94 6b 1b 	jmp	0x36d6	; 0x36d6 <__epilogue_restores__+0x16>

000030b8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    30b8:	2f 92       	push	r2
    30ba:	3f 92       	push	r3
    30bc:	5f 92       	push	r5
    30be:	6f 92       	push	r6
    30c0:	7f 92       	push	r7
    30c2:	8f 92       	push	r8
    30c4:	9f 92       	push	r9
    30c6:	af 92       	push	r10
    30c8:	bf 92       	push	r11
    30ca:	cf 92       	push	r12
    30cc:	df 92       	push	r13
    30ce:	ef 92       	push	r14
    30d0:	ff 92       	push	r15
    30d2:	0f 93       	push	r16
    30d4:	1f 93       	push	r17
    30d6:	cf 93       	push	r28
    30d8:	df 93       	push	r29
    30da:	cd b7       	in	r28, 0x3d	; 61
    30dc:	de b7       	in	r29, 0x3e	; 62
    30de:	c0 56       	subi	r28, 0x60	; 96
    30e0:	d1 09       	sbc	r29, r1
    30e2:	0f b6       	in	r0, 0x3f	; 63
    30e4:	f8 94       	cli
    30e6:	de bf       	out	0x3e, r29	; 62
    30e8:	0f be       	out	0x3f, r0	; 63
    30ea:	cd bf       	out	0x3d, r28	; 61
    30ec:	8c 01       	movw	r16, r24
    30ee:	4b 01       	movw	r8, r22
    30f0:	5a 01       	movw	r10, r20
    30f2:	52 2e       	mov	r5, r18
    30f4:	da 01       	movw	r26, r20
    30f6:	8d 91       	ld	r24, X+
    30f8:	9c 91       	ld	r25, X
    30fa:	89 2b       	or	r24, r25
    30fc:	31 f0       	breq	.+12     	; 0x310a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x52>
    30fe:	f4 01       	movw	r30, r8
    3100:	80 81       	ld	r24, Z
    3102:	91 81       	ldd	r25, Z+1	; 0x01
    3104:	89 2b       	or	r24, r25
    3106:	f1 f4       	brne	.+60     	; 0x3144 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    3108:	24 c0       	rjmp	.+72     	; 0x3152 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x9a>
    310a:	d8 01       	movw	r26, r16
    310c:	18 96       	adiw	r26, 0x08	; 8
    310e:	8c 91       	ld	r24, X
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	88 0f       	add	r24, r24
    3114:	99 1f       	adc	r25, r25
    3116:	0e 94 81 1b 	call	0x3702	; 0x3702 <malloc>
    311a:	f5 01       	movw	r30, r10
    311c:	91 83       	std	Z+1, r25	; 0x01
    311e:	80 83       	st	Z, r24
    3120:	00 97       	sbiw	r24, 0x00	; 0
    3122:	09 f4       	brne	.+2      	; 0x3126 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x6e>
    3124:	b1 c0       	rjmp	.+354    	; 0x3288 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    3126:	fc 01       	movw	r30, r24
    3128:	20 e0       	ldi	r18, 0x00	; 0
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	d8 01       	movw	r26, r16
    312e:	18 96       	adiw	r26, 0x08	; 8
    3130:	8c 91       	ld	r24, X
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	28 17       	cp	r18, r24
    3136:	39 07       	cpc	r19, r25
    3138:	14 f7       	brge	.-60     	; 0x30fe <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x46>
    313a:	11 92       	st	Z+, r1
    313c:	11 92       	st	Z+, r1
    313e:	2f 5f       	subi	r18, 0xFF	; 255
    3140:	3f 4f       	sbci	r19, 0xFF	; 255
    3142:	f4 cf       	rjmp	.-24     	; 0x312c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x74>
    3144:	e1 2c       	mov	r14, r1
    3146:	f1 2c       	mov	r15, r1
    3148:	6e 01       	movw	r12, r28
    314a:	b1 e2       	ldi	r27, 0x21	; 33
    314c:	cb 0e       	add	r12, r27
    314e:	d1 1c       	adc	r13, r1
    3150:	21 c0       	rjmp	.+66     	; 0x3194 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    3152:	f8 01       	movw	r30, r16
    3154:	80 85       	ldd	r24, Z+8	; 0x08
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	88 0f       	add	r24, r24
    315a:	99 1f       	adc	r25, r25
    315c:	0e 94 81 1b 	call	0x3702	; 0x3702 <malloc>
    3160:	d4 01       	movw	r26, r8
    3162:	8d 93       	st	X+, r24
    3164:	9c 93       	st	X, r25
    3166:	00 97       	sbiw	r24, 0x00	; 0
    3168:	09 f4       	brne	.+2      	; 0x316c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb4>
    316a:	8e c0       	rjmp	.+284    	; 0x3288 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    316c:	fc 01       	movw	r30, r24
    316e:	20 e0       	ldi	r18, 0x00	; 0
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	d8 01       	movw	r26, r16
    3174:	18 96       	adiw	r26, 0x08	; 8
    3176:	8c 91       	ld	r24, X
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	28 17       	cp	r18, r24
    317c:	39 07       	cpc	r19, r25
    317e:	14 f7       	brge	.-60     	; 0x3144 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    3180:	d8 01       	movw	r26, r16
    3182:	1e 96       	adiw	r26, 0x0e	; 14
    3184:	8d 91       	ld	r24, X+
    3186:	9c 91       	ld	r25, X
    3188:	1f 97       	sbiw	r26, 0x0f	; 15
    318a:	81 93       	st	Z+, r24
    318c:	91 93       	st	Z+, r25
    318e:	2f 5f       	subi	r18, 0xFF	; 255
    3190:	3f 4f       	sbci	r19, 0xFF	; 255
    3192:	ef cf       	rjmp	.-34     	; 0x3172 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xba>
    3194:	45 2d       	mov	r20, r5
    3196:	be 01       	movw	r22, r28
    3198:	6f 5b       	subi	r22, 0xBF	; 191
    319a:	7f 4f       	sbci	r23, 0xFF	; 255
    319c:	c8 01       	movw	r24, r16
    319e:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <_ZN16PololuQTRSensors4readEPjh>
    31a2:	f8 01       	movw	r30, r16
    31a4:	60 84       	ldd	r6, Z+8	; 0x08
    31a6:	71 2c       	mov	r7, r1
    31a8:	fe 01       	movw	r30, r28
    31aa:	ef 5b       	subi	r30, 0xBF	; 191
    31ac:	ff 4f       	sbci	r31, 0xFF	; 255
    31ae:	c6 01       	movw	r24, r12
    31b0:	9e 01       	movw	r18, r28
    31b2:	2f 5f       	subi	r18, 0xFF	; 255
    31b4:	3f 4f       	sbci	r19, 0xFF	; 255
    31b6:	19 01       	movw	r2, r18
    31b8:	20 e0       	ldi	r18, 0x00	; 0
    31ba:	30 e0       	ldi	r19, 0x00	; 0
    31bc:	26 15       	cp	r18, r6
    31be:	37 05       	cpc	r19, r7
    31c0:	4c f5       	brge	.+82     	; 0x3214 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x15c>
    31c2:	e1 14       	cp	r14, r1
    31c4:	f1 04       	cpc	r15, r1
    31c6:	89 f0       	breq	.+34     	; 0x31ea <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    31c8:	dc 01       	movw	r26, r24
    31ca:	6d 91       	ld	r22, X+
    31cc:	7c 91       	ld	r23, X
    31ce:	40 81       	ld	r20, Z
    31d0:	51 81       	ldd	r21, Z+1	; 0x01
    31d2:	64 17       	cp	r22, r20
    31d4:	75 07       	cpc	r23, r21
    31d6:	48 f0       	brcs	.+18     	; 0x31ea <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    31d8:	d1 01       	movw	r26, r2
    31da:	6d 91       	ld	r22, X+
    31dc:	7c 91       	ld	r23, X
    31de:	40 81       	ld	r20, Z
    31e0:	51 81       	ldd	r21, Z+1	; 0x01
    31e2:	46 17       	cp	r20, r22
    31e4:	57 07       	cpc	r21, r23
    31e6:	48 f0       	brcs	.+18     	; 0x31fa <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x142>
    31e8:	0d c0       	rjmp	.+26     	; 0x3204 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x14c>
    31ea:	40 81       	ld	r20, Z
    31ec:	51 81       	ldd	r21, Z+1	; 0x01
    31ee:	dc 01       	movw	r26, r24
    31f0:	4d 93       	st	X+, r20
    31f2:	5c 93       	st	X, r21
    31f4:	e1 14       	cp	r14, r1
    31f6:	f1 04       	cpc	r15, r1
    31f8:	79 f7       	brne	.-34     	; 0x31d8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x120>
    31fa:	40 81       	ld	r20, Z
    31fc:	51 81       	ldd	r21, Z+1	; 0x01
    31fe:	d1 01       	movw	r26, r2
    3200:	4d 93       	st	X+, r20
    3202:	5c 93       	st	X, r21
    3204:	2f 5f       	subi	r18, 0xFF	; 255
    3206:	3f 4f       	sbci	r19, 0xFF	; 255
    3208:	b2 e0       	ldi	r27, 0x02	; 2
    320a:	2b 0e       	add	r2, r27
    320c:	31 1c       	adc	r3, r1
    320e:	32 96       	adiw	r30, 0x02	; 2
    3210:	02 96       	adiw	r24, 0x02	; 2
    3212:	d4 cf       	rjmp	.-88     	; 0x31bc <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x104>
    3214:	ef ef       	ldi	r30, 0xFF	; 255
    3216:	ee 1a       	sub	r14, r30
    3218:	fe 0a       	sbc	r15, r30
    321a:	fa e0       	ldi	r31, 0x0A	; 10
    321c:	ef 16       	cp	r14, r31
    321e:	f1 04       	cpc	r15, r1
    3220:	09 f0       	breq	.+2      	; 0x3224 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x16c>
    3222:	b8 cf       	rjmp	.-144    	; 0x3194 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    3224:	9e 01       	movw	r18, r28
    3226:	2f 5f       	subi	r18, 0xFF	; 255
    3228:	3f 4f       	sbci	r19, 0xFF	; 255
    322a:	79 01       	movw	r14, r18
    322c:	36 01       	movw	r6, r12
    322e:	80 e0       	ldi	r24, 0x00	; 0
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	f8 01       	movw	r30, r16
    3234:	20 85       	ldd	r18, Z+8	; 0x08
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	82 17       	cp	r24, r18
    323a:	93 07       	cpc	r25, r19
    323c:	2c f5       	brge	.+74     	; 0x3288 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    323e:	d7 01       	movw	r26, r14
    3240:	2d 91       	ld	r18, X+
    3242:	3d 91       	ld	r19, X+
    3244:	7d 01       	movw	r14, r26
    3246:	b3 01       	movw	r22, r6
    3248:	6c 19       	sub	r22, r12
    324a:	7d 09       	sbc	r23, r13
    324c:	d5 01       	movw	r26, r10
    324e:	ed 91       	ld	r30, X+
    3250:	fc 91       	ld	r31, X
    3252:	e6 0f       	add	r30, r22
    3254:	f7 1f       	adc	r31, r23
    3256:	40 81       	ld	r20, Z
    3258:	51 81       	ldd	r21, Z+1	; 0x01
    325a:	42 17       	cp	r20, r18
    325c:	53 07       	cpc	r21, r19
    325e:	10 f4       	brcc	.+4      	; 0x3264 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1ac>
    3260:	31 83       	std	Z+1, r19	; 0x01
    3262:	20 83       	st	Z, r18
    3264:	f3 01       	movw	r30, r6
    3266:	21 91       	ld	r18, Z+
    3268:	31 91       	ld	r19, Z+
    326a:	3f 01       	movw	r6, r30
    326c:	d4 01       	movw	r26, r8
    326e:	ed 91       	ld	r30, X+
    3270:	fc 91       	ld	r31, X
    3272:	e6 0f       	add	r30, r22
    3274:	f7 1f       	adc	r31, r23
    3276:	40 81       	ld	r20, Z
    3278:	51 81       	ldd	r21, Z+1	; 0x01
    327a:	24 17       	cp	r18, r20
    327c:	35 07       	cpc	r19, r21
    327e:	10 f4       	brcc	.+4      	; 0x3284 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1cc>
    3280:	31 83       	std	Z+1, r19	; 0x01
    3282:	20 83       	st	Z, r18
    3284:	01 96       	adiw	r24, 0x01	; 1
    3286:	d5 cf       	rjmp	.-86     	; 0x3232 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17a>
    3288:	c0 5a       	subi	r28, 0xA0	; 160
    328a:	df 4f       	sbci	r29, 0xFF	; 255
    328c:	0f b6       	in	r0, 0x3f	; 63
    328e:	f8 94       	cli
    3290:	de bf       	out	0x3e, r29	; 62
    3292:	0f be       	out	0x3f, r0	; 63
    3294:	cd bf       	out	0x3d, r28	; 61
    3296:	df 91       	pop	r29
    3298:	cf 91       	pop	r28
    329a:	1f 91       	pop	r17
    329c:	0f 91       	pop	r16
    329e:	ff 90       	pop	r15
    32a0:	ef 90       	pop	r14
    32a2:	df 90       	pop	r13
    32a4:	cf 90       	pop	r12
    32a6:	bf 90       	pop	r11
    32a8:	af 90       	pop	r10
    32aa:	9f 90       	pop	r9
    32ac:	8f 90       	pop	r8
    32ae:	7f 90       	pop	r7
    32b0:	6f 90       	pop	r6
    32b2:	5f 90       	pop	r5
    32b4:	3f 90       	pop	r3
    32b6:	2f 90       	pop	r2
    32b8:	08 95       	ret

000032ba <_ZN16PololuQTRSensors9calibrateEh>:
    32ba:	1f 93       	push	r17
    32bc:	cf 93       	push	r28
    32be:	df 93       	push	r29
    32c0:	ec 01       	movw	r28, r24
    32c2:	16 2f       	mov	r17, r22
    32c4:	8f ef       	ldi	r24, 0xFF	; 255
    32c6:	86 0f       	add	r24, r22
    32c8:	82 30       	cpi	r24, 0x02	; 2
    32ca:	18 f0       	brcs	.+6      	; 0x32d2 <_ZN16PololuQTRSensors9calibrateEh+0x18>
    32cc:	66 23       	and	r22, r22
    32ce:	59 f0       	breq	.+22     	; 0x32e6 <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    32d0:	14 c0       	rjmp	.+40     	; 0x32fa <_ZN16PololuQTRSensors9calibrateEh+0x40>
    32d2:	21 e0       	ldi	r18, 0x01	; 1
    32d4:	ae 01       	movw	r20, r28
    32d6:	4e 5f       	subi	r20, 0xFE	; 254
    32d8:	5f 4f       	sbci	r21, 0xFF	; 255
    32da:	be 01       	movw	r22, r28
    32dc:	ce 01       	movw	r24, r28
    32de:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    32e2:	12 30       	cpi	r17, 0x02	; 2
    32e4:	51 f4       	brne	.+20     	; 0x32fa <_ZN16PololuQTRSensors9calibrateEh+0x40>
    32e6:	ae 01       	movw	r20, r28
    32e8:	4a 5f       	subi	r20, 0xFA	; 250
    32ea:	5f 4f       	sbci	r21, 0xFF	; 255
    32ec:	be 01       	movw	r22, r28
    32ee:	6c 5f       	subi	r22, 0xFC	; 252
    32f0:	7f 4f       	sbci	r23, 0xFF	; 255
    32f2:	20 e0       	ldi	r18, 0x00	; 0
    32f4:	ce 01       	movw	r24, r28
    32f6:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    32fa:	df 91       	pop	r29
    32fc:	cf 91       	pop	r28
    32fe:	1f 91       	pop	r17
    3300:	08 95       	ret

00003302 <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    3302:	a0 e0       	ldi	r26, 0x00	; 0
    3304:	b0 e0       	ldi	r27, 0x00	; 0
    3306:	e7 e8       	ldi	r30, 0x87	; 135
    3308:	f9 e1       	ldi	r31, 0x19	; 25
    330a:	0c 94 4d 1b 	jmp	0x369a	; 0x369a <__prologue_saves__+0x12>
    330e:	ec 01       	movw	r28, r24
    3310:	8b 01       	movw	r16, r22
    3312:	b4 2e       	mov	r11, r20
    3314:	84 2f       	mov	r24, r20
    3316:	8d 7f       	andi	r24, 0xFD	; 253
    3318:	51 f4       	brne	.+20     	; 0x332e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    331a:	8c 81       	ldd	r24, Y+4	; 0x04
    331c:	9d 81       	ldd	r25, Y+5	; 0x05
    331e:	89 2b       	or	r24, r25
    3320:	09 f4       	brne	.+2      	; 0x3324 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x22>
    3322:	97 c0       	rjmp	.+302    	; 0x3452 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    3324:	8e 81       	ldd	r24, Y+6	; 0x06
    3326:	9f 81       	ldd	r25, Y+7	; 0x07
    3328:	89 2b       	or	r24, r25
    332a:	09 f4       	brne	.+2      	; 0x332e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    332c:	92 c0       	rjmp	.+292    	; 0x3452 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    332e:	8f ef       	ldi	r24, 0xFF	; 255
    3330:	8b 0d       	add	r24, r11
    3332:	82 30       	cpi	r24, 0x02	; 2
    3334:	50 f4       	brcc	.+20     	; 0x334a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    3336:	88 81       	ld	r24, Y
    3338:	99 81       	ldd	r25, Y+1	; 0x01
    333a:	89 2b       	or	r24, r25
    333c:	09 f4       	brne	.+2      	; 0x3340 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3e>
    333e:	89 c0       	rjmp	.+274    	; 0x3452 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    3340:	8a 81       	ldd	r24, Y+2	; 0x02
    3342:	9b 81       	ldd	r25, Y+3	; 0x03
    3344:	89 2b       	or	r24, r25
    3346:	09 f4       	brne	.+2      	; 0x334a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    3348:	84 c0       	rjmp	.+264    	; 0x3452 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    334a:	4b 2d       	mov	r20, r11
    334c:	b8 01       	movw	r22, r16
    334e:	ce 01       	movw	r24, r28
    3350:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <_ZN16PololuQTRSensors4readEPjh>
    3354:	78 01       	movw	r14, r16
    3356:	00 e0       	ldi	r16, 0x00	; 0
    3358:	10 e0       	ldi	r17, 0x00	; 0
    335a:	c1 2c       	mov	r12, r1
    335c:	d1 2c       	mov	r13, r1
    335e:	88 85       	ldd	r24, Y+8	; 0x08
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	c8 16       	cp	r12, r24
    3364:	d9 06       	cpc	r13, r25
    3366:	0c f0       	brlt	.+2      	; 0x336a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x68>
    3368:	74 c0       	rjmp	.+232    	; 0x3452 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    336a:	81 e0       	ldi	r24, 0x01	; 1
    336c:	b8 12       	cpse	r11, r24
    336e:	0a c0       	rjmp	.+20     	; 0x3384 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x82>
    3370:	ea 81       	ldd	r30, Y+2	; 0x02
    3372:	fb 81       	ldd	r31, Y+3	; 0x03
    3374:	e0 0f       	add	r30, r16
    3376:	f1 1f       	adc	r31, r17
    3378:	01 90       	ld	r0, Z+
    337a:	f0 81       	ld	r31, Z
    337c:	e0 2d       	mov	r30, r0
    337e:	a8 81       	ld	r26, Y
    3380:	b9 81       	ldd	r27, Y+1	; 0x01
    3382:	0d c0       	rjmp	.+26     	; 0x339e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x9c>
    3384:	8c 81       	ldd	r24, Y+4	; 0x04
    3386:	9d 81       	ldd	r25, Y+5	; 0x05
    3388:	2e 81       	ldd	r18, Y+6	; 0x06
    338a:	3f 81       	ldd	r19, Y+7	; 0x07
    338c:	b1 10       	cpse	r11, r1
    338e:	0c c0       	rjmp	.+24     	; 0x33a8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    3390:	f9 01       	movw	r30, r18
    3392:	e0 0f       	add	r30, r16
    3394:	f1 1f       	adc	r31, r17
    3396:	01 90       	ld	r0, Z+
    3398:	f0 81       	ld	r31, Z
    339a:	e0 2d       	mov	r30, r0
    339c:	dc 01       	movw	r26, r24
    339e:	a0 0f       	add	r26, r16
    33a0:	b1 1f       	adc	r27, r17
    33a2:	8d 91       	ld	r24, X+
    33a4:	9c 91       	ld	r25, X
    33a6:	28 c0       	rjmp	.+80     	; 0x33f8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    33a8:	fc 01       	movw	r30, r24
    33aa:	e0 0f       	add	r30, r16
    33ac:	f1 1f       	adc	r31, r17
    33ae:	40 81       	ld	r20, Z
    33b0:	51 81       	ldd	r21, Z+1	; 0x01
    33b2:	e8 81       	ld	r30, Y
    33b4:	f9 81       	ldd	r31, Y+1	; 0x01
    33b6:	e0 0f       	add	r30, r16
    33b8:	f1 1f       	adc	r31, r17
    33ba:	80 81       	ld	r24, Z
    33bc:	91 81       	ldd	r25, Z+1	; 0x01
    33be:	ee 85       	ldd	r30, Y+14	; 0x0e
    33c0:	ff 85       	ldd	r31, Y+15	; 0x0f
    33c2:	48 17       	cp	r20, r24
    33c4:	59 07       	cpc	r21, r25
    33c6:	10 f4       	brcc	.+4      	; 0x33cc <_ZN16PololuQTRSensors14readCalibratedEPjh+0xca>
    33c8:	cf 01       	movw	r24, r30
    33ca:	04 c0       	rjmp	.+8      	; 0x33d4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd2>
    33cc:	8e 0f       	add	r24, r30
    33ce:	9f 1f       	adc	r25, r31
    33d0:	84 1b       	sub	r24, r20
    33d2:	95 0b       	sbc	r25, r21
    33d4:	d9 01       	movw	r26, r18
    33d6:	a0 0f       	add	r26, r16
    33d8:	b1 1f       	adc	r27, r17
    33da:	2d 91       	ld	r18, X+
    33dc:	3c 91       	ld	r19, X
    33de:	aa 81       	ldd	r26, Y+2	; 0x02
    33e0:	bb 81       	ldd	r27, Y+3	; 0x03
    33e2:	a0 0f       	add	r26, r16
    33e4:	b1 1f       	adc	r27, r17
    33e6:	4d 91       	ld	r20, X+
    33e8:	5c 91       	ld	r21, X
    33ea:	24 17       	cp	r18, r20
    33ec:	35 07       	cpc	r19, r21
    33ee:	20 f0       	brcs	.+8      	; 0x33f8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    33f0:	e4 0f       	add	r30, r20
    33f2:	f5 1f       	adc	r31, r21
    33f4:	e2 1b       	sub	r30, r18
    33f6:	f3 0b       	sbc	r31, r19
    33f8:	e8 1b       	sub	r30, r24
    33fa:	f9 0b       	sbc	r31, r25
    33fc:	a9 f0       	breq	.+42     	; 0x3428 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x126>
    33fe:	d7 01       	movw	r26, r14
    3400:	2d 91       	ld	r18, X+
    3402:	3c 91       	ld	r19, X
    3404:	40 e0       	ldi	r20, 0x00	; 0
    3406:	50 e0       	ldi	r21, 0x00	; 0
    3408:	28 1b       	sub	r18, r24
    340a:	39 0b       	sbc	r19, r25
    340c:	41 09       	sbc	r20, r1
    340e:	51 09       	sbc	r21, r1
    3410:	a8 ee       	ldi	r26, 0xE8	; 232
    3412:	b3 e0       	ldi	r27, 0x03	; 3
    3414:	0e 94 31 1b 	call	0x3662	; 0x3662 <__muluhisi3>
    3418:	9f 01       	movw	r18, r30
    341a:	40 e0       	ldi	r20, 0x00	; 0
    341c:	50 e0       	ldi	r21, 0x00	; 0
    341e:	0e 94 03 1b 	call	0x3606	; 0x3606 <__divmodsi4>
    3422:	37 fd       	sbrc	r19, 7
    3424:	0a c0       	rjmp	.+20     	; 0x343a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x138>
    3426:	02 c0       	rjmp	.+4      	; 0x342c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x12a>
    3428:	20 e0       	ldi	r18, 0x00	; 0
    342a:	30 e0       	ldi	r19, 0x00	; 0
    342c:	29 3e       	cpi	r18, 0xE9	; 233
    342e:	b3 e0       	ldi	r27, 0x03	; 3
    3430:	3b 07       	cpc	r19, r27
    3432:	2c f0       	brlt	.+10     	; 0x343e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    3434:	28 ee       	ldi	r18, 0xE8	; 232
    3436:	33 e0       	ldi	r19, 0x03	; 3
    3438:	02 c0       	rjmp	.+4      	; 0x343e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    343a:	20 e0       	ldi	r18, 0x00	; 0
    343c:	30 e0       	ldi	r19, 0x00	; 0
    343e:	f7 01       	movw	r30, r14
    3440:	21 93       	st	Z+, r18
    3442:	31 93       	st	Z+, r19
    3444:	7f 01       	movw	r14, r30
    3446:	ff ef       	ldi	r31, 0xFF	; 255
    3448:	cf 1a       	sub	r12, r31
    344a:	df 0a       	sbc	r13, r31
    344c:	0e 5f       	subi	r16, 0xFE	; 254
    344e:	1f 4f       	sbci	r17, 0xFF	; 255
    3450:	86 cf       	rjmp	.-244    	; 0x335e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x5c>
    3452:	cd b7       	in	r28, 0x3d	; 61
    3454:	de b7       	in	r29, 0x3e	; 62
    3456:	e9 e0       	ldi	r30, 0x09	; 9
    3458:	0c 94 69 1b 	jmp	0x36d2	; 0x36d2 <__epilogue_restores__+0x12>

0000345c <_ZN16PololuQTRSensors8readLineEPjhh>:
    345c:	a0 e0       	ldi	r26, 0x00	; 0
    345e:	b0 e0       	ldi	r27, 0x00	; 0
    3460:	e4 e3       	ldi	r30, 0x34	; 52
    3462:	fa e1       	ldi	r31, 0x1A	; 26
    3464:	0c 94 44 1b 	jmp	0x3688	; 0x3688 <__prologue_saves__>
    3468:	ec 01       	movw	r28, r24
    346a:	8b 01       	movw	r16, r22
    346c:	82 2e       	mov	r8, r18
    346e:	0e 94 81 19 	call	0x3302	; 0x3302 <_ZN16PololuQTRSensors14readCalibratedEPjh>
    3472:	28 84       	ldd	r2, Y+8	; 0x08
    3474:	e8 01       	movw	r28, r16
    3476:	41 2c       	mov	r4, r1
    3478:	51 2c       	mov	r5, r1
    347a:	32 01       	movw	r6, r4
    347c:	00 e0       	ldi	r16, 0x00	; 0
    347e:	10 e0       	ldi	r17, 0x00	; 0
    3480:	c1 2c       	mov	r12, r1
    3482:	d1 2c       	mov	r13, r1
    3484:	76 01       	movw	r14, r12
    3486:	31 2c       	mov	r3, r1
    3488:	91 2c       	mov	r9, r1
    348a:	58 ee       	ldi	r21, 0xE8	; 232
    348c:	a5 2e       	mov	r10, r21
    348e:	53 e0       	ldi	r21, 0x03	; 3
    3490:	b5 2e       	mov	r11, r21
    3492:	92 14       	cp	r9, r2
    3494:	21 f1       	breq	.+72     	; 0x34de <_ZN16PololuQTRSensors8readLineEPjhh+0x82>
    3496:	e9 91       	ld	r30, Y+
    3498:	f9 91       	ld	r31, Y+
    349a:	88 20       	and	r8, r8
    349c:	21 f0       	breq	.+8      	; 0x34a6 <_ZN16PololuQTRSensors8readLineEPjhh+0x4a>
    349e:	c5 01       	movw	r24, r10
    34a0:	8e 1b       	sub	r24, r30
    34a2:	9f 0b       	sbc	r25, r31
    34a4:	fc 01       	movw	r30, r24
    34a6:	e9 3c       	cpi	r30, 0xC9	; 201
    34a8:	f1 05       	cpc	r31, r1
    34aa:	24 f4       	brge	.+8      	; 0x34b4 <_ZN16PololuQTRSensors8readLineEPjhh+0x58>
    34ac:	e3 33       	cpi	r30, 0x33	; 51
    34ae:	f1 05       	cpc	r31, r1
    34b0:	74 f0       	brlt	.+28     	; 0x34ce <_ZN16PololuQTRSensors8readLineEPjhh+0x72>
    34b2:	02 c0       	rjmp	.+4      	; 0x34b8 <_ZN16PololuQTRSensors8readLineEPjhh+0x5c>
    34b4:	33 24       	eor	r3, r3
    34b6:	33 94       	inc	r3
    34b8:	df 01       	movw	r26, r30
    34ba:	a3 01       	movw	r20, r6
    34bc:	92 01       	movw	r18, r4
    34be:	0e 94 3c 1b 	call	0x3678	; 0x3678 <__mulshisi3>
    34c2:	c6 0e       	add	r12, r22
    34c4:	d7 1e       	adc	r13, r23
    34c6:	e8 1e       	adc	r14, r24
    34c8:	f9 1e       	adc	r15, r25
    34ca:	0e 0f       	add	r16, r30
    34cc:	1f 1f       	adc	r17, r31
    34ce:	93 94       	inc	r9
    34d0:	98 ee       	ldi	r25, 0xE8	; 232
    34d2:	49 0e       	add	r4, r25
    34d4:	93 e0       	ldi	r25, 0x03	; 3
    34d6:	59 1e       	adc	r5, r25
    34d8:	61 1c       	adc	r6, r1
    34da:	71 1c       	adc	r7, r1
    34dc:	da cf       	rjmp	.-76     	; 0x3492 <_ZN16PololuQTRSensors8readLineEPjhh+0x36>
    34de:	31 10       	cpse	r3, r1
    34e0:	1e c0       	rjmp	.+60     	; 0x351e <_ZN16PololuQTRSensors8readLineEPjhh+0xc2>
    34e2:	49 2d       	mov	r20, r9
    34e4:	50 e0       	ldi	r21, 0x00	; 0
    34e6:	41 50       	subi	r20, 0x01	; 1
    34e8:	51 09       	sbc	r21, r1
    34ea:	24 ef       	ldi	r18, 0xF4	; 244
    34ec:	31 e0       	ldi	r19, 0x01	; 1
    34ee:	42 9f       	mul	r20, r18
    34f0:	c0 01       	movw	r24, r0
    34f2:	43 9f       	mul	r20, r19
    34f4:	90 0d       	add	r25, r0
    34f6:	52 9f       	mul	r21, r18
    34f8:	90 0d       	add	r25, r0
    34fa:	11 24       	eor	r1, r1
    34fc:	20 91 cb 01 	lds	r18, 0x01CB	; 0x8001cb <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    3500:	30 91 cc 01 	lds	r19, 0x01CC	; 0x8001cc <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    3504:	28 17       	cp	r18, r24
    3506:	39 07       	cpc	r19, r25
    3508:	b4 f0       	brlt	.+44     	; 0x3536 <_ZN16PololuQTRSensors8readLineEPjhh+0xda>
    350a:	88 ee       	ldi	r24, 0xE8	; 232
    350c:	93 e0       	ldi	r25, 0x03	; 3
    350e:	48 9f       	mul	r20, r24
    3510:	90 01       	movw	r18, r0
    3512:	49 9f       	mul	r20, r25
    3514:	30 0d       	add	r19, r0
    3516:	58 9f       	mul	r21, r24
    3518:	30 0d       	add	r19, r0
    351a:	11 24       	eor	r1, r1
    351c:	0e c0       	rjmp	.+28     	; 0x353a <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    351e:	98 01       	movw	r18, r16
    3520:	40 e0       	ldi	r20, 0x00	; 0
    3522:	50 e0       	ldi	r21, 0x00	; 0
    3524:	c7 01       	movw	r24, r14
    3526:	b6 01       	movw	r22, r12
    3528:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <__udivmodsi4>
    352c:	30 93 cc 01 	sts	0x01CC, r19	; 0x8001cc <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    3530:	20 93 cb 01 	sts	0x01CB, r18	; 0x8001cb <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    3534:	02 c0       	rjmp	.+4      	; 0x353a <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    3536:	20 e0       	ldi	r18, 0x00	; 0
    3538:	30 e0       	ldi	r19, 0x00	; 0
    353a:	c9 01       	movw	r24, r18
    353c:	cd b7       	in	r28, 0x3d	; 61
    353e:	de b7       	in	r29, 0x3e	; 62
    3540:	e2 e1       	ldi	r30, 0x12	; 18
    3542:	0c 94 60 1b 	jmp	0x36c0	; 0x36c0 <__epilogue_restores__>

00003546 <_ZN16PololuQTRSensorsD1Ev>:
    3546:	cf 93       	push	r28
    3548:	df 93       	push	r29
    354a:	ec 01       	movw	r28, r24
    354c:	8a 81       	ldd	r24, Y+2	; 0x02
    354e:	9b 81       	ldd	r25, Y+3	; 0x03
    3550:	00 97       	sbiw	r24, 0x00	; 0
    3552:	11 f0       	breq	.+4      	; 0x3558 <_ZN16PololuQTRSensorsD1Ev+0x12>
    3554:	0e 94 19 1c 	call	0x3832	; 0x3832 <free>
    3558:	8e 81       	ldd	r24, Y+6	; 0x06
    355a:	9f 81       	ldd	r25, Y+7	; 0x07
    355c:	00 97       	sbiw	r24, 0x00	; 0
    355e:	11 f0       	breq	.+4      	; 0x3564 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    3560:	0e 94 19 1c 	call	0x3832	; 0x3832 <free>
    3564:	88 81       	ld	r24, Y
    3566:	99 81       	ldd	r25, Y+1	; 0x01
    3568:	00 97       	sbiw	r24, 0x00	; 0
    356a:	11 f0       	breq	.+4      	; 0x3570 <_ZN16PololuQTRSensorsD1Ev+0x2a>
    356c:	0e 94 19 1c 	call	0x3832	; 0x3832 <free>
    3570:	8c 81       	ldd	r24, Y+4	; 0x04
    3572:	9d 81       	ldd	r25, Y+5	; 0x05
    3574:	00 97       	sbiw	r24, 0x00	; 0
    3576:	11 f0       	breq	.+4      	; 0x357c <_ZN16PololuQTRSensorsD1Ev+0x36>
    3578:	0e 94 19 1c 	call	0x3832	; 0x3832 <free>
    357c:	df 91       	pop	r29
    357e:	cf 91       	pop	r28
    3580:	08 95       	ret

00003582 <__udivmodqi4>:
    3582:	99 1b       	sub	r25, r25
    3584:	79 e0       	ldi	r23, 0x09	; 9
    3586:	04 c0       	rjmp	.+8      	; 0x3590 <__udivmodqi4_ep>

00003588 <__udivmodqi4_loop>:
    3588:	99 1f       	adc	r25, r25
    358a:	96 17       	cp	r25, r22
    358c:	08 f0       	brcs	.+2      	; 0x3590 <__udivmodqi4_ep>
    358e:	96 1b       	sub	r25, r22

00003590 <__udivmodqi4_ep>:
    3590:	88 1f       	adc	r24, r24
    3592:	7a 95       	dec	r23
    3594:	c9 f7       	brne	.-14     	; 0x3588 <__udivmodqi4_loop>
    3596:	80 95       	com	r24
    3598:	08 95       	ret

0000359a <__udivmodhi4>:
    359a:	aa 1b       	sub	r26, r26
    359c:	bb 1b       	sub	r27, r27
    359e:	51 e1       	ldi	r21, 0x11	; 17
    35a0:	07 c0       	rjmp	.+14     	; 0x35b0 <__udivmodhi4_ep>

000035a2 <__udivmodhi4_loop>:
    35a2:	aa 1f       	adc	r26, r26
    35a4:	bb 1f       	adc	r27, r27
    35a6:	a6 17       	cp	r26, r22
    35a8:	b7 07       	cpc	r27, r23
    35aa:	10 f0       	brcs	.+4      	; 0x35b0 <__udivmodhi4_ep>
    35ac:	a6 1b       	sub	r26, r22
    35ae:	b7 0b       	sbc	r27, r23

000035b0 <__udivmodhi4_ep>:
    35b0:	88 1f       	adc	r24, r24
    35b2:	99 1f       	adc	r25, r25
    35b4:	5a 95       	dec	r21
    35b6:	a9 f7       	brne	.-22     	; 0x35a2 <__udivmodhi4_loop>
    35b8:	80 95       	com	r24
    35ba:	90 95       	com	r25
    35bc:	bc 01       	movw	r22, r24
    35be:	cd 01       	movw	r24, r26
    35c0:	08 95       	ret

000035c2 <__udivmodsi4>:
    35c2:	a1 e2       	ldi	r26, 0x21	; 33
    35c4:	1a 2e       	mov	r1, r26
    35c6:	aa 1b       	sub	r26, r26
    35c8:	bb 1b       	sub	r27, r27
    35ca:	fd 01       	movw	r30, r26
    35cc:	0d c0       	rjmp	.+26     	; 0x35e8 <__udivmodsi4_ep>

000035ce <__udivmodsi4_loop>:
    35ce:	aa 1f       	adc	r26, r26
    35d0:	bb 1f       	adc	r27, r27
    35d2:	ee 1f       	adc	r30, r30
    35d4:	ff 1f       	adc	r31, r31
    35d6:	a2 17       	cp	r26, r18
    35d8:	b3 07       	cpc	r27, r19
    35da:	e4 07       	cpc	r30, r20
    35dc:	f5 07       	cpc	r31, r21
    35de:	20 f0       	brcs	.+8      	; 0x35e8 <__udivmodsi4_ep>
    35e0:	a2 1b       	sub	r26, r18
    35e2:	b3 0b       	sbc	r27, r19
    35e4:	e4 0b       	sbc	r30, r20
    35e6:	f5 0b       	sbc	r31, r21

000035e8 <__udivmodsi4_ep>:
    35e8:	66 1f       	adc	r22, r22
    35ea:	77 1f       	adc	r23, r23
    35ec:	88 1f       	adc	r24, r24
    35ee:	99 1f       	adc	r25, r25
    35f0:	1a 94       	dec	r1
    35f2:	69 f7       	brne	.-38     	; 0x35ce <__udivmodsi4_loop>
    35f4:	60 95       	com	r22
    35f6:	70 95       	com	r23
    35f8:	80 95       	com	r24
    35fa:	90 95       	com	r25
    35fc:	9b 01       	movw	r18, r22
    35fe:	ac 01       	movw	r20, r24
    3600:	bd 01       	movw	r22, r26
    3602:	cf 01       	movw	r24, r30
    3604:	08 95       	ret

00003606 <__divmodsi4>:
    3606:	05 2e       	mov	r0, r21
    3608:	97 fb       	bst	r25, 7
    360a:	1e f4       	brtc	.+6      	; 0x3612 <__divmodsi4+0xc>
    360c:	00 94       	com	r0
    360e:	0e 94 1a 1b 	call	0x3634	; 0x3634 <__negsi2>
    3612:	57 fd       	sbrc	r21, 7
    3614:	07 d0       	rcall	.+14     	; 0x3624 <__divmodsi4_neg2>
    3616:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <__udivmodsi4>
    361a:	07 fc       	sbrc	r0, 7
    361c:	03 d0       	rcall	.+6      	; 0x3624 <__divmodsi4_neg2>
    361e:	4e f4       	brtc	.+18     	; 0x3632 <__divmodsi4_exit>
    3620:	0c 94 1a 1b 	jmp	0x3634	; 0x3634 <__negsi2>

00003624 <__divmodsi4_neg2>:
    3624:	50 95       	com	r21
    3626:	40 95       	com	r20
    3628:	30 95       	com	r19
    362a:	21 95       	neg	r18
    362c:	3f 4f       	sbci	r19, 0xFF	; 255
    362e:	4f 4f       	sbci	r20, 0xFF	; 255
    3630:	5f 4f       	sbci	r21, 0xFF	; 255

00003632 <__divmodsi4_exit>:
    3632:	08 95       	ret

00003634 <__negsi2>:
    3634:	90 95       	com	r25
    3636:	80 95       	com	r24
    3638:	70 95       	com	r23
    363a:	61 95       	neg	r22
    363c:	7f 4f       	sbci	r23, 0xFF	; 255
    363e:	8f 4f       	sbci	r24, 0xFF	; 255
    3640:	9f 4f       	sbci	r25, 0xFF	; 255
    3642:	08 95       	ret

00003644 <__umulhisi3>:
    3644:	a2 9f       	mul	r26, r18
    3646:	b0 01       	movw	r22, r0
    3648:	b3 9f       	mul	r27, r19
    364a:	c0 01       	movw	r24, r0
    364c:	a3 9f       	mul	r26, r19
    364e:	70 0d       	add	r23, r0
    3650:	81 1d       	adc	r24, r1
    3652:	11 24       	eor	r1, r1
    3654:	91 1d       	adc	r25, r1
    3656:	b2 9f       	mul	r27, r18
    3658:	70 0d       	add	r23, r0
    365a:	81 1d       	adc	r24, r1
    365c:	11 24       	eor	r1, r1
    365e:	91 1d       	adc	r25, r1
    3660:	08 95       	ret

00003662 <__muluhisi3>:
    3662:	0e 94 22 1b 	call	0x3644	; 0x3644 <__umulhisi3>
    3666:	a5 9f       	mul	r26, r21
    3668:	90 0d       	add	r25, r0
    366a:	b4 9f       	mul	r27, r20
    366c:	90 0d       	add	r25, r0
    366e:	a4 9f       	mul	r26, r20
    3670:	80 0d       	add	r24, r0
    3672:	91 1d       	adc	r25, r1
    3674:	11 24       	eor	r1, r1
    3676:	08 95       	ret

00003678 <__mulshisi3>:
    3678:	b7 ff       	sbrs	r27, 7
    367a:	0c 94 31 1b 	jmp	0x3662	; 0x3662 <__muluhisi3>

0000367e <__mulohisi3>:
    367e:	0e 94 31 1b 	call	0x3662	; 0x3662 <__muluhisi3>
    3682:	82 1b       	sub	r24, r18
    3684:	93 0b       	sbc	r25, r19
    3686:	08 95       	ret

00003688 <__prologue_saves__>:
    3688:	2f 92       	push	r2
    368a:	3f 92       	push	r3
    368c:	4f 92       	push	r4
    368e:	5f 92       	push	r5
    3690:	6f 92       	push	r6
    3692:	7f 92       	push	r7
    3694:	8f 92       	push	r8
    3696:	9f 92       	push	r9
    3698:	af 92       	push	r10
    369a:	bf 92       	push	r11
    369c:	cf 92       	push	r12
    369e:	df 92       	push	r13
    36a0:	ef 92       	push	r14
    36a2:	ff 92       	push	r15
    36a4:	0f 93       	push	r16
    36a6:	1f 93       	push	r17
    36a8:	cf 93       	push	r28
    36aa:	df 93       	push	r29
    36ac:	cd b7       	in	r28, 0x3d	; 61
    36ae:	de b7       	in	r29, 0x3e	; 62
    36b0:	ca 1b       	sub	r28, r26
    36b2:	db 0b       	sbc	r29, r27
    36b4:	0f b6       	in	r0, 0x3f	; 63
    36b6:	f8 94       	cli
    36b8:	de bf       	out	0x3e, r29	; 62
    36ba:	0f be       	out	0x3f, r0	; 63
    36bc:	cd bf       	out	0x3d, r28	; 61
    36be:	09 94       	ijmp

000036c0 <__epilogue_restores__>:
    36c0:	2a 88       	ldd	r2, Y+18	; 0x12
    36c2:	39 88       	ldd	r3, Y+17	; 0x11
    36c4:	48 88       	ldd	r4, Y+16	; 0x10
    36c6:	5f 84       	ldd	r5, Y+15	; 0x0f
    36c8:	6e 84       	ldd	r6, Y+14	; 0x0e
    36ca:	7d 84       	ldd	r7, Y+13	; 0x0d
    36cc:	8c 84       	ldd	r8, Y+12	; 0x0c
    36ce:	9b 84       	ldd	r9, Y+11	; 0x0b
    36d0:	aa 84       	ldd	r10, Y+10	; 0x0a
    36d2:	b9 84       	ldd	r11, Y+9	; 0x09
    36d4:	c8 84       	ldd	r12, Y+8	; 0x08
    36d6:	df 80       	ldd	r13, Y+7	; 0x07
    36d8:	ee 80       	ldd	r14, Y+6	; 0x06
    36da:	fd 80       	ldd	r15, Y+5	; 0x05
    36dc:	0c 81       	ldd	r16, Y+4	; 0x04
    36de:	1b 81       	ldd	r17, Y+3	; 0x03
    36e0:	aa 81       	ldd	r26, Y+2	; 0x02
    36e2:	b9 81       	ldd	r27, Y+1	; 0x01
    36e4:	ce 0f       	add	r28, r30
    36e6:	d1 1d       	adc	r29, r1
    36e8:	0f b6       	in	r0, 0x3f	; 63
    36ea:	f8 94       	cli
    36ec:	de bf       	out	0x3e, r29	; 62
    36ee:	0f be       	out	0x3f, r0	; 63
    36f0:	cd bf       	out	0x3d, r28	; 61
    36f2:	ed 01       	movw	r28, r26
    36f4:	08 95       	ret

000036f6 <__tablejump2__>:
    36f6:	ee 0f       	add	r30, r30
    36f8:	ff 1f       	adc	r31, r31
    36fa:	05 90       	lpm	r0, Z+
    36fc:	f4 91       	lpm	r31, Z
    36fe:	e0 2d       	mov	r30, r0
    3700:	09 94       	ijmp

00003702 <malloc>:
    3702:	0f 93       	push	r16
    3704:	1f 93       	push	r17
    3706:	cf 93       	push	r28
    3708:	df 93       	push	r29
    370a:	82 30       	cpi	r24, 0x02	; 2
    370c:	91 05       	cpc	r25, r1
    370e:	10 f4       	brcc	.+4      	; 0x3714 <malloc+0x12>
    3710:	82 e0       	ldi	r24, 0x02	; 2
    3712:	90 e0       	ldi	r25, 0x00	; 0
    3714:	e0 91 3d 02 	lds	r30, 0x023D	; 0x80023d <__flp>
    3718:	f0 91 3e 02 	lds	r31, 0x023E	; 0x80023e <__flp+0x1>
    371c:	20 e0       	ldi	r18, 0x00	; 0
    371e:	30 e0       	ldi	r19, 0x00	; 0
    3720:	a0 e0       	ldi	r26, 0x00	; 0
    3722:	b0 e0       	ldi	r27, 0x00	; 0
    3724:	30 97       	sbiw	r30, 0x00	; 0
    3726:	19 f1       	breq	.+70     	; 0x376e <malloc+0x6c>
    3728:	40 81       	ld	r20, Z
    372a:	51 81       	ldd	r21, Z+1	; 0x01
    372c:	02 81       	ldd	r16, Z+2	; 0x02
    372e:	13 81       	ldd	r17, Z+3	; 0x03
    3730:	48 17       	cp	r20, r24
    3732:	59 07       	cpc	r21, r25
    3734:	c8 f0       	brcs	.+50     	; 0x3768 <malloc+0x66>
    3736:	84 17       	cp	r24, r20
    3738:	95 07       	cpc	r25, r21
    373a:	69 f4       	brne	.+26     	; 0x3756 <malloc+0x54>
    373c:	10 97       	sbiw	r26, 0x00	; 0
    373e:	31 f0       	breq	.+12     	; 0x374c <malloc+0x4a>
    3740:	12 96       	adiw	r26, 0x02	; 2
    3742:	0c 93       	st	X, r16
    3744:	12 97       	sbiw	r26, 0x02	; 2
    3746:	13 96       	adiw	r26, 0x03	; 3
    3748:	1c 93       	st	X, r17
    374a:	27 c0       	rjmp	.+78     	; 0x379a <malloc+0x98>
    374c:	00 93 3d 02 	sts	0x023D, r16	; 0x80023d <__flp>
    3750:	10 93 3e 02 	sts	0x023E, r17	; 0x80023e <__flp+0x1>
    3754:	22 c0       	rjmp	.+68     	; 0x379a <malloc+0x98>
    3756:	21 15       	cp	r18, r1
    3758:	31 05       	cpc	r19, r1
    375a:	19 f0       	breq	.+6      	; 0x3762 <malloc+0x60>
    375c:	42 17       	cp	r20, r18
    375e:	53 07       	cpc	r21, r19
    3760:	18 f4       	brcc	.+6      	; 0x3768 <malloc+0x66>
    3762:	9a 01       	movw	r18, r20
    3764:	bd 01       	movw	r22, r26
    3766:	ef 01       	movw	r28, r30
    3768:	df 01       	movw	r26, r30
    376a:	f8 01       	movw	r30, r16
    376c:	db cf       	rjmp	.-74     	; 0x3724 <malloc+0x22>
    376e:	21 15       	cp	r18, r1
    3770:	31 05       	cpc	r19, r1
    3772:	f9 f0       	breq	.+62     	; 0x37b2 <malloc+0xb0>
    3774:	28 1b       	sub	r18, r24
    3776:	39 0b       	sbc	r19, r25
    3778:	24 30       	cpi	r18, 0x04	; 4
    377a:	31 05       	cpc	r19, r1
    377c:	80 f4       	brcc	.+32     	; 0x379e <malloc+0x9c>
    377e:	8a 81       	ldd	r24, Y+2	; 0x02
    3780:	9b 81       	ldd	r25, Y+3	; 0x03
    3782:	61 15       	cp	r22, r1
    3784:	71 05       	cpc	r23, r1
    3786:	21 f0       	breq	.+8      	; 0x3790 <malloc+0x8e>
    3788:	fb 01       	movw	r30, r22
    378a:	93 83       	std	Z+3, r25	; 0x03
    378c:	82 83       	std	Z+2, r24	; 0x02
    378e:	04 c0       	rjmp	.+8      	; 0x3798 <malloc+0x96>
    3790:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <__flp+0x1>
    3794:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <__flp>
    3798:	fe 01       	movw	r30, r28
    379a:	32 96       	adiw	r30, 0x02	; 2
    379c:	44 c0       	rjmp	.+136    	; 0x3826 <malloc+0x124>
    379e:	fe 01       	movw	r30, r28
    37a0:	e2 0f       	add	r30, r18
    37a2:	f3 1f       	adc	r31, r19
    37a4:	81 93       	st	Z+, r24
    37a6:	91 93       	st	Z+, r25
    37a8:	22 50       	subi	r18, 0x02	; 2
    37aa:	31 09       	sbc	r19, r1
    37ac:	39 83       	std	Y+1, r19	; 0x01
    37ae:	28 83       	st	Y, r18
    37b0:	3a c0       	rjmp	.+116    	; 0x3826 <malloc+0x124>
    37b2:	20 91 3b 02 	lds	r18, 0x023B	; 0x80023b <__brkval>
    37b6:	30 91 3c 02 	lds	r19, 0x023C	; 0x80023c <__brkval+0x1>
    37ba:	23 2b       	or	r18, r19
    37bc:	41 f4       	brne	.+16     	; 0x37ce <malloc+0xcc>
    37be:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__malloc_heap_start>
    37c2:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__malloc_heap_start+0x1>
    37c6:	30 93 3c 02 	sts	0x023C, r19	; 0x80023c <__brkval+0x1>
    37ca:	20 93 3b 02 	sts	0x023B, r18	; 0x80023b <__brkval>
    37ce:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__malloc_heap_end>
    37d2:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__malloc_heap_end+0x1>
    37d6:	21 15       	cp	r18, r1
    37d8:	31 05       	cpc	r19, r1
    37da:	41 f4       	brne	.+16     	; 0x37ec <malloc+0xea>
    37dc:	2d b7       	in	r18, 0x3d	; 61
    37de:	3e b7       	in	r19, 0x3e	; 62
    37e0:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__malloc_margin>
    37e4:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__malloc_margin+0x1>
    37e8:	24 1b       	sub	r18, r20
    37ea:	35 0b       	sbc	r19, r21
    37ec:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <__brkval>
    37f0:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <__brkval+0x1>
    37f4:	e2 17       	cp	r30, r18
    37f6:	f3 07       	cpc	r31, r19
    37f8:	a0 f4       	brcc	.+40     	; 0x3822 <malloc+0x120>
    37fa:	2e 1b       	sub	r18, r30
    37fc:	3f 0b       	sbc	r19, r31
    37fe:	28 17       	cp	r18, r24
    3800:	39 07       	cpc	r19, r25
    3802:	78 f0       	brcs	.+30     	; 0x3822 <malloc+0x120>
    3804:	ac 01       	movw	r20, r24
    3806:	4e 5f       	subi	r20, 0xFE	; 254
    3808:	5f 4f       	sbci	r21, 0xFF	; 255
    380a:	24 17       	cp	r18, r20
    380c:	35 07       	cpc	r19, r21
    380e:	48 f0       	brcs	.+18     	; 0x3822 <malloc+0x120>
    3810:	4e 0f       	add	r20, r30
    3812:	5f 1f       	adc	r21, r31
    3814:	50 93 3c 02 	sts	0x023C, r21	; 0x80023c <__brkval+0x1>
    3818:	40 93 3b 02 	sts	0x023B, r20	; 0x80023b <__brkval>
    381c:	81 93       	st	Z+, r24
    381e:	91 93       	st	Z+, r25
    3820:	02 c0       	rjmp	.+4      	; 0x3826 <malloc+0x124>
    3822:	e0 e0       	ldi	r30, 0x00	; 0
    3824:	f0 e0       	ldi	r31, 0x00	; 0
    3826:	cf 01       	movw	r24, r30
    3828:	df 91       	pop	r29
    382a:	cf 91       	pop	r28
    382c:	1f 91       	pop	r17
    382e:	0f 91       	pop	r16
    3830:	08 95       	ret

00003832 <free>:
    3832:	cf 93       	push	r28
    3834:	df 93       	push	r29
    3836:	00 97       	sbiw	r24, 0x00	; 0
    3838:	09 f4       	brne	.+2      	; 0x383c <free+0xa>
    383a:	81 c0       	rjmp	.+258    	; 0x393e <free+0x10c>
    383c:	fc 01       	movw	r30, r24
    383e:	32 97       	sbiw	r30, 0x02	; 2
    3840:	13 82       	std	Z+3, r1	; 0x03
    3842:	12 82       	std	Z+2, r1	; 0x02
    3844:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <__flp>
    3848:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <__flp+0x1>
    384c:	10 97       	sbiw	r26, 0x00	; 0
    384e:	81 f4       	brne	.+32     	; 0x3870 <free+0x3e>
    3850:	20 81       	ld	r18, Z
    3852:	31 81       	ldd	r19, Z+1	; 0x01
    3854:	82 0f       	add	r24, r18
    3856:	93 1f       	adc	r25, r19
    3858:	20 91 3b 02 	lds	r18, 0x023B	; 0x80023b <__brkval>
    385c:	30 91 3c 02 	lds	r19, 0x023C	; 0x80023c <__brkval+0x1>
    3860:	28 17       	cp	r18, r24
    3862:	39 07       	cpc	r19, r25
    3864:	51 f5       	brne	.+84     	; 0x38ba <free+0x88>
    3866:	f0 93 3c 02 	sts	0x023C, r31	; 0x80023c <__brkval+0x1>
    386a:	e0 93 3b 02 	sts	0x023B, r30	; 0x80023b <__brkval>
    386e:	67 c0       	rjmp	.+206    	; 0x393e <free+0x10c>
    3870:	ed 01       	movw	r28, r26
    3872:	20 e0       	ldi	r18, 0x00	; 0
    3874:	30 e0       	ldi	r19, 0x00	; 0
    3876:	ce 17       	cp	r28, r30
    3878:	df 07       	cpc	r29, r31
    387a:	40 f4       	brcc	.+16     	; 0x388c <free+0x5a>
    387c:	4a 81       	ldd	r20, Y+2	; 0x02
    387e:	5b 81       	ldd	r21, Y+3	; 0x03
    3880:	9e 01       	movw	r18, r28
    3882:	41 15       	cp	r20, r1
    3884:	51 05       	cpc	r21, r1
    3886:	f1 f0       	breq	.+60     	; 0x38c4 <free+0x92>
    3888:	ea 01       	movw	r28, r20
    388a:	f5 cf       	rjmp	.-22     	; 0x3876 <free+0x44>
    388c:	d3 83       	std	Z+3, r29	; 0x03
    388e:	c2 83       	std	Z+2, r28	; 0x02
    3890:	40 81       	ld	r20, Z
    3892:	51 81       	ldd	r21, Z+1	; 0x01
    3894:	84 0f       	add	r24, r20
    3896:	95 1f       	adc	r25, r21
    3898:	c8 17       	cp	r28, r24
    389a:	d9 07       	cpc	r29, r25
    389c:	59 f4       	brne	.+22     	; 0x38b4 <free+0x82>
    389e:	88 81       	ld	r24, Y
    38a0:	99 81       	ldd	r25, Y+1	; 0x01
    38a2:	84 0f       	add	r24, r20
    38a4:	95 1f       	adc	r25, r21
    38a6:	02 96       	adiw	r24, 0x02	; 2
    38a8:	91 83       	std	Z+1, r25	; 0x01
    38aa:	80 83       	st	Z, r24
    38ac:	8a 81       	ldd	r24, Y+2	; 0x02
    38ae:	9b 81       	ldd	r25, Y+3	; 0x03
    38b0:	93 83       	std	Z+3, r25	; 0x03
    38b2:	82 83       	std	Z+2, r24	; 0x02
    38b4:	21 15       	cp	r18, r1
    38b6:	31 05       	cpc	r19, r1
    38b8:	29 f4       	brne	.+10     	; 0x38c4 <free+0x92>
    38ba:	f0 93 3e 02 	sts	0x023E, r31	; 0x80023e <__flp+0x1>
    38be:	e0 93 3d 02 	sts	0x023D, r30	; 0x80023d <__flp>
    38c2:	3d c0       	rjmp	.+122    	; 0x393e <free+0x10c>
    38c4:	e9 01       	movw	r28, r18
    38c6:	fb 83       	std	Y+3, r31	; 0x03
    38c8:	ea 83       	std	Y+2, r30	; 0x02
    38ca:	49 91       	ld	r20, Y+
    38cc:	59 91       	ld	r21, Y+
    38ce:	c4 0f       	add	r28, r20
    38d0:	d5 1f       	adc	r29, r21
    38d2:	ec 17       	cp	r30, r28
    38d4:	fd 07       	cpc	r31, r29
    38d6:	61 f4       	brne	.+24     	; 0x38f0 <free+0xbe>
    38d8:	80 81       	ld	r24, Z
    38da:	91 81       	ldd	r25, Z+1	; 0x01
    38dc:	84 0f       	add	r24, r20
    38de:	95 1f       	adc	r25, r21
    38e0:	02 96       	adiw	r24, 0x02	; 2
    38e2:	e9 01       	movw	r28, r18
    38e4:	99 83       	std	Y+1, r25	; 0x01
    38e6:	88 83       	st	Y, r24
    38e8:	82 81       	ldd	r24, Z+2	; 0x02
    38ea:	93 81       	ldd	r25, Z+3	; 0x03
    38ec:	9b 83       	std	Y+3, r25	; 0x03
    38ee:	8a 83       	std	Y+2, r24	; 0x02
    38f0:	e0 e0       	ldi	r30, 0x00	; 0
    38f2:	f0 e0       	ldi	r31, 0x00	; 0
    38f4:	12 96       	adiw	r26, 0x02	; 2
    38f6:	8d 91       	ld	r24, X+
    38f8:	9c 91       	ld	r25, X
    38fa:	13 97       	sbiw	r26, 0x03	; 3
    38fc:	00 97       	sbiw	r24, 0x00	; 0
    38fe:	19 f0       	breq	.+6      	; 0x3906 <free+0xd4>
    3900:	fd 01       	movw	r30, r26
    3902:	dc 01       	movw	r26, r24
    3904:	f7 cf       	rjmp	.-18     	; 0x38f4 <free+0xc2>
    3906:	8d 91       	ld	r24, X+
    3908:	9c 91       	ld	r25, X
    390a:	11 97       	sbiw	r26, 0x01	; 1
    390c:	9d 01       	movw	r18, r26
    390e:	2e 5f       	subi	r18, 0xFE	; 254
    3910:	3f 4f       	sbci	r19, 0xFF	; 255
    3912:	82 0f       	add	r24, r18
    3914:	93 1f       	adc	r25, r19
    3916:	20 91 3b 02 	lds	r18, 0x023B	; 0x80023b <__brkval>
    391a:	30 91 3c 02 	lds	r19, 0x023C	; 0x80023c <__brkval+0x1>
    391e:	28 17       	cp	r18, r24
    3920:	39 07       	cpc	r19, r25
    3922:	69 f4       	brne	.+26     	; 0x393e <free+0x10c>
    3924:	30 97       	sbiw	r30, 0x00	; 0
    3926:	29 f4       	brne	.+10     	; 0x3932 <free+0x100>
    3928:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <__flp+0x1>
    392c:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <__flp>
    3930:	02 c0       	rjmp	.+4      	; 0x3936 <free+0x104>
    3932:	13 82       	std	Z+3, r1	; 0x03
    3934:	12 82       	std	Z+2, r1	; 0x02
    3936:	b0 93 3c 02 	sts	0x023C, r27	; 0x80023c <__brkval+0x1>
    393a:	a0 93 3b 02 	sts	0x023B, r26	; 0x80023b <__brkval>
    393e:	df 91       	pop	r29
    3940:	cf 91       	pop	r28
    3942:	08 95       	ret

00003944 <__do_global_dtors>:
    3944:	10 e0       	ldi	r17, 0x00	; 0
    3946:	c7 e5       	ldi	r28, 0x57	; 87
    3948:	d0 e0       	ldi	r29, 0x00	; 0
    394a:	04 c0       	rjmp	.+8      	; 0x3954 <__do_global_dtors+0x10>
    394c:	fe 01       	movw	r30, r28
    394e:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <__tablejump2__>
    3952:	21 96       	adiw	r28, 0x01	; 1
    3954:	c8 35       	cpi	r28, 0x58	; 88
    3956:	d1 07       	cpc	r29, r17
    3958:	c9 f7       	brne	.-14     	; 0x394c <__do_global_dtors+0x8>
    395a:	f8 94       	cli

0000395c <__stop_program>:
    395c:	ff cf       	rjmp	.-2      	; 0x395c <__stop_program>
