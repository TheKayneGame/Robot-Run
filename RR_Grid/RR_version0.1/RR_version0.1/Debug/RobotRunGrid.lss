
RobotRunGrid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00002d28  00002dbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d2  0080013a  0080013a  00002df6  2**0
                  ALLOC
  3 .stab         00004ce0  00000000  00000000  00002df8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008ce2  00000000  00000000  00007ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  000107ba  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000107fc  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000000f8  00000000  00000000  0001083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000240a  00000000  00000000  00010934  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000bf5  00000000  00000000  00012d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000166d  00000000  00000000  00013933  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000370  00000000  00000000  00014fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000085c  00000000  00000000  00015310  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001339  00000000  00000000  00015b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000d0  00000000  00000000  00016ea5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__dtors_end>
       4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
       8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
       c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      10:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      14:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      18:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      1c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      20:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      24:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <__vector_9>
      28:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      2c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      30:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      34:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <__vector_13>
      38:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      3c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      40:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      44:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      48:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      4c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      50:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      54:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      58:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      5c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      60:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      68:	fa 01       	movw	r30, r20
      6a:	06 02       	muls	r16, r22
      6c:	12 02       	muls	r17, r18
      6e:	1e 02       	muls	r17, r30
      70:	2f 02       	muls	r18, r31
      72:	40 02       	muls	r20, r16
      74:	4c 02       	muls	r20, r28
      76:	5a 02       	muls	r21, r26
      78:	8f 02       	muls	r24, r31
      7a:	9e 02       	muls	r25, r30
      7c:	ad 02       	muls	r26, r29
      7e:	d1 02       	muls	r29, r17
      80:	f5 02       	muls	r31, r21
      82:	19 03       	fmul	r17, r17
      84:	48 03       	fmul	r20, r16
      86:	42 03       	mulsu	r20, r18
      88:	05 a8       	ldd	r0, Z+53	; 0x35
      8a:	4c cd       	rjmp	.-1384   	; 0xfffffb24 <__eeprom_end+0xff7efb24>
      8c:	b2 d4       	rcall	.+2404   	; 0x9f2 <motorControl+0x52>
      8e:	4e b9       	out	0x0e, r20	; 14
      90:	38 36       	cpi	r19, 0x68	; 104
      92:	a9 02       	muls	r26, r25
      94:	0c 50       	subi	r16, 0x0C	; 12
      96:	b9 91       	ld	r27, Y+
      98:	86 88       	ldd	r8, Z+22	; 0x16
      9a:	08 3c       	cpi	r16, 0xC8	; 200
      9c:	a6 aa       	std	Z+54, r10	; 0x36
      9e:	aa 2a       	or	r10, r26
      a0:	be 00       	.word	0x00be	; ????
      a2:	00 00       	nop
      a4:	80 3f       	cpi	r24, 0xF0	; 240

000000a6 <__trampolines_end>:
      a6:	3e 67       	ori	r19, 0x7E	; 126
      a8:	33 32       	cpi	r19, 0x23	; 35
      aa:	3e 3e       	cpi	r19, 0xEE	; 238
      ac:	63 33       	cpi	r22, 0x33	; 51
      ae:	32 00       	.word	0x0032	; ????

000000b0 <__c.2343>:
      b0:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

000000ba <__ctors_end>:
      ba:	7e 11       	cpse	r23, r14

000000bc <__dtors_end>:
      bc:	11 24       	eor	r1, r1
      be:	1f be       	out	0x3f, r1	; 63
      c0:	cf ef       	ldi	r28, 0xFF	; 255
      c2:	d8 e0       	ldi	r29, 0x08	; 8
      c4:	de bf       	out	0x3e, r29	; 62
      c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_copy_data>:
      c8:	11 e0       	ldi	r17, 0x01	; 1
      ca:	a0 e0       	ldi	r26, 0x00	; 0
      cc:	b1 e0       	ldi	r27, 0x01	; 1
      ce:	e8 e2       	ldi	r30, 0x28	; 40
      d0:	fd e2       	ldi	r31, 0x2D	; 45
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x10>
      d4:	05 90       	lpm	r0, Z+
      d6:	0d 92       	st	X+, r0
      d8:	aa 33       	cpi	r26, 0x3A	; 58
      da:	b1 07       	cpc	r27, r17
      dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0xc>

000000de <__do_clear_bss>:
      de:	22 e0       	ldi	r18, 0x02	; 2
      e0:	aa e3       	ldi	r26, 0x3A	; 58
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	01 c0       	rjmp	.+2      	; 0xe8 <.do_clear_bss_start>

000000e6 <.do_clear_bss_loop>:
      e6:	1d 92       	st	X+, r1

000000e8 <.do_clear_bss_start>:
      e8:	ac 30       	cpi	r26, 0x0C	; 12
      ea:	b2 07       	cpc	r27, r18
      ec:	e1 f7       	brne	.-8      	; 0xe6 <.do_clear_bss_loop>
      ee:	0e 94 8e 04 	call	0x91c	; 0x91c <main>
      f2:	0c 94 87 16 	jmp	0x2d0e	; 0x2d0e <__do_global_dtors>

000000f6 <__bad_interrupt>:
      f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fa <swapOne>:
	temp = *secondYValue;                                                                               //swap Y-coordinates
	*secondYValue = *firstYValue;
	*firstYValue = temp;
}

void swapOne(float *firstValue, float *secondValue) {
      fa:	cf 92       	push	r12
      fc:	df 92       	push	r13
      fe:	ef 92       	push	r14
     100:	ff 92       	push	r15
     102:	0f 93       	push	r16
     104:	1f 93       	push	r17
	float temp;

	temp = *secondValue;
     106:	fb 01       	movw	r30, r22
     108:	00 81       	ld	r16, Z
     10a:	11 81       	ldd	r17, Z+1	; 0x01
     10c:	22 81       	ldd	r18, Z+2	; 0x02
     10e:	33 81       	ldd	r19, Z+3	; 0x03
	*secondValue = *firstValue;
     110:	fc 01       	movw	r30, r24
     112:	c0 80       	ld	r12, Z
     114:	d1 80       	ldd	r13, Z+1	; 0x01
     116:	e2 80       	ldd	r14, Z+2	; 0x02
     118:	f3 80       	ldd	r15, Z+3	; 0x03
     11a:	fb 01       	movw	r30, r22
     11c:	c0 82       	st	Z, r12
     11e:	d1 82       	std	Z+1, r13	; 0x01
     120:	e2 82       	std	Z+2, r14	; 0x02
     122:	f3 82       	std	Z+3, r15	; 0x03
	*firstValue = temp;
     124:	fc 01       	movw	r30, r24
     126:	00 83       	st	Z, r16
     128:	11 83       	std	Z+1, r17	; 0x01
     12a:	22 83       	std	Z+2, r18	; 0x02
     12c:	33 83       	std	Z+3, r19	; 0x03
}
     12e:	1f 91       	pop	r17
     130:	0f 91       	pop	r16
     132:	ff 90       	pop	r15
     134:	ef 90       	pop	r14
     136:	df 90       	pop	r13
     138:	cf 90       	pop	r12
     13a:	08 95       	ret

0000013c <sortOrder>:

void sortOrder(int X[], int Y[]) {
     13c:	2f 92       	push	r2
     13e:	3f 92       	push	r3
     140:	4f 92       	push	r4
     142:	5f 92       	push	r5
     144:	6f 92       	push	r6
     146:	7f 92       	push	r7
     148:	8f 92       	push	r8
     14a:	9f 92       	push	r9
     14c:	af 92       	push	r10
     14e:	bf 92       	push	r11
     150:	cf 92       	push	r12
     152:	df 92       	push	r13
     154:	ef 92       	push	r14
     156:	ff 92       	push	r15
     158:	0f 93       	push	r16
     15a:	1f 93       	push	r17
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
     160:	cd b7       	in	r28, 0x3d	; 61
     162:	de b7       	in	r29, 0x3e	; 62
     164:	a5 97       	sbiw	r28, 0x25	; 37
     166:	0f b6       	in	r0, 0x3f	; 63
     168:	f8 94       	cli
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	0f be       	out	0x3f, r0	; 63
     16e:	cd bf       	out	0x3d, r28	; 61
     170:	9b a3       	std	Y+35, r25	; 0x23
     172:	8a a3       	std	Y+34, r24	; 0x22
     174:	6c a3       	std	Y+36, r22	; 0x24
     176:	7d a3       	std	Y+37, r23	; 0x25
     178:	06 96       	adiw	r24, 0x06	; 6
     17a:	98 a3       	std	Y+32, r25	; 0x20
     17c:	8f 8f       	std	Y+31, r24	; 0x1f
     17e:	b6 c0       	rjmp	.+364    	; 0x2ec <sortOrder+0x1b0>
     180:	7e 8e       	std	Y+30, r7	; 0x1e
     182:	6d 8e       	std	Y+29, r6	; 0x1d

	while (check != 1) {
		orderCorrect = 1;

		for (int i = 0; i < (sizeOfOrder - 1); i++) {
			Distance[i] = sqrt((pow(X[i], 2)) + (pow(Y[i], 2)));      //Pythagoras
     184:	f3 01       	movw	r30, r6
     186:	01 90       	ld	r0, Z+
     188:	f0 81       	ld	r31, Z
     18a:	e0 2d       	mov	r30, r0
     18c:	fa 8f       	std	Y+26, r31	; 0x1a
     18e:	e9 8f       	std	Y+25, r30	; 0x19
     190:	bf 01       	movw	r22, r30
     192:	ff 0f       	add	r31, r31
     194:	88 0b       	sbc	r24, r24
     196:	99 0b       	sbc	r25, r25
     198:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatsisf>
     19c:	6b 01       	movw	r12, r22
     19e:	7c 01       	movw	r14, r24
     1a0:	3c 8e       	std	Y+28, r3	; 0x1c
     1a2:	2b 8e       	std	Y+27, r2	; 0x1b
     1a4:	f1 01       	movw	r30, r2
     1a6:	00 81       	ld	r16, Z
     1a8:	11 81       	ldd	r17, Z+1	; 0x01
     1aa:	b8 01       	movw	r22, r16
     1ac:	01 2e       	mov	r0, r17
     1ae:	00 0c       	add	r0, r0
     1b0:	88 0b       	sbc	r24, r24
     1b2:	99 0b       	sbc	r25, r25
     1b4:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatsisf>
     1b8:	4b 01       	movw	r8, r22
     1ba:	5c 01       	movw	r10, r24
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__mulsf3>
     1c4:	69 8b       	std	Y+17, r22	; 0x11
     1c6:	7a 8b       	std	Y+18, r23	; 0x12
     1c8:	8b 8b       	std	Y+19, r24	; 0x13
     1ca:	9c 8b       	std	Y+20, r25	; 0x14
     1cc:	a5 01       	movw	r20, r10
     1ce:	94 01       	movw	r18, r8
     1d0:	c5 01       	movw	r24, r10
     1d2:	b4 01       	movw	r22, r8
     1d4:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__mulsf3>
     1d8:	4b 01       	movw	r8, r22
     1da:	5c 01       	movw	r10, r24
     1dc:	a7 01       	movw	r20, r14
     1de:	96 01       	movw	r18, r12
     1e0:	c7 01       	movw	r24, r14
     1e2:	b6 01       	movw	r22, r12
     1e4:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__mulsf3>
     1e8:	9b 01       	movw	r18, r22
     1ea:	ac 01       	movw	r20, r24
     1ec:	c5 01       	movw	r24, r10
     1ee:	b4 01       	movw	r22, r8
     1f0:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__addsf3>
     1f4:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <sqrt>
     1f8:	6b 01       	movw	r12, r22
     1fa:	7c 01       	movw	r14, r24
     1fc:	f2 01       	movw	r30, r4
     1fe:	61 93       	st	Z+, r22
     200:	71 93       	st	Z+, r23
     202:	81 93       	st	Z+, r24
     204:	91 93       	st	Z+, r25
     206:	2f 01       	movw	r4, r30
     208:	e9 8b       	std	Y+17, r30	; 0x11
     20a:	59 a2       	std	Y+33, r5	; 0x21
			firstDistanceValue =  Distance[i];
			secondDistanceValue =  Distance[i + 1];
     20c:	80 80       	ld	r8, Z
     20e:	91 80       	ldd	r9, Z+1	; 0x01
     210:	a2 80       	ldd	r10, Z+2	; 0x02
     212:	b3 80       	ldd	r11, Z+3	; 0x03

			if ( Distance[i] >  Distance[i + 1]) {
     214:	a5 01       	movw	r20, r10
     216:	94 01       	movw	r18, r8
     218:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <__gesf2>
     21c:	18 16       	cp	r1, r24
     21e:	d4 f4       	brge	.+52     	; 0x254 <sortOrder+0x118>
				swapOne(& Distance[i], & Distance[i + 1]);
     220:	b2 01       	movw	r22, r4
     222:	8d 89       	ldd	r24, Y+21	; 0x15
     224:	9e 89       	ldd	r25, Y+22	; 0x16
     226:	0e 94 7d 00 	call	0xfa	; 0xfa <swapOne>
#include <avr/pgmspace.h>

void swapTwo( int *firstXValue, int *secondXValue, int *firstYValue, int *secondYValue){
	int temp;

	temp = *secondXValue;                                                                               //swap X-coordinates
     22a:	f3 01       	movw	r30, r6
     22c:	82 81       	ldd	r24, Z+2	; 0x02
     22e:	93 81       	ldd	r25, Z+3	; 0x03
	*secondXValue = *firstXValue;
     230:	20 81       	ld	r18, Z
     232:	31 81       	ldd	r19, Z+1	; 0x01
     234:	33 83       	std	Z+3, r19	; 0x03
     236:	22 83       	std	Z+2, r18	; 0x02
	*firstXValue = temp;
     238:	91 83       	std	Z+1, r25	; 0x01
     23a:	80 83       	st	Z, r24

	temp = *secondYValue;                                                                               //swap Y-coordinates
     23c:	f1 01       	movw	r30, r2
     23e:	82 81       	ldd	r24, Z+2	; 0x02
     240:	93 81       	ldd	r25, Z+3	; 0x03
	*secondYValue = *firstYValue;
     242:	20 81       	ld	r18, Z
     244:	31 81       	ldd	r19, Z+1	; 0x01
     246:	33 83       	std	Z+3, r19	; 0x03
     248:	22 83       	std	Z+2, r18	; 0x02
	*firstYValue = temp;
     24a:	91 83       	std	Z+1, r25	; 0x01
     24c:	80 83       	st	Z, r24
			secondDistanceValue =  Distance[i + 1];

			if ( Distance[i] >  Distance[i + 1]) {
				swapOne(& Distance[i], & Distance[i + 1]);
				swapTwo(&X[i], &X[i + 1], &Y[i], &Y[i + 1]);
				orderCorrect = 0;
     24e:	1f 8a       	std	Y+23, r1	; 0x17
     250:	18 8e       	std	Y+24, r1	; 0x18
     252:	36 c0       	rjmp	.+108    	; 0x2c0 <sortOrder+0x184>
				} else if ((firstDistanceValue == secondDistanceValue) && (Y[i] == Y[i + 1])) {
     254:	c7 01       	movw	r24, r14
     256:	b6 01       	movw	r22, r12
     258:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fixsfsi>
     25c:	7b 01       	movw	r14, r22
     25e:	c5 01       	movw	r24, r10
     260:	b4 01       	movw	r22, r8
     262:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fixsfsi>
     266:	e6 16       	cp	r14, r22
     268:	f7 06       	cpc	r15, r23
     26a:	51 f5       	brne	.+84     	; 0x2c0 <sortOrder+0x184>
     26c:	eb 8d       	ldd	r30, Y+27	; 0x1b
     26e:	fc 8d       	ldd	r31, Y+28	; 0x1c
     270:	82 81       	ldd	r24, Z+2	; 0x02
     272:	93 81       	ldd	r25, Z+3	; 0x03
     274:	08 17       	cp	r16, r24
     276:	19 07       	cpc	r17, r25
     278:	19 f5       	brne	.+70     	; 0x2c0 <sortOrder+0x184>
				if (X[i] < X[i + 1]) {
     27a:	ed 8d       	ldd	r30, Y+29	; 0x1d
     27c:	fe 8d       	ldd	r31, Y+30	; 0x1e
     27e:	82 81       	ldd	r24, Z+2	; 0x02
     280:	93 81       	ldd	r25, Z+3	; 0x03
     282:	29 8d       	ldd	r18, Y+25	; 0x19
     284:	3a 8d       	ldd	r19, Y+26	; 0x1a
     286:	28 17       	cp	r18, r24
     288:	39 07       	cpc	r19, r25
     28a:	d4 f4       	brge	.+52     	; 0x2c0 <sortOrder+0x184>
					swapOne(& Distance[i], & Distance[i + 1]);
     28c:	69 89       	ldd	r22, Y+17	; 0x11
     28e:	79 a1       	ldd	r23, Y+33	; 0x21
     290:	8d 89       	ldd	r24, Y+21	; 0x15
     292:	9e 89       	ldd	r25, Y+22	; 0x16
     294:	0e 94 7d 00 	call	0xfa	; 0xfa <swapOne>
#include <avr/pgmspace.h>

void swapTwo( int *firstXValue, int *secondXValue, int *firstYValue, int *secondYValue){
	int temp;

	temp = *secondXValue;                                                                               //swap X-coordinates
     298:	ed 8d       	ldd	r30, Y+29	; 0x1d
     29a:	fe 8d       	ldd	r31, Y+30	; 0x1e
     29c:	82 81       	ldd	r24, Z+2	; 0x02
     29e:	93 81       	ldd	r25, Z+3	; 0x03
	*secondXValue = *firstXValue;
     2a0:	20 81       	ld	r18, Z
     2a2:	31 81       	ldd	r19, Z+1	; 0x01
     2a4:	33 83       	std	Z+3, r19	; 0x03
     2a6:	22 83       	std	Z+2, r18	; 0x02
	*firstXValue = temp;
     2a8:	91 83       	std	Z+1, r25	; 0x01
     2aa:	80 83       	st	Z, r24

	temp = *secondYValue;                                                                               //swap Y-coordinates
     2ac:	eb 8d       	ldd	r30, Y+27	; 0x1b
     2ae:	fc 8d       	ldd	r31, Y+28	; 0x1c
     2b0:	82 81       	ldd	r24, Z+2	; 0x02
     2b2:	93 81       	ldd	r25, Z+3	; 0x03
	*secondYValue = *firstYValue;
     2b4:	20 81       	ld	r18, Z
     2b6:	31 81       	ldd	r19, Z+1	; 0x01
     2b8:	33 83       	std	Z+3, r19	; 0x03
     2ba:	22 83       	std	Z+2, r18	; 0x02
	*firstYValue = temp;
     2bc:	91 83       	std	Z+1, r25	; 0x01
     2be:	80 83       	st	Z, r24
     2c0:	f2 e0       	ldi	r31, 0x02	; 2
     2c2:	6f 0e       	add	r6, r31
     2c4:	71 1c       	adc	r7, r1
     2c6:	22 e0       	ldi	r18, 0x02	; 2
     2c8:	22 0e       	add	r2, r18
     2ca:	31 1c       	adc	r3, r1
     2cc:	8d 89       	ldd	r24, Y+21	; 0x15
     2ce:	9e 89       	ldd	r25, Y+22	; 0x16
     2d0:	04 96       	adiw	r24, 0x04	; 4
     2d2:	9e 8b       	std	Y+22, r25	; 0x16
     2d4:	8d 8b       	std	Y+21, r24	; 0x15
	float Distance[sizeOfOrder];

	while (check != 1) {
		orderCorrect = 1;

		for (int i = 0; i < (sizeOfOrder - 1); i++) {
     2d6:	ef 8d       	ldd	r30, Y+31	; 0x1f
     2d8:	f8 a1       	ldd	r31, Y+32	; 0x20
     2da:	6e 16       	cp	r6, r30
     2dc:	7f 06       	cpc	r7, r31
     2de:	09 f0       	breq	.+2      	; 0x2e2 <sortOrder+0x1a6>
     2e0:	4f cf       	rjmp	.-354    	; 0x180 <sortOrder+0x44>
					swapOne(& Distance[i], & Distance[i + 1]);
					swapTwo(&X[i], &X[i + 1], &Y[i], &Y[i + 1]);
				}
			}
		}
		if (orderCorrect == 1) {
     2e2:	2f 89       	ldd	r18, Y+23	; 0x17
     2e4:	38 8d       	ldd	r19, Y+24	; 0x18
     2e6:	21 30       	cpi	r18, 0x01	; 1
     2e8:	31 05       	cpc	r19, r1
     2ea:	69 f0       	breq	.+26     	; 0x306 <sortOrder+0x1ca>
     2ec:	6a a0       	ldd	r6, Y+34	; 0x22
     2ee:	7b a0       	ldd	r7, Y+35	; 0x23
     2f0:	2c a0       	ldd	r2, Y+36	; 0x24
     2f2:	3d a0       	ldd	r3, Y+37	; 0x25
     2f4:	ce 01       	movw	r24, r28
     2f6:	01 96       	adiw	r24, 0x01	; 1
     2f8:	2c 01       	movw	r4, r24
	temp = *secondValue;
	*secondValue = *firstValue;
	*firstValue = temp;
}

void sortOrder(int X[], int Y[]) {
     2fa:	9e 8b       	std	Y+22, r25	; 0x16
     2fc:	8d 8b       	std	Y+21, r24	; 0x15
     2fe:	91 e0       	ldi	r25, 0x01	; 1
     300:	9f 8b       	std	Y+23, r25	; 0x17
     302:	18 8e       	std	Y+24, r1	; 0x18
     304:	3d cf       	rjmp	.-390    	; 0x180 <sortOrder+0x44>
		}
		if (orderCorrect == 1) {
			check = 1;
		}
	}
}
     306:	a5 96       	adiw	r28, 0x25	; 37
     308:	0f b6       	in	r0, 0x3f	; 63
     30a:	f8 94       	cli
     30c:	de bf       	out	0x3e, r29	; 62
     30e:	0f be       	out	0x3f, r0	; 63
     310:	cd bf       	out	0x3d, r28	; 61
     312:	df 91       	pop	r29
     314:	cf 91       	pop	r28
     316:	1f 91       	pop	r17
     318:	0f 91       	pop	r16
     31a:	ff 90       	pop	r15
     31c:	ef 90       	pop	r14
     31e:	df 90       	pop	r13
     320:	cf 90       	pop	r12
     322:	bf 90       	pop	r11
     324:	af 90       	pop	r10
     326:	9f 90       	pop	r9
     328:	8f 90       	pop	r8
     32a:	7f 90       	pop	r7
     32c:	6f 90       	pop	r6
     32e:	5f 90       	pop	r5
     330:	4f 90       	pop	r4
     332:	3f 90       	pop	r3
     334:	2f 90       	pop	r2
     336:	08 95       	ret

00000338 <turn>:

void turn(char direction){
     338:	cf 93       	push	r28
     33a:	c8 2f       	mov	r28, r24
	motorControl(70, direction, 0.89);
     33c:	2a e0       	ldi	r18, 0x0A	; 10
     33e:	37 ed       	ldi	r19, 0xD7	; 215
     340:	43 e6       	ldi	r20, 0x63	; 99
     342:	5f e3       	ldi	r21, 0x3F	; 63
     344:	68 2f       	mov	r22, r24
     346:	86 e4       	ldi	r24, 0x46	; 70
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <motorControl>
	delay_ms(50);
     34e:	82 e3       	ldi	r24, 0x32	; 50
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	0e 94 3b 11 	call	0x2276	; 0x2276 <delay_ms>
	motorControl(0, direction, 0.89);
     356:	2a e0       	ldi	r18, 0x0A	; 10
     358:	37 ed       	ldi	r19, 0xD7	; 215
     35a:	43 e6       	ldi	r20, 0x63	; 99
     35c:	5f e3       	ldi	r21, 0x3F	; 63
     35e:	6c 2f       	mov	r22, r28
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <motorControl>
}
     368:	cf 91       	pop	r28
     36a:	08 95       	ret

0000036c <readGrid>:
	}
	driveRoute(route, 1, 1, amountOfIntersects);    //Drive back to home
	play_from_program_space(PSTR(">g32>>c32"));
}

int readGrid(int routes[4][20]){
     36c:	2f 92       	push	r2
     36e:	3f 92       	push	r3
     370:	4f 92       	push	r4
     372:	5f 92       	push	r5
     374:	6f 92       	push	r6
     376:	7f 92       	push	r7
     378:	8f 92       	push	r8
     37a:	9f 92       	push	r9
     37c:	af 92       	push	r10
     37e:	bf 92       	push	r11
     380:	cf 92       	push	r12
     382:	df 92       	push	r13
     384:	ef 92       	push	r14
     386:	ff 92       	push	r15
     388:	0f 93       	push	r16
     38a:	1f 93       	push	r17
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	8c 01       	movw	r16, r24
	int i = 1, grid = 0, numOfIntersects, crossing = 0, routeNum = 1;
	int resultTemp;
	routes[1][0] = 5;                    //Marks beginning of route
     392:	85 e0       	ldi	r24, 0x05	; 5
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	f8 01       	movw	r30, r16
     398:	91 a7       	std	Z+41, r25	; 0x29
     39a:	80 a7       	std	Z+40, r24	; 0x28
	driveRoute(route, 1, 1, amountOfIntersects);    //Drive back to home
	play_from_program_space(PSTR(">g32>>c32"));
}

int readGrid(int routes[4][20]){
	int i = 1, grid = 0, numOfIntersects, crossing = 0, routeNum = 1;
     39c:	c1 e0       	ldi	r28, 0x01	; 1
     39e:	d0 e0       	ldi	r29, 0x00	; 0
			turn('L');
			i++;
			routes[0][i] = 6;
			break;
			case 7:         //Dead end
			routes[0][i] = 7;
     3a0:	0f 2e       	mov	r0, r31
     3a2:	f7 e0       	ldi	r31, 0x07	; 7
     3a4:	8f 2e       	mov	r8, r31
     3a6:	91 2c       	mov	r9, r1
     3a8:	f0 2d       	mov	r31, r0
			motorControl(80, 'F', 0.89);
			break;
			case 6:              //It is a crossing
			turn('L');
			i++;
			routes[0][i] = 6;
     3aa:	0f 2e       	mov	r0, r31
     3ac:	f6 e0       	ldi	r31, 0x06	; 6
     3ae:	af 2e       	mov	r10, r31
     3b0:	b1 2c       	mov	r11, r1
     3b2:	f0 2d       	mov	r31, r0
			case 4:                //R
			routes[0][i] = 4;
			motorControl(80, 'F', 0.89);
			break;
			case 5:               //L
			routes[0][i] = 5;
     3b4:	0f 2e       	mov	r0, r31
     3b6:	f5 e0       	ldi	r31, 0x05	; 5
     3b8:	cf 2e       	mov	r12, r31
     3ba:	d1 2c       	mov	r13, r1
     3bc:	f0 2d       	mov	r31, r0
			turn('L');
			routes[0][i] = 3;
			i++;
			break;
			case 4:                //R
			routes[0][i] = 4;
     3be:	68 94       	set
     3c0:	ee 24       	eor	r14, r14
     3c2:	e2 f8       	bld	r14, 2
     3c4:	f1 2c       	mov	r15, r1
			turn('L');
			i++;
			break;
			case 3:                 //It is a T-crossing    L R
			turn('L');
			routes[0][i] = 3;
     3c6:	0f 2e       	mov	r0, r31
     3c8:	f3 e0       	ldi	r31, 0x03	; 3
     3ca:	6f 2e       	mov	r6, r31
     3cc:	71 2c       	mov	r7, r1
     3ce:	f0 2d       	mov	r31, r0
			routes[0][i] = 1;
			turn('R');
			i++;
			break;
			case 2:                 //It is a corner to the left
			routes[0][i] = 2;
     3d0:	68 94       	set
     3d2:	44 24       	eor	r4, r4
     3d4:	41 f8       	bld	r4, 1
     3d6:	51 2c       	mov	r5, r1
	routes[1][0] = 5;                    //Marks beginning of route
	do{
		resultTemp = checkAfslag();	
		switch(resultTemp){
			case 1:                  //It is a corner to the right
			routes[0][i] = 1;
     3d8:	22 24       	eor	r2, r2
     3da:	23 94       	inc	r2
     3dc:	31 2c       	mov	r3, r1
int readGrid(int routes[4][20]){
	int i = 1, grid = 0, numOfIntersects, crossing = 0, routeNum = 1;
	int resultTemp;
	routes[1][0] = 5;                    //Marks beginning of route
	do{
		resultTemp = checkAfslag();	
     3de:	0e 94 40 08 	call	0x1080	; 0x1080 <checkAfslag>
		switch(resultTemp){
     3e2:	01 97       	sbiw	r24, 0x01	; 1
     3e4:	88 30       	cpi	r24, 0x08	; 8
     3e6:	91 05       	cpc	r25, r1
     3e8:	d0 f7       	brcc	.-12     	; 0x3de <readGrid+0x72>
     3ea:	8c 5c       	subi	r24, 0xCC	; 204
     3ec:	9f 4f       	sbci	r25, 0xFF	; 255
     3ee:	fc 01       	movw	r30, r24
     3f0:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <__tablejump2__>
			case 1:                  //It is a corner to the right
			routes[0][i] = 1;
     3f4:	fe 01       	movw	r30, r28
     3f6:	ee 0f       	add	r30, r30
     3f8:	ff 1f       	adc	r31, r31
     3fa:	e0 0f       	add	r30, r16
     3fc:	f1 1f       	adc	r31, r17
     3fe:	31 82       	std	Z+1, r3	; 0x01
     400:	20 82       	st	Z, r2
			turn('R');
     402:	82 e5       	ldi	r24, 0x52	; 82
     404:	0e 94 9c 01 	call	0x338	; 0x338 <turn>
			i++;
     408:	21 96       	adiw	r28, 0x01	; 1
			break;
     40a:	e9 cf       	rjmp	.-46     	; 0x3de <readGrid+0x72>
			case 2:                 //It is a corner to the left
			routes[0][i] = 2;
     40c:	fe 01       	movw	r30, r28
     40e:	ee 0f       	add	r30, r30
     410:	ff 1f       	adc	r31, r31
     412:	e0 0f       	add	r30, r16
     414:	f1 1f       	adc	r31, r17
     416:	51 82       	std	Z+1, r5	; 0x01
     418:	40 82       	st	Z, r4
			turn('L');
     41a:	8c e4       	ldi	r24, 0x4C	; 76
     41c:	0e 94 9c 01 	call	0x338	; 0x338 <turn>
			i++;
     420:	21 96       	adiw	r28, 0x01	; 1
			break;
     422:	dd cf       	rjmp	.-70     	; 0x3de <readGrid+0x72>
			case 3:                 //It is a T-crossing    L R
			turn('L');
     424:	8c e4       	ldi	r24, 0x4C	; 76
     426:	0e 94 9c 01 	call	0x338	; 0x338 <turn>
			routes[0][i] = 3;
     42a:	fe 01       	movw	r30, r28
     42c:	ee 0f       	add	r30, r30
     42e:	ff 1f       	adc	r31, r31
     430:	e0 0f       	add	r30, r16
     432:	f1 1f       	adc	r31, r17
     434:	71 82       	std	Z+1, r7	; 0x01
     436:	60 82       	st	Z, r6
			i++;
     438:	21 96       	adiw	r28, 0x01	; 1
			break;
     43a:	d1 cf       	rjmp	.-94     	; 0x3de <readGrid+0x72>
			case 4:                //R
			routes[0][i] = 4;
     43c:	fe 01       	movw	r30, r28
     43e:	ee 0f       	add	r30, r30
     440:	ff 1f       	adc	r31, r31
     442:	e0 0f       	add	r30, r16
     444:	f1 1f       	adc	r31, r17
     446:	f1 82       	std	Z+1, r15	; 0x01
     448:	e0 82       	st	Z, r14
			motorControl(80, 'F', 0.89);
     44a:	2a e0       	ldi	r18, 0x0A	; 10
     44c:	37 ed       	ldi	r19, 0xD7	; 215
     44e:	43 e6       	ldi	r20, 0x63	; 99
     450:	5f e3       	ldi	r21, 0x3F	; 63
     452:	66 e4       	ldi	r22, 0x46	; 70
     454:	80 e5       	ldi	r24, 0x50	; 80
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <motorControl>
			break;
     45c:	c0 cf       	rjmp	.-128    	; 0x3de <readGrid+0x72>
			case 5:               //L
			routes[0][i] = 5;
     45e:	fe 01       	movw	r30, r28
     460:	ee 0f       	add	r30, r30
     462:	ff 1f       	adc	r31, r31
     464:	e0 0f       	add	r30, r16
     466:	f1 1f       	adc	r31, r17
     468:	d1 82       	std	Z+1, r13	; 0x01
     46a:	c0 82       	st	Z, r12
			motorControl(80, 'F', 0.89);
     46c:	2a e0       	ldi	r18, 0x0A	; 10
     46e:	37 ed       	ldi	r19, 0xD7	; 215
     470:	43 e6       	ldi	r20, 0x63	; 99
     472:	5f e3       	ldi	r21, 0x3F	; 63
     474:	66 e4       	ldi	r22, 0x46	; 70
     476:	80 e5       	ldi	r24, 0x50	; 80
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <motorControl>
			break;
     47e:	af cf       	rjmp	.-162    	; 0x3de <readGrid+0x72>
			case 6:              //It is a crossing
			turn('L');
     480:	8c e4       	ldi	r24, 0x4C	; 76
     482:	0e 94 9c 01 	call	0x338	; 0x338 <turn>
			i++;
     486:	21 96       	adiw	r28, 0x01	; 1
			routes[0][i] = 6;
     488:	fe 01       	movw	r30, r28
     48a:	ee 0f       	add	r30, r30
     48c:	ff 1f       	adc	r31, r31
     48e:	e0 0f       	add	r30, r16
     490:	f1 1f       	adc	r31, r17
     492:	b1 82       	std	Z+1, r11	; 0x01
     494:	a0 82       	st	Z, r10
			break;
     496:	a3 cf       	rjmp	.-186    	; 0x3de <readGrid+0x72>
			case 7:         //Dead end
			routes[0][i] = 7;
     498:	fe 01       	movw	r30, r28
     49a:	ee 0f       	add	r30, r30
     49c:	ff 1f       	adc	r31, r31
     49e:	e0 0f       	add	r30, r16
     4a0:	f1 1f       	adc	r31, r17
     4a2:	91 82       	std	Z+1, r9	; 0x01
     4a4:	80 82       	st	Z, r8
			turn('R');
     4a6:	82 e5       	ldi	r24, 0x52	; 82
     4a8:	0e 94 9c 01 	call	0x338	; 0x338 <turn>
			turn('R');
     4ac:	82 e5       	ldi	r24, 0x52	; 82
     4ae:	0e 94 9c 01 	call	0x338	; 0x338 <turn>
			break;
     4b2:	95 cf       	rjmp	.-214    	; 0x3de <readGrid+0x72>
			case 8:
			grid = 1;
			routes[0][i] = 8; //Marks end of route
     4b4:	fe 01       	movw	r30, r28
     4b6:	ee 0f       	add	r30, r30
     4b8:	ff 1f       	adc	r31, r31
     4ba:	e0 0f       	add	r30, r16
     4bc:	f1 1f       	adc	r31, r17
     4be:	88 e0       	ldi	r24, 0x08	; 8
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	91 83       	std	Z+1, r25	; 0x01
     4c4:	80 83       	st	Z, r24
		}
	}while(grid == 0);
	numOfIntersects = i;
	
	for(i = 0; i < numOfIntersects; i++){   //Writing route towards X
     4c6:	1c 16       	cp	r1, r28
     4c8:	1d 06       	cpc	r1, r29
     4ca:	0c f0       	brlt	.+2      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     4cc:	e6 c0       	rjmp	.+460    	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
     4ce:	d8 01       	movw	r26, r16
     4d0:	21 e0       	ldi	r18, 0x01	; 1
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	e1 2c       	mov	r14, r1
     4d6:	f1 2c       	mov	r15, r1
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	90 e0       	ldi	r25, 0x00	; 0
				crossing = 0;
				routes[1][i - 1] = 3;
			}
			break;
			case 8:                                                      //case 7 isn't part of a route
			routes[1][i] = 8;  //Marks end of route
     4dc:	68 94       	set
     4de:	66 24       	eor	r6, r6
     4e0:	63 f8       	bld	r6, 3
     4e2:	71 2c       	mov	r7, r1
				routes[routeNum][i] = 2;
			}
			break;
			case 6:
			crossing++;
			routes[routeNum][i] = 6;
     4e4:	48 e2       	ldi	r20, 0x28	; 40
     4e6:	0f 2e       	mov	r0, r31
     4e8:	f6 e0       	ldi	r31, 0x06	; 6
     4ea:	4f 2e       	mov	r4, r31
     4ec:	51 2c       	mov	r5, r1
     4ee:	f0 2d       	mov	r31, r0
			if((crossing == 2) && (routes[routeNum][i - 1] == 6)){
				crossing = 0;
				routes[1][i - 1] = 3;
     4f0:	0f 2e       	mov	r0, r31
     4f2:	f3 e0       	ldi	r31, 0x03	; 3
     4f4:	2f 2e       	mov	r2, r31
     4f6:	31 2c       	mov	r3, r1
     4f8:	f0 2d       	mov	r31, r0
			case 5:
			if(routes[0][i + 1] == 7){
				routes[routeNum][i] = 1;
			}
			else if(routes[0][i] != 7){
				routes[routeNum][i] = 2;
     4fa:	68 94       	set
     4fc:	cc 24       	eor	r12, r12
     4fe:	c1 f8       	bld	r12, 1
     500:	d1 2c       	mov	r13, r1
				routes[routeNum][i] = 3;
			}
			break;
			case 5:
			if(routes[0][i + 1] == 7){
				routes[routeNum][i] = 1;
     502:	aa 24       	eor	r10, r10
     504:	a3 94       	inc	r10
     506:	b1 2c       	mov	r11, r1
		}
	}while(grid == 0);
	numOfIntersects = i;
	
	for(i = 0; i < numOfIntersects; i++){   //Writing route towards X
		switch(routes[0][i]){
     508:	ed 91       	ld	r30, X+
     50a:	fd 91       	ld	r31, X+
     50c:	31 97       	sbiw	r30, 0x01	; 1
     50e:	e8 30       	cpi	r30, 0x08	; 8
     510:	f1 05       	cpc	r31, r1
     512:	08 f0       	brcs	.+2      	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     514:	bd c0       	rjmp	.+378    	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
     516:	e4 5c       	subi	r30, 0xC4	; 196
     518:	ff 4f       	sbci	r31, 0xFF	; 255
     51a:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <__tablejump2__>
			case 1:
			routes[routeNum][i] = 1;
     51e:	42 9f       	mul	r20, r18
     520:	f0 01       	movw	r30, r0
     522:	43 9f       	mul	r20, r19
     524:	f0 0d       	add	r31, r0
     526:	11 24       	eor	r1, r1
     528:	e0 0f       	add	r30, r16
     52a:	f1 1f       	adc	r31, r17
     52c:	bc 01       	movw	r22, r24
     52e:	66 0f       	add	r22, r22
     530:	77 1f       	adc	r23, r23
     532:	e6 0f       	add	r30, r22
     534:	f7 1f       	adc	r31, r23
     536:	b1 82       	std	Z+1, r11	; 0x01
     538:	a0 82       	st	Z, r10
			break;
     53a:	aa c0       	rjmp	.+340    	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
			case 2:
			routes[routeNum][i] = 2;
     53c:	42 9f       	mul	r20, r18
     53e:	f0 01       	movw	r30, r0
     540:	43 9f       	mul	r20, r19
     542:	f0 0d       	add	r31, r0
     544:	11 24       	eor	r1, r1
     546:	e0 0f       	add	r30, r16
     548:	f1 1f       	adc	r31, r17
     54a:	bc 01       	movw	r22, r24
     54c:	66 0f       	add	r22, r22
     54e:	77 1f       	adc	r23, r23
     550:	e6 0f       	add	r30, r22
     552:	f7 1f       	adc	r31, r23
     554:	d1 82       	std	Z+1, r13	; 0x01
     556:	c0 82       	st	Z, r12
			break;
     558:	9b c0       	rjmp	.+310    	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
			case 3:
			if(routes[0][i + 1] == 7){
     55a:	6d 91       	ld	r22, X+
     55c:	7c 91       	ld	r23, X
     55e:	11 97       	sbiw	r26, 0x01	; 1
     560:	67 30       	cpi	r22, 0x07	; 7
     562:	71 05       	cpc	r23, r1
     564:	79 f4       	brne	.+30     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
				routes[routeNum][i] = 1;
     566:	42 9f       	mul	r20, r18
     568:	f0 01       	movw	r30, r0
     56a:	43 9f       	mul	r20, r19
     56c:	f0 0d       	add	r31, r0
     56e:	11 24       	eor	r1, r1
     570:	e0 0f       	add	r30, r16
     572:	f1 1f       	adc	r31, r17
     574:	bc 01       	movw	r22, r24
     576:	66 0f       	add	r22, r22
     578:	77 1f       	adc	r23, r23
     57a:	e6 0f       	add	r30, r22
     57c:	f7 1f       	adc	r31, r23
     57e:	b1 82       	std	Z+1, r11	; 0x01
     580:	a0 82       	st	Z, r10
     582:	86 c0       	rjmp	.+268    	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
			}
			else if(routes[0][i + 1] != 7){
				routes[routeNum][i] = 2;
     584:	42 9f       	mul	r20, r18
     586:	f0 01       	movw	r30, r0
     588:	43 9f       	mul	r20, r19
     58a:	f0 0d       	add	r31, r0
     58c:	11 24       	eor	r1, r1
     58e:	e0 0f       	add	r30, r16
     590:	f1 1f       	adc	r31, r17
     592:	bc 01       	movw	r22, r24
     594:	66 0f       	add	r22, r22
     596:	77 1f       	adc	r23, r23
     598:	e6 0f       	add	r30, r22
     59a:	f7 1f       	adc	r31, r23
     59c:	d1 82       	std	Z+1, r13	; 0x01
     59e:	c0 82       	st	Z, r12
     5a0:	77 c0       	rjmp	.+238    	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
			}
			break;
			case 4:
			if(routes[0][i + 1] == 7){
     5a2:	6d 91       	ld	r22, X+
     5a4:	7c 91       	ld	r23, X
     5a6:	11 97       	sbiw	r26, 0x01	; 1
     5a8:	67 30       	cpi	r22, 0x07	; 7
     5aa:	71 05       	cpc	r23, r1
     5ac:	79 f4       	brne	.+30     	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
				routes[routeNum][i] = 1;
     5ae:	42 9f       	mul	r20, r18
     5b0:	f0 01       	movw	r30, r0
     5b2:	43 9f       	mul	r20, r19
     5b4:	f0 0d       	add	r31, r0
     5b6:	11 24       	eor	r1, r1
     5b8:	e0 0f       	add	r30, r16
     5ba:	f1 1f       	adc	r31, r17
     5bc:	bc 01       	movw	r22, r24
     5be:	66 0f       	add	r22, r22
     5c0:	77 1f       	adc	r23, r23
     5c2:	e6 0f       	add	r30, r22
     5c4:	f7 1f       	adc	r31, r23
     5c6:	b1 82       	std	Z+1, r11	; 0x01
     5c8:	a0 82       	st	Z, r10
     5ca:	62 c0       	rjmp	.+196    	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
			}
			else if(routes[0][i] != 7){
				routes[routeNum][i] = 3;
     5cc:	42 9f       	mul	r20, r18
     5ce:	f0 01       	movw	r30, r0
     5d0:	43 9f       	mul	r20, r19
     5d2:	f0 0d       	add	r31, r0
     5d4:	11 24       	eor	r1, r1
     5d6:	e0 0f       	add	r30, r16
     5d8:	f1 1f       	adc	r31, r17
     5da:	bc 01       	movw	r22, r24
     5dc:	66 0f       	add	r22, r22
     5de:	77 1f       	adc	r23, r23
     5e0:	e6 0f       	add	r30, r22
     5e2:	f7 1f       	adc	r31, r23
     5e4:	31 82       	std	Z+1, r3	; 0x01
     5e6:	20 82       	st	Z, r2
     5e8:	53 c0       	rjmp	.+166    	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
			}
			break;
			case 5:
			if(routes[0][i + 1] == 7){
     5ea:	6d 91       	ld	r22, X+
     5ec:	7c 91       	ld	r23, X
     5ee:	11 97       	sbiw	r26, 0x01	; 1
     5f0:	67 30       	cpi	r22, 0x07	; 7
     5f2:	71 05       	cpc	r23, r1
     5f4:	79 f4       	brne	.+30     	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
				routes[routeNum][i] = 1;
     5f6:	42 9f       	mul	r20, r18
     5f8:	f0 01       	movw	r30, r0
     5fa:	43 9f       	mul	r20, r19
     5fc:	f0 0d       	add	r31, r0
     5fe:	11 24       	eor	r1, r1
     600:	e0 0f       	add	r30, r16
     602:	f1 1f       	adc	r31, r17
     604:	bc 01       	movw	r22, r24
     606:	66 0f       	add	r22, r22
     608:	77 1f       	adc	r23, r23
     60a:	e6 0f       	add	r30, r22
     60c:	f7 1f       	adc	r31, r23
     60e:	b1 82       	std	Z+1, r11	; 0x01
     610:	a0 82       	st	Z, r10
     612:	3e c0       	rjmp	.+124    	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
			}
			else if(routes[0][i] != 7){
				routes[routeNum][i] = 2;
     614:	42 9f       	mul	r20, r18
     616:	f0 01       	movw	r30, r0
     618:	43 9f       	mul	r20, r19
     61a:	f0 0d       	add	r31, r0
     61c:	11 24       	eor	r1, r1
     61e:	e0 0f       	add	r30, r16
     620:	f1 1f       	adc	r31, r17
     622:	bc 01       	movw	r22, r24
     624:	66 0f       	add	r22, r22
     626:	77 1f       	adc	r23, r23
     628:	e6 0f       	add	r30, r22
     62a:	f7 1f       	adc	r31, r23
     62c:	d1 82       	std	Z+1, r13	; 0x01
     62e:	c0 82       	st	Z, r12
     630:	2f c0       	rjmp	.+94     	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
			}
			break;
			case 6:
			crossing++;
     632:	ff ef       	ldi	r31, 0xFF	; 255
     634:	ef 1a       	sub	r14, r31
     636:	ff 0a       	sbc	r15, r31
			routes[routeNum][i] = 6;
     638:	42 9f       	mul	r20, r18
     63a:	40 01       	movw	r8, r0
     63c:	43 9f       	mul	r20, r19
     63e:	90 0c       	add	r9, r0
     640:	11 24       	eor	r1, r1
     642:	80 0e       	add	r8, r16
     644:	91 1e       	adc	r9, r17
     646:	fc 01       	movw	r30, r24
     648:	ee 0f       	add	r30, r30
     64a:	ff 1f       	adc	r31, r31
     64c:	e8 0d       	add	r30, r8
     64e:	f9 1d       	adc	r31, r9
     650:	51 82       	std	Z+1, r5	; 0x01
     652:	40 82       	st	Z, r4
			if((crossing == 2) && (routes[routeNum][i - 1] == 6)){
     654:	52 e0       	ldi	r21, 0x02	; 2
     656:	e5 16       	cp	r14, r21
     658:	f1 04       	cpc	r15, r1
     65a:	d1 f4       	brne	.+52     	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
     65c:	bc 01       	movw	r22, r24
     65e:	61 50       	subi	r22, 0x01	; 1
     660:	71 09       	sbc	r23, r1
     662:	66 0f       	add	r22, r22
     664:	77 1f       	adc	r23, r23
     666:	f4 01       	movw	r30, r8
     668:	e6 0f       	add	r30, r22
     66a:	f7 1f       	adc	r31, r23
     66c:	60 81       	ld	r22, Z
     66e:	71 81       	ldd	r23, Z+1	; 0x01
     670:	66 30       	cpi	r22, 0x06	; 6
     672:	71 05       	cpc	r23, r1
     674:	69 f4       	brne	.+26     	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
				crossing = 0;
				routes[1][i - 1] = 3;
     676:	95 96       	adiw	r26, 0x25	; 37
     678:	3c 92       	st	X, r3
     67a:	2e 92       	st	-X, r2
     67c:	94 97       	sbiw	r26, 0x24	; 36
			break;
			case 6:
			crossing++;
			routes[routeNum][i] = 6;
			if((crossing == 2) && (routes[routeNum][i - 1] == 6)){
				crossing = 0;
     67e:	e1 2c       	mov	r14, r1
     680:	f1 2c       	mov	r15, r1
     682:	06 c0       	rjmp	.+12     	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
				routes[1][i - 1] = 3;
			}
			break;
			case 8:                                                      //case 7 isn't part of a route
			routes[1][i] = 8;  //Marks end of route
     684:	97 96       	adiw	r26, 0x27	; 39
     686:	7c 92       	st	X, r7
     688:	6e 92       	st	-X, r6
     68a:	96 97       	sbiw	r26, 0x26	; 38
			routeNum++;
     68c:	2f 5f       	subi	r18, 0xFF	; 255
     68e:	3f 4f       	sbci	r19, 0xFF	; 255
			routes[0][i] = 8; //Marks end of route
		}
	}while(grid == 0);
	numOfIntersects = i;
	
	for(i = 0; i < numOfIntersects; i++){   //Writing route towards X
     690:	01 96       	adiw	r24, 0x01	; 1
     692:	c8 17       	cp	r28, r24
     694:	d9 07       	cpc	r29, r25
     696:	09 f0       	breq	.+2      	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
     698:	37 cf       	rjmp	.-402    	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
			
		}
	}
	
	return numOfIntersects;                                                       //returns intersect count, so amount of intersects on route
}
     69a:	ce 01       	movw	r24, r28
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	1f 91       	pop	r17
     6a2:	0f 91       	pop	r16
     6a4:	ff 90       	pop	r15
     6a6:	ef 90       	pop	r14
     6a8:	df 90       	pop	r13
     6aa:	cf 90       	pop	r12
     6ac:	bf 90       	pop	r11
     6ae:	af 90       	pop	r10
     6b0:	9f 90       	pop	r9
     6b2:	8f 90       	pop	r8
     6b4:	7f 90       	pop	r7
     6b6:	6f 90       	pop	r6
     6b8:	5f 90       	pop	r5
     6ba:	4f 90       	pop	r4
     6bc:	3f 90       	pop	r3
     6be:	2f 90       	pop	r2
     6c0:	08 95       	ret

000006c2 <driveRoute>:

void driveRoute(int route[2][20], int flag, int flagReturn, int max){             //go to or return from, grid or chargepoint
     6c2:	cf 92       	push	r12
     6c4:	df 92       	push	r13
     6c6:	ef 92       	push	r14
     6c8:	ff 92       	push	r15
     6ca:	0f 93       	push	r16
     6cc:	1f 93       	push	r17
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
     6d2:	6c 01       	movw	r12, r24
     6d4:	eb 01       	movw	r28, r22
     6d6:	7a 01       	movw	r14, r20
     6d8:	89 01       	movw	r16, r18
	int intersectnum = 1;                                       // flag 1 =  from or to home, flag 2 is from or to chargepoint
	
	if(flagReturn == 1){
     6da:	41 30       	cpi	r20, 0x01	; 1
     6dc:	51 05       	cpc	r21, r1
     6de:	11 f0       	breq	.+4      	; 0x6e4 <driveRoute+0x22>
	
	return numOfIntersects;                                                       //returns intersect count, so amount of intersects on route
}

void driveRoute(int route[2][20], int flag, int flagReturn, int max){             //go to or return from, grid or chargepoint
	int intersectnum = 1;                                       // flag 1 =  from or to home, flag 2 is from or to chargepoint
     6e0:	01 e0       	ldi	r16, 0x01	; 1
     6e2:	10 e0       	ldi	r17, 0x00	; 0
	
	if(flagReturn == 1){
		intersectnum = max;
	}
	
	if(flag == 2){
     6e4:	c2 30       	cpi	r28, 0x02	; 2
     6e6:	d1 05       	cpc	r29, r1
     6e8:	19 f4       	brne	.+6      	; 0x6f0 <driveRoute+0x2e>
		turn('R');
     6ea:	82 e5       	ldi	r24, 0x52	; 82
     6ec:	0e 94 9c 01 	call	0x338	; 0x338 <turn>
	}while(checkAfslag() == 0);
	
	if(checkAfslag() != 0){
		
		if(flagReturn == 0){
			switch(route[flag][intersectnum]){
     6f0:	28 e2       	ldi	r18, 0x28	; 40
     6f2:	2c 9f       	mul	r18, r28
     6f4:	c0 01       	movw	r24, r0
     6f6:	2d 9f       	mul	r18, r29
     6f8:	90 0d       	add	r25, r0
     6fa:	11 24       	eor	r1, r1
     6fc:	e8 01       	movw	r28, r16
     6fe:	cc 0f       	add	r28, r28
     700:	dd 1f       	adc	r29, r29
     702:	c8 0f       	add	r28, r24
     704:	d9 1f       	adc	r29, r25
     706:	cc 0d       	add	r28, r12
     708:	dd 1d       	adc	r29, r13
		turn('R');
	}
	
	Next:
	do{
		followLine();
     70a:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <followLine>
	}while(checkAfslag() == 0);
     70e:	0e 94 40 08 	call	0x1080	; 0x1080 <checkAfslag>
     712:	89 2b       	or	r24, r25
     714:	d1 f3       	breq	.-12     	; 0x70a <driveRoute+0x48>
	
	if(checkAfslag() != 0){
     716:	0e 94 40 08 	call	0x1080	; 0x1080 <checkAfslag>
     71a:	89 2b       	or	r24, r25
     71c:	69 f1       	breq	.+90     	; 0x778 <driveRoute+0xb6>
		
		if(flagReturn == 0){
     71e:	e1 14       	cp	r14, r1
     720:	f1 04       	cpc	r15, r1
     722:	51 f5       	brne	.+84     	; 0x778 <driveRoute+0xb6>
			switch(route[flag][intersectnum]){
     724:	89 91       	ld	r24, Y+
     726:	99 91       	ld	r25, Y+
     728:	82 30       	cpi	r24, 0x02	; 2
     72a:	91 05       	cpc	r25, r1
     72c:	71 f0       	breq	.+28     	; 0x74a <driveRoute+0x88>
     72e:	1c f4       	brge	.+6      	; 0x736 <driveRoute+0x74>
     730:	01 97       	sbiw	r24, 0x01	; 1
     732:	39 f0       	breq	.+14     	; 0x742 <driveRoute+0x80>
     734:	21 c0       	rjmp	.+66     	; 0x778 <driveRoute+0xb6>
     736:	83 30       	cpi	r24, 0x03	; 3
     738:	91 05       	cpc	r25, r1
     73a:	59 f0       	breq	.+22     	; 0x752 <driveRoute+0x90>
     73c:	05 97       	sbiw	r24, 0x05	; 5
     73e:	99 f0       	breq	.+38     	; 0x766 <driveRoute+0xa4>
     740:	1b c0       	rjmp	.+54     	; 0x778 <driveRoute+0xb6>
				case 1:
				turn('R');
     742:	82 e5       	ldi	r24, 0x52	; 82
     744:	0e 94 9c 01 	call	0x338	; 0x338 <turn>
				intersectnum++;
				goto Next;
     748:	e0 cf       	rjmp	.-64     	; 0x70a <driveRoute+0x48>
				case 2:
				turn('L');
     74a:	8c e4       	ldi	r24, 0x4C	; 76
     74c:	0e 94 9c 01 	call	0x338	; 0x338 <turn>
				intersectnum++;
				goto Next;
     750:	dc cf       	rjmp	.-72     	; 0x70a <driveRoute+0x48>
				case 3:
				motorControl(80, 'F', 0.89);
     752:	2a e0       	ldi	r18, 0x0A	; 10
     754:	37 ed       	ldi	r19, 0xD7	; 215
     756:	43 e6       	ldi	r20, 0x63	; 99
     758:	5f e3       	ldi	r21, 0x3F	; 63
     75a:	66 e4       	ldi	r22, 0x46	; 70
     75c:	80 e5       	ldi	r24, 0x50	; 80
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <motorControl>
				intersectnum++;
				goto Next;
     764:	d2 cf       	rjmp	.-92     	; 0x70a <driveRoute+0x48>
				case 5:                  
				motorControl(0, 'F', 0.89);    //stop
     766:	2a e0       	ldi	r18, 0x0A	; 10
     768:	37 ed       	ldi	r19, 0xD7	; 215
     76a:	43 e6       	ldi	r20, 0x63	; 99
     76c:	5f e3       	ldi	r21, 0x3F	; 63
     76e:	66 e4       	ldi	r22, 0x46	; 70
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <motorControl>
				play_from_program_space(PSTR(">g32>>c32"));

			}
		}
	}
}
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	1f 91       	pop	r17
     77e:	0f 91       	pop	r16
     780:	ff 90       	pop	r15
     782:	ef 90       	pop	r14
     784:	df 90       	pop	r13
     786:	cf 90       	pop	r12
     788:	08 95       	ret

0000078a <fetchOrder>:
	motorControl(70, direction, 0.89);
	delay_ms(50);
	motorControl(0, direction, 0.89);
}

void fetchOrder(int OrderX[], int orderY[], int route[2][20]){
     78a:	4f 92       	push	r4
     78c:	5f 92       	push	r5
     78e:	6f 92       	push	r6
     790:	7f 92       	push	r7
     792:	8f 92       	push	r8
     794:	9f 92       	push	r9
     796:	af 92       	push	r10
     798:	bf 92       	push	r11
     79a:	cf 92       	push	r12
     79c:	df 92       	push	r13
     79e:	ef 92       	push	r14
     7a0:	ff 92       	push	r15
     7a2:	0f 93       	push	r16
     7a4:	1f 93       	push	r17
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	08 2f       	mov	r16, r24
     7ac:	19 2f       	mov	r17, r25
     7ae:	d6 2f       	mov	r29, r22
     7b0:	c7 2f       	mov	r28, r23
     7b2:	4a 01       	movw	r8, r20
	int crossCountX = 0, crossCountY = 0, flagY = 0, flagX = 0, endX = 5, endY = 0, endFlag = 0;
	int amountOfIntersects = readGrid(route);
     7b4:	ca 01       	movw	r24, r20
     7b6:	0e 94 b6 01 	call	0x36c	; 0x36c <readGrid>
     7ba:	3c 01       	movw	r6, r24
	driveRoute(route, 1, 0, amountOfIntersects);    //Drive to grid entrance
     7bc:	9c 01       	movw	r18, r24
     7be:	40 e0       	ldi	r20, 0x00	; 0
     7c0:	50 e0       	ldi	r21, 0x00	; 0
     7c2:	61 e0       	ldi	r22, 0x01	; 1
     7c4:	70 e0       	ldi	r23, 0x00	; 0
     7c6:	c4 01       	movw	r24, r8
     7c8:	0e 94 61 03 	call	0x6c2	; 0x6c2 <driveRoute>
	motorControl(70, 'R', 0.89);
     7cc:	2a e0       	ldi	r18, 0x0A	; 10
     7ce:	37 ed       	ldi	r19, 0xD7	; 215
     7d0:	43 e6       	ldi	r20, 0x63	; 99
     7d2:	5f e3       	ldi	r21, 0x3F	; 63
     7d4:	62 e5       	ldi	r22, 0x52	; 82
     7d6:	86 e4       	ldi	r24, 0x46	; 70
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <motorControl>
		    : "0" ( microseconds )
		    );  
}

// These are alternative aliases:
static inline void delay(unsigned int milliseconds) { delay_ms(milliseconds); }
     7de:	82 e3       	ldi	r24, 0x32	; 50
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	0e 94 3b 11 	call	0x2276	; 0x2276 <delay_ms>
	delay(50);
	motorControl(0, 'R', 0.89);
     7e6:	2a e0       	ldi	r18, 0x0A	; 10
     7e8:	37 ed       	ldi	r19, 0xD7	; 215
     7ea:	43 e6       	ldi	r20, 0x63	; 99
     7ec:	5f e3       	ldi	r21, 0x3F	; 63
     7ee:	62 e5       	ldi	r22, 0x52	; 82
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <motorControl>
     7f8:	c0 2e       	mov	r12, r16
     7fa:	d1 2e       	mov	r13, r17
     7fc:	ed 2e       	mov	r14, r29
     7fe:	fc 2e       	mov	r15, r28
	for(int i = 0; i < sizeOfOrder + 1; i ++){
     800:	a1 2c       	mov	r10, r1
     802:	b1 2c       	mov	r11, r1
	delay_ms(50);
	motorControl(0, direction, 0.89);
}

void fetchOrder(int OrderX[], int orderY[], int route[2][20]){
	int crossCountX = 0, crossCountY = 0, flagY = 0, flagX = 0, endX = 5, endY = 0, endFlag = 0;
     804:	00 e0       	ldi	r16, 0x00	; 0
     806:	10 e0       	ldi	r17, 0x00	; 0
	motorControl(70, 'R', 0.89);
	delay(50);
	motorControl(0, 'R', 0.89);
	for(int i = 0; i < sizeOfOrder + 1; i ++){
		if(i == sizeOfOrder){
			endFlag = 1;
     808:	44 24       	eor	r4, r4
     80a:	43 94       	inc	r4
     80c:	51 2c       	mov	r5, r1
     80e:	0c c0       	rjmp	.+24     	; 0x828 <fetchOrder+0x9e>
	driveRoute(route, 1, 0, amountOfIntersects);    //Drive to grid entrance
	motorControl(70, 'R', 0.89);
	delay(50);
	motorControl(0, 'R', 0.89);
	for(int i = 0; i < sizeOfOrder + 1; i ++){
		if(i == sizeOfOrder){
     810:	84 e0       	ldi	r24, 0x04	; 4
     812:	a8 16       	cp	r10, r24
     814:	b1 04       	cpc	r11, r1
     816:	11 f4       	brne	.+4      	; 0x81c <fetchOrder+0x92>
			endFlag = 1;
     818:	04 2d       	mov	r16, r4
     81a:	15 2d       	mov	r17, r5
     81c:	e2 e0       	ldi	r30, 0x02	; 2
     81e:	ce 0e       	add	r12, r30
     820:	d1 1c       	adc	r13, r1
     822:	f2 e0       	ldi	r31, 0x02	; 2
     824:	ef 0e       	add	r14, r31
     826:	f1 1c       	adc	r15, r1
     828:	e6 01       	movw	r28, r12
		}
		if((crossCountX > OrderX[i]) || (endFlag == 1 && (crossCountX > endX))){
     82a:	88 81       	ld	r24, Y
     82c:	99 81       	ldd	r25, Y+1	; 0x01
     82e:	99 23       	and	r25, r25
     830:	24 f4       	brge	.+8      	; 0x83a <fetchOrder+0xb0>
			turn('L');
     832:	8c e4       	ldi	r24, 0x4C	; 76
     834:	0e 94 9c 01 	call	0x338	; 0x338 <turn>
			flagX = 1;
     838:	13 c0       	rjmp	.+38     	; 0x860 <fetchOrder+0xd6>
		}
		else if((crossCountX < OrderX[i]) || (endFlag == 1 && (crossCountX < endX))){
     83a:	18 16       	cp	r1, r24
     83c:	19 06       	cpc	r1, r25
     83e:	1c f0       	brlt	.+6      	; 0x846 <fetchOrder+0xbc>
     840:	01 30       	cpi	r16, 0x01	; 1
     842:	11 05       	cpc	r17, r1
     844:	69 f4       	brne	.+26     	; 0x860 <fetchOrder+0xd6>
			turn('R');
     846:	82 e5       	ldi	r24, 0x52	; 82
     848:	0e 94 9c 01 	call	0x338	; 0x338 <turn>
     84c:	09 c0       	rjmp	.+18     	; 0x860 <fetchOrder+0xd6>
				//if intersection detected crossCountX++
			}
			else if(flagX == 2){
				//if intersection detected crossCountX--
			}
			motorControl(90, 'F', 0.89);
     84e:	2a e0       	ldi	r18, 0x0A	; 10
     850:	37 ed       	ldi	r19, 0xD7	; 215
     852:	43 e6       	ldi	r20, 0x63	; 99
     854:	5f e3       	ldi	r21, 0x3F	; 63
     856:	66 e4       	ldi	r22, 0x46	; 70
     858:	8a e5       	ldi	r24, 0x5A	; 90
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <motorControl>
		}
		else if((crossCountX < OrderX[i]) || (endFlag == 1 && (crossCountX < endX))){
			turn('R');
			flagX = 2;
		}
		while((crossCountX != OrderX[i]) || (endFlag == 1 && (crossCountX != endX))){
     860:	88 81       	ld	r24, Y
     862:	99 81       	ldd	r25, Y+1	; 0x01
     864:	89 2b       	or	r24, r25
     866:	99 f7       	brne	.-26     	; 0x84e <fetchOrder+0xc4>
     868:	01 30       	cpi	r16, 0x01	; 1
     86a:	11 05       	cpc	r17, r1
     86c:	81 f3       	breq	.-32     	; 0x84e <fetchOrder+0xc4>
				//if intersection detected crossCountX--
			}
			motorControl(90, 'F', 0.89);
			// if intersection detected crossCountX++
		}
		motorControl(0, 'F', 0.89);
     86e:	2a e0       	ldi	r18, 0x0A	; 10
     870:	37 ed       	ldi	r19, 0xD7	; 215
     872:	43 e6       	ldi	r20, 0x63	; 99
     874:	5f e3       	ldi	r21, 0x3F	; 63
     876:	66 e4       	ldi	r22, 0x46	; 70
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <motorControl>
     880:	e7 01       	movw	r28, r14
		if((crossCountY > orderY[i]) || (endFlag == 1 && (crossCountY > endY))){
     882:	88 81       	ld	r24, Y
     884:	99 81       	ldd	r25, Y+1	; 0x01
     886:	99 23       	and	r25, r25
     888:	44 f4       	brge	.+16     	; 0x89a <fetchOrder+0x110>
			turn('L');
     88a:	8c e4       	ldi	r24, 0x4C	; 76
     88c:	0e 94 9c 01 	call	0x338	; 0x338 <turn>
		}
		else if((crossCountY < orderY[i]) || (endFlag == 1 && (crossCountY < endY))){
			turn('R');
			flagY = 2;
		}
		while((crossCountY != orderY[i]) || (endFlag == 1 && (crossCountY != endY))){
     890:	88 81       	ld	r24, Y
     892:	99 81       	ldd	r25, Y+1	; 0x01
     894:	89 2b       	or	r24, r25
     896:	41 f4       	brne	.+16     	; 0x8a8 <fetchOrder+0x11e>
     898:	14 c0       	rjmp	.+40     	; 0x8c2 <fetchOrder+0x138>
		motorControl(0, 'F', 0.89);
		if((crossCountY > orderY[i]) || (endFlag == 1 && (crossCountY > endY))){
			turn('L');
			flagY = 1;
		}
		else if((crossCountY < orderY[i]) || (endFlag == 1 && (crossCountY < endY))){
     89a:	18 16       	cp	r1, r24
     89c:	19 06       	cpc	r1, r25
     89e:	c4 f7       	brge	.-16     	; 0x890 <fetchOrder+0x106>
			turn('R');
     8a0:	82 e5       	ldi	r24, 0x52	; 82
     8a2:	0e 94 9c 01 	call	0x338	; 0x338 <turn>
     8a6:	f4 cf       	rjmp	.-24     	; 0x890 <fetchOrder+0x106>
				//if intersection detected crossCountY++
			}
			else if(flagY == 2){
				//if intersection detected crossCountY--
			}
			motorControl(90, 'F', 0.89);
     8a8:	2a e0       	ldi	r18, 0x0A	; 10
     8aa:	37 ed       	ldi	r19, 0xD7	; 215
     8ac:	43 e6       	ldi	r20, 0x63	; 99
     8ae:	5f e3       	ldi	r21, 0x3F	; 63
     8b0:	66 e4       	ldi	r22, 0x46	; 70
     8b2:	8a e5       	ldi	r24, 0x5A	; 90
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <motorControl>
		}
		else if((crossCountY < orderY[i]) || (endFlag == 1 && (crossCountY < endY))){
			turn('R');
			flagY = 2;
		}
		while((crossCountY != orderY[i]) || (endFlag == 1 && (crossCountY != endY))){
     8ba:	88 81       	ld	r24, Y
     8bc:	99 81       	ldd	r25, Y+1	; 0x01
     8be:	89 2b       	or	r24, r25
     8c0:	99 f7       	brne	.-26     	; 0x8a8 <fetchOrder+0x11e>
			else if(flagY == 2){
				//if intersection detected crossCountY--
			}
			motorControl(90, 'F', 0.89);
		}
		play_from_program_space(PSTR(">g32>>c32"));
     8c2:	80 eb       	ldi	r24, 0xB0	; 176
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <play_from_program_space>
     8ca:	88 ec       	ldi	r24, 0xC8	; 200
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	0e 94 3b 11 	call	0x2276	; 0x2276 <delay_ms>
	int amountOfIntersects = readGrid(route);
	driveRoute(route, 1, 0, amountOfIntersects);    //Drive to grid entrance
	motorControl(70, 'R', 0.89);
	delay(50);
	motorControl(0, 'R', 0.89);
	for(int i = 0; i < sizeOfOrder + 1; i ++){
     8d2:	8f ef       	ldi	r24, 0xFF	; 255
     8d4:	a8 1a       	sub	r10, r24
     8d6:	b8 0a       	sbc	r11, r24
     8d8:	e5 e0       	ldi	r30, 0x05	; 5
     8da:	ae 16       	cp	r10, r30
     8dc:	b1 04       	cpc	r11, r1
     8de:	09 f0       	breq	.+2      	; 0x8e2 <fetchOrder+0x158>
     8e0:	97 cf       	rjmp	.-210    	; 0x810 <fetchOrder+0x86>
			motorControl(90, 'F', 0.89);
		}
		play_from_program_space(PSTR(">g32>>c32"));
		delay(200);
	}
	driveRoute(route, 1, 1, amountOfIntersects);    //Drive back to home
     8e2:	93 01       	movw	r18, r6
     8e4:	41 e0       	ldi	r20, 0x01	; 1
     8e6:	50 e0       	ldi	r21, 0x00	; 0
     8e8:	61 e0       	ldi	r22, 0x01	; 1
     8ea:	70 e0       	ldi	r23, 0x00	; 0
     8ec:	c4 01       	movw	r24, r8
     8ee:	0e 94 61 03 	call	0x6c2	; 0x6c2 <driveRoute>
	play_from_program_space(PSTR(">g32>>c32"));
     8f2:	86 ea       	ldi	r24, 0xA6	; 166
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <play_from_program_space>
}
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	1f 91       	pop	r17
     900:	0f 91       	pop	r16
     902:	ff 90       	pop	r15
     904:	ef 90       	pop	r14
     906:	df 90       	pop	r13
     908:	cf 90       	pop	r12
     90a:	bf 90       	pop	r11
     90c:	af 90       	pop	r10
     90e:	9f 90       	pop	r9
     910:	8f 90       	pop	r8
     912:	7f 90       	pop	r7
     914:	6f 90       	pop	r6
     916:	5f 90       	pop	r5
     918:	4f 90       	pop	r4
     91a:	08 95       	ret

0000091c <main>:

#include "Grid.h"
#include <pololu/3pi.h>
#include <avr/pgmspace.h>

int main(){
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
     920:	cd b7       	in	r28, 0x3d	; 61
     922:	de b7       	in	r29, 0x3e	; 62
     924:	c0 56       	subi	r28, 0x60	; 96
     926:	d1 09       	sbc	r29, r1
     928:	0f b6       	in	r0, 0x3f	; 63
     92a:	f8 94       	cli
     92c:	de bf       	out	0x3e, r29	; 62
     92e:	0f be       	out	0x3f, r0	; 63
     930:	cd bf       	out	0x3d, r28	; 61
	int amountOfIntersects = 0;
	int routes[2][20];
    amountOfIntersects = readGrid(routes);
     932:	ce 01       	movw	r24, r28
     934:	01 96       	adiw	r24, 0x01	; 1
     936:	0e 94 b6 01 	call	0x36c	; 0x36c <readGrid>
	int orderX[sizeOfOrder] = { 2, 5, 3, 4};    // replace with user input
     93a:	88 e0       	ldi	r24, 0x08	; 8
     93c:	e2 e1       	ldi	r30, 0x12	; 18
     93e:	f1 e0       	ldi	r31, 0x01	; 1
     940:	de 01       	movw	r26, r28
     942:	af 5a       	subi	r26, 0xAF	; 175
     944:	bf 4f       	sbci	r27, 0xFF	; 255
     946:	01 90       	ld	r0, Z+
     948:	0d 92       	st	X+, r0
     94a:	8a 95       	dec	r24
     94c:	e1 f7       	brne	.-8      	; 0x946 <main+0x2a>
	int orderY[sizeOfOrder] = { 3, 1, 4, 2};    // replace with user input
     94e:	88 e0       	ldi	r24, 0x08	; 8
     950:	ea e1       	ldi	r30, 0x1A	; 26
     952:	f1 e0       	ldi	r31, 0x01	; 1
     954:	de 01       	movw	r26, r28
     956:	a7 5a       	subi	r26, 0xA7	; 167
     958:	bf 4f       	sbci	r27, 0xFF	; 255
     95a:	01 90       	ld	r0, Z+
     95c:	0d 92       	st	X+, r0
     95e:	8a 95       	dec	r24
     960:	e1 f7       	brne	.-8      	; 0x95a <main+0x3e>
	sortOrder(orderX, orderY);
     962:	be 01       	movw	r22, r28
     964:	67 5a       	subi	r22, 0xA7	; 167
     966:	7f 4f       	sbci	r23, 0xFF	; 255
     968:	ce 01       	movw	r24, r28
     96a:	8f 5a       	subi	r24, 0xAF	; 175
     96c:	9f 4f       	sbci	r25, 0xFF	; 255
     96e:	0e 94 9e 00 	call	0x13c	; 0x13c <sortOrder>
	fetchOrder(orderX, orderY, routes);	
     972:	ae 01       	movw	r20, r28
     974:	4f 5f       	subi	r20, 0xFF	; 255
     976:	5f 4f       	sbci	r21, 0xFF	; 255
     978:	be 01       	movw	r22, r28
     97a:	67 5a       	subi	r22, 0xA7	; 167
     97c:	7f 4f       	sbci	r23, 0xFF	; 255
     97e:	ce 01       	movw	r24, r28
     980:	8f 5a       	subi	r24, 0xAF	; 175
     982:	9f 4f       	sbci	r25, 0xFF	; 255
     984:	0e 94 c5 03 	call	0x78a	; 0x78a <fetchOrder>
				
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	c0 5a       	subi	r28, 0xA0	; 160
     98e:	df 4f       	sbci	r29, 0xFF	; 255
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	f8 94       	cli
     994:	de bf       	out	0x3e, r29	; 62
     996:	0f be       	out	0x3f, r0	; 63
     998:	cd bf       	out	0x3d, r28	; 61
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	08 95       	ret

000009a0 <motorControl>:

int speedCurrent = 0;
int speedCurrentRight = 0;
int speedCurrentLeft = 0;

void motorControl(int speed, char direction, float aggressionFactor){
     9a0:	2f 92       	push	r2
     9a2:	3f 92       	push	r3
     9a4:	4f 92       	push	r4
     9a6:	5f 92       	push	r5
     9a8:	6f 92       	push	r6
     9aa:	7f 92       	push	r7
     9ac:	8f 92       	push	r8
     9ae:	9f 92       	push	r9
     9b0:	af 92       	push	r10
     9b2:	bf 92       	push	r11
     9b4:	cf 92       	push	r12
     9b6:	df 92       	push	r13
     9b8:	ef 92       	push	r14
     9ba:	ff 92       	push	r15
     9bc:	0f 93       	push	r16
     9be:	1f 93       	push	r17
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	cd b7       	in	r28, 0x3d	; 61
     9c6:	de b7       	in	r29, 0x3e	; 62
     9c8:	66 97       	sbiw	r28, 0x16	; 22
     9ca:	0f b6       	in	r0, 0x3f	; 63
     9cc:	f8 94       	cli
     9ce:	de bf       	out	0x3e, r29	; 62
     9d0:	0f be       	out	0x3f, r0	; 63
     9d2:	cd bf       	out	0x3d, r28	; 61
     9d4:	1c 01       	movw	r2, r24
     9d6:	29 01       	movw	r4, r18
     9d8:	3a 01       	movw	r6, r20
	int setSpeedRight = 0;
	int setSpeedLeft = 0;
	
	//directions direction;

	switch (direction){
     9da:	66 34       	cpi	r22, 0x46	; 70
     9dc:	61 f0       	breq	.+24     	; 0x9f6 <motorControl+0x56>
     9de:	20 f4       	brcc	.+8      	; 0x9e8 <motorControl+0x48>
     9e0:	62 34       	cpi	r22, 0x42	; 66
     9e2:	09 f4       	brne	.+2      	; 0x9e6 <motorControl+0x46>
     9e4:	9c c0       	rjmp	.+312    	; 0xb1e <motorControl+0x17e>
     9e6:	d9 c2       	rjmp	.+1458   	; 0xf9a <motorControl+0x5fa>
     9e8:	6c 34       	cpi	r22, 0x4C	; 76
     9ea:	09 f4       	brne	.+2      	; 0x9ee <motorControl+0x4e>
     9ec:	10 c2       	rjmp	.+1056   	; 0xe0e <motorControl+0x46e>
     9ee:	62 35       	cpi	r22, 0x52	; 82
     9f0:	09 f4       	brne	.+2      	; 0x9f4 <motorControl+0x54>
     9f2:	29 c1       	rjmp	.+594    	; 0xc46 <motorControl+0x2a6>
     9f4:	d2 c2       	rjmp	.+1444   	; 0xf9a <motorControl+0x5fa>
		case 'F':
		
		setSpeed = speed - speedCurrent;
     9f6:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <speedCurrent>
     9fa:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <speedCurrent+0x1>
     9fe:	91 01       	movw	r18, r2
     a00:	28 1b       	sub	r18, r24
     a02:	39 0b       	sbc	r19, r25
     a04:	45 e6       	ldi	r20, 0x65	; 101
     a06:	50 e0       	ldi	r21, 0x00	; 0
     a08:	5a 87       	std	Y+10, r21	; 0x0a
     a0a:	49 87       	std	Y+9, r20	; 0x09
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     a0c:	19 82       	std	Y+1, r1	; 0x01
     a0e:	1a 82       	std	Y+2, r1	; 0x02
     a10:	1b 82       	std	Y+3, r1	; 0x03
     a12:	1c 82       	std	Y+4, r1	; 0x04
			timerStart = get_ms();
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2*M_PI ) ) * sin ( 2* M_PI * accelerationCounter ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     a14:	03 2e       	mov	r0, r19
     a16:	00 0c       	add	r0, r0
     a18:	44 0b       	sbc	r20, r20
     a1a:	55 0b       	sbc	r21, r21
     a1c:	2d 83       	std	Y+5, r18	; 0x05
     a1e:	3e 83       	std	Y+6, r19	; 0x06
     a20:	4f 83       	std	Y+7, r20	; 0x07
     a22:	58 87       	std	Y+8, r21	; 0x08
		case 'F':
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     a24:	0e 94 73 11 	call	0x22e6	; 0x22e6 <get_ms>
     a28:	8b 01       	movw	r16, r22
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2*M_PI ) ) * sin ( 2* M_PI * accelerationCounter ) ) );
     a2a:	2b ed       	ldi	r18, 0xDB	; 219
     a2c:	3f e0       	ldi	r19, 0x0F	; 15
     a2e:	49 ec       	ldi	r20, 0xC9	; 201
     a30:	50 e4       	ldi	r21, 0x40	; 64
     a32:	69 81       	ldd	r22, Y+1	; 0x01
     a34:	7a 81       	ldd	r23, Y+2	; 0x02
     a36:	8b 81       	ldd	r24, Y+3	; 0x03
     a38:	9c 81       	ldd	r25, Y+4	; 0x04
     a3a:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__mulsf3>
     a3e:	0e 94 43 0b 	call	0x1686	; 0x1686 <sin>
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     a42:	23 e8       	ldi	r18, 0x83	; 131
     a44:	39 ef       	ldi	r19, 0xF9	; 249
     a46:	42 e2       	ldi	r20, 0x22	; 34
     a48:	5e e3       	ldi	r21, 0x3E	; 62
     a4a:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__mulsf3>
     a4e:	9b 01       	movw	r18, r22
     a50:	ac 01       	movw	r20, r24
     a52:	69 81       	ldd	r22, Y+1	; 0x01
     a54:	7a 81       	ldd	r23, Y+2	; 0x02
     a56:	8b 81       	ldd	r24, Y+3	; 0x03
     a58:	9c 81       	ldd	r25, Y+4	; 0x04
     a5a:	0e 94 77 09 	call	0x12ee	; 0x12ee <__subsf3>
     a5e:	4b 01       	movw	r8, r22
     a60:	5c 01       	movw	r10, r24
     a62:	6d 81       	ldd	r22, Y+5	; 0x05
     a64:	7e 81       	ldd	r23, Y+6	; 0x06
     a66:	8f 81       	ldd	r24, Y+7	; 0x07
     a68:	98 85       	ldd	r25, Y+8	; 0x08
     a6a:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatsisf>
     a6e:	9b 01       	movw	r18, r22
     a70:	ac 01       	movw	r20, r24
     a72:	c5 01       	movw	r24, r10
     a74:	b4 01       	movw	r22, r8
     a76:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__mulsf3>
     a7a:	4b 01       	movw	r8, r22
     a7c:	5c 01       	movw	r10, r24
     a7e:	60 91 a1 01 	lds	r22, 0x01A1	; 0x8001a1 <speedCurrent>
     a82:	70 91 a2 01 	lds	r23, 0x01A2	; 0x8001a2 <speedCurrent+0x1>
     a86:	07 2e       	mov	r0, r23
     a88:	00 0c       	add	r0, r0
     a8a:	88 0b       	sbc	r24, r24
     a8c:	99 0b       	sbc	r25, r25
     a8e:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatsisf>
     a92:	9b 01       	movw	r18, r22
     a94:	ac 01       	movw	r20, r24
     a96:	c5 01       	movw	r24, r10
     a98:	b4 01       	movw	r22, r8
     a9a:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__addsf3>
     a9e:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fixsfsi>
     aa2:	dc 01       	movw	r26, r24
     aa4:	cb 01       	movw	r24, r22
     aa6:	bc 01       	movw	r22, r24
     aa8:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     aac:	48 01       	movw	r8, r16
     aae:	11 0f       	add	r17, r17
     ab0:	aa 08       	sbc	r10, r10
     ab2:	bb 08       	sbc	r11, r11
     ab4:	0e 94 73 11 	call	0x22e6	; 0x22e6 <get_ms>
     ab8:	68 19       	sub	r22, r8
     aba:	79 09       	sbc	r23, r9
     abc:	8a 09       	sbc	r24, r10
     abe:	9b 09       	sbc	r25, r11
     ac0:	0e 94 1f 0a 	call	0x143e	; 0x143e <__floatunsisf>
     ac4:	6b 01       	movw	r12, r22
     ac6:	7c 01       	movw	r14, r24
     ac8:	20 e0       	ldi	r18, 0x00	; 0
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	40 e2       	ldi	r20, 0x20	; 32
     ace:	51 e4       	ldi	r21, 0x41	; 65
     ad0:	c3 01       	movw	r24, r6
     ad2:	b2 01       	movw	r22, r4
     ad4:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__mulsf3>
     ad8:	9b 01       	movw	r18, r22
     ada:	ac 01       	movw	r20, r24
     adc:	c7 01       	movw	r24, r14
     ade:	b6 01       	movw	r22, r12
     ae0:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__cmpsf2>
     ae4:	88 23       	and	r24, r24
     ae6:	34 f3       	brlt	.-52     	; 0xab4 <motorControl+0x114>
	switch (direction){
		case 'F':
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     ae8:	2a e0       	ldi	r18, 0x0A	; 10
     aea:	37 ed       	ldi	r19, 0xD7	; 215
     aec:	43 e2       	ldi	r20, 0x23	; 35
     aee:	5c e3       	ldi	r21, 0x3C	; 60
     af0:	69 81       	ldd	r22, Y+1	; 0x01
     af2:	7a 81       	ldd	r23, Y+2	; 0x02
     af4:	8b 81       	ldd	r24, Y+3	; 0x03
     af6:	9c 81       	ldd	r25, Y+4	; 0x04
     af8:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__addsf3>
     afc:	69 83       	std	Y+1, r22	; 0x01
     afe:	7a 83       	std	Y+2, r23	; 0x02
     b00:	8b 83       	std	Y+3, r24	; 0x03
     b02:	9c 83       	std	Y+4, r25	; 0x04
     b04:	a9 85       	ldd	r26, Y+9	; 0x09
     b06:	ba 85       	ldd	r27, Y+10	; 0x0a
     b08:	11 97       	sbiw	r26, 0x01	; 1
     b0a:	ba 87       	std	Y+10, r27	; 0x0a
     b0c:	a9 87       	std	Y+9, r26	; 0x09
     b0e:	ab 2b       	or	r26, r27
     b10:	09 f0       	breq	.+2      	; 0xb14 <motorControl+0x174>
     b12:	88 cf       	rjmp	.-240    	; 0xa24 <motorControl+0x84>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrent = speed;
     b14:	30 92 a2 01 	sts	0x01A2, r3	; 0x8001a2 <speedCurrent+0x1>
     b18:	20 92 a1 01 	sts	0x01A1, r2	; 0x8001a1 <speedCurrent>
		break;
     b1c:	44 c2       	rjmp	.+1160   	; 0xfa6 <motorControl+0x606>
		
		case 'B':
		
		setSpeed = speed - speedCurrent;
     b1e:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <speedCurrent>
     b22:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <speedCurrent+0x1>
     b26:	91 01       	movw	r18, r2
     b28:	28 1b       	sub	r18, r24
     b2a:	39 0b       	sbc	r19, r25
     b2c:	45 e6       	ldi	r20, 0x65	; 101
     b2e:	50 e0       	ldi	r21, 0x00	; 0
     b30:	5a 87       	std	Y+10, r21	; 0x0a
     b32:	49 87       	std	Y+9, r20	; 0x09
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     b34:	19 82       	std	Y+1, r1	; 0x01
     b36:	1a 82       	std	Y+2, r1	; 0x02
     b38:	1b 82       	std	Y+3, r1	; 0x03
     b3a:	1c 82       	std	Y+4, r1	; 0x04
			timerStart = get_ms();
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     b3c:	03 2e       	mov	r0, r19
     b3e:	00 0c       	add	r0, r0
     b40:	44 0b       	sbc	r20, r20
     b42:	55 0b       	sbc	r21, r21
     b44:	2d 83       	std	Y+5, r18	; 0x05
     b46:	3e 83       	std	Y+6, r19	; 0x06
     b48:	4f 83       	std	Y+7, r20	; 0x07
     b4a:	58 87       	std	Y+8, r21	; 0x08
		case 'B':
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     b4c:	0e 94 73 11 	call	0x22e6	; 0x22e6 <get_ms>
     b50:	8b 01       	movw	r16, r22
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) );
     b52:	2b ed       	ldi	r18, 0xDB	; 219
     b54:	3f e0       	ldi	r19, 0x0F	; 15
     b56:	49 ec       	ldi	r20, 0xC9	; 201
     b58:	50 e4       	ldi	r21, 0x40	; 64
     b5a:	69 81       	ldd	r22, Y+1	; 0x01
     b5c:	7a 81       	ldd	r23, Y+2	; 0x02
     b5e:	8b 81       	ldd	r24, Y+3	; 0x03
     b60:	9c 81       	ldd	r25, Y+4	; 0x04
     b62:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__mulsf3>
     b66:	0e 94 43 0b 	call	0x1686	; 0x1686 <sin>
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     b6a:	23 e8       	ldi	r18, 0x83	; 131
     b6c:	39 ef       	ldi	r19, 0xF9	; 249
     b6e:	42 e2       	ldi	r20, 0x22	; 34
     b70:	5e e3       	ldi	r21, 0x3E	; 62
     b72:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__mulsf3>
     b76:	9b 01       	movw	r18, r22
     b78:	ac 01       	movw	r20, r24
     b7a:	69 81       	ldd	r22, Y+1	; 0x01
     b7c:	7a 81       	ldd	r23, Y+2	; 0x02
     b7e:	8b 81       	ldd	r24, Y+3	; 0x03
     b80:	9c 81       	ldd	r25, Y+4	; 0x04
     b82:	0e 94 77 09 	call	0x12ee	; 0x12ee <__subsf3>
     b86:	4b 01       	movw	r8, r22
     b88:	5c 01       	movw	r10, r24
     b8a:	6d 81       	ldd	r22, Y+5	; 0x05
     b8c:	7e 81       	ldd	r23, Y+6	; 0x06
     b8e:	8f 81       	ldd	r24, Y+7	; 0x07
     b90:	98 85       	ldd	r25, Y+8	; 0x08
     b92:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatsisf>
     b96:	9b 01       	movw	r18, r22
     b98:	ac 01       	movw	r20, r24
     b9a:	c5 01       	movw	r24, r10
     b9c:	b4 01       	movw	r22, r8
     b9e:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__mulsf3>
     ba2:	4b 01       	movw	r8, r22
     ba4:	5c 01       	movw	r10, r24
     ba6:	60 91 a1 01 	lds	r22, 0x01A1	; 0x8001a1 <speedCurrent>
     baa:	70 91 a2 01 	lds	r23, 0x01A2	; 0x8001a2 <speedCurrent+0x1>
     bae:	07 2e       	mov	r0, r23
     bb0:	00 0c       	add	r0, r0
     bb2:	88 0b       	sbc	r24, r24
     bb4:	99 0b       	sbc	r25, r25
     bb6:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatsisf>
     bba:	9b 01       	movw	r18, r22
     bbc:	ac 01       	movw	r20, r24
     bbe:	c5 01       	movw	r24, r10
     bc0:	b4 01       	movw	r22, r8
     bc2:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__addsf3>
     bc6:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fixsfsi>
     bca:	dc 01       	movw	r26, r24
     bcc:	cb 01       	movw	r24, r22
     bce:	bc 01       	movw	r22, r24
     bd0:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     bd4:	48 01       	movw	r8, r16
     bd6:	11 0f       	add	r17, r17
     bd8:	aa 08       	sbc	r10, r10
     bda:	bb 08       	sbc	r11, r11
     bdc:	0e 94 73 11 	call	0x22e6	; 0x22e6 <get_ms>
     be0:	68 19       	sub	r22, r8
     be2:	79 09       	sbc	r23, r9
     be4:	8a 09       	sbc	r24, r10
     be6:	9b 09       	sbc	r25, r11
     be8:	0e 94 1f 0a 	call	0x143e	; 0x143e <__floatunsisf>
     bec:	6b 01       	movw	r12, r22
     bee:	7c 01       	movw	r14, r24
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	40 e2       	ldi	r20, 0x20	; 32
     bf6:	51 e4       	ldi	r21, 0x41	; 65
     bf8:	c3 01       	movw	r24, r6
     bfa:	b2 01       	movw	r22, r4
     bfc:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__mulsf3>
     c00:	9b 01       	movw	r18, r22
     c02:	ac 01       	movw	r20, r24
     c04:	c7 01       	movw	r24, r14
     c06:	b6 01       	movw	r22, r12
     c08:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__cmpsf2>
     c0c:	88 23       	and	r24, r24
     c0e:	34 f3       	brlt	.-52     	; 0xbdc <motorControl+0x23c>
		
		case 'B':
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     c10:	2a e0       	ldi	r18, 0x0A	; 10
     c12:	37 ed       	ldi	r19, 0xD7	; 215
     c14:	43 e2       	ldi	r20, 0x23	; 35
     c16:	5c e3       	ldi	r21, 0x3C	; 60
     c18:	69 81       	ldd	r22, Y+1	; 0x01
     c1a:	7a 81       	ldd	r23, Y+2	; 0x02
     c1c:	8b 81       	ldd	r24, Y+3	; 0x03
     c1e:	9c 81       	ldd	r25, Y+4	; 0x04
     c20:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__addsf3>
     c24:	69 83       	std	Y+1, r22	; 0x01
     c26:	7a 83       	std	Y+2, r23	; 0x02
     c28:	8b 83       	std	Y+3, r24	; 0x03
     c2a:	9c 83       	std	Y+4, r25	; 0x04
     c2c:	a9 85       	ldd	r26, Y+9	; 0x09
     c2e:	ba 85       	ldd	r27, Y+10	; 0x0a
     c30:	11 97       	sbiw	r26, 0x01	; 1
     c32:	ba 87       	std	Y+10, r27	; 0x0a
     c34:	a9 87       	std	Y+9, r26	; 0x09
     c36:	ab 2b       	or	r26, r27
     c38:	09 f0       	breq	.+2      	; 0xc3c <motorControl+0x29c>
     c3a:	88 cf       	rjmp	.-240    	; 0xb4c <motorControl+0x1ac>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrent = speed;
     c3c:	30 92 a2 01 	sts	0x01A2, r3	; 0x8001a2 <speedCurrent+0x1>
     c40:	20 92 a1 01 	sts	0x01A1, r2	; 0x8001a1 <speedCurrent>
		break;
     c44:	b0 c1       	rjmp	.+864    	; 0xfa6 <motorControl+0x606>

		case 'R':
		
		setSpeedRight = speed + speedCurrentRight;
     c46:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <speedCurrentRight>
     c4a:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <speedCurrentRight+0x1>
     c4e:	82 0d       	add	r24, r2
     c50:	93 1d       	adc	r25, r3
		setSpeedLeft = speed - speedCurrentLeft;
     c52:	20 91 9d 01 	lds	r18, 0x019D	; 0x80019d <speedCurrentLeft>
     c56:	30 91 9e 01 	lds	r19, 0x019E	; 0x80019e <speedCurrentLeft+0x1>
     c5a:	a1 01       	movw	r20, r2
     c5c:	42 1b       	sub	r20, r18
     c5e:	53 0b       	sbc	r21, r19
     c60:	9a 01       	movw	r18, r20
     c62:	05 e6       	ldi	r16, 0x65	; 101
     c64:	10 e0       	ldi	r17, 0x00	; 0
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     c66:	19 82       	std	Y+1, r1	; 0x01
     c68:	1a 82       	std	Y+2, r1	; 0x02
     c6a:	1b 82       	std	Y+3, r1	; 0x03
     c6c:	1c 82       	std	Y+4, r1	; 0x04
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			motorLeftSpeed = speedCurrent + (speedCurrentLeft + (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     c6e:	ac 01       	movw	r20, r24
     c70:	99 0f       	add	r25, r25
     c72:	66 0b       	sbc	r22, r22
     c74:	77 0b       	sbc	r23, r23
     c76:	4d 87       	std	Y+13, r20	; 0x0d
     c78:	5e 87       	std	Y+14, r21	; 0x0e
     c7a:	6f 87       	std	Y+15, r22	; 0x0f
     c7c:	78 8b       	std	Y+16, r23	; 0x10
     c7e:	b9 01       	movw	r22, r18
     c80:	33 0f       	add	r19, r19
     c82:	88 0b       	sbc	r24, r24
     c84:	99 0b       	sbc	r25, r25
     c86:	69 8b       	std	Y+17, r22	; 0x11
     c88:	7a 8b       	std	Y+18, r23	; 0x12
     c8a:	8b 8b       	std	Y+19, r24	; 0x13
     c8c:	9c 8b       	std	Y+20, r25	; 0x14
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     c8e:	0e 94 73 11 	call	0x22e6	; 0x22e6 <get_ms>
     c92:	7e 8b       	std	Y+22, r23	; 0x16
     c94:	6d 8b       	std	Y+21, r22	; 0x15
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
     c96:	60 91 a1 01 	lds	r22, 0x01A1	; 0x8001a1 <speedCurrent>
     c9a:	70 91 a2 01 	lds	r23, 0x01A2	; 0x8001a2 <speedCurrent+0x1>
     c9e:	07 2e       	mov	r0, r23
     ca0:	00 0c       	add	r0, r0
     ca2:	88 0b       	sbc	r24, r24
     ca4:	99 0b       	sbc	r25, r25
     ca6:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatsisf>
     caa:	6d 83       	std	Y+5, r22	; 0x05
     cac:	7e 83       	std	Y+6, r23	; 0x06
     cae:	8f 83       	std	Y+7, r24	; 0x07
     cb0:	98 87       	std	Y+8, r25	; 0x08
     cb2:	2b ed       	ldi	r18, 0xDB	; 219
     cb4:	3f e0       	ldi	r19, 0x0F	; 15
     cb6:	49 ec       	ldi	r20, 0xC9	; 201
     cb8:	50 e4       	ldi	r21, 0x40	; 64
     cba:	69 81       	ldd	r22, Y+1	; 0x01
     cbc:	7a 81       	ldd	r23, Y+2	; 0x02
     cbe:	8b 81       	ldd	r24, Y+3	; 0x03
     cc0:	9c 81       	ldd	r25, Y+4	; 0x04
     cc2:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__mulsf3>
     cc6:	0e 94 43 0b 	call	0x1686	; 0x1686 <sin>
     cca:	23 e8       	ldi	r18, 0x83	; 131
     ccc:	39 ef       	ldi	r19, 0xF9	; 249
     cce:	42 e2       	ldi	r20, 0x22	; 34
     cd0:	5e e3       	ldi	r21, 0x3E	; 62
     cd2:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__mulsf3>
     cd6:	29 81       	ldd	r18, Y+1	; 0x01
     cd8:	3a 81       	ldd	r19, Y+2	; 0x02
     cda:	4b 81       	ldd	r20, Y+3	; 0x03
     cdc:	5c 81       	ldd	r21, Y+4	; 0x04
     cde:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__addsf3>
     ce2:	69 87       	std	Y+9, r22	; 0x09
     ce4:	7a 87       	std	Y+10, r23	; 0x0a
     ce6:	8b 87       	std	Y+11, r24	; 0x0b
     ce8:	9c 87       	std	Y+12, r25	; 0x0c
			
			motorLeftSpeed = speedCurrent + (speedCurrentLeft + (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     cea:	60 91 9f 01 	lds	r22, 0x019F	; 0x80019f <speedCurrentRight>
     cee:	70 91 a0 01 	lds	r23, 0x01A0	; 0x8001a0 <speedCurrentRight+0x1>
     cf2:	07 2e       	mov	r0, r23
     cf4:	00 0c       	add	r0, r0
     cf6:	88 0b       	sbc	r24, r24
     cf8:	99 0b       	sbc	r25, r25
     cfa:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatsisf>
     cfe:	4b 01       	movw	r8, r22
     d00:	5c 01       	movw	r10, r24
     d02:	6d 85       	ldd	r22, Y+13	; 0x0d
     d04:	7e 85       	ldd	r23, Y+14	; 0x0e
     d06:	8f 85       	ldd	r24, Y+15	; 0x0f
     d08:	98 89       	ldd	r25, Y+16	; 0x10
     d0a:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatsisf>
     d0e:	29 85       	ldd	r18, Y+9	; 0x09
     d10:	3a 85       	ldd	r19, Y+10	; 0x0a
     d12:	4b 85       	ldd	r20, Y+11	; 0x0b
     d14:	5c 85       	ldd	r21, Y+12	; 0x0c
     d16:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__mulsf3>
     d1a:	9b 01       	movw	r18, r22
     d1c:	ac 01       	movw	r20, r24
     d1e:	c5 01       	movw	r24, r10
     d20:	b4 01       	movw	r22, r8
     d22:	0e 94 77 09 	call	0x12ee	; 0x12ee <__subsf3>
     d26:	2d 81       	ldd	r18, Y+5	; 0x05
     d28:	3e 81       	ldd	r19, Y+6	; 0x06
     d2a:	4f 81       	ldd	r20, Y+7	; 0x07
     d2c:	58 85       	ldd	r21, Y+8	; 0x08
     d2e:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__addsf3>
     d32:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fixsfsi>
     d36:	4b 01       	movw	r8, r22
     d38:	5c 01       	movw	r10, r24
     d3a:	60 91 9d 01 	lds	r22, 0x019D	; 0x80019d <speedCurrentLeft>
     d3e:	70 91 9e 01 	lds	r23, 0x019E	; 0x80019e <speedCurrentLeft+0x1>
     d42:	07 2e       	mov	r0, r23
     d44:	00 0c       	add	r0, r0
     d46:	88 0b       	sbc	r24, r24
     d48:	99 0b       	sbc	r25, r25
     d4a:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatsisf>
     d4e:	6b 01       	movw	r12, r22
     d50:	7c 01       	movw	r14, r24
     d52:	69 89       	ldd	r22, Y+17	; 0x11
     d54:	7a 89       	ldd	r23, Y+18	; 0x12
     d56:	8b 89       	ldd	r24, Y+19	; 0x13
     d58:	9c 89       	ldd	r25, Y+20	; 0x14
     d5a:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatsisf>
     d5e:	29 85       	ldd	r18, Y+9	; 0x09
     d60:	3a 85       	ldd	r19, Y+10	; 0x0a
     d62:	4b 85       	ldd	r20, Y+11	; 0x0b
     d64:	5c 85       	ldd	r21, Y+12	; 0x0c
     d66:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__mulsf3>
     d6a:	9b 01       	movw	r18, r22
     d6c:	ac 01       	movw	r20, r24
     d6e:	c7 01       	movw	r24, r14
     d70:	b6 01       	movw	r22, r12
     d72:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__addsf3>
     d76:	2d 81       	ldd	r18, Y+5	; 0x05
     d78:	3e 81       	ldd	r19, Y+6	; 0x06
     d7a:	4f 81       	ldd	r20, Y+7	; 0x07
     d7c:	58 85       	ldd	r21, Y+8	; 0x08
     d7e:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__addsf3>
     d82:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fixsfsi>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	b4 01       	movw	r22, r8
     d8c:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     d90:	8d 89       	ldd	r24, Y+21	; 0x15
     d92:	9e 89       	ldd	r25, Y+22	; 0x16
     d94:	4c 01       	movw	r8, r24
     d96:	99 0f       	add	r25, r25
     d98:	aa 08       	sbc	r10, r10
     d9a:	bb 08       	sbc	r11, r11
     d9c:	0e 94 73 11 	call	0x22e6	; 0x22e6 <get_ms>
     da0:	68 19       	sub	r22, r8
     da2:	79 09       	sbc	r23, r9
     da4:	8a 09       	sbc	r24, r10
     da6:	9b 09       	sbc	r25, r11
     da8:	0e 94 1f 0a 	call	0x143e	; 0x143e <__floatunsisf>
     dac:	6b 01       	movw	r12, r22
     dae:	7c 01       	movw	r14, r24
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	40 e2       	ldi	r20, 0x20	; 32
     db6:	51 e4       	ldi	r21, 0x41	; 65
     db8:	c3 01       	movw	r24, r6
     dba:	b2 01       	movw	r22, r4
     dbc:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__mulsf3>
     dc0:	9b 01       	movw	r18, r22
     dc2:	ac 01       	movw	r20, r24
     dc4:	c7 01       	movw	r24, r14
     dc6:	b6 01       	movw	r22, r12
     dc8:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__cmpsf2>
     dcc:	88 23       	and	r24, r24
     dce:	34 f3       	brlt	.-52     	; 0xd9c <motorControl+0x3fc>
		case 'R':
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     dd0:	2a e0       	ldi	r18, 0x0A	; 10
     dd2:	37 ed       	ldi	r19, 0xD7	; 215
     dd4:	43 e2       	ldi	r20, 0x23	; 35
     dd6:	5c e3       	ldi	r21, 0x3C	; 60
     dd8:	69 81       	ldd	r22, Y+1	; 0x01
     dda:	7a 81       	ldd	r23, Y+2	; 0x02
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	9c 81       	ldd	r25, Y+4	; 0x04
     de0:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__addsf3>
     de4:	69 83       	std	Y+1, r22	; 0x01
     de6:	7a 83       	std	Y+2, r23	; 0x02
     de8:	8b 83       	std	Y+3, r24	; 0x03
     dea:	9c 83       	std	Y+4, r25	; 0x04
     dec:	01 50       	subi	r16, 0x01	; 1
     dee:	11 09       	sbc	r17, r1
     df0:	09 f0       	breq	.+2      	; 0xdf4 <motorControl+0x454>
     df2:	4d cf       	rjmp	.-358    	; 0xc8e <motorControl+0x2ee>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = -speed;
     df4:	88 27       	eor	r24, r24
     df6:	99 27       	eor	r25, r25
     df8:	82 19       	sub	r24, r2
     dfa:	93 09       	sbc	r25, r3
     dfc:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <speedCurrentRight+0x1>
     e00:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <speedCurrentRight>
		speedCurrentLeft = speed;
     e04:	30 92 9e 01 	sts	0x019E, r3	; 0x80019e <speedCurrentLeft+0x1>
     e08:	20 92 9d 01 	sts	0x019D, r2	; 0x80019d <speedCurrentLeft>
		
		break;
     e0c:	cc c0       	rjmp	.+408    	; 0xfa6 <motorControl+0x606>

		case 'L':
		
		setSpeedRight = speed - speedCurrentRight;
     e0e:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <speedCurrentRight>
     e12:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <speedCurrentRight+0x1>
     e16:	91 01       	movw	r18, r2
     e18:	28 1b       	sub	r18, r24
     e1a:	39 0b       	sbc	r19, r25
		setSpeedLeft = speed + speedCurrentLeft;
     e1c:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <speedCurrentLeft>
     e20:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <speedCurrentLeft+0x1>
     e24:	82 0d       	add	r24, r2
     e26:	93 1d       	adc	r25, r3
     e28:	05 e6       	ldi	r16, 0x65	; 101
     e2a:	10 e0       	ldi	r17, 0x00	; 0
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     e2c:	19 82       	std	Y+1, r1	; 0x01
     e2e:	1a 82       	std	Y+2, r1	; 0x02
     e30:	1b 82       	std	Y+3, r1	; 0x03
     e32:	1c 82       	std	Y+4, r1	; 0x04
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
			
			motorLeftSpeed = speedCurrentLeft - (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ));
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     e34:	a9 01       	movw	r20, r18
     e36:	33 0f       	add	r19, r19
     e38:	66 0b       	sbc	r22, r22
     e3a:	77 0b       	sbc	r23, r23
     e3c:	49 87       	std	Y+9, r20	; 0x09
     e3e:	5a 87       	std	Y+10, r21	; 0x0a
     e40:	6b 87       	std	Y+11, r22	; 0x0b
     e42:	7c 87       	std	Y+12, r23	; 0x0c
     e44:	9c 01       	movw	r18, r24
     e46:	99 0f       	add	r25, r25
     e48:	44 0b       	sbc	r20, r20
     e4a:	55 0b       	sbc	r21, r21
     e4c:	2d 87       	std	Y+13, r18	; 0x0d
     e4e:	3e 87       	std	Y+14, r19	; 0x0e
     e50:	4f 87       	std	Y+15, r20	; 0x0f
     e52:	58 8b       	std	Y+16, r21	; 0x10
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     e54:	0e 94 73 11 	call	0x22e6	; 0x22e6 <get_ms>
     e58:	7a 8b       	std	Y+18, r23	; 0x12
     e5a:	69 8b       	std	Y+17, r22	; 0x11
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
     e5c:	2b ed       	ldi	r18, 0xDB	; 219
     e5e:	3f e0       	ldi	r19, 0x0F	; 15
     e60:	49 ec       	ldi	r20, 0xC9	; 201
     e62:	50 e4       	ldi	r21, 0x40	; 64
     e64:	69 81       	ldd	r22, Y+1	; 0x01
     e66:	7a 81       	ldd	r23, Y+2	; 0x02
     e68:	8b 81       	ldd	r24, Y+3	; 0x03
     e6a:	9c 81       	ldd	r25, Y+4	; 0x04
     e6c:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__mulsf3>
     e70:	0e 94 43 0b 	call	0x1686	; 0x1686 <sin>
     e74:	23 e8       	ldi	r18, 0x83	; 131
     e76:	39 ef       	ldi	r19, 0xF9	; 249
     e78:	42 e2       	ldi	r20, 0x22	; 34
     e7a:	5e e3       	ldi	r21, 0x3E	; 62
     e7c:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__mulsf3>
     e80:	29 81       	ldd	r18, Y+1	; 0x01
     e82:	3a 81       	ldd	r19, Y+2	; 0x02
     e84:	4b 81       	ldd	r20, Y+3	; 0x03
     e86:	5c 81       	ldd	r21, Y+4	; 0x04
     e88:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__addsf3>
     e8c:	4b 01       	movw	r8, r22
     e8e:	5c 01       	movw	r10, r24
			
			motorLeftSpeed = speedCurrentLeft - (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ));
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     e90:	60 91 9f 01 	lds	r22, 0x019F	; 0x80019f <speedCurrentRight>
     e94:	70 91 a0 01 	lds	r23, 0x01A0	; 0x8001a0 <speedCurrentRight+0x1>
     e98:	07 2e       	mov	r0, r23
     e9a:	00 0c       	add	r0, r0
     e9c:	88 0b       	sbc	r24, r24
     e9e:	99 0b       	sbc	r25, r25
     ea0:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatsisf>
     ea4:	6b 01       	movw	r12, r22
     ea6:	7c 01       	movw	r14, r24
     ea8:	69 85       	ldd	r22, Y+9	; 0x09
     eaa:	7a 85       	ldd	r23, Y+10	; 0x0a
     eac:	8b 85       	ldd	r24, Y+11	; 0x0b
     eae:	9c 85       	ldd	r25, Y+12	; 0x0c
     eb0:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatsisf>
     eb4:	a5 01       	movw	r20, r10
     eb6:	94 01       	movw	r18, r8
     eb8:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__mulsf3>
     ebc:	9b 01       	movw	r18, r22
     ebe:	ac 01       	movw	r20, r24
     ec0:	c7 01       	movw	r24, r14
     ec2:	b6 01       	movw	r22, r12
     ec4:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__addsf3>
     ec8:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fixsfsi>
     ecc:	6b 01       	movw	r12, r22
     ece:	7c 01       	movw	r14, r24
     ed0:	60 91 9d 01 	lds	r22, 0x019D	; 0x80019d <speedCurrentLeft>
     ed4:	70 91 9e 01 	lds	r23, 0x019E	; 0x80019e <speedCurrentLeft+0x1>
     ed8:	07 2e       	mov	r0, r23
     eda:	00 0c       	add	r0, r0
     edc:	88 0b       	sbc	r24, r24
     ede:	99 0b       	sbc	r25, r25
     ee0:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatsisf>
     ee4:	6d 83       	std	Y+5, r22	; 0x05
     ee6:	7e 83       	std	Y+6, r23	; 0x06
     ee8:	8f 83       	std	Y+7, r24	; 0x07
     eea:	98 87       	std	Y+8, r25	; 0x08
     eec:	6d 85       	ldd	r22, Y+13	; 0x0d
     eee:	7e 85       	ldd	r23, Y+14	; 0x0e
     ef0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ef2:	98 89       	ldd	r25, Y+16	; 0x10
     ef4:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatsisf>
     ef8:	a5 01       	movw	r20, r10
     efa:	94 01       	movw	r18, r8
     efc:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__mulsf3>
     f00:	9b 01       	movw	r18, r22
     f02:	ac 01       	movw	r20, r24
     f04:	6d 81       	ldd	r22, Y+5	; 0x05
     f06:	7e 81       	ldd	r23, Y+6	; 0x06
     f08:	8f 81       	ldd	r24, Y+7	; 0x07
     f0a:	98 85       	ldd	r25, Y+8	; 0x08
     f0c:	0e 94 77 09 	call	0x12ee	; 0x12ee <__subsf3>
     f10:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__fixsfsi>
     f14:	dc 01       	movw	r26, r24
     f16:	cb 01       	movw	r24, r22
     f18:	b6 01       	movw	r22, r12
     f1a:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     f1e:	49 89       	ldd	r20, Y+17	; 0x11
     f20:	5a 89       	ldd	r21, Y+18	; 0x12
     f22:	6a 01       	movw	r12, r20
     f24:	55 0f       	add	r21, r21
     f26:	ee 08       	sbc	r14, r14
     f28:	ff 08       	sbc	r15, r15
     f2a:	0e 94 73 11 	call	0x22e6	; 0x22e6 <get_ms>
     f2e:	6c 19       	sub	r22, r12
     f30:	7d 09       	sbc	r23, r13
     f32:	8e 09       	sbc	r24, r14
     f34:	9f 09       	sbc	r25, r15
     f36:	0e 94 1f 0a 	call	0x143e	; 0x143e <__floatunsisf>
     f3a:	4b 01       	movw	r8, r22
     f3c:	5c 01       	movw	r10, r24
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	40 e2       	ldi	r20, 0x20	; 32
     f44:	51 e4       	ldi	r21, 0x41	; 65
     f46:	c3 01       	movw	r24, r6
     f48:	b2 01       	movw	r22, r4
     f4a:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__mulsf3>
     f4e:	9b 01       	movw	r18, r22
     f50:	ac 01       	movw	r20, r24
     f52:	c5 01       	movw	r24, r10
     f54:	b4 01       	movw	r22, r8
     f56:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__cmpsf2>
     f5a:	88 23       	and	r24, r24
     f5c:	34 f3       	brlt	.-52     	; 0xf2a <motorControl+0x58a>
		case 'L':
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     f5e:	2a e0       	ldi	r18, 0x0A	; 10
     f60:	37 ed       	ldi	r19, 0xD7	; 215
     f62:	43 e2       	ldi	r20, 0x23	; 35
     f64:	5c e3       	ldi	r21, 0x3C	; 60
     f66:	69 81       	ldd	r22, Y+1	; 0x01
     f68:	7a 81       	ldd	r23, Y+2	; 0x02
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	9c 81       	ldd	r25, Y+4	; 0x04
     f6e:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__addsf3>
     f72:	69 83       	std	Y+1, r22	; 0x01
     f74:	7a 83       	std	Y+2, r23	; 0x02
     f76:	8b 83       	std	Y+3, r24	; 0x03
     f78:	9c 83       	std	Y+4, r25	; 0x04
     f7a:	01 50       	subi	r16, 0x01	; 1
     f7c:	11 09       	sbc	r17, r1
     f7e:	09 f0       	breq	.+2      	; 0xf82 <motorControl+0x5e2>
     f80:	69 cf       	rjmp	.-302    	; 0xe54 <motorControl+0x4b4>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = speed;
     f82:	30 92 a0 01 	sts	0x01A0, r3	; 0x8001a0 <speedCurrentRight+0x1>
     f86:	20 92 9f 01 	sts	0x019F, r2	; 0x80019f <speedCurrentRight>
		speedCurrentLeft = -speed;
     f8a:	31 94       	neg	r3
     f8c:	21 94       	neg	r2
     f8e:	31 08       	sbc	r3, r1
     f90:	30 92 9e 01 	sts	0x019E, r3	; 0x80019e <speedCurrentLeft+0x1>
     f94:	20 92 9d 01 	sts	0x019D, r2	; 0x80019d <speedCurrentLeft>
		break;
     f98:	06 c0       	rjmp	.+12     	; 0xfa6 <motorControl+0x606>
		
		default:
		set_motors(0,0);
     f9a:	60 e0       	ldi	r22, 0x00	; 0
     f9c:	70 e0       	ldi	r23, 0x00	; 0
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <set_motors>
		break;
	}
     fa6:	66 96       	adiw	r28, 0x16	; 22
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	f8 94       	cli
     fac:	de bf       	out	0x3e, r29	; 62
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	cd bf       	out	0x3d, r28	; 61
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	1f 91       	pop	r17
     fb8:	0f 91       	pop	r16
     fba:	ff 90       	pop	r15
     fbc:	ef 90       	pop	r14
     fbe:	df 90       	pop	r13
     fc0:	cf 90       	pop	r12
     fc2:	bf 90       	pop	r11
     fc4:	af 90       	pop	r10
     fc6:	9f 90       	pop	r9
     fc8:	8f 90       	pop	r8
     fca:	7f 90       	pop	r7
     fcc:	6f 90       	pop	r6
     fce:	5f 90       	pop	r5
     fd0:	4f 90       	pop	r4
     fd2:	3f 90       	pop	r3
     fd4:	2f 90       	pop	r2
     fd6:	08 95       	ret

00000fd8 <followLine>:

}


void followLine()
{
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
	
	unsigned int pos = read_line(sensors,IR_EMITTERS_ON);
     fdc:	61 e0       	ldi	r22, 0x01	; 1
     fde:	8e ef       	ldi	r24, 0xFE	; 254
     fe0:	91 e0       	ldi	r25, 0x01	; 1
     fe2:	0e 94 76 11 	call	0x22ec	; 0x22ec <read_line>
     fe6:	ec 01       	movw	r28, r24
	clear();
     fe8:	0e 94 3a 10 	call	0x2074	; 0x2074 <clear>
	
		if(pos < 1950)
     fec:	ce 39       	cpi	r28, 0x9E	; 158
     fee:	87 e0       	ldi	r24, 0x07	; 7
     ff0:	d8 07       	cpc	r29, r24
     ff2:	c8 f4       	brcc	.+50     	; 0x1026 <followLine+0x4e>
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
     ff4:	5f 9a       	sbi	0x0b, 7	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     ff6:	57 9a       	sbi	0x0a, 7	; 10
		{
			// We are far to the right of the line: turn left.
			green_led(1);

			if(pos < 1800)
     ff8:	c8 30       	cpi	r28, 0x08	; 8
     ffa:	d7 40       	sbci	r29, 0x07	; 7
     ffc:	50 f4       	brcc	.+20     	; 0x1012 <followLine+0x3a>
			{
				motorControl(SPEED, 'L' ,0.89);
     ffe:	2a e0       	ldi	r18, 0x0A	; 10
    1000:	37 ed       	ldi	r19, 0xD7	; 215
    1002:	43 e6       	ldi	r20, 0x63	; 99
    1004:	5f e3       	ldi	r21, 0x3F	; 63
    1006:	6c e4       	ldi	r22, 0x4C	; 76
    1008:	8c e3       	ldi	r24, 0x3C	; 60
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <motorControl>
    1010:	34 c0       	rjmp	.+104    	; 0x107a <followLine+0xa2>
			}
			else
			{
				motorControl(SLOW,'L', 0.89);
    1012:	2a e0       	ldi	r18, 0x0A	; 10
    1014:	37 ed       	ldi	r19, 0xD7	; 215
    1016:	43 e6       	ldi	r20, 0x63	; 99
    1018:	5f e3       	ldi	r21, 0x3F	; 63
    101a:	6c e4       	ldi	r22, 0x4C	; 76
    101c:	8d e2       	ldi	r24, 0x2D	; 45
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <motorControl>
    1024:	2a c0       	rjmp	.+84     	; 0x107a <followLine+0xa2>
			}
			
		}
		
		else if (pos > 2050)
    1026:	c3 30       	cpi	r28, 0x03	; 3
    1028:	88 e0       	ldi	r24, 0x08	; 8
    102a:	d8 07       	cpc	r29, r24
    102c:	c8 f0       	brcs	.+50     	; 0x1060 <followLine+0x88>
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
    102e:	59 9a       	sbi	0x0b, 1	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    1030:	51 9a       	sbi	0x0a, 1	; 10
		{
			// We are far to the left of the line: turn right.
			red_led(1);
			
			if(pos > 2200)
    1032:	c9 39       	cpi	r28, 0x99	; 153
    1034:	d8 40       	sbci	r29, 0x08	; 8
    1036:	50 f0       	brcs	.+20     	; 0x104c <followLine+0x74>
			{
				motorControl(SPEED,'R', 0.89);
    1038:	2a e0       	ldi	r18, 0x0A	; 10
    103a:	37 ed       	ldi	r19, 0xD7	; 215
    103c:	43 e6       	ldi	r20, 0x63	; 99
    103e:	5f e3       	ldi	r21, 0x3F	; 63
    1040:	62 e5       	ldi	r22, 0x52	; 82
    1042:	8c e3       	ldi	r24, 0x3C	; 60
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <motorControl>
    104a:	17 c0       	rjmp	.+46     	; 0x107a <followLine+0xa2>
			}
			else
			{
				motorControl(SLOW,'R', 0.89);
    104c:	2a e0       	ldi	r18, 0x0A	; 10
    104e:	37 ed       	ldi	r19, 0xD7	; 215
    1050:	43 e6       	ldi	r20, 0x63	; 99
    1052:	5f e3       	ldi	r21, 0x3F	; 63
    1054:	62 e5       	ldi	r22, 0x52	; 82
    1056:	8d e2       	ldi	r24, 0x2D	; 45
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <motorControl>
    105e:	0d c0       	rjmp	.+26     	; 0x107a <followLine+0xa2>
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
	else
		*(ioPin->portRegister) &= ~ioPin->bitmask;
    1060:	59 98       	cbi	0x0b, 1	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    1062:	51 9a       	sbi	0x0a, 1	; 10
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
	else
		*(ioPin->portRegister) &= ~ioPin->bitmask;
    1064:	5f 98       	cbi	0x0b, 7	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    1066:	57 9a       	sbi	0x0a, 7	; 10
		}
		else
		{
			red_led(0);
			green_led(0);
			motorControl(SPEED,'F', 0.89);
    1068:	2a e0       	ldi	r18, 0x0A	; 10
    106a:	37 ed       	ldi	r19, 0xD7	; 215
    106c:	43 e6       	ldi	r20, 0x63	; 99
    106e:	5f e3       	ldi	r21, 0x3F	; 63
    1070:	66 e4       	ldi	r22, 0x46	; 70
    1072:	8c e3       	ldi	r24, 0x3C	; 60
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <motorControl>
		
		}

	
}
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	08 95       	ret

00001080 <checkAfslag>:


int checkAfslag()
{
	read_line(sensors,IR_EMITTERS_ON);
    1080:	61 e0       	ldi	r22, 0x01	; 1
    1082:	8e ef       	ldi	r24, 0xFE	; 254
    1084:	91 e0       	ldi	r25, 0x01	; 1
    1086:	0e 94 76 11 	call	0x22ec	; 0x22ec <read_line>
	
	if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C < low_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
    108a:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <sensors>
    108e:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <sensors+0x1>
    1092:	89 30       	cpi	r24, 0x09	; 9
    1094:	27 e0       	ldi	r18, 0x07	; 7
    1096:	92 07       	cpc	r25, r18
    1098:	00 f1       	brcs	.+64     	; 0x10da <checkAfslag+0x5a>
    109a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <sensors+0x2>
    109e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <sensors+0x3>
    10a2:	28 3e       	cpi	r18, 0xE8	; 232
    10a4:	33 40       	sbci	r19, 0x03	; 3
    10a6:	c8 f4       	brcc	.+50     	; 0x10da <checkAfslag+0x5a>
    10a8:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <sensors+0x4>
    10ac:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <sensors+0x5>
    10b0:	28 3e       	cpi	r18, 0xE8	; 232
    10b2:	33 40       	sbci	r19, 0x03	; 3
    10b4:	08 f0       	brcs	.+2      	; 0x10b8 <checkAfslag+0x38>
    10b6:	fb c0       	rjmp	.+502    	; 0x12ae <checkAfslag+0x22e>
    10b8:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <sensors+0x6>
    10bc:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <sensors+0x7>
    10c0:	28 3e       	cpi	r18, 0xE8	; 232
    10c2:	33 40       	sbci	r19, 0x03	; 3
    10c4:	08 f0       	brcs	.+2      	; 0x10c8 <checkAfslag+0x48>
    10c6:	f3 c0       	rjmp	.+486    	; 0x12ae <checkAfslag+0x22e>
    10c8:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <sensors+0x8>
    10cc:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <sensors+0x9>
    10d0:	28 3e       	cpi	r18, 0xE8	; 232
    10d2:	33 40       	sbci	r19, 0x03	; 3
    10d4:	08 f4       	brcc	.+2      	; 0x10d8 <checkAfslag+0x58>
    10d6:	ca c0       	rjmp	.+404    	; 0x126c <checkAfslag+0x1ec>
    10d8:	ea c0       	rjmp	.+468    	; 0x12ae <checkAfslag+0x22e>
	{
		return LEFT; //afslag naar links
	}
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_C < low_range && SENSOR_C_R < low_range && SENSOR_R > high_range)
    10da:	88 3e       	cpi	r24, 0xE8	; 232
    10dc:	23 e0       	ldi	r18, 0x03	; 3
    10de:	92 07       	cpc	r25, r18
    10e0:	00 f5       	brcc	.+64     	; 0x1122 <checkAfslag+0xa2>
    10e2:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <sensors+0x2>
    10e6:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <sensors+0x3>
    10ea:	28 3e       	cpi	r18, 0xE8	; 232
    10ec:	33 40       	sbci	r19, 0x03	; 3
    10ee:	c8 f4       	brcc	.+50     	; 0x1122 <checkAfslag+0xa2>
    10f0:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <sensors+0x4>
    10f4:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <sensors+0x5>
    10f8:	28 3e       	cpi	r18, 0xE8	; 232
    10fa:	33 40       	sbci	r19, 0x03	; 3
    10fc:	08 f0       	brcs	.+2      	; 0x1100 <checkAfslag+0x80>
    10fe:	dd c0       	rjmp	.+442    	; 0x12ba <checkAfslag+0x23a>
    1100:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <sensors+0x6>
    1104:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <sensors+0x7>
    1108:	28 3e       	cpi	r18, 0xE8	; 232
    110a:	33 40       	sbci	r19, 0x03	; 3
    110c:	08 f0       	brcs	.+2      	; 0x1110 <checkAfslag+0x90>
    110e:	d5 c0       	rjmp	.+426    	; 0x12ba <checkAfslag+0x23a>
    1110:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <sensors+0x8>
    1114:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <sensors+0x9>
    1118:	29 30       	cpi	r18, 0x09	; 9
    111a:	37 40       	sbci	r19, 0x07	; 7
    111c:	08 f4       	brcc	.+2      	; 0x1120 <checkAfslag+0xa0>
    111e:	cd c0       	rjmp	.+410    	; 0x12ba <checkAfslag+0x23a>
    1120:	a8 c0       	rjmp	.+336    	; 0x1272 <checkAfslag+0x1f2>
	{
		return RIGHT; //afslag naar rechts
	}
	else if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_R > high_range)
    1122:	89 30       	cpi	r24, 0x09	; 9
    1124:	27 e0       	ldi	r18, 0x07	; 7
    1126:	92 07       	cpc	r25, r18
    1128:	08 f4       	brcc	.+2      	; 0x112c <checkAfslag+0xac>
    112a:	d3 c0       	rjmp	.+422    	; 0x12d2 <checkAfslag+0x252>
    112c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <sensors+0x2>
    1130:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <sensors+0x3>
    1134:	28 3e       	cpi	r18, 0xE8	; 232
    1136:	33 40       	sbci	r19, 0x03	; 3
    1138:	b0 f4       	brcc	.+44     	; 0x1166 <checkAfslag+0xe6>
    113a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <sensors+0x4>
    113e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <sensors+0x5>
    1142:	29 30       	cpi	r18, 0x09	; 9
    1144:	37 40       	sbci	r19, 0x07	; 7
    1146:	78 f0       	brcs	.+30     	; 0x1166 <checkAfslag+0xe6>
    1148:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <sensors+0x6>
    114c:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <sensors+0x7>
    1150:	28 3e       	cpi	r18, 0xE8	; 232
    1152:	33 40       	sbci	r19, 0x03	; 3
    1154:	40 f4       	brcc	.+16     	; 0x1166 <checkAfslag+0xe6>
    1156:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <sensors+0x8>
    115a:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <sensors+0x9>
    115e:	29 30       	cpi	r18, 0x09	; 9
    1160:	37 40       	sbci	r19, 0x07	; 7
    1162:	08 f0       	brcs	.+2      	; 0x1166 <checkAfslag+0xe6>
    1164:	89 c0       	rjmp	.+274    	; 0x1278 <checkAfslag+0x1f8>
	{
		return FOUR_WAY_JOINT; //kruispunt
	}
	else if(SENSOR_L > high_range && SENSOR_C_L > high_range && SENSOR_C_C < low_range && SENSOR_C_R > high_range && SENSOR_R > high_range)
    1166:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <sensors+0x2>
    116a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <sensors+0x3>
    116e:	29 30       	cpi	r18, 0x09	; 9
    1170:	47 e0       	ldi	r20, 0x07	; 7
    1172:	34 07       	cpc	r19, r20
    1174:	b0 f0       	brcs	.+44     	; 0x11a2 <checkAfslag+0x122>
    1176:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <sensors+0x4>
    117a:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <sensors+0x5>
    117e:	48 3e       	cpi	r20, 0xE8	; 232
    1180:	53 40       	sbci	r21, 0x03	; 3
    1182:	78 f4       	brcc	.+30     	; 0x11a2 <checkAfslag+0x122>
    1184:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <sensors+0x6>
    1188:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <sensors+0x7>
    118c:	49 30       	cpi	r20, 0x09	; 9
    118e:	57 40       	sbci	r21, 0x07	; 7
    1190:	40 f0       	brcs	.+16     	; 0x11a2 <checkAfslag+0x122>
    1192:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <sensors+0x8>
    1196:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <sensors+0x9>
    119a:	49 30       	cpi	r20, 0x09	; 9
    119c:	57 40       	sbci	r21, 0x07	; 7
    119e:	08 f0       	brcs	.+2      	; 0x11a2 <checkAfslag+0x122>
    11a0:	6e c0       	rjmp	.+220    	; 0x127e <checkAfslag+0x1fe>
	{
		return T_LEFT_RIGHT; //t-splitsing rechtdoor
	}
	else if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
    11a2:	28 3e       	cpi	r18, 0xE8	; 232
    11a4:	33 40       	sbci	r19, 0x03	; 3
    11a6:	c8 f4       	brcc	.+50     	; 0x11da <checkAfslag+0x15a>
    11a8:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <sensors+0x4>
    11ac:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <sensors+0x5>
    11b0:	29 30       	cpi	r18, 0x09	; 9
    11b2:	37 40       	sbci	r19, 0x07	; 7
    11b4:	08 f4       	brcc	.+2      	; 0x11b8 <checkAfslag+0x138>
    11b6:	95 c0       	rjmp	.+298    	; 0x12e2 <checkAfslag+0x262>
    11b8:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <sensors+0x6>
    11bc:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <sensors+0x7>
    11c0:	28 3e       	cpi	r18, 0xE8	; 232
    11c2:	33 40       	sbci	r19, 0x03	; 3
    11c4:	08 f0       	brcs	.+2      	; 0x11c8 <checkAfslag+0x148>
    11c6:	7f c0       	rjmp	.+254    	; 0x12c6 <checkAfslag+0x246>
    11c8:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <sensors+0x8>
    11cc:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <sensors+0x9>
    11d0:	28 3e       	cpi	r18, 0xE8	; 232
    11d2:	33 40       	sbci	r19, 0x03	; 3
    11d4:	08 f4       	brcc	.+2      	; 0x11d8 <checkAfslag+0x158>
    11d6:	56 c0       	rjmp	.+172    	; 0x1284 <checkAfslag+0x204>
    11d8:	76 c0       	rjmp	.+236    	; 0x12c6 <checkAfslag+0x246>
	{
		return T_LEFT; //t-splitsing linksaf
	}
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_C_R > high_range)
    11da:	88 3e       	cpi	r24, 0xE8	; 232
    11dc:	23 e0       	ldi	r18, 0x03	; 3
    11de:	92 07       	cpc	r25, r18
    11e0:	18 f5       	brcc	.+70     	; 0x1228 <checkAfslag+0x1a8>
    11e2:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <sensors+0x2>
    11e6:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <sensors+0x3>
    11ea:	28 3e       	cpi	r18, 0xE8	; 232
    11ec:	33 40       	sbci	r19, 0x03	; 3
    11ee:	e0 f4       	brcc	.+56     	; 0x1228 <checkAfslag+0x1a8>
	{
		return T_RIGHT; //t-splitsing rechtsaf
	}
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_C < low_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
    11f0:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <sensors+0x2>
    11f4:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <sensors+0x3>
    11f8:	28 3e       	cpi	r18, 0xE8	; 232
    11fa:	33 40       	sbci	r19, 0x03	; 3
    11fc:	a8 f4       	brcc	.+42     	; 0x1228 <checkAfslag+0x1a8>
    11fe:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <sensors+0x4>
    1202:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <sensors+0x5>
    1206:	28 3e       	cpi	r18, 0xE8	; 232
    1208:	33 40       	sbci	r19, 0x03	; 3
    120a:	70 f4       	brcc	.+28     	; 0x1228 <checkAfslag+0x1a8>
    120c:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <sensors+0x6>
    1210:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <sensors+0x7>
    1214:	28 3e       	cpi	r18, 0xE8	; 232
    1216:	33 40       	sbci	r19, 0x03	; 3
    1218:	38 f4       	brcc	.+14     	; 0x1228 <checkAfslag+0x1a8>
    121a:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <sensors+0x8>
    121e:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <sensors+0x9>
    1222:	28 3e       	cpi	r18, 0xE8	; 232
    1224:	33 40       	sbci	r19, 0x03	; 3
    1226:	88 f1       	brcs	.+98     	; 0x128a <checkAfslag+0x20a>
	{
		return DEAD_END; //doodlopende straat
	}
	else if(SENSOR_L > high_range && SENSOR_C_L > high_range && SENSOR_C_C > high_range && SENSOR_C_R > high_range && SENSOR_R > high_range)
    1228:	89 30       	cpi	r24, 0x09	; 9
    122a:	97 40       	sbci	r25, 0x07	; 7
    122c:	88 f1       	brcs	.+98     	; 0x1290 <checkAfslag+0x210>
    122e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <sensors+0x2>
    1232:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <sensors+0x3>
    1236:	89 30       	cpi	r24, 0x09	; 9
    1238:	97 40       	sbci	r25, 0x07	; 7
    123a:	68 f1       	brcs	.+90     	; 0x1296 <checkAfslag+0x216>
    123c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <sensors+0x4>
    1240:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <sensors+0x5>
    1244:	89 30       	cpi	r24, 0x09	; 9
    1246:	97 40       	sbci	r25, 0x07	; 7
    1248:	48 f1       	brcs	.+82     	; 0x129c <checkAfslag+0x21c>
    124a:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <sensors+0x6>
    124e:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <sensors+0x7>
    1252:	89 30       	cpi	r24, 0x09	; 9
    1254:	97 40       	sbci	r25, 0x07	; 7
    1256:	28 f1       	brcs	.+74     	; 0x12a2 <checkAfslag+0x222>
    1258:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <sensors+0x8>
    125c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <sensors+0x9>
    1260:	89 30       	cpi	r24, 0x09	; 9
    1262:	97 40       	sbci	r25, 0x07	; 7
    1264:	08 f1       	brcs	.+66     	; 0x12a8 <checkAfslag+0x228>
	{
		return GRID_HOME; //entry grid/home
    1266:	88 e0       	ldi	r24, 0x08	; 8
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	08 95       	ret
{
	read_line(sensors,IR_EMITTERS_ON);
	
	if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C < low_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
	{
		return LEFT; //afslag naar links
    126c:	82 e0       	ldi	r24, 0x02	; 2
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	08 95       	ret
	}
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_C < low_range && SENSOR_C_R < low_range && SENSOR_R > high_range)
	{
		return RIGHT; //afslag naar rechts
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	08 95       	ret
	}
	else if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_R > high_range)
	{
		return FOUR_WAY_JOINT; //kruispunt
    1278:	86 e0       	ldi	r24, 0x06	; 6
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	08 95       	ret
	}
	else if(SENSOR_L > high_range && SENSOR_C_L > high_range && SENSOR_C_C < low_range && SENSOR_C_R > high_range && SENSOR_R > high_range)
	{
		return T_LEFT_RIGHT; //t-splitsing rechtdoor
    127e:	83 e0       	ldi	r24, 0x03	; 3
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	08 95       	ret
	}
	else if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
	{
		return T_LEFT; //t-splitsing linksaf
    1284:	85 e0       	ldi	r24, 0x05	; 5
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	08 95       	ret
	{
		return T_RIGHT; //t-splitsing rechtsaf
	}
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_C < low_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
	{
		return DEAD_END; //doodlopende straat
    128a:	87 e0       	ldi	r24, 0x07	; 7
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	08 95       	ret
	}
	else if(SENSOR_L > high_range && SENSOR_C_L > high_range && SENSOR_C_C > high_range && SENSOR_C_R > high_range && SENSOR_R > high_range)
	{
		return GRID_HOME; //entry grid/home
	}
	return 0;
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	08 95       	ret
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	08 95       	ret
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	08 95       	ret
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	08 95       	ret
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	08 95       	ret
	
	if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C < low_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
	{
		return LEFT; //afslag naar links
	}
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_C < low_range && SENSOR_C_R < low_range && SENSOR_R > high_range)
    12ae:	88 3e       	cpi	r24, 0xE8	; 232
    12b0:	43 e0       	ldi	r20, 0x03	; 3
    12b2:	94 07       	cpc	r25, r20
    12b4:	08 f0       	brcs	.+2      	; 0x12b8 <checkAfslag+0x238>
    12b6:	3a cf       	rjmp	.-396    	; 0x112c <checkAfslag+0xac>
    12b8:	1b cf       	rjmp	.-458    	; 0x10f0 <checkAfslag+0x70>
	{
		return RIGHT; //afslag naar rechts
	}
	else if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_R > high_range)
    12ba:	89 30       	cpi	r24, 0x09	; 9
    12bc:	67 e0       	ldi	r22, 0x07	; 7
    12be:	96 07       	cpc	r25, r22
    12c0:	08 f0       	brcs	.+2      	; 0x12c4 <checkAfslag+0x244>
    12c2:	3b cf       	rjmp	.-394    	; 0x113a <checkAfslag+0xba>
    12c4:	06 c0       	rjmp	.+12     	; 0x12d2 <checkAfslag+0x252>
	}
	else if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
	{
		return T_LEFT; //t-splitsing linksaf
	}
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_C_R > high_range)
    12c6:	88 3e       	cpi	r24, 0xE8	; 232
    12c8:	23 e0       	ldi	r18, 0x03	; 3
    12ca:	92 07       	cpc	r25, r18
    12cc:	08 f4       	brcc	.+2      	; 0x12d0 <checkAfslag+0x250>
    12ce:	90 cf       	rjmp	.-224    	; 0x11f0 <checkAfslag+0x170>
    12d0:	ab cf       	rjmp	.-170    	; 0x1228 <checkAfslag+0x1a8>
    12d2:	88 3e       	cpi	r24, 0xE8	; 232
    12d4:	43 e0       	ldi	r20, 0x03	; 3
    12d6:	94 07       	cpc	r25, r20
    12d8:	08 f4       	brcc	.+2      	; 0x12dc <checkAfslag+0x25c>
    12da:	83 cf       	rjmp	.-250    	; 0x11e2 <checkAfslag+0x162>
	}
	else if(SENSOR_L > high_range && SENSOR_C_L > high_range && SENSOR_C_C > high_range && SENSOR_C_R > high_range && SENSOR_R > high_range)
	{
		return GRID_HOME; //entry grid/home
	}
	return 0;
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	08 95       	ret
	}
	else if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
	{
		return T_LEFT; //t-splitsing linksaf
	}
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_C_R > high_range)
    12e2:	88 3e       	cpi	r24, 0xE8	; 232
    12e4:	63 e0       	ldi	r22, 0x03	; 3
    12e6:	96 07       	cpc	r25, r22
    12e8:	08 f4       	brcc	.+2      	; 0x12ec <checkAfslag+0x26c>
    12ea:	82 cf       	rjmp	.-252    	; 0x11f0 <checkAfslag+0x170>
    12ec:	9d cf       	rjmp	.-198    	; 0x1228 <checkAfslag+0x1a8>

000012ee <__subsf3>:
    12ee:	50 58       	subi	r21, 0x80	; 128

000012f0 <__addsf3>:
    12f0:	bb 27       	eor	r27, r27
    12f2:	aa 27       	eor	r26, r26
    12f4:	0e 94 8f 09 	call	0x131e	; 0x131e <__addsf3x>
    12f8:	0c 94 97 0a 	jmp	0x152e	; 0x152e <__fp_round>
    12fc:	0e 94 89 0a 	call	0x1512	; 0x1512 <__fp_pscA>
    1300:	38 f0       	brcs	.+14     	; 0x1310 <__addsf3+0x20>
    1302:	0e 94 90 0a 	call	0x1520	; 0x1520 <__fp_pscB>
    1306:	20 f0       	brcs	.+8      	; 0x1310 <__addsf3+0x20>
    1308:	39 f4       	brne	.+14     	; 0x1318 <__addsf3+0x28>
    130a:	9f 3f       	cpi	r25, 0xFF	; 255
    130c:	19 f4       	brne	.+6      	; 0x1314 <__addsf3+0x24>
    130e:	26 f4       	brtc	.+8      	; 0x1318 <__addsf3+0x28>
    1310:	0c 94 86 0a 	jmp	0x150c	; 0x150c <__fp_nan>
    1314:	0e f4       	brtc	.+2      	; 0x1318 <__addsf3+0x28>
    1316:	e0 95       	com	r30
    1318:	e7 fb       	bst	r30, 7
    131a:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <__fp_inf>

0000131e <__addsf3x>:
    131e:	e9 2f       	mov	r30, r25
    1320:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__fp_split3>
    1324:	58 f3       	brcs	.-42     	; 0x12fc <__addsf3+0xc>
    1326:	ba 17       	cp	r27, r26
    1328:	62 07       	cpc	r22, r18
    132a:	73 07       	cpc	r23, r19
    132c:	84 07       	cpc	r24, r20
    132e:	95 07       	cpc	r25, r21
    1330:	20 f0       	brcs	.+8      	; 0x133a <__addsf3x+0x1c>
    1332:	79 f4       	brne	.+30     	; 0x1352 <__addsf3x+0x34>
    1334:	a6 f5       	brtc	.+104    	; 0x139e <__addsf3x+0x80>
    1336:	0c 94 ca 0a 	jmp	0x1594	; 0x1594 <__fp_zero>
    133a:	0e f4       	brtc	.+2      	; 0x133e <__addsf3x+0x20>
    133c:	e0 95       	com	r30
    133e:	0b 2e       	mov	r0, r27
    1340:	ba 2f       	mov	r27, r26
    1342:	a0 2d       	mov	r26, r0
    1344:	0b 01       	movw	r0, r22
    1346:	b9 01       	movw	r22, r18
    1348:	90 01       	movw	r18, r0
    134a:	0c 01       	movw	r0, r24
    134c:	ca 01       	movw	r24, r20
    134e:	a0 01       	movw	r20, r0
    1350:	11 24       	eor	r1, r1
    1352:	ff 27       	eor	r31, r31
    1354:	59 1b       	sub	r21, r25
    1356:	99 f0       	breq	.+38     	; 0x137e <__addsf3x+0x60>
    1358:	59 3f       	cpi	r21, 0xF9	; 249
    135a:	50 f4       	brcc	.+20     	; 0x1370 <__addsf3x+0x52>
    135c:	50 3e       	cpi	r21, 0xE0	; 224
    135e:	68 f1       	brcs	.+90     	; 0x13ba <__addsf3x+0x9c>
    1360:	1a 16       	cp	r1, r26
    1362:	f0 40       	sbci	r31, 0x00	; 0
    1364:	a2 2f       	mov	r26, r18
    1366:	23 2f       	mov	r18, r19
    1368:	34 2f       	mov	r19, r20
    136a:	44 27       	eor	r20, r20
    136c:	58 5f       	subi	r21, 0xF8	; 248
    136e:	f3 cf       	rjmp	.-26     	; 0x1356 <__addsf3x+0x38>
    1370:	46 95       	lsr	r20
    1372:	37 95       	ror	r19
    1374:	27 95       	ror	r18
    1376:	a7 95       	ror	r26
    1378:	f0 40       	sbci	r31, 0x00	; 0
    137a:	53 95       	inc	r21
    137c:	c9 f7       	brne	.-14     	; 0x1370 <__addsf3x+0x52>
    137e:	7e f4       	brtc	.+30     	; 0x139e <__addsf3x+0x80>
    1380:	1f 16       	cp	r1, r31
    1382:	ba 0b       	sbc	r27, r26
    1384:	62 0b       	sbc	r22, r18
    1386:	73 0b       	sbc	r23, r19
    1388:	84 0b       	sbc	r24, r20
    138a:	ba f0       	brmi	.+46     	; 0x13ba <__addsf3x+0x9c>
    138c:	91 50       	subi	r25, 0x01	; 1
    138e:	a1 f0       	breq	.+40     	; 0x13b8 <__addsf3x+0x9a>
    1390:	ff 0f       	add	r31, r31
    1392:	bb 1f       	adc	r27, r27
    1394:	66 1f       	adc	r22, r22
    1396:	77 1f       	adc	r23, r23
    1398:	88 1f       	adc	r24, r24
    139a:	c2 f7       	brpl	.-16     	; 0x138c <__addsf3x+0x6e>
    139c:	0e c0       	rjmp	.+28     	; 0x13ba <__addsf3x+0x9c>
    139e:	ba 0f       	add	r27, r26
    13a0:	62 1f       	adc	r22, r18
    13a2:	73 1f       	adc	r23, r19
    13a4:	84 1f       	adc	r24, r20
    13a6:	48 f4       	brcc	.+18     	; 0x13ba <__addsf3x+0x9c>
    13a8:	87 95       	ror	r24
    13aa:	77 95       	ror	r23
    13ac:	67 95       	ror	r22
    13ae:	b7 95       	ror	r27
    13b0:	f7 95       	ror	r31
    13b2:	9e 3f       	cpi	r25, 0xFE	; 254
    13b4:	08 f0       	brcs	.+2      	; 0x13b8 <__addsf3x+0x9a>
    13b6:	b0 cf       	rjmp	.-160    	; 0x1318 <__addsf3+0x28>
    13b8:	93 95       	inc	r25
    13ba:	88 0f       	add	r24, r24
    13bc:	08 f0       	brcs	.+2      	; 0x13c0 <__addsf3x+0xa2>
    13be:	99 27       	eor	r25, r25
    13c0:	ee 0f       	add	r30, r30
    13c2:	97 95       	ror	r25
    13c4:	87 95       	ror	r24
    13c6:	08 95       	ret

000013c8 <__cmpsf2>:
    13c8:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__fp_cmp>
    13cc:	08 f4       	brcc	.+2      	; 0x13d0 <__cmpsf2+0x8>
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	08 95       	ret

000013d2 <__fixsfsi>:
    13d2:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <__fixunssfsi>
    13d6:	68 94       	set
    13d8:	b1 11       	cpse	r27, r1
    13da:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <__fp_szero>
    13de:	08 95       	ret

000013e0 <__fixunssfsi>:
    13e0:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__fp_splitA>
    13e4:	88 f0       	brcs	.+34     	; 0x1408 <__fixunssfsi+0x28>
    13e6:	9f 57       	subi	r25, 0x7F	; 127
    13e8:	98 f0       	brcs	.+38     	; 0x1410 <__fixunssfsi+0x30>
    13ea:	b9 2f       	mov	r27, r25
    13ec:	99 27       	eor	r25, r25
    13ee:	b7 51       	subi	r27, 0x17	; 23
    13f0:	b0 f0       	brcs	.+44     	; 0x141e <__fixunssfsi+0x3e>
    13f2:	e1 f0       	breq	.+56     	; 0x142c <__fixunssfsi+0x4c>
    13f4:	66 0f       	add	r22, r22
    13f6:	77 1f       	adc	r23, r23
    13f8:	88 1f       	adc	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	1a f0       	brmi	.+6      	; 0x1404 <__fixunssfsi+0x24>
    13fe:	ba 95       	dec	r27
    1400:	c9 f7       	brne	.-14     	; 0x13f4 <__fixunssfsi+0x14>
    1402:	14 c0       	rjmp	.+40     	; 0x142c <__fixunssfsi+0x4c>
    1404:	b1 30       	cpi	r27, 0x01	; 1
    1406:	91 f0       	breq	.+36     	; 0x142c <__fixunssfsi+0x4c>
    1408:	0e 94 ca 0a 	call	0x1594	; 0x1594 <__fp_zero>
    140c:	b1 e0       	ldi	r27, 0x01	; 1
    140e:	08 95       	ret
    1410:	0c 94 ca 0a 	jmp	0x1594	; 0x1594 <__fp_zero>
    1414:	67 2f       	mov	r22, r23
    1416:	78 2f       	mov	r23, r24
    1418:	88 27       	eor	r24, r24
    141a:	b8 5f       	subi	r27, 0xF8	; 248
    141c:	39 f0       	breq	.+14     	; 0x142c <__fixunssfsi+0x4c>
    141e:	b9 3f       	cpi	r27, 0xF9	; 249
    1420:	cc f3       	brlt	.-14     	; 0x1414 <__fixunssfsi+0x34>
    1422:	86 95       	lsr	r24
    1424:	77 95       	ror	r23
    1426:	67 95       	ror	r22
    1428:	b3 95       	inc	r27
    142a:	d9 f7       	brne	.-10     	; 0x1422 <__fixunssfsi+0x42>
    142c:	3e f4       	brtc	.+14     	; 0x143c <__fixunssfsi+0x5c>
    142e:	90 95       	com	r25
    1430:	80 95       	com	r24
    1432:	70 95       	com	r23
    1434:	61 95       	neg	r22
    1436:	7f 4f       	sbci	r23, 0xFF	; 255
    1438:	8f 4f       	sbci	r24, 0xFF	; 255
    143a:	9f 4f       	sbci	r25, 0xFF	; 255
    143c:	08 95       	ret

0000143e <__floatunsisf>:
    143e:	e8 94       	clt
    1440:	09 c0       	rjmp	.+18     	; 0x1454 <__floatsisf+0x12>

00001442 <__floatsisf>:
    1442:	97 fb       	bst	r25, 7
    1444:	3e f4       	brtc	.+14     	; 0x1454 <__floatsisf+0x12>
    1446:	90 95       	com	r25
    1448:	80 95       	com	r24
    144a:	70 95       	com	r23
    144c:	61 95       	neg	r22
    144e:	7f 4f       	sbci	r23, 0xFF	; 255
    1450:	8f 4f       	sbci	r24, 0xFF	; 255
    1452:	9f 4f       	sbci	r25, 0xFF	; 255
    1454:	99 23       	and	r25, r25
    1456:	a9 f0       	breq	.+42     	; 0x1482 <__floatsisf+0x40>
    1458:	f9 2f       	mov	r31, r25
    145a:	96 e9       	ldi	r25, 0x96	; 150
    145c:	bb 27       	eor	r27, r27
    145e:	93 95       	inc	r25
    1460:	f6 95       	lsr	r31
    1462:	87 95       	ror	r24
    1464:	77 95       	ror	r23
    1466:	67 95       	ror	r22
    1468:	b7 95       	ror	r27
    146a:	f1 11       	cpse	r31, r1
    146c:	f8 cf       	rjmp	.-16     	; 0x145e <__floatsisf+0x1c>
    146e:	fa f4       	brpl	.+62     	; 0x14ae <__floatsisf+0x6c>
    1470:	bb 0f       	add	r27, r27
    1472:	11 f4       	brne	.+4      	; 0x1478 <__floatsisf+0x36>
    1474:	60 ff       	sbrs	r22, 0
    1476:	1b c0       	rjmp	.+54     	; 0x14ae <__floatsisf+0x6c>
    1478:	6f 5f       	subi	r22, 0xFF	; 255
    147a:	7f 4f       	sbci	r23, 0xFF	; 255
    147c:	8f 4f       	sbci	r24, 0xFF	; 255
    147e:	9f 4f       	sbci	r25, 0xFF	; 255
    1480:	16 c0       	rjmp	.+44     	; 0x14ae <__floatsisf+0x6c>
    1482:	88 23       	and	r24, r24
    1484:	11 f0       	breq	.+4      	; 0x148a <__floatsisf+0x48>
    1486:	96 e9       	ldi	r25, 0x96	; 150
    1488:	11 c0       	rjmp	.+34     	; 0x14ac <__floatsisf+0x6a>
    148a:	77 23       	and	r23, r23
    148c:	21 f0       	breq	.+8      	; 0x1496 <__floatsisf+0x54>
    148e:	9e e8       	ldi	r25, 0x8E	; 142
    1490:	87 2f       	mov	r24, r23
    1492:	76 2f       	mov	r23, r22
    1494:	05 c0       	rjmp	.+10     	; 0x14a0 <__floatsisf+0x5e>
    1496:	66 23       	and	r22, r22
    1498:	71 f0       	breq	.+28     	; 0x14b6 <__floatsisf+0x74>
    149a:	96 e8       	ldi	r25, 0x86	; 134
    149c:	86 2f       	mov	r24, r22
    149e:	70 e0       	ldi	r23, 0x00	; 0
    14a0:	60 e0       	ldi	r22, 0x00	; 0
    14a2:	2a f0       	brmi	.+10     	; 0x14ae <__floatsisf+0x6c>
    14a4:	9a 95       	dec	r25
    14a6:	66 0f       	add	r22, r22
    14a8:	77 1f       	adc	r23, r23
    14aa:	88 1f       	adc	r24, r24
    14ac:	da f7       	brpl	.-10     	; 0x14a4 <__floatsisf+0x62>
    14ae:	88 0f       	add	r24, r24
    14b0:	96 95       	lsr	r25
    14b2:	87 95       	ror	r24
    14b4:	97 f9       	bld	r25, 7
    14b6:	08 95       	ret

000014b8 <__fp_cmp>:
    14b8:	99 0f       	add	r25, r25
    14ba:	00 08       	sbc	r0, r0
    14bc:	55 0f       	add	r21, r21
    14be:	aa 0b       	sbc	r26, r26
    14c0:	e0 e8       	ldi	r30, 0x80	; 128
    14c2:	fe ef       	ldi	r31, 0xFE	; 254
    14c4:	16 16       	cp	r1, r22
    14c6:	17 06       	cpc	r1, r23
    14c8:	e8 07       	cpc	r30, r24
    14ca:	f9 07       	cpc	r31, r25
    14cc:	c0 f0       	brcs	.+48     	; 0x14fe <__fp_cmp+0x46>
    14ce:	12 16       	cp	r1, r18
    14d0:	13 06       	cpc	r1, r19
    14d2:	e4 07       	cpc	r30, r20
    14d4:	f5 07       	cpc	r31, r21
    14d6:	98 f0       	brcs	.+38     	; 0x14fe <__fp_cmp+0x46>
    14d8:	62 1b       	sub	r22, r18
    14da:	73 0b       	sbc	r23, r19
    14dc:	84 0b       	sbc	r24, r20
    14de:	95 0b       	sbc	r25, r21
    14e0:	39 f4       	brne	.+14     	; 0x14f0 <__fp_cmp+0x38>
    14e2:	0a 26       	eor	r0, r26
    14e4:	61 f0       	breq	.+24     	; 0x14fe <__fp_cmp+0x46>
    14e6:	23 2b       	or	r18, r19
    14e8:	24 2b       	or	r18, r20
    14ea:	25 2b       	or	r18, r21
    14ec:	21 f4       	brne	.+8      	; 0x14f6 <__fp_cmp+0x3e>
    14ee:	08 95       	ret
    14f0:	0a 26       	eor	r0, r26
    14f2:	09 f4       	brne	.+2      	; 0x14f6 <__fp_cmp+0x3e>
    14f4:	a1 40       	sbci	r26, 0x01	; 1
    14f6:	a6 95       	lsr	r26
    14f8:	8f ef       	ldi	r24, 0xFF	; 255
    14fa:	81 1d       	adc	r24, r1
    14fc:	81 1d       	adc	r24, r1
    14fe:	08 95       	ret

00001500 <__fp_inf>:
    1500:	97 f9       	bld	r25, 7
    1502:	9f 67       	ori	r25, 0x7F	; 127
    1504:	80 e8       	ldi	r24, 0x80	; 128
    1506:	70 e0       	ldi	r23, 0x00	; 0
    1508:	60 e0       	ldi	r22, 0x00	; 0
    150a:	08 95       	ret

0000150c <__fp_nan>:
    150c:	9f ef       	ldi	r25, 0xFF	; 255
    150e:	80 ec       	ldi	r24, 0xC0	; 192
    1510:	08 95       	ret

00001512 <__fp_pscA>:
    1512:	00 24       	eor	r0, r0
    1514:	0a 94       	dec	r0
    1516:	16 16       	cp	r1, r22
    1518:	17 06       	cpc	r1, r23
    151a:	18 06       	cpc	r1, r24
    151c:	09 06       	cpc	r0, r25
    151e:	08 95       	ret

00001520 <__fp_pscB>:
    1520:	00 24       	eor	r0, r0
    1522:	0a 94       	dec	r0
    1524:	12 16       	cp	r1, r18
    1526:	13 06       	cpc	r1, r19
    1528:	14 06       	cpc	r1, r20
    152a:	05 06       	cpc	r0, r21
    152c:	08 95       	ret

0000152e <__fp_round>:
    152e:	09 2e       	mov	r0, r25
    1530:	03 94       	inc	r0
    1532:	00 0c       	add	r0, r0
    1534:	11 f4       	brne	.+4      	; 0x153a <__fp_round+0xc>
    1536:	88 23       	and	r24, r24
    1538:	52 f0       	brmi	.+20     	; 0x154e <__fp_round+0x20>
    153a:	bb 0f       	add	r27, r27
    153c:	40 f4       	brcc	.+16     	; 0x154e <__fp_round+0x20>
    153e:	bf 2b       	or	r27, r31
    1540:	11 f4       	brne	.+4      	; 0x1546 <__fp_round+0x18>
    1542:	60 ff       	sbrs	r22, 0
    1544:	04 c0       	rjmp	.+8      	; 0x154e <__fp_round+0x20>
    1546:	6f 5f       	subi	r22, 0xFF	; 255
    1548:	7f 4f       	sbci	r23, 0xFF	; 255
    154a:	8f 4f       	sbci	r24, 0xFF	; 255
    154c:	9f 4f       	sbci	r25, 0xFF	; 255
    154e:	08 95       	ret

00001550 <__fp_split3>:
    1550:	57 fd       	sbrc	r21, 7
    1552:	90 58       	subi	r25, 0x80	; 128
    1554:	44 0f       	add	r20, r20
    1556:	55 1f       	adc	r21, r21
    1558:	59 f0       	breq	.+22     	; 0x1570 <__fp_splitA+0x10>
    155a:	5f 3f       	cpi	r21, 0xFF	; 255
    155c:	71 f0       	breq	.+28     	; 0x157a <__fp_splitA+0x1a>
    155e:	47 95       	ror	r20

00001560 <__fp_splitA>:
    1560:	88 0f       	add	r24, r24
    1562:	97 fb       	bst	r25, 7
    1564:	99 1f       	adc	r25, r25
    1566:	61 f0       	breq	.+24     	; 0x1580 <__fp_splitA+0x20>
    1568:	9f 3f       	cpi	r25, 0xFF	; 255
    156a:	79 f0       	breq	.+30     	; 0x158a <__fp_splitA+0x2a>
    156c:	87 95       	ror	r24
    156e:	08 95       	ret
    1570:	12 16       	cp	r1, r18
    1572:	13 06       	cpc	r1, r19
    1574:	14 06       	cpc	r1, r20
    1576:	55 1f       	adc	r21, r21
    1578:	f2 cf       	rjmp	.-28     	; 0x155e <__fp_split3+0xe>
    157a:	46 95       	lsr	r20
    157c:	f1 df       	rcall	.-30     	; 0x1560 <__fp_splitA>
    157e:	08 c0       	rjmp	.+16     	; 0x1590 <__fp_splitA+0x30>
    1580:	16 16       	cp	r1, r22
    1582:	17 06       	cpc	r1, r23
    1584:	18 06       	cpc	r1, r24
    1586:	99 1f       	adc	r25, r25
    1588:	f1 cf       	rjmp	.-30     	; 0x156c <__fp_splitA+0xc>
    158a:	86 95       	lsr	r24
    158c:	71 05       	cpc	r23, r1
    158e:	61 05       	cpc	r22, r1
    1590:	08 94       	sec
    1592:	08 95       	ret

00001594 <__fp_zero>:
    1594:	e8 94       	clt

00001596 <__fp_szero>:
    1596:	bb 27       	eor	r27, r27
    1598:	66 27       	eor	r22, r22
    159a:	77 27       	eor	r23, r23
    159c:	cb 01       	movw	r24, r22
    159e:	97 f9       	bld	r25, 7
    15a0:	08 95       	ret

000015a2 <__gesf2>:
    15a2:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__fp_cmp>
    15a6:	08 f4       	brcc	.+2      	; 0x15aa <__gesf2+0x8>
    15a8:	8f ef       	ldi	r24, 0xFF	; 255
    15aa:	08 95       	ret

000015ac <__mulsf3>:
    15ac:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__mulsf3x>
    15b0:	0c 94 97 0a 	jmp	0x152e	; 0x152e <__fp_round>
    15b4:	0e 94 89 0a 	call	0x1512	; 0x1512 <__fp_pscA>
    15b8:	38 f0       	brcs	.+14     	; 0x15c8 <__mulsf3+0x1c>
    15ba:	0e 94 90 0a 	call	0x1520	; 0x1520 <__fp_pscB>
    15be:	20 f0       	brcs	.+8      	; 0x15c8 <__mulsf3+0x1c>
    15c0:	95 23       	and	r25, r21
    15c2:	11 f0       	breq	.+4      	; 0x15c8 <__mulsf3+0x1c>
    15c4:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <__fp_inf>
    15c8:	0c 94 86 0a 	jmp	0x150c	; 0x150c <__fp_nan>
    15cc:	11 24       	eor	r1, r1
    15ce:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <__fp_szero>

000015d2 <__mulsf3x>:
    15d2:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__fp_split3>
    15d6:	70 f3       	brcs	.-36     	; 0x15b4 <__mulsf3+0x8>

000015d8 <__mulsf3_pse>:
    15d8:	95 9f       	mul	r25, r21
    15da:	c1 f3       	breq	.-16     	; 0x15cc <__mulsf3+0x20>
    15dc:	95 0f       	add	r25, r21
    15de:	50 e0       	ldi	r21, 0x00	; 0
    15e0:	55 1f       	adc	r21, r21
    15e2:	62 9f       	mul	r22, r18
    15e4:	f0 01       	movw	r30, r0
    15e6:	72 9f       	mul	r23, r18
    15e8:	bb 27       	eor	r27, r27
    15ea:	f0 0d       	add	r31, r0
    15ec:	b1 1d       	adc	r27, r1
    15ee:	63 9f       	mul	r22, r19
    15f0:	aa 27       	eor	r26, r26
    15f2:	f0 0d       	add	r31, r0
    15f4:	b1 1d       	adc	r27, r1
    15f6:	aa 1f       	adc	r26, r26
    15f8:	64 9f       	mul	r22, r20
    15fa:	66 27       	eor	r22, r22
    15fc:	b0 0d       	add	r27, r0
    15fe:	a1 1d       	adc	r26, r1
    1600:	66 1f       	adc	r22, r22
    1602:	82 9f       	mul	r24, r18
    1604:	22 27       	eor	r18, r18
    1606:	b0 0d       	add	r27, r0
    1608:	a1 1d       	adc	r26, r1
    160a:	62 1f       	adc	r22, r18
    160c:	73 9f       	mul	r23, r19
    160e:	b0 0d       	add	r27, r0
    1610:	a1 1d       	adc	r26, r1
    1612:	62 1f       	adc	r22, r18
    1614:	83 9f       	mul	r24, r19
    1616:	a0 0d       	add	r26, r0
    1618:	61 1d       	adc	r22, r1
    161a:	22 1f       	adc	r18, r18
    161c:	74 9f       	mul	r23, r20
    161e:	33 27       	eor	r19, r19
    1620:	a0 0d       	add	r26, r0
    1622:	61 1d       	adc	r22, r1
    1624:	23 1f       	adc	r18, r19
    1626:	84 9f       	mul	r24, r20
    1628:	60 0d       	add	r22, r0
    162a:	21 1d       	adc	r18, r1
    162c:	82 2f       	mov	r24, r18
    162e:	76 2f       	mov	r23, r22
    1630:	6a 2f       	mov	r22, r26
    1632:	11 24       	eor	r1, r1
    1634:	9f 57       	subi	r25, 0x7F	; 127
    1636:	50 40       	sbci	r21, 0x00	; 0
    1638:	9a f0       	brmi	.+38     	; 0x1660 <__mulsf3_pse+0x88>
    163a:	f1 f0       	breq	.+60     	; 0x1678 <__mulsf3_pse+0xa0>
    163c:	88 23       	and	r24, r24
    163e:	4a f0       	brmi	.+18     	; 0x1652 <__mulsf3_pse+0x7a>
    1640:	ee 0f       	add	r30, r30
    1642:	ff 1f       	adc	r31, r31
    1644:	bb 1f       	adc	r27, r27
    1646:	66 1f       	adc	r22, r22
    1648:	77 1f       	adc	r23, r23
    164a:	88 1f       	adc	r24, r24
    164c:	91 50       	subi	r25, 0x01	; 1
    164e:	50 40       	sbci	r21, 0x00	; 0
    1650:	a9 f7       	brne	.-22     	; 0x163c <__mulsf3_pse+0x64>
    1652:	9e 3f       	cpi	r25, 0xFE	; 254
    1654:	51 05       	cpc	r21, r1
    1656:	80 f0       	brcs	.+32     	; 0x1678 <__mulsf3_pse+0xa0>
    1658:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <__fp_inf>
    165c:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <__fp_szero>
    1660:	5f 3f       	cpi	r21, 0xFF	; 255
    1662:	e4 f3       	brlt	.-8      	; 0x165c <__mulsf3_pse+0x84>
    1664:	98 3e       	cpi	r25, 0xE8	; 232
    1666:	d4 f3       	brlt	.-12     	; 0x165c <__mulsf3_pse+0x84>
    1668:	86 95       	lsr	r24
    166a:	77 95       	ror	r23
    166c:	67 95       	ror	r22
    166e:	b7 95       	ror	r27
    1670:	f7 95       	ror	r31
    1672:	e7 95       	ror	r30
    1674:	9f 5f       	subi	r25, 0xFF	; 255
    1676:	c1 f7       	brne	.-16     	; 0x1668 <__mulsf3_pse+0x90>
    1678:	fe 2b       	or	r31, r30
    167a:	88 0f       	add	r24, r24
    167c:	91 1d       	adc	r25, r1
    167e:	96 95       	lsr	r25
    1680:	87 95       	ror	r24
    1682:	97 f9       	bld	r25, 7
    1684:	08 95       	ret

00001686 <sin>:
    1686:	9f 93       	push	r25
    1688:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__fp_rempio2>
    168c:	0f 90       	pop	r0
    168e:	07 fc       	sbrc	r0, 7
    1690:	ee 5f       	subi	r30, 0xFE	; 254
    1692:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__fp_sinus>
    1696:	19 f4       	brne	.+6      	; 0x169e <sin+0x18>
    1698:	16 f4       	brtc	.+4      	; 0x169e <sin+0x18>
    169a:	0c 94 86 0a 	jmp	0x150c	; 0x150c <__fp_nan>
    169e:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <__fp_mpack>

000016a2 <sqrt>:
    16a2:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__fp_splitA>
    16a6:	b8 f3       	brcs	.-18     	; 0x1696 <sin+0x10>
    16a8:	99 23       	and	r25, r25
    16aa:	c9 f3       	breq	.-14     	; 0x169e <sin+0x18>
    16ac:	b6 f3       	brts	.-20     	; 0x169a <sin+0x14>
    16ae:	9f 57       	subi	r25, 0x7F	; 127
    16b0:	55 0b       	sbc	r21, r21
    16b2:	87 ff       	sbrs	r24, 7
    16b4:	0e 94 9f 0b 	call	0x173e	; 0x173e <__fp_norm2>
    16b8:	00 24       	eor	r0, r0
    16ba:	a0 e6       	ldi	r26, 0x60	; 96
    16bc:	40 ea       	ldi	r20, 0xA0	; 160
    16be:	90 01       	movw	r18, r0
    16c0:	80 58       	subi	r24, 0x80	; 128
    16c2:	56 95       	lsr	r21
    16c4:	97 95       	ror	r25
    16c6:	28 f4       	brcc	.+10     	; 0x16d2 <sqrt+0x30>
    16c8:	80 5c       	subi	r24, 0xC0	; 192
    16ca:	66 0f       	add	r22, r22
    16cc:	77 1f       	adc	r23, r23
    16ce:	88 1f       	adc	r24, r24
    16d0:	20 f0       	brcs	.+8      	; 0x16da <sqrt+0x38>
    16d2:	26 17       	cp	r18, r22
    16d4:	37 07       	cpc	r19, r23
    16d6:	48 07       	cpc	r20, r24
    16d8:	30 f4       	brcc	.+12     	; 0x16e6 <sqrt+0x44>
    16da:	62 1b       	sub	r22, r18
    16dc:	73 0b       	sbc	r23, r19
    16de:	84 0b       	sbc	r24, r20
    16e0:	20 29       	or	r18, r0
    16e2:	31 29       	or	r19, r1
    16e4:	4a 2b       	or	r20, r26
    16e6:	a6 95       	lsr	r26
    16e8:	17 94       	ror	r1
    16ea:	07 94       	ror	r0
    16ec:	20 25       	eor	r18, r0
    16ee:	31 25       	eor	r19, r1
    16f0:	4a 27       	eor	r20, r26
    16f2:	58 f7       	brcc	.-42     	; 0x16ca <sqrt+0x28>
    16f4:	66 0f       	add	r22, r22
    16f6:	77 1f       	adc	r23, r23
    16f8:	88 1f       	adc	r24, r24
    16fa:	20 f0       	brcs	.+8      	; 0x1704 <sqrt+0x62>
    16fc:	26 17       	cp	r18, r22
    16fe:	37 07       	cpc	r19, r23
    1700:	48 07       	cpc	r20, r24
    1702:	30 f4       	brcc	.+12     	; 0x1710 <sqrt+0x6e>
    1704:	62 0b       	sbc	r22, r18
    1706:	73 0b       	sbc	r23, r19
    1708:	84 0b       	sbc	r24, r20
    170a:	20 0d       	add	r18, r0
    170c:	31 1d       	adc	r19, r1
    170e:	41 1d       	adc	r20, r1
    1710:	a0 95       	com	r26
    1712:	81 f7       	brne	.-32     	; 0x16f4 <sqrt+0x52>
    1714:	b9 01       	movw	r22, r18
    1716:	84 2f       	mov	r24, r20
    1718:	91 58       	subi	r25, 0x81	; 129
    171a:	88 0f       	add	r24, r24
    171c:	96 95       	lsr	r25
    171e:	87 95       	ror	r24
    1720:	08 95       	ret

00001722 <__fp_mpack>:
    1722:	9f 3f       	cpi	r25, 0xFF	; 255
    1724:	31 f0       	breq	.+12     	; 0x1732 <__fp_mpack_finite+0xc>

00001726 <__fp_mpack_finite>:
    1726:	91 50       	subi	r25, 0x01	; 1
    1728:	20 f4       	brcc	.+8      	; 0x1732 <__fp_mpack_finite+0xc>
    172a:	87 95       	ror	r24
    172c:	77 95       	ror	r23
    172e:	67 95       	ror	r22
    1730:	b7 95       	ror	r27
    1732:	88 0f       	add	r24, r24
    1734:	91 1d       	adc	r25, r1
    1736:	96 95       	lsr	r25
    1738:	87 95       	ror	r24
    173a:	97 f9       	bld	r25, 7
    173c:	08 95       	ret

0000173e <__fp_norm2>:
    173e:	91 50       	subi	r25, 0x01	; 1
    1740:	50 40       	sbci	r21, 0x00	; 0
    1742:	66 0f       	add	r22, r22
    1744:	77 1f       	adc	r23, r23
    1746:	88 1f       	adc	r24, r24
    1748:	d2 f7       	brpl	.-12     	; 0x173e <__fp_norm2>
    174a:	08 95       	ret
    174c:	0c 94 86 0a 	jmp	0x150c	; 0x150c <__fp_nan>

00001750 <__fp_rempio2>:
    1750:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__fp_splitA>
    1754:	d8 f3       	brcs	.-10     	; 0x174c <__fp_norm2+0xe>
    1756:	e8 94       	clt
    1758:	e0 e0       	ldi	r30, 0x00	; 0
    175a:	bb 27       	eor	r27, r27
    175c:	9f 57       	subi	r25, 0x7F	; 127
    175e:	f0 f0       	brcs	.+60     	; 0x179c <__fp_rempio2+0x4c>
    1760:	2a ed       	ldi	r18, 0xDA	; 218
    1762:	3f e0       	ldi	r19, 0x0F	; 15
    1764:	49 ec       	ldi	r20, 0xC9	; 201
    1766:	06 c0       	rjmp	.+12     	; 0x1774 <__fp_rempio2+0x24>
    1768:	ee 0f       	add	r30, r30
    176a:	bb 0f       	add	r27, r27
    176c:	66 1f       	adc	r22, r22
    176e:	77 1f       	adc	r23, r23
    1770:	88 1f       	adc	r24, r24
    1772:	28 f0       	brcs	.+10     	; 0x177e <__fp_rempio2+0x2e>
    1774:	b2 3a       	cpi	r27, 0xA2	; 162
    1776:	62 07       	cpc	r22, r18
    1778:	73 07       	cpc	r23, r19
    177a:	84 07       	cpc	r24, r20
    177c:	28 f0       	brcs	.+10     	; 0x1788 <__fp_rempio2+0x38>
    177e:	b2 5a       	subi	r27, 0xA2	; 162
    1780:	62 0b       	sbc	r22, r18
    1782:	73 0b       	sbc	r23, r19
    1784:	84 0b       	sbc	r24, r20
    1786:	e3 95       	inc	r30
    1788:	9a 95       	dec	r25
    178a:	72 f7       	brpl	.-36     	; 0x1768 <__fp_rempio2+0x18>
    178c:	80 38       	cpi	r24, 0x80	; 128
    178e:	30 f4       	brcc	.+12     	; 0x179c <__fp_rempio2+0x4c>
    1790:	9a 95       	dec	r25
    1792:	bb 0f       	add	r27, r27
    1794:	66 1f       	adc	r22, r22
    1796:	77 1f       	adc	r23, r23
    1798:	88 1f       	adc	r24, r24
    179a:	d2 f7       	brpl	.-12     	; 0x1790 <__fp_rempio2+0x40>
    179c:	90 48       	sbci	r25, 0x80	; 128
    179e:	0c 94 93 0b 	jmp	0x1726	; 0x1726 <__fp_mpack_finite>

000017a2 <__fp_sinus>:
    17a2:	ef 93       	push	r30
    17a4:	e0 ff       	sbrs	r30, 0
    17a6:	07 c0       	rjmp	.+14     	; 0x17b6 <__fp_sinus+0x14>
    17a8:	a2 ea       	ldi	r26, 0xA2	; 162
    17aa:	2a ed       	ldi	r18, 0xDA	; 218
    17ac:	3f e0       	ldi	r19, 0x0F	; 15
    17ae:	49 ec       	ldi	r20, 0xC9	; 201
    17b0:	5f eb       	ldi	r21, 0xBF	; 191
    17b2:	0e 94 8f 09 	call	0x131e	; 0x131e <__addsf3x>
    17b6:	0e 94 97 0a 	call	0x152e	; 0x152e <__fp_round>
    17ba:	0f 90       	pop	r0
    17bc:	03 94       	inc	r0
    17be:	01 fc       	sbrc	r0, 1
    17c0:	90 58       	subi	r25, 0x80	; 128
    17c2:	e8 e8       	ldi	r30, 0x88	; 136
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	0c 94 e5 0b 	jmp	0x17ca	; 0x17ca <__fp_powsodd>

000017ca <__fp_powsodd>:
    17ca:	9f 93       	push	r25
    17cc:	8f 93       	push	r24
    17ce:	7f 93       	push	r23
    17d0:	6f 93       	push	r22
    17d2:	ff 93       	push	r31
    17d4:	ef 93       	push	r30
    17d6:	9b 01       	movw	r18, r22
    17d8:	ac 01       	movw	r20, r24
    17da:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__mulsf3>
    17de:	ef 91       	pop	r30
    17e0:	ff 91       	pop	r31
    17e2:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__fp_powser>
    17e6:	2f 91       	pop	r18
    17e8:	3f 91       	pop	r19
    17ea:	4f 91       	pop	r20
    17ec:	5f 91       	pop	r21
    17ee:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <__mulsf3>

000017f2 <__fp_powser>:
    17f2:	df 93       	push	r29
    17f4:	cf 93       	push	r28
    17f6:	1f 93       	push	r17
    17f8:	0f 93       	push	r16
    17fa:	ff 92       	push	r15
    17fc:	ef 92       	push	r14
    17fe:	df 92       	push	r13
    1800:	7b 01       	movw	r14, r22
    1802:	8c 01       	movw	r16, r24
    1804:	68 94       	set
    1806:	06 c0       	rjmp	.+12     	; 0x1814 <__fp_powser+0x22>
    1808:	da 2e       	mov	r13, r26
    180a:	ef 01       	movw	r28, r30
    180c:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__mulsf3x>
    1810:	fe 01       	movw	r30, r28
    1812:	e8 94       	clt
    1814:	a5 91       	lpm	r26, Z+
    1816:	25 91       	lpm	r18, Z+
    1818:	35 91       	lpm	r19, Z+
    181a:	45 91       	lpm	r20, Z+
    181c:	55 91       	lpm	r21, Z+
    181e:	a6 f3       	brts	.-24     	; 0x1808 <__fp_powser+0x16>
    1820:	ef 01       	movw	r28, r30
    1822:	0e 94 8f 09 	call	0x131e	; 0x131e <__addsf3x>
    1826:	fe 01       	movw	r30, r28
    1828:	97 01       	movw	r18, r14
    182a:	a8 01       	movw	r20, r16
    182c:	da 94       	dec	r13
    182e:	69 f7       	brne	.-38     	; 0x180a <__fp_powser+0x18>
    1830:	df 90       	pop	r13
    1832:	ef 90       	pop	r14
    1834:	ff 90       	pop	r15
    1836:	0f 91       	pop	r16
    1838:	1f 91       	pop	r17
    183a:	cf 91       	pop	r28
    183c:	df 91       	pop	r29
    183e:	08 95       	ret

00001840 <_ZL16currentCharacterv>:
    1840:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <_ZL17use_program_space>
    1844:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <__data_end>
    1848:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <__data_end+0x1>
    184c:	99 23       	and	r25, r25
    184e:	11 f0       	breq	.+4      	; 0x1854 <_ZL16currentCharacterv+0x14>
    1850:	84 91       	lpm	r24, Z
    1852:	01 c0       	rjmp	.+2      	; 0x1856 <_ZL16currentCharacterv+0x16>
    1854:	80 81       	ld	r24, Z
    1856:	2f eb       	ldi	r18, 0xBF	; 191
    1858:	28 0f       	add	r18, r24
    185a:	2a 31       	cpi	r18, 0x1A	; 26
    185c:	10 f4       	brcc	.+4      	; 0x1862 <_ZL16currentCharacterv+0x22>
    185e:	80 5e       	subi	r24, 0xE0	; 224
    1860:	08 95       	ret
    1862:	80 32       	cpi	r24, 0x20	; 32
    1864:	49 f4       	brne	.+18     	; 0x1878 <_ZL16currentCharacterv+0x38>
    1866:	9f 01       	movw	r18, r30
    1868:	2f 5f       	subi	r18, 0xFF	; 255
    186a:	3f 4f       	sbci	r19, 0xFF	; 255
    186c:	30 93 3b 01 	sts	0x013B, r19	; 0x80013b <__data_end+0x1>
    1870:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <__data_end>
    1874:	ef 2b       	or	r30, r31
    1876:	31 f7       	brne	.-52     	; 0x1844 <_ZL16currentCharacterv+0x4>
    1878:	08 95       	ret

0000187a <_ZL9getNumberv>:
    187a:	1f 93       	push	r17
    187c:	cf 93       	push	r28
    187e:	df 93       	push	r29
    1880:	0e 94 20 0c 	call	0x1840	; 0x1840 <_ZL16currentCharacterv>
    1884:	c0 e0       	ldi	r28, 0x00	; 0
    1886:	d0 e0       	ldi	r29, 0x00	; 0
    1888:	1a e0       	ldi	r17, 0x0A	; 10
    188a:	90 ed       	ldi	r25, 0xD0	; 208
    188c:	98 0f       	add	r25, r24
    188e:	9a 30       	cpi	r25, 0x0A	; 10
    1890:	b8 f4       	brcc	.+46     	; 0x18c0 <_ZL9getNumberv+0x46>
    1892:	9e 01       	movw	r18, r28
    1894:	12 9f       	mul	r17, r18
    1896:	e0 01       	movw	r28, r0
    1898:	13 9f       	mul	r17, r19
    189a:	d0 0d       	add	r29, r0
    189c:	11 24       	eor	r1, r1
    189e:	c8 0f       	add	r28, r24
    18a0:	d1 1d       	adc	r29, r1
    18a2:	87 fd       	sbrc	r24, 7
    18a4:	da 95       	dec	r29
    18a6:	e0 97       	sbiw	r28, 0x30	; 48
    18a8:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
    18ac:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <__data_end+0x1>
    18b0:	01 96       	adiw	r24, 0x01	; 1
    18b2:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__data_end+0x1>
    18b6:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
    18ba:	0e 94 20 0c 	call	0x1840	; 0x1840 <_ZL16currentCharacterv>
    18be:	e5 cf       	rjmp	.-54     	; 0x188a <_ZL9getNumberv+0x10>
    18c0:	ce 01       	movw	r24, r28
    18c2:	df 91       	pop	r29
    18c4:	cf 91       	pop	r28
    18c6:	1f 91       	pop	r17
    18c8:	08 95       	ret

000018ca <_ZN15OrangutanBuzzer5init2Ev>:
    18ca:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    18ce:	83 e2       	ldi	r24, 0x23	; 35
    18d0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    18d4:	81 e1       	ldi	r24, 0x11	; 17
    18d6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    18da:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    18de:	80 e1       	ldi	r24, 0x10	; 16
    18e0:	97 e2       	ldi	r25, 0x27	; 39
    18e2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    18e6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    18ea:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    18ee:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    18f2:	22 9a       	sbi	0x04, 2	; 4
    18f4:	78 94       	sei
    18f6:	08 95       	ret

000018f8 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
    18f8:	8f 92       	push	r8
    18fa:	9f 92       	push	r9
    18fc:	af 92       	push	r10
    18fe:	bf 92       	push	r11
    1900:	df 92       	push	r13
    1902:	ef 92       	push	r14
    1904:	ff 92       	push	r15
    1906:	0f 93       	push	r16
    1908:	1f 93       	push	r17
    190a:	cf 93       	push	r28
    190c:	df 93       	push	r29
    190e:	5c 01       	movw	r10, r24
    1910:	8b 01       	movw	r16, r22
    1912:	d4 2e       	mov	r13, r20
    1914:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <buzzerInitialized>
    1918:	81 11       	cpse	r24, r1
    191a:	05 c0       	rjmp	.+10     	; 0x1926 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <buzzerInitialized>
    1922:	0e 94 65 0c 	call	0x18ca	; 0x18ca <_ZN15OrangutanBuzzer5init2Ev>
    1926:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <buzzerFinished>
    192a:	b7 fe       	sbrs	r11, 7
    192c:	05 c0       	rjmp	.+10     	; 0x1938 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
    192e:	e8 94       	clt
    1930:	b7 f8       	bld	r11, 7
    1932:	2a e0       	ldi	r18, 0x0A	; 10
    1934:	f2 2e       	mov	r15, r18
    1936:	02 c0       	rjmp	.+4      	; 0x193c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
    1938:	ff 24       	eor	r15, r15
    193a:	f3 94       	inc	r15
    193c:	e0 90 81 00 	lds	r14, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1940:	2e 2d       	mov	r18, r14
    1942:	28 7f       	andi	r18, 0xF8	; 248
    1944:	e2 2e       	mov	r14, r18
    1946:	48 ec       	ldi	r20, 0xC8	; 200
    1948:	f4 9e       	mul	r15, r20
    194a:	c0 01       	movw	r24, r0
    194c:	11 24       	eor	r1, r1
    194e:	8a 15       	cp	r24, r10
    1950:	9b 05       	cpc	r25, r11
    1952:	e0 f4       	brcc	.+56     	; 0x198c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
    1954:	e5 01       	movw	r28, r10
    1956:	51 e1       	ldi	r21, 0x11	; 17
    1958:	a5 16       	cp	r10, r21
    195a:	57 e2       	ldi	r21, 0x27	; 39
    195c:	b5 06       	cpc	r11, r21
    195e:	10 f0       	brcs	.+4      	; 0x1964 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
    1960:	c0 e1       	ldi	r28, 0x10	; 16
    1962:	d7 e2       	ldi	r29, 0x27	; 39
    1964:	be 01       	movw	r22, r28
    1966:	76 95       	lsr	r23
    1968:	67 95       	ror	r22
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	60 58       	subi	r22, 0x80	; 128
    1970:	79 46       	sbci	r23, 0x69	; 105
    1972:	87 46       	sbci	r24, 0x67	; 103
    1974:	9f 4f       	sbci	r25, 0xFF	; 255
    1976:	4e 01       	movw	r8, r28
    1978:	a1 2c       	mov	r10, r1
    197a:	b1 2c       	mov	r11, r1
    197c:	a5 01       	movw	r20, r10
    197e:	94 01       	movw	r18, r8
    1980:	0e 94 c6 14 	call	0x298c	; 0x298c <__udivmodsi4>
    1984:	59 01       	movw	r10, r18
    1986:	8e 2d       	mov	r24, r14
    1988:	81 60       	ori	r24, 0x01	; 1
    198a:	24 c0       	rjmp	.+72     	; 0x19d4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
    198c:	c8 e2       	ldi	r28, 0x28	; 40
    198e:	fc 9e       	mul	r15, r28
    1990:	c0 2d       	mov	r28, r0
    1992:	11 24       	eor	r1, r1
    1994:	d0 e0       	ldi	r29, 0x00	; 0
    1996:	ca 15       	cp	r28, r10
    1998:	db 05       	cpc	r29, r11
    199a:	08 f4       	brcc	.+2      	; 0x199e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
    199c:	e5 01       	movw	r28, r10
    199e:	be 01       	movw	r22, r28
    19a0:	76 95       	lsr	r23
    19a2:	67 95       	ror	r22
    19a4:	9e 01       	movw	r18, r28
    19a6:	40 e0       	ldi	r20, 0x00	; 0
    19a8:	50 e0       	ldi	r21, 0x00	; 0
    19aa:	8a e0       	ldi	r24, 0x0A	; 10
    19ac:	f8 12       	cpse	r15, r24
    19ae:	07 c0       	rjmp	.+14     	; 0x19be <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	60 5e       	subi	r22, 0xE0	; 224
    19b6:	73 44       	sbci	r23, 0x43	; 67
    19b8:	81 44       	sbci	r24, 0x41	; 65
    19ba:	9f 4f       	sbci	r25, 0xFF	; 255
    19bc:	06 c0       	rjmp	.+12     	; 0x19ca <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	60 53       	subi	r22, 0x30	; 48
    19c4:	7d 4e       	sbci	r23, 0xED	; 237
    19c6:	8c 4e       	sbci	r24, 0xEC	; 236
    19c8:	9f 4f       	sbci	r25, 0xFF	; 255
    19ca:	0e 94 c6 14 	call	0x298c	; 0x298c <__udivmodsi4>
    19ce:	59 01       	movw	r10, r18
    19d0:	8e 2d       	mov	r24, r14
    19d2:	82 60       	ori	r24, 0x02	; 2
    19d4:	88 2e       	mov	r8, r24
    19d6:	2a e0       	ldi	r18, 0x0A	; 10
    19d8:	f2 12       	cpse	r15, r18
    19da:	07 c0       	rjmp	.+14     	; 0x19ea <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
    19dc:	ce 01       	movw	r24, r28
    19de:	05 96       	adiw	r24, 0x05	; 5
    19e0:	6a e0       	ldi	r22, 0x0A	; 10
    19e2:	70 e0       	ldi	r23, 0x00	; 0
    19e4:	0e 94 b2 14 	call	0x2964	; 0x2964 <__udivmodhi4>
    19e8:	eb 01       	movw	r28, r22
    19ea:	c8 3e       	cpi	r28, 0xE8	; 232
    19ec:	43 e0       	ldi	r20, 0x03	; 3
    19ee:	d4 07       	cpc	r29, r20
    19f0:	59 f0       	breq	.+22     	; 0x1a08 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    19f2:	98 01       	movw	r18, r16
    19f4:	de 01       	movw	r26, r28
    19f6:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <__umulhisi3>
    19fa:	28 ee       	ldi	r18, 0xE8	; 232
    19fc:	33 e0       	ldi	r19, 0x03	; 3
    19fe:	40 e0       	ldi	r20, 0x00	; 0
    1a00:	50 e0       	ldi	r21, 0x00	; 0
    1a02:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <__divmodsi4>
    1a06:	89 01       	movw	r16, r18
    1a08:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1a0c:	80 92 81 00 	sts	0x0081, r8	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1a10:	b0 92 89 00 	sts	0x0089, r11	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1a14:	a0 92 88 00 	sts	0x0088, r10	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1a18:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1a1c:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1a20:	4d 2d       	mov	r20, r13
    1a22:	40 31       	cpi	r20, 0x10	; 16
    1a24:	08 f0       	brcs	.+2      	; 0x1a28 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    1a26:	4f e0       	ldi	r20, 0x0F	; 15
    1a28:	80 e1       	ldi	r24, 0x10	; 16
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	84 1b       	sub	r24, r20
    1a2e:	91 09       	sbc	r25, r1
    1a30:	a9 01       	movw	r20, r18
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    1a34:	56 95       	lsr	r21
    1a36:	47 95       	ror	r20
    1a38:	8a 95       	dec	r24
    1a3a:	e2 f7       	brpl	.-8      	; 0x1a34 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    1a3c:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1a40:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1a44:	10 93 42 01 	sts	0x0142, r17	; 0x800142 <_ZL13buzzerTimeout+0x1>
    1a48:	00 93 41 01 	sts	0x0141, r16	; 0x800141 <_ZL13buzzerTimeout>
    1a4c:	86 b3       	in	r24, 0x16	; 22
    1a4e:	8f ef       	ldi	r24, 0xFF	; 255
    1a50:	86 bb       	out	0x16, r24	; 22
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1a58:	df 91       	pop	r29
    1a5a:	cf 91       	pop	r28
    1a5c:	1f 91       	pop	r17
    1a5e:	0f 91       	pop	r16
    1a60:	ff 90       	pop	r15
    1a62:	ef 90       	pop	r14
    1a64:	df 90       	pop	r13
    1a66:	bf 90       	pop	r11
    1a68:	af 90       	pop	r10
    1a6a:	9f 90       	pop	r9
    1a6c:	8f 90       	pop	r8
    1a6e:	08 95       	ret

00001a70 <_ZN15OrangutanBuzzer8playNoteEhjh>:
    1a70:	cf 93       	push	r28
    1a72:	df 93       	push	r29
    1a74:	eb 01       	movw	r28, r22
    1a76:	8f 3f       	cpi	r24, 0xFF	; 255
    1a78:	11 f0       	breq	.+4      	; 0x1a7e <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
    1a7a:	41 11       	cpse	r20, r1
    1a7c:	05 c0       	rjmp	.+10     	; 0x1a88 <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
    1a7e:	40 e0       	ldi	r20, 0x00	; 0
    1a80:	be 01       	movw	r22, r28
    1a82:	88 ee       	ldi	r24, 0xE8	; 232
    1a84:	93 e0       	ldi	r25, 0x03	; 3
    1a86:	43 c0       	rjmp	.+134    	; 0x1b0e <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
    1a88:	81 31       	cpi	r24, 0x11	; 17
    1a8a:	30 f0       	brcs	.+12     	; 0x1a98 <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
    1a8c:	50 ef       	ldi	r21, 0xF0	; 240
    1a8e:	58 0f       	add	r21, r24
    1a90:	50 36       	cpi	r21, 0x60	; 96
    1a92:	18 f0       	brcs	.+6      	; 0x1a9a <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1a94:	5f e5       	ldi	r21, 0x5F	; 95
    1a96:	01 c0       	rjmp	.+2      	; 0x1a9a <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1a98:	50 e0       	ldi	r21, 0x00	; 0
    1a9a:	85 2f       	mov	r24, r21
    1a9c:	6c e0       	ldi	r22, 0x0C	; 12
    1a9e:	0e 94 a6 14 	call	0x294c	; 0x294c <__udivmodqi4>
    1aa2:	68 2f       	mov	r22, r24
    1aa4:	74 ef       	ldi	r23, 0xF4	; 244
    1aa6:	76 03       	mulsu	r23, r22
    1aa8:	90 01       	movw	r18, r0
    1aaa:	11 24       	eor	r1, r1
    1aac:	25 0f       	add	r18, r21
    1aae:	31 1d       	adc	r19, r1
    1ab0:	2c 30       	cpi	r18, 0x0C	; 12
    1ab2:	31 05       	cpc	r19, r1
    1ab4:	40 f4       	brcc	.+16     	; 0x1ac6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
    1ab6:	f9 01       	movw	r30, r18
    1ab8:	ee 0f       	add	r30, r30
    1aba:	ff 1f       	adc	r31, r31
    1abc:	ee 5d       	subi	r30, 0xDE	; 222
    1abe:	fe 4f       	sbci	r31, 0xFE	; 254
    1ac0:	20 81       	ld	r18, Z
    1ac2:	31 81       	ldd	r19, Z+1	; 0x01
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	87 30       	cpi	r24, 0x07	; 7
    1acc:	81 f0       	breq	.+32     	; 0x1aee <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
    1ace:	08 2e       	mov	r0, r24
    1ad0:	02 c0       	rjmp	.+4      	; 0x1ad6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
    1ad2:	22 0f       	add	r18, r18
    1ad4:	33 1f       	adc	r19, r19
    1ad6:	0a 94       	dec	r0
    1ad8:	e2 f7       	brpl	.-8      	; 0x1ad2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    1ada:	82 30       	cpi	r24, 0x02	; 2
    1adc:	28 f0       	brcs	.+10     	; 0x1ae8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
    1ade:	c9 01       	movw	r24, r18
    1ae0:	05 96       	adiw	r24, 0x05	; 5
    1ae2:	6a e0       	ldi	r22, 0x0A	; 10
    1ae4:	70 e0       	ldi	r23, 0x00	; 0
    1ae6:	0c c0       	rjmp	.+24     	; 0x1b00 <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
    1ae8:	c9 01       	movw	r24, r18
    1aea:	90 58       	subi	r25, 0x80	; 128
    1aec:	0c c0       	rjmp	.+24     	; 0x1b06 <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
    1aee:	c9 01       	movw	r24, r18
    1af0:	36 e0       	ldi	r19, 0x06	; 6
    1af2:	88 0f       	add	r24, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	3a 95       	dec	r19
    1af8:	e1 f7       	brne	.-8      	; 0x1af2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
    1afa:	02 96       	adiw	r24, 0x02	; 2
    1afc:	65 e0       	ldi	r22, 0x05	; 5
    1afe:	70 e0       	ldi	r23, 0x00	; 0
    1b00:	0e 94 b2 14 	call	0x2964	; 0x2964 <__udivmodhi4>
    1b04:	cb 01       	movw	r24, r22
    1b06:	40 31       	cpi	r20, 0x10	; 16
    1b08:	08 f0       	brcs	.+2      	; 0x1b0c <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    1b0a:	4f e0       	ldi	r20, 0x0F	; 15
    1b0c:	be 01       	movw	r22, r28
    1b0e:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1b12:	df 91       	pop	r29
    1b14:	cf 91       	pop	r28
    1b16:	08 95       	ret

00001b18 <_ZL8nextNotev>:
    1b18:	a2 e0       	ldi	r26, 0x02	; 2
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	e2 e9       	ldi	r30, 0x92	; 146
    1b1e:	fd e0       	ldi	r31, 0x0D	; 13
    1b20:	0c 94 31 15 	jmp	0x2a62	; 0x2a62 <__prologue_saves__+0x4>
    1b24:	90 90 08 01 	lds	r9, 0x0108	; 0x800108 <_ZL6octave>
    1b28:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <_ZL8staccato>
    1b2c:	88 23       	and	r24, r24
    1b2e:	21 f0       	breq	.+8      	; 0x1b38 <_ZL8nextNotev+0x20>
    1b30:	60 91 3d 01 	lds	r22, 0x013D	; 0x80013d <_ZL22staccato_rest_duration>
    1b34:	61 11       	cpse	r22, r1
    1b36:	17 c0       	rjmp	.+46     	; 0x1b66 <_ZL8nextNotev+0x4e>
    1b38:	77 24       	eor	r7, r7
    1b3a:	73 94       	inc	r7
    1b3c:	b0 ec       	ldi	r27, 0xC0	; 192
    1b3e:	ab 2e       	mov	r10, r27
    1b40:	bd e5       	ldi	r27, 0x5D	; 93
    1b42:	bb 2e       	mov	r11, r27
    1b44:	1a e0       	ldi	r17, 0x0A	; 10
    1b46:	61 2e       	mov	r6, r17
    1b48:	04 e0       	ldi	r16, 0x04	; 4
    1b4a:	80 2e       	mov	r8, r16
    1b4c:	80 ed       	ldi	r24, 0xD0	; 208
    1b4e:	c8 2e       	mov	r12, r24
    1b50:	87 e0       	ldi	r24, 0x07	; 7
    1b52:	d8 2e       	mov	r13, r24
    1b54:	94 e0       	ldi	r25, 0x04	; 4
    1b56:	e9 2e       	mov	r14, r25
    1b58:	f1 2c       	mov	r15, r1
    1b5a:	04 ef       	ldi	r16, 0xF4	; 244
    1b5c:	11 e0       	ldi	r17, 0x01	; 1
    1b5e:	2f e0       	ldi	r18, 0x0F	; 15
    1b60:	42 2e       	mov	r4, r18
    1b62:	51 2c       	mov	r5, r1
    1b64:	15 c0       	rjmp	.+42     	; 0x1b90 <_ZL8nextNotev+0x78>
    1b66:	70 e0       	ldi	r23, 0x00	; 0
    1b68:	40 e0       	ldi	r20, 0x00	; 0
    1b6a:	88 ee       	ldi	r24, 0xE8	; 232
    1b6c:	93 e0       	ldi	r25, 0x03	; 3
    1b6e:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1b72:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <_ZL22staccato_rest_duration>
    1b76:	17 c1       	rjmp	.+558    	; 0x1da6 <_ZL8nextNotev+0x28e>
    1b78:	86 36       	cpi	r24, 0x66	; 102
    1b7a:	d4 f5       	brge	.+116    	; 0x1bf0 <_ZL8nextNotev+0xd8>
    1b7c:	81 36       	cpi	r24, 0x61	; 97
    1b7e:	09 f4       	brne	.+2      	; 0x1b82 <_ZL8nextNotev+0x6a>
    1b80:	a9 c0       	rjmp	.+338    	; 0x1cd4 <_ZL8nextNotev+0x1bc>
    1b82:	7c f5       	brge	.+94     	; 0x1be2 <_ZL8nextNotev+0xca>
    1b84:	8c 33       	cpi	r24, 0x3C	; 60
    1b86:	09 f4       	brne	.+2      	; 0x1b8a <_ZL8nextNotev+0x72>
    1b88:	60 c0       	rjmp	.+192    	; 0x1c4a <_ZL8nextNotev+0x132>
    1b8a:	8e 33       	cpi	r24, 0x3E	; 62
    1b8c:	81 f4       	brne	.+32     	; 0x1bae <_ZL8nextNotev+0x96>
    1b8e:	93 94       	inc	r9
    1b90:	0e 94 20 0c 	call	0x1840	; 0x1840 <_ZL16currentCharacterv>
    1b94:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <__data_end>
    1b98:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <__data_end+0x1>
    1b9c:	2f 5f       	subi	r18, 0xFF	; 255
    1b9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba0:	30 93 3b 01 	sts	0x013B, r19	; 0x80013b <__data_end+0x1>
    1ba4:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <__data_end>
    1ba8:	85 36       	cpi	r24, 0x65	; 101
    1baa:	31 f7       	brne	.-52     	; 0x1b78 <_ZL8nextNotev+0x60>
    1bac:	52 c0       	rjmp	.+164    	; 0x1c52 <_ZL8nextNotev+0x13a>
    1bae:	81 32       	cpi	r24, 0x21	; 33
    1bb0:	09 f0       	breq	.+2      	; 0x1bb4 <_ZL8nextNotev+0x9c>
    1bb2:	8b c0       	rjmp	.+278    	; 0x1cca <_ZL8nextNotev+0x1b2>
    1bb4:	80 92 08 01 	sts	0x0108, r8	; 0x800108 <_ZL6octave>
    1bb8:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_ZL19whole_note_duration+0x1>
    1bbc:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_ZL19whole_note_duration>
    1bc0:	f0 92 05 01 	sts	0x0105, r15	; 0x800105 <_ZL9note_type+0x1>
    1bc4:	e0 92 04 01 	sts	0x0104, r14	; 0x800104 <_ZL9note_type>
    1bc8:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <_ZL8duration+0x1>
    1bcc:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <_ZL8duration>
    1bd0:	50 92 01 01 	sts	0x0101, r5	; 0x800101 <__data_start+0x1>
    1bd4:	40 92 00 01 	sts	0x0100, r4	; 0x800100 <__data_start>
    1bd8:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <_ZL8staccato>
    1bdc:	a4 e0       	ldi	r26, 0x04	; 4
    1bde:	9a 2e       	mov	r9, r26
    1be0:	d7 cf       	rjmp	.-82     	; 0x1b90 <_ZL8nextNotev+0x78>
    1be2:	83 36       	cpi	r24, 0x63	; 99
    1be4:	a1 f1       	breq	.+104    	; 0x1c4e <_ZL8nextNotev+0x136>
    1be6:	0c f4       	brge	.+2      	; 0x1bea <_ZL8nextNotev+0xd2>
    1be8:	78 c0       	rjmp	.+240    	; 0x1cda <_ZL8nextNotev+0x1c2>
    1bea:	10 e0       	ldi	r17, 0x00	; 0
    1bec:	82 e0       	ldi	r24, 0x02	; 2
    1bee:	77 c0       	rjmp	.+238    	; 0x1cde <_ZL8nextNotev+0x1c6>
    1bf0:	8d 36       	cpi	r24, 0x6D	; 109
    1bf2:	c1 f1       	breq	.+112    	; 0x1c64 <_ZL8nextNotev+0x14c>
    1bf4:	94 f4       	brge	.+36     	; 0x1c1a <_ZL8nextNotev+0x102>
    1bf6:	87 36       	cpi	r24, 0x67	; 103
    1bf8:	91 f1       	breq	.+100    	; 0x1c5e <_ZL8nextNotev+0x146>
    1bfa:	74 f1       	brlt	.+92     	; 0x1c58 <_ZL8nextNotev+0x140>
    1bfc:	8c 36       	cpi	r24, 0x6C	; 108
    1bfe:	09 f0       	breq	.+2      	; 0x1c02 <_ZL8nextNotev+0xea>
    1c00:	64 c0       	rjmp	.+200    	; 0x1cca <_ZL8nextNotev+0x1b2>
    1c02:	0e 94 3d 0c 	call	0x187a	; 0x187a <_ZL9getNumberv>
    1c06:	bc 01       	movw	r22, r24
    1c08:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_ZL9note_type+0x1>
    1c0c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_ZL9note_type>
    1c10:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL19whole_note_duration>
    1c14:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL19whole_note_duration+0x1>
    1c18:	51 c0       	rjmp	.+162    	; 0x1cbc <_ZL8nextNotev+0x1a4>
    1c1a:	82 37       	cpi	r24, 0x72	; 114
    1c1c:	c9 f1       	breq	.+114    	; 0x1c90 <_ZL8nextNotev+0x178>
    1c1e:	4c f4       	brge	.+18     	; 0x1c32 <_ZL8nextNotev+0x11a>
    1c20:	8f 36       	cpi	r24, 0x6F	; 111
    1c22:	09 f0       	breq	.+2      	; 0x1c26 <_ZL8nextNotev+0x10e>
    1c24:	52 c0       	rjmp	.+164    	; 0x1cca <_ZL8nextNotev+0x1b2>
    1c26:	0e 94 3d 0c 	call	0x187a	; 0x187a <_ZL9getNumberv>
    1c2a:	98 2e       	mov	r9, r24
    1c2c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL6octave>
    1c30:	af cf       	rjmp	.-162    	; 0x1b90 <_ZL8nextNotev+0x78>
    1c32:	84 37       	cpi	r24, 0x74	; 116
    1c34:	81 f1       	breq	.+96     	; 0x1c96 <_ZL8nextNotev+0x17e>
    1c36:	86 37       	cpi	r24, 0x76	; 118
    1c38:	09 f0       	breq	.+2      	; 0x1c3c <_ZL8nextNotev+0x124>
    1c3a:	47 c0       	rjmp	.+142    	; 0x1cca <_ZL8nextNotev+0x1b2>
    1c3c:	0e 94 3d 0c 	call	0x187a	; 0x187a <_ZL9getNumberv>
    1c40:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1c44:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1c48:	a3 cf       	rjmp	.-186    	; 0x1b90 <_ZL8nextNotev+0x78>
    1c4a:	9a 94       	dec	r9
    1c4c:	a1 cf       	rjmp	.-190    	; 0x1b90 <_ZL8nextNotev+0x78>
    1c4e:	10 e0       	ldi	r17, 0x00	; 0
    1c50:	20 c0       	rjmp	.+64     	; 0x1c92 <_ZL8nextNotev+0x17a>
    1c52:	10 e0       	ldi	r17, 0x00	; 0
    1c54:	84 e0       	ldi	r24, 0x04	; 4
    1c56:	43 c0       	rjmp	.+134    	; 0x1cde <_ZL8nextNotev+0x1c6>
    1c58:	10 e0       	ldi	r17, 0x00	; 0
    1c5a:	85 e0       	ldi	r24, 0x05	; 5
    1c5c:	40 c0       	rjmp	.+128    	; 0x1cde <_ZL8nextNotev+0x1c6>
    1c5e:	10 e0       	ldi	r17, 0x00	; 0
    1c60:	87 e0       	ldi	r24, 0x07	; 7
    1c62:	3d c0       	rjmp	.+122    	; 0x1cde <_ZL8nextNotev+0x1c6>
    1c64:	0e 94 20 0c 	call	0x1840	; 0x1840 <_ZL16currentCharacterv>
    1c68:	8c 36       	cpi	r24, 0x6C	; 108
    1c6a:	19 f4       	brne	.+6      	; 0x1c72 <_ZL8nextNotev+0x15a>
    1c6c:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <_ZL8staccato>
    1c70:	04 c0       	rjmp	.+8      	; 0x1c7a <_ZL8nextNotev+0x162>
    1c72:	70 92 3e 01 	sts	0x013E, r7	; 0x80013e <_ZL8staccato>
    1c76:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <_ZL22staccato_rest_duration>
    1c7a:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <__data_end>
    1c7e:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <__data_end+0x1>
    1c82:	2f 5f       	subi	r18, 0xFF	; 255
    1c84:	3f 4f       	sbci	r19, 0xFF	; 255
    1c86:	30 93 3b 01 	sts	0x013B, r19	; 0x80013b <__data_end+0x1>
    1c8a:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <__data_end>
    1c8e:	80 cf       	rjmp	.-256    	; 0x1b90 <_ZL8nextNotev+0x78>
    1c90:	11 e0       	ldi	r17, 0x01	; 1
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	24 c0       	rjmp	.+72     	; 0x1cde <_ZL8nextNotev+0x1c6>
    1c96:	0e 94 3d 0c 	call	0x187a	; 0x187a <_ZL9getNumberv>
    1c9a:	bc 01       	movw	r22, r24
    1c9c:	c5 01       	movw	r24, r10
    1c9e:	0e 94 b2 14 	call	0x2964	; 0x2964 <__udivmodhi4>
    1ca2:	66 9e       	mul	r6, r22
    1ca4:	c0 01       	movw	r24, r0
    1ca6:	67 9e       	mul	r6, r23
    1ca8:	90 0d       	add	r25, r0
    1caa:	11 24       	eor	r1, r1
    1cac:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL19whole_note_duration+0x1>
    1cb0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL19whole_note_duration>
    1cb4:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_ZL9note_type>
    1cb8:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_ZL9note_type+0x1>
    1cbc:	0e 94 b2 14 	call	0x2964	; 0x2964 <__udivmodhi4>
    1cc0:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <_ZL8duration+0x1>
    1cc4:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <_ZL8duration>
    1cc8:	63 cf       	rjmp	.-314    	; 0x1b90 <_ZL8nextNotev+0x78>
    1cca:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <__data_end+0x1>
    1cce:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <__data_end>
    1cd2:	69 c0       	rjmp	.+210    	; 0x1da6 <_ZL8nextNotev+0x28e>
    1cd4:	10 e0       	ldi	r17, 0x00	; 0
    1cd6:	89 e0       	ldi	r24, 0x09	; 9
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <_ZL8nextNotev+0x1c6>
    1cda:	10 e0       	ldi	r17, 0x00	; 0
    1cdc:	8b e0       	ldi	r24, 0x0B	; 11
    1cde:	08 2f       	mov	r16, r24
    1ce0:	9c e0       	ldi	r25, 0x0C	; 12
    1ce2:	99 9e       	mul	r9, r25
    1ce4:	00 0d       	add	r16, r0
    1ce6:	11 24       	eor	r1, r1
    1ce8:	0e 94 20 0c 	call	0x1840	; 0x1840 <_ZL16currentCharacterv>
    1cec:	98 2f       	mov	r25, r24
    1cee:	97 7f       	andi	r25, 0xF7	; 247
    1cf0:	93 32       	cpi	r25, 0x23	; 35
    1cf2:	61 f4       	brne	.+24     	; 0x1d0c <_ZL8nextNotev+0x1f4>
    1cf4:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <__data_end>
    1cf8:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <__data_end+0x1>
    1cfc:	2f 5f       	subi	r18, 0xFF	; 255
    1cfe:	3f 4f       	sbci	r19, 0xFF	; 255
    1d00:	30 93 3b 01 	sts	0x013B, r19	; 0x80013b <__data_end+0x1>
    1d04:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <__data_end>
    1d08:	0f 5f       	subi	r16, 0xFF	; 255
    1d0a:	ee cf       	rjmp	.-36     	; 0x1ce8 <_ZL8nextNotev+0x1d0>
    1d0c:	8d 32       	cpi	r24, 0x2D	; 45
    1d0e:	71 f4       	brne	.+28     	; 0x1d2c <_ZL8nextNotev+0x214>
    1d10:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <__data_end>
    1d14:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <__data_end+0x1>
    1d18:	2f 5f       	subi	r18, 0xFF	; 255
    1d1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d1c:	30 93 3b 01 	sts	0x013B, r19	; 0x80013b <__data_end+0x1>
    1d20:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <__data_end>
    1d24:	01 50       	subi	r16, 0x01	; 1
    1d26:	0e 94 20 0c 	call	0x1840	; 0x1840 <_ZL16currentCharacterv>
    1d2a:	f0 cf       	rjmp	.-32     	; 0x1d0c <_ZL8nextNotev+0x1f4>
    1d2c:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <_ZL8duration>
    1d30:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <_ZL8duration+0x1>
    1d34:	81 53       	subi	r24, 0x31	; 49
    1d36:	88 30       	cpi	r24, 0x08	; 8
    1d38:	50 f4       	brcc	.+20     	; 0x1d4e <_ZL8nextNotev+0x236>
    1d3a:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <_ZL19whole_note_duration>
    1d3e:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <_ZL19whole_note_duration+0x1>
    1d42:	0e 94 3d 0c 	call	0x187a	; 0x187a <_ZL9getNumberv>
    1d46:	bc 01       	movw	r22, r24
    1d48:	c7 01       	movw	r24, r14
    1d4a:	0e 94 b2 14 	call	0x2964	; 0x2964 <__udivmodhi4>
    1d4e:	7b 01       	movw	r14, r22
    1d50:	f6 94       	lsr	r15
    1d52:	e7 94       	ror	r14
    1d54:	69 83       	std	Y+1, r22	; 0x01
    1d56:	7a 83       	std	Y+2, r23	; 0x02
    1d58:	0e 94 20 0c 	call	0x1840	; 0x1840 <_ZL16currentCharacterv>
    1d5c:	69 81       	ldd	r22, Y+1	; 0x01
    1d5e:	7a 81       	ldd	r23, Y+2	; 0x02
    1d60:	8e 32       	cpi	r24, 0x2E	; 46
    1d62:	69 f4       	brne	.+26     	; 0x1d7e <_ZL8nextNotev+0x266>
    1d64:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <__data_end>
    1d68:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <__data_end+0x1>
    1d6c:	2f 5f       	subi	r18, 0xFF	; 255
    1d6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d70:	30 93 3b 01 	sts	0x013B, r19	; 0x80013b <__data_end+0x1>
    1d74:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <__data_end>
    1d78:	6e 0d       	add	r22, r14
    1d7a:	7f 1d       	adc	r23, r15
    1d7c:	e9 cf       	rjmp	.-46     	; 0x1d50 <_ZL8nextNotev+0x238>
    1d7e:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <_ZL8staccato>
    1d82:	88 23       	and	r24, r24
    1d84:	39 f0       	breq	.+14     	; 0x1d94 <_ZL8nextNotev+0x27c>
    1d86:	9b 01       	movw	r18, r22
    1d88:	36 95       	lsr	r19
    1d8a:	27 95       	ror	r18
    1d8c:	20 93 3d 01 	sts	0x013D, r18	; 0x80013d <_ZL22staccato_rest_duration>
    1d90:	62 1b       	sub	r22, r18
    1d92:	71 09       	sbc	r23, r1
    1d94:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
    1d98:	11 23       	and	r17, r17
    1d9a:	11 f0       	breq	.+4      	; 0x1da0 <_ZL8nextNotev+0x288>
    1d9c:	8f ef       	ldi	r24, 0xFF	; 255
    1d9e:	01 c0       	rjmp	.+2      	; 0x1da2 <_ZL8nextNotev+0x28a>
    1da0:	80 2f       	mov	r24, r16
    1da2:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <_ZN15OrangutanBuzzer8playNoteEhjh>
    1da6:	22 96       	adiw	r28, 0x02	; 2
    1da8:	e0 e1       	ldi	r30, 0x10	; 16
    1daa:	0c 94 4d 15 	jmp	0x2a9a	; 0x2a9a <__epilogue_restores__+0x4>

00001dae <__vector_13>:
    1dae:	1f 92       	push	r1
    1db0:	0f 92       	push	r0
    1db2:	0f b6       	in	r0, 0x3f	; 63
    1db4:	0f 92       	push	r0
    1db6:	11 24       	eor	r1, r1
    1db8:	2f 93       	push	r18
    1dba:	3f 93       	push	r19
    1dbc:	4f 93       	push	r20
    1dbe:	5f 93       	push	r21
    1dc0:	6f 93       	push	r22
    1dc2:	7f 93       	push	r23
    1dc4:	8f 93       	push	r24
    1dc6:	9f 93       	push	r25
    1dc8:	af 93       	push	r26
    1dca:	bf 93       	push	r27
    1dcc:	ef 93       	push	r30
    1dce:	ff 93       	push	r31
    1dd0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <_ZL13buzzerTimeout>
    1dd4:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <_ZL13buzzerTimeout+0x1>
    1dd8:	9c 01       	movw	r18, r24
    1dda:	21 50       	subi	r18, 0x01	; 1
    1ddc:	31 09       	sbc	r19, r1
    1dde:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <_ZL13buzzerTimeout+0x1>
    1de2:	20 93 41 01 	sts	0x0141, r18	; 0x800141 <_ZL13buzzerTimeout>
    1de6:	89 2b       	or	r24, r25
    1de8:	11 f5       	brne	.+68     	; 0x1e2e <__vector_13+0x80>
    1dea:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1dee:	78 94       	sei
    1df0:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1df4:	88 7f       	andi	r24, 0xF8	; 248
    1df6:	81 60       	ori	r24, 0x01	; 1
    1df8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1dfc:	80 e1       	ldi	r24, 0x10	; 16
    1dfe:	97 e2       	ldi	r25, 0x27	; 39
    1e00:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1e04:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1e08:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1e0c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <buzzerFinished>
    1e16:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
    1e1a:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <__data_end+0x1>
    1e1e:	89 2b       	or	r24, r25
    1e20:	31 f0       	breq	.+12     	; 0x1e2e <__vector_13+0x80>
    1e22:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <_ZL17play_mode_setting>
    1e26:	81 11       	cpse	r24, r1
    1e28:	02 c0       	rjmp	.+4      	; 0x1e2e <__vector_13+0x80>
    1e2a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <_ZL8nextNotev>
    1e2e:	ff 91       	pop	r31
    1e30:	ef 91       	pop	r30
    1e32:	bf 91       	pop	r27
    1e34:	af 91       	pop	r26
    1e36:	9f 91       	pop	r25
    1e38:	8f 91       	pop	r24
    1e3a:	7f 91       	pop	r23
    1e3c:	6f 91       	pop	r22
    1e3e:	5f 91       	pop	r21
    1e40:	4f 91       	pop	r20
    1e42:	3f 91       	pop	r19
    1e44:	2f 91       	pop	r18
    1e46:	0f 90       	pop	r0
    1e48:	0f be       	out	0x3f, r0	; 63
    1e4a:	0f 90       	pop	r0
    1e4c:	1f 90       	pop	r1
    1e4e:	18 95       	reti

00001e50 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    1e50:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1e54:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__data_end+0x1>
    1e58:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <_ZL17use_program_space>
    1e62:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <_ZL22staccato_rest_duration>
    1e66:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <_ZL8nextNotev>
    1e6a:	08 95       	ret

00001e6c <play_from_program_space>:
    1e6c:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    1e70:	08 95       	ret

00001e72 <delay_us.constprop.0>:
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	6f 93       	push	r22
    1e78:	64 e0       	ldi	r22, 0x04	; 4
    1e7a:	6a 95       	dec	r22
    1e7c:	f1 f7       	brne	.-4      	; 0x1e7a <delay_us.constprop.0+0x8>
    1e7e:	6f 91       	pop	r22
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	c9 f7       	brne	.-14     	; 0x1e76 <delay_us.constprop.0+0x4>
    1e84:	08 95       	ret

00001e86 <_ZN12OrangutanLCD8busyWaitEv>:
    1e86:	0f 93       	push	r16
    1e88:	1f 93       	push	r17
    1e8a:	cf 93       	push	r28
    1e8c:	df 93       	push	r29
    1e8e:	1a b1       	in	r17, 0x0a	; 10
    1e90:	57 98       	cbi	0x0a, 7	; 10
    1e92:	5a 98       	cbi	0x0b, 2	; 11
    1e94:	28 9a       	sbi	0x05, 0	; 5
    1e96:	c0 e0       	ldi	r28, 0x00	; 0
    1e98:	d0 e0       	ldi	r29, 0x00	; 0
    1e9a:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <delay_us.constprop.0>
    1e9e:	5c 9a       	sbi	0x0b, 4	; 11
    1ea0:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <delay_us.constprop.0>
    1ea4:	09 b1       	in	r16, 0x09	; 9
    1ea6:	5c 98       	cbi	0x0b, 4	; 11
    1ea8:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <delay_us.constprop.0>
    1eac:	5c 9a       	sbi	0x0b, 4	; 11
    1eae:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <delay_us.constprop.0>
    1eb2:	5c 98       	cbi	0x0b, 4	; 11
    1eb4:	24 96       	adiw	r28, 0x04	; 4
    1eb6:	07 ff       	sbrs	r16, 7
    1eb8:	10 c0       	rjmp	.+32     	; 0x1eda <_ZN12OrangutanLCD8busyWaitEv+0x54>
    1eba:	ae 01       	movw	r20, r28
    1ebc:	60 e0       	ldi	r22, 0x00	; 0
    1ebe:	70 e0       	ldi	r23, 0x00	; 0
    1ec0:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <lcdTimeout>
    1ec4:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <lcdTimeout+0x1>
    1ec8:	a0 91 45 01 	lds	r26, 0x0145	; 0x800145 <lcdTimeout+0x2>
    1ecc:	b0 91 46 01 	lds	r27, 0x0146	; 0x800146 <lcdTimeout+0x3>
    1ed0:	48 17       	cp	r20, r24
    1ed2:	59 07       	cpc	r21, r25
    1ed4:	6a 07       	cpc	r22, r26
    1ed6:	7b 07       	cpc	r23, r27
    1ed8:	00 f3       	brcs	.-64     	; 0x1e9a <_ZN12OrangutanLCD8busyWaitEv+0x14>
    1eda:	1a b9       	out	0x0a, r17	; 10
    1edc:	df 91       	pop	r29
    1ede:	cf 91       	pop	r28
    1ee0:	1f 91       	pop	r17
    1ee2:	0f 91       	pop	r16
    1ee4:	08 95       	ret

00001ee6 <_ZN12OrangutanLCD8sendDataEh>:
    1ee6:	95 b1       	in	r25, 0x05	; 5
    1ee8:	28 2f       	mov	r18, r24
    1eea:	21 70       	andi	r18, 0x01	; 1
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	22 0f       	add	r18, r18
    1ef0:	33 1f       	adc	r19, r19
    1ef2:	48 2f       	mov	r20, r24
    1ef4:	46 70       	andi	r20, 0x06	; 6
    1ef6:	68 e0       	ldi	r22, 0x08	; 8
    1ef8:	46 9f       	mul	r20, r22
    1efa:	a0 01       	movw	r20, r0
    1efc:	11 24       	eor	r1, r1
    1efe:	24 2b       	or	r18, r20
    1f00:	9d 7c       	andi	r25, 0xCD	; 205
    1f02:	29 2b       	or	r18, r25
    1f04:	25 b9       	out	0x05, r18	; 5
    1f06:	9b b1       	in	r25, 0x0b	; 11
    1f08:	88 70       	andi	r24, 0x08	; 8
    1f0a:	82 95       	swap	r24
    1f0c:	80 7f       	andi	r24, 0xF0	; 240
    1f0e:	9f 77       	andi	r25, 0x7F	; 127
    1f10:	89 2b       	or	r24, r25
    1f12:	8b b9       	out	0x0b, r24	; 11
    1f14:	5c 9a       	sbi	0x0b, 4	; 11
    1f16:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <delay_us.constprop.0>
    1f1a:	5c 98       	cbi	0x0b, 4	; 11
    1f1c:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <delay_us.constprop.0>
    1f20:	08 95       	ret

00001f22 <_ZN12OrangutanLCD4sendEhhh>:
    1f22:	a0 e0       	ldi	r26, 0x00	; 0
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	e7 e9       	ldi	r30, 0x97	; 151
    1f28:	ff e0       	ldi	r31, 0x0F	; 15
    1f2a:	0c 94 3a 15 	jmp	0x2a74	; 0x2a74 <__prologue_saves__+0x16>
    1f2e:	c8 2f       	mov	r28, r24
    1f30:	d6 2e       	mov	r13, r22
    1f32:	e4 2e       	mov	r14, r20
    1f34:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <_ZZN12OrangutanLCD4initEvE11initialized>
    1f38:	81 11       	cpse	r24, r1
    1f3a:	05 c0       	rjmp	.+10     	; 0x1f46 <_ZN12OrangutanLCD4sendEhhh+0x24>
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <_ZZN12OrangutanLCD4initEvE11initialized>
    1f42:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_ZN12OrangutanLCD5init2Ev>
    1f46:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <_ZN12OrangutanLCD8busyWaitEv>
    1f4a:	14 b1       	in	r17, 0x04	; 4
    1f4c:	d5 b1       	in	r29, 0x05	; 5
    1f4e:	fa b0       	in	r15, 0x0a	; 10
    1f50:	0b b1       	in	r16, 0x0b	; 11
    1f52:	28 98       	cbi	0x05, 0	; 5
    1f54:	dd 20       	and	r13, r13
    1f56:	11 f0       	breq	.+4      	; 0x1f5c <_ZN12OrangutanLCD4sendEhhh+0x3a>
    1f58:	5a 9a       	sbi	0x0b, 2	; 11
    1f5a:	01 c0       	rjmp	.+2      	; 0x1f5e <_ZN12OrangutanLCD4sendEhhh+0x3c>
    1f5c:	5a 98       	cbi	0x0b, 2	; 11
    1f5e:	94 b1       	in	r25, 0x04	; 4
    1f60:	92 63       	ori	r25, 0x32	; 50
    1f62:	94 b9       	out	0x04, r25	; 4
    1f64:	57 9a       	sbi	0x0a, 7	; 10
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	e8 16       	cp	r14, r24
    1f6a:	29 f0       	breq	.+10     	; 0x1f76 <_ZN12OrangutanLCD4sendEhhh+0x54>
    1f6c:	8c 2f       	mov	r24, r28
    1f6e:	82 95       	swap	r24
    1f70:	8f 70       	andi	r24, 0x0F	; 15
    1f72:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <_ZN12OrangutanLCD8sendDataEh>
    1f76:	8c 2f       	mov	r24, r28
    1f78:	8f 70       	andi	r24, 0x0F	; 15
    1f7a:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <_ZN12OrangutanLCD8sendDataEh>
    1f7e:	fa b8       	out	0x0a, r15	; 10
    1f80:	0b b9       	out	0x0b, r16	; 11
    1f82:	14 b9       	out	0x04, r17	; 4
    1f84:	d5 b9       	out	0x05, r29	; 5
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
    1f8a:	e7 e0       	ldi	r30, 0x07	; 7
    1f8c:	0c 94 56 15 	jmp	0x2aac	; 0x2aac <__epilogue_restores__+0x16>

00001f90 <_ZN12OrangutanLCD8send_cmdEh>:
    1f90:	42 e0       	ldi	r20, 0x02	; 2
    1f92:	60 e0       	ldi	r22, 0x00	; 0
    1f94:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <_ZN12OrangutanLCD4sendEhhh>
    1f98:	08 95       	ret

00001f9a <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    1f9a:	41 e0       	ldi	r20, 0x01	; 1
    1f9c:	60 e0       	ldi	r22, 0x00	; 0
    1f9e:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <_ZN12OrangutanLCD4sendEhhh>
    1fa2:	08 95       	ret

00001fa4 <_ZN12OrangutanLCD5init2Ev>:
    1fa4:	80 e1       	ldi	r24, 0x10	; 16
    1fa6:	97 e2       	ldi	r25, 0x27	; 39
    1fa8:	a0 e0       	ldi	r26, 0x00	; 0
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <lcdTimeout>
    1fb0:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <lcdTimeout+0x1>
    1fb4:	a0 93 45 01 	sts	0x0145, r26	; 0x800145 <lcdTimeout+0x2>
    1fb8:	b0 93 46 01 	sts	0x0146, r27	; 0x800146 <lcdTimeout+0x3>
    1fbc:	52 9a       	sbi	0x0a, 2	; 10
    1fbe:	20 9a       	sbi	0x04, 0	; 4
    1fc0:	54 9a       	sbi	0x0a, 4	; 10
    1fc2:	8e e1       	ldi	r24, 0x1E	; 30
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	0e 94 3b 11 	call	0x2276	; 0x2276 <delay_ms>
    1fca:	83 e0       	ldi	r24, 0x03	; 3
    1fcc:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1fd0:	86 e0       	ldi	r24, 0x06	; 6
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	0e 94 3b 11 	call	0x2276	; 0x2276 <delay_ms>
    1fd8:	83 e0       	ldi	r24, 0x03	; 3
    1fda:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1fde:	82 e0       	ldi	r24, 0x02	; 2
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	0e 94 3b 11 	call	0x2276	; 0x2276 <delay_ms>
    1fe6:	83 e0       	ldi	r24, 0x03	; 3
    1fe8:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1fec:	82 e0       	ldi	r24, 0x02	; 2
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	0e 94 3b 11 	call	0x2276	; 0x2276 <delay_ms>
    1ff4:	82 e0       	ldi	r24, 0x02	; 2
    1ff6:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1ffa:	82 e0       	ldi	r24, 0x02	; 2
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	0e 94 3b 11 	call	0x2276	; 0x2276 <delay_ms>
    2002:	88 e2       	ldi	r24, 0x28	; 40
    2004:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <_ZN12OrangutanLCD8send_cmdEh>
    2008:	88 e0       	ldi	r24, 0x08	; 8
    200a:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <_ZN12OrangutanLCD8send_cmdEh>
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <_ZN12OrangutanLCD8send_cmdEh>
    2014:	86 e0       	ldi	r24, 0x06	; 6
    2016:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <_ZN12OrangutanLCD8send_cmdEh>
    201a:	8c e0       	ldi	r24, 0x0C	; 12
    201c:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <_ZN12OrangutanLCD8send_cmdEh>
    2020:	08 95       	ret

00002022 <_ZN12OrangutanLCD5clearEv>:
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <_ZN12OrangutanLCD8send_cmdEh>
    2028:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <printf_chars>
    202c:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <printf_chars+0x1>
    2030:	89 2b       	or	r24, r25
    2032:	f9 f0       	breq	.+62     	; 0x2072 <_ZN12OrangutanLCD5clearEv+0x50>
    2034:	60 e0       	ldi	r22, 0x00	; 0
    2036:	a0 e2       	ldi	r26, 0x20	; 32
    2038:	26 2f       	mov	r18, r22
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <numLCDCols>
    2040:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <numLCDRows>
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	01 97       	sbiw	r24, 0x01	; 1
    2048:	78 9f       	mul	r23, r24
    204a:	a0 01       	movw	r20, r0
    204c:	79 9f       	mul	r23, r25
    204e:	50 0d       	add	r21, r0
    2050:	11 24       	eor	r1, r1
    2052:	24 17       	cp	r18, r20
    2054:	35 07       	cpc	r19, r21
    2056:	4c f4       	brge	.+18     	; 0x206a <_ZN12OrangutanLCD5clearEv+0x48>
    2058:	e0 91 49 01 	lds	r30, 0x0149	; 0x800149 <printf_chars>
    205c:	f0 91 4a 01 	lds	r31, 0x014A	; 0x80014a <printf_chars+0x1>
    2060:	e2 0f       	add	r30, r18
    2062:	f3 1f       	adc	r31, r19
    2064:	a0 83       	st	Z, r26
    2066:	6f 5f       	subi	r22, 0xFF	; 255
    2068:	e7 cf       	rjmp	.-50     	; 0x2038 <_ZN12OrangutanLCD5clearEv+0x16>
    206a:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <col>
    206e:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <row>
    2072:	08 95       	ret

00002074 <clear>:
    2074:	0e 94 11 10 	call	0x2022	; 0x2022 <_ZN12OrangutanLCD5clearEv>
    2078:	08 95       	ret

0000207a <_ZN16OrangutanDigital9setOutputEhh>:
    207a:	88 30       	cpi	r24, 0x08	; 8
    207c:	58 f4       	brcc	.+22     	; 0x2094 <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    207e:	91 e0       	ldi	r25, 0x01	; 1
    2080:	01 c0       	rjmp	.+2      	; 0x2084 <_ZN16OrangutanDigital9setOutputEhh+0xa>
    2082:	99 0f       	add	r25, r25
    2084:	8a 95       	dec	r24
    2086:	ea f7       	brpl	.-6      	; 0x2082 <_ZN16OrangutanDigital9setOutputEhh+0x8>
    2088:	89 2f       	mov	r24, r25
    208a:	aa e2       	ldi	r26, 0x2A	; 42
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	eb e2       	ldi	r30, 0x2B	; 43
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	21 c0       	rjmp	.+66     	; 0x20d6 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    2094:	8e 30       	cpi	r24, 0x0E	; 14
    2096:	60 f4       	brcc	.+24     	; 0x20b0 <_ZN16OrangutanDigital9setOutputEhh+0x36>
    2098:	98 ef       	ldi	r25, 0xF8	; 248
    209a:	98 0f       	add	r25, r24
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	01 c0       	rjmp	.+2      	; 0x20a2 <_ZN16OrangutanDigital9setOutputEhh+0x28>
    20a0:	88 0f       	add	r24, r24
    20a2:	9a 95       	dec	r25
    20a4:	ea f7       	brpl	.-6      	; 0x20a0 <_ZN16OrangutanDigital9setOutputEhh+0x26>
    20a6:	a4 e2       	ldi	r26, 0x24	; 36
    20a8:	b0 e0       	ldi	r27, 0x00	; 0
    20aa:	e5 e2       	ldi	r30, 0x25	; 37
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	13 c0       	rjmp	.+38     	; 0x20d6 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    20b0:	85 31       	cpi	r24, 0x15	; 21
    20b2:	60 f4       	brcc	.+24     	; 0x20cc <_ZN16OrangutanDigital9setOutputEhh+0x52>
    20b4:	92 ef       	ldi	r25, 0xF2	; 242
    20b6:	98 0f       	add	r25, r24
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	01 c0       	rjmp	.+2      	; 0x20be <_ZN16OrangutanDigital9setOutputEhh+0x44>
    20bc:	88 0f       	add	r24, r24
    20be:	9a 95       	dec	r25
    20c0:	ea f7       	brpl	.-6      	; 0x20bc <_ZN16OrangutanDigital9setOutputEhh+0x42>
    20c2:	a7 e2       	ldi	r26, 0x27	; 39
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	e8 e2       	ldi	r30, 0x28	; 40
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	05 c0       	rjmp	.+10     	; 0x20d6 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	a0 e0       	ldi	r26, 0x00	; 0
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	e0 e0       	ldi	r30, 0x00	; 0
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	6f 3f       	cpi	r22, 0xFF	; 255
    20d8:	19 f4       	brne	.+6      	; 0x20e0 <_ZN16OrangutanDigital9setOutputEhh+0x66>
    20da:	90 81       	ld	r25, Z
    20dc:	98 27       	eor	r25, r24
    20de:	09 c0       	rjmp	.+18     	; 0x20f2 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    20e0:	66 23       	and	r22, r22
    20e2:	19 f0       	breq	.+6      	; 0x20ea <_ZN16OrangutanDigital9setOutputEhh+0x70>
    20e4:	90 81       	ld	r25, Z
    20e6:	98 2b       	or	r25, r24
    20e8:	04 c0       	rjmp	.+8      	; 0x20f2 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    20ea:	20 81       	ld	r18, Z
    20ec:	98 2f       	mov	r25, r24
    20ee:	90 95       	com	r25
    20f0:	92 23       	and	r25, r18
    20f2:	90 83       	st	Z, r25
    20f4:	9c 91       	ld	r25, X
    20f6:	98 2b       	or	r25, r24
    20f8:	9c 93       	st	X, r25
    20fa:	08 95       	ret

000020fc <_ZN15OrangutanMotors5init2Ev>:
    20fc:	83 ef       	ldi	r24, 0xF3	; 243
    20fe:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2102:	84 bd       	out	0x24, r24	; 36
    2104:	82 e0       	ldi	r24, 0x02	; 2
    2106:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    210a:	85 bd       	out	0x25, r24	; 37
    210c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    2110:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    2114:	18 bc       	out	0x28, r1	; 40
    2116:	17 bc       	out	0x27, r1	; 39
    2118:	60 e0       	ldi	r22, 0x00	; 0
    211a:	86 e0       	ldi	r24, 0x06	; 6
    211c:	0e 94 3d 10 	call	0x207a	; 0x207a <_ZN16OrangutanDigital9setOutputEhh>
    2120:	60 e0       	ldi	r22, 0x00	; 0
    2122:	85 e0       	ldi	r24, 0x05	; 5
    2124:	0e 94 3d 10 	call	0x207a	; 0x207a <_ZN16OrangutanDigital9setOutputEhh>
    2128:	60 e0       	ldi	r22, 0x00	; 0
    212a:	8b e0       	ldi	r24, 0x0B	; 11
    212c:	0e 94 3d 10 	call	0x207a	; 0x207a <_ZN16OrangutanDigital9setOutputEhh>
    2130:	60 e0       	ldi	r22, 0x00	; 0
    2132:	83 e0       	ldi	r24, 0x03	; 3
    2134:	0e 94 3d 10 	call	0x207a	; 0x207a <_ZN16OrangutanDigital9setOutputEhh>
    2138:	08 95       	ret

0000213a <_ZN15OrangutanMotors4initEv>:
    213a:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <_ZZN15OrangutanMotors4initEvE11initialized>
    213e:	81 11       	cpse	r24, r1
    2140:	05 c0       	rjmp	.+10     	; 0x214c <_ZN15OrangutanMotors4initEv+0x12>
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <_ZZN15OrangutanMotors4initEvE11initialized>
    2148:	0e 94 7e 10 	call	0x20fc	; 0x20fc <_ZN15OrangutanMotors5init2Ev>
    214c:	08 95       	ret

0000214e <_ZN15OrangutanMotors10setM1SpeedEi>:
    214e:	cf 93       	push	r28
    2150:	df 93       	push	r29
    2152:	ec 01       	movw	r28, r24
    2154:	0e 94 9d 10 	call	0x213a	; 0x213a <_ZN15OrangutanMotors4initEv>
    2158:	d7 ff       	sbrs	r29, 7
    215a:	05 c0       	rjmp	.+10     	; 0x2166 <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    215c:	d1 95       	neg	r29
    215e:	c1 95       	neg	r28
    2160:	d1 09       	sbc	r29, r1
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	01 c0       	rjmp	.+2      	; 0x2168 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    2166:	80 e0       	ldi	r24, 0x00	; 0
    2168:	cf 3f       	cpi	r28, 0xFF	; 255
    216a:	d1 05       	cpc	r29, r1
    216c:	19 f0       	breq	.+6      	; 0x2174 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    216e:	14 f0       	brlt	.+4      	; 0x2174 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    2170:	cf ef       	ldi	r28, 0xFF	; 255
    2172:	d0 e0       	ldi	r29, 0x00	; 0
    2174:	88 23       	and	r24, r24
    2176:	19 f0       	breq	.+6      	; 0x217e <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    2178:	18 bc       	out	0x28, r1	; 40
    217a:	c7 bd       	out	0x27, r28	; 39
    217c:	02 c0       	rjmp	.+4      	; 0x2182 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    217e:	c8 bd       	out	0x28, r28	; 40
    2180:	17 bc       	out	0x27, r1	; 39
    2182:	df 91       	pop	r29
    2184:	cf 91       	pop	r28
    2186:	08 95       	ret

00002188 <_ZN15OrangutanMotors10setM2SpeedEi>:
    2188:	cf 93       	push	r28
    218a:	df 93       	push	r29
    218c:	ec 01       	movw	r28, r24
    218e:	0e 94 9d 10 	call	0x213a	; 0x213a <_ZN15OrangutanMotors4initEv>
    2192:	d7 ff       	sbrs	r29, 7
    2194:	05 c0       	rjmp	.+10     	; 0x21a0 <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    2196:	d1 95       	neg	r29
    2198:	c1 95       	neg	r28
    219a:	d1 09       	sbc	r29, r1
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	01 c0       	rjmp	.+2      	; 0x21a2 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	cf 3f       	cpi	r28, 0xFF	; 255
    21a4:	d1 05       	cpc	r29, r1
    21a6:	19 f0       	breq	.+6      	; 0x21ae <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    21a8:	14 f0       	brlt	.+4      	; 0x21ae <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    21aa:	cf ef       	ldi	r28, 0xFF	; 255
    21ac:	d0 e0       	ldi	r29, 0x00	; 0
    21ae:	88 23       	and	r24, r24
    21b0:	29 f0       	breq	.+10     	; 0x21bc <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    21b2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    21b6:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    21ba:	04 c0       	rjmp	.+8      	; 0x21c4 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    21bc:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    21c0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    21c4:	df 91       	pop	r29
    21c6:	cf 91       	pop	r28
    21c8:	08 95       	ret

000021ca <_ZN15OrangutanMotors9setSpeedsEii>:
    21ca:	cf 93       	push	r28
    21cc:	df 93       	push	r29
    21ce:	eb 01       	movw	r28, r22
    21d0:	0e 94 a7 10 	call	0x214e	; 0x214e <_ZN15OrangutanMotors10setM1SpeedEi>
    21d4:	ce 01       	movw	r24, r28
    21d6:	0e 94 c4 10 	call	0x2188	; 0x2188 <_ZN15OrangutanMotors10setM2SpeedEi>
    21da:	df 91       	pop	r29
    21dc:	cf 91       	pop	r28
    21de:	08 95       	ret

000021e0 <set_motors>:
    21e0:	0e 94 e5 10 	call	0x21ca	; 0x21ca <_ZN15OrangutanMotors9setSpeedsEii>
    21e4:	08 95       	ret

000021e6 <__vector_9>:
    21e6:	2f 92       	push	r2
    21e8:	8f 93       	push	r24
    21ea:	9f 93       	push	r25
    21ec:	2f b6       	in	r2, 0x3f	; 63
    21ee:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <tickCount+0x1>
    21f2:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <tickCount+0x2>
    21f6:	01 96       	adiw	r24, 0x01	; 1
    21f8:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <tickCount+0x1>
    21fc:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <tickCount+0x2>
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <tickCount+0x3>
    2206:	89 1f       	adc	r24, r25
    2208:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <tickCount+0x3>
    220c:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <us_over_10+0x1>
    2210:	9c 5f       	subi	r25, 0xFC	; 252
    2212:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <us_over_10+0x1>
    2216:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <us_over_10>
    221a:	80 51       	subi	r24, 0x10	; 16
    221c:	97 42       	sbci	r25, 0x27	; 39
    221e:	c0 f0       	brcs	.+48     	; 0x2250 <end>
    2220:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <us_over_10+0x1>
    2224:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <us_over_10>
    2228:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <msCounter>
    222c:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <msCounter+0x1>
    2230:	01 96       	adiw	r24, 0x01	; 1
    2232:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <msCounter>
    2236:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <msCounter+0x1>
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <msCounter+0x2>
    2240:	89 1f       	adc	r24, r25
    2242:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <msCounter+0x2>
    2246:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <msCounter+0x3>
    224a:	89 1f       	adc	r24, r25
    224c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <msCounter+0x3>

00002250 <end>:
    2250:	2f be       	out	0x3f, r2	; 63
    2252:	9f 91       	pop	r25
    2254:	8f 91       	pop	r24
    2256:	2f 90       	pop	r2
    2258:	18 95       	reti

0000225a <_ZN13OrangutanTime17delayMillisecondsEj>:
    225a:	28 ee       	ldi	r18, 0xE8	; 232
    225c:	33 e0       	ldi	r19, 0x03	; 3
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	48 f0       	brcs	.+18     	; 0x2274 <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    2262:	f9 01       	movw	r30, r18
    2264:	6f 93       	push	r22
    2266:	64 e0       	ldi	r22, 0x04	; 4
    2268:	6a 95       	dec	r22
    226a:	f1 f7       	brne	.-4      	; 0x2268 <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    226c:	6f 91       	pop	r22
    226e:	31 97       	sbiw	r30, 0x01	; 1
    2270:	c9 f7       	brne	.-14     	; 0x2264 <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    2272:	f5 cf       	rjmp	.-22     	; 0x225e <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    2274:	08 95       	ret

00002276 <delay_ms>:
    2276:	0e 94 2d 11 	call	0x225a	; 0x225a <_ZN13OrangutanTime17delayMillisecondsEj>
    227a:	08 95       	ret

0000227c <_ZN13OrangutanTime5init2Ev>:
    227c:	e0 e7       	ldi	r30, 0x70	; 112
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	8e 7f       	andi	r24, 0xFE	; 254
    2284:	80 83       	st	Z, r24
    2286:	a0 eb       	ldi	r26, 0xB0	; 176
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	8c 91       	ld	r24, X
    228c:	83 60       	ori	r24, 0x03	; 3
    228e:	8c 93       	st	X, r24
    2290:	a1 eb       	ldi	r26, 0xB1	; 177
    2292:	b0 e0       	ldi	r27, 0x00	; 0
    2294:	8c 91       	ld	r24, X
    2296:	80 7f       	andi	r24, 0xF0	; 240
    2298:	8c 93       	st	X, r24
    229a:	8c 91       	ld	r24, X
    229c:	82 60       	ori	r24, 0x02	; 2
    229e:	8c 93       	st	X, r24
    22a0:	b8 9a       	sbi	0x17, 0	; 23
    22a2:	80 81       	ld	r24, Z
    22a4:	81 60       	ori	r24, 0x01	; 1
    22a6:	80 83       	st	Z, r24
    22a8:	78 94       	sei
    22aa:	08 95       	ret

000022ac <_ZN13OrangutanTime4initEv>:
    22ac:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <_ZZN13OrangutanTime4initEvE11initialized>
    22b0:	81 11       	cpse	r24, r1
    22b2:	05 c0       	rjmp	.+10     	; 0x22be <_ZN13OrangutanTime4initEv+0x12>
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <_ZZN13OrangutanTime4initEvE11initialized>
    22ba:	0e 94 3e 11 	call	0x227c	; 0x227c <_ZN13OrangutanTime5init2Ev>
    22be:	08 95       	ret

000022c0 <_ZN13OrangutanTime2msEv>:
    22c0:	0e 94 56 11 	call	0x22ac	; 0x22ac <_ZN13OrangutanTime4initEv>
    22c4:	e0 e7       	ldi	r30, 0x70	; 112
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
    22ca:	8e 7f       	andi	r24, 0xFE	; 254
    22cc:	80 83       	st	Z, r24
    22ce:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <msCounter>
    22d2:	70 91 4e 01 	lds	r23, 0x014E	; 0x80014e <msCounter+0x1>
    22d6:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <msCounter+0x2>
    22da:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <msCounter+0x3>
    22de:	20 81       	ld	r18, Z
    22e0:	21 60       	ori	r18, 0x01	; 1
    22e2:	20 83       	st	Z, r18
    22e4:	08 95       	ret

000022e6 <get_ms>:
    22e6:	0e 94 60 11 	call	0x22c0	; 0x22c0 <_ZN13OrangutanTime2msEv>
    22ea:	08 95       	ret

000022ec <read_line>:
    22ec:	46 2f       	mov	r20, r22
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	bc 01       	movw	r22, r24
    22f2:	85 e5       	ldi	r24, 0x55	; 85
    22f4:	91 e0       	ldi	r25, 0x01	; 1
    22f6:	0e 94 13 14 	call	0x2826	; 0x2826 <_ZN16PololuQTRSensors8readLineEPjhh>
    22fa:	08 95       	ret

000022fc <_GLOBAL__sub_D_pololu_3pi_init>:
    22fc:	85 e5       	ldi	r24, 0x55	; 85
    22fe:	91 e0       	ldi	r25, 0x01	; 1
    2300:	0e 94 88 14 	call	0x2910	; 0x2910 <_ZN16PololuQTRSensorsD1Ev>
    2304:	08 95       	ret

00002306 <delay_us>:
    2306:	6f 93       	push	r22
    2308:	64 e0       	ldi	r22, 0x04	; 4
    230a:	6a 95       	dec	r22
    230c:	f1 f7       	brne	.-4      	; 0x230a <delay_us+0x4>
    230e:	6f 91       	pop	r22
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	c9 f7       	brne	.-14     	; 0x2306 <delay_us>
    2314:	08 95       	ret

00002316 <_ZN16PololuQTRSensors11emittersOffEv>:
    2316:	fc 01       	movw	r30, r24
    2318:	a4 85       	ldd	r26, Z+12	; 0x0c
    231a:	b5 85       	ldd	r27, Z+13	; 0x0d
    231c:	10 97       	sbiw	r26, 0x00	; 0
    231e:	79 f0       	breq	.+30     	; 0x233e <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    2320:	8c 91       	ld	r24, X
    2322:	91 85       	ldd	r25, Z+9	; 0x09
    2324:	89 2b       	or	r24, r25
    2326:	8c 93       	st	X, r24
    2328:	a2 85       	ldd	r26, Z+10	; 0x0a
    232a:	b3 85       	ldd	r27, Z+11	; 0x0b
    232c:	9c 91       	ld	r25, X
    232e:	81 85       	ldd	r24, Z+9	; 0x09
    2330:	80 95       	com	r24
    2332:	89 23       	and	r24, r25
    2334:	8c 93       	st	X, r24
    2336:	88 ec       	ldi	r24, 0xC8	; 200
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	0e 94 83 11 	call	0x2306	; 0x2306 <delay_us>
    233e:	08 95       	ret

00002340 <_ZN16PololuQTRSensors10emittersOnEv>:
    2340:	fc 01       	movw	r30, r24
    2342:	a4 85       	ldd	r26, Z+12	; 0x0c
    2344:	b5 85       	ldd	r27, Z+13	; 0x0d
    2346:	10 97       	sbiw	r26, 0x00	; 0
    2348:	71 f0       	breq	.+28     	; 0x2366 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    234a:	8c 91       	ld	r24, X
    234c:	91 85       	ldd	r25, Z+9	; 0x09
    234e:	89 2b       	or	r24, r25
    2350:	8c 93       	st	X, r24
    2352:	a2 85       	ldd	r26, Z+10	; 0x0a
    2354:	b3 85       	ldd	r27, Z+11	; 0x0b
    2356:	8c 91       	ld	r24, X
    2358:	91 85       	ldd	r25, Z+9	; 0x09
    235a:	89 2b       	or	r24, r25
    235c:	8c 93       	st	X, r24
    235e:	88 ec       	ldi	r24, 0xC8	; 200
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	0e 94 83 11 	call	0x2306	; 0x2306 <delay_us>
    2366:	08 95       	ret

00002368 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    2368:	a0 e0       	ldi	r26, 0x00	; 0
    236a:	b0 e0       	ldi	r27, 0x00	; 0
    236c:	ea eb       	ldi	r30, 0xBA	; 186
    236e:	f1 e1       	ldi	r31, 0x11	; 17
    2370:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__prologue_saves__+0xa>
    2374:	ec 01       	movw	r28, r24
    2376:	5b 01       	movw	r10, r22
    2378:	6c 01       	movw	r12, r24
    237a:	81 e4       	ldi	r24, 0x41	; 65
    237c:	c8 0e       	add	r12, r24
    237e:	d1 1c       	adc	r13, r1
    2380:	f6 01       	movw	r30, r12
    2382:	80 80       	ld	r8, Z
    2384:	7e 01       	movw	r14, r28
    2386:	f2 e4       	ldi	r31, 0x42	; 66
    2388:	ef 0e       	add	r14, r31
    238a:	f1 1c       	adc	r15, r1
    238c:	f7 01       	movw	r30, r14
    238e:	70 80       	ld	r7, Z
    2390:	8e 01       	movw	r16, r28
    2392:	0d 5b       	subi	r16, 0xBD	; 189
    2394:	1f 4f       	sbci	r17, 0xFF	; 255
    2396:	f8 01       	movw	r30, r16
    2398:	90 80       	ld	r9, Z
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	98 85       	ldd	r25, Y+8	; 0x08
    239e:	89 17       	cp	r24, r25
    23a0:	48 f4       	brcc	.+18     	; 0x23b4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    23a2:	f5 01       	movw	r30, r10
    23a4:	e8 0f       	add	r30, r24
    23a6:	f1 1d       	adc	r31, r1
    23a8:	e8 0f       	add	r30, r24
    23aa:	f1 1d       	adc	r31, r1
    23ac:	11 82       	std	Z+1, r1	; 0x01
    23ae:	10 82       	st	Z, r1
    23b0:	8f 5f       	subi	r24, 0xFF	; 255
    23b2:	f4 cf       	rjmp	.-24     	; 0x239c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    23b4:	84 b1       	in	r24, 0x04	; 4
    23b6:	f6 01       	movw	r30, r12
    23b8:	90 81       	ld	r25, Z
    23ba:	89 2b       	or	r24, r25
    23bc:	84 b9       	out	0x04, r24	; 4
    23be:	87 b1       	in	r24, 0x07	; 7
    23c0:	f7 01       	movw	r30, r14
    23c2:	90 81       	ld	r25, Z
    23c4:	89 2b       	or	r24, r25
    23c6:	87 b9       	out	0x07, r24	; 7
    23c8:	8a b1       	in	r24, 0x0a	; 10
    23ca:	f8 01       	movw	r30, r16
    23cc:	90 81       	ld	r25, Z
    23ce:	89 2b       	or	r24, r25
    23d0:	8a b9       	out	0x0a, r24	; 10
    23d2:	85 b1       	in	r24, 0x05	; 5
    23d4:	f6 01       	movw	r30, r12
    23d6:	90 81       	ld	r25, Z
    23d8:	89 2b       	or	r24, r25
    23da:	85 b9       	out	0x05, r24	; 5
    23dc:	88 b1       	in	r24, 0x08	; 8
    23de:	f7 01       	movw	r30, r14
    23e0:	90 81       	ld	r25, Z
    23e2:	89 2b       	or	r24, r25
    23e4:	88 b9       	out	0x08, r24	; 8
    23e6:	8b b1       	in	r24, 0x0b	; 11
    23e8:	f8 01       	movw	r30, r16
    23ea:	90 81       	ld	r25, Z
    23ec:	89 2b       	or	r24, r25
    23ee:	8b b9       	out	0x0b, r24	; 11
    23f0:	8a e0       	ldi	r24, 0x0A	; 10
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	0e 94 83 11 	call	0x2306	; 0x2306 <delay_us>
    23f8:	94 b1       	in	r25, 0x04	; 4
    23fa:	f6 01       	movw	r30, r12
    23fc:	80 81       	ld	r24, Z
    23fe:	80 95       	com	r24
    2400:	89 23       	and	r24, r25
    2402:	84 b9       	out	0x04, r24	; 4
    2404:	97 b1       	in	r25, 0x07	; 7
    2406:	f7 01       	movw	r30, r14
    2408:	80 81       	ld	r24, Z
    240a:	80 95       	com	r24
    240c:	89 23       	and	r24, r25
    240e:	87 b9       	out	0x07, r24	; 7
    2410:	9a b1       	in	r25, 0x0a	; 10
    2412:	f8 01       	movw	r30, r16
    2414:	80 81       	ld	r24, Z
    2416:	80 95       	com	r24
    2418:	89 23       	and	r24, r25
    241a:	8a b9       	out	0x0a, r24	; 10
    241c:	95 b1       	in	r25, 0x05	; 5
    241e:	f6 01       	movw	r30, r12
    2420:	80 81       	ld	r24, Z
    2422:	80 95       	com	r24
    2424:	89 23       	and	r24, r25
    2426:	85 b9       	out	0x05, r24	; 5
    2428:	98 b1       	in	r25, 0x08	; 8
    242a:	f7 01       	movw	r30, r14
    242c:	80 81       	ld	r24, Z
    242e:	80 95       	com	r24
    2430:	89 23       	and	r24, r25
    2432:	88 b9       	out	0x08, r24	; 8
    2434:	9b b1       	in	r25, 0x0b	; 11
    2436:	f8 01       	movw	r30, r16
    2438:	80 81       	ld	r24, Z
    243a:	80 95       	com	r24
    243c:	89 23       	and	r24, r25
    243e:	8b b9       	out	0x0b, r24	; 11
    2440:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2444:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2448:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    244c:	83 60       	ori	r24, 0x03	; 3
    244e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2452:	82 e0       	ldi	r24, 0x02	; 2
    2454:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2458:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	2e 85       	ldd	r18, Y+14	; 0x0e
    2462:	3f 85       	ldd	r19, Y+15	; 0x0f
    2464:	82 17       	cp	r24, r18
    2466:	93 07       	cpc	r25, r19
    2468:	20 f5       	brcc	.+72     	; 0x24b2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    246a:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    246e:	2c 2d       	mov	r18, r12
    2470:	24 1b       	sub	r18, r20
    2472:	82 0f       	add	r24, r18
    2474:	91 1d       	adc	r25, r1
    2476:	03 b1       	in	r16, 0x03	; 3
    2478:	08 11       	cpse	r16, r8
    247a:	32 c0       	rjmp	.+100    	; 0x24e0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    247c:	f6 b0       	in	r15, 0x06	; 6
    247e:	f7 10       	cpse	r15, r7
    2480:	2f c0       	rjmp	.+94     	; 0x24e0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2482:	29 b1       	in	r18, 0x09	; 9
    2484:	29 11       	cpse	r18, r9
    2486:	2c c0       	rjmp	.+88     	; 0x24e0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2488:	10 c0       	rjmp	.+32     	; 0x24aa <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    248a:	21 2f       	mov	r18, r17
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	a9 01       	movw	r20, r18
    2490:	44 0f       	add	r20, r20
    2492:	55 1f       	adc	r21, r21
    2494:	f5 01       	movw	r30, r10
    2496:	e4 0f       	add	r30, r20
    2498:	f5 1f       	adc	r31, r21
    249a:	60 81       	ld	r22, Z
    249c:	71 81       	ldd	r23, Z+1	; 0x01
    249e:	67 2b       	or	r22, r23
    24a0:	21 f1       	breq	.+72     	; 0x24ea <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    24a2:	1f 5f       	subi	r17, 0xFF	; 255
    24a4:	28 85       	ldd	r18, Y+8	; 0x08
    24a6:	12 17       	cp	r17, r18
    24a8:	80 f3       	brcs	.-32     	; 0x248a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    24aa:	7f 2c       	mov	r7, r15
    24ac:	80 2e       	mov	r8, r16
    24ae:	4c 2d       	mov	r20, r12
    24b0:	d7 cf       	rjmp	.-82     	; 0x2460 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    24b2:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    24b6:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	88 85       	ldd	r24, Y+8	; 0x08
    24be:	28 17       	cp	r18, r24
    24c0:	30 f5       	brcc	.+76     	; 0x250e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    24c2:	f5 01       	movw	r30, r10
    24c4:	e2 0f       	add	r30, r18
    24c6:	f1 1d       	adc	r31, r1
    24c8:	e2 0f       	add	r30, r18
    24ca:	f1 1d       	adc	r31, r1
    24cc:	80 81       	ld	r24, Z
    24ce:	91 81       	ldd	r25, Z+1	; 0x01
    24d0:	89 2b       	or	r24, r25
    24d2:	21 f4       	brne	.+8      	; 0x24dc <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    24d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    24d6:	9f 85       	ldd	r25, Y+15	; 0x0f
    24d8:	91 83       	std	Z+1, r25	; 0x01
    24da:	80 83       	st	Z, r24
    24dc:	2f 5f       	subi	r18, 0xFF	; 255
    24de:	ee cf       	rjmp	.-36     	; 0x24bc <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    24e0:	03 b1       	in	r16, 0x03	; 3
    24e2:	f6 b0       	in	r15, 0x06	; 6
    24e4:	99 b0       	in	r9, 0x09	; 9
    24e6:	10 e0       	ldi	r17, 0x00	; 0
    24e8:	dd cf       	rjmp	.-70     	; 0x24a4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    24ea:	de 01       	movw	r26, r28
    24ec:	a4 0f       	add	r26, r20
    24ee:	b5 1f       	adc	r27, r21
    24f0:	91 96       	adiw	r26, 0x21	; 33
    24f2:	0d 90       	ld	r0, X+
    24f4:	bc 91       	ld	r27, X
    24f6:	a0 2d       	mov	r26, r0
    24f8:	4c 91       	ld	r20, X
    24fa:	de 01       	movw	r26, r28
    24fc:	a2 0f       	add	r26, r18
    24fe:	b3 1f       	adc	r27, r19
    2500:	51 96       	adiw	r26, 0x11	; 17
    2502:	2c 91       	ld	r18, X
    2504:	42 23       	and	r20, r18
    2506:	69 f6       	brne	.-102    	; 0x24a2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    2508:	91 83       	std	Z+1, r25	; 0x01
    250a:	80 83       	st	Z, r24
    250c:	ca cf       	rjmp	.-108    	; 0x24a2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    250e:	cd b7       	in	r28, 0x3d	; 61
    2510:	de b7       	in	r29, 0x3e	; 62
    2512:	ed e0       	ldi	r30, 0x0D	; 13
    2514:	0c 94 50 15 	jmp	0x2aa0	; 0x2aa0 <__epilogue_restores__+0xa>

00002518 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    2518:	ef 92       	push	r14
    251a:	ff 92       	push	r15
    251c:	0f 93       	push	r16
    251e:	1f 93       	push	r17
    2520:	cf 93       	push	r28
    2522:	df 93       	push	r29
    2524:	fc 01       	movw	r30, r24
    2526:	9b 01       	movw	r18, r22
    2528:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    252c:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2530:	47 b1       	in	r20, 0x07	; 7
    2532:	18 b1       	in	r17, 0x08	; 8
    2534:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2538:	86 fd       	sbrc	r24, 6
    253a:	fc cf       	rjmp	.-8      	; 0x2534 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	90 85       	ldd	r25, Z+8	; 0x08
    2540:	89 17       	cp	r24, r25
    2542:	48 f4       	brcc	.+18     	; 0x2556 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    2544:	d9 01       	movw	r26, r18
    2546:	a8 0f       	add	r26, r24
    2548:	b1 1d       	adc	r27, r1
    254a:	a8 0f       	add	r26, r24
    254c:	b1 1d       	adc	r27, r1
    254e:	1d 92       	st	X+, r1
    2550:	1c 92       	st	X, r1
    2552:	8f 5f       	subi	r24, 0xFF	; 255
    2554:	f4 cf       	rjmp	.-24     	; 0x253e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    2556:	97 b1       	in	r25, 0x07	; 7
    2558:	82 a1       	ldd	r24, Z+34	; 0x22
    255a:	80 95       	com	r24
    255c:	89 23       	and	r24, r25
    255e:	87 b9       	out	0x07, r24	; 7
    2560:	98 b1       	in	r25, 0x08	; 8
    2562:	82 a1       	ldd	r24, Z+34	; 0x22
    2564:	80 95       	com	r24
    2566:	89 23       	and	r24, r25
    2568:	88 b9       	out	0x08, r24	; 8
    256a:	87 e8       	ldi	r24, 0x87	; 135
    256c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2570:	e1 2c       	mov	r14, r1
    2572:	81 a1       	ldd	r24, Z+33	; 0x21
    2574:	e8 16       	cp	r14, r24
    2576:	10 f0       	brcs	.+4      	; 0x257c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    2578:	e1 2c       	mov	r14, r1
    257a:	29 c0       	rjmp	.+82     	; 0x25ce <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    257c:	50 e0       	ldi	r21, 0x00	; 0
    257e:	80 85       	ldd	r24, Z+8	; 0x08
    2580:	58 17       	cp	r21, r24
    2582:	18 f5       	brcc	.+70     	; 0x25ca <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    2584:	a5 2f       	mov	r26, r21
    2586:	b0 e0       	ldi	r27, 0x00	; 0
    2588:	ef 01       	movw	r28, r30
    258a:	ca 0f       	add	r28, r26
    258c:	db 1f       	adc	r29, r27
    258e:	89 89       	ldd	r24, Y+17	; 0x11
    2590:	80 64       	ori	r24, 0x40	; 64
    2592:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2596:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    259a:	80 64       	ori	r24, 0x40	; 64
    259c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    25a0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    25a4:	86 fd       	sbrc	r24, 6
    25a6:	fc cf       	rjmp	.-8      	; 0x25a0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    25a8:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    25ac:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    25b0:	aa 0f       	add	r26, r26
    25b2:	bb 1f       	adc	r27, r27
    25b4:	a2 0f       	add	r26, r18
    25b6:	b3 1f       	adc	r27, r19
    25b8:	8d 91       	ld	r24, X+
    25ba:	9c 91       	ld	r25, X
    25bc:	11 97       	sbiw	r26, 0x01	; 1
    25be:	86 0f       	add	r24, r22
    25c0:	97 1f       	adc	r25, r23
    25c2:	8d 93       	st	X+, r24
    25c4:	9c 93       	st	X, r25
    25c6:	5f 5f       	subi	r21, 0xFF	; 255
    25c8:	da cf       	rjmp	.-76     	; 0x257e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    25ca:	e3 94       	inc	r14
    25cc:	d2 cf       	rjmp	.-92     	; 0x2572 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    25ce:	80 85       	ldd	r24, Z+8	; 0x08
    25d0:	e8 16       	cp	r14, r24
    25d2:	a0 f4       	brcc	.+40     	; 0x25fc <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    25d4:	e9 01       	movw	r28, r18
    25d6:	ce 0d       	add	r28, r14
    25d8:	d1 1d       	adc	r29, r1
    25da:	ce 0d       	add	r28, r14
    25dc:	d1 1d       	adc	r29, r1
    25de:	61 a1       	ldd	r22, Z+33	; 0x21
    25e0:	70 e0       	ldi	r23, 0x00	; 0
    25e2:	cb 01       	movw	r24, r22
    25e4:	95 95       	asr	r25
    25e6:	87 95       	ror	r24
    25e8:	a8 81       	ld	r26, Y
    25ea:	b9 81       	ldd	r27, Y+1	; 0x01
    25ec:	8a 0f       	add	r24, r26
    25ee:	9b 1f       	adc	r25, r27
    25f0:	0e 94 b2 14 	call	0x2964	; 0x2964 <__udivmodhi4>
    25f4:	79 83       	std	Y+1, r23	; 0x01
    25f6:	68 83       	st	Y, r22
    25f8:	e3 94       	inc	r14
    25fa:	e9 cf       	rjmp	.-46     	; 0x25ce <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    25fc:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2600:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2604:	18 b9       	out	0x08, r17	; 8
    2606:	47 b9       	out	0x07, r20	; 7
    2608:	cd b7       	in	r28, 0x3d	; 61
    260a:	de b7       	in	r29, 0x3e	; 62
    260c:	e6 e0       	ldi	r30, 0x06	; 6
    260e:	0c 94 57 15 	jmp	0x2aae	; 0x2aae <__epilogue_restores__+0x18>

00002612 <_ZN16PololuQTRSensors4readEPjh>:
    2612:	a0 e2       	ldi	r26, 0x20	; 32
    2614:	b0 e0       	ldi	r27, 0x00	; 0
    2616:	ef e0       	ldi	r30, 0x0F	; 15
    2618:	f3 e1       	ldi	r31, 0x13	; 19
    261a:	0c 94 3a 15 	jmp	0x2a74	; 0x2a74 <__prologue_saves__+0x16>
    261e:	8c 01       	movw	r16, r24
    2620:	7b 01       	movw	r14, r22
    2622:	d4 2e       	mov	r13, r20
    2624:	8f ef       	ldi	r24, 0xFF	; 255
    2626:	84 0f       	add	r24, r20
    2628:	82 30       	cpi	r24, 0x02	; 2
    262a:	18 f4       	brcc	.+6      	; 0x2632 <_ZN16PololuQTRSensors4readEPjh+0x20>
    262c:	c8 01       	movw	r24, r16
    262e:	0e 94 a0 11 	call	0x2340	; 0x2340 <_ZN16PololuQTRSensors10emittersOnEv>
    2632:	d8 01       	movw	r26, r16
    2634:	50 96       	adiw	r26, 0x10	; 16
    2636:	8c 91       	ld	r24, X
    2638:	b7 01       	movw	r22, r14
    263a:	81 11       	cpse	r24, r1
    263c:	10 c0       	rjmp	.+32     	; 0x265e <_ZN16PololuQTRSensors4readEPjh+0x4c>
    263e:	c8 01       	movw	r24, r16
    2640:	0e 94 b4 11 	call	0x2368	; 0x2368 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2644:	c8 01       	movw	r24, r16
    2646:	0e 94 8b 11 	call	0x2316	; 0x2316 <_ZN16PololuQTRSensors11emittersOffEv>
    264a:	b2 e0       	ldi	r27, 0x02	; 2
    264c:	db 12       	cpse	r13, r27
    264e:	3a c0       	rjmp	.+116    	; 0x26c4 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2650:	be 01       	movw	r22, r28
    2652:	6f 5f       	subi	r22, 0xFF	; 255
    2654:	7f 4f       	sbci	r23, 0xFF	; 255
    2656:	c8 01       	movw	r24, r16
    2658:	0e 94 b4 11 	call	0x2368	; 0x2368 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    265c:	0f c0       	rjmp	.+30     	; 0x267c <_ZN16PololuQTRSensors4readEPjh+0x6a>
    265e:	c8 01       	movw	r24, r16
    2660:	0e 94 8c 12 	call	0x2518	; 0x2518 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2664:	c8 01       	movw	r24, r16
    2666:	0e 94 8b 11 	call	0x2316	; 0x2316 <_ZN16PololuQTRSensors11emittersOffEv>
    266a:	e2 e0       	ldi	r30, 0x02	; 2
    266c:	de 12       	cpse	r13, r30
    266e:	2a c0       	rjmp	.+84     	; 0x26c4 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2670:	be 01       	movw	r22, r28
    2672:	6f 5f       	subi	r22, 0xFF	; 255
    2674:	7f 4f       	sbci	r23, 0xFF	; 255
    2676:	c8 01       	movw	r24, r16
    2678:	0e 94 8c 12 	call	0x2518	; 0x2518 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    267c:	40 e0       	ldi	r20, 0x00	; 0
    267e:	f8 01       	movw	r30, r16
    2680:	80 85       	ldd	r24, Z+8	; 0x08
    2682:	48 17       	cp	r20, r24
    2684:	f8 f4       	brcc	.+62     	; 0x26c4 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2686:	84 2f       	mov	r24, r20
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	88 0f       	add	r24, r24
    268c:	99 1f       	adc	r25, r25
    268e:	f7 01       	movw	r30, r14
    2690:	e8 0f       	add	r30, r24
    2692:	f9 1f       	adc	r31, r25
    2694:	21 e0       	ldi	r18, 0x01	; 1
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	2c 0f       	add	r18, r28
    269a:	3d 1f       	adc	r19, r29
    269c:	82 0f       	add	r24, r18
    269e:	93 1f       	adc	r25, r19
    26a0:	d8 01       	movw	r26, r16
    26a2:	1e 96       	adiw	r26, 0x0e	; 14
    26a4:	2d 91       	ld	r18, X+
    26a6:	3c 91       	ld	r19, X
    26a8:	1f 97       	sbiw	r26, 0x0f	; 15
    26aa:	dc 01       	movw	r26, r24
    26ac:	8d 91       	ld	r24, X+
    26ae:	9c 91       	ld	r25, X
    26b0:	28 1b       	sub	r18, r24
    26b2:	39 0b       	sbc	r19, r25
    26b4:	80 81       	ld	r24, Z
    26b6:	91 81       	ldd	r25, Z+1	; 0x01
    26b8:	82 0f       	add	r24, r18
    26ba:	93 1f       	adc	r25, r19
    26bc:	91 83       	std	Z+1, r25	; 0x01
    26be:	80 83       	st	Z, r24
    26c0:	4f 5f       	subi	r20, 0xFF	; 255
    26c2:	dd cf       	rjmp	.-70     	; 0x267e <_ZN16PololuQTRSensors4readEPjh+0x6c>
    26c4:	a0 96       	adiw	r28, 0x20	; 32
    26c6:	e7 e0       	ldi	r30, 0x07	; 7
    26c8:	0c 94 56 15 	jmp	0x2aac	; 0x2aac <__epilogue_restores__+0x16>

000026cc <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    26cc:	a0 e0       	ldi	r26, 0x00	; 0
    26ce:	b0 e0       	ldi	r27, 0x00	; 0
    26d0:	ec e6       	ldi	r30, 0x6C	; 108
    26d2:	f3 e1       	ldi	r31, 0x13	; 19
    26d4:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <__prologue_saves__+0x12>
    26d8:	ec 01       	movw	r28, r24
    26da:	8b 01       	movw	r16, r22
    26dc:	b4 2e       	mov	r11, r20
    26de:	84 2f       	mov	r24, r20
    26e0:	8d 7f       	andi	r24, 0xFD	; 253
    26e2:	51 f4       	brne	.+20     	; 0x26f8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    26e4:	8c 81       	ldd	r24, Y+4	; 0x04
    26e6:	9d 81       	ldd	r25, Y+5	; 0x05
    26e8:	89 2b       	or	r24, r25
    26ea:	09 f4       	brne	.+2      	; 0x26ee <_ZN16PololuQTRSensors14readCalibratedEPjh+0x22>
    26ec:	97 c0       	rjmp	.+302    	; 0x281c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    26ee:	8e 81       	ldd	r24, Y+6	; 0x06
    26f0:	9f 81       	ldd	r25, Y+7	; 0x07
    26f2:	89 2b       	or	r24, r25
    26f4:	09 f4       	brne	.+2      	; 0x26f8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    26f6:	92 c0       	rjmp	.+292    	; 0x281c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    26f8:	8f ef       	ldi	r24, 0xFF	; 255
    26fa:	8b 0d       	add	r24, r11
    26fc:	82 30       	cpi	r24, 0x02	; 2
    26fe:	50 f4       	brcc	.+20     	; 0x2714 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    2700:	88 81       	ld	r24, Y
    2702:	99 81       	ldd	r25, Y+1	; 0x01
    2704:	89 2b       	or	r24, r25
    2706:	09 f4       	brne	.+2      	; 0x270a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3e>
    2708:	89 c0       	rjmp	.+274    	; 0x281c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    270a:	8a 81       	ldd	r24, Y+2	; 0x02
    270c:	9b 81       	ldd	r25, Y+3	; 0x03
    270e:	89 2b       	or	r24, r25
    2710:	09 f4       	brne	.+2      	; 0x2714 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    2712:	84 c0       	rjmp	.+264    	; 0x281c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2714:	4b 2d       	mov	r20, r11
    2716:	b8 01       	movw	r22, r16
    2718:	ce 01       	movw	r24, r28
    271a:	0e 94 09 13 	call	0x2612	; 0x2612 <_ZN16PololuQTRSensors4readEPjh>
    271e:	78 01       	movw	r14, r16
    2720:	00 e0       	ldi	r16, 0x00	; 0
    2722:	10 e0       	ldi	r17, 0x00	; 0
    2724:	c1 2c       	mov	r12, r1
    2726:	d1 2c       	mov	r13, r1
    2728:	88 85       	ldd	r24, Y+8	; 0x08
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	c8 16       	cp	r12, r24
    272e:	d9 06       	cpc	r13, r25
    2730:	0c f0       	brlt	.+2      	; 0x2734 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x68>
    2732:	74 c0       	rjmp	.+232    	; 0x281c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	b8 12       	cpse	r11, r24
    2738:	0a c0       	rjmp	.+20     	; 0x274e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x82>
    273a:	ea 81       	ldd	r30, Y+2	; 0x02
    273c:	fb 81       	ldd	r31, Y+3	; 0x03
    273e:	e0 0f       	add	r30, r16
    2740:	f1 1f       	adc	r31, r17
    2742:	01 90       	ld	r0, Z+
    2744:	f0 81       	ld	r31, Z
    2746:	e0 2d       	mov	r30, r0
    2748:	a8 81       	ld	r26, Y
    274a:	b9 81       	ldd	r27, Y+1	; 0x01
    274c:	0d c0       	rjmp	.+26     	; 0x2768 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x9c>
    274e:	8c 81       	ldd	r24, Y+4	; 0x04
    2750:	9d 81       	ldd	r25, Y+5	; 0x05
    2752:	2e 81       	ldd	r18, Y+6	; 0x06
    2754:	3f 81       	ldd	r19, Y+7	; 0x07
    2756:	b1 10       	cpse	r11, r1
    2758:	0c c0       	rjmp	.+24     	; 0x2772 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    275a:	f9 01       	movw	r30, r18
    275c:	e0 0f       	add	r30, r16
    275e:	f1 1f       	adc	r31, r17
    2760:	01 90       	ld	r0, Z+
    2762:	f0 81       	ld	r31, Z
    2764:	e0 2d       	mov	r30, r0
    2766:	dc 01       	movw	r26, r24
    2768:	a0 0f       	add	r26, r16
    276a:	b1 1f       	adc	r27, r17
    276c:	8d 91       	ld	r24, X+
    276e:	9c 91       	ld	r25, X
    2770:	28 c0       	rjmp	.+80     	; 0x27c2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    2772:	fc 01       	movw	r30, r24
    2774:	e0 0f       	add	r30, r16
    2776:	f1 1f       	adc	r31, r17
    2778:	40 81       	ld	r20, Z
    277a:	51 81       	ldd	r21, Z+1	; 0x01
    277c:	e8 81       	ld	r30, Y
    277e:	f9 81       	ldd	r31, Y+1	; 0x01
    2780:	e0 0f       	add	r30, r16
    2782:	f1 1f       	adc	r31, r17
    2784:	80 81       	ld	r24, Z
    2786:	91 81       	ldd	r25, Z+1	; 0x01
    2788:	ee 85       	ldd	r30, Y+14	; 0x0e
    278a:	ff 85       	ldd	r31, Y+15	; 0x0f
    278c:	48 17       	cp	r20, r24
    278e:	59 07       	cpc	r21, r25
    2790:	10 f4       	brcc	.+4      	; 0x2796 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xca>
    2792:	cf 01       	movw	r24, r30
    2794:	04 c0       	rjmp	.+8      	; 0x279e <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd2>
    2796:	8e 0f       	add	r24, r30
    2798:	9f 1f       	adc	r25, r31
    279a:	84 1b       	sub	r24, r20
    279c:	95 0b       	sbc	r25, r21
    279e:	d9 01       	movw	r26, r18
    27a0:	a0 0f       	add	r26, r16
    27a2:	b1 1f       	adc	r27, r17
    27a4:	2d 91       	ld	r18, X+
    27a6:	3c 91       	ld	r19, X
    27a8:	aa 81       	ldd	r26, Y+2	; 0x02
    27aa:	bb 81       	ldd	r27, Y+3	; 0x03
    27ac:	a0 0f       	add	r26, r16
    27ae:	b1 1f       	adc	r27, r17
    27b0:	4d 91       	ld	r20, X+
    27b2:	5c 91       	ld	r21, X
    27b4:	24 17       	cp	r18, r20
    27b6:	35 07       	cpc	r19, r21
    27b8:	20 f0       	brcs	.+8      	; 0x27c2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    27ba:	e4 0f       	add	r30, r20
    27bc:	f5 1f       	adc	r31, r21
    27be:	e2 1b       	sub	r30, r18
    27c0:	f3 0b       	sbc	r31, r19
    27c2:	e8 1b       	sub	r30, r24
    27c4:	f9 0b       	sbc	r31, r25
    27c6:	a9 f0       	breq	.+42     	; 0x27f2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x126>
    27c8:	d7 01       	movw	r26, r14
    27ca:	2d 91       	ld	r18, X+
    27cc:	3c 91       	ld	r19, X
    27ce:	40 e0       	ldi	r20, 0x00	; 0
    27d0:	50 e0       	ldi	r21, 0x00	; 0
    27d2:	28 1b       	sub	r18, r24
    27d4:	39 0b       	sbc	r19, r25
    27d6:	41 09       	sbc	r20, r1
    27d8:	51 09       	sbc	r21, r1
    27da:	a8 ee       	ldi	r26, 0xE8	; 232
    27dc:	b3 e0       	ldi	r27, 0x03	; 3
    27de:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <__muluhisi3>
    27e2:	9f 01       	movw	r18, r30
    27e4:	40 e0       	ldi	r20, 0x00	; 0
    27e6:	50 e0       	ldi	r21, 0x00	; 0
    27e8:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <__divmodsi4>
    27ec:	37 fd       	sbrc	r19, 7
    27ee:	0a c0       	rjmp	.+20     	; 0x2804 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x138>
    27f0:	02 c0       	rjmp	.+4      	; 0x27f6 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x12a>
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	29 3e       	cpi	r18, 0xE9	; 233
    27f8:	b3 e0       	ldi	r27, 0x03	; 3
    27fa:	3b 07       	cpc	r19, r27
    27fc:	2c f0       	brlt	.+10     	; 0x2808 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    27fe:	28 ee       	ldi	r18, 0xE8	; 232
    2800:	33 e0       	ldi	r19, 0x03	; 3
    2802:	02 c0       	rjmp	.+4      	; 0x2808 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	f7 01       	movw	r30, r14
    280a:	21 93       	st	Z+, r18
    280c:	31 93       	st	Z+, r19
    280e:	7f 01       	movw	r14, r30
    2810:	ff ef       	ldi	r31, 0xFF	; 255
    2812:	cf 1a       	sub	r12, r31
    2814:	df 0a       	sbc	r13, r31
    2816:	0e 5f       	subi	r16, 0xFE	; 254
    2818:	1f 4f       	sbci	r17, 0xFF	; 255
    281a:	86 cf       	rjmp	.-244    	; 0x2728 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x5c>
    281c:	cd b7       	in	r28, 0x3d	; 61
    281e:	de b7       	in	r29, 0x3e	; 62
    2820:	e9 e0       	ldi	r30, 0x09	; 9
    2822:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <__epilogue_restores__+0x12>

00002826 <_ZN16PololuQTRSensors8readLineEPjhh>:
    2826:	a0 e0       	ldi	r26, 0x00	; 0
    2828:	b0 e0       	ldi	r27, 0x00	; 0
    282a:	e9 e1       	ldi	r30, 0x19	; 25
    282c:	f4 e1       	ldi	r31, 0x14	; 20
    282e:	0c 94 2f 15 	jmp	0x2a5e	; 0x2a5e <__prologue_saves__>
    2832:	ec 01       	movw	r28, r24
    2834:	8b 01       	movw	r16, r22
    2836:	82 2e       	mov	r8, r18
    2838:	0e 94 66 13 	call	0x26cc	; 0x26cc <_ZN16PololuQTRSensors14readCalibratedEPjh>
    283c:	28 84       	ldd	r2, Y+8	; 0x08
    283e:	e8 01       	movw	r28, r16
    2840:	41 2c       	mov	r4, r1
    2842:	51 2c       	mov	r5, r1
    2844:	32 01       	movw	r6, r4
    2846:	00 e0       	ldi	r16, 0x00	; 0
    2848:	10 e0       	ldi	r17, 0x00	; 0
    284a:	c1 2c       	mov	r12, r1
    284c:	d1 2c       	mov	r13, r1
    284e:	76 01       	movw	r14, r12
    2850:	31 2c       	mov	r3, r1
    2852:	91 2c       	mov	r9, r1
    2854:	58 ee       	ldi	r21, 0xE8	; 232
    2856:	a5 2e       	mov	r10, r21
    2858:	53 e0       	ldi	r21, 0x03	; 3
    285a:	b5 2e       	mov	r11, r21
    285c:	92 14       	cp	r9, r2
    285e:	21 f1       	breq	.+72     	; 0x28a8 <_ZN16PololuQTRSensors8readLineEPjhh+0x82>
    2860:	e9 91       	ld	r30, Y+
    2862:	f9 91       	ld	r31, Y+
    2864:	88 20       	and	r8, r8
    2866:	21 f0       	breq	.+8      	; 0x2870 <_ZN16PololuQTRSensors8readLineEPjhh+0x4a>
    2868:	c5 01       	movw	r24, r10
    286a:	8e 1b       	sub	r24, r30
    286c:	9f 0b       	sbc	r25, r31
    286e:	fc 01       	movw	r30, r24
    2870:	e9 3c       	cpi	r30, 0xC9	; 201
    2872:	f1 05       	cpc	r31, r1
    2874:	24 f4       	brge	.+8      	; 0x287e <_ZN16PololuQTRSensors8readLineEPjhh+0x58>
    2876:	e3 33       	cpi	r30, 0x33	; 51
    2878:	f1 05       	cpc	r31, r1
    287a:	74 f0       	brlt	.+28     	; 0x2898 <_ZN16PololuQTRSensors8readLineEPjhh+0x72>
    287c:	02 c0       	rjmp	.+4      	; 0x2882 <_ZN16PololuQTRSensors8readLineEPjhh+0x5c>
    287e:	33 24       	eor	r3, r3
    2880:	33 94       	inc	r3
    2882:	df 01       	movw	r26, r30
    2884:	a3 01       	movw	r20, r6
    2886:	92 01       	movw	r18, r4
    2888:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <__mulshisi3>
    288c:	c6 0e       	add	r12, r22
    288e:	d7 1e       	adc	r13, r23
    2890:	e8 1e       	adc	r14, r24
    2892:	f9 1e       	adc	r15, r25
    2894:	0e 0f       	add	r16, r30
    2896:	1f 1f       	adc	r17, r31
    2898:	93 94       	inc	r9
    289a:	98 ee       	ldi	r25, 0xE8	; 232
    289c:	49 0e       	add	r4, r25
    289e:	93 e0       	ldi	r25, 0x03	; 3
    28a0:	59 1e       	adc	r5, r25
    28a2:	61 1c       	adc	r6, r1
    28a4:	71 1c       	adc	r7, r1
    28a6:	da cf       	rjmp	.-76     	; 0x285c <_ZN16PololuQTRSensors8readLineEPjhh+0x36>
    28a8:	31 10       	cpse	r3, r1
    28aa:	1e c0       	rjmp	.+60     	; 0x28e8 <_ZN16PololuQTRSensors8readLineEPjhh+0xc2>
    28ac:	49 2d       	mov	r20, r9
    28ae:	50 e0       	ldi	r21, 0x00	; 0
    28b0:	41 50       	subi	r20, 0x01	; 1
    28b2:	51 09       	sbc	r21, r1
    28b4:	24 ef       	ldi	r18, 0xF4	; 244
    28b6:	31 e0       	ldi	r19, 0x01	; 1
    28b8:	42 9f       	mul	r20, r18
    28ba:	c0 01       	movw	r24, r0
    28bc:	43 9f       	mul	r20, r19
    28be:	90 0d       	add	r25, r0
    28c0:	52 9f       	mul	r21, r18
    28c2:	90 0d       	add	r25, r0
    28c4:	11 24       	eor	r1, r1
    28c6:	20 91 99 01 	lds	r18, 0x0199	; 0x800199 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    28ca:	30 91 9a 01 	lds	r19, 0x019A	; 0x80019a <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    28ce:	28 17       	cp	r18, r24
    28d0:	39 07       	cpc	r19, r25
    28d2:	b4 f0       	brlt	.+44     	; 0x2900 <_ZN16PololuQTRSensors8readLineEPjhh+0xda>
    28d4:	88 ee       	ldi	r24, 0xE8	; 232
    28d6:	93 e0       	ldi	r25, 0x03	; 3
    28d8:	48 9f       	mul	r20, r24
    28da:	90 01       	movw	r18, r0
    28dc:	49 9f       	mul	r20, r25
    28de:	30 0d       	add	r19, r0
    28e0:	58 9f       	mul	r21, r24
    28e2:	30 0d       	add	r19, r0
    28e4:	11 24       	eor	r1, r1
    28e6:	0e c0       	rjmp	.+28     	; 0x2904 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    28e8:	98 01       	movw	r18, r16
    28ea:	40 e0       	ldi	r20, 0x00	; 0
    28ec:	50 e0       	ldi	r21, 0x00	; 0
    28ee:	c7 01       	movw	r24, r14
    28f0:	b6 01       	movw	r22, r12
    28f2:	0e 94 c6 14 	call	0x298c	; 0x298c <__udivmodsi4>
    28f6:	30 93 9a 01 	sts	0x019A, r19	; 0x80019a <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    28fa:	20 93 99 01 	sts	0x0199, r18	; 0x800199 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    28fe:	02 c0       	rjmp	.+4      	; 0x2904 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	c9 01       	movw	r24, r18
    2906:	cd b7       	in	r28, 0x3d	; 61
    2908:	de b7       	in	r29, 0x3e	; 62
    290a:	e2 e1       	ldi	r30, 0x12	; 18
    290c:	0c 94 4b 15 	jmp	0x2a96	; 0x2a96 <__epilogue_restores__>

00002910 <_ZN16PololuQTRSensorsD1Ev>:
    2910:	cf 93       	push	r28
    2912:	df 93       	push	r29
    2914:	ec 01       	movw	r28, r24
    2916:	8a 81       	ldd	r24, Y+2	; 0x02
    2918:	9b 81       	ldd	r25, Y+3	; 0x03
    291a:	00 97       	sbiw	r24, 0x00	; 0
    291c:	11 f0       	breq	.+4      	; 0x2922 <_ZN16PololuQTRSensorsD1Ev+0x12>
    291e:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <free>
    2922:	8e 81       	ldd	r24, Y+6	; 0x06
    2924:	9f 81       	ldd	r25, Y+7	; 0x07
    2926:	00 97       	sbiw	r24, 0x00	; 0
    2928:	11 f0       	breq	.+4      	; 0x292e <_ZN16PololuQTRSensorsD1Ev+0x1e>
    292a:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <free>
    292e:	88 81       	ld	r24, Y
    2930:	99 81       	ldd	r25, Y+1	; 0x01
    2932:	00 97       	sbiw	r24, 0x00	; 0
    2934:	11 f0       	breq	.+4      	; 0x293a <_ZN16PololuQTRSensorsD1Ev+0x2a>
    2936:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <free>
    293a:	8c 81       	ldd	r24, Y+4	; 0x04
    293c:	9d 81       	ldd	r25, Y+5	; 0x05
    293e:	00 97       	sbiw	r24, 0x00	; 0
    2940:	11 f0       	breq	.+4      	; 0x2946 <_ZN16PololuQTRSensorsD1Ev+0x36>
    2942:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <free>
    2946:	df 91       	pop	r29
    2948:	cf 91       	pop	r28
    294a:	08 95       	ret

0000294c <__udivmodqi4>:
    294c:	99 1b       	sub	r25, r25
    294e:	79 e0       	ldi	r23, 0x09	; 9
    2950:	04 c0       	rjmp	.+8      	; 0x295a <__udivmodqi4_ep>

00002952 <__udivmodqi4_loop>:
    2952:	99 1f       	adc	r25, r25
    2954:	96 17       	cp	r25, r22
    2956:	08 f0       	brcs	.+2      	; 0x295a <__udivmodqi4_ep>
    2958:	96 1b       	sub	r25, r22

0000295a <__udivmodqi4_ep>:
    295a:	88 1f       	adc	r24, r24
    295c:	7a 95       	dec	r23
    295e:	c9 f7       	brne	.-14     	; 0x2952 <__udivmodqi4_loop>
    2960:	80 95       	com	r24
    2962:	08 95       	ret

00002964 <__udivmodhi4>:
    2964:	aa 1b       	sub	r26, r26
    2966:	bb 1b       	sub	r27, r27
    2968:	51 e1       	ldi	r21, 0x11	; 17
    296a:	07 c0       	rjmp	.+14     	; 0x297a <__udivmodhi4_ep>

0000296c <__udivmodhi4_loop>:
    296c:	aa 1f       	adc	r26, r26
    296e:	bb 1f       	adc	r27, r27
    2970:	a6 17       	cp	r26, r22
    2972:	b7 07       	cpc	r27, r23
    2974:	10 f0       	brcs	.+4      	; 0x297a <__udivmodhi4_ep>
    2976:	a6 1b       	sub	r26, r22
    2978:	b7 0b       	sbc	r27, r23

0000297a <__udivmodhi4_ep>:
    297a:	88 1f       	adc	r24, r24
    297c:	99 1f       	adc	r25, r25
    297e:	5a 95       	dec	r21
    2980:	a9 f7       	brne	.-22     	; 0x296c <__udivmodhi4_loop>
    2982:	80 95       	com	r24
    2984:	90 95       	com	r25
    2986:	bc 01       	movw	r22, r24
    2988:	cd 01       	movw	r24, r26
    298a:	08 95       	ret

0000298c <__udivmodsi4>:
    298c:	a1 e2       	ldi	r26, 0x21	; 33
    298e:	1a 2e       	mov	r1, r26
    2990:	aa 1b       	sub	r26, r26
    2992:	bb 1b       	sub	r27, r27
    2994:	fd 01       	movw	r30, r26
    2996:	0d c0       	rjmp	.+26     	; 0x29b2 <__udivmodsi4_ep>

00002998 <__udivmodsi4_loop>:
    2998:	aa 1f       	adc	r26, r26
    299a:	bb 1f       	adc	r27, r27
    299c:	ee 1f       	adc	r30, r30
    299e:	ff 1f       	adc	r31, r31
    29a0:	a2 17       	cp	r26, r18
    29a2:	b3 07       	cpc	r27, r19
    29a4:	e4 07       	cpc	r30, r20
    29a6:	f5 07       	cpc	r31, r21
    29a8:	20 f0       	brcs	.+8      	; 0x29b2 <__udivmodsi4_ep>
    29aa:	a2 1b       	sub	r26, r18
    29ac:	b3 0b       	sbc	r27, r19
    29ae:	e4 0b       	sbc	r30, r20
    29b0:	f5 0b       	sbc	r31, r21

000029b2 <__udivmodsi4_ep>:
    29b2:	66 1f       	adc	r22, r22
    29b4:	77 1f       	adc	r23, r23
    29b6:	88 1f       	adc	r24, r24
    29b8:	99 1f       	adc	r25, r25
    29ba:	1a 94       	dec	r1
    29bc:	69 f7       	brne	.-38     	; 0x2998 <__udivmodsi4_loop>
    29be:	60 95       	com	r22
    29c0:	70 95       	com	r23
    29c2:	80 95       	com	r24
    29c4:	90 95       	com	r25
    29c6:	9b 01       	movw	r18, r22
    29c8:	ac 01       	movw	r20, r24
    29ca:	bd 01       	movw	r22, r26
    29cc:	cf 01       	movw	r24, r30
    29ce:	08 95       	ret

000029d0 <__divmodsi4>:
    29d0:	05 2e       	mov	r0, r21
    29d2:	97 fb       	bst	r25, 7
    29d4:	1e f4       	brtc	.+6      	; 0x29dc <__divmodsi4+0xc>
    29d6:	00 94       	com	r0
    29d8:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__negsi2>
    29dc:	57 fd       	sbrc	r21, 7
    29de:	07 d0       	rcall	.+14     	; 0x29ee <__divmodsi4_neg2>
    29e0:	0e 94 c6 14 	call	0x298c	; 0x298c <__udivmodsi4>
    29e4:	07 fc       	sbrc	r0, 7
    29e6:	03 d0       	rcall	.+6      	; 0x29ee <__divmodsi4_neg2>
    29e8:	4e f4       	brtc	.+18     	; 0x29fc <__divmodsi4_exit>
    29ea:	0c 94 ff 14 	jmp	0x29fe	; 0x29fe <__negsi2>

000029ee <__divmodsi4_neg2>:
    29ee:	50 95       	com	r21
    29f0:	40 95       	com	r20
    29f2:	30 95       	com	r19
    29f4:	21 95       	neg	r18
    29f6:	3f 4f       	sbci	r19, 0xFF	; 255
    29f8:	4f 4f       	sbci	r20, 0xFF	; 255
    29fa:	5f 4f       	sbci	r21, 0xFF	; 255

000029fc <__divmodsi4_exit>:
    29fc:	08 95       	ret

000029fe <__negsi2>:
    29fe:	90 95       	com	r25
    2a00:	80 95       	com	r24
    2a02:	70 95       	com	r23
    2a04:	61 95       	neg	r22
    2a06:	7f 4f       	sbci	r23, 0xFF	; 255
    2a08:	8f 4f       	sbci	r24, 0xFF	; 255
    2a0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a0c:	08 95       	ret

00002a0e <__tablejump2__>:
    2a0e:	ee 0f       	add	r30, r30
    2a10:	ff 1f       	adc	r31, r31
    2a12:	05 90       	lpm	r0, Z+
    2a14:	f4 91       	lpm	r31, Z
    2a16:	e0 2d       	mov	r30, r0
    2a18:	09 94       	ijmp

00002a1a <__umulhisi3>:
    2a1a:	a2 9f       	mul	r26, r18
    2a1c:	b0 01       	movw	r22, r0
    2a1e:	b3 9f       	mul	r27, r19
    2a20:	c0 01       	movw	r24, r0
    2a22:	a3 9f       	mul	r26, r19
    2a24:	70 0d       	add	r23, r0
    2a26:	81 1d       	adc	r24, r1
    2a28:	11 24       	eor	r1, r1
    2a2a:	91 1d       	adc	r25, r1
    2a2c:	b2 9f       	mul	r27, r18
    2a2e:	70 0d       	add	r23, r0
    2a30:	81 1d       	adc	r24, r1
    2a32:	11 24       	eor	r1, r1
    2a34:	91 1d       	adc	r25, r1
    2a36:	08 95       	ret

00002a38 <__muluhisi3>:
    2a38:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <__umulhisi3>
    2a3c:	a5 9f       	mul	r26, r21
    2a3e:	90 0d       	add	r25, r0
    2a40:	b4 9f       	mul	r27, r20
    2a42:	90 0d       	add	r25, r0
    2a44:	a4 9f       	mul	r26, r20
    2a46:	80 0d       	add	r24, r0
    2a48:	91 1d       	adc	r25, r1
    2a4a:	11 24       	eor	r1, r1
    2a4c:	08 95       	ret

00002a4e <__mulshisi3>:
    2a4e:	b7 ff       	sbrs	r27, 7
    2a50:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <__muluhisi3>

00002a54 <__mulohisi3>:
    2a54:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <__muluhisi3>
    2a58:	82 1b       	sub	r24, r18
    2a5a:	93 0b       	sbc	r25, r19
    2a5c:	08 95       	ret

00002a5e <__prologue_saves__>:
    2a5e:	2f 92       	push	r2
    2a60:	3f 92       	push	r3
    2a62:	4f 92       	push	r4
    2a64:	5f 92       	push	r5
    2a66:	6f 92       	push	r6
    2a68:	7f 92       	push	r7
    2a6a:	8f 92       	push	r8
    2a6c:	9f 92       	push	r9
    2a6e:	af 92       	push	r10
    2a70:	bf 92       	push	r11
    2a72:	cf 92       	push	r12
    2a74:	df 92       	push	r13
    2a76:	ef 92       	push	r14
    2a78:	ff 92       	push	r15
    2a7a:	0f 93       	push	r16
    2a7c:	1f 93       	push	r17
    2a7e:	cf 93       	push	r28
    2a80:	df 93       	push	r29
    2a82:	cd b7       	in	r28, 0x3d	; 61
    2a84:	de b7       	in	r29, 0x3e	; 62
    2a86:	ca 1b       	sub	r28, r26
    2a88:	db 0b       	sbc	r29, r27
    2a8a:	0f b6       	in	r0, 0x3f	; 63
    2a8c:	f8 94       	cli
    2a8e:	de bf       	out	0x3e, r29	; 62
    2a90:	0f be       	out	0x3f, r0	; 63
    2a92:	cd bf       	out	0x3d, r28	; 61
    2a94:	09 94       	ijmp

00002a96 <__epilogue_restores__>:
    2a96:	2a 88       	ldd	r2, Y+18	; 0x12
    2a98:	39 88       	ldd	r3, Y+17	; 0x11
    2a9a:	48 88       	ldd	r4, Y+16	; 0x10
    2a9c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a9e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2aa0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2aa2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2aa4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2aa6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2aa8:	b9 84       	ldd	r11, Y+9	; 0x09
    2aaa:	c8 84       	ldd	r12, Y+8	; 0x08
    2aac:	df 80       	ldd	r13, Y+7	; 0x07
    2aae:	ee 80       	ldd	r14, Y+6	; 0x06
    2ab0:	fd 80       	ldd	r15, Y+5	; 0x05
    2ab2:	0c 81       	ldd	r16, Y+4	; 0x04
    2ab4:	1b 81       	ldd	r17, Y+3	; 0x03
    2ab6:	aa 81       	ldd	r26, Y+2	; 0x02
    2ab8:	b9 81       	ldd	r27, Y+1	; 0x01
    2aba:	ce 0f       	add	r28, r30
    2abc:	d1 1d       	adc	r29, r1
    2abe:	0f b6       	in	r0, 0x3f	; 63
    2ac0:	f8 94       	cli
    2ac2:	de bf       	out	0x3e, r29	; 62
    2ac4:	0f be       	out	0x3f, r0	; 63
    2ac6:	cd bf       	out	0x3d, r28	; 61
    2ac8:	ed 01       	movw	r28, r26
    2aca:	08 95       	ret

00002acc <malloc>:
    2acc:	0f 93       	push	r16
    2ace:	1f 93       	push	r17
    2ad0:	cf 93       	push	r28
    2ad2:	df 93       	push	r29
    2ad4:	82 30       	cpi	r24, 0x02	; 2
    2ad6:	91 05       	cpc	r25, r1
    2ad8:	10 f4       	brcc	.+4      	; 0x2ade <malloc+0x12>
    2ada:	82 e0       	ldi	r24, 0x02	; 2
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <__flp>
    2ae2:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <__flp+0x1>
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	a0 e0       	ldi	r26, 0x00	; 0
    2aec:	b0 e0       	ldi	r27, 0x00	; 0
    2aee:	30 97       	sbiw	r30, 0x00	; 0
    2af0:	19 f1       	breq	.+70     	; 0x2b38 <malloc+0x6c>
    2af2:	40 81       	ld	r20, Z
    2af4:	51 81       	ldd	r21, Z+1	; 0x01
    2af6:	02 81       	ldd	r16, Z+2	; 0x02
    2af8:	13 81       	ldd	r17, Z+3	; 0x03
    2afa:	48 17       	cp	r20, r24
    2afc:	59 07       	cpc	r21, r25
    2afe:	c8 f0       	brcs	.+50     	; 0x2b32 <malloc+0x66>
    2b00:	84 17       	cp	r24, r20
    2b02:	95 07       	cpc	r25, r21
    2b04:	69 f4       	brne	.+26     	; 0x2b20 <malloc+0x54>
    2b06:	10 97       	sbiw	r26, 0x00	; 0
    2b08:	31 f0       	breq	.+12     	; 0x2b16 <malloc+0x4a>
    2b0a:	12 96       	adiw	r26, 0x02	; 2
    2b0c:	0c 93       	st	X, r16
    2b0e:	12 97       	sbiw	r26, 0x02	; 2
    2b10:	13 96       	adiw	r26, 0x03	; 3
    2b12:	1c 93       	st	X, r17
    2b14:	27 c0       	rjmp	.+78     	; 0x2b64 <malloc+0x98>
    2b16:	00 93 0a 02 	sts	0x020A, r16	; 0x80020a <__flp>
    2b1a:	10 93 0b 02 	sts	0x020B, r17	; 0x80020b <__flp+0x1>
    2b1e:	22 c0       	rjmp	.+68     	; 0x2b64 <malloc+0x98>
    2b20:	21 15       	cp	r18, r1
    2b22:	31 05       	cpc	r19, r1
    2b24:	19 f0       	breq	.+6      	; 0x2b2c <malloc+0x60>
    2b26:	42 17       	cp	r20, r18
    2b28:	53 07       	cpc	r21, r19
    2b2a:	18 f4       	brcc	.+6      	; 0x2b32 <malloc+0x66>
    2b2c:	9a 01       	movw	r18, r20
    2b2e:	bd 01       	movw	r22, r26
    2b30:	ef 01       	movw	r28, r30
    2b32:	df 01       	movw	r26, r30
    2b34:	f8 01       	movw	r30, r16
    2b36:	db cf       	rjmp	.-74     	; 0x2aee <malloc+0x22>
    2b38:	21 15       	cp	r18, r1
    2b3a:	31 05       	cpc	r19, r1
    2b3c:	f9 f0       	breq	.+62     	; 0x2b7c <malloc+0xb0>
    2b3e:	28 1b       	sub	r18, r24
    2b40:	39 0b       	sbc	r19, r25
    2b42:	24 30       	cpi	r18, 0x04	; 4
    2b44:	31 05       	cpc	r19, r1
    2b46:	80 f4       	brcc	.+32     	; 0x2b68 <malloc+0x9c>
    2b48:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b4c:	61 15       	cp	r22, r1
    2b4e:	71 05       	cpc	r23, r1
    2b50:	21 f0       	breq	.+8      	; 0x2b5a <malloc+0x8e>
    2b52:	fb 01       	movw	r30, r22
    2b54:	93 83       	std	Z+3, r25	; 0x03
    2b56:	82 83       	std	Z+2, r24	; 0x02
    2b58:	04 c0       	rjmp	.+8      	; 0x2b62 <malloc+0x96>
    2b5a:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <__flp+0x1>
    2b5e:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <__flp>
    2b62:	fe 01       	movw	r30, r28
    2b64:	32 96       	adiw	r30, 0x02	; 2
    2b66:	44 c0       	rjmp	.+136    	; 0x2bf0 <malloc+0x124>
    2b68:	fe 01       	movw	r30, r28
    2b6a:	e2 0f       	add	r30, r18
    2b6c:	f3 1f       	adc	r31, r19
    2b6e:	81 93       	st	Z+, r24
    2b70:	91 93       	st	Z+, r25
    2b72:	22 50       	subi	r18, 0x02	; 2
    2b74:	31 09       	sbc	r19, r1
    2b76:	39 83       	std	Y+1, r19	; 0x01
    2b78:	28 83       	st	Y, r18
    2b7a:	3a c0       	rjmp	.+116    	; 0x2bf0 <malloc+0x124>
    2b7c:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <__brkval>
    2b80:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <__brkval+0x1>
    2b84:	23 2b       	or	r18, r19
    2b86:	41 f4       	brne	.+16     	; 0x2b98 <malloc+0xcc>
    2b88:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__malloc_heap_start>
    2b8c:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__malloc_heap_start+0x1>
    2b90:	30 93 09 02 	sts	0x0209, r19	; 0x800209 <__brkval+0x1>
    2b94:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <__brkval>
    2b98:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__malloc_heap_end>
    2b9c:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__malloc_heap_end+0x1>
    2ba0:	21 15       	cp	r18, r1
    2ba2:	31 05       	cpc	r19, r1
    2ba4:	41 f4       	brne	.+16     	; 0x2bb6 <malloc+0xea>
    2ba6:	2d b7       	in	r18, 0x3d	; 61
    2ba8:	3e b7       	in	r19, 0x3e	; 62
    2baa:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <__malloc_margin>
    2bae:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <__malloc_margin+0x1>
    2bb2:	24 1b       	sub	r18, r20
    2bb4:	35 0b       	sbc	r19, r21
    2bb6:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <__brkval>
    2bba:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <__brkval+0x1>
    2bbe:	e2 17       	cp	r30, r18
    2bc0:	f3 07       	cpc	r31, r19
    2bc2:	a0 f4       	brcc	.+40     	; 0x2bec <malloc+0x120>
    2bc4:	2e 1b       	sub	r18, r30
    2bc6:	3f 0b       	sbc	r19, r31
    2bc8:	28 17       	cp	r18, r24
    2bca:	39 07       	cpc	r19, r25
    2bcc:	78 f0       	brcs	.+30     	; 0x2bec <malloc+0x120>
    2bce:	ac 01       	movw	r20, r24
    2bd0:	4e 5f       	subi	r20, 0xFE	; 254
    2bd2:	5f 4f       	sbci	r21, 0xFF	; 255
    2bd4:	24 17       	cp	r18, r20
    2bd6:	35 07       	cpc	r19, r21
    2bd8:	48 f0       	brcs	.+18     	; 0x2bec <malloc+0x120>
    2bda:	4e 0f       	add	r20, r30
    2bdc:	5f 1f       	adc	r21, r31
    2bde:	50 93 09 02 	sts	0x0209, r21	; 0x800209 <__brkval+0x1>
    2be2:	40 93 08 02 	sts	0x0208, r20	; 0x800208 <__brkval>
    2be6:	81 93       	st	Z+, r24
    2be8:	91 93       	st	Z+, r25
    2bea:	02 c0       	rjmp	.+4      	; 0x2bf0 <malloc+0x124>
    2bec:	e0 e0       	ldi	r30, 0x00	; 0
    2bee:	f0 e0       	ldi	r31, 0x00	; 0
    2bf0:	cf 01       	movw	r24, r30
    2bf2:	df 91       	pop	r29
    2bf4:	cf 91       	pop	r28
    2bf6:	1f 91       	pop	r17
    2bf8:	0f 91       	pop	r16
    2bfa:	08 95       	ret

00002bfc <free>:
    2bfc:	cf 93       	push	r28
    2bfe:	df 93       	push	r29
    2c00:	00 97       	sbiw	r24, 0x00	; 0
    2c02:	09 f4       	brne	.+2      	; 0x2c06 <free+0xa>
    2c04:	81 c0       	rjmp	.+258    	; 0x2d08 <free+0x10c>
    2c06:	fc 01       	movw	r30, r24
    2c08:	32 97       	sbiw	r30, 0x02	; 2
    2c0a:	13 82       	std	Z+3, r1	; 0x03
    2c0c:	12 82       	std	Z+2, r1	; 0x02
    2c0e:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <__flp>
    2c12:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <__flp+0x1>
    2c16:	10 97       	sbiw	r26, 0x00	; 0
    2c18:	81 f4       	brne	.+32     	; 0x2c3a <free+0x3e>
    2c1a:	20 81       	ld	r18, Z
    2c1c:	31 81       	ldd	r19, Z+1	; 0x01
    2c1e:	82 0f       	add	r24, r18
    2c20:	93 1f       	adc	r25, r19
    2c22:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <__brkval>
    2c26:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <__brkval+0x1>
    2c2a:	28 17       	cp	r18, r24
    2c2c:	39 07       	cpc	r19, r25
    2c2e:	51 f5       	brne	.+84     	; 0x2c84 <free+0x88>
    2c30:	f0 93 09 02 	sts	0x0209, r31	; 0x800209 <__brkval+0x1>
    2c34:	e0 93 08 02 	sts	0x0208, r30	; 0x800208 <__brkval>
    2c38:	67 c0       	rjmp	.+206    	; 0x2d08 <free+0x10c>
    2c3a:	ed 01       	movw	r28, r26
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	ce 17       	cp	r28, r30
    2c42:	df 07       	cpc	r29, r31
    2c44:	40 f4       	brcc	.+16     	; 0x2c56 <free+0x5a>
    2c46:	4a 81       	ldd	r20, Y+2	; 0x02
    2c48:	5b 81       	ldd	r21, Y+3	; 0x03
    2c4a:	9e 01       	movw	r18, r28
    2c4c:	41 15       	cp	r20, r1
    2c4e:	51 05       	cpc	r21, r1
    2c50:	f1 f0       	breq	.+60     	; 0x2c8e <free+0x92>
    2c52:	ea 01       	movw	r28, r20
    2c54:	f5 cf       	rjmp	.-22     	; 0x2c40 <free+0x44>
    2c56:	d3 83       	std	Z+3, r29	; 0x03
    2c58:	c2 83       	std	Z+2, r28	; 0x02
    2c5a:	40 81       	ld	r20, Z
    2c5c:	51 81       	ldd	r21, Z+1	; 0x01
    2c5e:	84 0f       	add	r24, r20
    2c60:	95 1f       	adc	r25, r21
    2c62:	c8 17       	cp	r28, r24
    2c64:	d9 07       	cpc	r29, r25
    2c66:	59 f4       	brne	.+22     	; 0x2c7e <free+0x82>
    2c68:	88 81       	ld	r24, Y
    2c6a:	99 81       	ldd	r25, Y+1	; 0x01
    2c6c:	84 0f       	add	r24, r20
    2c6e:	95 1f       	adc	r25, r21
    2c70:	02 96       	adiw	r24, 0x02	; 2
    2c72:	91 83       	std	Z+1, r25	; 0x01
    2c74:	80 83       	st	Z, r24
    2c76:	8a 81       	ldd	r24, Y+2	; 0x02
    2c78:	9b 81       	ldd	r25, Y+3	; 0x03
    2c7a:	93 83       	std	Z+3, r25	; 0x03
    2c7c:	82 83       	std	Z+2, r24	; 0x02
    2c7e:	21 15       	cp	r18, r1
    2c80:	31 05       	cpc	r19, r1
    2c82:	29 f4       	brne	.+10     	; 0x2c8e <free+0x92>
    2c84:	f0 93 0b 02 	sts	0x020B, r31	; 0x80020b <__flp+0x1>
    2c88:	e0 93 0a 02 	sts	0x020A, r30	; 0x80020a <__flp>
    2c8c:	3d c0       	rjmp	.+122    	; 0x2d08 <free+0x10c>
    2c8e:	e9 01       	movw	r28, r18
    2c90:	fb 83       	std	Y+3, r31	; 0x03
    2c92:	ea 83       	std	Y+2, r30	; 0x02
    2c94:	49 91       	ld	r20, Y+
    2c96:	59 91       	ld	r21, Y+
    2c98:	c4 0f       	add	r28, r20
    2c9a:	d5 1f       	adc	r29, r21
    2c9c:	ec 17       	cp	r30, r28
    2c9e:	fd 07       	cpc	r31, r29
    2ca0:	61 f4       	brne	.+24     	; 0x2cba <free+0xbe>
    2ca2:	80 81       	ld	r24, Z
    2ca4:	91 81       	ldd	r25, Z+1	; 0x01
    2ca6:	84 0f       	add	r24, r20
    2ca8:	95 1f       	adc	r25, r21
    2caa:	02 96       	adiw	r24, 0x02	; 2
    2cac:	e9 01       	movw	r28, r18
    2cae:	99 83       	std	Y+1, r25	; 0x01
    2cb0:	88 83       	st	Y, r24
    2cb2:	82 81       	ldd	r24, Z+2	; 0x02
    2cb4:	93 81       	ldd	r25, Z+3	; 0x03
    2cb6:	9b 83       	std	Y+3, r25	; 0x03
    2cb8:	8a 83       	std	Y+2, r24	; 0x02
    2cba:	e0 e0       	ldi	r30, 0x00	; 0
    2cbc:	f0 e0       	ldi	r31, 0x00	; 0
    2cbe:	12 96       	adiw	r26, 0x02	; 2
    2cc0:	8d 91       	ld	r24, X+
    2cc2:	9c 91       	ld	r25, X
    2cc4:	13 97       	sbiw	r26, 0x03	; 3
    2cc6:	00 97       	sbiw	r24, 0x00	; 0
    2cc8:	19 f0       	breq	.+6      	; 0x2cd0 <free+0xd4>
    2cca:	fd 01       	movw	r30, r26
    2ccc:	dc 01       	movw	r26, r24
    2cce:	f7 cf       	rjmp	.-18     	; 0x2cbe <free+0xc2>
    2cd0:	8d 91       	ld	r24, X+
    2cd2:	9c 91       	ld	r25, X
    2cd4:	11 97       	sbiw	r26, 0x01	; 1
    2cd6:	9d 01       	movw	r18, r26
    2cd8:	2e 5f       	subi	r18, 0xFE	; 254
    2cda:	3f 4f       	sbci	r19, 0xFF	; 255
    2cdc:	82 0f       	add	r24, r18
    2cde:	93 1f       	adc	r25, r19
    2ce0:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <__brkval>
    2ce4:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <__brkval+0x1>
    2ce8:	28 17       	cp	r18, r24
    2cea:	39 07       	cpc	r19, r25
    2cec:	69 f4       	brne	.+26     	; 0x2d08 <free+0x10c>
    2cee:	30 97       	sbiw	r30, 0x00	; 0
    2cf0:	29 f4       	brne	.+10     	; 0x2cfc <free+0x100>
    2cf2:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <__flp+0x1>
    2cf6:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <__flp>
    2cfa:	02 c0       	rjmp	.+4      	; 0x2d00 <free+0x104>
    2cfc:	13 82       	std	Z+3, r1	; 0x03
    2cfe:	12 82       	std	Z+2, r1	; 0x02
    2d00:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <__brkval+0x1>
    2d04:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <__brkval>
    2d08:	df 91       	pop	r29
    2d0a:	cf 91       	pop	r28
    2d0c:	08 95       	ret

00002d0e <__do_global_dtors>:
    2d0e:	10 e0       	ldi	r17, 0x00	; 0
    2d10:	cd e5       	ldi	r28, 0x5D	; 93
    2d12:	d0 e0       	ldi	r29, 0x00	; 0
    2d14:	04 c0       	rjmp	.+8      	; 0x2d1e <__do_global_dtors+0x10>
    2d16:	fe 01       	movw	r30, r28
    2d18:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <__tablejump2__>
    2d1c:	21 96       	adiw	r28, 0x01	; 1
    2d1e:	ce 35       	cpi	r28, 0x5E	; 94
    2d20:	d1 07       	cpc	r29, r17
    2d22:	c9 f7       	brne	.-14     	; 0x2d16 <__do_global_dtors+0x8>
    2d24:	f8 94       	cli

00002d26 <__stop_program>:
    2d26:	ff cf       	rjmp	.-2      	; 0x2d26 <__stop_program>
