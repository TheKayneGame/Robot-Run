
RobotRunGrid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  000039d4  00003a68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000039d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000dd  00800162  00800162  00003aca  2**0
                  ALLOC
  3 .stab         00007464  00000000  00000000  00003acc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000a086  00000000  00000000  0000af30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  00014fb6  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00014ff8  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000130  00000000  00000000  00015038  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002b21  00000000  00000000  00015168  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000da7  00000000  00000000  00017c89  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001b5f  00000000  00000000  00018a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000410  00000000  00000000  0001a590  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000982  00000000  00000000  0001a9a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001788  00000000  00000000  0001b322  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000f8  00000000  00000000  0001caaa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__dtors_end>
       4:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
       8:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
       c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      10:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      14:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      18:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      1c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      20:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      24:	0c 94 16 15 	jmp	0x2a2c	; 0x2a2c <__vector_9>
      28:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      2c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      30:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      34:	0c 94 78 11 	jmp	0x22f0	; 0x22f0 <__vector_13>
      38:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      3c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      40:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      44:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      48:	0c 94 8e 14 	jmp	0x291c	; 0x291c <__vector_18>
      4c:	0c 94 f1 14 	jmp	0x29e2	; 0x29e2 <__vector_19>
      50:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      54:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      58:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      5c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      60:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      64:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
      68:	d8 01       	movw	r26, r16
      6a:	ce 01       	movw	r24, r28
      6c:	ce 01       	movw	r24, r28
      6e:	db 01       	movw	r26, r22
      70:	ef 01       	movw	r28, r30
      72:	02 02       	muls	r16, r18
      74:	15 02       	muls	r17, r21
      76:	29 02       	muls	r18, r25
      78:	43 02       	muls	r20, r19
      7a:	05 a8       	ldd	r0, Z+53	; 0x35
      7c:	4c cd       	rjmp	.-1384   	; 0xfffffb16 <__eeprom_end+0xff7efb16>
      7e:	b2 d4       	rcall	.+2404   	; 0x9e4 <motorControl>
      80:	4e b9       	out	0x0e, r20	; 14
      82:	38 36       	cpi	r19, 0x68	; 104
      84:	a9 02       	muls	r26, r25
      86:	0c 50       	subi	r16, 0x0C	; 12
      88:	b9 91       	ld	r27, Y+
      8a:	86 88       	ldd	r8, Z+22	; 0x16
      8c:	08 3c       	cpi	r16, 0xC8	; 200
      8e:	a6 aa       	std	Z+54, r10	; 0x36
      90:	aa 2a       	or	r10, r26
      92:	be 00       	.word	0x00be	; ????
      94:	00 00       	nop
      96:	80 3f       	cpi	r24, 0xF0	; 240

00000098 <__trampolines_end>:
      98:	3e 67       	ori	r19, 0x7E	; 126
      9a:	33 32       	cpi	r19, 0x23	; 35
      9c:	3e 3e       	cpi	r19, 0xEE	; 238
      9e:	63 33       	cpi	r22, 0x33	; 51
      a0:	32 00       	.word	0x0032	; ????

000000a2 <__c.2341>:
      a2:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

000000ac <__c.2209>:
      ac:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

000000b6 <__ctors_end>:
      b6:	f0 15       	cp	r31, r0

000000b8 <__dtors_end>:
      b8:	11 24       	eor	r1, r1
      ba:	1f be       	out	0x3f, r1	; 63
      bc:	cf ef       	ldi	r28, 0xFF	; 255
      be:	d8 e0       	ldi	r29, 0x08	; 8
      c0:	de bf       	out	0x3e, r29	; 62
      c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_copy_data>:
      c4:	11 e0       	ldi	r17, 0x01	; 1
      c6:	a0 e0       	ldi	r26, 0x00	; 0
      c8:	b1 e0       	ldi	r27, 0x01	; 1
      ca:	e4 ed       	ldi	r30, 0xD4	; 212
      cc:	f9 e3       	ldi	r31, 0x39	; 57
      ce:	02 c0       	rjmp	.+4      	; 0xd4 <__do_copy_data+0x10>
      d0:	05 90       	lpm	r0, Z+
      d2:	0d 92       	st	X+, r0
      d4:	a2 36       	cpi	r26, 0x62	; 98
      d6:	b1 07       	cpc	r27, r17
      d8:	d9 f7       	brne	.-10     	; 0xd0 <__do_copy_data+0xc>

000000da <__do_clear_bss>:
      da:	22 e0       	ldi	r18, 0x02	; 2
      dc:	a2 e6       	ldi	r26, 0x62	; 98
      de:	b1 e0       	ldi	r27, 0x01	; 1
      e0:	01 c0       	rjmp	.+2      	; 0xe4 <.do_clear_bss_start>

000000e2 <.do_clear_bss_loop>:
      e2:	1d 92       	st	X+, r1

000000e4 <.do_clear_bss_start>:
      e4:	af 33       	cpi	r26, 0x3F	; 63
      e6:	b2 07       	cpc	r27, r18
      e8:	e1 f7       	brne	.-8      	; 0xe2 <.do_clear_bss_loop>
      ea:	0e 94 ac 04 	call	0x958	; 0x958 <main>
      ee:	0c 94 dd 1c 	jmp	0x39ba	; 0x39ba <__do_global_dtors>

000000f2 <__bad_interrupt>:
      f2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f6 <swapOne>:
	temp = *secondYValue;                                                                               //swap Y-coordinates
	*secondYValue = *firstYValue;
	*firstYValue = temp;
}

void swapOne(float *firstValue, float *secondValue) {
      f6:	cf 92       	push	r12
      f8:	df 92       	push	r13
      fa:	ef 92       	push	r14
      fc:	ff 92       	push	r15
      fe:	0f 93       	push	r16
     100:	1f 93       	push	r17
	float temp;

	temp = *secondValue;
     102:	fb 01       	movw	r30, r22
     104:	00 81       	ld	r16, Z
     106:	11 81       	ldd	r17, Z+1	; 0x01
     108:	22 81       	ldd	r18, Z+2	; 0x02
     10a:	33 81       	ldd	r19, Z+3	; 0x03
	*secondValue = *firstValue;
     10c:	fc 01       	movw	r30, r24
     10e:	c0 80       	ld	r12, Z
     110:	d1 80       	ldd	r13, Z+1	; 0x01
     112:	e2 80       	ldd	r14, Z+2	; 0x02
     114:	f3 80       	ldd	r15, Z+3	; 0x03
     116:	fb 01       	movw	r30, r22
     118:	c0 82       	st	Z, r12
     11a:	d1 82       	std	Z+1, r13	; 0x01
     11c:	e2 82       	std	Z+2, r14	; 0x02
     11e:	f3 82       	std	Z+3, r15	; 0x03
	*firstValue = temp;
     120:	fc 01       	movw	r30, r24
     122:	00 83       	st	Z, r16
     124:	11 83       	std	Z+1, r17	; 0x01
     126:	22 83       	std	Z+2, r18	; 0x02
     128:	33 83       	std	Z+3, r19	; 0x03
}
     12a:	1f 91       	pop	r17
     12c:	0f 91       	pop	r16
     12e:	ff 90       	pop	r15
     130:	ef 90       	pop	r14
     132:	df 90       	pop	r13
     134:	cf 90       	pop	r12
     136:	08 95       	ret

00000138 <sortOrder>:

void sortOrder(int X[], int Y[]) {
     138:	2f 92       	push	r2
     13a:	3f 92       	push	r3
     13c:	4f 92       	push	r4
     13e:	5f 92       	push	r5
     140:	6f 92       	push	r6
     142:	7f 92       	push	r7
     144:	8f 92       	push	r8
     146:	9f 92       	push	r9
     148:	af 92       	push	r10
     14a:	bf 92       	push	r11
     14c:	cf 92       	push	r12
     14e:	df 92       	push	r13
     150:	ef 92       	push	r14
     152:	ff 92       	push	r15
     154:	0f 93       	push	r16
     156:	1f 93       	push	r17
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
     160:	a5 97       	sbiw	r28, 0x25	; 37
     162:	0f b6       	in	r0, 0x3f	; 63
     164:	f8 94       	cli
     166:	de bf       	out	0x3e, r29	; 62
     168:	0f be       	out	0x3f, r0	; 63
     16a:	cd bf       	out	0x3d, r28	; 61
     16c:	9b a3       	std	Y+35, r25	; 0x23
     16e:	8a a3       	std	Y+34, r24	; 0x22
     170:	6c a3       	std	Y+36, r22	; 0x24
     172:	7d a3       	std	Y+37, r23	; 0x25
     174:	06 96       	adiw	r24, 0x06	; 6
     176:	98 a3       	std	Y+32, r25	; 0x20
     178:	8f 8f       	std	Y+31, r24	; 0x1f
     17a:	b6 c0       	rjmp	.+364    	; 0x2e8 <sortOrder+0x1b0>
     17c:	7e 8e       	std	Y+30, r7	; 0x1e
     17e:	6d 8e       	std	Y+29, r6	; 0x1d

	while (check != 1) {
		orderCorrect = 1;

		for (int i = 0; i < (sizeOfOrder - 1); i++) {
			Distance[i] = sqrt((pow(X[i], 2)) + (pow(Y[i], 2)));      //Pythagoras
     180:	f3 01       	movw	r30, r6
     182:	01 90       	ld	r0, Z+
     184:	f0 81       	ld	r31, Z
     186:	e0 2d       	mov	r30, r0
     188:	fa 8f       	std	Y+26, r31	; 0x1a
     18a:	e9 8f       	std	Y+25, r30	; 0x19
     18c:	bf 01       	movw	r22, r30
     18e:	ff 0f       	add	r31, r31
     190:	88 0b       	sbc	r24, r24
     192:	99 0b       	sbc	r25, r25
     194:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__floatsisf>
     198:	6b 01       	movw	r12, r22
     19a:	7c 01       	movw	r14, r24
     19c:	3c 8e       	std	Y+28, r3	; 0x1c
     19e:	2b 8e       	std	Y+27, r2	; 0x1b
     1a0:	f1 01       	movw	r30, r2
     1a2:	00 81       	ld	r16, Z
     1a4:	11 81       	ldd	r17, Z+1	; 0x01
     1a6:	b8 01       	movw	r22, r16
     1a8:	01 2e       	mov	r0, r17
     1aa:	00 0c       	add	r0, r0
     1ac:	88 0b       	sbc	r24, r24
     1ae:	99 0b       	sbc	r25, r25
     1b0:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__floatsisf>
     1b4:	4b 01       	movw	r8, r22
     1b6:	5c 01       	movw	r10, r24
     1b8:	9b 01       	movw	r18, r22
     1ba:	ac 01       	movw	r20, r24
     1bc:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     1c0:	69 8b       	std	Y+17, r22	; 0x11
     1c2:	7a 8b       	std	Y+18, r23	; 0x12
     1c4:	8b 8b       	std	Y+19, r24	; 0x13
     1c6:	9c 8b       	std	Y+20, r25	; 0x14
     1c8:	a5 01       	movw	r20, r10
     1ca:	94 01       	movw	r18, r8
     1cc:	c5 01       	movw	r24, r10
     1ce:	b4 01       	movw	r22, r8
     1d0:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     1d4:	4b 01       	movw	r8, r22
     1d6:	5c 01       	movw	r10, r24
     1d8:	a7 01       	movw	r20, r14
     1da:	96 01       	movw	r18, r12
     1dc:	c7 01       	movw	r24, r14
     1de:	b6 01       	movw	r22, r12
     1e0:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     1e4:	9b 01       	movw	r18, r22
     1e6:	ac 01       	movw	r20, r24
     1e8:	c5 01       	movw	r24, r10
     1ea:	b4 01       	movw	r22, r8
     1ec:	0e 94 45 0b 	call	0x168a	; 0x168a <__addsf3>
     1f0:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <sqrt>
     1f4:	6b 01       	movw	r12, r22
     1f6:	7c 01       	movw	r14, r24
     1f8:	f2 01       	movw	r30, r4
     1fa:	61 93       	st	Z+, r22
     1fc:	71 93       	st	Z+, r23
     1fe:	81 93       	st	Z+, r24
     200:	91 93       	st	Z+, r25
     202:	2f 01       	movw	r4, r30
     204:	e9 8b       	std	Y+17, r30	; 0x11
     206:	59 a2       	std	Y+33, r5	; 0x21
			firstDistanceValue =  Distance[i];
			secondDistanceValue =  Distance[i + 1];
     208:	80 80       	ld	r8, Z
     20a:	91 80       	ldd	r9, Z+1	; 0x01
     20c:	a2 80       	ldd	r10, Z+2	; 0x02
     20e:	b3 80       	ldd	r11, Z+3	; 0x03

			if ( Distance[i] >  Distance[i + 1]) {
     210:	a5 01       	movw	r20, r10
     212:	94 01       	movw	r18, r8
     214:	0e 94 9e 0c 	call	0x193c	; 0x193c <__gesf2>
     218:	18 16       	cp	r1, r24
     21a:	d4 f4       	brge	.+52     	; 0x250 <sortOrder+0x118>
				swapOne(& Distance[i], & Distance[i + 1]);
     21c:	b2 01       	movw	r22, r4
     21e:	8d 89       	ldd	r24, Y+21	; 0x15
     220:	9e 89       	ldd	r25, Y+22	; 0x16
     222:	0e 94 7b 00 	call	0xf6	; 0xf6 <swapOne>


void swapTwo( int *firstXValue, int *secondXValue, int *firstYValue, int *secondYValue){
	int temp;

	temp = *secondXValue;                                                                               //swap X-coordinates
     226:	f3 01       	movw	r30, r6
     228:	82 81       	ldd	r24, Z+2	; 0x02
     22a:	93 81       	ldd	r25, Z+3	; 0x03
	*secondXValue = *firstXValue;
     22c:	20 81       	ld	r18, Z
     22e:	31 81       	ldd	r19, Z+1	; 0x01
     230:	33 83       	std	Z+3, r19	; 0x03
     232:	22 83       	std	Z+2, r18	; 0x02
	*firstXValue = temp;
     234:	91 83       	std	Z+1, r25	; 0x01
     236:	80 83       	st	Z, r24

	temp = *secondYValue;                                                                               //swap Y-coordinates
     238:	f1 01       	movw	r30, r2
     23a:	82 81       	ldd	r24, Z+2	; 0x02
     23c:	93 81       	ldd	r25, Z+3	; 0x03
	*secondYValue = *firstYValue;
     23e:	20 81       	ld	r18, Z
     240:	31 81       	ldd	r19, Z+1	; 0x01
     242:	33 83       	std	Z+3, r19	; 0x03
     244:	22 83       	std	Z+2, r18	; 0x02
	*firstYValue = temp;
     246:	91 83       	std	Z+1, r25	; 0x01
     248:	80 83       	st	Z, r24
			secondDistanceValue =  Distance[i + 1];

			if ( Distance[i] >  Distance[i + 1]) {
				swapOne(& Distance[i], & Distance[i + 1]);
				swapTwo(&X[i], &X[i + 1], &Y[i], &Y[i + 1]);
				orderCorrect = 0;
     24a:	1f 8a       	std	Y+23, r1	; 0x17
     24c:	18 8e       	std	Y+24, r1	; 0x18
     24e:	36 c0       	rjmp	.+108    	; 0x2bc <sortOrder+0x184>
				} else if ((firstDistanceValue == secondDistanceValue) && (Y[i] == Y[i + 1])) {
     250:	c7 01       	movw	r24, r14
     252:	b6 01       	movw	r22, r12
     254:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixsfsi>
     258:	7b 01       	movw	r14, r22
     25a:	c5 01       	movw	r24, r10
     25c:	b4 01       	movw	r22, r8
     25e:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixsfsi>
     262:	e6 16       	cp	r14, r22
     264:	f7 06       	cpc	r15, r23
     266:	51 f5       	brne	.+84     	; 0x2bc <sortOrder+0x184>
     268:	eb 8d       	ldd	r30, Y+27	; 0x1b
     26a:	fc 8d       	ldd	r31, Y+28	; 0x1c
     26c:	82 81       	ldd	r24, Z+2	; 0x02
     26e:	93 81       	ldd	r25, Z+3	; 0x03
     270:	08 17       	cp	r16, r24
     272:	19 07       	cpc	r17, r25
     274:	19 f5       	brne	.+70     	; 0x2bc <sortOrder+0x184>
				if (X[i] < X[i + 1]) {
     276:	ed 8d       	ldd	r30, Y+29	; 0x1d
     278:	fe 8d       	ldd	r31, Y+30	; 0x1e
     27a:	82 81       	ldd	r24, Z+2	; 0x02
     27c:	93 81       	ldd	r25, Z+3	; 0x03
     27e:	29 8d       	ldd	r18, Y+25	; 0x19
     280:	3a 8d       	ldd	r19, Y+26	; 0x1a
     282:	28 17       	cp	r18, r24
     284:	39 07       	cpc	r19, r25
     286:	d4 f4       	brge	.+52     	; 0x2bc <sortOrder+0x184>
					swapOne(& Distance[i], & Distance[i + 1]);
     288:	69 89       	ldd	r22, Y+17	; 0x11
     28a:	79 a1       	ldd	r23, Y+33	; 0x21
     28c:	8d 89       	ldd	r24, Y+21	; 0x15
     28e:	9e 89       	ldd	r25, Y+22	; 0x16
     290:	0e 94 7b 00 	call	0xf6	; 0xf6 <swapOne>


void swapTwo( int *firstXValue, int *secondXValue, int *firstYValue, int *secondYValue){
	int temp;

	temp = *secondXValue;                                                                               //swap X-coordinates
     294:	ed 8d       	ldd	r30, Y+29	; 0x1d
     296:	fe 8d       	ldd	r31, Y+30	; 0x1e
     298:	82 81       	ldd	r24, Z+2	; 0x02
     29a:	93 81       	ldd	r25, Z+3	; 0x03
	*secondXValue = *firstXValue;
     29c:	20 81       	ld	r18, Z
     29e:	31 81       	ldd	r19, Z+1	; 0x01
     2a0:	33 83       	std	Z+3, r19	; 0x03
     2a2:	22 83       	std	Z+2, r18	; 0x02
	*firstXValue = temp;
     2a4:	91 83       	std	Z+1, r25	; 0x01
     2a6:	80 83       	st	Z, r24

	temp = *secondYValue;                                                                               //swap Y-coordinates
     2a8:	eb 8d       	ldd	r30, Y+27	; 0x1b
     2aa:	fc 8d       	ldd	r31, Y+28	; 0x1c
     2ac:	82 81       	ldd	r24, Z+2	; 0x02
     2ae:	93 81       	ldd	r25, Z+3	; 0x03
	*secondYValue = *firstYValue;
     2b0:	20 81       	ld	r18, Z
     2b2:	31 81       	ldd	r19, Z+1	; 0x01
     2b4:	33 83       	std	Z+3, r19	; 0x03
     2b6:	22 83       	std	Z+2, r18	; 0x02
	*firstYValue = temp;
     2b8:	91 83       	std	Z+1, r25	; 0x01
     2ba:	80 83       	st	Z, r24
     2bc:	f2 e0       	ldi	r31, 0x02	; 2
     2be:	6f 0e       	add	r6, r31
     2c0:	71 1c       	adc	r7, r1
     2c2:	22 e0       	ldi	r18, 0x02	; 2
     2c4:	22 0e       	add	r2, r18
     2c6:	31 1c       	adc	r3, r1
     2c8:	8d 89       	ldd	r24, Y+21	; 0x15
     2ca:	9e 89       	ldd	r25, Y+22	; 0x16
     2cc:	04 96       	adiw	r24, 0x04	; 4
     2ce:	9e 8b       	std	Y+22, r25	; 0x16
     2d0:	8d 8b       	std	Y+21, r24	; 0x15
	float Distance[sizeOfOrder];

	while (check != 1) {
		orderCorrect = 1;

		for (int i = 0; i < (sizeOfOrder - 1); i++) {
     2d2:	ef 8d       	ldd	r30, Y+31	; 0x1f
     2d4:	f8 a1       	ldd	r31, Y+32	; 0x20
     2d6:	6e 16       	cp	r6, r30
     2d8:	7f 06       	cpc	r7, r31
     2da:	09 f0       	breq	.+2      	; 0x2de <sortOrder+0x1a6>
     2dc:	4f cf       	rjmp	.-354    	; 0x17c <sortOrder+0x44>
					swapOne(& Distance[i], & Distance[i + 1]);
					swapTwo(&X[i], &X[i + 1], &Y[i], &Y[i + 1]);
				}
			}
		}
		if (orderCorrect == 1) {
     2de:	2f 89       	ldd	r18, Y+23	; 0x17
     2e0:	38 8d       	ldd	r19, Y+24	; 0x18
     2e2:	21 30       	cpi	r18, 0x01	; 1
     2e4:	31 05       	cpc	r19, r1
     2e6:	69 f0       	breq	.+26     	; 0x302 <sortOrder+0x1ca>
     2e8:	6a a0       	ldd	r6, Y+34	; 0x22
     2ea:	7b a0       	ldd	r7, Y+35	; 0x23
     2ec:	2c a0       	ldd	r2, Y+36	; 0x24
     2ee:	3d a0       	ldd	r3, Y+37	; 0x25
     2f0:	ce 01       	movw	r24, r28
     2f2:	01 96       	adiw	r24, 0x01	; 1
     2f4:	2c 01       	movw	r4, r24
	temp = *secondValue;
	*secondValue = *firstValue;
	*firstValue = temp;
}

void sortOrder(int X[], int Y[]) {
     2f6:	9e 8b       	std	Y+22, r25	; 0x16
     2f8:	8d 8b       	std	Y+21, r24	; 0x15
     2fa:	91 e0       	ldi	r25, 0x01	; 1
     2fc:	9f 8b       	std	Y+23, r25	; 0x17
     2fe:	18 8e       	std	Y+24, r1	; 0x18
     300:	3d cf       	rjmp	.-390    	; 0x17c <sortOrder+0x44>
		}
		if (orderCorrect == 1) {
			check = 1;
		}
	}
}
     302:	a5 96       	adiw	r28, 0x25	; 37
     304:	0f b6       	in	r0, 0x3f	; 63
     306:	f8 94       	cli
     308:	de bf       	out	0x3e, r29	; 62
     30a:	0f be       	out	0x3f, r0	; 63
     30c:	cd bf       	out	0x3d, r28	; 61
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	1f 91       	pop	r17
     314:	0f 91       	pop	r16
     316:	ff 90       	pop	r15
     318:	ef 90       	pop	r14
     31a:	df 90       	pop	r13
     31c:	cf 90       	pop	r12
     31e:	bf 90       	pop	r11
     320:	af 90       	pop	r10
     322:	9f 90       	pop	r9
     324:	8f 90       	pop	r8
     326:	7f 90       	pop	r7
     328:	6f 90       	pop	r6
     32a:	5f 90       	pop	r5
     32c:	4f 90       	pop	r4
     32e:	3f 90       	pop	r3
     330:	2f 90       	pop	r2
     332:	08 95       	ret

00000334 <readGrid>:
	}
	driveRoute(route, 1, 1, amountOfIntersects);    //Drive back to home
	play_from_program_space(PSTR(">g32>>c32"));
}

int readGrid(int routes[4][20]){
     334:	2f 92       	push	r2
     336:	3f 92       	push	r3
     338:	4f 92       	push	r4
     33a:	5f 92       	push	r5
     33c:	6f 92       	push	r6
     33e:	7f 92       	push	r7
     340:	8f 92       	push	r8
     342:	9f 92       	push	r9
     344:	af 92       	push	r10
     346:	bf 92       	push	r11
     348:	cf 92       	push	r12
     34a:	df 92       	push	r13
     34c:	ef 92       	push	r14
     34e:	ff 92       	push	r15
     350:	0f 93       	push	r16
     352:	1f 93       	push	r17
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
     358:	8c 01       	movw	r16, r24
	int i = 1, grid = 0, numOfIntersects, crossing = 0, routeNum = 1;
	int resultTemp;
	routes[1][0] = 5;                    //Marks beginning of route
     35a:	85 e0       	ldi	r24, 0x05	; 5
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	d8 01       	movw	r26, r16
     360:	99 96       	adiw	r26, 0x29	; 41
     362:	9c 93       	st	X, r25
     364:	8e 93       	st	-X, r24
     366:	98 97       	sbiw	r26, 0x28	; 40
	driveRoute(route, 1, 1, amountOfIntersects);    //Drive back to home
	play_from_program_space(PSTR(">g32>>c32"));
}

int readGrid(int routes[4][20]){
	int i = 1, grid = 0, numOfIntersects, crossing = 0, routeNum = 1;
     368:	c1 e0       	ldi	r28, 0x01	; 1
     36a:	d0 e0       	ldi	r29, 0x00	; 0
			followLine();
			i++;
			routes[0][i] = 6;
			break;
			case 7:              //Dead end
			routes[0][i] = 7;
     36c:	0f 2e       	mov	r0, r31
     36e:	f7 e0       	ldi	r31, 0x07	; 7
     370:	8f 2e       	mov	r8, r31
     372:	91 2c       	mov	r9, r1
     374:	f0 2d       	mov	r31, r0
			break;
			case 6:               //It is a crossing
			motorControl(60, 'L', 0.30);
			followLine();
			i++;
			routes[0][i] = 6;
     376:	0f 2e       	mov	r0, r31
     378:	f6 e0       	ldi	r31, 0x06	; 6
     37a:	af 2e       	mov	r10, r31
     37c:	b1 2c       	mov	r11, r1
     37e:	f0 2d       	mov	r31, r0
			routes[0][i] = 4;
			motorControl(80, 'F', 0.89);
			followLine();
			break;
			case 5:                //L
			routes[0][i] = 5;
     380:	0f 2e       	mov	r0, r31
     382:	f5 e0       	ldi	r31, 0x05	; 5
     384:	cf 2e       	mov	r12, r31
     386:	d1 2c       	mov	r13, r1
     388:	f0 2d       	mov	r31, r0
			followLine();
			routes[0][i] = 3;
			i++;
			break;
			case 4:                 //R
			routes[0][i] = 4;
     38a:	68 94       	set
     38c:	ee 24       	eor	r14, r14
     38e:	e2 f8       	bld	r14, 2
     390:	f1 2c       	mov	r15, r1
			followLine();
			break;
			case 3:                  //It is a T-crossing    L R
			motorControl(60, 'L', 0.30);
			followLine();
			routes[0][i] = 3;
     392:	0f 2e       	mov	r0, r31
     394:	f3 e0       	ldi	r31, 0x03	; 3
     396:	6f 2e       	mov	r6, r31
     398:	71 2c       	mov	r7, r1
     39a:	f0 2d       	mov	r31, r0
int readGrid(int routes[4][20]){
	int i = 1, grid = 0, numOfIntersects, crossing = 0, routeNum = 1;
	int resultTemp;
	routes[1][0] = 5;                    //Marks beginning of route
	do{
		resultTemp = checkAfslag();
     39c:	0e 94 08 0a 	call	0x1410	; 0x1410 <checkAfslag>
		switch(resultTemp){
     3a0:	89 30       	cpi	r24, 0x09	; 9
     3a2:	91 05       	cpc	r25, r1
     3a4:	d8 f7       	brcc	.-10     	; 0x39c <readGrid+0x68>
     3a6:	fc 01       	movw	r30, r24
     3a8:	ec 5c       	subi	r30, 0xCC	; 204
     3aa:	ff 4f       	sbci	r31, 0xFF	; 255
     3ac:	0c 94 5d 1b 	jmp	0x36ba	; 0x36ba <__tablejump2__>
			case 0:
			followLine();
     3b0:	0e 94 c3 09 	call	0x1386	; 0x1386 <followLine>
			break;
     3b4:	f3 cf       	rjmp	.-26     	; 0x39c <readGrid+0x68>
			case 3:                  //It is a T-crossing    L R
			motorControl(60, 'L', 0.30);
     3b6:	2a e9       	ldi	r18, 0x9A	; 154
     3b8:	39 e9       	ldi	r19, 0x99	; 153
     3ba:	49 e9       	ldi	r20, 0x99	; 153
     3bc:	5e e3       	ldi	r21, 0x3E	; 62
     3be:	6c e4       	ldi	r22, 0x4C	; 76
     3c0:	8c e3       	ldi	r24, 0x3C	; 60
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <motorControl>
			followLine();
     3c8:	0e 94 c3 09 	call	0x1386	; 0x1386 <followLine>
			routes[0][i] = 3;
     3cc:	fe 01       	movw	r30, r28
     3ce:	ee 0f       	add	r30, r30
     3d0:	ff 1f       	adc	r31, r31
     3d2:	e0 0f       	add	r30, r16
     3d4:	f1 1f       	adc	r31, r17
     3d6:	71 82       	std	Z+1, r7	; 0x01
     3d8:	60 82       	st	Z, r6
			i++;
     3da:	21 96       	adiw	r28, 0x01	; 1
			break;
     3dc:	df cf       	rjmp	.-66     	; 0x39c <readGrid+0x68>
			case 4:                 //R
			routes[0][i] = 4;
     3de:	fe 01       	movw	r30, r28
     3e0:	ee 0f       	add	r30, r30
     3e2:	ff 1f       	adc	r31, r31
     3e4:	e0 0f       	add	r30, r16
     3e6:	f1 1f       	adc	r31, r17
     3e8:	f1 82       	std	Z+1, r15	; 0x01
     3ea:	e0 82       	st	Z, r14
			motorControl(80, 'F', 0.89);
     3ec:	2a e0       	ldi	r18, 0x0A	; 10
     3ee:	37 ed       	ldi	r19, 0xD7	; 215
     3f0:	43 e6       	ldi	r20, 0x63	; 99
     3f2:	5f e3       	ldi	r21, 0x3F	; 63
     3f4:	66 e4       	ldi	r22, 0x46	; 70
     3f6:	80 e5       	ldi	r24, 0x50	; 80
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <motorControl>
			followLine();
     3fe:	0e 94 c3 09 	call	0x1386	; 0x1386 <followLine>
			break;
     402:	cc cf       	rjmp	.-104    	; 0x39c <readGrid+0x68>
			case 5:                //L
			routes[0][i] = 5;
     404:	fe 01       	movw	r30, r28
     406:	ee 0f       	add	r30, r30
     408:	ff 1f       	adc	r31, r31
     40a:	e0 0f       	add	r30, r16
     40c:	f1 1f       	adc	r31, r17
     40e:	d1 82       	std	Z+1, r13	; 0x01
     410:	c0 82       	st	Z, r12
			motorControl(80, 'F', 0.89);
     412:	2a e0       	ldi	r18, 0x0A	; 10
     414:	37 ed       	ldi	r19, 0xD7	; 215
     416:	43 e6       	ldi	r20, 0x63	; 99
     418:	5f e3       	ldi	r21, 0x3F	; 63
     41a:	66 e4       	ldi	r22, 0x46	; 70
     41c:	80 e5       	ldi	r24, 0x50	; 80
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <motorControl>
			followLine();
     424:	0e 94 c3 09 	call	0x1386	; 0x1386 <followLine>
			break;
     428:	b9 cf       	rjmp	.-142    	; 0x39c <readGrid+0x68>
			case 6:               //It is a crossing
			motorControl(60, 'L', 0.30);
     42a:	2a e9       	ldi	r18, 0x9A	; 154
     42c:	39 e9       	ldi	r19, 0x99	; 153
     42e:	49 e9       	ldi	r20, 0x99	; 153
     430:	5e e3       	ldi	r21, 0x3E	; 62
     432:	6c e4       	ldi	r22, 0x4C	; 76
     434:	8c e3       	ldi	r24, 0x3C	; 60
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <motorControl>
			followLine();
     43c:	0e 94 c3 09 	call	0x1386	; 0x1386 <followLine>
			i++;
     440:	21 96       	adiw	r28, 0x01	; 1
			routes[0][i] = 6;
     442:	fe 01       	movw	r30, r28
     444:	ee 0f       	add	r30, r30
     446:	ff 1f       	adc	r31, r31
     448:	e0 0f       	add	r30, r16
     44a:	f1 1f       	adc	r31, r17
     44c:	b1 82       	std	Z+1, r11	; 0x01
     44e:	a0 82       	st	Z, r10
			break;
     450:	a5 cf       	rjmp	.-182    	; 0x39c <readGrid+0x68>
			case 7:              //Dead end
			routes[0][i] = 7;
     452:	fe 01       	movw	r30, r28
     454:	ee 0f       	add	r30, r30
     456:	ff 1f       	adc	r31, r31
     458:	e0 0f       	add	r30, r16
     45a:	f1 1f       	adc	r31, r17
     45c:	91 82       	std	Z+1, r9	; 0x01
     45e:	80 82       	st	Z, r8
			motorControl(60, 'R', 0.30);
     460:	2a e9       	ldi	r18, 0x9A	; 154
     462:	39 e9       	ldi	r19, 0x99	; 153
     464:	49 e9       	ldi	r20, 0x99	; 153
     466:	5e e3       	ldi	r21, 0x3E	; 62
     468:	62 e5       	ldi	r22, 0x52	; 82
     46a:	8c e3       	ldi	r24, 0x3C	; 60
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <motorControl>
			motorControl(0, 'R', 0.30);
     472:	2a e9       	ldi	r18, 0x9A	; 154
     474:	39 e9       	ldi	r19, 0x99	; 153
     476:	49 e9       	ldi	r20, 0x99	; 153
     478:	5e e3       	ldi	r21, 0x3E	; 62
     47a:	62 e5       	ldi	r22, 0x52	; 82
     47c:	80 e0       	ldi	r24, 0x00	; 0
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <motorControl>
			break;
     484:	8b cf       	rjmp	.-234    	; 0x39c <readGrid+0x68>
			case 8:
			grid = 1;
			routes[0][i] = 8; //Marks end of route
     486:	fe 01       	movw	r30, r28
     488:	ee 0f       	add	r30, r30
     48a:	ff 1f       	adc	r31, r31
     48c:	e0 0f       	add	r30, r16
     48e:	f1 1f       	adc	r31, r17
     490:	88 e0       	ldi	r24, 0x08	; 8
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	91 83       	std	Z+1, r25	; 0x01
     496:	80 83       	st	Z, r24
		}
	}while(grid == 0);
	numOfIntersects = i;
	
	for(i = 1; i <= numOfIntersects; i++){   //Writing route towards X
     498:	1c 16       	cp	r1, r28
     49a:	1d 06       	cpc	r1, r29
     49c:	0c f0       	brlt	.+2      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     49e:	f1 c0       	rjmp	.+482    	; 0x682 <__LOCK_REGION_LENGTH__+0x282>
     4a0:	f8 01       	movw	r30, r16
     4a2:	32 96       	adiw	r30, 0x02	; 2
     4a4:	21 e0       	ldi	r18, 0x01	; 1
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	21 2c       	mov	r2, r1
     4aa:	31 2c       	mov	r3, r1
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	90 e0       	ldi	r25, 0x00	; 0
			case 5:
			if(routes[0][i + 1] == 7){
				routes[routeNum][i] = 1;
			}
			else if(routes[0][i] != 7){
				routes[routeNum][i] = 2;
     4b0:	48 e2       	ldi	r20, 0x28	; 40
     4b2:	68 94       	set
     4b4:	ee 24       	eor	r14, r14
     4b6:	e1 f8       	bld	r14, 1
     4b8:	f1 2c       	mov	r15, r1
				routes[routeNum][i] = 3;
			}
			break;
			case 5:
			if(routes[0][i + 1] == 7){
				routes[routeNum][i] = 1;
     4ba:	66 24       	eor	r6, r6
     4bc:	63 94       	inc	r6
     4be:	71 2c       	mov	r7, r1
				routes[routeNum][i] = 2;
			}
			break;
			case 6:
			crossing++;
			routes[routeNum][i] = 6;
     4c0:	0f 2e       	mov	r0, r31
     4c2:	f6 e0       	ldi	r31, 0x06	; 6
     4c4:	8f 2e       	mov	r8, r31
     4c6:	91 2c       	mov	r9, r1
     4c8:	f0 2d       	mov	r31, r0
			if((crossing == 2) && (routes[routeNum][i - 1] == 6)){
				crossing = 0;
				routes[1][i - 1] = 3;
     4ca:	0f 2e       	mov	r0, r31
     4cc:	f3 e0       	ldi	r31, 0x03	; 3
     4ce:	4f 2e       	mov	r4, r31
     4d0:	51 2c       	mov	r5, r1
     4d2:	f0 2d       	mov	r31, r0
			}
			break;
			case 8:                                                     //case 7 isn't part of a route
			routes[routeNum][i] = 8;                                    //Marks end of route
     4d4:	68 94       	set
     4d6:	aa 24       	eor	r10, r10
     4d8:	a3 f8       	bld	r10, 3
     4da:	b1 2c       	mov	r11, r1
		}
	}while(grid == 0);
	numOfIntersects = i;
	
	for(i = 1; i <= numOfIntersects; i++){   //Writing route towards X
		switch(routes[0][i]){
     4dc:	61 91       	ld	r22, Z+
     4de:	71 91       	ld	r23, Z+
     4e0:	65 30       	cpi	r22, 0x05	; 5
     4e2:	71 05       	cpc	r23, r1
     4e4:	09 f4       	brne	.+2      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     4e6:	5b c0       	rjmp	.+182    	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
     4e8:	3c f4       	brge	.+14     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
     4ea:	63 30       	cpi	r22, 0x03	; 3
     4ec:	71 05       	cpc	r23, r1
     4ee:	69 f0       	breq	.+26     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
     4f0:	64 30       	cpi	r22, 0x04	; 4
     4f2:	71 05       	cpc	r23, r1
     4f4:	79 f1       	breq	.+94     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
     4f6:	c0 c0       	rjmp	.+384    	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
     4f8:	66 30       	cpi	r22, 0x06	; 6
     4fa:	71 05       	cpc	r23, r1
     4fc:	09 f4       	brne	.+2      	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     4fe:	74 c0       	rjmp	.+232    	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
     500:	68 30       	cpi	r22, 0x08	; 8
     502:	71 05       	cpc	r23, r1
     504:	09 f4       	brne	.+2      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     506:	99 c0       	rjmp	.+306    	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
     508:	b7 c0       	rjmp	.+366    	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
			case 3:
			if(routes[0][i + 1] == 7){
     50a:	60 81       	ld	r22, Z
     50c:	71 81       	ldd	r23, Z+1	; 0x01
     50e:	67 30       	cpi	r22, 0x07	; 7
     510:	71 05       	cpc	r23, r1
     512:	81 f4       	brne	.+32     	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
				routes[routeNum][i] = 1;
     514:	42 9f       	mul	r20, r18
     516:	60 01       	movw	r12, r0
     518:	43 9f       	mul	r20, r19
     51a:	d0 0c       	add	r13, r0
     51c:	11 24       	eor	r1, r1
     51e:	c0 0e       	add	r12, r16
     520:	d1 1e       	adc	r13, r17
     522:	bc 01       	movw	r22, r24
     524:	66 0f       	add	r22, r22
     526:	77 1f       	adc	r23, r23
     528:	6c 0d       	add	r22, r12
     52a:	7d 1d       	adc	r23, r13
     52c:	db 01       	movw	r26, r22
     52e:	6d 92       	st	X+, r6
     530:	7c 92       	st	X, r7
     532:	a2 c0       	rjmp	.+324    	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
			}
			else if(routes[0][i + 1] != 7){
				routes[routeNum][i] = 2;
     534:	42 9f       	mul	r20, r18
     536:	60 01       	movw	r12, r0
     538:	43 9f       	mul	r20, r19
     53a:	d0 0c       	add	r13, r0
     53c:	11 24       	eor	r1, r1
     53e:	c0 0e       	add	r12, r16
     540:	d1 1e       	adc	r13, r17
     542:	bc 01       	movw	r22, r24
     544:	66 0f       	add	r22, r22
     546:	77 1f       	adc	r23, r23
     548:	6c 0d       	add	r22, r12
     54a:	7d 1d       	adc	r23, r13
     54c:	db 01       	movw	r26, r22
     54e:	ed 92       	st	X+, r14
     550:	fc 92       	st	X, r15
     552:	92 c0       	rjmp	.+292    	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
			}
			break;
			case 4:
			if(routes[0][i + 1] == 7){
     554:	60 81       	ld	r22, Z
     556:	71 81       	ldd	r23, Z+1	; 0x01
     558:	67 30       	cpi	r22, 0x07	; 7
     55a:	71 05       	cpc	r23, r1
     55c:	81 f4       	brne	.+32     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
				routes[routeNum][i] = 1;
     55e:	42 9f       	mul	r20, r18
     560:	60 01       	movw	r12, r0
     562:	43 9f       	mul	r20, r19
     564:	d0 0c       	add	r13, r0
     566:	11 24       	eor	r1, r1
     568:	c0 0e       	add	r12, r16
     56a:	d1 1e       	adc	r13, r17
     56c:	bc 01       	movw	r22, r24
     56e:	66 0f       	add	r22, r22
     570:	77 1f       	adc	r23, r23
     572:	6c 0d       	add	r22, r12
     574:	7d 1d       	adc	r23, r13
     576:	db 01       	movw	r26, r22
     578:	6d 92       	st	X+, r6
     57a:	7c 92       	st	X, r7
     57c:	7d c0       	rjmp	.+250    	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
			}
			else if(routes[0][i] != 7){
				routes[routeNum][i] = 3;
     57e:	42 9f       	mul	r20, r18
     580:	60 01       	movw	r12, r0
     582:	43 9f       	mul	r20, r19
     584:	d0 0c       	add	r13, r0
     586:	11 24       	eor	r1, r1
     588:	c0 0e       	add	r12, r16
     58a:	d1 1e       	adc	r13, r17
     58c:	bc 01       	movw	r22, r24
     58e:	66 0f       	add	r22, r22
     590:	77 1f       	adc	r23, r23
     592:	6c 0d       	add	r22, r12
     594:	7d 1d       	adc	r23, r13
     596:	db 01       	movw	r26, r22
     598:	4d 92       	st	X+, r4
     59a:	5c 92       	st	X, r5
     59c:	6d c0       	rjmp	.+218    	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
			}
			break;
			case 5:
			if(routes[0][i + 1] == 7){
     59e:	60 81       	ld	r22, Z
     5a0:	71 81       	ldd	r23, Z+1	; 0x01
     5a2:	67 30       	cpi	r22, 0x07	; 7
     5a4:	71 05       	cpc	r23, r1
     5a6:	81 f4       	brne	.+32     	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
				routes[routeNum][i] = 1;
     5a8:	42 9f       	mul	r20, r18
     5aa:	60 01       	movw	r12, r0
     5ac:	43 9f       	mul	r20, r19
     5ae:	d0 0c       	add	r13, r0
     5b0:	11 24       	eor	r1, r1
     5b2:	c0 0e       	add	r12, r16
     5b4:	d1 1e       	adc	r13, r17
     5b6:	bc 01       	movw	r22, r24
     5b8:	66 0f       	add	r22, r22
     5ba:	77 1f       	adc	r23, r23
     5bc:	6c 0d       	add	r22, r12
     5be:	7d 1d       	adc	r23, r13
     5c0:	db 01       	movw	r26, r22
     5c2:	6d 92       	st	X+, r6
     5c4:	7c 92       	st	X, r7
     5c6:	58 c0       	rjmp	.+176    	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
			}
			else if(routes[0][i] != 7){
				routes[routeNum][i] = 2;
     5c8:	42 9f       	mul	r20, r18
     5ca:	60 01       	movw	r12, r0
     5cc:	43 9f       	mul	r20, r19
     5ce:	d0 0c       	add	r13, r0
     5d0:	11 24       	eor	r1, r1
     5d2:	c0 0e       	add	r12, r16
     5d4:	d1 1e       	adc	r13, r17
     5d6:	bc 01       	movw	r22, r24
     5d8:	66 0f       	add	r22, r22
     5da:	77 1f       	adc	r23, r23
     5dc:	6c 0d       	add	r22, r12
     5de:	7d 1d       	adc	r23, r13
     5e0:	db 01       	movw	r26, r22
     5e2:	ed 92       	st	X+, r14
     5e4:	fc 92       	st	X, r15
     5e6:	48 c0       	rjmp	.+144    	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
			}
			break;
			case 6:
			crossing++;
     5e8:	bf ef       	ldi	r27, 0xFF	; 255
     5ea:	2b 1a       	sub	r2, r27
     5ec:	3b 0a       	sbc	r3, r27
			routes[routeNum][i] = 6;
     5ee:	42 9f       	mul	r20, r18
     5f0:	b0 01       	movw	r22, r0
     5f2:	43 9f       	mul	r20, r19
     5f4:	70 0d       	add	r23, r0
     5f6:	11 24       	eor	r1, r1
     5f8:	60 0f       	add	r22, r16
     5fa:	71 1f       	adc	r23, r17
     5fc:	6c 01       	movw	r12, r24
     5fe:	cc 0c       	add	r12, r12
     600:	dd 1c       	adc	r13, r13
     602:	c6 0e       	add	r12, r22
     604:	d7 1e       	adc	r13, r23
     606:	d6 01       	movw	r26, r12
     608:	8d 92       	st	X+, r8
     60a:	9c 92       	st	X, r9
			if((crossing == 2) && (routes[routeNum][i - 1] == 6)){
     60c:	b2 e0       	ldi	r27, 0x02	; 2
     60e:	2b 16       	cp	r2, r27
     610:	31 04       	cpc	r3, r1
     612:	91 f5       	brne	.+100    	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
     614:	6c 01       	movw	r12, r24
     616:	51 e0       	ldi	r21, 0x01	; 1
     618:	c5 1a       	sub	r12, r21
     61a:	d1 08       	sbc	r13, r1
     61c:	cc 0c       	add	r12, r12
     61e:	dd 1c       	adc	r13, r13
     620:	6c 0d       	add	r22, r12
     622:	7d 1d       	adc	r23, r13
     624:	db 01       	movw	r26, r22
     626:	6d 91       	ld	r22, X+
     628:	7c 91       	ld	r23, X
     62a:	66 30       	cpi	r22, 0x06	; 6
     62c:	71 05       	cpc	r23, r1
     62e:	21 f5       	brne	.+72     	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
				crossing = 0;
				routes[1][i - 1] = 3;
     630:	55 a2       	std	Z+37, r5	; 0x25
     632:	44 a2       	std	Z+36, r4	; 0x24
			break;
			case 6:
			crossing++;
			routes[routeNum][i] = 6;
			if((crossing == 2) && (routes[routeNum][i - 1] == 6)){
				crossing = 0;
     634:	21 2c       	mov	r2, r1
     636:	31 2c       	mov	r3, r1
     638:	1f c0       	rjmp	.+62     	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
				routes[1][i - 1] = 3;
			}
			break;
			case 8:                                                     //case 7 isn't part of a route
			routes[routeNum][i] = 8;                                    //Marks end of route
     63a:	42 9f       	mul	r20, r18
     63c:	60 01       	movw	r12, r0
     63e:	43 9f       	mul	r20, r19
     640:	d0 0c       	add	r13, r0
     642:	11 24       	eor	r1, r1
     644:	c0 0e       	add	r12, r16
     646:	d1 1e       	adc	r13, r17
     648:	bc 01       	movw	r22, r24
     64a:	66 0f       	add	r22, r22
     64c:	77 1f       	adc	r23, r23
     64e:	6c 0d       	add	r22, r12
     650:	7d 1d       	adc	r23, r13
     652:	db 01       	movw	r26, r22
     654:	ad 92       	st	X+, r10
     656:	bc 92       	st	X, r11
     658:	64 e1       	ldi	r22, 0x14	; 20
     65a:	70 e0       	ldi	r23, 0x00	; 0
     65c:	61 50       	subi	r22, 0x01	; 1
     65e:	71 09       	sbc	r23, r1
			for(int j = 0; j < 20; j++){                                //reset decoy array
     660:	e9 f7       	brne	.-6      	; 0x65c <__LOCK_REGION_LENGTH__+0x25c>
     662:	bf 01       	movw	r22, r30
     664:	62 50       	subi	r22, 0x02	; 2
     666:	71 09       	sbc	r23, r1
     668:	db 01       	movw	r26, r22
     66a:	1d 92       	st	X+, r1
     66c:	1c 92       	st	X, r1
				routes[0][i] = 0;
			}
			if(routeNum < 4){
     66e:	24 30       	cpi	r18, 0x04	; 4
     670:	31 05       	cpc	r19, r1
     672:	14 f4       	brge	.+4      	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
				routeNum++;
     674:	2f 5f       	subi	r18, 0xFF	; 255
     676:	3f 4f       	sbci	r19, 0xFF	; 255
			routes[0][i] = 8; //Marks end of route
		}
	}while(grid == 0);
	numOfIntersects = i;
	
	for(i = 1; i <= numOfIntersects; i++){   //Writing route towards X
     678:	01 96       	adiw	r24, 0x01	; 1
     67a:	c8 17       	cp	r28, r24
     67c:	d9 07       	cpc	r29, r25
     67e:	0c f0       	brlt	.+2      	; 0x682 <__LOCK_REGION_LENGTH__+0x282>
     680:	2d cf       	rjmp	.-422    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
			
		}
	}
	
	return numOfIntersects;                                                       //returns intersect count, so amount of intersects on route
}
     682:	ce 01       	movw	r24, r28
     684:	df 91       	pop	r29
     686:	cf 91       	pop	r28
     688:	1f 91       	pop	r17
     68a:	0f 91       	pop	r16
     68c:	ff 90       	pop	r15
     68e:	ef 90       	pop	r14
     690:	df 90       	pop	r13
     692:	cf 90       	pop	r12
     694:	bf 90       	pop	r11
     696:	af 90       	pop	r10
     698:	9f 90       	pop	r9
     69a:	8f 90       	pop	r8
     69c:	7f 90       	pop	r7
     69e:	6f 90       	pop	r6
     6a0:	5f 90       	pop	r5
     6a2:	4f 90       	pop	r4
     6a4:	3f 90       	pop	r3
     6a6:	2f 90       	pop	r2
     6a8:	08 95       	ret

000006aa <driveRoute>:

void driveRoute(int route[2][20], int flag, int flagReturn, int max){             //go to or return from, grid or chargepoint
     6aa:	cf 92       	push	r12
     6ac:	df 92       	push	r13
     6ae:	ef 92       	push	r14
     6b0:	ff 92       	push	r15
     6b2:	0f 93       	push	r16
     6b4:	1f 93       	push	r17
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
     6ba:	6c 01       	movw	r12, r24
     6bc:	eb 01       	movw	r28, r22
     6be:	7a 01       	movw	r14, r20
     6c0:	89 01       	movw	r16, r18
	int intersectnum = 1;                                       // flag 1 =  from or to home, flag 2 is from or to chargepoint
	
	if(flagReturn == 1){
     6c2:	41 30       	cpi	r20, 0x01	; 1
     6c4:	51 05       	cpc	r21, r1
     6c6:	11 f0       	breq	.+4      	; 0x6cc <driveRoute+0x22>
	
	return numOfIntersects;                                                       //returns intersect count, so amount of intersects on route
}

void driveRoute(int route[2][20], int flag, int flagReturn, int max){             //go to or return from, grid or chargepoint
	int intersectnum = 1;                                       // flag 1 =  from or to home, flag 2 is from or to chargepoint
     6c8:	01 e0       	ldi	r16, 0x01	; 1
     6ca:	10 e0       	ldi	r17, 0x00	; 0
	
	if(flagReturn == 1){
		intersectnum = max;
	}
	
	if(flag == 2){
     6cc:	c2 30       	cpi	r28, 0x02	; 2
     6ce:	d1 05       	cpc	r29, r1
     6d0:	49 f4       	brne	.+18     	; 0x6e4 <driveRoute+0x3a>
		motorControl(70, 'R', 0.30);
     6d2:	2a e9       	ldi	r18, 0x9A	; 154
     6d4:	39 e9       	ldi	r19, 0x99	; 153
     6d6:	49 e9       	ldi	r20, 0x99	; 153
     6d8:	5e e3       	ldi	r21, 0x3E	; 62
     6da:	62 e5       	ldi	r22, 0x52	; 82
     6dc:	86 e4       	ldi	r24, 0x46	; 70
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <motorControl>
	}while(checkAfslag() == 0);
	
	if(checkAfslag() != 0){
		
		if(flagReturn == 0){
			switch(route[flag][intersectnum]){
     6e4:	28 e2       	ldi	r18, 0x28	; 40
     6e6:	2c 9f       	mul	r18, r28
     6e8:	c0 01       	movw	r24, r0
     6ea:	2d 9f       	mul	r18, r29
     6ec:	90 0d       	add	r25, r0
     6ee:	11 24       	eor	r1, r1
     6f0:	e8 01       	movw	r28, r16
     6f2:	cc 0f       	add	r28, r28
     6f4:	dd 1f       	adc	r29, r29
     6f6:	c8 0f       	add	r28, r24
     6f8:	d9 1f       	adc	r29, r25
     6fa:	cc 0d       	add	r28, r12
     6fc:	dd 1d       	adc	r29, r13
		motorControl(70, 'R', 0.30);
	}
	
	Next:
	do{
		followLine();
     6fe:	0e 94 c3 09 	call	0x1386	; 0x1386 <followLine>
	}while(checkAfslag() == 0);
     702:	0e 94 08 0a 	call	0x1410	; 0x1410 <checkAfslag>
     706:	89 2b       	or	r24, r25
     708:	d1 f3       	breq	.-12     	; 0x6fe <driveRoute+0x54>
	
	if(checkAfslag() != 0){
     70a:	0e 94 08 0a 	call	0x1410	; 0x1410 <checkAfslag>
     70e:	89 2b       	or	r24, r25
     710:	c9 f1       	breq	.+114    	; 0x784 <driveRoute+0xda>
		
		if(flagReturn == 0){
     712:	e1 14       	cp	r14, r1
     714:	f1 04       	cpc	r15, r1
     716:	b1 f5       	brne	.+108    	; 0x784 <driveRoute+0xda>
			switch(route[flag][intersectnum]){
     718:	89 91       	ld	r24, Y+
     71a:	99 91       	ld	r25, Y+
     71c:	82 30       	cpi	r24, 0x02	; 2
     71e:	91 05       	cpc	r25, r1
     720:	a1 f0       	breq	.+40     	; 0x74a <driveRoute+0xa0>
     722:	1c f4       	brge	.+6      	; 0x72a <driveRoute+0x80>
     724:	01 97       	sbiw	r24, 0x01	; 1
     726:	39 f0       	breq	.+14     	; 0x736 <driveRoute+0x8c>
     728:	2d c0       	rjmp	.+90     	; 0x784 <driveRoute+0xda>
     72a:	83 30       	cpi	r24, 0x03	; 3
     72c:	91 05       	cpc	r25, r1
     72e:	b9 f0       	breq	.+46     	; 0x75e <driveRoute+0xb4>
     730:	05 97       	sbiw	r24, 0x05	; 5
     732:	f9 f0       	breq	.+62     	; 0x772 <driveRoute+0xc8>
     734:	27 c0       	rjmp	.+78     	; 0x784 <driveRoute+0xda>
				case 1:
				motorControl(70, 'R', 0.30);
     736:	2a e9       	ldi	r18, 0x9A	; 154
     738:	39 e9       	ldi	r19, 0x99	; 153
     73a:	49 e9       	ldi	r20, 0x99	; 153
     73c:	5e e3       	ldi	r21, 0x3E	; 62
     73e:	62 e5       	ldi	r22, 0x52	; 82
     740:	86 e4       	ldi	r24, 0x46	; 70
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <motorControl>
				intersectnum++;
				goto Next;
     748:	da cf       	rjmp	.-76     	; 0x6fe <driveRoute+0x54>
				case 2:
				motorControl(70, 'L', 0.30);
     74a:	2a e9       	ldi	r18, 0x9A	; 154
     74c:	39 e9       	ldi	r19, 0x99	; 153
     74e:	49 e9       	ldi	r20, 0x99	; 153
     750:	5e e3       	ldi	r21, 0x3E	; 62
     752:	6c e4       	ldi	r22, 0x4C	; 76
     754:	86 e4       	ldi	r24, 0x46	; 70
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <motorControl>
				intersectnum++;
				goto Next;
     75c:	d0 cf       	rjmp	.-96     	; 0x6fe <driveRoute+0x54>
				case 3:
				motorControl(80, 'F', 0.89);
     75e:	2a e0       	ldi	r18, 0x0A	; 10
     760:	37 ed       	ldi	r19, 0xD7	; 215
     762:	43 e6       	ldi	r20, 0x63	; 99
     764:	5f e3       	ldi	r21, 0x3F	; 63
     766:	66 e4       	ldi	r22, 0x46	; 70
     768:	80 e5       	ldi	r24, 0x50	; 80
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <motorControl>
				intersectnum++;
				goto Next;
     770:	c6 cf       	rjmp	.-116    	; 0x6fe <driveRoute+0x54>
				case 5:
				motorControl(0, 'F', 0.89);    //stop
     772:	2a e0       	ldi	r18, 0x0A	; 10
     774:	37 ed       	ldi	r19, 0xD7	; 215
     776:	43 e6       	ldi	r20, 0x63	; 99
     778:	5f e3       	ldi	r21, 0x3F	; 63
     77a:	66 e4       	ldi	r22, 0x46	; 70
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <motorControl>
				play_from_program_space(PSTR(">g32>>c32"));

			}
		}
	}
}
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	1f 91       	pop	r17
     78a:	0f 91       	pop	r16
     78c:	ff 90       	pop	r15
     78e:	ef 90       	pop	r14
     790:	df 90       	pop	r13
     792:	cf 90       	pop	r12
     794:	08 95       	ret

00000796 <fetchOrder>:
			check = 1;
		}
	}
}

void fetchOrder(int OrderX[], int orderY[], int route[2][20]){
     796:	4f 92       	push	r4
     798:	5f 92       	push	r5
     79a:	6f 92       	push	r6
     79c:	7f 92       	push	r7
     79e:	8f 92       	push	r8
     7a0:	9f 92       	push	r9
     7a2:	af 92       	push	r10
     7a4:	bf 92       	push	r11
     7a6:	cf 92       	push	r12
     7a8:	df 92       	push	r13
     7aa:	ef 92       	push	r14
     7ac:	ff 92       	push	r15
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	08 2f       	mov	r16, r24
     7b8:	19 2f       	mov	r17, r25
     7ba:	d6 2f       	mov	r29, r22
     7bc:	c7 2f       	mov	r28, r23
     7be:	4a 01       	movw	r8, r20
	int crossCountX = 0, crossCountY = 0, flagY = 0, flagX = 0, endX = 5, endY = 0, endFlag = 0;
	int amountOfIntersects = readGrid(route);
     7c0:	ca 01       	movw	r24, r20
     7c2:	0e 94 9a 01 	call	0x334	; 0x334 <readGrid>
     7c6:	3c 01       	movw	r6, r24
	driveRoute(route, 1, 0, amountOfIntersects);    //Drive to grid entrance
     7c8:	9c 01       	movw	r18, r24
     7ca:	40 e0       	ldi	r20, 0x00	; 0
     7cc:	50 e0       	ldi	r21, 0x00	; 0
     7ce:	61 e0       	ldi	r22, 0x01	; 1
     7d0:	70 e0       	ldi	r23, 0x00	; 0
     7d2:	c4 01       	movw	r24, r8
     7d4:	0e 94 55 03 	call	0x6aa	; 0x6aa <driveRoute>
	motorControl(70, 'R', 0.89);
     7d8:	2a e0       	ldi	r18, 0x0A	; 10
     7da:	37 ed       	ldi	r19, 0xD7	; 215
     7dc:	43 e6       	ldi	r20, 0x63	; 99
     7de:	5f e3       	ldi	r21, 0x3F	; 63
     7e0:	62 e5       	ldi	r22, 0x52	; 82
     7e2:	86 e4       	ldi	r24, 0x46	; 70
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <motorControl>
		    : "0" ( microseconds )
		    );  
}

// These are alternative aliases:
static inline void delay(unsigned int milliseconds) { delay_ms(milliseconds); }
     7ea:	82 e3       	ldi	r24, 0x32	; 50
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	0e 94 5e 15 	call	0x2abc	; 0x2abc <delay_ms>
	delay(50);
	motorControl(0, 'R', 0.89);
     7f2:	2a e0       	ldi	r18, 0x0A	; 10
     7f4:	37 ed       	ldi	r19, 0xD7	; 215
     7f6:	43 e6       	ldi	r20, 0x63	; 99
     7f8:	5f e3       	ldi	r21, 0x3F	; 63
     7fa:	62 e5       	ldi	r22, 0x52	; 82
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <motorControl>
     804:	c0 2e       	mov	r12, r16
     806:	d1 2e       	mov	r13, r17
     808:	ed 2e       	mov	r14, r29
     80a:	fc 2e       	mov	r15, r28
	for(int i = 0; i < sizeOfOrder + 1; i ++){
     80c:	a1 2c       	mov	r10, r1
     80e:	b1 2c       	mov	r11, r1
		}
	}
}

void fetchOrder(int OrderX[], int orderY[], int route[2][20]){
	int crossCountX = 0, crossCountY = 0, flagY = 0, flagX = 0, endX = 5, endY = 0, endFlag = 0;
     810:	00 e0       	ldi	r16, 0x00	; 0
     812:	10 e0       	ldi	r17, 0x00	; 0
	motorControl(70, 'R', 0.89);
	delay(50);
	motorControl(0, 'R', 0.89);
	for(int i = 0; i < sizeOfOrder + 1; i ++){
		if(i == sizeOfOrder){
			endFlag = 1;
     814:	44 24       	eor	r4, r4
     816:	43 94       	inc	r4
     818:	51 2c       	mov	r5, r1
     81a:	0c c0       	rjmp	.+24     	; 0x834 <fetchOrder+0x9e>
	driveRoute(route, 1, 0, amountOfIntersects);    //Drive to grid entrance
	motorControl(70, 'R', 0.89);
	delay(50);
	motorControl(0, 'R', 0.89);
	for(int i = 0; i < sizeOfOrder + 1; i ++){
		if(i == sizeOfOrder){
     81c:	84 e0       	ldi	r24, 0x04	; 4
     81e:	a8 16       	cp	r10, r24
     820:	b1 04       	cpc	r11, r1
     822:	11 f4       	brne	.+4      	; 0x828 <fetchOrder+0x92>
			endFlag = 1;
     824:	04 2d       	mov	r16, r4
     826:	15 2d       	mov	r17, r5
     828:	e2 e0       	ldi	r30, 0x02	; 2
     82a:	ce 0e       	add	r12, r30
     82c:	d1 1c       	adc	r13, r1
     82e:	f2 e0       	ldi	r31, 0x02	; 2
     830:	ef 0e       	add	r14, r31
     832:	f1 1c       	adc	r15, r1
     834:	e6 01       	movw	r28, r12
		}
		if((crossCountX > OrderX[i]) || (endFlag == 1 && (crossCountX > endX))){
     836:	88 81       	ld	r24, Y
     838:	99 81       	ldd	r25, Y+1	; 0x01
     83a:	99 23       	and	r25, r25
     83c:	54 f4       	brge	.+20     	; 0x852 <fetchOrder+0xbc>
			motorControl(70, 'L', 0.89);
     83e:	2a e0       	ldi	r18, 0x0A	; 10
     840:	37 ed       	ldi	r19, 0xD7	; 215
     842:	43 e6       	ldi	r20, 0x63	; 99
     844:	5f e3       	ldi	r21, 0x3F	; 63
     846:	6c e4       	ldi	r22, 0x4C	; 76
     848:	86 e4       	ldi	r24, 0x46	; 70
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <motorControl>
			flagX = 1;
     850:	19 c0       	rjmp	.+50     	; 0x884 <fetchOrder+0xee>
		}
		else if((crossCountX < OrderX[i]) || (endFlag == 1 && (crossCountX < endX))){
     852:	18 16       	cp	r1, r24
     854:	19 06       	cpc	r1, r25
     856:	1c f0       	brlt	.+6      	; 0x85e <fetchOrder+0xc8>
     858:	01 30       	cpi	r16, 0x01	; 1
     85a:	11 05       	cpc	r17, r1
     85c:	99 f4       	brne	.+38     	; 0x884 <fetchOrder+0xee>
			motorControl(70, 'R', 0.89);
     85e:	2a e0       	ldi	r18, 0x0A	; 10
     860:	37 ed       	ldi	r19, 0xD7	; 215
     862:	43 e6       	ldi	r20, 0x63	; 99
     864:	5f e3       	ldi	r21, 0x3F	; 63
     866:	62 e5       	ldi	r22, 0x52	; 82
     868:	86 e4       	ldi	r24, 0x46	; 70
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <motorControl>
     870:	09 c0       	rjmp	.+18     	; 0x884 <fetchOrder+0xee>
				//if intersection detected crossCountX++
			}
			else if(flagX == 2){
				//if intersection detected crossCountX--
			}
			motorControl(90, 'F', 0.89);
     872:	2a e0       	ldi	r18, 0x0A	; 10
     874:	37 ed       	ldi	r19, 0xD7	; 215
     876:	43 e6       	ldi	r20, 0x63	; 99
     878:	5f e3       	ldi	r21, 0x3F	; 63
     87a:	66 e4       	ldi	r22, 0x46	; 70
     87c:	8a e5       	ldi	r24, 0x5A	; 90
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <motorControl>
		}
		else if((crossCountX < OrderX[i]) || (endFlag == 1 && (crossCountX < endX))){
			motorControl(70, 'R', 0.89);
			flagX = 2;
		}
		while((crossCountX != OrderX[i]) || (endFlag == 1 && (crossCountX != endX))){
     884:	88 81       	ld	r24, Y
     886:	99 81       	ldd	r25, Y+1	; 0x01
     888:	89 2b       	or	r24, r25
     88a:	99 f7       	brne	.-26     	; 0x872 <fetchOrder+0xdc>
     88c:	01 30       	cpi	r16, 0x01	; 1
     88e:	11 05       	cpc	r17, r1
     890:	81 f3       	breq	.-32     	; 0x872 <fetchOrder+0xdc>
				//if intersection detected crossCountX--
			}
			motorControl(90, 'F', 0.89);
			// if intersection detected crossCountX++
		}
		motorControl(0, 'F', 0.89);
     892:	2a e0       	ldi	r18, 0x0A	; 10
     894:	37 ed       	ldi	r19, 0xD7	; 215
     896:	43 e6       	ldi	r20, 0x63	; 99
     898:	5f e3       	ldi	r21, 0x3F	; 63
     89a:	66 e4       	ldi	r22, 0x46	; 70
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <motorControl>
     8a4:	e7 01       	movw	r28, r14
		if((crossCountY > orderY[i]) || (endFlag == 1 && (crossCountY > endY))){
     8a6:	88 81       	ld	r24, Y
     8a8:	99 81       	ldd	r25, Y+1	; 0x01
     8aa:	99 23       	and	r25, r25
     8ac:	74 f4       	brge	.+28     	; 0x8ca <fetchOrder+0x134>
			motorControl(70, 'L', 0.89);
     8ae:	2a e0       	ldi	r18, 0x0A	; 10
     8b0:	37 ed       	ldi	r19, 0xD7	; 215
     8b2:	43 e6       	ldi	r20, 0x63	; 99
     8b4:	5f e3       	ldi	r21, 0x3F	; 63
     8b6:	6c e4       	ldi	r22, 0x4C	; 76
     8b8:	86 e4       	ldi	r24, 0x46	; 70
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <motorControl>
		}
		else if((crossCountY < orderY[i]) || (endFlag == 1 && (crossCountY < endY))){
			motorControl(70, 'R', 0.89);
			flagY = 2;
		}
		while((crossCountY != orderY[i]) || (endFlag == 1 && (crossCountY != endY))){
     8c0:	88 81       	ld	r24, Y
     8c2:	99 81       	ldd	r25, Y+1	; 0x01
     8c4:	89 2b       	or	r24, r25
     8c6:	71 f4       	brne	.+28     	; 0x8e4 <fetchOrder+0x14e>
     8c8:	1a c0       	rjmp	.+52     	; 0x8fe <fetchOrder+0x168>
		motorControl(0, 'F', 0.89);
		if((crossCountY > orderY[i]) || (endFlag == 1 && (crossCountY > endY))){
			motorControl(70, 'L', 0.89);
			flagY = 1;
		}
		else if((crossCountY < orderY[i]) || (endFlag == 1 && (crossCountY < endY))){
     8ca:	18 16       	cp	r1, r24
     8cc:	19 06       	cpc	r1, r25
     8ce:	c4 f7       	brge	.-16     	; 0x8c0 <fetchOrder+0x12a>
			motorControl(70, 'R', 0.89);
     8d0:	2a e0       	ldi	r18, 0x0A	; 10
     8d2:	37 ed       	ldi	r19, 0xD7	; 215
     8d4:	43 e6       	ldi	r20, 0x63	; 99
     8d6:	5f e3       	ldi	r21, 0x3F	; 63
     8d8:	62 e5       	ldi	r22, 0x52	; 82
     8da:	86 e4       	ldi	r24, 0x46	; 70
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <motorControl>
     8e2:	ee cf       	rjmp	.-36     	; 0x8c0 <fetchOrder+0x12a>
				//if intersection detected crossCountY++
			}
			else if(flagY == 2){
				//if intersection detected crossCountY--
			}
			motorControl(90, 'F', 0.89);
     8e4:	2a e0       	ldi	r18, 0x0A	; 10
     8e6:	37 ed       	ldi	r19, 0xD7	; 215
     8e8:	43 e6       	ldi	r20, 0x63	; 99
     8ea:	5f e3       	ldi	r21, 0x3F	; 63
     8ec:	66 e4       	ldi	r22, 0x46	; 70
     8ee:	8a e5       	ldi	r24, 0x5A	; 90
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <motorControl>
		}
		else if((crossCountY < orderY[i]) || (endFlag == 1 && (crossCountY < endY))){
			motorControl(70, 'R', 0.89);
			flagY = 2;
		}
		while((crossCountY != orderY[i]) || (endFlag == 1 && (crossCountY != endY))){
     8f6:	88 81       	ld	r24, Y
     8f8:	99 81       	ldd	r25, Y+1	; 0x01
     8fa:	89 2b       	or	r24, r25
     8fc:	99 f7       	brne	.-26     	; 0x8e4 <fetchOrder+0x14e>
			else if(flagY == 2){
				//if intersection detected crossCountY--
			}
			motorControl(90, 'F', 0.89);
		}
		play_from_program_space(PSTR(">g32>>c32"));
     8fe:	82 ea       	ldi	r24, 0xA2	; 162
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	0e 94 d7 11 	call	0x23ae	; 0x23ae <play_from_program_space>
     906:	88 ec       	ldi	r24, 0xC8	; 200
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	0e 94 5e 15 	call	0x2abc	; 0x2abc <delay_ms>
	int amountOfIntersects = readGrid(route);
	driveRoute(route, 1, 0, amountOfIntersects);    //Drive to grid entrance
	motorControl(70, 'R', 0.89);
	delay(50);
	motorControl(0, 'R', 0.89);
	for(int i = 0; i < sizeOfOrder + 1; i ++){
     90e:	8f ef       	ldi	r24, 0xFF	; 255
     910:	a8 1a       	sub	r10, r24
     912:	b8 0a       	sbc	r11, r24
     914:	e5 e0       	ldi	r30, 0x05	; 5
     916:	ae 16       	cp	r10, r30
     918:	b1 04       	cpc	r11, r1
     91a:	09 f0       	breq	.+2      	; 0x91e <__stack+0x1f>
     91c:	7f cf       	rjmp	.-258    	; 0x81c <fetchOrder+0x86>
			motorControl(90, 'F', 0.89);
		}
		play_from_program_space(PSTR(">g32>>c32"));
		delay(200);
	}
	driveRoute(route, 1, 1, amountOfIntersects);    //Drive back to home
     91e:	93 01       	movw	r18, r6
     920:	41 e0       	ldi	r20, 0x01	; 1
     922:	50 e0       	ldi	r21, 0x00	; 0
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	70 e0       	ldi	r23, 0x00	; 0
     928:	c4 01       	movw	r24, r8
     92a:	0e 94 55 03 	call	0x6aa	; 0x6aa <driveRoute>
	play_from_program_space(PSTR(">g32>>c32"));
     92e:	88 e9       	ldi	r24, 0x98	; 152
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	0e 94 d7 11 	call	0x23ae	; 0x23ae <play_from_program_space>
}
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ff 90       	pop	r15
     940:	ef 90       	pop	r14
     942:	df 90       	pop	r13
     944:	cf 90       	pop	r12
     946:	bf 90       	pop	r11
     948:	af 90       	pop	r10
     94a:	9f 90       	pop	r9
     94c:	8f 90       	pop	r8
     94e:	7f 90       	pop	r7
     950:	6f 90       	pop	r6
     952:	5f 90       	pop	r5
     954:	4f 90       	pop	r4
     956:	08 95       	ret

00000958 <main>:
#include <avr/pgmspace.h>
#include "wireless.h"
#include "sensoren.h"
#include "motoren.h"

int main(){
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	cd b7       	in	r28, 0x3d	; 61
     962:	de b7       	in	r29, 0x3e	; 62
     964:	c0 56       	subi	r28, 0x60	; 96
     966:	d1 09       	sbc	r29, r1
     968:	0f b6       	in	r0, 0x3f	; 63
     96a:	f8 94       	cli
     96c:	de bf       	out	0x3e, r29	; 62
     96e:	0f be       	out	0x3f, r0	; 63
     970:	cd bf       	out	0x3d, r28	; 61
	initialize();
     972:	0e 94 3f 09 	call	0x127e	; 0x127e <initialize>
	int amountOfIntersects = 0;
	int routes[2][20];
    amountOfIntersects = readGrid(routes);
     976:	ce 01       	movw	r24, r28
     978:	01 96       	adiw	r24, 0x01	; 1
     97a:	0e 94 9a 01 	call	0x334	; 0x334 <readGrid>
     97e:	8c 01       	movw	r16, r24
	
	int orderX[sizeOfOrder];
	int orderY[sizeOfOrder];
	wirMain(orderX, orderY);
     980:	be 01       	movw	r22, r28
     982:	67 5a       	subi	r22, 0xA7	; 167
     984:	7f 4f       	sbci	r23, 0xFF	; 255
     986:	ce 01       	movw	r24, r28
     988:	8f 5a       	subi	r24, 0xAF	; 175
     98a:	9f 4f       	sbci	r25, 0xFF	; 255
     98c:	0e 94 3f 0b 	call	0x167e	; 0x167e <wirMain>
	sortOrder(orderX, orderY);
     990:	be 01       	movw	r22, r28
     992:	67 5a       	subi	r22, 0xA7	; 167
     994:	7f 4f       	sbci	r23, 0xFF	; 255
     996:	ce 01       	movw	r24, r28
     998:	8f 5a       	subi	r24, 0xAF	; 175
     99a:	9f 4f       	sbci	r25, 0xFF	; 255
     99c:	0e 94 9c 00 	call	0x138	; 0x138 <sortOrder>
	driveRoute(routes, 1, 0, amountOfIntersects);
     9a0:	98 01       	movw	r18, r16
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e0       	ldi	r21, 0x00	; 0
     9a6:	61 e0       	ldi	r22, 0x01	; 1
     9a8:	70 e0       	ldi	r23, 0x00	; 0
     9aa:	ce 01       	movw	r24, r28
     9ac:	01 96       	adiw	r24, 0x01	; 1
     9ae:	0e 94 55 03 	call	0x6aa	; 0x6aa <driveRoute>
	fetchOrder(orderX, orderY, routes);	
     9b2:	ae 01       	movw	r20, r28
     9b4:	4f 5f       	subi	r20, 0xFF	; 255
     9b6:	5f 4f       	sbci	r21, 0xFF	; 255
     9b8:	be 01       	movw	r22, r28
     9ba:	67 5a       	subi	r22, 0xA7	; 167
     9bc:	7f 4f       	sbci	r23, 0xFF	; 255
     9be:	ce 01       	movw	r24, r28
     9c0:	8f 5a       	subi	r24, 0xAF	; 175
     9c2:	9f 4f       	sbci	r25, 0xFF	; 255
     9c4:	0e 94 cb 03 	call	0x796	; 0x796 <fetchOrder>
				
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	c0 5a       	subi	r28, 0xA0	; 160
     9ce:	df 4f       	sbci	r29, 0xFF	; 255
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	f8 94       	cli
     9d4:	de bf       	out	0x3e, r29	; 62
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	cd bf       	out	0x3d, r28	; 61
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	1f 91       	pop	r17
     9e0:	0f 91       	pop	r16
     9e2:	08 95       	ret

000009e4 <motorControl>:

int speedCurrent = 0;
int speedCurrentRight = 0;
int speedCurrentLeft = 0;

void motorControl(int speed, char direction, float aggressionFactor){
     9e4:	2f 92       	push	r2
     9e6:	3f 92       	push	r3
     9e8:	4f 92       	push	r4
     9ea:	5f 92       	push	r5
     9ec:	6f 92       	push	r6
     9ee:	7f 92       	push	r7
     9f0:	8f 92       	push	r8
     9f2:	9f 92       	push	r9
     9f4:	af 92       	push	r10
     9f6:	bf 92       	push	r11
     9f8:	cf 92       	push	r12
     9fa:	df 92       	push	r13
     9fc:	ef 92       	push	r14
     9fe:	ff 92       	push	r15
     a00:	0f 93       	push	r16
     a02:	1f 93       	push	r17
     a04:	cf 93       	push	r28
     a06:	df 93       	push	r29
     a08:	cd b7       	in	r28, 0x3d	; 61
     a0a:	de b7       	in	r29, 0x3e	; 62
     a0c:	66 97       	sbiw	r28, 0x16	; 22
     a0e:	0f b6       	in	r0, 0x3f	; 63
     a10:	f8 94       	cli
     a12:	de bf       	out	0x3e, r29	; 62
     a14:	0f be       	out	0x3f, r0	; 63
     a16:	cd bf       	out	0x3d, r28	; 61
     a18:	1c 01       	movw	r2, r24
     a1a:	29 83       	std	Y+1, r18	; 0x01
     a1c:	3a 83       	std	Y+2, r19	; 0x02
     a1e:	4b 83       	std	Y+3, r20	; 0x03
     a20:	5c 83       	std	Y+4, r21	; 0x04
	int setSpeedRight = 0;
	int setSpeedLeft = 0;
	
	//directions direction;

	switch (direction){
     a22:	66 34       	cpi	r22, 0x46	; 70
     a24:	61 f0       	breq	.+24     	; 0xa3e <motorControl+0x5a>
     a26:	20 f4       	brcc	.+8      	; 0xa30 <motorControl+0x4c>
     a28:	62 34       	cpi	r22, 0x42	; 66
     a2a:	09 f4       	brne	.+2      	; 0xa2e <motorControl+0x4a>
     a2c:	95 c0       	rjmp	.+298    	; 0xb58 <motorControl+0x174>
     a2e:	08 c4       	rjmp	.+2064   	; 0x1240 <motorControl+0x85c>
     a30:	6c 34       	cpi	r22, 0x4C	; 76
     a32:	09 f4       	brne	.+2      	; 0xa36 <motorControl+0x52>
     a34:	a9 c2       	rjmp	.+1362   	; 0xf88 <motorControl+0x5a4>
     a36:	62 35       	cpi	r22, 0x52	; 82
     a38:	09 f4       	brne	.+2      	; 0xa3c <motorControl+0x58>
     a3a:	1b c1       	rjmp	.+566    	; 0xc72 <motorControl+0x28e>
     a3c:	01 c4       	rjmp	.+2050   	; 0x1240 <motorControl+0x85c>
		case 'F':
		
		setSpeed = speed - speedCurrent;
     a3e:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <speedCurrent>
     a42:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <speedCurrent+0x1>
     a46:	91 01       	movw	r18, r2
     a48:	28 1b       	sub	r18, r24
     a4a:	39 0b       	sbc	r19, r25
     a4c:	45 e6       	ldi	r20, 0x65	; 101
     a4e:	50 e0       	ldi	r21, 0x00	; 0
     a50:	5a 87       	std	Y+10, r21	; 0x0a
     a52:	49 87       	std	Y+9, r20	; 0x09
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     a54:	41 2c       	mov	r4, r1
     a56:	51 2c       	mov	r5, r1
     a58:	32 01       	movw	r6, r4
			timerStart = get_ms();
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2*M_PI ) ) * sin ( 2* M_PI * accelerationCounter ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     a5a:	03 2e       	mov	r0, r19
     a5c:	00 0c       	add	r0, r0
     a5e:	44 0b       	sbc	r20, r20
     a60:	55 0b       	sbc	r21, r21
     a62:	2d 83       	std	Y+5, r18	; 0x05
     a64:	3e 83       	std	Y+6, r19	; 0x06
     a66:	4f 83       	std	Y+7, r20	; 0x07
     a68:	58 87       	std	Y+8, r21	; 0x08
		case 'F':
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     a6a:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <get_ms>
     a6e:	8b 01       	movw	r16, r22
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2*M_PI ) ) * sin ( 2* M_PI * accelerationCounter ) ) );
     a70:	2b ed       	ldi	r18, 0xDB	; 219
     a72:	3f e0       	ldi	r19, 0x0F	; 15
     a74:	49 ec       	ldi	r20, 0xC9	; 201
     a76:	50 e4       	ldi	r21, 0x40	; 64
     a78:	c3 01       	movw	r24, r6
     a7a:	b2 01       	movw	r22, r4
     a7c:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     a80:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <sin>
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     a84:	23 e8       	ldi	r18, 0x83	; 131
     a86:	39 ef       	ldi	r19, 0xF9	; 249
     a88:	42 e2       	ldi	r20, 0x22	; 34
     a8a:	5e e3       	ldi	r21, 0x3E	; 62
     a8c:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     a90:	9b 01       	movw	r18, r22
     a92:	ac 01       	movw	r20, r24
     a94:	c3 01       	movw	r24, r6
     a96:	b2 01       	movw	r22, r4
     a98:	0e 94 44 0b 	call	0x1688	; 0x1688 <__subsf3>
     a9c:	4b 01       	movw	r8, r22
     a9e:	5c 01       	movw	r10, r24
     aa0:	6d 81       	ldd	r22, Y+5	; 0x05
     aa2:	7e 81       	ldd	r23, Y+6	; 0x06
     aa4:	8f 81       	ldd	r24, Y+7	; 0x07
     aa6:	98 85       	ldd	r25, Y+8	; 0x08
     aa8:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__floatsisf>
     aac:	9b 01       	movw	r18, r22
     aae:	ac 01       	movw	r20, r24
     ab0:	c5 01       	movw	r24, r10
     ab2:	b4 01       	movw	r22, r8
     ab4:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     ab8:	4b 01       	movw	r8, r22
     aba:	5c 01       	movw	r10, r24
     abc:	60 91 d3 01 	lds	r22, 0x01D3	; 0x8001d3 <speedCurrent>
     ac0:	70 91 d4 01 	lds	r23, 0x01D4	; 0x8001d4 <speedCurrent+0x1>
     ac4:	07 2e       	mov	r0, r23
     ac6:	00 0c       	add	r0, r0
     ac8:	88 0b       	sbc	r24, r24
     aca:	99 0b       	sbc	r25, r25
     acc:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__floatsisf>
     ad0:	9b 01       	movw	r18, r22
     ad2:	ac 01       	movw	r20, r24
     ad4:	c5 01       	movw	r24, r10
     ad6:	b4 01       	movw	r22, r8
     ad8:	0e 94 45 0b 	call	0x168a	; 0x168a <__addsf3>
     adc:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixsfsi>
     ae0:	dc 01       	movw	r26, r24
     ae2:	cb 01       	movw	r24, r22
     ae4:	bc 01       	movw	r22, r24
     ae6:	0e 94 1d 14 	call	0x283a	; 0x283a <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     aea:	48 01       	movw	r8, r16
     aec:	11 0f       	add	r17, r17
     aee:	aa 08       	sbc	r10, r10
     af0:	bb 08       	sbc	r11, r11
     af2:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <get_ms>
     af6:	68 19       	sub	r22, r8
     af8:	79 09       	sbc	r23, r9
     afa:	8a 09       	sbc	r24, r10
     afc:	9b 09       	sbc	r25, r11
     afe:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__floatunsisf>
     b02:	6b 01       	movw	r12, r22
     b04:	7c 01       	movw	r14, r24
     b06:	20 e0       	ldi	r18, 0x00	; 0
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	40 e2       	ldi	r20, 0x20	; 32
     b0c:	51 e4       	ldi	r21, 0x41	; 65
     b0e:	69 81       	ldd	r22, Y+1	; 0x01
     b10:	7a 81       	ldd	r23, Y+2	; 0x02
     b12:	8b 81       	ldd	r24, Y+3	; 0x03
     b14:	9c 81       	ldd	r25, Y+4	; 0x04
     b16:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     b1a:	9b 01       	movw	r18, r22
     b1c:	ac 01       	movw	r20, r24
     b1e:	c7 01       	movw	r24, r14
     b20:	b6 01       	movw	r22, r12
     b22:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__cmpsf2>
     b26:	88 23       	and	r24, r24
     b28:	24 f3       	brlt	.-56     	; 0xaf2 <motorControl+0x10e>
	switch (direction){
		case 'F':
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     b2a:	2a e0       	ldi	r18, 0x0A	; 10
     b2c:	37 ed       	ldi	r19, 0xD7	; 215
     b2e:	43 e2       	ldi	r20, 0x23	; 35
     b30:	5c e3       	ldi	r21, 0x3C	; 60
     b32:	c3 01       	movw	r24, r6
     b34:	b2 01       	movw	r22, r4
     b36:	0e 94 45 0b 	call	0x168a	; 0x168a <__addsf3>
     b3a:	2b 01       	movw	r4, r22
     b3c:	3c 01       	movw	r6, r24
     b3e:	a9 85       	ldd	r26, Y+9	; 0x09
     b40:	ba 85       	ldd	r27, Y+10	; 0x0a
     b42:	11 97       	sbiw	r26, 0x01	; 1
     b44:	ba 87       	std	Y+10, r27	; 0x0a
     b46:	a9 87       	std	Y+9, r26	; 0x09
     b48:	ab 2b       	or	r26, r27
     b4a:	09 f0       	breq	.+2      	; 0xb4e <motorControl+0x16a>
     b4c:	8e cf       	rjmp	.-228    	; 0xa6a <motorControl+0x86>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrent = speed;
     b4e:	30 92 d4 01 	sts	0x01D4, r3	; 0x8001d4 <speedCurrent+0x1>
     b52:	20 92 d3 01 	sts	0x01D3, r2	; 0x8001d3 <speedCurrent>
		break;
     b56:	7a c3       	rjmp	.+1780   	; 0x124c <motorControl+0x868>
		
		case 'B':
		
		setSpeed = speed - speedCurrent;
     b58:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <speedCurrent>
     b5c:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <speedCurrent+0x1>
     b60:	91 01       	movw	r18, r2
     b62:	28 1b       	sub	r18, r24
     b64:	39 0b       	sbc	r19, r25
     b66:	45 e6       	ldi	r20, 0x65	; 101
     b68:	50 e0       	ldi	r21, 0x00	; 0
     b6a:	5a 87       	std	Y+10, r21	; 0x0a
     b6c:	49 87       	std	Y+9, r20	; 0x09
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     b6e:	41 2c       	mov	r4, r1
     b70:	51 2c       	mov	r5, r1
     b72:	32 01       	movw	r6, r4
			timerStart = get_ms();
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     b74:	03 2e       	mov	r0, r19
     b76:	00 0c       	add	r0, r0
     b78:	44 0b       	sbc	r20, r20
     b7a:	55 0b       	sbc	r21, r21
     b7c:	2d 83       	std	Y+5, r18	; 0x05
     b7e:	3e 83       	std	Y+6, r19	; 0x06
     b80:	4f 83       	std	Y+7, r20	; 0x07
     b82:	58 87       	std	Y+8, r21	; 0x08
		case 'B':
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     b84:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <get_ms>
     b88:	8b 01       	movw	r16, r22
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) );
     b8a:	2b ed       	ldi	r18, 0xDB	; 219
     b8c:	3f e0       	ldi	r19, 0x0F	; 15
     b8e:	49 ec       	ldi	r20, 0xC9	; 201
     b90:	50 e4       	ldi	r21, 0x40	; 64
     b92:	c3 01       	movw	r24, r6
     b94:	b2 01       	movw	r22, r4
     b96:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     b9a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <sin>
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     b9e:	23 e8       	ldi	r18, 0x83	; 131
     ba0:	39 ef       	ldi	r19, 0xF9	; 249
     ba2:	42 e2       	ldi	r20, 0x22	; 34
     ba4:	5e e3       	ldi	r21, 0x3E	; 62
     ba6:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     baa:	9b 01       	movw	r18, r22
     bac:	ac 01       	movw	r20, r24
     bae:	c3 01       	movw	r24, r6
     bb0:	b2 01       	movw	r22, r4
     bb2:	0e 94 44 0b 	call	0x1688	; 0x1688 <__subsf3>
     bb6:	4b 01       	movw	r8, r22
     bb8:	5c 01       	movw	r10, r24
     bba:	6d 81       	ldd	r22, Y+5	; 0x05
     bbc:	7e 81       	ldd	r23, Y+6	; 0x06
     bbe:	8f 81       	ldd	r24, Y+7	; 0x07
     bc0:	98 85       	ldd	r25, Y+8	; 0x08
     bc2:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__floatsisf>
     bc6:	9b 01       	movw	r18, r22
     bc8:	ac 01       	movw	r20, r24
     bca:	c5 01       	movw	r24, r10
     bcc:	b4 01       	movw	r22, r8
     bce:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     bd2:	4b 01       	movw	r8, r22
     bd4:	5c 01       	movw	r10, r24
     bd6:	60 91 d3 01 	lds	r22, 0x01D3	; 0x8001d3 <speedCurrent>
     bda:	70 91 d4 01 	lds	r23, 0x01D4	; 0x8001d4 <speedCurrent+0x1>
     bde:	07 2e       	mov	r0, r23
     be0:	00 0c       	add	r0, r0
     be2:	88 0b       	sbc	r24, r24
     be4:	99 0b       	sbc	r25, r25
     be6:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__floatsisf>
     bea:	9b 01       	movw	r18, r22
     bec:	ac 01       	movw	r20, r24
     bee:	c5 01       	movw	r24, r10
     bf0:	b4 01       	movw	r22, r8
     bf2:	0e 94 45 0b 	call	0x168a	; 0x168a <__addsf3>
     bf6:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixsfsi>
     bfa:	dc 01       	movw	r26, r24
     bfc:	cb 01       	movw	r24, r22
     bfe:	bc 01       	movw	r22, r24
     c00:	0e 94 1d 14 	call	0x283a	; 0x283a <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     c04:	48 01       	movw	r8, r16
     c06:	11 0f       	add	r17, r17
     c08:	aa 08       	sbc	r10, r10
     c0a:	bb 08       	sbc	r11, r11
     c0c:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <get_ms>
     c10:	68 19       	sub	r22, r8
     c12:	79 09       	sbc	r23, r9
     c14:	8a 09       	sbc	r24, r10
     c16:	9b 09       	sbc	r25, r11
     c18:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__floatunsisf>
     c1c:	6b 01       	movw	r12, r22
     c1e:	7c 01       	movw	r14, r24
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	40 e2       	ldi	r20, 0x20	; 32
     c26:	51 e4       	ldi	r21, 0x41	; 65
     c28:	69 81       	ldd	r22, Y+1	; 0x01
     c2a:	7a 81       	ldd	r23, Y+2	; 0x02
     c2c:	8b 81       	ldd	r24, Y+3	; 0x03
     c2e:	9c 81       	ldd	r25, Y+4	; 0x04
     c30:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     c34:	9b 01       	movw	r18, r22
     c36:	ac 01       	movw	r20, r24
     c38:	c7 01       	movw	r24, r14
     c3a:	b6 01       	movw	r22, r12
     c3c:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__cmpsf2>
     c40:	88 23       	and	r24, r24
     c42:	24 f3       	brlt	.-56     	; 0xc0c <motorControl+0x228>
		
		case 'B':
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     c44:	2a e0       	ldi	r18, 0x0A	; 10
     c46:	37 ed       	ldi	r19, 0xD7	; 215
     c48:	43 e2       	ldi	r20, 0x23	; 35
     c4a:	5c e3       	ldi	r21, 0x3C	; 60
     c4c:	c3 01       	movw	r24, r6
     c4e:	b2 01       	movw	r22, r4
     c50:	0e 94 45 0b 	call	0x168a	; 0x168a <__addsf3>
     c54:	2b 01       	movw	r4, r22
     c56:	3c 01       	movw	r6, r24
     c58:	a9 85       	ldd	r26, Y+9	; 0x09
     c5a:	ba 85       	ldd	r27, Y+10	; 0x0a
     c5c:	11 97       	sbiw	r26, 0x01	; 1
     c5e:	ba 87       	std	Y+10, r27	; 0x0a
     c60:	a9 87       	std	Y+9, r26	; 0x09
     c62:	ab 2b       	or	r26, r27
     c64:	09 f0       	breq	.+2      	; 0xc68 <motorControl+0x284>
     c66:	8e cf       	rjmp	.-228    	; 0xb84 <motorControl+0x1a0>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrent = speed;
     c68:	30 92 d4 01 	sts	0x01D4, r3	; 0x8001d4 <speedCurrent+0x1>
     c6c:	20 92 d3 01 	sts	0x01D3, r2	; 0x8001d3 <speedCurrent>
		break;
     c70:	ed c2       	rjmp	.+1498   	; 0x124c <motorControl+0x868>

		case 'R':
		
		setSpeedRight = speed + speedCurrentRight;
     c72:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <speedCurrentRight>
     c76:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <speedCurrentRight+0x1>
     c7a:	82 0d       	add	r24, r2
     c7c:	93 1d       	adc	r25, r3
		setSpeedLeft = speed - speedCurrentLeft;
     c7e:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <speedCurrentLeft>
     c82:	30 91 d0 01 	lds	r19, 0x01D0	; 0x8001d0 <speedCurrentLeft+0x1>
     c86:	a1 01       	movw	r20, r2
     c88:	42 1b       	sub	r20, r18
     c8a:	53 0b       	sbc	r21, r19
     c8c:	9a 01       	movw	r18, r20
     c8e:	05 e6       	ldi	r16, 0x65	; 101
     c90:	10 e0       	ldi	r17, 0x00	; 0
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     c92:	1d 82       	std	Y+5, r1	; 0x05
     c94:	1e 82       	std	Y+6, r1	; 0x06
     c96:	1f 82       	std	Y+7, r1	; 0x07
     c98:	18 86       	std	Y+8, r1	; 0x08
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			motorLeftSpeed = speedCurrent + (speedCurrentLeft + (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     c9a:	ac 01       	movw	r20, r24
     c9c:	99 0f       	add	r25, r25
     c9e:	66 0b       	sbc	r22, r22
     ca0:	77 0b       	sbc	r23, r23
     ca2:	4d 87       	std	Y+13, r20	; 0x0d
     ca4:	5e 87       	std	Y+14, r21	; 0x0e
     ca6:	6f 87       	std	Y+15, r22	; 0x0f
     ca8:	78 8b       	std	Y+16, r23	; 0x10
     caa:	b9 01       	movw	r22, r18
     cac:	33 0f       	add	r19, r19
     cae:	88 0b       	sbc	r24, r24
     cb0:	99 0b       	sbc	r25, r25
     cb2:	69 8b       	std	Y+17, r22	; 0x11
     cb4:	7a 8b       	std	Y+18, r23	; 0x12
     cb6:	8b 8b       	std	Y+19, r24	; 0x13
     cb8:	9c 8b       	std	Y+20, r25	; 0x14
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     cba:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <get_ms>
     cbe:	7e 8b       	std	Y+22, r23	; 0x16
     cc0:	6d 8b       	std	Y+21, r22	; 0x15
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
     cc2:	60 91 d3 01 	lds	r22, 0x01D3	; 0x8001d3 <speedCurrent>
     cc6:	70 91 d4 01 	lds	r23, 0x01D4	; 0x8001d4 <speedCurrent+0x1>
     cca:	07 2e       	mov	r0, r23
     ccc:	00 0c       	add	r0, r0
     cce:	88 0b       	sbc	r24, r24
     cd0:	99 0b       	sbc	r25, r25
     cd2:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__floatsisf>
     cd6:	69 87       	std	Y+9, r22	; 0x09
     cd8:	7a 87       	std	Y+10, r23	; 0x0a
     cda:	8b 87       	std	Y+11, r24	; 0x0b
     cdc:	9c 87       	std	Y+12, r25	; 0x0c
     cde:	2b ed       	ldi	r18, 0xDB	; 219
     ce0:	3f e0       	ldi	r19, 0x0F	; 15
     ce2:	49 ec       	ldi	r20, 0xC9	; 201
     ce4:	50 e4       	ldi	r21, 0x40	; 64
     ce6:	6d 81       	ldd	r22, Y+5	; 0x05
     ce8:	7e 81       	ldd	r23, Y+6	; 0x06
     cea:	8f 81       	ldd	r24, Y+7	; 0x07
     cec:	98 85       	ldd	r25, Y+8	; 0x08
     cee:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     cf2:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <sin>
     cf6:	23 e8       	ldi	r18, 0x83	; 131
     cf8:	39 ef       	ldi	r19, 0xF9	; 249
     cfa:	42 e2       	ldi	r20, 0x22	; 34
     cfc:	5e e3       	ldi	r21, 0x3E	; 62
     cfe:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     d02:	2d 81       	ldd	r18, Y+5	; 0x05
     d04:	3e 81       	ldd	r19, Y+6	; 0x06
     d06:	4f 81       	ldd	r20, Y+7	; 0x07
     d08:	58 85       	ldd	r21, Y+8	; 0x08
     d0a:	0e 94 45 0b 	call	0x168a	; 0x168a <__addsf3>
     d0e:	4b 01       	movw	r8, r22
     d10:	5c 01       	movw	r10, r24
			
			motorLeftSpeed = speedCurrent + (speedCurrentLeft + (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     d12:	60 91 d1 01 	lds	r22, 0x01D1	; 0x8001d1 <speedCurrentRight>
     d16:	70 91 d2 01 	lds	r23, 0x01D2	; 0x8001d2 <speedCurrentRight+0x1>
     d1a:	07 2e       	mov	r0, r23
     d1c:	00 0c       	add	r0, r0
     d1e:	88 0b       	sbc	r24, r24
     d20:	99 0b       	sbc	r25, r25
     d22:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__floatsisf>
     d26:	2b 01       	movw	r4, r22
     d28:	3c 01       	movw	r6, r24
     d2a:	6d 85       	ldd	r22, Y+13	; 0x0d
     d2c:	7e 85       	ldd	r23, Y+14	; 0x0e
     d2e:	8f 85       	ldd	r24, Y+15	; 0x0f
     d30:	98 89       	ldd	r25, Y+16	; 0x10
     d32:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__floatsisf>
     d36:	a5 01       	movw	r20, r10
     d38:	94 01       	movw	r18, r8
     d3a:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     d3e:	9b 01       	movw	r18, r22
     d40:	ac 01       	movw	r20, r24
     d42:	c3 01       	movw	r24, r6
     d44:	b2 01       	movw	r22, r4
     d46:	0e 94 44 0b 	call	0x1688	; 0x1688 <__subsf3>
     d4a:	29 85       	ldd	r18, Y+9	; 0x09
     d4c:	3a 85       	ldd	r19, Y+10	; 0x0a
     d4e:	4b 85       	ldd	r20, Y+11	; 0x0b
     d50:	5c 85       	ldd	r21, Y+12	; 0x0c
     d52:	0e 94 45 0b 	call	0x168a	; 0x168a <__addsf3>
     d56:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixsfsi>
     d5a:	2b 01       	movw	r4, r22
     d5c:	3c 01       	movw	r6, r24
     d5e:	60 91 cf 01 	lds	r22, 0x01CF	; 0x8001cf <speedCurrentLeft>
     d62:	70 91 d0 01 	lds	r23, 0x01D0	; 0x8001d0 <speedCurrentLeft+0x1>
     d66:	07 2e       	mov	r0, r23
     d68:	00 0c       	add	r0, r0
     d6a:	88 0b       	sbc	r24, r24
     d6c:	99 0b       	sbc	r25, r25
     d6e:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__floatsisf>
     d72:	6b 01       	movw	r12, r22
     d74:	7c 01       	movw	r14, r24
     d76:	69 89       	ldd	r22, Y+17	; 0x11
     d78:	7a 89       	ldd	r23, Y+18	; 0x12
     d7a:	8b 89       	ldd	r24, Y+19	; 0x13
     d7c:	9c 89       	ldd	r25, Y+20	; 0x14
     d7e:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__floatsisf>
     d82:	a5 01       	movw	r20, r10
     d84:	94 01       	movw	r18, r8
     d86:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     d8a:	9b 01       	movw	r18, r22
     d8c:	ac 01       	movw	r20, r24
     d8e:	c7 01       	movw	r24, r14
     d90:	b6 01       	movw	r22, r12
     d92:	0e 94 45 0b 	call	0x168a	; 0x168a <__addsf3>
     d96:	29 85       	ldd	r18, Y+9	; 0x09
     d98:	3a 85       	ldd	r19, Y+10	; 0x0a
     d9a:	4b 85       	ldd	r20, Y+11	; 0x0b
     d9c:	5c 85       	ldd	r21, Y+12	; 0x0c
     d9e:	0e 94 45 0b 	call	0x168a	; 0x168a <__addsf3>
     da2:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixsfsi>
     da6:	dc 01       	movw	r26, r24
     da8:	cb 01       	movw	r24, r22
     daa:	b2 01       	movw	r22, r4
     dac:	0e 94 1d 14 	call	0x283a	; 0x283a <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     db0:	8d 89       	ldd	r24, Y+21	; 0x15
     db2:	9e 89       	ldd	r25, Y+22	; 0x16
     db4:	4c 01       	movw	r8, r24
     db6:	99 0f       	add	r25, r25
     db8:	aa 08       	sbc	r10, r10
     dba:	bb 08       	sbc	r11, r11
     dbc:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <get_ms>
     dc0:	6b 01       	movw	r12, r22
     dc2:	7c 01       	movw	r14, r24
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	40 e2       	ldi	r20, 0x20	; 32
     dca:	51 e4       	ldi	r21, 0x41	; 65
     dcc:	69 81       	ldd	r22, Y+1	; 0x01
     dce:	7a 81       	ldd	r23, Y+2	; 0x02
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	9c 81       	ldd	r25, Y+4	; 0x04
     dd4:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     dd8:	2b 01       	movw	r4, r22
     dda:	3c 01       	movw	r6, r24
     ddc:	c7 01       	movw	r24, r14
     dde:	b6 01       	movw	r22, r12
     de0:	68 19       	sub	r22, r8
     de2:	79 09       	sbc	r23, r9
     de4:	8a 09       	sbc	r24, r10
     de6:	9b 09       	sbc	r25, r11
     de8:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__floatunsisf>
     dec:	a3 01       	movw	r20, r6
     dee:	92 01       	movw	r18, r4
     df0:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__cmpsf2>
     df4:	88 23       	and	r24, r24
     df6:	14 f3       	brlt	.-60     	; 0xdbc <motorControl+0x3d8>
		case 'R':
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     df8:	2a e0       	ldi	r18, 0x0A	; 10
     dfa:	37 ed       	ldi	r19, 0xD7	; 215
     dfc:	43 e2       	ldi	r20, 0x23	; 35
     dfe:	5c e3       	ldi	r21, 0x3C	; 60
     e00:	6d 81       	ldd	r22, Y+5	; 0x05
     e02:	7e 81       	ldd	r23, Y+6	; 0x06
     e04:	8f 81       	ldd	r24, Y+7	; 0x07
     e06:	98 85       	ldd	r25, Y+8	; 0x08
     e08:	0e 94 45 0b 	call	0x168a	; 0x168a <__addsf3>
     e0c:	6d 83       	std	Y+5, r22	; 0x05
     e0e:	7e 83       	std	Y+6, r23	; 0x06
     e10:	8f 83       	std	Y+7, r24	; 0x07
     e12:	98 87       	std	Y+8, r25	; 0x08
     e14:	01 50       	subi	r16, 0x01	; 1
     e16:	11 09       	sbc	r17, r1
     e18:	09 f0       	breq	.+2      	; 0xe1c <motorControl+0x438>
     e1a:	4f cf       	rjmp	.-354    	; 0xcba <motorControl+0x2d6>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = -speed;
     e1c:	88 27       	eor	r24, r24
     e1e:	99 27       	eor	r25, r25
     e20:	82 19       	sub	r24, r2
     e22:	93 09       	sbc	r25, r3
     e24:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <speedCurrentRight+0x1>
     e28:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <speedCurrentRight>
		speedCurrentLeft = speed;
     e2c:	30 92 d0 01 	sts	0x01D0, r3	; 0x8001d0 <speedCurrentLeft+0x1>
     e30:	20 92 cf 01 	sts	0x01CF, r2	; 0x8001cf <speedCurrentLeft>
     e34:	05 e6       	ldi	r16, 0x65	; 101
     e36:	10 e0       	ldi	r17, 0x00	; 0
		speed = 0;
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     e38:	19 82       	std	Y+1, r1	; 0x01
     e3a:	1a 82       	std	Y+2, r1	; 0x02
     e3c:	1b 82       	std	Y+3, r1	; 0x03
     e3e:	1c 82       	std	Y+4, r1	; 0x04
			timerStart = get_ms();
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
     e40:	9c 01       	movw	r18, r24
     e42:	99 0f       	add	r25, r25
     e44:	44 0b       	sbc	r20, r20
     e46:	55 0b       	sbc	r21, r21
     e48:	29 87       	std	Y+9, r18	; 0x09
     e4a:	3a 87       	std	Y+10, r19	; 0x0a
     e4c:	4b 87       	std	Y+11, r20	; 0x0b
     e4e:	5c 87       	std	Y+12, r21	; 0x0c
     e50:	c1 2c       	mov	r12, r1
     e52:	d1 2c       	mov	r13, r1
     e54:	76 01       	movw	r14, r12
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     e56:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <get_ms>
     e5a:	7e 87       	std	Y+14, r23	; 0x0e
     e5c:	6d 87       	std	Y+13, r22	; 0x0d
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
     e5e:	60 91 d3 01 	lds	r22, 0x01D3	; 0x8001d3 <speedCurrent>
     e62:	70 91 d4 01 	lds	r23, 0x01D4	; 0x8001d4 <speedCurrent+0x1>
     e66:	07 2e       	mov	r0, r23
     e68:	00 0c       	add	r0, r0
     e6a:	88 0b       	sbc	r24, r24
     e6c:	99 0b       	sbc	r25, r25
     e6e:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__floatsisf>
     e72:	69 83       	std	Y+1, r22	; 0x01
     e74:	7a 83       	std	Y+2, r23	; 0x02
     e76:	8b 83       	std	Y+3, r24	; 0x03
     e78:	9c 83       	std	Y+4, r25	; 0x04
     e7a:	2b ed       	ldi	r18, 0xDB	; 219
     e7c:	3f e0       	ldi	r19, 0x0F	; 15
     e7e:	49 ec       	ldi	r20, 0xC9	; 201
     e80:	50 e4       	ldi	r21, 0x40	; 64
     e82:	c7 01       	movw	r24, r14
     e84:	b6 01       	movw	r22, r12
     e86:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     e8a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <sin>
     e8e:	23 e8       	ldi	r18, 0x83	; 131
     e90:	39 ef       	ldi	r19, 0xF9	; 249
     e92:	42 e2       	ldi	r20, 0x22	; 34
     e94:	5e e3       	ldi	r21, 0x3E	; 62
     e96:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     e9a:	a7 01       	movw	r20, r14
     e9c:	96 01       	movw	r18, r12
     e9e:	0e 94 45 0b 	call	0x168a	; 0x168a <__addsf3>
     ea2:	4b 01       	movw	r8, r22
     ea4:	5c 01       	movw	r10, r24
     ea6:	69 85       	ldd	r22, Y+9	; 0x09
     ea8:	7a 85       	ldd	r23, Y+10	; 0x0a
     eaa:	8b 85       	ldd	r24, Y+11	; 0x0b
     eac:	9c 85       	ldd	r25, Y+12	; 0x0c
     eae:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__floatsisf>
     eb2:	9b 01       	movw	r18, r22
     eb4:	ac 01       	movw	r20, r24
     eb6:	c5 01       	movw	r24, r10
     eb8:	b4 01       	movw	r22, r8
     eba:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     ebe:	4b 01       	movw	r8, r22
     ec0:	5c 01       	movw	r10, r24
			
			motorLeftSpeed = speedCurrent + (speedCurrentLeft + (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     ec2:	60 91 d1 01 	lds	r22, 0x01D1	; 0x8001d1 <speedCurrentRight>
     ec6:	70 91 d2 01 	lds	r23, 0x01D2	; 0x8001d2 <speedCurrentRight+0x1>
     eca:	07 2e       	mov	r0, r23
     ecc:	00 0c       	add	r0, r0
     ece:	88 0b       	sbc	r24, r24
     ed0:	99 0b       	sbc	r25, r25
     ed2:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__floatsisf>
     ed6:	a5 01       	movw	r20, r10
     ed8:	94 01       	movw	r18, r8
     eda:	0e 94 44 0b 	call	0x1688	; 0x1688 <__subsf3>
     ede:	29 81       	ldd	r18, Y+1	; 0x01
     ee0:	3a 81       	ldd	r19, Y+2	; 0x02
     ee2:	4b 81       	ldd	r20, Y+3	; 0x03
     ee4:	5c 81       	ldd	r21, Y+4	; 0x04
     ee6:	0e 94 45 0b 	call	0x168a	; 0x168a <__addsf3>
     eea:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixsfsi>
     eee:	6d 83       	std	Y+5, r22	; 0x05
     ef0:	7e 83       	std	Y+6, r23	; 0x06
     ef2:	8f 83       	std	Y+7, r24	; 0x07
     ef4:	98 87       	std	Y+8, r25	; 0x08
     ef6:	60 91 cf 01 	lds	r22, 0x01CF	; 0x8001cf <speedCurrentLeft>
     efa:	70 91 d0 01 	lds	r23, 0x01D0	; 0x8001d0 <speedCurrentLeft+0x1>
     efe:	07 2e       	mov	r0, r23
     f00:	00 0c       	add	r0, r0
     f02:	88 0b       	sbc	r24, r24
     f04:	99 0b       	sbc	r25, r25
     f06:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__floatsisf>
     f0a:	a5 01       	movw	r20, r10
     f0c:	94 01       	movw	r18, r8
     f0e:	0e 94 45 0b 	call	0x168a	; 0x168a <__addsf3>
     f12:	29 81       	ldd	r18, Y+1	; 0x01
     f14:	3a 81       	ldd	r19, Y+2	; 0x02
     f16:	4b 81       	ldd	r20, Y+3	; 0x03
     f18:	5c 81       	ldd	r21, Y+4	; 0x04
     f1a:	0e 94 45 0b 	call	0x168a	; 0x168a <__addsf3>
     f1e:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixsfsi>
     f22:	dc 01       	movw	r26, r24
     f24:	cb 01       	movw	r24, r22
     f26:	6d 81       	ldd	r22, Y+5	; 0x05
     f28:	7e 81       	ldd	r23, Y+6	; 0x06
     f2a:	0e 94 1d 14 	call	0x283a	; 0x283a <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     f2e:	4d 85       	ldd	r20, Y+13	; 0x0d
     f30:	5e 85       	ldd	r21, Y+14	; 0x0e
     f32:	4a 01       	movw	r8, r20
     f34:	55 0f       	add	r21, r21
     f36:	aa 08       	sbc	r10, r10
     f38:	bb 08       	sbc	r11, r11
     f3a:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <get_ms>
     f3e:	68 19       	sub	r22, r8
     f40:	79 09       	sbc	r23, r9
     f42:	8a 09       	sbc	r24, r10
     f44:	9b 09       	sbc	r25, r11
     f46:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__floatunsisf>
     f4a:	9b 01       	movw	r18, r22
     f4c:	ac 01       	movw	r20, r24
     f4e:	c3 01       	movw	r24, r6
     f50:	b2 01       	movw	r22, r4
     f52:	0e 94 9e 0c 	call	0x193c	; 0x193c <__gesf2>
     f56:	18 16       	cp	r1, r24
     f58:	84 f3       	brlt	.-32     	; 0xf3a <motorControl+0x556>
		speed = 0;
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     f5a:	2a e0       	ldi	r18, 0x0A	; 10
     f5c:	37 ed       	ldi	r19, 0xD7	; 215
     f5e:	43 e2       	ldi	r20, 0x23	; 35
     f60:	5c e3       	ldi	r21, 0x3C	; 60
     f62:	c7 01       	movw	r24, r14
     f64:	b6 01       	movw	r22, r12
     f66:	0e 94 45 0b 	call	0x168a	; 0x168a <__addsf3>
     f6a:	6b 01       	movw	r12, r22
     f6c:	7c 01       	movw	r14, r24
     f6e:	01 50       	subi	r16, 0x01	; 1
     f70:	11 09       	sbc	r17, r1
     f72:	09 f0       	breq	.+2      	; 0xf76 <motorControl+0x592>
     f74:	70 cf       	rjmp	.-288    	; 0xe56 <motorControl+0x472>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = -speed;
     f76:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <speedCurrentRight+0x1>
     f7a:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <speedCurrentRight>
		speedCurrentLeft = speed;
     f7e:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <speedCurrentLeft+0x1>
     f82:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <speedCurrentLeft>
		
		break;
     f86:	62 c1       	rjmp	.+708    	; 0x124c <motorControl+0x868>

		case 'L':
		
		setSpeedRight = speed - speedCurrentRight;
     f88:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <speedCurrentRight>
     f8c:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <speedCurrentRight+0x1>
     f90:	91 01       	movw	r18, r2
     f92:	28 1b       	sub	r18, r24
     f94:	39 0b       	sbc	r19, r25
		setSpeedLeft = speed + speedCurrentLeft;
     f96:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <speedCurrentLeft>
     f9a:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <speedCurrentLeft+0x1>
     f9e:	82 0d       	add	r24, r2
     fa0:	93 1d       	adc	r25, r3
     fa2:	65 e6       	ldi	r22, 0x65	; 101
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	7a 8b       	std	Y+18, r23	; 0x12
     fa8:	69 8b       	std	Y+17, r22	; 0x11
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     faa:	1d 82       	std	Y+5, r1	; 0x05
     fac:	1e 82       	std	Y+6, r1	; 0x06
     fae:	1f 82       	std	Y+7, r1	; 0x07
     fb0:	18 86       	std	Y+8, r1	; 0x08
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
			
			motorLeftSpeed = speedCurrentLeft - (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ));
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     fb2:	a9 01       	movw	r20, r18
     fb4:	33 0f       	add	r19, r19
     fb6:	66 0b       	sbc	r22, r22
     fb8:	77 0b       	sbc	r23, r23
     fba:	49 87       	std	Y+9, r20	; 0x09
     fbc:	5a 87       	std	Y+10, r21	; 0x0a
     fbe:	6b 87       	std	Y+11, r22	; 0x0b
     fc0:	7c 87       	std	Y+12, r23	; 0x0c
     fc2:	9c 01       	movw	r18, r24
     fc4:	99 0f       	add	r25, r25
     fc6:	44 0b       	sbc	r20, r20
     fc8:	55 0b       	sbc	r21, r21
     fca:	2d 87       	std	Y+13, r18	; 0x0d
     fcc:	3e 87       	std	Y+14, r19	; 0x0e
     fce:	4f 87       	std	Y+15, r20	; 0x0f
     fd0:	58 8b       	std	Y+16, r21	; 0x10
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     fd2:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <get_ms>
     fd6:	8b 01       	movw	r16, r22
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
     fd8:	2b ed       	ldi	r18, 0xDB	; 219
     fda:	3f e0       	ldi	r19, 0x0F	; 15
     fdc:	49 ec       	ldi	r20, 0xC9	; 201
     fde:	50 e4       	ldi	r21, 0x40	; 64
     fe0:	6d 81       	ldd	r22, Y+5	; 0x05
     fe2:	7e 81       	ldd	r23, Y+6	; 0x06
     fe4:	8f 81       	ldd	r24, Y+7	; 0x07
     fe6:	98 85       	ldd	r25, Y+8	; 0x08
     fe8:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     fec:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <sin>
     ff0:	23 e8       	ldi	r18, 0x83	; 131
     ff2:	39 ef       	ldi	r19, 0xF9	; 249
     ff4:	42 e2       	ldi	r20, 0x22	; 34
     ff6:	5e e3       	ldi	r21, 0x3E	; 62
     ff8:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
     ffc:	2d 81       	ldd	r18, Y+5	; 0x05
     ffe:	3e 81       	ldd	r19, Y+6	; 0x06
    1000:	4f 81       	ldd	r20, Y+7	; 0x07
    1002:	58 85       	ldd	r21, Y+8	; 0x08
    1004:	0e 94 45 0b 	call	0x168a	; 0x168a <__addsf3>
    1008:	6b 01       	movw	r12, r22
    100a:	7c 01       	movw	r14, r24
			
			motorLeftSpeed = speedCurrentLeft - (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ));
			
			set_motors(motorLeftSpeed, motorRightSpeed);
    100c:	60 91 d1 01 	lds	r22, 0x01D1	; 0x8001d1 <speedCurrentRight>
    1010:	70 91 d2 01 	lds	r23, 0x01D2	; 0x8001d2 <speedCurrentRight+0x1>
    1014:	07 2e       	mov	r0, r23
    1016:	00 0c       	add	r0, r0
    1018:	88 0b       	sbc	r24, r24
    101a:	99 0b       	sbc	r25, r25
    101c:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__floatsisf>
    1020:	4b 01       	movw	r8, r22
    1022:	5c 01       	movw	r10, r24
    1024:	69 85       	ldd	r22, Y+9	; 0x09
    1026:	7a 85       	ldd	r23, Y+10	; 0x0a
    1028:	8b 85       	ldd	r24, Y+11	; 0x0b
    102a:	9c 85       	ldd	r25, Y+12	; 0x0c
    102c:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__floatsisf>
    1030:	a7 01       	movw	r20, r14
    1032:	96 01       	movw	r18, r12
    1034:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
    1038:	9b 01       	movw	r18, r22
    103a:	ac 01       	movw	r20, r24
    103c:	c5 01       	movw	r24, r10
    103e:	b4 01       	movw	r22, r8
    1040:	0e 94 45 0b 	call	0x168a	; 0x168a <__addsf3>
    1044:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixsfsi>
    1048:	4b 01       	movw	r8, r22
    104a:	5c 01       	movw	r10, r24
    104c:	60 91 cf 01 	lds	r22, 0x01CF	; 0x8001cf <speedCurrentLeft>
    1050:	70 91 d0 01 	lds	r23, 0x01D0	; 0x8001d0 <speedCurrentLeft+0x1>
    1054:	07 2e       	mov	r0, r23
    1056:	00 0c       	add	r0, r0
    1058:	88 0b       	sbc	r24, r24
    105a:	99 0b       	sbc	r25, r25
    105c:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__floatsisf>
    1060:	2b 01       	movw	r4, r22
    1062:	3c 01       	movw	r6, r24
    1064:	6d 85       	ldd	r22, Y+13	; 0x0d
    1066:	7e 85       	ldd	r23, Y+14	; 0x0e
    1068:	8f 85       	ldd	r24, Y+15	; 0x0f
    106a:	98 89       	ldd	r25, Y+16	; 0x10
    106c:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__floatsisf>
    1070:	a7 01       	movw	r20, r14
    1072:	96 01       	movw	r18, r12
    1074:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
    1078:	9b 01       	movw	r18, r22
    107a:	ac 01       	movw	r20, r24
    107c:	c3 01       	movw	r24, r6
    107e:	b2 01       	movw	r22, r4
    1080:	0e 94 44 0b 	call	0x1688	; 0x1688 <__subsf3>
    1084:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixsfsi>
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	b4 01       	movw	r22, r8
    108e:	0e 94 1d 14 	call	0x283a	; 0x283a <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
    1092:	48 01       	movw	r8, r16
    1094:	11 0f       	add	r17, r17
    1096:	aa 08       	sbc	r10, r10
    1098:	bb 08       	sbc	r11, r11
    109a:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <get_ms>
    109e:	2b 01       	movw	r4, r22
    10a0:	3c 01       	movw	r6, r24
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e2       	ldi	r20, 0x20	; 32
    10a8:	51 e4       	ldi	r21, 0x41	; 65
    10aa:	69 81       	ldd	r22, Y+1	; 0x01
    10ac:	7a 81       	ldd	r23, Y+2	; 0x02
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	9c 81       	ldd	r25, Y+4	; 0x04
    10b2:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
    10b6:	6b 01       	movw	r12, r22
    10b8:	7c 01       	movw	r14, r24
    10ba:	c3 01       	movw	r24, r6
    10bc:	b2 01       	movw	r22, r4
    10be:	68 19       	sub	r22, r8
    10c0:	79 09       	sbc	r23, r9
    10c2:	8a 09       	sbc	r24, r10
    10c4:	9b 09       	sbc	r25, r11
    10c6:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__floatunsisf>
    10ca:	a7 01       	movw	r20, r14
    10cc:	96 01       	movw	r18, r12
    10ce:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__cmpsf2>
    10d2:	88 23       	and	r24, r24
    10d4:	14 f3       	brlt	.-60     	; 0x109a <motorControl+0x6b6>
		case 'L':
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
    10d6:	2a e0       	ldi	r18, 0x0A	; 10
    10d8:	37 ed       	ldi	r19, 0xD7	; 215
    10da:	43 e2       	ldi	r20, 0x23	; 35
    10dc:	5c e3       	ldi	r21, 0x3C	; 60
    10de:	6d 81       	ldd	r22, Y+5	; 0x05
    10e0:	7e 81       	ldd	r23, Y+6	; 0x06
    10e2:	8f 81       	ldd	r24, Y+7	; 0x07
    10e4:	98 85       	ldd	r25, Y+8	; 0x08
    10e6:	0e 94 45 0b 	call	0x168a	; 0x168a <__addsf3>
    10ea:	6d 83       	std	Y+5, r22	; 0x05
    10ec:	7e 83       	std	Y+6, r23	; 0x06
    10ee:	8f 83       	std	Y+7, r24	; 0x07
    10f0:	98 87       	std	Y+8, r25	; 0x08
    10f2:	a9 89       	ldd	r26, Y+17	; 0x11
    10f4:	ba 89       	ldd	r27, Y+18	; 0x12
    10f6:	11 97       	sbiw	r26, 0x01	; 1
    10f8:	ba 8b       	std	Y+18, r27	; 0x12
    10fa:	a9 8b       	std	Y+17, r26	; 0x11
    10fc:	ab 2b       	or	r26, r27
    10fe:	09 f0       	breq	.+2      	; 0x1102 <motorControl+0x71e>
    1100:	68 cf       	rjmp	.-304    	; 0xfd2 <motorControl+0x5ee>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = speed;
    1102:	30 92 d2 01 	sts	0x01D2, r3	; 0x8001d2 <speedCurrentRight+0x1>
    1106:	20 92 d1 01 	sts	0x01D1, r2	; 0x8001d1 <speedCurrentRight>
		speedCurrentLeft = -speed;
    110a:	31 94       	neg	r3
    110c:	21 94       	neg	r2
    110e:	31 08       	sbc	r3, r1
    1110:	30 92 d0 01 	sts	0x01D0, r3	; 0x8001d0 <speedCurrentLeft+0x1>
    1114:	20 92 cf 01 	sts	0x01CF, r2	; 0x8001cf <speedCurrentLeft>
    1118:	25 e6       	ldi	r18, 0x65	; 101
    111a:	30 e0       	ldi	r19, 0x00	; 0
		speed = 0;
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
    111c:	19 82       	std	Y+1, r1	; 0x01
    111e:	1a 82       	std	Y+2, r1	; 0x02
    1120:	1b 82       	std	Y+3, r1	; 0x03
    1122:	1c 82       	std	Y+4, r1	; 0x04
			timerStart = get_ms();
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
    1124:	a1 01       	movw	r20, r2
    1126:	33 0c       	add	r3, r3
    1128:	66 0b       	sbc	r22, r22
    112a:	77 0b       	sbc	r23, r23
    112c:	4d 83       	std	Y+5, r20	; 0x05
    112e:	5e 83       	std	Y+6, r21	; 0x06
    1130:	6f 83       	std	Y+7, r22	; 0x07
    1132:	78 87       	std	Y+8, r23	; 0x08
    1134:	3a 87       	std	Y+10, r19	; 0x0a
    1136:	29 87       	std	Y+9, r18	; 0x09
    1138:	81 2c       	mov	r8, r1
    113a:	91 2c       	mov	r9, r1
    113c:	54 01       	movw	r10, r8
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
    113e:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <get_ms>
    1142:	8b 01       	movw	r16, r22
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
    1144:	2b ed       	ldi	r18, 0xDB	; 219
    1146:	3f e0       	ldi	r19, 0x0F	; 15
    1148:	49 ec       	ldi	r20, 0xC9	; 201
    114a:	50 e4       	ldi	r21, 0x40	; 64
    114c:	c5 01       	movw	r24, r10
    114e:	b4 01       	movw	r22, r8
    1150:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
    1154:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <sin>
    1158:	23 e8       	ldi	r18, 0x83	; 131
    115a:	39 ef       	ldi	r19, 0xF9	; 249
    115c:	42 e2       	ldi	r20, 0x22	; 34
    115e:	5e e3       	ldi	r21, 0x3E	; 62
    1160:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
    1164:	a5 01       	movw	r20, r10
    1166:	94 01       	movw	r18, r8
    1168:	0e 94 45 0b 	call	0x168a	; 0x168a <__addsf3>
    116c:	2b 01       	movw	r4, r22
    116e:	3c 01       	movw	r6, r24
    1170:	6d 81       	ldd	r22, Y+5	; 0x05
    1172:	7e 81       	ldd	r23, Y+6	; 0x06
    1174:	8f 81       	ldd	r24, Y+7	; 0x07
    1176:	98 85       	ldd	r25, Y+8	; 0x08
    1178:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__floatsisf>
    117c:	9b 01       	movw	r18, r22
    117e:	ac 01       	movw	r20, r24
    1180:	c3 01       	movw	r24, r6
    1182:	b2 01       	movw	r22, r4
    1184:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
    1188:	2b 01       	movw	r4, r22
    118a:	3c 01       	movw	r6, r24
			
			motorLeftSpeed = speedCurrentLeft - (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ));
			
			set_motors(motorLeftSpeed, motorRightSpeed);
    118c:	60 91 d1 01 	lds	r22, 0x01D1	; 0x8001d1 <speedCurrentRight>
    1190:	70 91 d2 01 	lds	r23, 0x01D2	; 0x8001d2 <speedCurrentRight+0x1>
    1194:	07 2e       	mov	r0, r23
    1196:	00 0c       	add	r0, r0
    1198:	88 0b       	sbc	r24, r24
    119a:	99 0b       	sbc	r25, r25
    119c:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__floatsisf>
    11a0:	a3 01       	movw	r20, r6
    11a2:	92 01       	movw	r18, r4
    11a4:	0e 94 45 0b 	call	0x168a	; 0x168a <__addsf3>
    11a8:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixsfsi>
    11ac:	69 83       	std	Y+1, r22	; 0x01
    11ae:	7a 83       	std	Y+2, r23	; 0x02
    11b0:	8b 83       	std	Y+3, r24	; 0x03
    11b2:	9c 83       	std	Y+4, r25	; 0x04
    11b4:	60 91 cf 01 	lds	r22, 0x01CF	; 0x8001cf <speedCurrentLeft>
    11b8:	70 91 d0 01 	lds	r23, 0x01D0	; 0x8001d0 <speedCurrentLeft+0x1>
    11bc:	07 2e       	mov	r0, r23
    11be:	00 0c       	add	r0, r0
    11c0:	88 0b       	sbc	r24, r24
    11c2:	99 0b       	sbc	r25, r25
    11c4:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__floatsisf>
    11c8:	a3 01       	movw	r20, r6
    11ca:	92 01       	movw	r18, r4
    11cc:	0e 94 44 0b 	call	0x1688	; 0x1688 <__subsf3>
    11d0:	0e 94 b6 0b 	call	0x176c	; 0x176c <__fixsfsi>
    11d4:	dc 01       	movw	r26, r24
    11d6:	cb 01       	movw	r24, r22
    11d8:	69 81       	ldd	r22, Y+1	; 0x01
    11da:	7a 81       	ldd	r23, Y+2	; 0x02
    11dc:	0e 94 1d 14 	call	0x283a	; 0x283a <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
    11e0:	28 01       	movw	r4, r16
    11e2:	11 0f       	add	r17, r17
    11e4:	66 08       	sbc	r6, r6
    11e6:	77 08       	sbc	r7, r7
    11e8:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <get_ms>
    11ec:	64 19       	sub	r22, r4
    11ee:	75 09       	sbc	r23, r5
    11f0:	86 09       	sbc	r24, r6
    11f2:	97 09       	sbc	r25, r7
    11f4:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__floatunsisf>
    11f8:	9b 01       	movw	r18, r22
    11fa:	ac 01       	movw	r20, r24
    11fc:	c7 01       	movw	r24, r14
    11fe:	b6 01       	movw	r22, r12
    1200:	0e 94 9e 0c 	call	0x193c	; 0x193c <__gesf2>
    1204:	18 16       	cp	r1, r24
    1206:	84 f3       	brlt	.-32     	; 0x11e8 <motorControl+0x804>
		speed = 0;
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
    1208:	2a e0       	ldi	r18, 0x0A	; 10
    120a:	37 ed       	ldi	r19, 0xD7	; 215
    120c:	43 e2       	ldi	r20, 0x23	; 35
    120e:	5c e3       	ldi	r21, 0x3C	; 60
    1210:	c5 01       	movw	r24, r10
    1212:	b4 01       	movw	r22, r8
    1214:	0e 94 45 0b 	call	0x168a	; 0x168a <__addsf3>
    1218:	4b 01       	movw	r8, r22
    121a:	5c 01       	movw	r10, r24
    121c:	69 85       	ldd	r22, Y+9	; 0x09
    121e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1220:	61 50       	subi	r22, 0x01	; 1
    1222:	71 09       	sbc	r23, r1
    1224:	7a 87       	std	Y+10, r23	; 0x0a
    1226:	69 87       	std	Y+9, r22	; 0x09
    1228:	67 2b       	or	r22, r23
    122a:	09 f0       	breq	.+2      	; 0x122e <motorControl+0x84a>
    122c:	88 cf       	rjmp	.-240    	; 0x113e <motorControl+0x75a>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = speed;
    122e:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <speedCurrentRight+0x1>
    1232:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <speedCurrentRight>
		speedCurrentLeft = -speed;
    1236:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <speedCurrentLeft+0x1>
    123a:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <speedCurrentLeft>
		break;
    123e:	06 c0       	rjmp	.+12     	; 0x124c <motorControl+0x868>
		
		default:
		set_motors(0,0);
    1240:	60 e0       	ldi	r22, 0x00	; 0
    1242:	70 e0       	ldi	r23, 0x00	; 0
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	0e 94 1d 14 	call	0x283a	; 0x283a <set_motors>
		break;
	}
    124c:	66 96       	adiw	r28, 0x16	; 22
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	1f 91       	pop	r17
    125e:	0f 91       	pop	r16
    1260:	ff 90       	pop	r15
    1262:	ef 90       	pop	r14
    1264:	df 90       	pop	r13
    1266:	cf 90       	pop	r12
    1268:	bf 90       	pop	r11
    126a:	af 90       	pop	r10
    126c:	9f 90       	pop	r9
    126e:	8f 90       	pop	r8
    1270:	7f 90       	pop	r7
    1272:	6f 90       	pop	r6
    1274:	5f 90       	pop	r5
    1276:	4f 90       	pop	r4
    1278:	3f 90       	pop	r3
    127a:	2f 90       	pop	r2
    127c:	08 95       	ret

0000127e <initialize>:
#include "sensoren.h"
#include "motoren.h"


void initialize()
{
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
	unsigned int counter;
	pololu_3pi_init(2000);
    1282:	80 ed       	ldi	r24, 0xD0	; 208
    1284:	97 e0       	ldi	r25, 0x07	; 7
    1286:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <pololu_3pi_init>
	
	while(!button_is_pressed(BUTTON_B))
    128a:	1b c0       	rjmp	.+54     	; 0x12c2 <initialize+0x44>
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
    128c:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <read_battery_millivolts_3pi>
    1290:	ec 01       	movw	r28, r24
	{
		int bat = read_battery_millivolts();
		clear();
    1292:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <clear>
		print_long(bat);
    1296:	be 01       	movw	r22, r28
    1298:	dd 0f       	add	r29, r29
    129a:	88 0b       	sbc	r24, r24
    129c:	99 0b       	sbc	r25, r25
    129e:	0e 94 44 13 	call	0x2688	; 0x2688 <print_long>
		print("mV");
    12a2:	81 e3       	ldi	r24, 0x31	; 49
    12a4:	91 e0       	ldi	r25, 0x01	; 1
    12a6:	0e 94 ef 12 	call	0x25de	; 0x25de <print>
		lcd_goto_xy(0,1);
    12aa:	61 e0       	ldi	r22, 0x01	; 1
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	0e 94 67 13 	call	0x26ce	; 0x26ce <lcd_goto_xy>
		print("druk B");
    12b2:	84 e3       	ldi	r24, 0x34	; 52
    12b4:	91 e0       	ldi	r25, 0x01	; 1
    12b6:	0e 94 ef 12 	call	0x25de	; 0x25de <print>
		delay_ms(100);
    12ba:	84 e6       	ldi	r24, 0x64	; 100
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	0e 94 5e 15 	call	0x2abc	; 0x2abc <delay_ms>
void initialize()
{
	unsigned int counter;
	pololu_3pi_init(2000);
	
	while(!button_is_pressed(BUTTON_B))
    12c2:	80 e1       	ldi	r24, 0x10	; 16
    12c4:	0e 94 60 14 	call	0x28c0	; 0x28c0 <button_is_pressed>
    12c8:	88 23       	and	r24, r24
    12ca:	01 f3       	breq	.-64     	; 0x128c <initialize+0xe>
		lcd_goto_xy(0,1);
		print("druk B");
		delay_ms(100);
	}
	
	wait_for_button_release(BUTTON_B);
    12cc:	80 e1       	ldi	r24, 0x10	; 16
    12ce:	0e 94 4c 14 	call	0x2898	; 0x2898 <wait_for_button_release>
	delay_ms(1000);
    12d2:	88 ee       	ldi	r24, 0xE8	; 232
    12d4:	93 e0       	ldi	r25, 0x03	; 3
    12d6:	0e 94 5e 15 	call	0x2abc	; 0x2abc <delay_ms>
    12da:	cc ee       	ldi	r28, 0xEC	; 236
    12dc:	df ef       	ldi	r29, 0xFF	; 255
	
	for(counter=0;counter<80;counter++)
	{
		if(counter < 20 || counter >= 60)
    12de:	c8 32       	cpi	r28, 0x28	; 40
    12e0:	d1 05       	cpc	r29, r1
    12e2:	38 f0       	brcs	.+14     	; 0x12f2 <initialize+0x74>
		set_motors(40,-40);
    12e4:	68 ed       	ldi	r22, 0xD8	; 216
    12e6:	7f ef       	ldi	r23, 0xFF	; 255
    12e8:	88 e2       	ldi	r24, 0x28	; 40
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	0e 94 1d 14 	call	0x283a	; 0x283a <set_motors>
    12f0:	06 c0       	rjmp	.+12     	; 0x12fe <initialize+0x80>
		else
		set_motors(-40,40);
    12f2:	68 e2       	ldi	r22, 0x28	; 40
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	88 ed       	ldi	r24, 0xD8	; 216
    12f8:	9f ef       	ldi	r25, 0xFF	; 255
    12fa:	0e 94 1d 14 	call	0x283a	; 0x283a <set_motors>
		calibrate_line_sensors(IR_EMITTERS_ON);
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <calibrate_line_sensors>
		delay_ms(20);
    1304:	84 e1       	ldi	r24, 0x14	; 20
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	0e 94 5e 15 	call	0x2abc	; 0x2abc <delay_ms>
    130c:	21 96       	adiw	r28, 0x01	; 1
	}
	
	wait_for_button_release(BUTTON_B);
	delay_ms(1000);
	
	for(counter=0;counter<80;counter++)
    130e:	cc 33       	cpi	r28, 0x3C	; 60
    1310:	d1 05       	cpc	r29, r1
    1312:	29 f7       	brne	.-54     	; 0x12de <initialize+0x60>
		set_motors(-40,40);
		calibrate_line_sensors(IR_EMITTERS_ON);
		delay_ms(20);
	}
	
	set_motors(0,0);
    1314:	60 e0       	ldi	r22, 0x00	; 0
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	0e 94 1d 14 	call	0x283a	; 0x283a <set_motors>
	
	while(!button_is_pressed(BUTTON_B))
    1320:	1f c0       	rjmp	.+62     	; 0x1360 <initialize+0xe2>
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
    1322:	59 9a       	sbi	0x0b, 1	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    1324:	51 9a       	sbi	0x0a, 1	; 10
	{
		red_led(1);
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);
    1326:	61 e0       	ldi	r22, 0x01	; 1
    1328:	81 e3       	ldi	r24, 0x31	; 49
    132a:	92 e0       	ldi	r25, 0x02	; 2
    132c:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <read_line>
    1330:	ec 01       	movw	r28, r24
		clear();
    1332:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <clear>
		print("  ");
    1336:	8b e3       	ldi	r24, 0x3B	; 59
    1338:	91 e0       	ldi	r25, 0x01	; 1
    133a:	0e 94 ef 12 	call	0x25de	; 0x25de <print>
		print_long(position);
    133e:	be 01       	movw	r22, r28
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	0e 94 44 13 	call	0x2688	; 0x2688 <print_long>
		lcd_goto_xy(0,1);
    1348:	61 e0       	ldi	r22, 0x01	; 1
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	0e 94 67 13 	call	0x26ce	; 0x26ce <lcd_goto_xy>
		print(" ");
    1350:	8c e3       	ldi	r24, 0x3C	; 60
    1352:	91 e0       	ldi	r25, 0x01	; 1
    1354:	0e 94 ef 12 	call	0x25de	; 0x25de <print>
		delay_ms(100);
    1358:	84 e6       	ldi	r24, 0x64	; 100
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	0e 94 5e 15 	call	0x2abc	; 0x2abc <delay_ms>
		delay_ms(20);
	}
	
	set_motors(0,0);
	
	while(!button_is_pressed(BUTTON_B))
    1360:	80 e1       	ldi	r24, 0x10	; 16
    1362:	0e 94 60 14 	call	0x28c0	; 0x28c0 <button_is_pressed>
    1366:	88 23       	and	r24, r24
    1368:	e1 f2       	breq	.-72     	; 0x1322 <initialize+0xa4>
		lcd_goto_xy(0,1);
		print(" ");
		delay_ms(100);
	}
	
	wait_for_button_release(BUTTON_B);
    136a:	80 e1       	ldi	r24, 0x10	; 16
    136c:	0e 94 4c 14 	call	0x2898	; 0x2898 <wait_for_button_release>
	clear();
    1370:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <clear>
	print("Go!");
    1374:	8e e3       	ldi	r24, 0x3E	; 62
    1376:	91 e0       	ldi	r25, 0x01	; 1
    1378:	0e 94 ef 12 	call	0x25de	; 0x25de <print>
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
    137c:	59 9a       	sbi	0x0b, 1	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    137e:	51 9a       	sbi	0x0a, 1	; 10
	red_led(1);

}
    1380:	df 91       	pop	r29
    1382:	cf 91       	pop	r28
    1384:	08 95       	ret

00001386 <followLine>:


void followLine()
{
    1386:	cf 93       	push	r28
    1388:	df 93       	push	r29
	
	unsigned int pos = read_line(sensors,IR_EMITTERS_ON);
    138a:	61 e0       	ldi	r22, 0x01	; 1
    138c:	81 e3       	ldi	r24, 0x31	; 49
    138e:	92 e0       	ldi	r25, 0x02	; 2
    1390:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <read_line>
    1394:	ec 01       	movw	r28, r24
	clear();
    1396:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <clear>
	
		if(pos < 1950)
    139a:	ce 39       	cpi	r28, 0x9E	; 158
    139c:	87 e0       	ldi	r24, 0x07	; 7
    139e:	d8 07       	cpc	r29, r24
    13a0:	98 f4       	brcc	.+38     	; 0x13c8 <followLine+0x42>
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
    13a2:	5f 9a       	sbi	0x0b, 7	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    13a4:	57 9a       	sbi	0x0a, 7	; 10
		{
			// We are far to the right of the line: turn left.
			green_led(1);

			if(pos < 1800)
    13a6:	c8 30       	cpi	r28, 0x08	; 8
    13a8:	d7 40       	sbci	r29, 0x07	; 7
    13aa:	38 f4       	brcc	.+14     	; 0x13ba <followLine+0x34>
			{
				set_motors(0,SPEED);
    13ac:	6c e3       	ldi	r22, 0x3C	; 60
    13ae:	70 e0       	ldi	r23, 0x00	; 0
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	0e 94 1d 14 	call	0x283a	; 0x283a <set_motors>
    13b8:	28 c0       	rjmp	.+80     	; 0x140a <followLine+0x84>
			}
			else
			{
				set_motors(SLOW,SPEED);
    13ba:	6c e3       	ldi	r22, 0x3C	; 60
    13bc:	70 e0       	ldi	r23, 0x00	; 0
    13be:	8d e2       	ldi	r24, 0x2D	; 45
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	0e 94 1d 14 	call	0x283a	; 0x283a <set_motors>
    13c6:	21 c0       	rjmp	.+66     	; 0x140a <followLine+0x84>
			}
			
		}
		
		else if (pos > 2050)
    13c8:	c3 30       	cpi	r28, 0x03	; 3
    13ca:	88 e0       	ldi	r24, 0x08	; 8
    13cc:	d8 07       	cpc	r29, r24
    13ce:	98 f0       	brcs	.+38     	; 0x13f6 <followLine+0x70>
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
    13d0:	59 9a       	sbi	0x0b, 1	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    13d2:	51 9a       	sbi	0x0a, 1	; 10
		{
			// We are far to the left of the line: turn right.
			red_led(1);
			
			if(pos > 2200)
    13d4:	c9 39       	cpi	r28, 0x99	; 153
    13d6:	d8 40       	sbci	r29, 0x08	; 8
    13d8:	38 f0       	brcs	.+14     	; 0x13e8 <followLine+0x62>
			{
				set_motors(SPEED,0);
    13da:	60 e0       	ldi	r22, 0x00	; 0
    13dc:	70 e0       	ldi	r23, 0x00	; 0
    13de:	8c e3       	ldi	r24, 0x3C	; 60
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	0e 94 1d 14 	call	0x283a	; 0x283a <set_motors>
    13e6:	11 c0       	rjmp	.+34     	; 0x140a <followLine+0x84>
			}
			else
			{
				set_motors(FAST,SLOW);
    13e8:	6d e2       	ldi	r22, 0x2D	; 45
    13ea:	70 e0       	ldi	r23, 0x00	; 0
    13ec:	8b e4       	ldi	r24, 0x4B	; 75
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	0e 94 1d 14 	call	0x283a	; 0x283a <set_motors>
    13f4:	0a c0       	rjmp	.+20     	; 0x140a <followLine+0x84>
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
	else
		*(ioPin->portRegister) &= ~ioPin->bitmask;
    13f6:	59 98       	cbi	0x0b, 1	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    13f8:	51 9a       	sbi	0x0a, 1	; 10
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
	else
		*(ioPin->portRegister) &= ~ioPin->bitmask;
    13fa:	5f 98       	cbi	0x0b, 7	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    13fc:	57 9a       	sbi	0x0a, 7	; 10
		}
		else
		{
			red_led(0);
			green_led(0);
			set_motors(SLOW,SLOW);
    13fe:	6d e2       	ldi	r22, 0x2D	; 45
    1400:	70 e0       	ldi	r23, 0x00	; 0
    1402:	8d e2       	ldi	r24, 0x2D	; 45
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	0e 94 1d 14 	call	0x283a	; 0x283a <set_motors>
		
		}

	
}
    140a:	df 91       	pop	r29
    140c:	cf 91       	pop	r28
    140e:	08 95       	ret

00001410 <checkAfslag>:


int checkAfslag()
{
	read_line(sensors,IR_EMITTERS_ON);
    1410:	61 e0       	ldi	r22, 0x01	; 1
    1412:	81 e3       	ldi	r24, 0x31	; 49
    1414:	92 e0       	ldi	r25, 0x02	; 2
    1416:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <read_line>
	
	if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C < low_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
    141a:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <sensors>
    141e:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <sensors+0x1>
    1422:	89 30       	cpi	r24, 0x09	; 9
    1424:	27 e0       	ldi	r18, 0x07	; 7
    1426:	92 07       	cpc	r25, r18
    1428:	00 f1       	brcs	.+64     	; 0x146a <checkAfslag+0x5a>
    142a:	20 91 33 02 	lds	r18, 0x0233	; 0x800233 <sensors+0x2>
    142e:	30 91 34 02 	lds	r19, 0x0234	; 0x800234 <sensors+0x3>
    1432:	28 3e       	cpi	r18, 0xE8	; 232
    1434:	33 40       	sbci	r19, 0x03	; 3
    1436:	c8 f4       	brcc	.+50     	; 0x146a <checkAfslag+0x5a>
    1438:	20 91 35 02 	lds	r18, 0x0235	; 0x800235 <sensors+0x4>
    143c:	30 91 36 02 	lds	r19, 0x0236	; 0x800236 <sensors+0x5>
    1440:	28 3e       	cpi	r18, 0xE8	; 232
    1442:	33 40       	sbci	r19, 0x03	; 3
    1444:	08 f0       	brcs	.+2      	; 0x1448 <checkAfslag+0x38>
    1446:	fb c0       	rjmp	.+502    	; 0x163e <checkAfslag+0x22e>
    1448:	20 91 37 02 	lds	r18, 0x0237	; 0x800237 <sensors+0x6>
    144c:	30 91 38 02 	lds	r19, 0x0238	; 0x800238 <sensors+0x7>
    1450:	28 3e       	cpi	r18, 0xE8	; 232
    1452:	33 40       	sbci	r19, 0x03	; 3
    1454:	08 f0       	brcs	.+2      	; 0x1458 <checkAfslag+0x48>
    1456:	f3 c0       	rjmp	.+486    	; 0x163e <checkAfslag+0x22e>
    1458:	20 91 39 02 	lds	r18, 0x0239	; 0x800239 <sensors+0x8>
    145c:	30 91 3a 02 	lds	r19, 0x023A	; 0x80023a <sensors+0x9>
    1460:	28 3e       	cpi	r18, 0xE8	; 232
    1462:	33 40       	sbci	r19, 0x03	; 3
    1464:	08 f4       	brcc	.+2      	; 0x1468 <checkAfslag+0x58>
    1466:	ca c0       	rjmp	.+404    	; 0x15fc <checkAfslag+0x1ec>
    1468:	ea c0       	rjmp	.+468    	; 0x163e <checkAfslag+0x22e>
	{
		return LEFT; //afslag naar links
	}
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_C < low_range && SENSOR_C_R < low_range && SENSOR_R > high_range)
    146a:	88 3e       	cpi	r24, 0xE8	; 232
    146c:	23 e0       	ldi	r18, 0x03	; 3
    146e:	92 07       	cpc	r25, r18
    1470:	00 f5       	brcc	.+64     	; 0x14b2 <checkAfslag+0xa2>
    1472:	20 91 33 02 	lds	r18, 0x0233	; 0x800233 <sensors+0x2>
    1476:	30 91 34 02 	lds	r19, 0x0234	; 0x800234 <sensors+0x3>
    147a:	28 3e       	cpi	r18, 0xE8	; 232
    147c:	33 40       	sbci	r19, 0x03	; 3
    147e:	c8 f4       	brcc	.+50     	; 0x14b2 <checkAfslag+0xa2>
    1480:	20 91 35 02 	lds	r18, 0x0235	; 0x800235 <sensors+0x4>
    1484:	30 91 36 02 	lds	r19, 0x0236	; 0x800236 <sensors+0x5>
    1488:	28 3e       	cpi	r18, 0xE8	; 232
    148a:	33 40       	sbci	r19, 0x03	; 3
    148c:	08 f0       	brcs	.+2      	; 0x1490 <checkAfslag+0x80>
    148e:	dd c0       	rjmp	.+442    	; 0x164a <checkAfslag+0x23a>
    1490:	20 91 37 02 	lds	r18, 0x0237	; 0x800237 <sensors+0x6>
    1494:	30 91 38 02 	lds	r19, 0x0238	; 0x800238 <sensors+0x7>
    1498:	28 3e       	cpi	r18, 0xE8	; 232
    149a:	33 40       	sbci	r19, 0x03	; 3
    149c:	08 f0       	brcs	.+2      	; 0x14a0 <checkAfslag+0x90>
    149e:	d5 c0       	rjmp	.+426    	; 0x164a <checkAfslag+0x23a>
    14a0:	20 91 39 02 	lds	r18, 0x0239	; 0x800239 <sensors+0x8>
    14a4:	30 91 3a 02 	lds	r19, 0x023A	; 0x80023a <sensors+0x9>
    14a8:	29 30       	cpi	r18, 0x09	; 9
    14aa:	37 40       	sbci	r19, 0x07	; 7
    14ac:	08 f4       	brcc	.+2      	; 0x14b0 <checkAfslag+0xa0>
    14ae:	cd c0       	rjmp	.+410    	; 0x164a <checkAfslag+0x23a>
    14b0:	a8 c0       	rjmp	.+336    	; 0x1602 <checkAfslag+0x1f2>
	{
		return RIGHT; //afslag naar rechts
	}
	else if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_R > high_range)
    14b2:	89 30       	cpi	r24, 0x09	; 9
    14b4:	27 e0       	ldi	r18, 0x07	; 7
    14b6:	92 07       	cpc	r25, r18
    14b8:	08 f4       	brcc	.+2      	; 0x14bc <checkAfslag+0xac>
    14ba:	d3 c0       	rjmp	.+422    	; 0x1662 <checkAfslag+0x252>
    14bc:	20 91 33 02 	lds	r18, 0x0233	; 0x800233 <sensors+0x2>
    14c0:	30 91 34 02 	lds	r19, 0x0234	; 0x800234 <sensors+0x3>
    14c4:	28 3e       	cpi	r18, 0xE8	; 232
    14c6:	33 40       	sbci	r19, 0x03	; 3
    14c8:	b0 f4       	brcc	.+44     	; 0x14f6 <checkAfslag+0xe6>
    14ca:	20 91 35 02 	lds	r18, 0x0235	; 0x800235 <sensors+0x4>
    14ce:	30 91 36 02 	lds	r19, 0x0236	; 0x800236 <sensors+0x5>
    14d2:	29 30       	cpi	r18, 0x09	; 9
    14d4:	37 40       	sbci	r19, 0x07	; 7
    14d6:	78 f0       	brcs	.+30     	; 0x14f6 <checkAfslag+0xe6>
    14d8:	20 91 37 02 	lds	r18, 0x0237	; 0x800237 <sensors+0x6>
    14dc:	30 91 38 02 	lds	r19, 0x0238	; 0x800238 <sensors+0x7>
    14e0:	28 3e       	cpi	r18, 0xE8	; 232
    14e2:	33 40       	sbci	r19, 0x03	; 3
    14e4:	40 f4       	brcc	.+16     	; 0x14f6 <checkAfslag+0xe6>
    14e6:	20 91 39 02 	lds	r18, 0x0239	; 0x800239 <sensors+0x8>
    14ea:	30 91 3a 02 	lds	r19, 0x023A	; 0x80023a <sensors+0x9>
    14ee:	29 30       	cpi	r18, 0x09	; 9
    14f0:	37 40       	sbci	r19, 0x07	; 7
    14f2:	08 f0       	brcs	.+2      	; 0x14f6 <checkAfslag+0xe6>
    14f4:	89 c0       	rjmp	.+274    	; 0x1608 <checkAfslag+0x1f8>
	{
		return FOUR_WAY_JOINT; //kruispunt
	}
	else if(SENSOR_L > high_range && SENSOR_C_L > high_range && SENSOR_C_C < low_range && SENSOR_C_R > high_range && SENSOR_R > high_range)
    14f6:	20 91 33 02 	lds	r18, 0x0233	; 0x800233 <sensors+0x2>
    14fa:	30 91 34 02 	lds	r19, 0x0234	; 0x800234 <sensors+0x3>
    14fe:	29 30       	cpi	r18, 0x09	; 9
    1500:	47 e0       	ldi	r20, 0x07	; 7
    1502:	34 07       	cpc	r19, r20
    1504:	b0 f0       	brcs	.+44     	; 0x1532 <checkAfslag+0x122>
    1506:	40 91 35 02 	lds	r20, 0x0235	; 0x800235 <sensors+0x4>
    150a:	50 91 36 02 	lds	r21, 0x0236	; 0x800236 <sensors+0x5>
    150e:	48 3e       	cpi	r20, 0xE8	; 232
    1510:	53 40       	sbci	r21, 0x03	; 3
    1512:	78 f4       	brcc	.+30     	; 0x1532 <checkAfslag+0x122>
    1514:	40 91 37 02 	lds	r20, 0x0237	; 0x800237 <sensors+0x6>
    1518:	50 91 38 02 	lds	r21, 0x0238	; 0x800238 <sensors+0x7>
    151c:	49 30       	cpi	r20, 0x09	; 9
    151e:	57 40       	sbci	r21, 0x07	; 7
    1520:	40 f0       	brcs	.+16     	; 0x1532 <checkAfslag+0x122>
    1522:	40 91 39 02 	lds	r20, 0x0239	; 0x800239 <sensors+0x8>
    1526:	50 91 3a 02 	lds	r21, 0x023A	; 0x80023a <sensors+0x9>
    152a:	49 30       	cpi	r20, 0x09	; 9
    152c:	57 40       	sbci	r21, 0x07	; 7
    152e:	08 f0       	brcs	.+2      	; 0x1532 <checkAfslag+0x122>
    1530:	6e c0       	rjmp	.+220    	; 0x160e <checkAfslag+0x1fe>
	{
		return T_LEFT_RIGHT; //t-splitsing rechtdoor
	}
	else if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
    1532:	28 3e       	cpi	r18, 0xE8	; 232
    1534:	33 40       	sbci	r19, 0x03	; 3
    1536:	c8 f4       	brcc	.+50     	; 0x156a <checkAfslag+0x15a>
    1538:	20 91 35 02 	lds	r18, 0x0235	; 0x800235 <sensors+0x4>
    153c:	30 91 36 02 	lds	r19, 0x0236	; 0x800236 <sensors+0x5>
    1540:	29 30       	cpi	r18, 0x09	; 9
    1542:	37 40       	sbci	r19, 0x07	; 7
    1544:	08 f4       	brcc	.+2      	; 0x1548 <checkAfslag+0x138>
    1546:	95 c0       	rjmp	.+298    	; 0x1672 <checkAfslag+0x262>
    1548:	20 91 37 02 	lds	r18, 0x0237	; 0x800237 <sensors+0x6>
    154c:	30 91 38 02 	lds	r19, 0x0238	; 0x800238 <sensors+0x7>
    1550:	28 3e       	cpi	r18, 0xE8	; 232
    1552:	33 40       	sbci	r19, 0x03	; 3
    1554:	08 f0       	brcs	.+2      	; 0x1558 <checkAfslag+0x148>
    1556:	7f c0       	rjmp	.+254    	; 0x1656 <checkAfslag+0x246>
    1558:	20 91 39 02 	lds	r18, 0x0239	; 0x800239 <sensors+0x8>
    155c:	30 91 3a 02 	lds	r19, 0x023A	; 0x80023a <sensors+0x9>
    1560:	28 3e       	cpi	r18, 0xE8	; 232
    1562:	33 40       	sbci	r19, 0x03	; 3
    1564:	08 f4       	brcc	.+2      	; 0x1568 <checkAfslag+0x158>
    1566:	56 c0       	rjmp	.+172    	; 0x1614 <checkAfslag+0x204>
    1568:	76 c0       	rjmp	.+236    	; 0x1656 <checkAfslag+0x246>
	{
		return T_LEFT; //t-splitsing linksaf
	}
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_C_R > high_range)
    156a:	88 3e       	cpi	r24, 0xE8	; 232
    156c:	23 e0       	ldi	r18, 0x03	; 3
    156e:	92 07       	cpc	r25, r18
    1570:	18 f5       	brcc	.+70     	; 0x15b8 <checkAfslag+0x1a8>
    1572:	20 91 33 02 	lds	r18, 0x0233	; 0x800233 <sensors+0x2>
    1576:	30 91 34 02 	lds	r19, 0x0234	; 0x800234 <sensors+0x3>
    157a:	28 3e       	cpi	r18, 0xE8	; 232
    157c:	33 40       	sbci	r19, 0x03	; 3
    157e:	e0 f4       	brcc	.+56     	; 0x15b8 <checkAfslag+0x1a8>
	{
		return T_RIGHT; //t-splitsing rechtsaf
	}
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_C < low_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
    1580:	20 91 33 02 	lds	r18, 0x0233	; 0x800233 <sensors+0x2>
    1584:	30 91 34 02 	lds	r19, 0x0234	; 0x800234 <sensors+0x3>
    1588:	28 3e       	cpi	r18, 0xE8	; 232
    158a:	33 40       	sbci	r19, 0x03	; 3
    158c:	a8 f4       	brcc	.+42     	; 0x15b8 <checkAfslag+0x1a8>
    158e:	20 91 35 02 	lds	r18, 0x0235	; 0x800235 <sensors+0x4>
    1592:	30 91 36 02 	lds	r19, 0x0236	; 0x800236 <sensors+0x5>
    1596:	28 3e       	cpi	r18, 0xE8	; 232
    1598:	33 40       	sbci	r19, 0x03	; 3
    159a:	70 f4       	brcc	.+28     	; 0x15b8 <checkAfslag+0x1a8>
    159c:	20 91 37 02 	lds	r18, 0x0237	; 0x800237 <sensors+0x6>
    15a0:	30 91 38 02 	lds	r19, 0x0238	; 0x800238 <sensors+0x7>
    15a4:	28 3e       	cpi	r18, 0xE8	; 232
    15a6:	33 40       	sbci	r19, 0x03	; 3
    15a8:	38 f4       	brcc	.+14     	; 0x15b8 <checkAfslag+0x1a8>
    15aa:	20 91 39 02 	lds	r18, 0x0239	; 0x800239 <sensors+0x8>
    15ae:	30 91 3a 02 	lds	r19, 0x023A	; 0x80023a <sensors+0x9>
    15b2:	28 3e       	cpi	r18, 0xE8	; 232
    15b4:	33 40       	sbci	r19, 0x03	; 3
    15b6:	88 f1       	brcs	.+98     	; 0x161a <checkAfslag+0x20a>
	{
		return DEAD_END; //doodlopende straat
	}
	else if(SENSOR_L > high_range && SENSOR_C_L > high_range && SENSOR_C_C > high_range && SENSOR_C_R > high_range && SENSOR_R > high_range)
    15b8:	89 30       	cpi	r24, 0x09	; 9
    15ba:	97 40       	sbci	r25, 0x07	; 7
    15bc:	88 f1       	brcs	.+98     	; 0x1620 <checkAfslag+0x210>
    15be:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <sensors+0x2>
    15c2:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <sensors+0x3>
    15c6:	89 30       	cpi	r24, 0x09	; 9
    15c8:	97 40       	sbci	r25, 0x07	; 7
    15ca:	68 f1       	brcs	.+90     	; 0x1626 <checkAfslag+0x216>
    15cc:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <sensors+0x4>
    15d0:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <sensors+0x5>
    15d4:	89 30       	cpi	r24, 0x09	; 9
    15d6:	97 40       	sbci	r25, 0x07	; 7
    15d8:	48 f1       	brcs	.+82     	; 0x162c <checkAfslag+0x21c>
    15da:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <sensors+0x6>
    15de:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <sensors+0x7>
    15e2:	89 30       	cpi	r24, 0x09	; 9
    15e4:	97 40       	sbci	r25, 0x07	; 7
    15e6:	28 f1       	brcs	.+74     	; 0x1632 <checkAfslag+0x222>
    15e8:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <sensors+0x8>
    15ec:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <sensors+0x9>
    15f0:	89 30       	cpi	r24, 0x09	; 9
    15f2:	97 40       	sbci	r25, 0x07	; 7
    15f4:	08 f1       	brcs	.+66     	; 0x1638 <checkAfslag+0x228>
	{
		return GRID_HOME; //entry grid/home
    15f6:	88 e0       	ldi	r24, 0x08	; 8
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	08 95       	ret
{
	read_line(sensors,IR_EMITTERS_ON);
	
	if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C < low_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
	{
		return LEFT; //afslag naar links
    15fc:	82 e0       	ldi	r24, 0x02	; 2
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	08 95       	ret
	}
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_C < low_range && SENSOR_C_R < low_range && SENSOR_R > high_range)
	{
		return RIGHT; //afslag naar rechts
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	08 95       	ret
	}
	else if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_R > high_range)
	{
		return FOUR_WAY_JOINT; //kruispunt
    1608:	86 e0       	ldi	r24, 0x06	; 6
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	08 95       	ret
	}
	else if(SENSOR_L > high_range && SENSOR_C_L > high_range && SENSOR_C_C < low_range && SENSOR_C_R > high_range && SENSOR_R > high_range)
	{
		return T_LEFT_RIGHT; //t-splitsing rechtdoor
    160e:	83 e0       	ldi	r24, 0x03	; 3
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	08 95       	ret
	}
	else if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
	{
		return T_LEFT; //t-splitsing linksaf
    1614:	85 e0       	ldi	r24, 0x05	; 5
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	08 95       	ret
	{
		return T_RIGHT; //t-splitsing rechtsaf
	}
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_C < low_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
	{
		return DEAD_END; //doodlopende straat
    161a:	87 e0       	ldi	r24, 0x07	; 7
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	08 95       	ret
	else if(SENSOR_L > high_range && SENSOR_C_L > high_range && SENSOR_C_C > high_range && SENSOR_C_R > high_range && SENSOR_R > high_range)
	{
		return GRID_HOME; //entry grid/home
	}
	else {
		return 0;
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	08 95       	ret
    1626:	80 e0       	ldi	r24, 0x00	; 0
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	08 95       	ret
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	08 95       	ret
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	08 95       	ret
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	08 95       	ret
	
	if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C < low_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
	{
		return LEFT; //afslag naar links
	}
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_C < low_range && SENSOR_C_R < low_range && SENSOR_R > high_range)
    163e:	88 3e       	cpi	r24, 0xE8	; 232
    1640:	43 e0       	ldi	r20, 0x03	; 3
    1642:	94 07       	cpc	r25, r20
    1644:	08 f0       	brcs	.+2      	; 0x1648 <checkAfslag+0x238>
    1646:	3a cf       	rjmp	.-396    	; 0x14bc <checkAfslag+0xac>
    1648:	1b cf       	rjmp	.-458    	; 0x1480 <checkAfslag+0x70>
	{
		return RIGHT; //afslag naar rechts
	}
	else if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_R > high_range)
    164a:	89 30       	cpi	r24, 0x09	; 9
    164c:	67 e0       	ldi	r22, 0x07	; 7
    164e:	96 07       	cpc	r25, r22
    1650:	08 f0       	brcs	.+2      	; 0x1654 <checkAfslag+0x244>
    1652:	3b cf       	rjmp	.-394    	; 0x14ca <checkAfslag+0xba>
    1654:	06 c0       	rjmp	.+12     	; 0x1662 <checkAfslag+0x252>
	}
	else if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
	{
		return T_LEFT; //t-splitsing linksaf
	}
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_C_R > high_range)
    1656:	88 3e       	cpi	r24, 0xE8	; 232
    1658:	23 e0       	ldi	r18, 0x03	; 3
    165a:	92 07       	cpc	r25, r18
    165c:	08 f4       	brcc	.+2      	; 0x1660 <checkAfslag+0x250>
    165e:	90 cf       	rjmp	.-224    	; 0x1580 <checkAfslag+0x170>
    1660:	ab cf       	rjmp	.-170    	; 0x15b8 <checkAfslag+0x1a8>
    1662:	88 3e       	cpi	r24, 0xE8	; 232
    1664:	43 e0       	ldi	r20, 0x03	; 3
    1666:	94 07       	cpc	r25, r20
    1668:	08 f4       	brcc	.+2      	; 0x166c <checkAfslag+0x25c>
    166a:	83 cf       	rjmp	.-250    	; 0x1572 <checkAfslag+0x162>
	else if(SENSOR_L > high_range && SENSOR_C_L > high_range && SENSOR_C_C > high_range && SENSOR_C_R > high_range && SENSOR_R > high_range)
	{
		return GRID_HOME; //entry grid/home
	}
	else {
		return 0;
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	08 95       	ret
	}
	else if(SENSOR_L > high_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_R < low_range)
	{
		return T_LEFT; //t-splitsing linksaf
	}
	else if(SENSOR_L < low_range && SENSOR_C_L < low_range && SENSOR_C_C > high_range && SENSOR_C_R < low_range && SENSOR_C_R > high_range)
    1672:	88 3e       	cpi	r24, 0xE8	; 232
    1674:	63 e0       	ldi	r22, 0x03	; 3
    1676:	96 07       	cpc	r25, r22
    1678:	08 f4       	brcc	.+2      	; 0x167c <checkAfslag+0x26c>
    167a:	82 cf       	rjmp	.-252    	; 0x1580 <checkAfslag+0x170>
    167c:	9d cf       	rjmp	.-198    	; 0x15b8 <checkAfslag+0x1a8>

0000167e <wirMain>:
#include <pololu/3pi.h>
#include <pololu/orangutan.h>
#include "wireless.h"

void wirMain(int orderX[], int orderY[]){
	play_from_program_space(PSTR(">g32>>c32"));  // Play welcoming notes.
    167e:	8c ea       	ldi	r24, 0xAC	; 172
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	0e 94 d7 11 	call	0x23ae	; 0x23ae <play_from_program_space>
    1686:	08 95       	ret

00001688 <__subsf3>:
    1688:	50 58       	subi	r21, 0x80	; 128

0000168a <__addsf3>:
    168a:	bb 27       	eor	r27, r27
    168c:	aa 27       	eor	r26, r26
    168e:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__addsf3x>
    1692:	0c 94 64 0c 	jmp	0x18c8	; 0x18c8 <__fp_round>
    1696:	0e 94 56 0c 	call	0x18ac	; 0x18ac <__fp_pscA>
    169a:	38 f0       	brcs	.+14     	; 0x16aa <__addsf3+0x20>
    169c:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__fp_pscB>
    16a0:	20 f0       	brcs	.+8      	; 0x16aa <__addsf3+0x20>
    16a2:	39 f4       	brne	.+14     	; 0x16b2 <__addsf3+0x28>
    16a4:	9f 3f       	cpi	r25, 0xFF	; 255
    16a6:	19 f4       	brne	.+6      	; 0x16ae <__addsf3+0x24>
    16a8:	26 f4       	brtc	.+8      	; 0x16b2 <__addsf3+0x28>
    16aa:	0c 94 53 0c 	jmp	0x18a6	; 0x18a6 <__fp_nan>
    16ae:	0e f4       	brtc	.+2      	; 0x16b2 <__addsf3+0x28>
    16b0:	e0 95       	com	r30
    16b2:	e7 fb       	bst	r30, 7
    16b4:	0c 94 4d 0c 	jmp	0x189a	; 0x189a <__fp_inf>

000016b8 <__addsf3x>:
    16b8:	e9 2f       	mov	r30, r25
    16ba:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__fp_split3>
    16be:	58 f3       	brcs	.-42     	; 0x1696 <__addsf3+0xc>
    16c0:	ba 17       	cp	r27, r26
    16c2:	62 07       	cpc	r22, r18
    16c4:	73 07       	cpc	r23, r19
    16c6:	84 07       	cpc	r24, r20
    16c8:	95 07       	cpc	r25, r21
    16ca:	20 f0       	brcs	.+8      	; 0x16d4 <__addsf3x+0x1c>
    16cc:	79 f4       	brne	.+30     	; 0x16ec <__addsf3x+0x34>
    16ce:	a6 f5       	brtc	.+104    	; 0x1738 <__addsf3x+0x80>
    16d0:	0c 94 97 0c 	jmp	0x192e	; 0x192e <__fp_zero>
    16d4:	0e f4       	brtc	.+2      	; 0x16d8 <__addsf3x+0x20>
    16d6:	e0 95       	com	r30
    16d8:	0b 2e       	mov	r0, r27
    16da:	ba 2f       	mov	r27, r26
    16dc:	a0 2d       	mov	r26, r0
    16de:	0b 01       	movw	r0, r22
    16e0:	b9 01       	movw	r22, r18
    16e2:	90 01       	movw	r18, r0
    16e4:	0c 01       	movw	r0, r24
    16e6:	ca 01       	movw	r24, r20
    16e8:	a0 01       	movw	r20, r0
    16ea:	11 24       	eor	r1, r1
    16ec:	ff 27       	eor	r31, r31
    16ee:	59 1b       	sub	r21, r25
    16f0:	99 f0       	breq	.+38     	; 0x1718 <__addsf3x+0x60>
    16f2:	59 3f       	cpi	r21, 0xF9	; 249
    16f4:	50 f4       	brcc	.+20     	; 0x170a <__addsf3x+0x52>
    16f6:	50 3e       	cpi	r21, 0xE0	; 224
    16f8:	68 f1       	brcs	.+90     	; 0x1754 <__addsf3x+0x9c>
    16fa:	1a 16       	cp	r1, r26
    16fc:	f0 40       	sbci	r31, 0x00	; 0
    16fe:	a2 2f       	mov	r26, r18
    1700:	23 2f       	mov	r18, r19
    1702:	34 2f       	mov	r19, r20
    1704:	44 27       	eor	r20, r20
    1706:	58 5f       	subi	r21, 0xF8	; 248
    1708:	f3 cf       	rjmp	.-26     	; 0x16f0 <__addsf3x+0x38>
    170a:	46 95       	lsr	r20
    170c:	37 95       	ror	r19
    170e:	27 95       	ror	r18
    1710:	a7 95       	ror	r26
    1712:	f0 40       	sbci	r31, 0x00	; 0
    1714:	53 95       	inc	r21
    1716:	c9 f7       	brne	.-14     	; 0x170a <__addsf3x+0x52>
    1718:	7e f4       	brtc	.+30     	; 0x1738 <__addsf3x+0x80>
    171a:	1f 16       	cp	r1, r31
    171c:	ba 0b       	sbc	r27, r26
    171e:	62 0b       	sbc	r22, r18
    1720:	73 0b       	sbc	r23, r19
    1722:	84 0b       	sbc	r24, r20
    1724:	ba f0       	brmi	.+46     	; 0x1754 <__addsf3x+0x9c>
    1726:	91 50       	subi	r25, 0x01	; 1
    1728:	a1 f0       	breq	.+40     	; 0x1752 <__addsf3x+0x9a>
    172a:	ff 0f       	add	r31, r31
    172c:	bb 1f       	adc	r27, r27
    172e:	66 1f       	adc	r22, r22
    1730:	77 1f       	adc	r23, r23
    1732:	88 1f       	adc	r24, r24
    1734:	c2 f7       	brpl	.-16     	; 0x1726 <__addsf3x+0x6e>
    1736:	0e c0       	rjmp	.+28     	; 0x1754 <__addsf3x+0x9c>
    1738:	ba 0f       	add	r27, r26
    173a:	62 1f       	adc	r22, r18
    173c:	73 1f       	adc	r23, r19
    173e:	84 1f       	adc	r24, r20
    1740:	48 f4       	brcc	.+18     	; 0x1754 <__addsf3x+0x9c>
    1742:	87 95       	ror	r24
    1744:	77 95       	ror	r23
    1746:	67 95       	ror	r22
    1748:	b7 95       	ror	r27
    174a:	f7 95       	ror	r31
    174c:	9e 3f       	cpi	r25, 0xFE	; 254
    174e:	08 f0       	brcs	.+2      	; 0x1752 <__addsf3x+0x9a>
    1750:	b0 cf       	rjmp	.-160    	; 0x16b2 <__addsf3+0x28>
    1752:	93 95       	inc	r25
    1754:	88 0f       	add	r24, r24
    1756:	08 f0       	brcs	.+2      	; 0x175a <__addsf3x+0xa2>
    1758:	99 27       	eor	r25, r25
    175a:	ee 0f       	add	r30, r30
    175c:	97 95       	ror	r25
    175e:	87 95       	ror	r24
    1760:	08 95       	ret

00001762 <__cmpsf2>:
    1762:	0e 94 29 0c 	call	0x1852	; 0x1852 <__fp_cmp>
    1766:	08 f4       	brcc	.+2      	; 0x176a <__cmpsf2+0x8>
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	08 95       	ret

0000176c <__fixsfsi>:
    176c:	0e 94 bd 0b 	call	0x177a	; 0x177a <__fixunssfsi>
    1770:	68 94       	set
    1772:	b1 11       	cpse	r27, r1
    1774:	0c 94 98 0c 	jmp	0x1930	; 0x1930 <__fp_szero>
    1778:	08 95       	ret

0000177a <__fixunssfsi>:
    177a:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__fp_splitA>
    177e:	88 f0       	brcs	.+34     	; 0x17a2 <__fixunssfsi+0x28>
    1780:	9f 57       	subi	r25, 0x7F	; 127
    1782:	98 f0       	brcs	.+38     	; 0x17aa <__fixunssfsi+0x30>
    1784:	b9 2f       	mov	r27, r25
    1786:	99 27       	eor	r25, r25
    1788:	b7 51       	subi	r27, 0x17	; 23
    178a:	b0 f0       	brcs	.+44     	; 0x17b8 <__fixunssfsi+0x3e>
    178c:	e1 f0       	breq	.+56     	; 0x17c6 <__fixunssfsi+0x4c>
    178e:	66 0f       	add	r22, r22
    1790:	77 1f       	adc	r23, r23
    1792:	88 1f       	adc	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	1a f0       	brmi	.+6      	; 0x179e <__fixunssfsi+0x24>
    1798:	ba 95       	dec	r27
    179a:	c9 f7       	brne	.-14     	; 0x178e <__fixunssfsi+0x14>
    179c:	14 c0       	rjmp	.+40     	; 0x17c6 <__fixunssfsi+0x4c>
    179e:	b1 30       	cpi	r27, 0x01	; 1
    17a0:	91 f0       	breq	.+36     	; 0x17c6 <__fixunssfsi+0x4c>
    17a2:	0e 94 97 0c 	call	0x192e	; 0x192e <__fp_zero>
    17a6:	b1 e0       	ldi	r27, 0x01	; 1
    17a8:	08 95       	ret
    17aa:	0c 94 97 0c 	jmp	0x192e	; 0x192e <__fp_zero>
    17ae:	67 2f       	mov	r22, r23
    17b0:	78 2f       	mov	r23, r24
    17b2:	88 27       	eor	r24, r24
    17b4:	b8 5f       	subi	r27, 0xF8	; 248
    17b6:	39 f0       	breq	.+14     	; 0x17c6 <__fixunssfsi+0x4c>
    17b8:	b9 3f       	cpi	r27, 0xF9	; 249
    17ba:	cc f3       	brlt	.-14     	; 0x17ae <__fixunssfsi+0x34>
    17bc:	86 95       	lsr	r24
    17be:	77 95       	ror	r23
    17c0:	67 95       	ror	r22
    17c2:	b3 95       	inc	r27
    17c4:	d9 f7       	brne	.-10     	; 0x17bc <__fixunssfsi+0x42>
    17c6:	3e f4       	brtc	.+14     	; 0x17d6 <__fixunssfsi+0x5c>
    17c8:	90 95       	com	r25
    17ca:	80 95       	com	r24
    17cc:	70 95       	com	r23
    17ce:	61 95       	neg	r22
    17d0:	7f 4f       	sbci	r23, 0xFF	; 255
    17d2:	8f 4f       	sbci	r24, 0xFF	; 255
    17d4:	9f 4f       	sbci	r25, 0xFF	; 255
    17d6:	08 95       	ret

000017d8 <__floatunsisf>:
    17d8:	e8 94       	clt
    17da:	09 c0       	rjmp	.+18     	; 0x17ee <__floatsisf+0x12>

000017dc <__floatsisf>:
    17dc:	97 fb       	bst	r25, 7
    17de:	3e f4       	brtc	.+14     	; 0x17ee <__floatsisf+0x12>
    17e0:	90 95       	com	r25
    17e2:	80 95       	com	r24
    17e4:	70 95       	com	r23
    17e6:	61 95       	neg	r22
    17e8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ea:	8f 4f       	sbci	r24, 0xFF	; 255
    17ec:	9f 4f       	sbci	r25, 0xFF	; 255
    17ee:	99 23       	and	r25, r25
    17f0:	a9 f0       	breq	.+42     	; 0x181c <__floatsisf+0x40>
    17f2:	f9 2f       	mov	r31, r25
    17f4:	96 e9       	ldi	r25, 0x96	; 150
    17f6:	bb 27       	eor	r27, r27
    17f8:	93 95       	inc	r25
    17fa:	f6 95       	lsr	r31
    17fc:	87 95       	ror	r24
    17fe:	77 95       	ror	r23
    1800:	67 95       	ror	r22
    1802:	b7 95       	ror	r27
    1804:	f1 11       	cpse	r31, r1
    1806:	f8 cf       	rjmp	.-16     	; 0x17f8 <__floatsisf+0x1c>
    1808:	fa f4       	brpl	.+62     	; 0x1848 <__floatsisf+0x6c>
    180a:	bb 0f       	add	r27, r27
    180c:	11 f4       	brne	.+4      	; 0x1812 <__floatsisf+0x36>
    180e:	60 ff       	sbrs	r22, 0
    1810:	1b c0       	rjmp	.+54     	; 0x1848 <__floatsisf+0x6c>
    1812:	6f 5f       	subi	r22, 0xFF	; 255
    1814:	7f 4f       	sbci	r23, 0xFF	; 255
    1816:	8f 4f       	sbci	r24, 0xFF	; 255
    1818:	9f 4f       	sbci	r25, 0xFF	; 255
    181a:	16 c0       	rjmp	.+44     	; 0x1848 <__floatsisf+0x6c>
    181c:	88 23       	and	r24, r24
    181e:	11 f0       	breq	.+4      	; 0x1824 <__floatsisf+0x48>
    1820:	96 e9       	ldi	r25, 0x96	; 150
    1822:	11 c0       	rjmp	.+34     	; 0x1846 <__floatsisf+0x6a>
    1824:	77 23       	and	r23, r23
    1826:	21 f0       	breq	.+8      	; 0x1830 <__floatsisf+0x54>
    1828:	9e e8       	ldi	r25, 0x8E	; 142
    182a:	87 2f       	mov	r24, r23
    182c:	76 2f       	mov	r23, r22
    182e:	05 c0       	rjmp	.+10     	; 0x183a <__floatsisf+0x5e>
    1830:	66 23       	and	r22, r22
    1832:	71 f0       	breq	.+28     	; 0x1850 <__floatsisf+0x74>
    1834:	96 e8       	ldi	r25, 0x86	; 134
    1836:	86 2f       	mov	r24, r22
    1838:	70 e0       	ldi	r23, 0x00	; 0
    183a:	60 e0       	ldi	r22, 0x00	; 0
    183c:	2a f0       	brmi	.+10     	; 0x1848 <__floatsisf+0x6c>
    183e:	9a 95       	dec	r25
    1840:	66 0f       	add	r22, r22
    1842:	77 1f       	adc	r23, r23
    1844:	88 1f       	adc	r24, r24
    1846:	da f7       	brpl	.-10     	; 0x183e <__floatsisf+0x62>
    1848:	88 0f       	add	r24, r24
    184a:	96 95       	lsr	r25
    184c:	87 95       	ror	r24
    184e:	97 f9       	bld	r25, 7
    1850:	08 95       	ret

00001852 <__fp_cmp>:
    1852:	99 0f       	add	r25, r25
    1854:	00 08       	sbc	r0, r0
    1856:	55 0f       	add	r21, r21
    1858:	aa 0b       	sbc	r26, r26
    185a:	e0 e8       	ldi	r30, 0x80	; 128
    185c:	fe ef       	ldi	r31, 0xFE	; 254
    185e:	16 16       	cp	r1, r22
    1860:	17 06       	cpc	r1, r23
    1862:	e8 07       	cpc	r30, r24
    1864:	f9 07       	cpc	r31, r25
    1866:	c0 f0       	brcs	.+48     	; 0x1898 <__fp_cmp+0x46>
    1868:	12 16       	cp	r1, r18
    186a:	13 06       	cpc	r1, r19
    186c:	e4 07       	cpc	r30, r20
    186e:	f5 07       	cpc	r31, r21
    1870:	98 f0       	brcs	.+38     	; 0x1898 <__fp_cmp+0x46>
    1872:	62 1b       	sub	r22, r18
    1874:	73 0b       	sbc	r23, r19
    1876:	84 0b       	sbc	r24, r20
    1878:	95 0b       	sbc	r25, r21
    187a:	39 f4       	brne	.+14     	; 0x188a <__fp_cmp+0x38>
    187c:	0a 26       	eor	r0, r26
    187e:	61 f0       	breq	.+24     	; 0x1898 <__fp_cmp+0x46>
    1880:	23 2b       	or	r18, r19
    1882:	24 2b       	or	r18, r20
    1884:	25 2b       	or	r18, r21
    1886:	21 f4       	brne	.+8      	; 0x1890 <__fp_cmp+0x3e>
    1888:	08 95       	ret
    188a:	0a 26       	eor	r0, r26
    188c:	09 f4       	brne	.+2      	; 0x1890 <__fp_cmp+0x3e>
    188e:	a1 40       	sbci	r26, 0x01	; 1
    1890:	a6 95       	lsr	r26
    1892:	8f ef       	ldi	r24, 0xFF	; 255
    1894:	81 1d       	adc	r24, r1
    1896:	81 1d       	adc	r24, r1
    1898:	08 95       	ret

0000189a <__fp_inf>:
    189a:	97 f9       	bld	r25, 7
    189c:	9f 67       	ori	r25, 0x7F	; 127
    189e:	80 e8       	ldi	r24, 0x80	; 128
    18a0:	70 e0       	ldi	r23, 0x00	; 0
    18a2:	60 e0       	ldi	r22, 0x00	; 0
    18a4:	08 95       	ret

000018a6 <__fp_nan>:
    18a6:	9f ef       	ldi	r25, 0xFF	; 255
    18a8:	80 ec       	ldi	r24, 0xC0	; 192
    18aa:	08 95       	ret

000018ac <__fp_pscA>:
    18ac:	00 24       	eor	r0, r0
    18ae:	0a 94       	dec	r0
    18b0:	16 16       	cp	r1, r22
    18b2:	17 06       	cpc	r1, r23
    18b4:	18 06       	cpc	r1, r24
    18b6:	09 06       	cpc	r0, r25
    18b8:	08 95       	ret

000018ba <__fp_pscB>:
    18ba:	00 24       	eor	r0, r0
    18bc:	0a 94       	dec	r0
    18be:	12 16       	cp	r1, r18
    18c0:	13 06       	cpc	r1, r19
    18c2:	14 06       	cpc	r1, r20
    18c4:	05 06       	cpc	r0, r21
    18c6:	08 95       	ret

000018c8 <__fp_round>:
    18c8:	09 2e       	mov	r0, r25
    18ca:	03 94       	inc	r0
    18cc:	00 0c       	add	r0, r0
    18ce:	11 f4       	brne	.+4      	; 0x18d4 <__fp_round+0xc>
    18d0:	88 23       	and	r24, r24
    18d2:	52 f0       	brmi	.+20     	; 0x18e8 <__fp_round+0x20>
    18d4:	bb 0f       	add	r27, r27
    18d6:	40 f4       	brcc	.+16     	; 0x18e8 <__fp_round+0x20>
    18d8:	bf 2b       	or	r27, r31
    18da:	11 f4       	brne	.+4      	; 0x18e0 <__fp_round+0x18>
    18dc:	60 ff       	sbrs	r22, 0
    18de:	04 c0       	rjmp	.+8      	; 0x18e8 <__fp_round+0x20>
    18e0:	6f 5f       	subi	r22, 0xFF	; 255
    18e2:	7f 4f       	sbci	r23, 0xFF	; 255
    18e4:	8f 4f       	sbci	r24, 0xFF	; 255
    18e6:	9f 4f       	sbci	r25, 0xFF	; 255
    18e8:	08 95       	ret

000018ea <__fp_split3>:
    18ea:	57 fd       	sbrc	r21, 7
    18ec:	90 58       	subi	r25, 0x80	; 128
    18ee:	44 0f       	add	r20, r20
    18f0:	55 1f       	adc	r21, r21
    18f2:	59 f0       	breq	.+22     	; 0x190a <__fp_splitA+0x10>
    18f4:	5f 3f       	cpi	r21, 0xFF	; 255
    18f6:	71 f0       	breq	.+28     	; 0x1914 <__fp_splitA+0x1a>
    18f8:	47 95       	ror	r20

000018fa <__fp_splitA>:
    18fa:	88 0f       	add	r24, r24
    18fc:	97 fb       	bst	r25, 7
    18fe:	99 1f       	adc	r25, r25
    1900:	61 f0       	breq	.+24     	; 0x191a <__fp_splitA+0x20>
    1902:	9f 3f       	cpi	r25, 0xFF	; 255
    1904:	79 f0       	breq	.+30     	; 0x1924 <__fp_splitA+0x2a>
    1906:	87 95       	ror	r24
    1908:	08 95       	ret
    190a:	12 16       	cp	r1, r18
    190c:	13 06       	cpc	r1, r19
    190e:	14 06       	cpc	r1, r20
    1910:	55 1f       	adc	r21, r21
    1912:	f2 cf       	rjmp	.-28     	; 0x18f8 <__fp_split3+0xe>
    1914:	46 95       	lsr	r20
    1916:	f1 df       	rcall	.-30     	; 0x18fa <__fp_splitA>
    1918:	08 c0       	rjmp	.+16     	; 0x192a <__fp_splitA+0x30>
    191a:	16 16       	cp	r1, r22
    191c:	17 06       	cpc	r1, r23
    191e:	18 06       	cpc	r1, r24
    1920:	99 1f       	adc	r25, r25
    1922:	f1 cf       	rjmp	.-30     	; 0x1906 <__fp_splitA+0xc>
    1924:	86 95       	lsr	r24
    1926:	71 05       	cpc	r23, r1
    1928:	61 05       	cpc	r22, r1
    192a:	08 94       	sec
    192c:	08 95       	ret

0000192e <__fp_zero>:
    192e:	e8 94       	clt

00001930 <__fp_szero>:
    1930:	bb 27       	eor	r27, r27
    1932:	66 27       	eor	r22, r22
    1934:	77 27       	eor	r23, r23
    1936:	cb 01       	movw	r24, r22
    1938:	97 f9       	bld	r25, 7
    193a:	08 95       	ret

0000193c <__gesf2>:
    193c:	0e 94 29 0c 	call	0x1852	; 0x1852 <__fp_cmp>
    1940:	08 f4       	brcc	.+2      	; 0x1944 <__gesf2+0x8>
    1942:	8f ef       	ldi	r24, 0xFF	; 255
    1944:	08 95       	ret

00001946 <__mulsf3>:
    1946:	0e 94 b6 0c 	call	0x196c	; 0x196c <__mulsf3x>
    194a:	0c 94 64 0c 	jmp	0x18c8	; 0x18c8 <__fp_round>
    194e:	0e 94 56 0c 	call	0x18ac	; 0x18ac <__fp_pscA>
    1952:	38 f0       	brcs	.+14     	; 0x1962 <__mulsf3+0x1c>
    1954:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__fp_pscB>
    1958:	20 f0       	brcs	.+8      	; 0x1962 <__mulsf3+0x1c>
    195a:	95 23       	and	r25, r21
    195c:	11 f0       	breq	.+4      	; 0x1962 <__mulsf3+0x1c>
    195e:	0c 94 4d 0c 	jmp	0x189a	; 0x189a <__fp_inf>
    1962:	0c 94 53 0c 	jmp	0x18a6	; 0x18a6 <__fp_nan>
    1966:	11 24       	eor	r1, r1
    1968:	0c 94 98 0c 	jmp	0x1930	; 0x1930 <__fp_szero>

0000196c <__mulsf3x>:
    196c:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__fp_split3>
    1970:	70 f3       	brcs	.-36     	; 0x194e <__mulsf3+0x8>

00001972 <__mulsf3_pse>:
    1972:	95 9f       	mul	r25, r21
    1974:	c1 f3       	breq	.-16     	; 0x1966 <__mulsf3+0x20>
    1976:	95 0f       	add	r25, r21
    1978:	50 e0       	ldi	r21, 0x00	; 0
    197a:	55 1f       	adc	r21, r21
    197c:	62 9f       	mul	r22, r18
    197e:	f0 01       	movw	r30, r0
    1980:	72 9f       	mul	r23, r18
    1982:	bb 27       	eor	r27, r27
    1984:	f0 0d       	add	r31, r0
    1986:	b1 1d       	adc	r27, r1
    1988:	63 9f       	mul	r22, r19
    198a:	aa 27       	eor	r26, r26
    198c:	f0 0d       	add	r31, r0
    198e:	b1 1d       	adc	r27, r1
    1990:	aa 1f       	adc	r26, r26
    1992:	64 9f       	mul	r22, r20
    1994:	66 27       	eor	r22, r22
    1996:	b0 0d       	add	r27, r0
    1998:	a1 1d       	adc	r26, r1
    199a:	66 1f       	adc	r22, r22
    199c:	82 9f       	mul	r24, r18
    199e:	22 27       	eor	r18, r18
    19a0:	b0 0d       	add	r27, r0
    19a2:	a1 1d       	adc	r26, r1
    19a4:	62 1f       	adc	r22, r18
    19a6:	73 9f       	mul	r23, r19
    19a8:	b0 0d       	add	r27, r0
    19aa:	a1 1d       	adc	r26, r1
    19ac:	62 1f       	adc	r22, r18
    19ae:	83 9f       	mul	r24, r19
    19b0:	a0 0d       	add	r26, r0
    19b2:	61 1d       	adc	r22, r1
    19b4:	22 1f       	adc	r18, r18
    19b6:	74 9f       	mul	r23, r20
    19b8:	33 27       	eor	r19, r19
    19ba:	a0 0d       	add	r26, r0
    19bc:	61 1d       	adc	r22, r1
    19be:	23 1f       	adc	r18, r19
    19c0:	84 9f       	mul	r24, r20
    19c2:	60 0d       	add	r22, r0
    19c4:	21 1d       	adc	r18, r1
    19c6:	82 2f       	mov	r24, r18
    19c8:	76 2f       	mov	r23, r22
    19ca:	6a 2f       	mov	r22, r26
    19cc:	11 24       	eor	r1, r1
    19ce:	9f 57       	subi	r25, 0x7F	; 127
    19d0:	50 40       	sbci	r21, 0x00	; 0
    19d2:	9a f0       	brmi	.+38     	; 0x19fa <__mulsf3_pse+0x88>
    19d4:	f1 f0       	breq	.+60     	; 0x1a12 <__mulsf3_pse+0xa0>
    19d6:	88 23       	and	r24, r24
    19d8:	4a f0       	brmi	.+18     	; 0x19ec <__mulsf3_pse+0x7a>
    19da:	ee 0f       	add	r30, r30
    19dc:	ff 1f       	adc	r31, r31
    19de:	bb 1f       	adc	r27, r27
    19e0:	66 1f       	adc	r22, r22
    19e2:	77 1f       	adc	r23, r23
    19e4:	88 1f       	adc	r24, r24
    19e6:	91 50       	subi	r25, 0x01	; 1
    19e8:	50 40       	sbci	r21, 0x00	; 0
    19ea:	a9 f7       	brne	.-22     	; 0x19d6 <__mulsf3_pse+0x64>
    19ec:	9e 3f       	cpi	r25, 0xFE	; 254
    19ee:	51 05       	cpc	r21, r1
    19f0:	80 f0       	brcs	.+32     	; 0x1a12 <__mulsf3_pse+0xa0>
    19f2:	0c 94 4d 0c 	jmp	0x189a	; 0x189a <__fp_inf>
    19f6:	0c 94 98 0c 	jmp	0x1930	; 0x1930 <__fp_szero>
    19fa:	5f 3f       	cpi	r21, 0xFF	; 255
    19fc:	e4 f3       	brlt	.-8      	; 0x19f6 <__mulsf3_pse+0x84>
    19fe:	98 3e       	cpi	r25, 0xE8	; 232
    1a00:	d4 f3       	brlt	.-12     	; 0x19f6 <__mulsf3_pse+0x84>
    1a02:	86 95       	lsr	r24
    1a04:	77 95       	ror	r23
    1a06:	67 95       	ror	r22
    1a08:	b7 95       	ror	r27
    1a0a:	f7 95       	ror	r31
    1a0c:	e7 95       	ror	r30
    1a0e:	9f 5f       	subi	r25, 0xFF	; 255
    1a10:	c1 f7       	brne	.-16     	; 0x1a02 <__mulsf3_pse+0x90>
    1a12:	fe 2b       	or	r31, r30
    1a14:	88 0f       	add	r24, r24
    1a16:	91 1d       	adc	r25, r1
    1a18:	96 95       	lsr	r25
    1a1a:	87 95       	ror	r24
    1a1c:	97 f9       	bld	r25, 7
    1a1e:	08 95       	ret

00001a20 <sin>:
    1a20:	9f 93       	push	r25
    1a22:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__fp_rempio2>
    1a26:	0f 90       	pop	r0
    1a28:	07 fc       	sbrc	r0, 7
    1a2a:	ee 5f       	subi	r30, 0xFE	; 254
    1a2c:	0c 94 9e 0d 	jmp	0x1b3c	; 0x1b3c <__fp_sinus>
    1a30:	19 f4       	brne	.+6      	; 0x1a38 <sin+0x18>
    1a32:	16 f4       	brtc	.+4      	; 0x1a38 <sin+0x18>
    1a34:	0c 94 53 0c 	jmp	0x18a6	; 0x18a6 <__fp_nan>
    1a38:	0c 94 5e 0d 	jmp	0x1abc	; 0x1abc <__fp_mpack>

00001a3c <sqrt>:
    1a3c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__fp_splitA>
    1a40:	b8 f3       	brcs	.-18     	; 0x1a30 <sin+0x10>
    1a42:	99 23       	and	r25, r25
    1a44:	c9 f3       	breq	.-14     	; 0x1a38 <sin+0x18>
    1a46:	b6 f3       	brts	.-20     	; 0x1a34 <sin+0x14>
    1a48:	9f 57       	subi	r25, 0x7F	; 127
    1a4a:	55 0b       	sbc	r21, r21
    1a4c:	87 ff       	sbrs	r24, 7
    1a4e:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fp_norm2>
    1a52:	00 24       	eor	r0, r0
    1a54:	a0 e6       	ldi	r26, 0x60	; 96
    1a56:	40 ea       	ldi	r20, 0xA0	; 160
    1a58:	90 01       	movw	r18, r0
    1a5a:	80 58       	subi	r24, 0x80	; 128
    1a5c:	56 95       	lsr	r21
    1a5e:	97 95       	ror	r25
    1a60:	28 f4       	brcc	.+10     	; 0x1a6c <sqrt+0x30>
    1a62:	80 5c       	subi	r24, 0xC0	; 192
    1a64:	66 0f       	add	r22, r22
    1a66:	77 1f       	adc	r23, r23
    1a68:	88 1f       	adc	r24, r24
    1a6a:	20 f0       	brcs	.+8      	; 0x1a74 <sqrt+0x38>
    1a6c:	26 17       	cp	r18, r22
    1a6e:	37 07       	cpc	r19, r23
    1a70:	48 07       	cpc	r20, r24
    1a72:	30 f4       	brcc	.+12     	; 0x1a80 <sqrt+0x44>
    1a74:	62 1b       	sub	r22, r18
    1a76:	73 0b       	sbc	r23, r19
    1a78:	84 0b       	sbc	r24, r20
    1a7a:	20 29       	or	r18, r0
    1a7c:	31 29       	or	r19, r1
    1a7e:	4a 2b       	or	r20, r26
    1a80:	a6 95       	lsr	r26
    1a82:	17 94       	ror	r1
    1a84:	07 94       	ror	r0
    1a86:	20 25       	eor	r18, r0
    1a88:	31 25       	eor	r19, r1
    1a8a:	4a 27       	eor	r20, r26
    1a8c:	58 f7       	brcc	.-42     	; 0x1a64 <sqrt+0x28>
    1a8e:	66 0f       	add	r22, r22
    1a90:	77 1f       	adc	r23, r23
    1a92:	88 1f       	adc	r24, r24
    1a94:	20 f0       	brcs	.+8      	; 0x1a9e <sqrt+0x62>
    1a96:	26 17       	cp	r18, r22
    1a98:	37 07       	cpc	r19, r23
    1a9a:	48 07       	cpc	r20, r24
    1a9c:	30 f4       	brcc	.+12     	; 0x1aaa <sqrt+0x6e>
    1a9e:	62 0b       	sbc	r22, r18
    1aa0:	73 0b       	sbc	r23, r19
    1aa2:	84 0b       	sbc	r24, r20
    1aa4:	20 0d       	add	r18, r0
    1aa6:	31 1d       	adc	r19, r1
    1aa8:	41 1d       	adc	r20, r1
    1aaa:	a0 95       	com	r26
    1aac:	81 f7       	brne	.-32     	; 0x1a8e <sqrt+0x52>
    1aae:	b9 01       	movw	r22, r18
    1ab0:	84 2f       	mov	r24, r20
    1ab2:	91 58       	subi	r25, 0x81	; 129
    1ab4:	88 0f       	add	r24, r24
    1ab6:	96 95       	lsr	r25
    1ab8:	87 95       	ror	r24
    1aba:	08 95       	ret

00001abc <__fp_mpack>:
    1abc:	9f 3f       	cpi	r25, 0xFF	; 255
    1abe:	31 f0       	breq	.+12     	; 0x1acc <__fp_mpack_finite+0xc>

00001ac0 <__fp_mpack_finite>:
    1ac0:	91 50       	subi	r25, 0x01	; 1
    1ac2:	20 f4       	brcc	.+8      	; 0x1acc <__fp_mpack_finite+0xc>
    1ac4:	87 95       	ror	r24
    1ac6:	77 95       	ror	r23
    1ac8:	67 95       	ror	r22
    1aca:	b7 95       	ror	r27
    1acc:	88 0f       	add	r24, r24
    1ace:	91 1d       	adc	r25, r1
    1ad0:	96 95       	lsr	r25
    1ad2:	87 95       	ror	r24
    1ad4:	97 f9       	bld	r25, 7
    1ad6:	08 95       	ret

00001ad8 <__fp_norm2>:
    1ad8:	91 50       	subi	r25, 0x01	; 1
    1ada:	50 40       	sbci	r21, 0x00	; 0
    1adc:	66 0f       	add	r22, r22
    1ade:	77 1f       	adc	r23, r23
    1ae0:	88 1f       	adc	r24, r24
    1ae2:	d2 f7       	brpl	.-12     	; 0x1ad8 <__fp_norm2>
    1ae4:	08 95       	ret
    1ae6:	0c 94 53 0c 	jmp	0x18a6	; 0x18a6 <__fp_nan>

00001aea <__fp_rempio2>:
    1aea:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__fp_splitA>
    1aee:	d8 f3       	brcs	.-10     	; 0x1ae6 <__fp_norm2+0xe>
    1af0:	e8 94       	clt
    1af2:	e0 e0       	ldi	r30, 0x00	; 0
    1af4:	bb 27       	eor	r27, r27
    1af6:	9f 57       	subi	r25, 0x7F	; 127
    1af8:	f0 f0       	brcs	.+60     	; 0x1b36 <__fp_rempio2+0x4c>
    1afa:	2a ed       	ldi	r18, 0xDA	; 218
    1afc:	3f e0       	ldi	r19, 0x0F	; 15
    1afe:	49 ec       	ldi	r20, 0xC9	; 201
    1b00:	06 c0       	rjmp	.+12     	; 0x1b0e <__fp_rempio2+0x24>
    1b02:	ee 0f       	add	r30, r30
    1b04:	bb 0f       	add	r27, r27
    1b06:	66 1f       	adc	r22, r22
    1b08:	77 1f       	adc	r23, r23
    1b0a:	88 1f       	adc	r24, r24
    1b0c:	28 f0       	brcs	.+10     	; 0x1b18 <__fp_rempio2+0x2e>
    1b0e:	b2 3a       	cpi	r27, 0xA2	; 162
    1b10:	62 07       	cpc	r22, r18
    1b12:	73 07       	cpc	r23, r19
    1b14:	84 07       	cpc	r24, r20
    1b16:	28 f0       	brcs	.+10     	; 0x1b22 <__fp_rempio2+0x38>
    1b18:	b2 5a       	subi	r27, 0xA2	; 162
    1b1a:	62 0b       	sbc	r22, r18
    1b1c:	73 0b       	sbc	r23, r19
    1b1e:	84 0b       	sbc	r24, r20
    1b20:	e3 95       	inc	r30
    1b22:	9a 95       	dec	r25
    1b24:	72 f7       	brpl	.-36     	; 0x1b02 <__fp_rempio2+0x18>
    1b26:	80 38       	cpi	r24, 0x80	; 128
    1b28:	30 f4       	brcc	.+12     	; 0x1b36 <__fp_rempio2+0x4c>
    1b2a:	9a 95       	dec	r25
    1b2c:	bb 0f       	add	r27, r27
    1b2e:	66 1f       	adc	r22, r22
    1b30:	77 1f       	adc	r23, r23
    1b32:	88 1f       	adc	r24, r24
    1b34:	d2 f7       	brpl	.-12     	; 0x1b2a <__fp_rempio2+0x40>
    1b36:	90 48       	sbci	r25, 0x80	; 128
    1b38:	0c 94 60 0d 	jmp	0x1ac0	; 0x1ac0 <__fp_mpack_finite>

00001b3c <__fp_sinus>:
    1b3c:	ef 93       	push	r30
    1b3e:	e0 ff       	sbrs	r30, 0
    1b40:	07 c0       	rjmp	.+14     	; 0x1b50 <__fp_sinus+0x14>
    1b42:	a2 ea       	ldi	r26, 0xA2	; 162
    1b44:	2a ed       	ldi	r18, 0xDA	; 218
    1b46:	3f e0       	ldi	r19, 0x0F	; 15
    1b48:	49 ec       	ldi	r20, 0xC9	; 201
    1b4a:	5f eb       	ldi	r21, 0xBF	; 191
    1b4c:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__addsf3x>
    1b50:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <__fp_round>
    1b54:	0f 90       	pop	r0
    1b56:	03 94       	inc	r0
    1b58:	01 fc       	sbrc	r0, 1
    1b5a:	90 58       	subi	r25, 0x80	; 128
    1b5c:	ea e7       	ldi	r30, 0x7A	; 122
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	0c 94 b2 0d 	jmp	0x1b64	; 0x1b64 <__fp_powsodd>

00001b64 <__fp_powsodd>:
    1b64:	9f 93       	push	r25
    1b66:	8f 93       	push	r24
    1b68:	7f 93       	push	r23
    1b6a:	6f 93       	push	r22
    1b6c:	ff 93       	push	r31
    1b6e:	ef 93       	push	r30
    1b70:	9b 01       	movw	r18, r22
    1b72:	ac 01       	movw	r20, r24
    1b74:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulsf3>
    1b78:	ef 91       	pop	r30
    1b7a:	ff 91       	pop	r31
    1b7c:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__fp_powser>
    1b80:	2f 91       	pop	r18
    1b82:	3f 91       	pop	r19
    1b84:	4f 91       	pop	r20
    1b86:	5f 91       	pop	r21
    1b88:	0c 94 a3 0c 	jmp	0x1946	; 0x1946 <__mulsf3>

00001b8c <__fp_powser>:
    1b8c:	df 93       	push	r29
    1b8e:	cf 93       	push	r28
    1b90:	1f 93       	push	r17
    1b92:	0f 93       	push	r16
    1b94:	ff 92       	push	r15
    1b96:	ef 92       	push	r14
    1b98:	df 92       	push	r13
    1b9a:	7b 01       	movw	r14, r22
    1b9c:	8c 01       	movw	r16, r24
    1b9e:	68 94       	set
    1ba0:	06 c0       	rjmp	.+12     	; 0x1bae <__fp_powser+0x22>
    1ba2:	da 2e       	mov	r13, r26
    1ba4:	ef 01       	movw	r28, r30
    1ba6:	0e 94 b6 0c 	call	0x196c	; 0x196c <__mulsf3x>
    1baa:	fe 01       	movw	r30, r28
    1bac:	e8 94       	clt
    1bae:	a5 91       	lpm	r26, Z+
    1bb0:	25 91       	lpm	r18, Z+
    1bb2:	35 91       	lpm	r19, Z+
    1bb4:	45 91       	lpm	r20, Z+
    1bb6:	55 91       	lpm	r21, Z+
    1bb8:	a6 f3       	brts	.-24     	; 0x1ba2 <__fp_powser+0x16>
    1bba:	ef 01       	movw	r28, r30
    1bbc:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__addsf3x>
    1bc0:	fe 01       	movw	r30, r28
    1bc2:	97 01       	movw	r18, r14
    1bc4:	a8 01       	movw	r20, r16
    1bc6:	da 94       	dec	r13
    1bc8:	69 f7       	brne	.-38     	; 0x1ba4 <__fp_powser+0x18>
    1bca:	df 90       	pop	r13
    1bcc:	ef 90       	pop	r14
    1bce:	ff 90       	pop	r15
    1bd0:	0f 91       	pop	r16
    1bd2:	1f 91       	pop	r17
    1bd4:	cf 91       	pop	r28
    1bd6:	df 91       	pop	r29
    1bd8:	08 95       	ret

00001bda <_ZN15OrangutanAnalog7setModeEh.part.0>:
    1bda:	ec e7       	ldi	r30, 0x7C	; 124
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	8f 7d       	andi	r24, 0xDF	; 223
    1be2:	80 83       	st	Z, r24
    1be4:	08 95       	ret

00001be6 <_ZN15OrangutanAnalog7setModeEh>:
    1be6:	81 11       	cpse	r24, r1
    1be8:	03 c0       	rjmp	.+6      	; 0x1bf0 <_ZN15OrangutanAnalog7setModeEh+0xa>
    1bea:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <_ZN15OrangutanAnalog7setModeEh.part.0>
    1bee:	08 95       	ret
    1bf0:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1bf4:	80 62       	ori	r24, 0x20	; 32
    1bf6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1bfa:	08 95       	ret

00001bfc <_ZN15OrangutanAnalog7getModeEv>:
    1bfc:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1c00:	85 fb       	bst	r24, 5
    1c02:	88 27       	eor	r24, r24
    1c04:	80 f9       	bld	r24, 0
    1c06:	08 95       	ret

00001c08 <_ZN15OrangutanAnalog16conversionResultEv>:
    1c08:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <_ZN15OrangutanAnalog7getModeEv>
    1c0c:	88 23       	and	r24, r24
    1c0e:	21 f0       	breq	.+8      	; 0x1c18 <_ZN15OrangutanAnalog16conversionResultEv+0x10>
    1c10:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	08 95       	ret
    1c18:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1c1c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1c20:	08 95       	ret

00001c22 <_ZN15OrangutanAnalog15startConversionEhh>:
    1c22:	80 32       	cpi	r24, 0x20	; 32
    1c24:	a0 f4       	brcc	.+40     	; 0x1c4e <_ZN15OrangutanAnalog15startConversionEhh+0x2c>
    1c26:	97 e8       	ldi	r25, 0x87	; 135
    1c28:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1c2c:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1c30:	66 23       	and	r22, r22
    1c32:	11 f0       	breq	.+4      	; 0x1c38 <_ZN15OrangutanAnalog15startConversionEhh+0x16>
    1c34:	90 6c       	ori	r25, 0xC0	; 192
    1c36:	02 c0       	rjmp	.+4      	; 0x1c3c <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
    1c38:	9f 77       	andi	r25, 0x7F	; 127
    1c3a:	90 64       	ori	r25, 0x40	; 64
    1c3c:	90 7e       	andi	r25, 0xE0	; 224
    1c3e:	98 2b       	or	r25, r24
    1c40:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1c44:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1c48:	80 64       	ori	r24, 0x40	; 64
    1c4a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1c4e:	08 95       	ret

00001c50 <_ZN15OrangutanAnalog11readAverageEhj>:
    1c50:	a0 e0       	ldi	r26, 0x00	; 0
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	ee e2       	ldi	r30, 0x2E	; 46
    1c56:	fe e0       	ldi	r31, 0x0E	; 14
    1c58:	0c 94 8f 1b 	jmp	0x371e	; 0x371e <__prologue_saves__+0x14>
    1c5c:	eb 01       	movw	r28, r22
    1c5e:	60 e0       	ldi	r22, 0x00	; 0
    1c60:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <_ZN15OrangutanAnalog15startConversionEhh>
    1c64:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1c68:	86 fd       	sbrc	r24, 6
    1c6a:	fc cf       	rjmp	.-8      	; 0x1c64 <_ZN15OrangutanAnalog11readAverageEhj+0x14>
    1c6c:	8e 01       	movw	r16, r28
    1c6e:	c1 2c       	mov	r12, r1
    1c70:	d1 2c       	mov	r13, r1
    1c72:	76 01       	movw	r14, r12
    1c74:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1c78:	80 64       	ori	r24, 0x40	; 64
    1c7a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1c7e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1c82:	86 fd       	sbrc	r24, 6
    1c84:	fc cf       	rjmp	.-8      	; 0x1c7e <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
    1c86:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <_ZN15OrangutanAnalog16conversionResultEv>
    1c8a:	c8 0e       	add	r12, r24
    1c8c:	d9 1e       	adc	r13, r25
    1c8e:	e1 1c       	adc	r14, r1
    1c90:	f1 1c       	adc	r15, r1
    1c92:	01 50       	subi	r16, 0x01	; 1
    1c94:	11 09       	sbc	r17, r1
    1c96:	01 15       	cp	r16, r1
    1c98:	11 05       	cpc	r17, r1
    1c9a:	61 f7       	brne	.-40     	; 0x1c74 <_ZN15OrangutanAnalog11readAverageEhj+0x24>
    1c9c:	ce 01       	movw	r24, r28
    1c9e:	96 95       	lsr	r25
    1ca0:	87 95       	ror	r24
    1ca2:	c0 34       	cpi	r28, 0x40	; 64
    1ca4:	d1 05       	cpc	r29, r1
    1ca6:	38 f4       	brcc	.+14     	; 0x1cb6 <_ZN15OrangutanAnalog11readAverageEhj+0x66>
    1ca8:	8c 0d       	add	r24, r12
    1caa:	9d 1d       	adc	r25, r13
    1cac:	be 01       	movw	r22, r28
    1cae:	0e 94 08 1b 	call	0x3610	; 0x3610 <__udivmodhi4>
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	0e c0       	rjmp	.+28     	; 0x1cd2 <_ZN15OrangutanAnalog11readAverageEhj+0x82>
    1cb6:	a7 01       	movw	r20, r14
    1cb8:	96 01       	movw	r18, r12
    1cba:	28 0f       	add	r18, r24
    1cbc:	39 1f       	adc	r19, r25
    1cbe:	41 1d       	adc	r20, r1
    1cc0:	51 1d       	adc	r21, r1
    1cc2:	ca 01       	movw	r24, r20
    1cc4:	b9 01       	movw	r22, r18
    1cc6:	9e 01       	movw	r18, r28
    1cc8:	40 e0       	ldi	r20, 0x00	; 0
    1cca:	50 e0       	ldi	r21, 0x00	; 0
    1ccc:	0e 94 1c 1b 	call	0x3638	; 0x3638 <__udivmodsi4>
    1cd0:	c9 01       	movw	r24, r18
    1cd2:	cd b7       	in	r28, 0x3d	; 61
    1cd4:	de b7       	in	r29, 0x3e	; 62
    1cd6:	e8 e0       	ldi	r30, 0x08	; 8
    1cd8:	0c 94 ab 1b 	jmp	0x3756	; 0x3756 <__epilogue_restores__+0x14>

00001cdc <_ZN15OrangutanAnalog12toMillivoltsEj>:
    1cdc:	cf 92       	push	r12
    1cde:	df 92       	push	r13
    1ce0:	ef 92       	push	r14
    1ce2:	ff 92       	push	r15
    1ce4:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
    1ce8:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
    1cec:	9c 01       	movw	r18, r24
    1cee:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <__umulhisi3>
    1cf2:	6b 01       	movw	r12, r22
    1cf4:	7c 01       	movw	r14, r24
    1cf6:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <_ZN15OrangutanAnalog7getModeEv>
    1cfa:	88 23       	and	r24, r24
    1cfc:	59 f0       	breq	.+22     	; 0x1d14 <_ZN15OrangutanAnalog12toMillivoltsEj+0x38>
    1cfe:	c7 01       	movw	r24, r14
    1d00:	b6 01       	movw	r22, r12
    1d02:	61 58       	subi	r22, 0x81	; 129
    1d04:	7f 4f       	sbci	r23, 0xFF	; 255
    1d06:	8f 4f       	sbci	r24, 0xFF	; 255
    1d08:	9f 4f       	sbci	r25, 0xFF	; 255
    1d0a:	2f ef       	ldi	r18, 0xFF	; 255
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	40 e0       	ldi	r20, 0x00	; 0
    1d10:	50 e0       	ldi	r21, 0x00	; 0
    1d12:	0a c0       	rjmp	.+20     	; 0x1d28 <_ZN15OrangutanAnalog12toMillivoltsEj+0x4c>
    1d14:	c7 01       	movw	r24, r14
    1d16:	b6 01       	movw	r22, r12
    1d18:	61 50       	subi	r22, 0x01	; 1
    1d1a:	7e 4f       	sbci	r23, 0xFE	; 254
    1d1c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d20:	2f ef       	ldi	r18, 0xFF	; 255
    1d22:	33 e0       	ldi	r19, 0x03	; 3
    1d24:	40 e0       	ldi	r20, 0x00	; 0
    1d26:	50 e0       	ldi	r21, 0x00	; 0
    1d28:	0e 94 1c 1b 	call	0x3638	; 0x3638 <__udivmodsi4>
    1d2c:	c9 01       	movw	r24, r18
    1d2e:	ff 90       	pop	r15
    1d30:	ef 90       	pop	r14
    1d32:	df 90       	pop	r13
    1d34:	cf 90       	pop	r12
    1d36:	08 95       	ret

00001d38 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
    1d38:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <_ZN15OrangutanAnalog11readAverageEhj>
    1d3c:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <_ZN15OrangutanAnalog12toMillivoltsEj>
    1d40:	08 95       	ret

00001d42 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
    1d42:	1f 93       	push	r17
    1d44:	cf 93       	push	r28
    1d46:	df 93       	push	r29
    1d48:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <_ZN15OrangutanAnalog7getModeEv>
    1d4c:	18 2f       	mov	r17, r24
    1d4e:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <_ZN15OrangutanAnalog7setModeEh.part.0>
    1d52:	6a e0       	ldi	r22, 0x0A	; 10
    1d54:	70 e0       	ldi	r23, 0x00	; 0
    1d56:	86 e0       	ldi	r24, 0x06	; 6
    1d58:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
    1d5c:	ec 01       	movw	r28, r24
    1d5e:	81 2f       	mov	r24, r17
    1d60:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <_ZN15OrangutanAnalog7setModeEh>
    1d64:	ce 01       	movw	r24, r28
    1d66:	88 0f       	add	r24, r24
    1d68:	99 1f       	adc	r25, r25
    1d6a:	8c 0f       	add	r24, r28
    1d6c:	9d 1f       	adc	r25, r29
    1d6e:	01 96       	adiw	r24, 0x01	; 1
    1d70:	96 95       	lsr	r25
    1d72:	87 95       	ror	r24
    1d74:	df 91       	pop	r29
    1d76:	cf 91       	pop	r28
    1d78:	1f 91       	pop	r17
    1d7a:	08 95       	ret

00001d7c <read_battery_millivolts_3pi>:
    1d7c:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
    1d80:	08 95       	ret

00001d82 <_ZL16currentCharacterv>:
    1d82:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <_ZL17use_program_space>
    1d86:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <__data_end>
    1d8a:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <__data_end+0x1>
    1d8e:	99 23       	and	r25, r25
    1d90:	11 f0       	breq	.+4      	; 0x1d96 <_ZL16currentCharacterv+0x14>
    1d92:	84 91       	lpm	r24, Z
    1d94:	01 c0       	rjmp	.+2      	; 0x1d98 <_ZL16currentCharacterv+0x16>
    1d96:	80 81       	ld	r24, Z
    1d98:	2f eb       	ldi	r18, 0xBF	; 191
    1d9a:	28 0f       	add	r18, r24
    1d9c:	2a 31       	cpi	r18, 0x1A	; 26
    1d9e:	10 f4       	brcc	.+4      	; 0x1da4 <_ZL16currentCharacterv+0x22>
    1da0:	80 5e       	subi	r24, 0xE0	; 224
    1da2:	08 95       	ret
    1da4:	80 32       	cpi	r24, 0x20	; 32
    1da6:	49 f4       	brne	.+18     	; 0x1dba <_ZL16currentCharacterv+0x38>
    1da8:	9f 01       	movw	r18, r30
    1daa:	2f 5f       	subi	r18, 0xFF	; 255
    1dac:	3f 4f       	sbci	r19, 0xFF	; 255
    1dae:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <__data_end+0x1>
    1db2:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <__data_end>
    1db6:	ef 2b       	or	r30, r31
    1db8:	31 f7       	brne	.-52     	; 0x1d86 <_ZL16currentCharacterv+0x4>
    1dba:	08 95       	ret

00001dbc <_ZL9getNumberv>:
    1dbc:	1f 93       	push	r17
    1dbe:	cf 93       	push	r28
    1dc0:	df 93       	push	r29
    1dc2:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <_ZL16currentCharacterv>
    1dc6:	c0 e0       	ldi	r28, 0x00	; 0
    1dc8:	d0 e0       	ldi	r29, 0x00	; 0
    1dca:	1a e0       	ldi	r17, 0x0A	; 10
    1dcc:	90 ed       	ldi	r25, 0xD0	; 208
    1dce:	98 0f       	add	r25, r24
    1dd0:	9a 30       	cpi	r25, 0x0A	; 10
    1dd2:	b8 f4       	brcc	.+46     	; 0x1e02 <_ZL9getNumberv+0x46>
    1dd4:	9e 01       	movw	r18, r28
    1dd6:	12 9f       	mul	r17, r18
    1dd8:	e0 01       	movw	r28, r0
    1dda:	13 9f       	mul	r17, r19
    1ddc:	d0 0d       	add	r29, r0
    1dde:	11 24       	eor	r1, r1
    1de0:	c8 0f       	add	r28, r24
    1de2:	d1 1d       	adc	r29, r1
    1de4:	87 fd       	sbrc	r24, 7
    1de6:	da 95       	dec	r29
    1de8:	e0 97       	sbiw	r28, 0x30	; 48
    1dea:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
    1dee:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <__data_end+0x1>
    1df2:	01 96       	adiw	r24, 0x01	; 1
    1df4:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <__data_end+0x1>
    1df8:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>
    1dfc:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <_ZL16currentCharacterv>
    1e00:	e5 cf       	rjmp	.-54     	; 0x1dcc <_ZL9getNumberv+0x10>
    1e02:	ce 01       	movw	r24, r28
    1e04:	df 91       	pop	r29
    1e06:	cf 91       	pop	r28
    1e08:	1f 91       	pop	r17
    1e0a:	08 95       	ret

00001e0c <_ZN15OrangutanBuzzer5init2Ev>:
    1e0c:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1e10:	83 e2       	ldi	r24, 0x23	; 35
    1e12:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1e16:	81 e1       	ldi	r24, 0x11	; 17
    1e18:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1e1c:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    1e20:	80 e1       	ldi	r24, 0x10	; 16
    1e22:	97 e2       	ldi	r25, 0x27	; 39
    1e24:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1e28:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1e2c:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1e30:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1e34:	22 9a       	sbi	0x04, 2	; 4
    1e36:	78 94       	sei
    1e38:	08 95       	ret

00001e3a <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
    1e3a:	8f 92       	push	r8
    1e3c:	9f 92       	push	r9
    1e3e:	af 92       	push	r10
    1e40:	bf 92       	push	r11
    1e42:	df 92       	push	r13
    1e44:	ef 92       	push	r14
    1e46:	ff 92       	push	r15
    1e48:	0f 93       	push	r16
    1e4a:	1f 93       	push	r17
    1e4c:	cf 93       	push	r28
    1e4e:	df 93       	push	r29
    1e50:	5c 01       	movw	r10, r24
    1e52:	8b 01       	movw	r16, r22
    1e54:	d4 2e       	mov	r13, r20
    1e56:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <buzzerInitialized>
    1e5a:	81 11       	cpse	r24, r1
    1e5c:	05 c0       	rjmp	.+10     	; 0x1e68 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <buzzerInitialized>
    1e64:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <_ZN15OrangutanBuzzer5init2Ev>
    1e68:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <buzzerFinished>
    1e6c:	b7 fe       	sbrs	r11, 7
    1e6e:	05 c0       	rjmp	.+10     	; 0x1e7a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
    1e70:	e8 94       	clt
    1e72:	b7 f8       	bld	r11, 7
    1e74:	2a e0       	ldi	r18, 0x0A	; 10
    1e76:	f2 2e       	mov	r15, r18
    1e78:	02 c0       	rjmp	.+4      	; 0x1e7e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
    1e7a:	ff 24       	eor	r15, r15
    1e7c:	f3 94       	inc	r15
    1e7e:	e0 90 81 00 	lds	r14, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1e82:	2e 2d       	mov	r18, r14
    1e84:	28 7f       	andi	r18, 0xF8	; 248
    1e86:	e2 2e       	mov	r14, r18
    1e88:	48 ec       	ldi	r20, 0xC8	; 200
    1e8a:	f4 9e       	mul	r15, r20
    1e8c:	c0 01       	movw	r24, r0
    1e8e:	11 24       	eor	r1, r1
    1e90:	8a 15       	cp	r24, r10
    1e92:	9b 05       	cpc	r25, r11
    1e94:	e0 f4       	brcc	.+56     	; 0x1ece <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
    1e96:	e5 01       	movw	r28, r10
    1e98:	51 e1       	ldi	r21, 0x11	; 17
    1e9a:	a5 16       	cp	r10, r21
    1e9c:	57 e2       	ldi	r21, 0x27	; 39
    1e9e:	b5 06       	cpc	r11, r21
    1ea0:	10 f0       	brcs	.+4      	; 0x1ea6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
    1ea2:	c0 e1       	ldi	r28, 0x10	; 16
    1ea4:	d7 e2       	ldi	r29, 0x27	; 39
    1ea6:	be 01       	movw	r22, r28
    1ea8:	76 95       	lsr	r23
    1eaa:	67 95       	ror	r22
    1eac:	80 e0       	ldi	r24, 0x00	; 0
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	60 58       	subi	r22, 0x80	; 128
    1eb2:	79 46       	sbci	r23, 0x69	; 105
    1eb4:	87 46       	sbci	r24, 0x67	; 103
    1eb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb8:	4e 01       	movw	r8, r28
    1eba:	a1 2c       	mov	r10, r1
    1ebc:	b1 2c       	mov	r11, r1
    1ebe:	a5 01       	movw	r20, r10
    1ec0:	94 01       	movw	r18, r8
    1ec2:	0e 94 1c 1b 	call	0x3638	; 0x3638 <__udivmodsi4>
    1ec6:	59 01       	movw	r10, r18
    1ec8:	8e 2d       	mov	r24, r14
    1eca:	81 60       	ori	r24, 0x01	; 1
    1ecc:	24 c0       	rjmp	.+72     	; 0x1f16 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
    1ece:	c8 e2       	ldi	r28, 0x28	; 40
    1ed0:	fc 9e       	mul	r15, r28
    1ed2:	c0 2d       	mov	r28, r0
    1ed4:	11 24       	eor	r1, r1
    1ed6:	d0 e0       	ldi	r29, 0x00	; 0
    1ed8:	ca 15       	cp	r28, r10
    1eda:	db 05       	cpc	r29, r11
    1edc:	08 f4       	brcc	.+2      	; 0x1ee0 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
    1ede:	e5 01       	movw	r28, r10
    1ee0:	be 01       	movw	r22, r28
    1ee2:	76 95       	lsr	r23
    1ee4:	67 95       	ror	r22
    1ee6:	9e 01       	movw	r18, r28
    1ee8:	40 e0       	ldi	r20, 0x00	; 0
    1eea:	50 e0       	ldi	r21, 0x00	; 0
    1eec:	8a e0       	ldi	r24, 0x0A	; 10
    1eee:	f8 12       	cpse	r15, r24
    1ef0:	07 c0       	rjmp	.+14     	; 0x1f00 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
    1ef2:	80 e0       	ldi	r24, 0x00	; 0
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	60 5e       	subi	r22, 0xE0	; 224
    1ef8:	73 44       	sbci	r23, 0x43	; 67
    1efa:	81 44       	sbci	r24, 0x41	; 65
    1efc:	9f 4f       	sbci	r25, 0xFF	; 255
    1efe:	06 c0       	rjmp	.+12     	; 0x1f0c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	60 53       	subi	r22, 0x30	; 48
    1f06:	7d 4e       	sbci	r23, 0xED	; 237
    1f08:	8c 4e       	sbci	r24, 0xEC	; 236
    1f0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f0c:	0e 94 1c 1b 	call	0x3638	; 0x3638 <__udivmodsi4>
    1f10:	59 01       	movw	r10, r18
    1f12:	8e 2d       	mov	r24, r14
    1f14:	82 60       	ori	r24, 0x02	; 2
    1f16:	88 2e       	mov	r8, r24
    1f18:	2a e0       	ldi	r18, 0x0A	; 10
    1f1a:	f2 12       	cpse	r15, r18
    1f1c:	07 c0       	rjmp	.+14     	; 0x1f2c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
    1f1e:	ce 01       	movw	r24, r28
    1f20:	05 96       	adiw	r24, 0x05	; 5
    1f22:	6a e0       	ldi	r22, 0x0A	; 10
    1f24:	70 e0       	ldi	r23, 0x00	; 0
    1f26:	0e 94 08 1b 	call	0x3610	; 0x3610 <__udivmodhi4>
    1f2a:	eb 01       	movw	r28, r22
    1f2c:	c8 3e       	cpi	r28, 0xE8	; 232
    1f2e:	43 e0       	ldi	r20, 0x03	; 3
    1f30:	d4 07       	cpc	r29, r20
    1f32:	59 f0       	breq	.+22     	; 0x1f4a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    1f34:	98 01       	movw	r18, r16
    1f36:	de 01       	movw	r26, r28
    1f38:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <__umulhisi3>
    1f3c:	28 ee       	ldi	r18, 0xE8	; 232
    1f3e:	33 e0       	ldi	r19, 0x03	; 3
    1f40:	40 e0       	ldi	r20, 0x00	; 0
    1f42:	50 e0       	ldi	r21, 0x00	; 0
    1f44:	0e 94 3e 1b 	call	0x367c	; 0x367c <__divmodsi4>
    1f48:	89 01       	movw	r16, r18
    1f4a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1f4e:	80 92 81 00 	sts	0x0081, r8	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1f52:	b0 92 89 00 	sts	0x0089, r11	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1f56:	a0 92 88 00 	sts	0x0088, r10	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1f5a:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1f5e:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1f62:	4d 2d       	mov	r20, r13
    1f64:	40 31       	cpi	r20, 0x10	; 16
    1f66:	08 f0       	brcs	.+2      	; 0x1f6a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    1f68:	4f e0       	ldi	r20, 0x0F	; 15
    1f6a:	80 e1       	ldi	r24, 0x10	; 16
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	84 1b       	sub	r24, r20
    1f70:	91 09       	sbc	r25, r1
    1f72:	a9 01       	movw	r20, r18
    1f74:	02 c0       	rjmp	.+4      	; 0x1f7a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    1f76:	56 95       	lsr	r21
    1f78:	47 95       	ror	r20
    1f7a:	8a 95       	dec	r24
    1f7c:	e2 f7       	brpl	.-8      	; 0x1f76 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    1f7e:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1f82:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1f86:	10 93 6a 01 	sts	0x016A, r17	; 0x80016a <_ZL13buzzerTimeout+0x1>
    1f8a:	00 93 69 01 	sts	0x0169, r16	; 0x800169 <_ZL13buzzerTimeout>
    1f8e:	86 b3       	in	r24, 0x16	; 22
    1f90:	8f ef       	ldi	r24, 0xFF	; 255
    1f92:	86 bb       	out	0x16, r24	; 22
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1f9a:	df 91       	pop	r29
    1f9c:	cf 91       	pop	r28
    1f9e:	1f 91       	pop	r17
    1fa0:	0f 91       	pop	r16
    1fa2:	ff 90       	pop	r15
    1fa4:	ef 90       	pop	r14
    1fa6:	df 90       	pop	r13
    1fa8:	bf 90       	pop	r11
    1faa:	af 90       	pop	r10
    1fac:	9f 90       	pop	r9
    1fae:	8f 90       	pop	r8
    1fb0:	08 95       	ret

00001fb2 <_ZN15OrangutanBuzzer8playNoteEhjh>:
    1fb2:	cf 93       	push	r28
    1fb4:	df 93       	push	r29
    1fb6:	eb 01       	movw	r28, r22
    1fb8:	8f 3f       	cpi	r24, 0xFF	; 255
    1fba:	11 f0       	breq	.+4      	; 0x1fc0 <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
    1fbc:	41 11       	cpse	r20, r1
    1fbe:	05 c0       	rjmp	.+10     	; 0x1fca <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
    1fc0:	40 e0       	ldi	r20, 0x00	; 0
    1fc2:	be 01       	movw	r22, r28
    1fc4:	88 ee       	ldi	r24, 0xE8	; 232
    1fc6:	93 e0       	ldi	r25, 0x03	; 3
    1fc8:	43 c0       	rjmp	.+134    	; 0x2050 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
    1fca:	81 31       	cpi	r24, 0x11	; 17
    1fcc:	30 f0       	brcs	.+12     	; 0x1fda <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
    1fce:	50 ef       	ldi	r21, 0xF0	; 240
    1fd0:	58 0f       	add	r21, r24
    1fd2:	50 36       	cpi	r21, 0x60	; 96
    1fd4:	18 f0       	brcs	.+6      	; 0x1fdc <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1fd6:	5f e5       	ldi	r21, 0x5F	; 95
    1fd8:	01 c0       	rjmp	.+2      	; 0x1fdc <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1fda:	50 e0       	ldi	r21, 0x00	; 0
    1fdc:	85 2f       	mov	r24, r21
    1fde:	6c e0       	ldi	r22, 0x0C	; 12
    1fe0:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <__udivmodqi4>
    1fe4:	68 2f       	mov	r22, r24
    1fe6:	74 ef       	ldi	r23, 0xF4	; 244
    1fe8:	76 03       	mulsu	r23, r22
    1fea:	90 01       	movw	r18, r0
    1fec:	11 24       	eor	r1, r1
    1fee:	25 0f       	add	r18, r21
    1ff0:	31 1d       	adc	r19, r1
    1ff2:	2c 30       	cpi	r18, 0x0C	; 12
    1ff4:	31 05       	cpc	r19, r1
    1ff6:	40 f4       	brcc	.+16     	; 0x2008 <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
    1ff8:	f9 01       	movw	r30, r18
    1ffa:	ee 0f       	add	r30, r30
    1ffc:	ff 1f       	adc	r31, r31
    1ffe:	ec 5e       	subi	r30, 0xEC	; 236
    2000:	fe 4f       	sbci	r31, 0xFE	; 254
    2002:	20 81       	ld	r18, Z
    2004:	31 81       	ldd	r19, Z+1	; 0x01
    2006:	02 c0       	rjmp	.+4      	; 0x200c <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	87 30       	cpi	r24, 0x07	; 7
    200e:	81 f0       	breq	.+32     	; 0x2030 <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
    2010:	08 2e       	mov	r0, r24
    2012:	02 c0       	rjmp	.+4      	; 0x2018 <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
    2014:	22 0f       	add	r18, r18
    2016:	33 1f       	adc	r19, r19
    2018:	0a 94       	dec	r0
    201a:	e2 f7       	brpl	.-8      	; 0x2014 <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    201c:	82 30       	cpi	r24, 0x02	; 2
    201e:	28 f0       	brcs	.+10     	; 0x202a <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
    2020:	c9 01       	movw	r24, r18
    2022:	05 96       	adiw	r24, 0x05	; 5
    2024:	6a e0       	ldi	r22, 0x0A	; 10
    2026:	70 e0       	ldi	r23, 0x00	; 0
    2028:	0c c0       	rjmp	.+24     	; 0x2042 <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
    202a:	c9 01       	movw	r24, r18
    202c:	90 58       	subi	r25, 0x80	; 128
    202e:	0c c0       	rjmp	.+24     	; 0x2048 <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
    2030:	c9 01       	movw	r24, r18
    2032:	36 e0       	ldi	r19, 0x06	; 6
    2034:	88 0f       	add	r24, r24
    2036:	99 1f       	adc	r25, r25
    2038:	3a 95       	dec	r19
    203a:	e1 f7       	brne	.-8      	; 0x2034 <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
    203c:	02 96       	adiw	r24, 0x02	; 2
    203e:	65 e0       	ldi	r22, 0x05	; 5
    2040:	70 e0       	ldi	r23, 0x00	; 0
    2042:	0e 94 08 1b 	call	0x3610	; 0x3610 <__udivmodhi4>
    2046:	cb 01       	movw	r24, r22
    2048:	40 31       	cpi	r20, 0x10	; 16
    204a:	08 f0       	brcs	.+2      	; 0x204e <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    204c:	4f e0       	ldi	r20, 0x0F	; 15
    204e:	be 01       	movw	r22, r28
    2050:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    2054:	df 91       	pop	r29
    2056:	cf 91       	pop	r28
    2058:	08 95       	ret

0000205a <_ZL8nextNotev>:
    205a:	a2 e0       	ldi	r26, 0x02	; 2
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	e3 e3       	ldi	r30, 0x33	; 51
    2060:	f0 e1       	ldi	r31, 0x10	; 16
    2062:	0c 94 87 1b 	jmp	0x370e	; 0x370e <__prologue_saves__+0x4>
    2066:	90 90 0a 01 	lds	r9, 0x010A	; 0x80010a <_ZL6octave>
    206a:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <_ZL8staccato>
    206e:	88 23       	and	r24, r24
    2070:	21 f0       	breq	.+8      	; 0x207a <_ZL8nextNotev+0x20>
    2072:	60 91 65 01 	lds	r22, 0x0165	; 0x800165 <_ZL22staccato_rest_duration>
    2076:	61 11       	cpse	r22, r1
    2078:	17 c0       	rjmp	.+46     	; 0x20a8 <_ZL8nextNotev+0x4e>
    207a:	77 24       	eor	r7, r7
    207c:	73 94       	inc	r7
    207e:	b0 ec       	ldi	r27, 0xC0	; 192
    2080:	ab 2e       	mov	r10, r27
    2082:	bd e5       	ldi	r27, 0x5D	; 93
    2084:	bb 2e       	mov	r11, r27
    2086:	1a e0       	ldi	r17, 0x0A	; 10
    2088:	61 2e       	mov	r6, r17
    208a:	04 e0       	ldi	r16, 0x04	; 4
    208c:	80 2e       	mov	r8, r16
    208e:	80 ed       	ldi	r24, 0xD0	; 208
    2090:	c8 2e       	mov	r12, r24
    2092:	87 e0       	ldi	r24, 0x07	; 7
    2094:	d8 2e       	mov	r13, r24
    2096:	94 e0       	ldi	r25, 0x04	; 4
    2098:	e9 2e       	mov	r14, r25
    209a:	f1 2c       	mov	r15, r1
    209c:	04 ef       	ldi	r16, 0xF4	; 244
    209e:	11 e0       	ldi	r17, 0x01	; 1
    20a0:	2f e0       	ldi	r18, 0x0F	; 15
    20a2:	42 2e       	mov	r4, r18
    20a4:	51 2c       	mov	r5, r1
    20a6:	15 c0       	rjmp	.+42     	; 0x20d2 <_ZL8nextNotev+0x78>
    20a8:	70 e0       	ldi	r23, 0x00	; 0
    20aa:	40 e0       	ldi	r20, 0x00	; 0
    20ac:	88 ee       	ldi	r24, 0xE8	; 232
    20ae:	93 e0       	ldi	r25, 0x03	; 3
    20b0:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    20b4:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <_ZL22staccato_rest_duration>
    20b8:	17 c1       	rjmp	.+558    	; 0x22e8 <_ZL8nextNotev+0x28e>
    20ba:	86 36       	cpi	r24, 0x66	; 102
    20bc:	d4 f5       	brge	.+116    	; 0x2132 <_ZL8nextNotev+0xd8>
    20be:	81 36       	cpi	r24, 0x61	; 97
    20c0:	09 f4       	brne	.+2      	; 0x20c4 <_ZL8nextNotev+0x6a>
    20c2:	a9 c0       	rjmp	.+338    	; 0x2216 <_ZL8nextNotev+0x1bc>
    20c4:	7c f5       	brge	.+94     	; 0x2124 <_ZL8nextNotev+0xca>
    20c6:	8c 33       	cpi	r24, 0x3C	; 60
    20c8:	09 f4       	brne	.+2      	; 0x20cc <_ZL8nextNotev+0x72>
    20ca:	60 c0       	rjmp	.+192    	; 0x218c <_ZL8nextNotev+0x132>
    20cc:	8e 33       	cpi	r24, 0x3E	; 62
    20ce:	81 f4       	brne	.+32     	; 0x20f0 <_ZL8nextNotev+0x96>
    20d0:	93 94       	inc	r9
    20d2:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <_ZL16currentCharacterv>
    20d6:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <__data_end>
    20da:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <__data_end+0x1>
    20de:	2f 5f       	subi	r18, 0xFF	; 255
    20e0:	3f 4f       	sbci	r19, 0xFF	; 255
    20e2:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <__data_end+0x1>
    20e6:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <__data_end>
    20ea:	85 36       	cpi	r24, 0x65	; 101
    20ec:	31 f7       	brne	.-52     	; 0x20ba <_ZL8nextNotev+0x60>
    20ee:	52 c0       	rjmp	.+164    	; 0x2194 <_ZL8nextNotev+0x13a>
    20f0:	81 32       	cpi	r24, 0x21	; 33
    20f2:	09 f0       	breq	.+2      	; 0x20f6 <_ZL8nextNotev+0x9c>
    20f4:	8b c0       	rjmp	.+278    	; 0x220c <_ZL8nextNotev+0x1b2>
    20f6:	80 92 0a 01 	sts	0x010A, r8	; 0x80010a <_ZL6octave>
    20fa:	d0 92 09 01 	sts	0x0109, r13	; 0x800109 <_ZL19whole_note_duration+0x1>
    20fe:	c0 92 08 01 	sts	0x0108, r12	; 0x800108 <_ZL19whole_note_duration>
    2102:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <_ZL9note_type+0x1>
    2106:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <_ZL9note_type>
    210a:	10 93 05 01 	sts	0x0105, r17	; 0x800105 <_ZL8duration+0x1>
    210e:	00 93 04 01 	sts	0x0104, r16	; 0x800104 <_ZL8duration>
    2112:	50 92 03 01 	sts	0x0103, r5	; 0x800103 <_ZL6volume+0x1>
    2116:	40 92 02 01 	sts	0x0102, r4	; 0x800102 <_ZL6volume>
    211a:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <_ZL8staccato>
    211e:	a4 e0       	ldi	r26, 0x04	; 4
    2120:	9a 2e       	mov	r9, r26
    2122:	d7 cf       	rjmp	.-82     	; 0x20d2 <_ZL8nextNotev+0x78>
    2124:	83 36       	cpi	r24, 0x63	; 99
    2126:	a1 f1       	breq	.+104    	; 0x2190 <_ZL8nextNotev+0x136>
    2128:	0c f4       	brge	.+2      	; 0x212c <_ZL8nextNotev+0xd2>
    212a:	78 c0       	rjmp	.+240    	; 0x221c <_ZL8nextNotev+0x1c2>
    212c:	10 e0       	ldi	r17, 0x00	; 0
    212e:	82 e0       	ldi	r24, 0x02	; 2
    2130:	77 c0       	rjmp	.+238    	; 0x2220 <_ZL8nextNotev+0x1c6>
    2132:	8d 36       	cpi	r24, 0x6D	; 109
    2134:	c1 f1       	breq	.+112    	; 0x21a6 <_ZL8nextNotev+0x14c>
    2136:	94 f4       	brge	.+36     	; 0x215c <_ZL8nextNotev+0x102>
    2138:	87 36       	cpi	r24, 0x67	; 103
    213a:	91 f1       	breq	.+100    	; 0x21a0 <_ZL8nextNotev+0x146>
    213c:	74 f1       	brlt	.+92     	; 0x219a <_ZL8nextNotev+0x140>
    213e:	8c 36       	cpi	r24, 0x6C	; 108
    2140:	09 f0       	breq	.+2      	; 0x2144 <_ZL8nextNotev+0xea>
    2142:	64 c0       	rjmp	.+200    	; 0x220c <_ZL8nextNotev+0x1b2>
    2144:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <_ZL9getNumberv>
    2148:	bc 01       	movw	r22, r24
    214a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL9note_type+0x1>
    214e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL9note_type>
    2152:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    2156:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    215a:	51 c0       	rjmp	.+162    	; 0x21fe <_ZL8nextNotev+0x1a4>
    215c:	82 37       	cpi	r24, 0x72	; 114
    215e:	c9 f1       	breq	.+114    	; 0x21d2 <_ZL8nextNotev+0x178>
    2160:	4c f4       	brge	.+18     	; 0x2174 <_ZL8nextNotev+0x11a>
    2162:	8f 36       	cpi	r24, 0x6F	; 111
    2164:	09 f0       	breq	.+2      	; 0x2168 <_ZL8nextNotev+0x10e>
    2166:	52 c0       	rjmp	.+164    	; 0x220c <_ZL8nextNotev+0x1b2>
    2168:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <_ZL9getNumberv>
    216c:	98 2e       	mov	r9, r24
    216e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZL6octave>
    2172:	af cf       	rjmp	.-162    	; 0x20d2 <_ZL8nextNotev+0x78>
    2174:	84 37       	cpi	r24, 0x74	; 116
    2176:	81 f1       	breq	.+96     	; 0x21d8 <_ZL8nextNotev+0x17e>
    2178:	86 37       	cpi	r24, 0x76	; 118
    217a:	09 f0       	breq	.+2      	; 0x217e <_ZL8nextNotev+0x124>
    217c:	47 c0       	rjmp	.+142    	; 0x220c <_ZL8nextNotev+0x1b2>
    217e:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <_ZL9getNumberv>
    2182:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_ZL6volume+0x1>
    2186:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_ZL6volume>
    218a:	a3 cf       	rjmp	.-186    	; 0x20d2 <_ZL8nextNotev+0x78>
    218c:	9a 94       	dec	r9
    218e:	a1 cf       	rjmp	.-190    	; 0x20d2 <_ZL8nextNotev+0x78>
    2190:	10 e0       	ldi	r17, 0x00	; 0
    2192:	20 c0       	rjmp	.+64     	; 0x21d4 <_ZL8nextNotev+0x17a>
    2194:	10 e0       	ldi	r17, 0x00	; 0
    2196:	84 e0       	ldi	r24, 0x04	; 4
    2198:	43 c0       	rjmp	.+134    	; 0x2220 <_ZL8nextNotev+0x1c6>
    219a:	10 e0       	ldi	r17, 0x00	; 0
    219c:	85 e0       	ldi	r24, 0x05	; 5
    219e:	40 c0       	rjmp	.+128    	; 0x2220 <_ZL8nextNotev+0x1c6>
    21a0:	10 e0       	ldi	r17, 0x00	; 0
    21a2:	87 e0       	ldi	r24, 0x07	; 7
    21a4:	3d c0       	rjmp	.+122    	; 0x2220 <_ZL8nextNotev+0x1c6>
    21a6:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <_ZL16currentCharacterv>
    21aa:	8c 36       	cpi	r24, 0x6C	; 108
    21ac:	19 f4       	brne	.+6      	; 0x21b4 <_ZL8nextNotev+0x15a>
    21ae:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <_ZL8staccato>
    21b2:	04 c0       	rjmp	.+8      	; 0x21bc <_ZL8nextNotev+0x162>
    21b4:	70 92 66 01 	sts	0x0166, r7	; 0x800166 <_ZL8staccato>
    21b8:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <_ZL22staccato_rest_duration>
    21bc:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <__data_end>
    21c0:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <__data_end+0x1>
    21c4:	2f 5f       	subi	r18, 0xFF	; 255
    21c6:	3f 4f       	sbci	r19, 0xFF	; 255
    21c8:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <__data_end+0x1>
    21cc:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <__data_end>
    21d0:	80 cf       	rjmp	.-256    	; 0x20d2 <_ZL8nextNotev+0x78>
    21d2:	11 e0       	ldi	r17, 0x01	; 1
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	24 c0       	rjmp	.+72     	; 0x2220 <_ZL8nextNotev+0x1c6>
    21d8:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <_ZL9getNumberv>
    21dc:	bc 01       	movw	r22, r24
    21de:	c5 01       	movw	r24, r10
    21e0:	0e 94 08 1b 	call	0x3610	; 0x3610 <__udivmodhi4>
    21e4:	66 9e       	mul	r6, r22
    21e6:	c0 01       	movw	r24, r0
    21e8:	67 9e       	mul	r6, r23
    21ea:	90 0d       	add	r25, r0
    21ec:	11 24       	eor	r1, r1
    21ee:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZL19whole_note_duration+0x1>
    21f2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL19whole_note_duration>
    21f6:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <_ZL9note_type>
    21fa:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <_ZL9note_type+0x1>
    21fe:	0e 94 08 1b 	call	0x3610	; 0x3610 <__udivmodhi4>
    2202:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_ZL8duration+0x1>
    2206:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_ZL8duration>
    220a:	63 cf       	rjmp	.-314    	; 0x20d2 <_ZL8nextNotev+0x78>
    220c:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <__data_end+0x1>
    2210:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <__data_end>
    2214:	69 c0       	rjmp	.+210    	; 0x22e8 <_ZL8nextNotev+0x28e>
    2216:	10 e0       	ldi	r17, 0x00	; 0
    2218:	89 e0       	ldi	r24, 0x09	; 9
    221a:	02 c0       	rjmp	.+4      	; 0x2220 <_ZL8nextNotev+0x1c6>
    221c:	10 e0       	ldi	r17, 0x00	; 0
    221e:	8b e0       	ldi	r24, 0x0B	; 11
    2220:	08 2f       	mov	r16, r24
    2222:	9c e0       	ldi	r25, 0x0C	; 12
    2224:	99 9e       	mul	r9, r25
    2226:	00 0d       	add	r16, r0
    2228:	11 24       	eor	r1, r1
    222a:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <_ZL16currentCharacterv>
    222e:	98 2f       	mov	r25, r24
    2230:	97 7f       	andi	r25, 0xF7	; 247
    2232:	93 32       	cpi	r25, 0x23	; 35
    2234:	61 f4       	brne	.+24     	; 0x224e <_ZL8nextNotev+0x1f4>
    2236:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <__data_end>
    223a:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <__data_end+0x1>
    223e:	2f 5f       	subi	r18, 0xFF	; 255
    2240:	3f 4f       	sbci	r19, 0xFF	; 255
    2242:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <__data_end+0x1>
    2246:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <__data_end>
    224a:	0f 5f       	subi	r16, 0xFF	; 255
    224c:	ee cf       	rjmp	.-36     	; 0x222a <_ZL8nextNotev+0x1d0>
    224e:	8d 32       	cpi	r24, 0x2D	; 45
    2250:	71 f4       	brne	.+28     	; 0x226e <_ZL8nextNotev+0x214>
    2252:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <__data_end>
    2256:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <__data_end+0x1>
    225a:	2f 5f       	subi	r18, 0xFF	; 255
    225c:	3f 4f       	sbci	r19, 0xFF	; 255
    225e:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <__data_end+0x1>
    2262:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <__data_end>
    2266:	01 50       	subi	r16, 0x01	; 1
    2268:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <_ZL16currentCharacterv>
    226c:	f0 cf       	rjmp	.-32     	; 0x224e <_ZL8nextNotev+0x1f4>
    226e:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_ZL8duration>
    2272:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_ZL8duration+0x1>
    2276:	81 53       	subi	r24, 0x31	; 49
    2278:	88 30       	cpi	r24, 0x08	; 8
    227a:	50 f4       	brcc	.+20     	; 0x2290 <_ZL8nextNotev+0x236>
    227c:	e0 90 08 01 	lds	r14, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    2280:	f0 90 09 01 	lds	r15, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    2284:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <_ZL9getNumberv>
    2288:	bc 01       	movw	r22, r24
    228a:	c7 01       	movw	r24, r14
    228c:	0e 94 08 1b 	call	0x3610	; 0x3610 <__udivmodhi4>
    2290:	7b 01       	movw	r14, r22
    2292:	f6 94       	lsr	r15
    2294:	e7 94       	ror	r14
    2296:	69 83       	std	Y+1, r22	; 0x01
    2298:	7a 83       	std	Y+2, r23	; 0x02
    229a:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <_ZL16currentCharacterv>
    229e:	69 81       	ldd	r22, Y+1	; 0x01
    22a0:	7a 81       	ldd	r23, Y+2	; 0x02
    22a2:	8e 32       	cpi	r24, 0x2E	; 46
    22a4:	69 f4       	brne	.+26     	; 0x22c0 <_ZL8nextNotev+0x266>
    22a6:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <__data_end>
    22aa:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <__data_end+0x1>
    22ae:	2f 5f       	subi	r18, 0xFF	; 255
    22b0:	3f 4f       	sbci	r19, 0xFF	; 255
    22b2:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <__data_end+0x1>
    22b6:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <__data_end>
    22ba:	6e 0d       	add	r22, r14
    22bc:	7f 1d       	adc	r23, r15
    22be:	e9 cf       	rjmp	.-46     	; 0x2292 <_ZL8nextNotev+0x238>
    22c0:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <_ZL8staccato>
    22c4:	88 23       	and	r24, r24
    22c6:	39 f0       	breq	.+14     	; 0x22d6 <_ZL8nextNotev+0x27c>
    22c8:	9b 01       	movw	r18, r22
    22ca:	36 95       	lsr	r19
    22cc:	27 95       	ror	r18
    22ce:	20 93 65 01 	sts	0x0165, r18	; 0x800165 <_ZL22staccato_rest_duration>
    22d2:	62 1b       	sub	r22, r18
    22d4:	71 09       	sbc	r23, r1
    22d6:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <_ZL6volume>
    22da:	11 23       	and	r17, r17
    22dc:	11 f0       	breq	.+4      	; 0x22e2 <_ZL8nextNotev+0x288>
    22de:	8f ef       	ldi	r24, 0xFF	; 255
    22e0:	01 c0       	rjmp	.+2      	; 0x22e4 <_ZL8nextNotev+0x28a>
    22e2:	80 2f       	mov	r24, r16
    22e4:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <_ZN15OrangutanBuzzer8playNoteEhjh>
    22e8:	22 96       	adiw	r28, 0x02	; 2
    22ea:	e0 e1       	ldi	r30, 0x10	; 16
    22ec:	0c 94 a3 1b 	jmp	0x3746	; 0x3746 <__epilogue_restores__+0x4>

000022f0 <__vector_13>:
    22f0:	1f 92       	push	r1
    22f2:	0f 92       	push	r0
    22f4:	0f b6       	in	r0, 0x3f	; 63
    22f6:	0f 92       	push	r0
    22f8:	11 24       	eor	r1, r1
    22fa:	2f 93       	push	r18
    22fc:	3f 93       	push	r19
    22fe:	4f 93       	push	r20
    2300:	5f 93       	push	r21
    2302:	6f 93       	push	r22
    2304:	7f 93       	push	r23
    2306:	8f 93       	push	r24
    2308:	9f 93       	push	r25
    230a:	af 93       	push	r26
    230c:	bf 93       	push	r27
    230e:	ef 93       	push	r30
    2310:	ff 93       	push	r31
    2312:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <_ZL13buzzerTimeout>
    2316:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <_ZL13buzzerTimeout+0x1>
    231a:	9c 01       	movw	r18, r24
    231c:	21 50       	subi	r18, 0x01	; 1
    231e:	31 09       	sbc	r19, r1
    2320:	30 93 6a 01 	sts	0x016A, r19	; 0x80016a <_ZL13buzzerTimeout+0x1>
    2324:	20 93 69 01 	sts	0x0169, r18	; 0x800169 <_ZL13buzzerTimeout>
    2328:	89 2b       	or	r24, r25
    232a:	11 f5       	brne	.+68     	; 0x2370 <__vector_13+0x80>
    232c:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    2330:	78 94       	sei
    2332:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    2336:	88 7f       	andi	r24, 0xF8	; 248
    2338:	81 60       	ori	r24, 0x01	; 1
    233a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    233e:	80 e1       	ldi	r24, 0x10	; 16
    2340:	97 e2       	ldi	r25, 0x27	; 39
    2342:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    2346:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    234a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    234e:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <buzzerFinished>
    2358:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
    235c:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <__data_end+0x1>
    2360:	89 2b       	or	r24, r25
    2362:	31 f0       	breq	.+12     	; 0x2370 <__vector_13+0x80>
    2364:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <_ZL17play_mode_setting>
    2368:	81 11       	cpse	r24, r1
    236a:	02 c0       	rjmp	.+4      	; 0x2370 <__vector_13+0x80>
    236c:	0e 94 2d 10 	call	0x205a	; 0x205a <_ZL8nextNotev>
    2370:	ff 91       	pop	r31
    2372:	ef 91       	pop	r30
    2374:	bf 91       	pop	r27
    2376:	af 91       	pop	r26
    2378:	9f 91       	pop	r25
    237a:	8f 91       	pop	r24
    237c:	7f 91       	pop	r23
    237e:	6f 91       	pop	r22
    2380:	5f 91       	pop	r21
    2382:	4f 91       	pop	r20
    2384:	3f 91       	pop	r19
    2386:	2f 91       	pop	r18
    2388:	0f 90       	pop	r0
    238a:	0f be       	out	0x3f, r0	; 63
    238c:	0f 90       	pop	r0
    238e:	1f 90       	pop	r1
    2390:	18 95       	reti

00002392 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    2392:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    2396:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <__data_end+0x1>
    239a:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <_ZL17use_program_space>
    23a4:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <_ZL22staccato_rest_duration>
    23a8:	0e 94 2d 10 	call	0x205a	; 0x205a <_ZL8nextNotev>
    23ac:	08 95       	ret

000023ae <play_from_program_space>:
    23ae:	0e 94 c9 11 	call	0x2392	; 0x2392 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    23b2:	08 95       	ret

000023b4 <delay_us.constprop.0>:
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	6f 93       	push	r22
    23ba:	64 e0       	ldi	r22, 0x04	; 4
    23bc:	6a 95       	dec	r22
    23be:	f1 f7       	brne	.-4      	; 0x23bc <delay_us.constprop.0+0x8>
    23c0:	6f 91       	pop	r22
    23c2:	01 97       	sbiw	r24, 0x01	; 1
    23c4:	c9 f7       	brne	.-14     	; 0x23b8 <delay_us.constprop.0+0x4>
    23c6:	08 95       	ret

000023c8 <_ZN12OrangutanLCD8busyWaitEv>:
    23c8:	0f 93       	push	r16
    23ca:	1f 93       	push	r17
    23cc:	cf 93       	push	r28
    23ce:	df 93       	push	r29
    23d0:	1a b1       	in	r17, 0x0a	; 10
    23d2:	57 98       	cbi	0x0a, 7	; 10
    23d4:	5a 98       	cbi	0x0b, 2	; 11
    23d6:	28 9a       	sbi	0x05, 0	; 5
    23d8:	c0 e0       	ldi	r28, 0x00	; 0
    23da:	d0 e0       	ldi	r29, 0x00	; 0
    23dc:	0e 94 da 11 	call	0x23b4	; 0x23b4 <delay_us.constprop.0>
    23e0:	5c 9a       	sbi	0x0b, 4	; 11
    23e2:	0e 94 da 11 	call	0x23b4	; 0x23b4 <delay_us.constprop.0>
    23e6:	09 b1       	in	r16, 0x09	; 9
    23e8:	5c 98       	cbi	0x0b, 4	; 11
    23ea:	0e 94 da 11 	call	0x23b4	; 0x23b4 <delay_us.constprop.0>
    23ee:	5c 9a       	sbi	0x0b, 4	; 11
    23f0:	0e 94 da 11 	call	0x23b4	; 0x23b4 <delay_us.constprop.0>
    23f4:	5c 98       	cbi	0x0b, 4	; 11
    23f6:	24 96       	adiw	r28, 0x04	; 4
    23f8:	07 ff       	sbrs	r16, 7
    23fa:	10 c0       	rjmp	.+32     	; 0x241c <_ZN12OrangutanLCD8busyWaitEv+0x54>
    23fc:	ae 01       	movw	r20, r28
    23fe:	60 e0       	ldi	r22, 0x00	; 0
    2400:	70 e0       	ldi	r23, 0x00	; 0
    2402:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <lcdTimeout>
    2406:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <lcdTimeout+0x1>
    240a:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <lcdTimeout+0x2>
    240e:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <lcdTimeout+0x3>
    2412:	48 17       	cp	r20, r24
    2414:	59 07       	cpc	r21, r25
    2416:	6a 07       	cpc	r22, r26
    2418:	7b 07       	cpc	r23, r27
    241a:	00 f3       	brcs	.-64     	; 0x23dc <_ZN12OrangutanLCD8busyWaitEv+0x14>
    241c:	1a b9       	out	0x0a, r17	; 10
    241e:	df 91       	pop	r29
    2420:	cf 91       	pop	r28
    2422:	1f 91       	pop	r17
    2424:	0f 91       	pop	r16
    2426:	08 95       	ret

00002428 <_ZN12OrangutanLCD8sendDataEh>:
    2428:	95 b1       	in	r25, 0x05	; 5
    242a:	28 2f       	mov	r18, r24
    242c:	21 70       	andi	r18, 0x01	; 1
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	22 0f       	add	r18, r18
    2432:	33 1f       	adc	r19, r19
    2434:	48 2f       	mov	r20, r24
    2436:	46 70       	andi	r20, 0x06	; 6
    2438:	68 e0       	ldi	r22, 0x08	; 8
    243a:	46 9f       	mul	r20, r22
    243c:	a0 01       	movw	r20, r0
    243e:	11 24       	eor	r1, r1
    2440:	24 2b       	or	r18, r20
    2442:	9d 7c       	andi	r25, 0xCD	; 205
    2444:	29 2b       	or	r18, r25
    2446:	25 b9       	out	0x05, r18	; 5
    2448:	9b b1       	in	r25, 0x0b	; 11
    244a:	88 70       	andi	r24, 0x08	; 8
    244c:	82 95       	swap	r24
    244e:	80 7f       	andi	r24, 0xF0	; 240
    2450:	9f 77       	andi	r25, 0x7F	; 127
    2452:	89 2b       	or	r24, r25
    2454:	8b b9       	out	0x0b, r24	; 11
    2456:	5c 9a       	sbi	0x0b, 4	; 11
    2458:	0e 94 da 11 	call	0x23b4	; 0x23b4 <delay_us.constprop.0>
    245c:	5c 98       	cbi	0x0b, 4	; 11
    245e:	0e 94 da 11 	call	0x23b4	; 0x23b4 <delay_us.constprop.0>
    2462:	08 95       	ret

00002464 <_ZN12OrangutanLCD4sendEhhh>:
    2464:	a0 e0       	ldi	r26, 0x00	; 0
    2466:	b0 e0       	ldi	r27, 0x00	; 0
    2468:	e8 e3       	ldi	r30, 0x38	; 56
    246a:	f2 e1       	ldi	r31, 0x12	; 18
    246c:	0c 94 90 1b 	jmp	0x3720	; 0x3720 <__prologue_saves__+0x16>
    2470:	c8 2f       	mov	r28, r24
    2472:	d6 2e       	mov	r13, r22
    2474:	e4 2e       	mov	r14, r20
    2476:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <_ZZN12OrangutanLCD4initEvE11initialized>
    247a:	81 11       	cpse	r24, r1
    247c:	05 c0       	rjmp	.+10     	; 0x2488 <_ZN12OrangutanLCD4sendEhhh+0x24>
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <_ZZN12OrangutanLCD4initEvE11initialized>
    2484:	0e 94 78 12 	call	0x24f0	; 0x24f0 <_ZN12OrangutanLCD5init2Ev>
    2488:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN12OrangutanLCD8busyWaitEv>
    248c:	14 b1       	in	r17, 0x04	; 4
    248e:	d5 b1       	in	r29, 0x05	; 5
    2490:	fa b0       	in	r15, 0x0a	; 10
    2492:	0b b1       	in	r16, 0x0b	; 11
    2494:	28 98       	cbi	0x05, 0	; 5
    2496:	dd 20       	and	r13, r13
    2498:	11 f0       	breq	.+4      	; 0x249e <_ZN12OrangutanLCD4sendEhhh+0x3a>
    249a:	5a 9a       	sbi	0x0b, 2	; 11
    249c:	01 c0       	rjmp	.+2      	; 0x24a0 <_ZN12OrangutanLCD4sendEhhh+0x3c>
    249e:	5a 98       	cbi	0x0b, 2	; 11
    24a0:	94 b1       	in	r25, 0x04	; 4
    24a2:	92 63       	ori	r25, 0x32	; 50
    24a4:	94 b9       	out	0x04, r25	; 4
    24a6:	57 9a       	sbi	0x0a, 7	; 10
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	e8 16       	cp	r14, r24
    24ac:	29 f0       	breq	.+10     	; 0x24b8 <_ZN12OrangutanLCD4sendEhhh+0x54>
    24ae:	8c 2f       	mov	r24, r28
    24b0:	82 95       	swap	r24
    24b2:	8f 70       	andi	r24, 0x0F	; 15
    24b4:	0e 94 14 12 	call	0x2428	; 0x2428 <_ZN12OrangutanLCD8sendDataEh>
    24b8:	8c 2f       	mov	r24, r28
    24ba:	8f 70       	andi	r24, 0x0F	; 15
    24bc:	0e 94 14 12 	call	0x2428	; 0x2428 <_ZN12OrangutanLCD8sendDataEh>
    24c0:	fa b8       	out	0x0a, r15	; 10
    24c2:	0b b9       	out	0x0b, r16	; 11
    24c4:	14 b9       	out	0x04, r17	; 4
    24c6:	d5 b9       	out	0x05, r29	; 5
    24c8:	cd b7       	in	r28, 0x3d	; 61
    24ca:	de b7       	in	r29, 0x3e	; 62
    24cc:	e7 e0       	ldi	r30, 0x07	; 7
    24ce:	0c 94 ac 1b 	jmp	0x3758	; 0x3758 <__epilogue_restores__+0x16>

000024d2 <_ZN12OrangutanLCD8send_cmdEh>:
    24d2:	42 e0       	ldi	r20, 0x02	; 2
    24d4:	60 e0       	ldi	r22, 0x00	; 0
    24d6:	0e 94 32 12 	call	0x2464	; 0x2464 <_ZN12OrangutanLCD4sendEhhh>
    24da:	08 95       	ret

000024dc <_ZN12OrangutanLCD9send_dataEh>:
    24dc:	42 e0       	ldi	r20, 0x02	; 2
    24de:	61 e0       	ldi	r22, 0x01	; 1
    24e0:	0e 94 32 12 	call	0x2464	; 0x2464 <_ZN12OrangutanLCD4sendEhhh>
    24e4:	08 95       	ret

000024e6 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    24e6:	41 e0       	ldi	r20, 0x01	; 1
    24e8:	60 e0       	ldi	r22, 0x00	; 0
    24ea:	0e 94 32 12 	call	0x2464	; 0x2464 <_ZN12OrangutanLCD4sendEhhh>
    24ee:	08 95       	ret

000024f0 <_ZN12OrangutanLCD5init2Ev>:
    24f0:	80 e1       	ldi	r24, 0x10	; 16
    24f2:	97 e2       	ldi	r25, 0x27	; 39
    24f4:	a0 e0       	ldi	r26, 0x00	; 0
    24f6:	b0 e0       	ldi	r27, 0x00	; 0
    24f8:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <lcdTimeout>
    24fc:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <lcdTimeout+0x1>
    2500:	a0 93 6d 01 	sts	0x016D, r26	; 0x80016d <lcdTimeout+0x2>
    2504:	b0 93 6e 01 	sts	0x016E, r27	; 0x80016e <lcdTimeout+0x3>
    2508:	52 9a       	sbi	0x0a, 2	; 10
    250a:	20 9a       	sbi	0x04, 0	; 4
    250c:	54 9a       	sbi	0x0a, 4	; 10
    250e:	8e e1       	ldi	r24, 0x1E	; 30
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	0e 94 5e 15 	call	0x2abc	; 0x2abc <delay_ms>
    2516:	83 e0       	ldi	r24, 0x03	; 3
    2518:	0e 94 73 12 	call	0x24e6	; 0x24e6 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    251c:	86 e0       	ldi	r24, 0x06	; 6
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	0e 94 5e 15 	call	0x2abc	; 0x2abc <delay_ms>
    2524:	83 e0       	ldi	r24, 0x03	; 3
    2526:	0e 94 73 12 	call	0x24e6	; 0x24e6 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    252a:	82 e0       	ldi	r24, 0x02	; 2
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	0e 94 5e 15 	call	0x2abc	; 0x2abc <delay_ms>
    2532:	83 e0       	ldi	r24, 0x03	; 3
    2534:	0e 94 73 12 	call	0x24e6	; 0x24e6 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2538:	82 e0       	ldi	r24, 0x02	; 2
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	0e 94 5e 15 	call	0x2abc	; 0x2abc <delay_ms>
    2540:	82 e0       	ldi	r24, 0x02	; 2
    2542:	0e 94 73 12 	call	0x24e6	; 0x24e6 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2546:	82 e0       	ldi	r24, 0x02	; 2
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	0e 94 5e 15 	call	0x2abc	; 0x2abc <delay_ms>
    254e:	88 e2       	ldi	r24, 0x28	; 40
    2550:	0e 94 69 12 	call	0x24d2	; 0x24d2 <_ZN12OrangutanLCD8send_cmdEh>
    2554:	88 e0       	ldi	r24, 0x08	; 8
    2556:	0e 94 69 12 	call	0x24d2	; 0x24d2 <_ZN12OrangutanLCD8send_cmdEh>
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	0e 94 69 12 	call	0x24d2	; 0x24d2 <_ZN12OrangutanLCD8send_cmdEh>
    2560:	86 e0       	ldi	r24, 0x06	; 6
    2562:	0e 94 69 12 	call	0x24d2	; 0x24d2 <_ZN12OrangutanLCD8send_cmdEh>
    2566:	8c e0       	ldi	r24, 0x0C	; 12
    2568:	0e 94 69 12 	call	0x24d2	; 0x24d2 <_ZN12OrangutanLCD8send_cmdEh>
    256c:	08 95       	ret

0000256e <_ZN12OrangutanLCD5clearEv>:
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	0e 94 69 12 	call	0x24d2	; 0x24d2 <_ZN12OrangutanLCD8send_cmdEh>
    2574:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <printf_chars>
    2578:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <printf_chars+0x1>
    257c:	89 2b       	or	r24, r25
    257e:	f9 f0       	breq	.+62     	; 0x25be <_ZN12OrangutanLCD5clearEv+0x50>
    2580:	60 e0       	ldi	r22, 0x00	; 0
    2582:	a0 e2       	ldi	r26, 0x20	; 32
    2584:	26 2f       	mov	r18, r22
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <numLCDCols>
    258c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <numLCDRows>
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	01 97       	sbiw	r24, 0x01	; 1
    2594:	78 9f       	mul	r23, r24
    2596:	a0 01       	movw	r20, r0
    2598:	79 9f       	mul	r23, r25
    259a:	50 0d       	add	r21, r0
    259c:	11 24       	eor	r1, r1
    259e:	24 17       	cp	r18, r20
    25a0:	35 07       	cpc	r19, r21
    25a2:	4c f4       	brge	.+18     	; 0x25b6 <_ZN12OrangutanLCD5clearEv+0x48>
    25a4:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <printf_chars>
    25a8:	f0 91 72 01 	lds	r31, 0x0172	; 0x800172 <printf_chars+0x1>
    25ac:	e2 0f       	add	r30, r18
    25ae:	f3 1f       	adc	r31, r19
    25b0:	a0 83       	st	Z, r26
    25b2:	6f 5f       	subi	r22, 0xFF	; 255
    25b4:	e7 cf       	rjmp	.-50     	; 0x2584 <_ZN12OrangutanLCD5clearEv+0x16>
    25b6:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <col>
    25ba:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <row>
    25be:	08 95       	ret

000025c0 <clear>:
    25c0:	0e 94 b7 12 	call	0x256e	; 0x256e <_ZN12OrangutanLCD5clearEv>
    25c4:	08 95       	ret

000025c6 <_ZN12OrangutanLCD5printEPKc>:
    25c6:	cf 93       	push	r28
    25c8:	df 93       	push	r29
    25ca:	ec 01       	movw	r28, r24
    25cc:	89 91       	ld	r24, Y+
    25ce:	88 23       	and	r24, r24
    25d0:	19 f0       	breq	.+6      	; 0x25d8 <_ZN12OrangutanLCD5printEPKc+0x12>
    25d2:	0e 94 6e 12 	call	0x24dc	; 0x24dc <_ZN12OrangutanLCD9send_dataEh>
    25d6:	fa cf       	rjmp	.-12     	; 0x25cc <_ZN12OrangutanLCD5printEPKc+0x6>
    25d8:	df 91       	pop	r29
    25da:	cf 91       	pop	r28
    25dc:	08 95       	ret

000025de <print>:
    25de:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <_ZN12OrangutanLCD5printEPKc>
    25e2:	08 95       	ret

000025e4 <_ZN12OrangutanLCD5printEm>:
    25e4:	aa e0       	ldi	r26, 0x0A	; 10
    25e6:	b0 e0       	ldi	r27, 0x00	; 0
    25e8:	e8 ef       	ldi	r30, 0xF8	; 248
    25ea:	f2 e1       	ldi	r31, 0x12	; 18
    25ec:	0c 94 8f 1b 	jmp	0x371e	; 0x371e <__prologue_saves__+0x14>
    25f0:	1a e0       	ldi	r17, 0x0A	; 10
    25f2:	5a e0       	ldi	r21, 0x0A	; 10
    25f4:	c5 2e       	mov	r12, r21
    25f6:	d1 2c       	mov	r13, r1
    25f8:	e1 2c       	mov	r14, r1
    25fa:	f1 2c       	mov	r15, r1
    25fc:	06 2f       	mov	r16, r22
    25fe:	a7 01       	movw	r20, r14
    2600:	96 01       	movw	r18, r12
    2602:	0e 94 1c 1b 	call	0x3638	; 0x3638 <__udivmodsi4>
    2606:	ca 01       	movw	r24, r20
    2608:	b9 01       	movw	r22, r18
    260a:	11 50       	subi	r17, 0x01	; 1
    260c:	e1 e0       	ldi	r30, 0x01	; 1
    260e:	f0 e0       	ldi	r31, 0x00	; 0
    2610:	ec 0f       	add	r30, r28
    2612:	fd 1f       	adc	r31, r29
    2614:	e1 0f       	add	r30, r17
    2616:	f1 1d       	adc	r31, r1
    2618:	00 5d       	subi	r16, 0xD0	; 208
    261a:	2a e0       	ldi	r18, 0x0A	; 10
    261c:	62 9f       	mul	r22, r18
    261e:	00 19       	sub	r16, r0
    2620:	11 24       	eor	r1, r1
    2622:	00 83       	st	Z, r16
    2624:	61 15       	cp	r22, r1
    2626:	71 05       	cpc	r23, r1
    2628:	81 05       	cpc	r24, r1
    262a:	91 05       	cpc	r25, r1
    262c:	39 f7       	brne	.-50     	; 0x25fc <_ZN12OrangutanLCD5printEm+0x18>
    262e:	1a 30       	cpi	r17, 0x0A	; 10
    2630:	58 f4       	brcc	.+22     	; 0x2648 <_ZN12OrangutanLCD5printEm+0x64>
    2632:	e1 e0       	ldi	r30, 0x01	; 1
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	ec 0f       	add	r30, r28
    2638:	fd 1f       	adc	r31, r29
    263a:	e1 0f       	add	r30, r17
    263c:	f1 1d       	adc	r31, r1
    263e:	80 81       	ld	r24, Z
    2640:	0e 94 6e 12 	call	0x24dc	; 0x24dc <_ZN12OrangutanLCD9send_dataEh>
    2644:	1f 5f       	subi	r17, 0xFF	; 255
    2646:	f3 cf       	rjmp	.-26     	; 0x262e <_ZN12OrangutanLCD5printEm+0x4a>
    2648:	2a 96       	adiw	r28, 0x0a	; 10
    264a:	e8 e0       	ldi	r30, 0x08	; 8
    264c:	0c 94 ab 1b 	jmp	0x3756	; 0x3756 <__epilogue_restores__+0x14>

00002650 <_ZN12OrangutanLCD5printEl>:
    2650:	cf 92       	push	r12
    2652:	df 92       	push	r13
    2654:	ef 92       	push	r14
    2656:	ff 92       	push	r15
    2658:	6b 01       	movw	r12, r22
    265a:	7c 01       	movw	r14, r24
    265c:	97 ff       	sbrs	r25, 7
    265e:	0b c0       	rjmp	.+22     	; 0x2676 <_ZN12OrangutanLCD5printEl+0x26>
    2660:	f0 94       	com	r15
    2662:	e0 94       	com	r14
    2664:	d0 94       	com	r13
    2666:	c0 94       	com	r12
    2668:	c1 1c       	adc	r12, r1
    266a:	d1 1c       	adc	r13, r1
    266c:	e1 1c       	adc	r14, r1
    266e:	f1 1c       	adc	r15, r1
    2670:	8d e2       	ldi	r24, 0x2D	; 45
    2672:	0e 94 6e 12 	call	0x24dc	; 0x24dc <_ZN12OrangutanLCD9send_dataEh>
    2676:	c7 01       	movw	r24, r14
    2678:	b6 01       	movw	r22, r12
    267a:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <_ZN12OrangutanLCD5printEm>
    267e:	ff 90       	pop	r15
    2680:	ef 90       	pop	r14
    2682:	df 90       	pop	r13
    2684:	cf 90       	pop	r12
    2686:	08 95       	ret

00002688 <print_long>:
    2688:	0e 94 28 13 	call	0x2650	; 0x2650 <_ZN12OrangutanLCD5printEl>
    268c:	08 95       	ret

0000268e <_ZN12OrangutanLCD6gotoXYEhh>:
    268e:	a5 e0       	ldi	r26, 0x05	; 5
    2690:	b0 e0       	ldi	r27, 0x00	; 0
    2692:	ed e4       	ldi	r30, 0x4D	; 77
    2694:	f3 e1       	ldi	r31, 0x13	; 19
    2696:	0c 94 94 1b 	jmp	0x3728	; 0x3728 <__prologue_saves__+0x1e>
    269a:	18 2f       	mov	r17, r24
    269c:	80 e8       	ldi	r24, 0x80	; 128
    269e:	89 83       	std	Y+1, r24	; 0x01
    26a0:	80 ec       	ldi	r24, 0xC0	; 192
    26a2:	8a 83       	std	Y+2, r24	; 0x02
    26a4:	84 e9       	ldi	r24, 0x94	; 148
    26a6:	8b 83       	std	Y+3, r24	; 0x03
    26a8:	84 ed       	ldi	r24, 0xD4	; 212
    26aa:	8c 83       	std	Y+4, r24	; 0x04
    26ac:	fe 01       	movw	r30, r28
    26ae:	e6 0f       	add	r30, r22
    26b0:	f1 1d       	adc	r31, r1
    26b2:	81 81       	ldd	r24, Z+1	; 0x01
    26b4:	81 0f       	add	r24, r17
    26b6:	6d 83       	std	Y+5, r22	; 0x05
    26b8:	0e 94 69 12 	call	0x24d2	; 0x24d2 <_ZN12OrangutanLCD8send_cmdEh>
    26bc:	10 93 6f 01 	sts	0x016F, r17	; 0x80016f <col>
    26c0:	6d 81       	ldd	r22, Y+5	; 0x05
    26c2:	60 93 70 01 	sts	0x0170, r22	; 0x800170 <row>
    26c6:	25 96       	adiw	r28, 0x05	; 5
    26c8:	e3 e0       	ldi	r30, 0x03	; 3
    26ca:	0c 94 b0 1b 	jmp	0x3760	; 0x3760 <__epilogue_restores__+0x1e>

000026ce <lcd_goto_xy>:
    26ce:	0e 94 47 13 	call	0x268e	; 0x268e <_ZN12OrangutanLCD6gotoXYEhh>
    26d2:	08 95       	ret

000026d4 <_ZN16OrangutanDigital9setOutputEhh>:
    26d4:	88 30       	cpi	r24, 0x08	; 8
    26d6:	58 f4       	brcc	.+22     	; 0x26ee <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    26d8:	91 e0       	ldi	r25, 0x01	; 1
    26da:	01 c0       	rjmp	.+2      	; 0x26de <_ZN16OrangutanDigital9setOutputEhh+0xa>
    26dc:	99 0f       	add	r25, r25
    26de:	8a 95       	dec	r24
    26e0:	ea f7       	brpl	.-6      	; 0x26dc <_ZN16OrangutanDigital9setOutputEhh+0x8>
    26e2:	89 2f       	mov	r24, r25
    26e4:	aa e2       	ldi	r26, 0x2A	; 42
    26e6:	b0 e0       	ldi	r27, 0x00	; 0
    26e8:	eb e2       	ldi	r30, 0x2B	; 43
    26ea:	f0 e0       	ldi	r31, 0x00	; 0
    26ec:	21 c0       	rjmp	.+66     	; 0x2730 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    26ee:	8e 30       	cpi	r24, 0x0E	; 14
    26f0:	60 f4       	brcc	.+24     	; 0x270a <_ZN16OrangutanDigital9setOutputEhh+0x36>
    26f2:	98 ef       	ldi	r25, 0xF8	; 248
    26f4:	98 0f       	add	r25, r24
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	01 c0       	rjmp	.+2      	; 0x26fc <_ZN16OrangutanDigital9setOutputEhh+0x28>
    26fa:	88 0f       	add	r24, r24
    26fc:	9a 95       	dec	r25
    26fe:	ea f7       	brpl	.-6      	; 0x26fa <_ZN16OrangutanDigital9setOutputEhh+0x26>
    2700:	a4 e2       	ldi	r26, 0x24	; 36
    2702:	b0 e0       	ldi	r27, 0x00	; 0
    2704:	e5 e2       	ldi	r30, 0x25	; 37
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	13 c0       	rjmp	.+38     	; 0x2730 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    270a:	85 31       	cpi	r24, 0x15	; 21
    270c:	60 f4       	brcc	.+24     	; 0x2726 <_ZN16OrangutanDigital9setOutputEhh+0x52>
    270e:	92 ef       	ldi	r25, 0xF2	; 242
    2710:	98 0f       	add	r25, r24
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	01 c0       	rjmp	.+2      	; 0x2718 <_ZN16OrangutanDigital9setOutputEhh+0x44>
    2716:	88 0f       	add	r24, r24
    2718:	9a 95       	dec	r25
    271a:	ea f7       	brpl	.-6      	; 0x2716 <_ZN16OrangutanDigital9setOutputEhh+0x42>
    271c:	a7 e2       	ldi	r26, 0x27	; 39
    271e:	b0 e0       	ldi	r27, 0x00	; 0
    2720:	e8 e2       	ldi	r30, 0x28	; 40
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	05 c0       	rjmp	.+10     	; 0x2730 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	a0 e0       	ldi	r26, 0x00	; 0
    272a:	b0 e0       	ldi	r27, 0x00	; 0
    272c:	e0 e0       	ldi	r30, 0x00	; 0
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	6f 3f       	cpi	r22, 0xFF	; 255
    2732:	19 f4       	brne	.+6      	; 0x273a <_ZN16OrangutanDigital9setOutputEhh+0x66>
    2734:	90 81       	ld	r25, Z
    2736:	98 27       	eor	r25, r24
    2738:	09 c0       	rjmp	.+18     	; 0x274c <_ZN16OrangutanDigital9setOutputEhh+0x78>
    273a:	66 23       	and	r22, r22
    273c:	19 f0       	breq	.+6      	; 0x2744 <_ZN16OrangutanDigital9setOutputEhh+0x70>
    273e:	90 81       	ld	r25, Z
    2740:	98 2b       	or	r25, r24
    2742:	04 c0       	rjmp	.+8      	; 0x274c <_ZN16OrangutanDigital9setOutputEhh+0x78>
    2744:	20 81       	ld	r18, Z
    2746:	98 2f       	mov	r25, r24
    2748:	90 95       	com	r25
    274a:	92 23       	and	r25, r18
    274c:	90 83       	st	Z, r25
    274e:	9c 91       	ld	r25, X
    2750:	98 2b       	or	r25, r24
    2752:	9c 93       	st	X, r25
    2754:	08 95       	ret

00002756 <_ZN15OrangutanMotors5init2Ev>:
    2756:	83 ef       	ldi	r24, 0xF3	; 243
    2758:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    275c:	84 bd       	out	0x24, r24	; 36
    275e:	82 e0       	ldi	r24, 0x02	; 2
    2760:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2764:	85 bd       	out	0x25, r24	; 37
    2766:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    276a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    276e:	18 bc       	out	0x28, r1	; 40
    2770:	17 bc       	out	0x27, r1	; 39
    2772:	60 e0       	ldi	r22, 0x00	; 0
    2774:	86 e0       	ldi	r24, 0x06	; 6
    2776:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <_ZN16OrangutanDigital9setOutputEhh>
    277a:	60 e0       	ldi	r22, 0x00	; 0
    277c:	85 e0       	ldi	r24, 0x05	; 5
    277e:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <_ZN16OrangutanDigital9setOutputEhh>
    2782:	60 e0       	ldi	r22, 0x00	; 0
    2784:	8b e0       	ldi	r24, 0x0B	; 11
    2786:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <_ZN16OrangutanDigital9setOutputEhh>
    278a:	60 e0       	ldi	r22, 0x00	; 0
    278c:	83 e0       	ldi	r24, 0x03	; 3
    278e:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <_ZN16OrangutanDigital9setOutputEhh>
    2792:	08 95       	ret

00002794 <_ZN15OrangutanMotors4initEv>:
    2794:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <_ZZN15OrangutanMotors4initEvE11initialized>
    2798:	81 11       	cpse	r24, r1
    279a:	05 c0       	rjmp	.+10     	; 0x27a6 <_ZN15OrangutanMotors4initEv+0x12>
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <_ZZN15OrangutanMotors4initEvE11initialized>
    27a2:	0e 94 ab 13 	call	0x2756	; 0x2756 <_ZN15OrangutanMotors5init2Ev>
    27a6:	08 95       	ret

000027a8 <_ZN15OrangutanMotors10setM1SpeedEi>:
    27a8:	cf 93       	push	r28
    27aa:	df 93       	push	r29
    27ac:	ec 01       	movw	r28, r24
    27ae:	0e 94 ca 13 	call	0x2794	; 0x2794 <_ZN15OrangutanMotors4initEv>
    27b2:	d7 ff       	sbrs	r29, 7
    27b4:	05 c0       	rjmp	.+10     	; 0x27c0 <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    27b6:	d1 95       	neg	r29
    27b8:	c1 95       	neg	r28
    27ba:	d1 09       	sbc	r29, r1
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	01 c0       	rjmp	.+2      	; 0x27c2 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    27c0:	80 e0       	ldi	r24, 0x00	; 0
    27c2:	cf 3f       	cpi	r28, 0xFF	; 255
    27c4:	d1 05       	cpc	r29, r1
    27c6:	19 f0       	breq	.+6      	; 0x27ce <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    27c8:	14 f0       	brlt	.+4      	; 0x27ce <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    27ca:	cf ef       	ldi	r28, 0xFF	; 255
    27cc:	d0 e0       	ldi	r29, 0x00	; 0
    27ce:	88 23       	and	r24, r24
    27d0:	19 f0       	breq	.+6      	; 0x27d8 <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    27d2:	18 bc       	out	0x28, r1	; 40
    27d4:	c7 bd       	out	0x27, r28	; 39
    27d6:	02 c0       	rjmp	.+4      	; 0x27dc <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    27d8:	c8 bd       	out	0x28, r28	; 40
    27da:	17 bc       	out	0x27, r1	; 39
    27dc:	df 91       	pop	r29
    27de:	cf 91       	pop	r28
    27e0:	08 95       	ret

000027e2 <_ZN15OrangutanMotors10setM2SpeedEi>:
    27e2:	cf 93       	push	r28
    27e4:	df 93       	push	r29
    27e6:	ec 01       	movw	r28, r24
    27e8:	0e 94 ca 13 	call	0x2794	; 0x2794 <_ZN15OrangutanMotors4initEv>
    27ec:	d7 ff       	sbrs	r29, 7
    27ee:	05 c0       	rjmp	.+10     	; 0x27fa <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    27f0:	d1 95       	neg	r29
    27f2:	c1 95       	neg	r28
    27f4:	d1 09       	sbc	r29, r1
    27f6:	81 e0       	ldi	r24, 0x01	; 1
    27f8:	01 c0       	rjmp	.+2      	; 0x27fc <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    27fa:	80 e0       	ldi	r24, 0x00	; 0
    27fc:	cf 3f       	cpi	r28, 0xFF	; 255
    27fe:	d1 05       	cpc	r29, r1
    2800:	19 f0       	breq	.+6      	; 0x2808 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    2802:	14 f0       	brlt	.+4      	; 0x2808 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    2804:	cf ef       	ldi	r28, 0xFF	; 255
    2806:	d0 e0       	ldi	r29, 0x00	; 0
    2808:	88 23       	and	r24, r24
    280a:	29 f0       	breq	.+10     	; 0x2816 <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    280c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    2810:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    2814:	04 c0       	rjmp	.+8      	; 0x281e <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    2816:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    281a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    281e:	df 91       	pop	r29
    2820:	cf 91       	pop	r28
    2822:	08 95       	ret

00002824 <_ZN15OrangutanMotors9setSpeedsEii>:
    2824:	cf 93       	push	r28
    2826:	df 93       	push	r29
    2828:	eb 01       	movw	r28, r22
    282a:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <_ZN15OrangutanMotors10setM1SpeedEi>
    282e:	ce 01       	movw	r24, r28
    2830:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <_ZN15OrangutanMotors10setM2SpeedEi>
    2834:	df 91       	pop	r29
    2836:	cf 91       	pop	r28
    2838:	08 95       	ret

0000283a <set_motors>:
    283a:	0e 94 12 14 	call	0x2824	; 0x2824 <_ZN15OrangutanMotors9setSpeedsEii>
    283e:	08 95       	ret

00002840 <_ZN20OrangutanPushbuttons5init2Ev>:
    2840:	84 b1       	in	r24, 0x04	; 4
    2842:	8d 7c       	andi	r24, 0xCD	; 205
    2844:	84 b9       	out	0x04, r24	; 4
    2846:	85 b1       	in	r24, 0x05	; 5
    2848:	82 63       	ori	r24, 0x32	; 50
    284a:	85 b9       	out	0x05, r24	; 5
    284c:	85 e0       	ldi	r24, 0x05	; 5
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	6f 93       	push	r22
    2852:	64 e0       	ldi	r22, 0x04	; 4
    2854:	6a 95       	dec	r22
    2856:	f1 f7       	brne	.-4      	; 0x2854 <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    2858:	6f 91       	pop	r22
    285a:	01 97       	sbiw	r24, 0x01	; 1
    285c:	c9 f7       	brne	.-14     	; 0x2850 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    285e:	08 95       	ret

00002860 <_ZN20OrangutanPushbuttons4initEv>:
    2860:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    2864:	81 11       	cpse	r24, r1
    2866:	05 c0       	rjmp	.+10     	; 0x2872 <_ZN20OrangutanPushbuttons4initEv+0x12>
    2868:	81 e0       	ldi	r24, 0x01	; 1
    286a:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    286e:	0e 94 20 14 	call	0x2840	; 0x2840 <_ZN20OrangutanPushbuttons5init2Ev>
    2872:	08 95       	ret

00002874 <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    2874:	cf 93       	push	r28
    2876:	c8 2f       	mov	r28, r24
    2878:	0e 94 30 14 	call	0x2860	; 0x2860 <_ZN20OrangutanPushbuttons4initEv>
    287c:	83 b1       	in	r24, 0x03	; 3
    287e:	8c 23       	and	r24, r28
    2880:	e9 f3       	breq	.-6      	; 0x287c <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    2882:	8a e0       	ldi	r24, 0x0A	; 10
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	0e 94 5e 15 	call	0x2abc	; 0x2abc <delay_ms>
    288a:	83 b1       	in	r24, 0x03	; 3
    288c:	8c 23       	and	r24, r28
    288e:	b1 f3       	breq	.-20     	; 0x287c <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    2890:	83 b1       	in	r24, 0x03	; 3
    2892:	8c 23       	and	r24, r28
    2894:	cf 91       	pop	r28
    2896:	08 95       	ret

00002898 <wait_for_button_release>:
    2898:	0e 94 3a 14 	call	0x2874	; 0x2874 <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    289c:	08 95       	ret

0000289e <_ZN20OrangutanPushbuttons9isPressedEh>:
    289e:	a1 e0       	ldi	r26, 0x01	; 1
    28a0:	b0 e0       	ldi	r27, 0x00	; 0
    28a2:	e5 e5       	ldi	r30, 0x55	; 85
    28a4:	f4 e1       	ldi	r31, 0x14	; 20
    28a6:	0c 94 95 1b 	jmp	0x372a	; 0x372a <__prologue_saves__+0x20>
    28aa:	89 83       	std	Y+1, r24	; 0x01
    28ac:	0e 94 30 14 	call	0x2860	; 0x2860 <_ZN20OrangutanPushbuttons4initEv>
    28b0:	93 b1       	in	r25, 0x03	; 3
    28b2:	90 95       	com	r25
    28b4:	89 81       	ldd	r24, Y+1	; 0x01
    28b6:	89 23       	and	r24, r25
    28b8:	21 96       	adiw	r28, 0x01	; 1
    28ba:	e2 e0       	ldi	r30, 0x02	; 2
    28bc:	0c 94 b1 1b 	jmp	0x3762	; 0x3762 <__epilogue_restores__+0x20>

000028c0 <button_is_pressed>:
    28c0:	0e 94 4f 14 	call	0x289e	; 0x289e <_ZN20OrangutanPushbuttons9isPressedEh>
    28c4:	08 95       	ret

000028c6 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>:
    28c6:	28 2f       	mov	r18, r24
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	9a e0       	ldi	r25, 0x0A	; 10
    28cc:	89 9f       	mul	r24, r25
    28ce:	f0 01       	movw	r30, r0
    28d0:	11 24       	eor	r1, r1
    28d2:	ed 58       	subi	r30, 0x8D	; 141
    28d4:	fe 4f       	sbci	r31, 0xFE	; 254
    28d6:	80 85       	ldd	r24, Z+8	; 0x08
    28d8:	91 85       	ldd	r25, Z+9	; 0x09
    28da:	00 97       	sbiw	r24, 0x00	; 0
    28dc:	21 f0       	breq	.+8      	; 0x28e6 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    28de:	52 81       	ldd	r21, Z+2	; 0x02
    28e0:	44 81       	ldd	r20, Z+4	; 0x04
    28e2:	54 17       	cp	r21, r20
    28e4:	80 f0       	brcs	.+32     	; 0x2906 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x40>
    28e6:	8a e0       	ldi	r24, 0x0A	; 10
    28e8:	82 9f       	mul	r24, r18
    28ea:	f0 01       	movw	r30, r0
    28ec:	83 9f       	mul	r24, r19
    28ee:	f0 0d       	add	r31, r0
    28f0:	11 24       	eor	r1, r1
    28f2:	ed 58       	subi	r30, 0x8D	; 141
    28f4:	fe 4f       	sbci	r31, 0xFE	; 254
    28f6:	92 81       	ldd	r25, Z+2	; 0x02
    28f8:	84 81       	ldd	r24, Z+4	; 0x04
    28fa:	98 13       	cpse	r25, r24
    28fc:	0e c0       	rjmp	.+28     	; 0x291a <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x54>
    28fe:	85 81       	ldd	r24, Z+5	; 0x05
    2900:	81 11       	cpse	r24, r1
    2902:	0a c0       	rjmp	.+20     	; 0x2918 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x52>
    2904:	08 95       	ret
    2906:	42 81       	ldd	r20, Z+2	; 0x02
    2908:	dc 01       	movw	r26, r24
    290a:	a4 0f       	add	r26, r20
    290c:	b1 1d       	adc	r27, r1
    290e:	6c 93       	st	X, r22
    2910:	82 81       	ldd	r24, Z+2	; 0x02
    2912:	8f 5f       	subi	r24, 0xFF	; 255
    2914:	82 83       	std	Z+2, r24	; 0x02
    2916:	e7 cf       	rjmp	.-50     	; 0x28e6 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    2918:	12 82       	std	Z+2, r1	; 0x02
    291a:	08 95       	ret

0000291c <__vector_18>:
    291c:	1f 92       	push	r1
    291e:	0f 92       	push	r0
    2920:	0f b6       	in	r0, 0x3f	; 63
    2922:	0f 92       	push	r0
    2924:	11 24       	eor	r1, r1
    2926:	2f 93       	push	r18
    2928:	3f 93       	push	r19
    292a:	4f 93       	push	r20
    292c:	5f 93       	push	r21
    292e:	6f 93       	push	r22
    2930:	7f 93       	push	r23
    2932:	8f 93       	push	r24
    2934:	9f 93       	push	r25
    2936:	af 93       	push	r26
    2938:	bf 93       	push	r27
    293a:	ef 93       	push	r30
    293c:	ff 93       	push	r31
    293e:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    2942:	80 e0       	ldi	r24, 0x00	; 0
    2944:	0e 94 63 14 	call	0x28c6	; 0x28c6 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>
    2948:	ff 91       	pop	r31
    294a:	ef 91       	pop	r30
    294c:	bf 91       	pop	r27
    294e:	af 91       	pop	r26
    2950:	9f 91       	pop	r25
    2952:	8f 91       	pop	r24
    2954:	7f 91       	pop	r23
    2956:	6f 91       	pop	r22
    2958:	5f 91       	pop	r21
    295a:	4f 91       	pop	r20
    295c:	3f 91       	pop	r19
    295e:	2f 91       	pop	r18
    2960:	0f 90       	pop	r0
    2962:	0f be       	out	0x3f, r0	; 63
    2964:	0f 90       	pop	r0
    2966:	1f 90       	pop	r1
    2968:	18 95       	reti

0000296a <_ZN15OrangutanSerial24uart_update_tx_interruptEh>:
    296a:	9a e0       	ldi	r25, 0x0A	; 10
    296c:	89 9f       	mul	r24, r25
    296e:	f0 01       	movw	r30, r0
    2970:	11 24       	eor	r1, r1
    2972:	ed 58       	subi	r30, 0x8D	; 141
    2974:	fe 4f       	sbci	r31, 0xFE	; 254
    2976:	86 81       	ldd	r24, Z+6	; 0x06
    2978:	97 81       	ldd	r25, Z+7	; 0x07
    297a:	89 2b       	or	r24, r25
    297c:	59 f0       	breq	.+22     	; 0x2994 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    297e:	91 81       	ldd	r25, Z+1	; 0x01
    2980:	83 81       	ldd	r24, Z+3	; 0x03
    2982:	98 17       	cp	r25, r24
    2984:	38 f4       	brcc	.+14     	; 0x2994 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    2986:	80 81       	ld	r24, Z
    2988:	81 11       	cpse	r24, r1
    298a:	04 c0       	rjmp	.+8      	; 0x2994 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    298c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2990:	80 62       	ori	r24, 0x20	; 32
    2992:	03 c0       	rjmp	.+6      	; 0x299a <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x30>
    2994:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2998:	8f 7d       	andi	r24, 0xDF	; 223
    299a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    299e:	08 95       	ret

000029a0 <_ZN15OrangutanSerial11uart_tx_isrEh>:
    29a0:	9a e0       	ldi	r25, 0x0A	; 10
    29a2:	89 9f       	mul	r24, r25
    29a4:	f0 01       	movw	r30, r0
    29a6:	11 24       	eor	r1, r1
    29a8:	ed 58       	subi	r30, 0x8D	; 141
    29aa:	fe 4f       	sbci	r31, 0xFE	; 254
    29ac:	26 81       	ldd	r18, Z+6	; 0x06
    29ae:	37 81       	ldd	r19, Z+7	; 0x07
    29b0:	21 15       	cp	r18, r1
    29b2:	31 05       	cpc	r19, r1
    29b4:	41 f0       	breq	.+16     	; 0x29c6 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    29b6:	41 81       	ldd	r20, Z+1	; 0x01
    29b8:	93 81       	ldd	r25, Z+3	; 0x03
    29ba:	49 17       	cp	r20, r25
    29bc:	20 f4       	brcc	.+8      	; 0x29c6 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    29be:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    29c2:	95 fd       	sbrc	r25, 5
    29c4:	03 c0       	rjmp	.+6      	; 0x29cc <_ZN15OrangutanSerial11uart_tx_isrEh+0x2c>
    29c6:	0e 94 b5 14 	call	0x296a	; 0x296a <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    29ca:	08 95       	ret
    29cc:	91 81       	ldd	r25, Z+1	; 0x01
    29ce:	d9 01       	movw	r26, r18
    29d0:	a9 0f       	add	r26, r25
    29d2:	b1 1d       	adc	r27, r1
    29d4:	9c 91       	ld	r25, X
    29d6:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    29da:	91 81       	ldd	r25, Z+1	; 0x01
    29dc:	9f 5f       	subi	r25, 0xFF	; 255
    29de:	91 83       	std	Z+1, r25	; 0x01
    29e0:	f2 cf       	rjmp	.-28     	; 0x29c6 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>

000029e2 <__vector_19>:
    29e2:	1f 92       	push	r1
    29e4:	0f 92       	push	r0
    29e6:	0f b6       	in	r0, 0x3f	; 63
    29e8:	0f 92       	push	r0
    29ea:	11 24       	eor	r1, r1
    29ec:	2f 93       	push	r18
    29ee:	3f 93       	push	r19
    29f0:	4f 93       	push	r20
    29f2:	5f 93       	push	r21
    29f4:	6f 93       	push	r22
    29f6:	7f 93       	push	r23
    29f8:	8f 93       	push	r24
    29fa:	9f 93       	push	r25
    29fc:	af 93       	push	r26
    29fe:	bf 93       	push	r27
    2a00:	ef 93       	push	r30
    2a02:	ff 93       	push	r31
    2a04:	80 e0       	ldi	r24, 0x00	; 0
    2a06:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_ZN15OrangutanSerial11uart_tx_isrEh>
    2a0a:	ff 91       	pop	r31
    2a0c:	ef 91       	pop	r30
    2a0e:	bf 91       	pop	r27
    2a10:	af 91       	pop	r26
    2a12:	9f 91       	pop	r25
    2a14:	8f 91       	pop	r24
    2a16:	7f 91       	pop	r23
    2a18:	6f 91       	pop	r22
    2a1a:	5f 91       	pop	r21
    2a1c:	4f 91       	pop	r20
    2a1e:	3f 91       	pop	r19
    2a20:	2f 91       	pop	r18
    2a22:	0f 90       	pop	r0
    2a24:	0f be       	out	0x3f, r0	; 63
    2a26:	0f 90       	pop	r0
    2a28:	1f 90       	pop	r1
    2a2a:	18 95       	reti

00002a2c <__vector_9>:
    2a2c:	2f 92       	push	r2
    2a2e:	8f 93       	push	r24
    2a30:	9f 93       	push	r25
    2a32:	2f b6       	in	r2, 0x3f	; 63
    2a34:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <tickCount+0x1>
    2a38:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <tickCount+0x2>
    2a3c:	01 96       	adiw	r24, 0x01	; 1
    2a3e:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <tickCount+0x1>
    2a42:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <tickCount+0x2>
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <tickCount+0x3>
    2a4c:	89 1f       	adc	r24, r25
    2a4e:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <tickCount+0x3>
    2a52:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <us_over_10+0x1>
    2a56:	9c 5f       	subi	r25, 0xFC	; 252
    2a58:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <us_over_10+0x1>
    2a5c:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <us_over_10>
    2a60:	80 51       	subi	r24, 0x10	; 16
    2a62:	97 42       	sbci	r25, 0x27	; 39
    2a64:	c0 f0       	brcs	.+48     	; 0x2a96 <end>
    2a66:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <us_over_10+0x1>
    2a6a:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <us_over_10>
    2a6e:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <msCounter>
    2a72:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <msCounter+0x1>
    2a76:	01 96       	adiw	r24, 0x01	; 1
    2a78:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <msCounter>
    2a7c:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <msCounter+0x1>
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <msCounter+0x2>
    2a86:	89 1f       	adc	r24, r25
    2a88:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <msCounter+0x2>
    2a8c:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <msCounter+0x3>
    2a90:	89 1f       	adc	r24, r25
    2a92:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <msCounter+0x3>

00002a96 <end>:
    2a96:	2f be       	out	0x3f, r2	; 63
    2a98:	9f 91       	pop	r25
    2a9a:	8f 91       	pop	r24
    2a9c:	2f 90       	pop	r2
    2a9e:	18 95       	reti

00002aa0 <_ZN13OrangutanTime17delayMillisecondsEj>:
    2aa0:	28 ee       	ldi	r18, 0xE8	; 232
    2aa2:	33 e0       	ldi	r19, 0x03	; 3
    2aa4:	01 97       	sbiw	r24, 0x01	; 1
    2aa6:	48 f0       	brcs	.+18     	; 0x2aba <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    2aa8:	f9 01       	movw	r30, r18
    2aaa:	6f 93       	push	r22
    2aac:	64 e0       	ldi	r22, 0x04	; 4
    2aae:	6a 95       	dec	r22
    2ab0:	f1 f7       	brne	.-4      	; 0x2aae <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    2ab2:	6f 91       	pop	r22
    2ab4:	31 97       	sbiw	r30, 0x01	; 1
    2ab6:	c9 f7       	brne	.-14     	; 0x2aaa <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    2ab8:	f5 cf       	rjmp	.-22     	; 0x2aa4 <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    2aba:	08 95       	ret

00002abc <delay_ms>:
    2abc:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <_ZN13OrangutanTime17delayMillisecondsEj>
    2ac0:	08 95       	ret

00002ac2 <_ZN13OrangutanTime5init2Ev>:
    2ac2:	e0 e7       	ldi	r30, 0x70	; 112
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	80 81       	ld	r24, Z
    2ac8:	8e 7f       	andi	r24, 0xFE	; 254
    2aca:	80 83       	st	Z, r24
    2acc:	a0 eb       	ldi	r26, 0xB0	; 176
    2ace:	b0 e0       	ldi	r27, 0x00	; 0
    2ad0:	8c 91       	ld	r24, X
    2ad2:	83 60       	ori	r24, 0x03	; 3
    2ad4:	8c 93       	st	X, r24
    2ad6:	a1 eb       	ldi	r26, 0xB1	; 177
    2ad8:	b0 e0       	ldi	r27, 0x00	; 0
    2ada:	8c 91       	ld	r24, X
    2adc:	80 7f       	andi	r24, 0xF0	; 240
    2ade:	8c 93       	st	X, r24
    2ae0:	8c 91       	ld	r24, X
    2ae2:	82 60       	ori	r24, 0x02	; 2
    2ae4:	8c 93       	st	X, r24
    2ae6:	b8 9a       	sbi	0x17, 0	; 23
    2ae8:	80 81       	ld	r24, Z
    2aea:	81 60       	ori	r24, 0x01	; 1
    2aec:	80 83       	st	Z, r24
    2aee:	78 94       	sei
    2af0:	08 95       	ret

00002af2 <_ZN13OrangutanTime4initEv>:
    2af2:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <_ZZN13OrangutanTime4initEvE11initialized>
    2af6:	81 11       	cpse	r24, r1
    2af8:	05 c0       	rjmp	.+10     	; 0x2b04 <_ZN13OrangutanTime4initEv+0x12>
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <_ZZN13OrangutanTime4initEvE11initialized>
    2b00:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <_ZN13OrangutanTime5init2Ev>
    2b04:	08 95       	ret

00002b06 <_ZN13OrangutanTime2msEv>:
    2b06:	0e 94 79 15 	call	0x2af2	; 0x2af2 <_ZN13OrangutanTime4initEv>
    2b0a:	e0 e7       	ldi	r30, 0x70	; 112
    2b0c:	f0 e0       	ldi	r31, 0x00	; 0
    2b0e:	80 81       	ld	r24, Z
    2b10:	8e 7f       	andi	r24, 0xFE	; 254
    2b12:	80 83       	st	Z, r24
    2b14:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <msCounter>
    2b18:	70 91 80 01 	lds	r23, 0x0180	; 0x800180 <msCounter+0x1>
    2b1c:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <msCounter+0x2>
    2b20:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <msCounter+0x3>
    2b24:	20 81       	ld	r18, Z
    2b26:	21 60       	ori	r18, 0x01	; 1
    2b28:	20 83       	st	Z, r18
    2b2a:	08 95       	ret

00002b2c <get_ms>:
    2b2c:	0e 94 83 15 	call	0x2b06	; 0x2b06 <_ZN13OrangutanTime2msEv>
    2b30:	08 95       	ret

00002b32 <_ZN13OrangutanTime5resetEv>:
    2b32:	0e 94 79 15 	call	0x2af2	; 0x2af2 <_ZN13OrangutanTime4initEv>
    2b36:	e0 e7       	ldi	r30, 0x70	; 112
    2b38:	f0 e0       	ldi	r31, 0x00	; 0
    2b3a:	80 81       	ld	r24, Z
    2b3c:	8e 7f       	andi	r24, 0xFE	; 254
    2b3e:	80 83       	st	Z, r24
    2b40:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <msCounter>
    2b44:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <msCounter+0x1>
    2b48:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <msCounter+0x2>
    2b4c:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <msCounter+0x3>
    2b50:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <us_over_10+0x1>
    2b54:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <us_over_10>
    2b58:	80 81       	ld	r24, Z
    2b5a:	81 60       	ori	r24, 0x01	; 1
    2b5c:	80 83       	st	Z, r24
    2b5e:	08 95       	ret

00002b60 <calibrate_line_sensors>:
    2b60:	68 2f       	mov	r22, r24
    2b62:	87 e8       	ldi	r24, 0x87	; 135
    2b64:	91 e0       	ldi	r25, 0x01	; 1
    2b66:	0e 94 98 19 	call	0x3330	; 0x3330 <_ZN16PololuQTRSensors9calibrateEh>
    2b6a:	08 95       	ret

00002b6c <read_line>:
    2b6c:	46 2f       	mov	r20, r22
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	bc 01       	movw	r22, r24
    2b72:	87 e8       	ldi	r24, 0x87	; 135
    2b74:	91 e0       	ldi	r25, 0x01	; 1
    2b76:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <_ZN16PololuQTRSensors8readLineEPjhh>
    2b7a:	08 95       	ret

00002b7c <_ZN9Pololu3pi4initEjh>:
    2b7c:	0f 93       	push	r16
    2b7e:	cf 93       	push	r28
    2b80:	df 93       	push	r29
    2b82:	00 d0       	rcall	.+0      	; 0x2b84 <_ZN9Pololu3pi4initEjh+0x8>
    2b84:	00 d0       	rcall	.+0      	; 0x2b86 <_ZN9Pololu3pi4initEjh+0xa>
    2b86:	1f 92       	push	r1
    2b88:	cd b7       	in	r28, 0x3d	; 61
    2b8a:	de b7       	in	r29, 0x3e	; 62
    2b8c:	9c 01       	movw	r18, r24
    2b8e:	85 e0       	ldi	r24, 0x05	; 5
    2b90:	ec e2       	ldi	r30, 0x2C	; 44
    2b92:	f1 e0       	ldi	r31, 0x01	; 1
    2b94:	de 01       	movw	r26, r28
    2b96:	11 96       	adiw	r26, 0x01	; 1
    2b98:	01 90       	ld	r0, Z+
    2b9a:	0d 92       	st	X+, r0
    2b9c:	8a 95       	dec	r24
    2b9e:	e1 f7       	brne	.-8      	; 0x2b98 <_ZN9Pololu3pi4initEjh+0x1c>
    2ba0:	66 23       	and	r22, r22
    2ba2:	11 f0       	breq	.+4      	; 0x2ba8 <_ZN9Pololu3pi4initEjh+0x2c>
    2ba4:	0f ef       	ldi	r16, 0xFF	; 255
    2ba6:	01 c0       	rjmp	.+2      	; 0x2baa <_ZN9Pololu3pi4initEjh+0x2e>
    2ba8:	03 e1       	ldi	r16, 0x13	; 19
    2baa:	45 e0       	ldi	r20, 0x05	; 5
    2bac:	be 01       	movw	r22, r28
    2bae:	6f 5f       	subi	r22, 0xFF	; 255
    2bb0:	7f 4f       	sbci	r23, 0xFF	; 255
    2bb2:	87 e8       	ldi	r24, 0x87	; 135
    2bb4:	91 e0       	ldi	r25, 0x01	; 1
    2bb6:	0e 94 90 16 	call	0x2d20	; 0x2d20 <_ZN18PololuQTRSensorsRC4initEPhhjh>
    2bba:	87 e8       	ldi	r24, 0x87	; 135
    2bbc:	91 e0       	ldi	r25, 0x01	; 1
    2bbe:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN16PololuQTRSensors11emittersOffEv>
    2bc2:	0e 94 99 15 	call	0x2b32	; 0x2b32 <_ZN13OrangutanTime5resetEv>
    2bc6:	0f 90       	pop	r0
    2bc8:	0f 90       	pop	r0
    2bca:	0f 90       	pop	r0
    2bcc:	0f 90       	pop	r0
    2bce:	0f 90       	pop	r0
    2bd0:	df 91       	pop	r29
    2bd2:	cf 91       	pop	r28
    2bd4:	0f 91       	pop	r16
    2bd6:	08 95       	ret

00002bd8 <pololu_3pi_init>:
    2bd8:	60 e0       	ldi	r22, 0x00	; 0
    2bda:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <_ZN9Pololu3pi4initEjh>
    2bde:	08 95       	ret

00002be0 <_GLOBAL__sub_D_pololu_3pi_init>:
    2be0:	87 e8       	ldi	r24, 0x87	; 135
    2be2:	91 e0       	ldi	r25, 0x01	; 1
    2be4:	0e 94 de 1a 	call	0x35bc	; 0x35bc <_ZN16PololuQTRSensorsD1Ev>
    2be8:	08 95       	ret

00002bea <delay_us>:
    2bea:	6f 93       	push	r22
    2bec:	64 e0       	ldi	r22, 0x04	; 4
    2bee:	6a 95       	dec	r22
    2bf0:	f1 f7       	brne	.-4      	; 0x2bee <delay_us+0x4>
    2bf2:	6f 91       	pop	r22
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	c9 f7       	brne	.-14     	; 0x2bea <delay_us>
    2bf8:	08 95       	ret

00002bfa <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    2bfa:	fc 01       	movw	r30, r24
    2bfc:	11 82       	std	Z+1, r1	; 0x01
    2bfe:	10 82       	st	Z, r1
    2c00:	13 82       	std	Z+3, r1	; 0x03
    2c02:	12 82       	std	Z+2, r1	; 0x02
    2c04:	15 82       	std	Z+5, r1	; 0x05
    2c06:	14 82       	std	Z+4, r1	; 0x04
    2c08:	16 82       	std	Z+6, r1	; 0x06
    2c0a:	68 30       	cpi	r22, 0x08	; 8
    2c0c:	68 f4       	brcc	.+26     	; 0x2c28 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    2c0e:	89 e2       	ldi	r24, 0x29	; 41
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	91 83       	std	Z+1, r25	; 0x01
    2c14:	80 83       	st	Z, r24
    2c16:	8b e2       	ldi	r24, 0x2B	; 43
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	93 83       	std	Z+3, r25	; 0x03
    2c1c:	82 83       	std	Z+2, r24	; 0x02
    2c1e:	8a e2       	ldi	r24, 0x2A	; 42
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	95 83       	std	Z+5, r25	; 0x05
    2c24:	84 83       	std	Z+4, r24	; 0x04
    2c26:	1f c0       	rjmp	.+62     	; 0x2c66 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    2c28:	6e 30       	cpi	r22, 0x0E	; 14
    2c2a:	70 f4       	brcc	.+28     	; 0x2c48 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    2c2c:	83 e2       	ldi	r24, 0x23	; 35
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	91 83       	std	Z+1, r25	; 0x01
    2c32:	80 83       	st	Z, r24
    2c34:	85 e2       	ldi	r24, 0x25	; 37
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	93 83       	std	Z+3, r25	; 0x03
    2c3a:	82 83       	std	Z+2, r24	; 0x02
    2c3c:	84 e2       	ldi	r24, 0x24	; 36
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	95 83       	std	Z+5, r25	; 0x05
    2c42:	84 83       	std	Z+4, r24	; 0x04
    2c44:	68 50       	subi	r22, 0x08	; 8
    2c46:	0f c0       	rjmp	.+30     	; 0x2c66 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    2c48:	65 31       	cpi	r22, 0x15	; 21
    2c4a:	98 f4       	brcc	.+38     	; 0x2c72 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    2c4c:	86 e2       	ldi	r24, 0x26	; 38
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	91 83       	std	Z+1, r25	; 0x01
    2c52:	80 83       	st	Z, r24
    2c54:	88 e2       	ldi	r24, 0x28	; 40
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	93 83       	std	Z+3, r25	; 0x03
    2c5a:	82 83       	std	Z+2, r24	; 0x02
    2c5c:	87 e2       	ldi	r24, 0x27	; 39
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	95 83       	std	Z+5, r25	; 0x05
    2c62:	84 83       	std	Z+4, r24	; 0x04
    2c64:	6e 50       	subi	r22, 0x0E	; 14
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	01 c0       	rjmp	.+2      	; 0x2c6c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    2c6a:	88 0f       	add	r24, r24
    2c6c:	6a 95       	dec	r22
    2c6e:	ea f7       	brpl	.-6      	; 0x2c6a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    2c70:	86 83       	std	Z+6, r24	; 0x06
    2c72:	08 95       	ret

00002c74 <_ZN16PololuQTRSensors4initEhhh>:
    2c74:	a7 e0       	ldi	r26, 0x07	; 7
    2c76:	b0 e0       	ldi	r27, 0x00	; 0
    2c78:	e0 e4       	ldi	r30, 0x40	; 64
    2c7a:	f6 e1       	ldi	r31, 0x16	; 22
    2c7c:	0c 94 93 1b 	jmp	0x3726	; 0x3726 <__prologue_saves__+0x1c>
    2c80:	8c 01       	movw	r16, r24
    2c82:	fc 01       	movw	r30, r24
    2c84:	11 82       	std	Z+1, r1	; 0x01
    2c86:	10 82       	st	Z, r1
    2c88:	13 82       	std	Z+3, r1	; 0x03
    2c8a:	12 82       	std	Z+2, r1	; 0x02
    2c8c:	15 82       	std	Z+5, r1	; 0x05
    2c8e:	14 82       	std	Z+4, r1	; 0x04
    2c90:	17 82       	std	Z+7, r1	; 0x07
    2c92:	16 82       	std	Z+6, r1	; 0x06
    2c94:	61 31       	cpi	r22, 0x11	; 17
    2c96:	18 f0       	brcs	.+6      	; 0x2c9e <_ZN16PololuQTRSensors4initEhhh+0x2a>
    2c98:	80 e1       	ldi	r24, 0x10	; 16
    2c9a:	80 87       	std	Z+8, r24	; 0x08
    2c9c:	02 c0       	rjmp	.+4      	; 0x2ca2 <_ZN16PololuQTRSensors4initEhhh+0x2e>
    2c9e:	fc 01       	movw	r30, r24
    2ca0:	60 87       	std	Z+8, r22	; 0x08
    2ca2:	f8 01       	movw	r30, r16
    2ca4:	20 8b       	std	Z+16, r18	; 0x10
    2ca6:	64 2f       	mov	r22, r20
    2ca8:	ce 01       	movw	r24, r28
    2caa:	01 96       	adiw	r24, 0x01	; 1
    2cac:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    2cb0:	8f 81       	ldd	r24, Y+7	; 0x07
    2cb2:	f8 01       	movw	r30, r16
    2cb4:	81 87       	std	Z+9, r24	; 0x09
    2cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cba:	93 87       	std	Z+11, r25	; 0x0b
    2cbc:	82 87       	std	Z+10, r24	; 0x0a
    2cbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc2:	95 87       	std	Z+13, r25	; 0x0d
    2cc4:	84 87       	std	Z+12, r24	; 0x0c
    2cc6:	27 96       	adiw	r28, 0x07	; 7
    2cc8:	e4 e0       	ldi	r30, 0x04	; 4
    2cca:	0c 94 af 1b 	jmp	0x375e	; 0x375e <__epilogue_restores__+0x1c>

00002cce <_ZN16PololuQTRSensors11emittersOffEv>:
    2cce:	fc 01       	movw	r30, r24
    2cd0:	a4 85       	ldd	r26, Z+12	; 0x0c
    2cd2:	b5 85       	ldd	r27, Z+13	; 0x0d
    2cd4:	10 97       	sbiw	r26, 0x00	; 0
    2cd6:	79 f0       	breq	.+30     	; 0x2cf6 <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    2cd8:	8c 91       	ld	r24, X
    2cda:	91 85       	ldd	r25, Z+9	; 0x09
    2cdc:	89 2b       	or	r24, r25
    2cde:	8c 93       	st	X, r24
    2ce0:	a2 85       	ldd	r26, Z+10	; 0x0a
    2ce2:	b3 85       	ldd	r27, Z+11	; 0x0b
    2ce4:	9c 91       	ld	r25, X
    2ce6:	81 85       	ldd	r24, Z+9	; 0x09
    2ce8:	80 95       	com	r24
    2cea:	89 23       	and	r24, r25
    2cec:	8c 93       	st	X, r24
    2cee:	88 ec       	ldi	r24, 0xC8	; 200
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	0e 94 f5 15 	call	0x2bea	; 0x2bea <delay_us>
    2cf6:	08 95       	ret

00002cf8 <_ZN16PololuQTRSensors10emittersOnEv>:
    2cf8:	fc 01       	movw	r30, r24
    2cfa:	a4 85       	ldd	r26, Z+12	; 0x0c
    2cfc:	b5 85       	ldd	r27, Z+13	; 0x0d
    2cfe:	10 97       	sbiw	r26, 0x00	; 0
    2d00:	71 f0       	breq	.+28     	; 0x2d1e <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    2d02:	8c 91       	ld	r24, X
    2d04:	91 85       	ldd	r25, Z+9	; 0x09
    2d06:	89 2b       	or	r24, r25
    2d08:	8c 93       	st	X, r24
    2d0a:	a2 85       	ldd	r26, Z+10	; 0x0a
    2d0c:	b3 85       	ldd	r27, Z+11	; 0x0b
    2d0e:	8c 91       	ld	r24, X
    2d10:	91 85       	ldd	r25, Z+9	; 0x09
    2d12:	89 2b       	or	r24, r25
    2d14:	8c 93       	st	X, r24
    2d16:	88 ec       	ldi	r24, 0xC8	; 200
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	0e 94 f5 15 	call	0x2bea	; 0x2bea <delay_us>
    2d1e:	08 95       	ret

00002d20 <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    2d20:	a7 e0       	ldi	r26, 0x07	; 7
    2d22:	b0 e0       	ldi	r27, 0x00	; 0
    2d24:	e6 e9       	ldi	r30, 0x96	; 150
    2d26:	f6 e1       	ldi	r31, 0x16	; 22
    2d28:	0c 94 88 1b 	jmp	0x3710	; 0x3710 <__prologue_saves__+0x6>
    2d2c:	7c 01       	movw	r14, r24
    2d2e:	4b 01       	movw	r8, r22
    2d30:	64 2f       	mov	r22, r20
    2d32:	39 01       	movw	r6, r18
    2d34:	40 2f       	mov	r20, r16
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <_ZN16PololuQTRSensors4initEhhh>
    2d3c:	87 01       	movw	r16, r14
    2d3e:	0f 5b       	subi	r16, 0xBF	; 191
    2d40:	1f 4f       	sbci	r17, 0xFF	; 255
    2d42:	f8 01       	movw	r30, r16
    2d44:	10 82       	st	Z, r1
    2d46:	67 01       	movw	r12, r14
    2d48:	f2 e4       	ldi	r31, 0x42	; 66
    2d4a:	cf 0e       	add	r12, r31
    2d4c:	d1 1c       	adc	r13, r1
    2d4e:	f6 01       	movw	r30, r12
    2d50:	10 82       	st	Z, r1
    2d52:	57 01       	movw	r10, r14
    2d54:	f3 e4       	ldi	r31, 0x43	; 67
    2d56:	af 0e       	add	r10, r31
    2d58:	b1 1c       	adc	r11, r1
    2d5a:	f5 01       	movw	r30, r10
    2d5c:	10 82       	st	Z, r1
    2d5e:	f7 01       	movw	r30, r14
    2d60:	77 86       	std	Z+15, r7	; 0x0f
    2d62:	66 86       	std	Z+14, r6	; 0x0e
    2d64:	51 2c       	mov	r5, r1
    2d66:	f7 01       	movw	r30, r14
    2d68:	80 85       	ldd	r24, Z+8	; 0x08
    2d6a:	58 16       	cp	r5, r24
    2d6c:	50 f5       	brcc	.+84     	; 0x2dc2 <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    2d6e:	65 2c       	mov	r6, r5
    2d70:	71 2c       	mov	r7, r1
    2d72:	f4 01       	movw	r30, r8
    2d74:	e6 0d       	add	r30, r6
    2d76:	f7 1d       	adc	r31, r7
    2d78:	60 81       	ld	r22, Z
    2d7a:	ce 01       	movw	r24, r28
    2d7c:	01 96       	adiw	r24, 0x01	; 1
    2d7e:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    2d82:	2f 81       	ldd	r18, Y+7	; 0x07
    2d84:	f7 01       	movw	r30, r14
    2d86:	e6 0d       	add	r30, r6
    2d88:	f7 1d       	adc	r31, r7
    2d8a:	21 8b       	std	Z+17, r18	; 0x11
    2d8c:	89 81       	ldd	r24, Y+1	; 0x01
    2d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d90:	f3 01       	movw	r30, r6
    2d92:	ee 0f       	add	r30, r30
    2d94:	ff 1f       	adc	r31, r31
    2d96:	ee 0d       	add	r30, r14
    2d98:	ff 1d       	adc	r31, r15
    2d9a:	92 a3       	std	Z+34, r25	; 0x22
    2d9c:	81 a3       	std	Z+33, r24	; 0x21
    2d9e:	83 32       	cpi	r24, 0x23	; 35
    2da0:	91 05       	cpc	r25, r1
    2da2:	11 f4       	brne	.+4      	; 0x2da8 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    2da4:	f8 01       	movw	r30, r16
    2da6:	08 c0       	rjmp	.+16     	; 0x2db8 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    2da8:	86 32       	cpi	r24, 0x26	; 38
    2daa:	91 05       	cpc	r25, r1
    2dac:	11 f4       	brne	.+4      	; 0x2db2 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    2dae:	f6 01       	movw	r30, r12
    2db0:	03 c0       	rjmp	.+6      	; 0x2db8 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    2db2:	89 97       	sbiw	r24, 0x29	; 41
    2db4:	21 f4       	brne	.+8      	; 0x2dbe <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    2db6:	f5 01       	movw	r30, r10
    2db8:	80 81       	ld	r24, Z
    2dba:	82 2b       	or	r24, r18
    2dbc:	80 83       	st	Z, r24
    2dbe:	53 94       	inc	r5
    2dc0:	d2 cf       	rjmp	.-92     	; 0x2d66 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    2dc2:	27 96       	adiw	r28, 0x07	; 7
    2dc4:	ef e0       	ldi	r30, 0x0F	; 15
    2dc6:	0c 94 a4 1b 	jmp	0x3748	; 0x3748 <__epilogue_restores__+0x6>

00002dca <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    2dca:	a0 e0       	ldi	r26, 0x00	; 0
    2dcc:	b0 e0       	ldi	r27, 0x00	; 0
    2dce:	eb ee       	ldi	r30, 0xEB	; 235
    2dd0:	f6 e1       	ldi	r31, 0x16	; 22
    2dd2:	0c 94 8a 1b 	jmp	0x3714	; 0x3714 <__prologue_saves__+0xa>
    2dd6:	ec 01       	movw	r28, r24
    2dd8:	5b 01       	movw	r10, r22
    2dda:	6c 01       	movw	r12, r24
    2ddc:	81 e4       	ldi	r24, 0x41	; 65
    2dde:	c8 0e       	add	r12, r24
    2de0:	d1 1c       	adc	r13, r1
    2de2:	f6 01       	movw	r30, r12
    2de4:	80 80       	ld	r8, Z
    2de6:	7e 01       	movw	r14, r28
    2de8:	f2 e4       	ldi	r31, 0x42	; 66
    2dea:	ef 0e       	add	r14, r31
    2dec:	f1 1c       	adc	r15, r1
    2dee:	f7 01       	movw	r30, r14
    2df0:	70 80       	ld	r7, Z
    2df2:	8e 01       	movw	r16, r28
    2df4:	0d 5b       	subi	r16, 0xBD	; 189
    2df6:	1f 4f       	sbci	r17, 0xFF	; 255
    2df8:	f8 01       	movw	r30, r16
    2dfa:	90 80       	ld	r9, Z
    2dfc:	80 e0       	ldi	r24, 0x00	; 0
    2dfe:	98 85       	ldd	r25, Y+8	; 0x08
    2e00:	89 17       	cp	r24, r25
    2e02:	48 f4       	brcc	.+18     	; 0x2e16 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    2e04:	f5 01       	movw	r30, r10
    2e06:	e8 0f       	add	r30, r24
    2e08:	f1 1d       	adc	r31, r1
    2e0a:	e8 0f       	add	r30, r24
    2e0c:	f1 1d       	adc	r31, r1
    2e0e:	11 82       	std	Z+1, r1	; 0x01
    2e10:	10 82       	st	Z, r1
    2e12:	8f 5f       	subi	r24, 0xFF	; 255
    2e14:	f4 cf       	rjmp	.-24     	; 0x2dfe <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    2e16:	84 b1       	in	r24, 0x04	; 4
    2e18:	f6 01       	movw	r30, r12
    2e1a:	90 81       	ld	r25, Z
    2e1c:	89 2b       	or	r24, r25
    2e1e:	84 b9       	out	0x04, r24	; 4
    2e20:	87 b1       	in	r24, 0x07	; 7
    2e22:	f7 01       	movw	r30, r14
    2e24:	90 81       	ld	r25, Z
    2e26:	89 2b       	or	r24, r25
    2e28:	87 b9       	out	0x07, r24	; 7
    2e2a:	8a b1       	in	r24, 0x0a	; 10
    2e2c:	f8 01       	movw	r30, r16
    2e2e:	90 81       	ld	r25, Z
    2e30:	89 2b       	or	r24, r25
    2e32:	8a b9       	out	0x0a, r24	; 10
    2e34:	85 b1       	in	r24, 0x05	; 5
    2e36:	f6 01       	movw	r30, r12
    2e38:	90 81       	ld	r25, Z
    2e3a:	89 2b       	or	r24, r25
    2e3c:	85 b9       	out	0x05, r24	; 5
    2e3e:	88 b1       	in	r24, 0x08	; 8
    2e40:	f7 01       	movw	r30, r14
    2e42:	90 81       	ld	r25, Z
    2e44:	89 2b       	or	r24, r25
    2e46:	88 b9       	out	0x08, r24	; 8
    2e48:	8b b1       	in	r24, 0x0b	; 11
    2e4a:	f8 01       	movw	r30, r16
    2e4c:	90 81       	ld	r25, Z
    2e4e:	89 2b       	or	r24, r25
    2e50:	8b b9       	out	0x0b, r24	; 11
    2e52:	8a e0       	ldi	r24, 0x0A	; 10
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	0e 94 f5 15 	call	0x2bea	; 0x2bea <delay_us>
    2e5a:	94 b1       	in	r25, 0x04	; 4
    2e5c:	f6 01       	movw	r30, r12
    2e5e:	80 81       	ld	r24, Z
    2e60:	80 95       	com	r24
    2e62:	89 23       	and	r24, r25
    2e64:	84 b9       	out	0x04, r24	; 4
    2e66:	97 b1       	in	r25, 0x07	; 7
    2e68:	f7 01       	movw	r30, r14
    2e6a:	80 81       	ld	r24, Z
    2e6c:	80 95       	com	r24
    2e6e:	89 23       	and	r24, r25
    2e70:	87 b9       	out	0x07, r24	; 7
    2e72:	9a b1       	in	r25, 0x0a	; 10
    2e74:	f8 01       	movw	r30, r16
    2e76:	80 81       	ld	r24, Z
    2e78:	80 95       	com	r24
    2e7a:	89 23       	and	r24, r25
    2e7c:	8a b9       	out	0x0a, r24	; 10
    2e7e:	95 b1       	in	r25, 0x05	; 5
    2e80:	f6 01       	movw	r30, r12
    2e82:	80 81       	ld	r24, Z
    2e84:	80 95       	com	r24
    2e86:	89 23       	and	r24, r25
    2e88:	85 b9       	out	0x05, r24	; 5
    2e8a:	98 b1       	in	r25, 0x08	; 8
    2e8c:	f7 01       	movw	r30, r14
    2e8e:	80 81       	ld	r24, Z
    2e90:	80 95       	com	r24
    2e92:	89 23       	and	r24, r25
    2e94:	88 b9       	out	0x08, r24	; 8
    2e96:	9b b1       	in	r25, 0x0b	; 11
    2e98:	f8 01       	movw	r30, r16
    2e9a:	80 81       	ld	r24, Z
    2e9c:	80 95       	com	r24
    2e9e:	89 23       	and	r24, r25
    2ea0:	8b b9       	out	0x0b, r24	; 11
    2ea2:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2ea6:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2eaa:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2eae:	83 60       	ori	r24, 0x03	; 3
    2eb0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2eb4:	82 e0       	ldi	r24, 0x02	; 2
    2eb6:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2eba:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    2ebe:	80 e0       	ldi	r24, 0x00	; 0
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	2e 85       	ldd	r18, Y+14	; 0x0e
    2ec4:	3f 85       	ldd	r19, Y+15	; 0x0f
    2ec6:	82 17       	cp	r24, r18
    2ec8:	93 07       	cpc	r25, r19
    2eca:	20 f5       	brcc	.+72     	; 0x2f14 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    2ecc:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    2ed0:	2c 2d       	mov	r18, r12
    2ed2:	24 1b       	sub	r18, r20
    2ed4:	82 0f       	add	r24, r18
    2ed6:	91 1d       	adc	r25, r1
    2ed8:	03 b1       	in	r16, 0x03	; 3
    2eda:	08 11       	cpse	r16, r8
    2edc:	32 c0       	rjmp	.+100    	; 0x2f42 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2ede:	f6 b0       	in	r15, 0x06	; 6
    2ee0:	f7 10       	cpse	r15, r7
    2ee2:	2f c0       	rjmp	.+94     	; 0x2f42 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2ee4:	29 b1       	in	r18, 0x09	; 9
    2ee6:	29 11       	cpse	r18, r9
    2ee8:	2c c0       	rjmp	.+88     	; 0x2f42 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2eea:	10 c0       	rjmp	.+32     	; 0x2f0c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    2eec:	21 2f       	mov	r18, r17
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	a9 01       	movw	r20, r18
    2ef2:	44 0f       	add	r20, r20
    2ef4:	55 1f       	adc	r21, r21
    2ef6:	f5 01       	movw	r30, r10
    2ef8:	e4 0f       	add	r30, r20
    2efa:	f5 1f       	adc	r31, r21
    2efc:	60 81       	ld	r22, Z
    2efe:	71 81       	ldd	r23, Z+1	; 0x01
    2f00:	67 2b       	or	r22, r23
    2f02:	21 f1       	breq	.+72     	; 0x2f4c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    2f04:	1f 5f       	subi	r17, 0xFF	; 255
    2f06:	28 85       	ldd	r18, Y+8	; 0x08
    2f08:	12 17       	cp	r17, r18
    2f0a:	80 f3       	brcs	.-32     	; 0x2eec <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    2f0c:	7f 2c       	mov	r7, r15
    2f0e:	80 2e       	mov	r8, r16
    2f10:	4c 2d       	mov	r20, r12
    2f12:	d7 cf       	rjmp	.-82     	; 0x2ec2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    2f14:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2f18:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2f1c:	20 e0       	ldi	r18, 0x00	; 0
    2f1e:	88 85       	ldd	r24, Y+8	; 0x08
    2f20:	28 17       	cp	r18, r24
    2f22:	30 f5       	brcc	.+76     	; 0x2f70 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    2f24:	f5 01       	movw	r30, r10
    2f26:	e2 0f       	add	r30, r18
    2f28:	f1 1d       	adc	r31, r1
    2f2a:	e2 0f       	add	r30, r18
    2f2c:	f1 1d       	adc	r31, r1
    2f2e:	80 81       	ld	r24, Z
    2f30:	91 81       	ldd	r25, Z+1	; 0x01
    2f32:	89 2b       	or	r24, r25
    2f34:	21 f4       	brne	.+8      	; 0x2f3e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    2f36:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f38:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f3a:	91 83       	std	Z+1, r25	; 0x01
    2f3c:	80 83       	st	Z, r24
    2f3e:	2f 5f       	subi	r18, 0xFF	; 255
    2f40:	ee cf       	rjmp	.-36     	; 0x2f1e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    2f42:	03 b1       	in	r16, 0x03	; 3
    2f44:	f6 b0       	in	r15, 0x06	; 6
    2f46:	99 b0       	in	r9, 0x09	; 9
    2f48:	10 e0       	ldi	r17, 0x00	; 0
    2f4a:	dd cf       	rjmp	.-70     	; 0x2f06 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    2f4c:	de 01       	movw	r26, r28
    2f4e:	a4 0f       	add	r26, r20
    2f50:	b5 1f       	adc	r27, r21
    2f52:	91 96       	adiw	r26, 0x21	; 33
    2f54:	0d 90       	ld	r0, X+
    2f56:	bc 91       	ld	r27, X
    2f58:	a0 2d       	mov	r26, r0
    2f5a:	4c 91       	ld	r20, X
    2f5c:	de 01       	movw	r26, r28
    2f5e:	a2 0f       	add	r26, r18
    2f60:	b3 1f       	adc	r27, r19
    2f62:	51 96       	adiw	r26, 0x11	; 17
    2f64:	2c 91       	ld	r18, X
    2f66:	42 23       	and	r20, r18
    2f68:	69 f6       	brne	.-102    	; 0x2f04 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    2f6a:	91 83       	std	Z+1, r25	; 0x01
    2f6c:	80 83       	st	Z, r24
    2f6e:	ca cf       	rjmp	.-108    	; 0x2f04 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    2f70:	cd b7       	in	r28, 0x3d	; 61
    2f72:	de b7       	in	r29, 0x3e	; 62
    2f74:	ed e0       	ldi	r30, 0x0D	; 13
    2f76:	0c 94 a6 1b 	jmp	0x374c	; 0x374c <__epilogue_restores__+0xa>

00002f7a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    2f7a:	ef 92       	push	r14
    2f7c:	ff 92       	push	r15
    2f7e:	0f 93       	push	r16
    2f80:	1f 93       	push	r17
    2f82:	cf 93       	push	r28
    2f84:	df 93       	push	r29
    2f86:	fc 01       	movw	r30, r24
    2f88:	9b 01       	movw	r18, r22
    2f8a:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2f8e:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2f92:	47 b1       	in	r20, 0x07	; 7
    2f94:	18 b1       	in	r17, 0x08	; 8
    2f96:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2f9a:	86 fd       	sbrc	r24, 6
    2f9c:	fc cf       	rjmp	.-8      	; 0x2f96 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    2f9e:	80 e0       	ldi	r24, 0x00	; 0
    2fa0:	90 85       	ldd	r25, Z+8	; 0x08
    2fa2:	89 17       	cp	r24, r25
    2fa4:	48 f4       	brcc	.+18     	; 0x2fb8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    2fa6:	d9 01       	movw	r26, r18
    2fa8:	a8 0f       	add	r26, r24
    2faa:	b1 1d       	adc	r27, r1
    2fac:	a8 0f       	add	r26, r24
    2fae:	b1 1d       	adc	r27, r1
    2fb0:	1d 92       	st	X+, r1
    2fb2:	1c 92       	st	X, r1
    2fb4:	8f 5f       	subi	r24, 0xFF	; 255
    2fb6:	f4 cf       	rjmp	.-24     	; 0x2fa0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    2fb8:	97 b1       	in	r25, 0x07	; 7
    2fba:	82 a1       	ldd	r24, Z+34	; 0x22
    2fbc:	80 95       	com	r24
    2fbe:	89 23       	and	r24, r25
    2fc0:	87 b9       	out	0x07, r24	; 7
    2fc2:	98 b1       	in	r25, 0x08	; 8
    2fc4:	82 a1       	ldd	r24, Z+34	; 0x22
    2fc6:	80 95       	com	r24
    2fc8:	89 23       	and	r24, r25
    2fca:	88 b9       	out	0x08, r24	; 8
    2fcc:	87 e8       	ldi	r24, 0x87	; 135
    2fce:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2fd2:	e1 2c       	mov	r14, r1
    2fd4:	81 a1       	ldd	r24, Z+33	; 0x21
    2fd6:	e8 16       	cp	r14, r24
    2fd8:	10 f0       	brcs	.+4      	; 0x2fde <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    2fda:	e1 2c       	mov	r14, r1
    2fdc:	29 c0       	rjmp	.+82     	; 0x3030 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    2fde:	50 e0       	ldi	r21, 0x00	; 0
    2fe0:	80 85       	ldd	r24, Z+8	; 0x08
    2fe2:	58 17       	cp	r21, r24
    2fe4:	18 f5       	brcc	.+70     	; 0x302c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    2fe6:	a5 2f       	mov	r26, r21
    2fe8:	b0 e0       	ldi	r27, 0x00	; 0
    2fea:	ef 01       	movw	r28, r30
    2fec:	ca 0f       	add	r28, r26
    2fee:	db 1f       	adc	r29, r27
    2ff0:	89 89       	ldd	r24, Y+17	; 0x11
    2ff2:	80 64       	ori	r24, 0x40	; 64
    2ff4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2ff8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2ffc:	80 64       	ori	r24, 0x40	; 64
    2ffe:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3002:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3006:	86 fd       	sbrc	r24, 6
    3008:	fc cf       	rjmp	.-8      	; 0x3002 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    300a:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    300e:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    3012:	aa 0f       	add	r26, r26
    3014:	bb 1f       	adc	r27, r27
    3016:	a2 0f       	add	r26, r18
    3018:	b3 1f       	adc	r27, r19
    301a:	8d 91       	ld	r24, X+
    301c:	9c 91       	ld	r25, X
    301e:	11 97       	sbiw	r26, 0x01	; 1
    3020:	86 0f       	add	r24, r22
    3022:	97 1f       	adc	r25, r23
    3024:	8d 93       	st	X+, r24
    3026:	9c 93       	st	X, r25
    3028:	5f 5f       	subi	r21, 0xFF	; 255
    302a:	da cf       	rjmp	.-76     	; 0x2fe0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    302c:	e3 94       	inc	r14
    302e:	d2 cf       	rjmp	.-92     	; 0x2fd4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    3030:	80 85       	ldd	r24, Z+8	; 0x08
    3032:	e8 16       	cp	r14, r24
    3034:	a0 f4       	brcc	.+40     	; 0x305e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    3036:	e9 01       	movw	r28, r18
    3038:	ce 0d       	add	r28, r14
    303a:	d1 1d       	adc	r29, r1
    303c:	ce 0d       	add	r28, r14
    303e:	d1 1d       	adc	r29, r1
    3040:	61 a1       	ldd	r22, Z+33	; 0x21
    3042:	70 e0       	ldi	r23, 0x00	; 0
    3044:	cb 01       	movw	r24, r22
    3046:	95 95       	asr	r25
    3048:	87 95       	ror	r24
    304a:	a8 81       	ld	r26, Y
    304c:	b9 81       	ldd	r27, Y+1	; 0x01
    304e:	8a 0f       	add	r24, r26
    3050:	9b 1f       	adc	r25, r27
    3052:	0e 94 08 1b 	call	0x3610	; 0x3610 <__udivmodhi4>
    3056:	79 83       	std	Y+1, r23	; 0x01
    3058:	68 83       	st	Y, r22
    305a:	e3 94       	inc	r14
    305c:	e9 cf       	rjmp	.-46     	; 0x3030 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    305e:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    3062:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3066:	18 b9       	out	0x08, r17	; 8
    3068:	47 b9       	out	0x07, r20	; 7
    306a:	cd b7       	in	r28, 0x3d	; 61
    306c:	de b7       	in	r29, 0x3e	; 62
    306e:	e6 e0       	ldi	r30, 0x06	; 6
    3070:	0c 94 ad 1b 	jmp	0x375a	; 0x375a <__epilogue_restores__+0x18>

00003074 <_ZN16PololuQTRSensors4readEPjh>:
    3074:	a0 e2       	ldi	r26, 0x20	; 32
    3076:	b0 e0       	ldi	r27, 0x00	; 0
    3078:	e0 e4       	ldi	r30, 0x40	; 64
    307a:	f8 e1       	ldi	r31, 0x18	; 24
    307c:	0c 94 90 1b 	jmp	0x3720	; 0x3720 <__prologue_saves__+0x16>
    3080:	8c 01       	movw	r16, r24
    3082:	7b 01       	movw	r14, r22
    3084:	d4 2e       	mov	r13, r20
    3086:	8f ef       	ldi	r24, 0xFF	; 255
    3088:	84 0f       	add	r24, r20
    308a:	82 30       	cpi	r24, 0x02	; 2
    308c:	18 f4       	brcc	.+6      	; 0x3094 <_ZN16PololuQTRSensors4readEPjh+0x20>
    308e:	c8 01       	movw	r24, r16
    3090:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <_ZN16PololuQTRSensors10emittersOnEv>
    3094:	d8 01       	movw	r26, r16
    3096:	50 96       	adiw	r26, 0x10	; 16
    3098:	8c 91       	ld	r24, X
    309a:	b7 01       	movw	r22, r14
    309c:	81 11       	cpse	r24, r1
    309e:	10 c0       	rjmp	.+32     	; 0x30c0 <_ZN16PololuQTRSensors4readEPjh+0x4c>
    30a0:	c8 01       	movw	r24, r16
    30a2:	0e 94 e5 16 	call	0x2dca	; 0x2dca <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    30a6:	c8 01       	movw	r24, r16
    30a8:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN16PololuQTRSensors11emittersOffEv>
    30ac:	b2 e0       	ldi	r27, 0x02	; 2
    30ae:	db 12       	cpse	r13, r27
    30b0:	3a c0       	rjmp	.+116    	; 0x3126 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    30b2:	be 01       	movw	r22, r28
    30b4:	6f 5f       	subi	r22, 0xFF	; 255
    30b6:	7f 4f       	sbci	r23, 0xFF	; 255
    30b8:	c8 01       	movw	r24, r16
    30ba:	0e 94 e5 16 	call	0x2dca	; 0x2dca <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    30be:	0f c0       	rjmp	.+30     	; 0x30de <_ZN16PololuQTRSensors4readEPjh+0x6a>
    30c0:	c8 01       	movw	r24, r16
    30c2:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    30c6:	c8 01       	movw	r24, r16
    30c8:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN16PololuQTRSensors11emittersOffEv>
    30cc:	e2 e0       	ldi	r30, 0x02	; 2
    30ce:	de 12       	cpse	r13, r30
    30d0:	2a c0       	rjmp	.+84     	; 0x3126 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    30d2:	be 01       	movw	r22, r28
    30d4:	6f 5f       	subi	r22, 0xFF	; 255
    30d6:	7f 4f       	sbci	r23, 0xFF	; 255
    30d8:	c8 01       	movw	r24, r16
    30da:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    30de:	40 e0       	ldi	r20, 0x00	; 0
    30e0:	f8 01       	movw	r30, r16
    30e2:	80 85       	ldd	r24, Z+8	; 0x08
    30e4:	48 17       	cp	r20, r24
    30e6:	f8 f4       	brcc	.+62     	; 0x3126 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    30e8:	84 2f       	mov	r24, r20
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	88 0f       	add	r24, r24
    30ee:	99 1f       	adc	r25, r25
    30f0:	f7 01       	movw	r30, r14
    30f2:	e8 0f       	add	r30, r24
    30f4:	f9 1f       	adc	r31, r25
    30f6:	21 e0       	ldi	r18, 0x01	; 1
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	2c 0f       	add	r18, r28
    30fc:	3d 1f       	adc	r19, r29
    30fe:	82 0f       	add	r24, r18
    3100:	93 1f       	adc	r25, r19
    3102:	d8 01       	movw	r26, r16
    3104:	1e 96       	adiw	r26, 0x0e	; 14
    3106:	2d 91       	ld	r18, X+
    3108:	3c 91       	ld	r19, X
    310a:	1f 97       	sbiw	r26, 0x0f	; 15
    310c:	dc 01       	movw	r26, r24
    310e:	8d 91       	ld	r24, X+
    3110:	9c 91       	ld	r25, X
    3112:	28 1b       	sub	r18, r24
    3114:	39 0b       	sbc	r19, r25
    3116:	80 81       	ld	r24, Z
    3118:	91 81       	ldd	r25, Z+1	; 0x01
    311a:	82 0f       	add	r24, r18
    311c:	93 1f       	adc	r25, r19
    311e:	91 83       	std	Z+1, r25	; 0x01
    3120:	80 83       	st	Z, r24
    3122:	4f 5f       	subi	r20, 0xFF	; 255
    3124:	dd cf       	rjmp	.-70     	; 0x30e0 <_ZN16PololuQTRSensors4readEPjh+0x6c>
    3126:	a0 96       	adiw	r28, 0x20	; 32
    3128:	e7 e0       	ldi	r30, 0x07	; 7
    312a:	0c 94 ac 1b 	jmp	0x3758	; 0x3758 <__epilogue_restores__+0x16>

0000312e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    312e:	2f 92       	push	r2
    3130:	3f 92       	push	r3
    3132:	5f 92       	push	r5
    3134:	6f 92       	push	r6
    3136:	7f 92       	push	r7
    3138:	8f 92       	push	r8
    313a:	9f 92       	push	r9
    313c:	af 92       	push	r10
    313e:	bf 92       	push	r11
    3140:	cf 92       	push	r12
    3142:	df 92       	push	r13
    3144:	ef 92       	push	r14
    3146:	ff 92       	push	r15
    3148:	0f 93       	push	r16
    314a:	1f 93       	push	r17
    314c:	cf 93       	push	r28
    314e:	df 93       	push	r29
    3150:	cd b7       	in	r28, 0x3d	; 61
    3152:	de b7       	in	r29, 0x3e	; 62
    3154:	c0 56       	subi	r28, 0x60	; 96
    3156:	d1 09       	sbc	r29, r1
    3158:	0f b6       	in	r0, 0x3f	; 63
    315a:	f8 94       	cli
    315c:	de bf       	out	0x3e, r29	; 62
    315e:	0f be       	out	0x3f, r0	; 63
    3160:	cd bf       	out	0x3d, r28	; 61
    3162:	8c 01       	movw	r16, r24
    3164:	4b 01       	movw	r8, r22
    3166:	5a 01       	movw	r10, r20
    3168:	52 2e       	mov	r5, r18
    316a:	da 01       	movw	r26, r20
    316c:	8d 91       	ld	r24, X+
    316e:	9c 91       	ld	r25, X
    3170:	89 2b       	or	r24, r25
    3172:	31 f0       	breq	.+12     	; 0x3180 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x52>
    3174:	f4 01       	movw	r30, r8
    3176:	80 81       	ld	r24, Z
    3178:	91 81       	ldd	r25, Z+1	; 0x01
    317a:	89 2b       	or	r24, r25
    317c:	f1 f4       	brne	.+60     	; 0x31ba <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    317e:	24 c0       	rjmp	.+72     	; 0x31c8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x9a>
    3180:	d8 01       	movw	r26, r16
    3182:	18 96       	adiw	r26, 0x08	; 8
    3184:	8c 91       	ld	r24, X
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	88 0f       	add	r24, r24
    318a:	99 1f       	adc	r25, r25
    318c:	0e 94 bc 1b 	call	0x3778	; 0x3778 <malloc>
    3190:	f5 01       	movw	r30, r10
    3192:	91 83       	std	Z+1, r25	; 0x01
    3194:	80 83       	st	Z, r24
    3196:	00 97       	sbiw	r24, 0x00	; 0
    3198:	09 f4       	brne	.+2      	; 0x319c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x6e>
    319a:	b1 c0       	rjmp	.+354    	; 0x32fe <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    319c:	fc 01       	movw	r30, r24
    319e:	20 e0       	ldi	r18, 0x00	; 0
    31a0:	30 e0       	ldi	r19, 0x00	; 0
    31a2:	d8 01       	movw	r26, r16
    31a4:	18 96       	adiw	r26, 0x08	; 8
    31a6:	8c 91       	ld	r24, X
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	28 17       	cp	r18, r24
    31ac:	39 07       	cpc	r19, r25
    31ae:	14 f7       	brge	.-60     	; 0x3174 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x46>
    31b0:	11 92       	st	Z+, r1
    31b2:	11 92       	st	Z+, r1
    31b4:	2f 5f       	subi	r18, 0xFF	; 255
    31b6:	3f 4f       	sbci	r19, 0xFF	; 255
    31b8:	f4 cf       	rjmp	.-24     	; 0x31a2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x74>
    31ba:	e1 2c       	mov	r14, r1
    31bc:	f1 2c       	mov	r15, r1
    31be:	6e 01       	movw	r12, r28
    31c0:	b1 e2       	ldi	r27, 0x21	; 33
    31c2:	cb 0e       	add	r12, r27
    31c4:	d1 1c       	adc	r13, r1
    31c6:	21 c0       	rjmp	.+66     	; 0x320a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    31c8:	f8 01       	movw	r30, r16
    31ca:	80 85       	ldd	r24, Z+8	; 0x08
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	88 0f       	add	r24, r24
    31d0:	99 1f       	adc	r25, r25
    31d2:	0e 94 bc 1b 	call	0x3778	; 0x3778 <malloc>
    31d6:	d4 01       	movw	r26, r8
    31d8:	8d 93       	st	X+, r24
    31da:	9c 93       	st	X, r25
    31dc:	00 97       	sbiw	r24, 0x00	; 0
    31de:	09 f4       	brne	.+2      	; 0x31e2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb4>
    31e0:	8e c0       	rjmp	.+284    	; 0x32fe <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    31e2:	fc 01       	movw	r30, r24
    31e4:	20 e0       	ldi	r18, 0x00	; 0
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	d8 01       	movw	r26, r16
    31ea:	18 96       	adiw	r26, 0x08	; 8
    31ec:	8c 91       	ld	r24, X
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	28 17       	cp	r18, r24
    31f2:	39 07       	cpc	r19, r25
    31f4:	14 f7       	brge	.-60     	; 0x31ba <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    31f6:	d8 01       	movw	r26, r16
    31f8:	1e 96       	adiw	r26, 0x0e	; 14
    31fa:	8d 91       	ld	r24, X+
    31fc:	9c 91       	ld	r25, X
    31fe:	1f 97       	sbiw	r26, 0x0f	; 15
    3200:	81 93       	st	Z+, r24
    3202:	91 93       	st	Z+, r25
    3204:	2f 5f       	subi	r18, 0xFF	; 255
    3206:	3f 4f       	sbci	r19, 0xFF	; 255
    3208:	ef cf       	rjmp	.-34     	; 0x31e8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xba>
    320a:	45 2d       	mov	r20, r5
    320c:	be 01       	movw	r22, r28
    320e:	6f 5b       	subi	r22, 0xBF	; 191
    3210:	7f 4f       	sbci	r23, 0xFF	; 255
    3212:	c8 01       	movw	r24, r16
    3214:	0e 94 3a 18 	call	0x3074	; 0x3074 <_ZN16PololuQTRSensors4readEPjh>
    3218:	f8 01       	movw	r30, r16
    321a:	60 84       	ldd	r6, Z+8	; 0x08
    321c:	71 2c       	mov	r7, r1
    321e:	fe 01       	movw	r30, r28
    3220:	ef 5b       	subi	r30, 0xBF	; 191
    3222:	ff 4f       	sbci	r31, 0xFF	; 255
    3224:	c6 01       	movw	r24, r12
    3226:	9e 01       	movw	r18, r28
    3228:	2f 5f       	subi	r18, 0xFF	; 255
    322a:	3f 4f       	sbci	r19, 0xFF	; 255
    322c:	19 01       	movw	r2, r18
    322e:	20 e0       	ldi	r18, 0x00	; 0
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	26 15       	cp	r18, r6
    3234:	37 05       	cpc	r19, r7
    3236:	4c f5       	brge	.+82     	; 0x328a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x15c>
    3238:	e1 14       	cp	r14, r1
    323a:	f1 04       	cpc	r15, r1
    323c:	89 f0       	breq	.+34     	; 0x3260 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    323e:	dc 01       	movw	r26, r24
    3240:	6d 91       	ld	r22, X+
    3242:	7c 91       	ld	r23, X
    3244:	40 81       	ld	r20, Z
    3246:	51 81       	ldd	r21, Z+1	; 0x01
    3248:	64 17       	cp	r22, r20
    324a:	75 07       	cpc	r23, r21
    324c:	48 f0       	brcs	.+18     	; 0x3260 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    324e:	d1 01       	movw	r26, r2
    3250:	6d 91       	ld	r22, X+
    3252:	7c 91       	ld	r23, X
    3254:	40 81       	ld	r20, Z
    3256:	51 81       	ldd	r21, Z+1	; 0x01
    3258:	46 17       	cp	r20, r22
    325a:	57 07       	cpc	r21, r23
    325c:	48 f0       	brcs	.+18     	; 0x3270 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x142>
    325e:	0d c0       	rjmp	.+26     	; 0x327a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x14c>
    3260:	40 81       	ld	r20, Z
    3262:	51 81       	ldd	r21, Z+1	; 0x01
    3264:	dc 01       	movw	r26, r24
    3266:	4d 93       	st	X+, r20
    3268:	5c 93       	st	X, r21
    326a:	e1 14       	cp	r14, r1
    326c:	f1 04       	cpc	r15, r1
    326e:	79 f7       	brne	.-34     	; 0x324e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x120>
    3270:	40 81       	ld	r20, Z
    3272:	51 81       	ldd	r21, Z+1	; 0x01
    3274:	d1 01       	movw	r26, r2
    3276:	4d 93       	st	X+, r20
    3278:	5c 93       	st	X, r21
    327a:	2f 5f       	subi	r18, 0xFF	; 255
    327c:	3f 4f       	sbci	r19, 0xFF	; 255
    327e:	b2 e0       	ldi	r27, 0x02	; 2
    3280:	2b 0e       	add	r2, r27
    3282:	31 1c       	adc	r3, r1
    3284:	32 96       	adiw	r30, 0x02	; 2
    3286:	02 96       	adiw	r24, 0x02	; 2
    3288:	d4 cf       	rjmp	.-88     	; 0x3232 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x104>
    328a:	ef ef       	ldi	r30, 0xFF	; 255
    328c:	ee 1a       	sub	r14, r30
    328e:	fe 0a       	sbc	r15, r30
    3290:	fa e0       	ldi	r31, 0x0A	; 10
    3292:	ef 16       	cp	r14, r31
    3294:	f1 04       	cpc	r15, r1
    3296:	09 f0       	breq	.+2      	; 0x329a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x16c>
    3298:	b8 cf       	rjmp	.-144    	; 0x320a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    329a:	9e 01       	movw	r18, r28
    329c:	2f 5f       	subi	r18, 0xFF	; 255
    329e:	3f 4f       	sbci	r19, 0xFF	; 255
    32a0:	79 01       	movw	r14, r18
    32a2:	36 01       	movw	r6, r12
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	f8 01       	movw	r30, r16
    32aa:	20 85       	ldd	r18, Z+8	; 0x08
    32ac:	30 e0       	ldi	r19, 0x00	; 0
    32ae:	82 17       	cp	r24, r18
    32b0:	93 07       	cpc	r25, r19
    32b2:	2c f5       	brge	.+74     	; 0x32fe <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    32b4:	d7 01       	movw	r26, r14
    32b6:	2d 91       	ld	r18, X+
    32b8:	3d 91       	ld	r19, X+
    32ba:	7d 01       	movw	r14, r26
    32bc:	b3 01       	movw	r22, r6
    32be:	6c 19       	sub	r22, r12
    32c0:	7d 09       	sbc	r23, r13
    32c2:	d5 01       	movw	r26, r10
    32c4:	ed 91       	ld	r30, X+
    32c6:	fc 91       	ld	r31, X
    32c8:	e6 0f       	add	r30, r22
    32ca:	f7 1f       	adc	r31, r23
    32cc:	40 81       	ld	r20, Z
    32ce:	51 81       	ldd	r21, Z+1	; 0x01
    32d0:	42 17       	cp	r20, r18
    32d2:	53 07       	cpc	r21, r19
    32d4:	10 f4       	brcc	.+4      	; 0x32da <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1ac>
    32d6:	31 83       	std	Z+1, r19	; 0x01
    32d8:	20 83       	st	Z, r18
    32da:	f3 01       	movw	r30, r6
    32dc:	21 91       	ld	r18, Z+
    32de:	31 91       	ld	r19, Z+
    32e0:	3f 01       	movw	r6, r30
    32e2:	d4 01       	movw	r26, r8
    32e4:	ed 91       	ld	r30, X+
    32e6:	fc 91       	ld	r31, X
    32e8:	e6 0f       	add	r30, r22
    32ea:	f7 1f       	adc	r31, r23
    32ec:	40 81       	ld	r20, Z
    32ee:	51 81       	ldd	r21, Z+1	; 0x01
    32f0:	24 17       	cp	r18, r20
    32f2:	35 07       	cpc	r19, r21
    32f4:	10 f4       	brcc	.+4      	; 0x32fa <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1cc>
    32f6:	31 83       	std	Z+1, r19	; 0x01
    32f8:	20 83       	st	Z, r18
    32fa:	01 96       	adiw	r24, 0x01	; 1
    32fc:	d5 cf       	rjmp	.-86     	; 0x32a8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17a>
    32fe:	c0 5a       	subi	r28, 0xA0	; 160
    3300:	df 4f       	sbci	r29, 0xFF	; 255
    3302:	0f b6       	in	r0, 0x3f	; 63
    3304:	f8 94       	cli
    3306:	de bf       	out	0x3e, r29	; 62
    3308:	0f be       	out	0x3f, r0	; 63
    330a:	cd bf       	out	0x3d, r28	; 61
    330c:	df 91       	pop	r29
    330e:	cf 91       	pop	r28
    3310:	1f 91       	pop	r17
    3312:	0f 91       	pop	r16
    3314:	ff 90       	pop	r15
    3316:	ef 90       	pop	r14
    3318:	df 90       	pop	r13
    331a:	cf 90       	pop	r12
    331c:	bf 90       	pop	r11
    331e:	af 90       	pop	r10
    3320:	9f 90       	pop	r9
    3322:	8f 90       	pop	r8
    3324:	7f 90       	pop	r7
    3326:	6f 90       	pop	r6
    3328:	5f 90       	pop	r5
    332a:	3f 90       	pop	r3
    332c:	2f 90       	pop	r2
    332e:	08 95       	ret

00003330 <_ZN16PololuQTRSensors9calibrateEh>:
    3330:	1f 93       	push	r17
    3332:	cf 93       	push	r28
    3334:	df 93       	push	r29
    3336:	ec 01       	movw	r28, r24
    3338:	16 2f       	mov	r17, r22
    333a:	8f ef       	ldi	r24, 0xFF	; 255
    333c:	86 0f       	add	r24, r22
    333e:	82 30       	cpi	r24, 0x02	; 2
    3340:	18 f0       	brcs	.+6      	; 0x3348 <_ZN16PololuQTRSensors9calibrateEh+0x18>
    3342:	66 23       	and	r22, r22
    3344:	59 f0       	breq	.+22     	; 0x335c <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    3346:	14 c0       	rjmp	.+40     	; 0x3370 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    3348:	21 e0       	ldi	r18, 0x01	; 1
    334a:	ae 01       	movw	r20, r28
    334c:	4e 5f       	subi	r20, 0xFE	; 254
    334e:	5f 4f       	sbci	r21, 0xFF	; 255
    3350:	be 01       	movw	r22, r28
    3352:	ce 01       	movw	r24, r28
    3354:	0e 94 97 18 	call	0x312e	; 0x312e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    3358:	12 30       	cpi	r17, 0x02	; 2
    335a:	51 f4       	brne	.+20     	; 0x3370 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    335c:	ae 01       	movw	r20, r28
    335e:	4a 5f       	subi	r20, 0xFA	; 250
    3360:	5f 4f       	sbci	r21, 0xFF	; 255
    3362:	be 01       	movw	r22, r28
    3364:	6c 5f       	subi	r22, 0xFC	; 252
    3366:	7f 4f       	sbci	r23, 0xFF	; 255
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	ce 01       	movw	r24, r28
    336c:	0e 94 97 18 	call	0x312e	; 0x312e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    3370:	df 91       	pop	r29
    3372:	cf 91       	pop	r28
    3374:	1f 91       	pop	r17
    3376:	08 95       	ret

00003378 <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    3378:	a0 e0       	ldi	r26, 0x00	; 0
    337a:	b0 e0       	ldi	r27, 0x00	; 0
    337c:	e2 ec       	ldi	r30, 0xC2	; 194
    337e:	f9 e1       	ldi	r31, 0x19	; 25
    3380:	0c 94 8e 1b 	jmp	0x371c	; 0x371c <__prologue_saves__+0x12>
    3384:	ec 01       	movw	r28, r24
    3386:	8b 01       	movw	r16, r22
    3388:	b4 2e       	mov	r11, r20
    338a:	84 2f       	mov	r24, r20
    338c:	8d 7f       	andi	r24, 0xFD	; 253
    338e:	51 f4       	brne	.+20     	; 0x33a4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    3390:	8c 81       	ldd	r24, Y+4	; 0x04
    3392:	9d 81       	ldd	r25, Y+5	; 0x05
    3394:	89 2b       	or	r24, r25
    3396:	09 f4       	brne	.+2      	; 0x339a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x22>
    3398:	97 c0       	rjmp	.+302    	; 0x34c8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    339a:	8e 81       	ldd	r24, Y+6	; 0x06
    339c:	9f 81       	ldd	r25, Y+7	; 0x07
    339e:	89 2b       	or	r24, r25
    33a0:	09 f4       	brne	.+2      	; 0x33a4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    33a2:	92 c0       	rjmp	.+292    	; 0x34c8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    33a4:	8f ef       	ldi	r24, 0xFF	; 255
    33a6:	8b 0d       	add	r24, r11
    33a8:	82 30       	cpi	r24, 0x02	; 2
    33aa:	50 f4       	brcc	.+20     	; 0x33c0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    33ac:	88 81       	ld	r24, Y
    33ae:	99 81       	ldd	r25, Y+1	; 0x01
    33b0:	89 2b       	or	r24, r25
    33b2:	09 f4       	brne	.+2      	; 0x33b6 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3e>
    33b4:	89 c0       	rjmp	.+274    	; 0x34c8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    33b6:	8a 81       	ldd	r24, Y+2	; 0x02
    33b8:	9b 81       	ldd	r25, Y+3	; 0x03
    33ba:	89 2b       	or	r24, r25
    33bc:	09 f4       	brne	.+2      	; 0x33c0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    33be:	84 c0       	rjmp	.+264    	; 0x34c8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    33c0:	4b 2d       	mov	r20, r11
    33c2:	b8 01       	movw	r22, r16
    33c4:	ce 01       	movw	r24, r28
    33c6:	0e 94 3a 18 	call	0x3074	; 0x3074 <_ZN16PololuQTRSensors4readEPjh>
    33ca:	78 01       	movw	r14, r16
    33cc:	00 e0       	ldi	r16, 0x00	; 0
    33ce:	10 e0       	ldi	r17, 0x00	; 0
    33d0:	c1 2c       	mov	r12, r1
    33d2:	d1 2c       	mov	r13, r1
    33d4:	88 85       	ldd	r24, Y+8	; 0x08
    33d6:	90 e0       	ldi	r25, 0x00	; 0
    33d8:	c8 16       	cp	r12, r24
    33da:	d9 06       	cpc	r13, r25
    33dc:	0c f0       	brlt	.+2      	; 0x33e0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x68>
    33de:	74 c0       	rjmp	.+232    	; 0x34c8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	b8 12       	cpse	r11, r24
    33e4:	0a c0       	rjmp	.+20     	; 0x33fa <_ZN16PololuQTRSensors14readCalibratedEPjh+0x82>
    33e6:	ea 81       	ldd	r30, Y+2	; 0x02
    33e8:	fb 81       	ldd	r31, Y+3	; 0x03
    33ea:	e0 0f       	add	r30, r16
    33ec:	f1 1f       	adc	r31, r17
    33ee:	01 90       	ld	r0, Z+
    33f0:	f0 81       	ld	r31, Z
    33f2:	e0 2d       	mov	r30, r0
    33f4:	a8 81       	ld	r26, Y
    33f6:	b9 81       	ldd	r27, Y+1	; 0x01
    33f8:	0d c0       	rjmp	.+26     	; 0x3414 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x9c>
    33fa:	8c 81       	ldd	r24, Y+4	; 0x04
    33fc:	9d 81       	ldd	r25, Y+5	; 0x05
    33fe:	2e 81       	ldd	r18, Y+6	; 0x06
    3400:	3f 81       	ldd	r19, Y+7	; 0x07
    3402:	b1 10       	cpse	r11, r1
    3404:	0c c0       	rjmp	.+24     	; 0x341e <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    3406:	f9 01       	movw	r30, r18
    3408:	e0 0f       	add	r30, r16
    340a:	f1 1f       	adc	r31, r17
    340c:	01 90       	ld	r0, Z+
    340e:	f0 81       	ld	r31, Z
    3410:	e0 2d       	mov	r30, r0
    3412:	dc 01       	movw	r26, r24
    3414:	a0 0f       	add	r26, r16
    3416:	b1 1f       	adc	r27, r17
    3418:	8d 91       	ld	r24, X+
    341a:	9c 91       	ld	r25, X
    341c:	28 c0       	rjmp	.+80     	; 0x346e <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    341e:	fc 01       	movw	r30, r24
    3420:	e0 0f       	add	r30, r16
    3422:	f1 1f       	adc	r31, r17
    3424:	40 81       	ld	r20, Z
    3426:	51 81       	ldd	r21, Z+1	; 0x01
    3428:	e8 81       	ld	r30, Y
    342a:	f9 81       	ldd	r31, Y+1	; 0x01
    342c:	e0 0f       	add	r30, r16
    342e:	f1 1f       	adc	r31, r17
    3430:	80 81       	ld	r24, Z
    3432:	91 81       	ldd	r25, Z+1	; 0x01
    3434:	ee 85       	ldd	r30, Y+14	; 0x0e
    3436:	ff 85       	ldd	r31, Y+15	; 0x0f
    3438:	48 17       	cp	r20, r24
    343a:	59 07       	cpc	r21, r25
    343c:	10 f4       	brcc	.+4      	; 0x3442 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xca>
    343e:	cf 01       	movw	r24, r30
    3440:	04 c0       	rjmp	.+8      	; 0x344a <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd2>
    3442:	8e 0f       	add	r24, r30
    3444:	9f 1f       	adc	r25, r31
    3446:	84 1b       	sub	r24, r20
    3448:	95 0b       	sbc	r25, r21
    344a:	d9 01       	movw	r26, r18
    344c:	a0 0f       	add	r26, r16
    344e:	b1 1f       	adc	r27, r17
    3450:	2d 91       	ld	r18, X+
    3452:	3c 91       	ld	r19, X
    3454:	aa 81       	ldd	r26, Y+2	; 0x02
    3456:	bb 81       	ldd	r27, Y+3	; 0x03
    3458:	a0 0f       	add	r26, r16
    345a:	b1 1f       	adc	r27, r17
    345c:	4d 91       	ld	r20, X+
    345e:	5c 91       	ld	r21, X
    3460:	24 17       	cp	r18, r20
    3462:	35 07       	cpc	r19, r21
    3464:	20 f0       	brcs	.+8      	; 0x346e <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    3466:	e4 0f       	add	r30, r20
    3468:	f5 1f       	adc	r31, r21
    346a:	e2 1b       	sub	r30, r18
    346c:	f3 0b       	sbc	r31, r19
    346e:	e8 1b       	sub	r30, r24
    3470:	f9 0b       	sbc	r31, r25
    3472:	a9 f0       	breq	.+42     	; 0x349e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x126>
    3474:	d7 01       	movw	r26, r14
    3476:	2d 91       	ld	r18, X+
    3478:	3c 91       	ld	r19, X
    347a:	40 e0       	ldi	r20, 0x00	; 0
    347c:	50 e0       	ldi	r21, 0x00	; 0
    347e:	28 1b       	sub	r18, r24
    3480:	39 0b       	sbc	r19, r25
    3482:	41 09       	sbc	r20, r1
    3484:	51 09       	sbc	r21, r1
    3486:	a8 ee       	ldi	r26, 0xE8	; 232
    3488:	b3 e0       	ldi	r27, 0x03	; 3
    348a:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__muluhisi3>
    348e:	9f 01       	movw	r18, r30
    3490:	40 e0       	ldi	r20, 0x00	; 0
    3492:	50 e0       	ldi	r21, 0x00	; 0
    3494:	0e 94 3e 1b 	call	0x367c	; 0x367c <__divmodsi4>
    3498:	37 fd       	sbrc	r19, 7
    349a:	0a c0       	rjmp	.+20     	; 0x34b0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x138>
    349c:	02 c0       	rjmp	.+4      	; 0x34a2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x12a>
    349e:	20 e0       	ldi	r18, 0x00	; 0
    34a0:	30 e0       	ldi	r19, 0x00	; 0
    34a2:	29 3e       	cpi	r18, 0xE9	; 233
    34a4:	b3 e0       	ldi	r27, 0x03	; 3
    34a6:	3b 07       	cpc	r19, r27
    34a8:	2c f0       	brlt	.+10     	; 0x34b4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    34aa:	28 ee       	ldi	r18, 0xE8	; 232
    34ac:	33 e0       	ldi	r19, 0x03	; 3
    34ae:	02 c0       	rjmp	.+4      	; 0x34b4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    34b0:	20 e0       	ldi	r18, 0x00	; 0
    34b2:	30 e0       	ldi	r19, 0x00	; 0
    34b4:	f7 01       	movw	r30, r14
    34b6:	21 93       	st	Z+, r18
    34b8:	31 93       	st	Z+, r19
    34ba:	7f 01       	movw	r14, r30
    34bc:	ff ef       	ldi	r31, 0xFF	; 255
    34be:	cf 1a       	sub	r12, r31
    34c0:	df 0a       	sbc	r13, r31
    34c2:	0e 5f       	subi	r16, 0xFE	; 254
    34c4:	1f 4f       	sbci	r17, 0xFF	; 255
    34c6:	86 cf       	rjmp	.-244    	; 0x33d4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x5c>
    34c8:	cd b7       	in	r28, 0x3d	; 61
    34ca:	de b7       	in	r29, 0x3e	; 62
    34cc:	e9 e0       	ldi	r30, 0x09	; 9
    34ce:	0c 94 aa 1b 	jmp	0x3754	; 0x3754 <__epilogue_restores__+0x12>

000034d2 <_ZN16PololuQTRSensors8readLineEPjhh>:
    34d2:	a0 e0       	ldi	r26, 0x00	; 0
    34d4:	b0 e0       	ldi	r27, 0x00	; 0
    34d6:	ef e6       	ldi	r30, 0x6F	; 111
    34d8:	fa e1       	ldi	r31, 0x1A	; 26
    34da:	0c 94 85 1b 	jmp	0x370a	; 0x370a <__prologue_saves__>
    34de:	ec 01       	movw	r28, r24
    34e0:	8b 01       	movw	r16, r22
    34e2:	82 2e       	mov	r8, r18
    34e4:	0e 94 bc 19 	call	0x3378	; 0x3378 <_ZN16PololuQTRSensors14readCalibratedEPjh>
    34e8:	28 84       	ldd	r2, Y+8	; 0x08
    34ea:	e8 01       	movw	r28, r16
    34ec:	41 2c       	mov	r4, r1
    34ee:	51 2c       	mov	r5, r1
    34f0:	32 01       	movw	r6, r4
    34f2:	00 e0       	ldi	r16, 0x00	; 0
    34f4:	10 e0       	ldi	r17, 0x00	; 0
    34f6:	c1 2c       	mov	r12, r1
    34f8:	d1 2c       	mov	r13, r1
    34fa:	76 01       	movw	r14, r12
    34fc:	31 2c       	mov	r3, r1
    34fe:	91 2c       	mov	r9, r1
    3500:	58 ee       	ldi	r21, 0xE8	; 232
    3502:	a5 2e       	mov	r10, r21
    3504:	53 e0       	ldi	r21, 0x03	; 3
    3506:	b5 2e       	mov	r11, r21
    3508:	92 14       	cp	r9, r2
    350a:	21 f1       	breq	.+72     	; 0x3554 <_ZN16PololuQTRSensors8readLineEPjhh+0x82>
    350c:	e9 91       	ld	r30, Y+
    350e:	f9 91       	ld	r31, Y+
    3510:	88 20       	and	r8, r8
    3512:	21 f0       	breq	.+8      	; 0x351c <_ZN16PololuQTRSensors8readLineEPjhh+0x4a>
    3514:	c5 01       	movw	r24, r10
    3516:	8e 1b       	sub	r24, r30
    3518:	9f 0b       	sbc	r25, r31
    351a:	fc 01       	movw	r30, r24
    351c:	e9 3c       	cpi	r30, 0xC9	; 201
    351e:	f1 05       	cpc	r31, r1
    3520:	24 f4       	brge	.+8      	; 0x352a <_ZN16PololuQTRSensors8readLineEPjhh+0x58>
    3522:	e3 33       	cpi	r30, 0x33	; 51
    3524:	f1 05       	cpc	r31, r1
    3526:	74 f0       	brlt	.+28     	; 0x3544 <_ZN16PololuQTRSensors8readLineEPjhh+0x72>
    3528:	02 c0       	rjmp	.+4      	; 0x352e <_ZN16PololuQTRSensors8readLineEPjhh+0x5c>
    352a:	33 24       	eor	r3, r3
    352c:	33 94       	inc	r3
    352e:	df 01       	movw	r26, r30
    3530:	a3 01       	movw	r20, r6
    3532:	92 01       	movw	r18, r4
    3534:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <__mulshisi3>
    3538:	c6 0e       	add	r12, r22
    353a:	d7 1e       	adc	r13, r23
    353c:	e8 1e       	adc	r14, r24
    353e:	f9 1e       	adc	r15, r25
    3540:	0e 0f       	add	r16, r30
    3542:	1f 1f       	adc	r17, r31
    3544:	93 94       	inc	r9
    3546:	98 ee       	ldi	r25, 0xE8	; 232
    3548:	49 0e       	add	r4, r25
    354a:	93 e0       	ldi	r25, 0x03	; 3
    354c:	59 1e       	adc	r5, r25
    354e:	61 1c       	adc	r6, r1
    3550:	71 1c       	adc	r7, r1
    3552:	da cf       	rjmp	.-76     	; 0x3508 <_ZN16PololuQTRSensors8readLineEPjhh+0x36>
    3554:	31 10       	cpse	r3, r1
    3556:	1e c0       	rjmp	.+60     	; 0x3594 <_ZN16PololuQTRSensors8readLineEPjhh+0xc2>
    3558:	49 2d       	mov	r20, r9
    355a:	50 e0       	ldi	r21, 0x00	; 0
    355c:	41 50       	subi	r20, 0x01	; 1
    355e:	51 09       	sbc	r21, r1
    3560:	24 ef       	ldi	r18, 0xF4	; 244
    3562:	31 e0       	ldi	r19, 0x01	; 1
    3564:	42 9f       	mul	r20, r18
    3566:	c0 01       	movw	r24, r0
    3568:	43 9f       	mul	r20, r19
    356a:	90 0d       	add	r25, r0
    356c:	52 9f       	mul	r21, r18
    356e:	90 0d       	add	r25, r0
    3570:	11 24       	eor	r1, r1
    3572:	20 91 cb 01 	lds	r18, 0x01CB	; 0x8001cb <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    3576:	30 91 cc 01 	lds	r19, 0x01CC	; 0x8001cc <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    357a:	28 17       	cp	r18, r24
    357c:	39 07       	cpc	r19, r25
    357e:	b4 f0       	brlt	.+44     	; 0x35ac <_ZN16PololuQTRSensors8readLineEPjhh+0xda>
    3580:	88 ee       	ldi	r24, 0xE8	; 232
    3582:	93 e0       	ldi	r25, 0x03	; 3
    3584:	48 9f       	mul	r20, r24
    3586:	90 01       	movw	r18, r0
    3588:	49 9f       	mul	r20, r25
    358a:	30 0d       	add	r19, r0
    358c:	58 9f       	mul	r21, r24
    358e:	30 0d       	add	r19, r0
    3590:	11 24       	eor	r1, r1
    3592:	0e c0       	rjmp	.+28     	; 0x35b0 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    3594:	98 01       	movw	r18, r16
    3596:	40 e0       	ldi	r20, 0x00	; 0
    3598:	50 e0       	ldi	r21, 0x00	; 0
    359a:	c7 01       	movw	r24, r14
    359c:	b6 01       	movw	r22, r12
    359e:	0e 94 1c 1b 	call	0x3638	; 0x3638 <__udivmodsi4>
    35a2:	30 93 cc 01 	sts	0x01CC, r19	; 0x8001cc <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    35a6:	20 93 cb 01 	sts	0x01CB, r18	; 0x8001cb <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    35aa:	02 c0       	rjmp	.+4      	; 0x35b0 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    35ac:	20 e0       	ldi	r18, 0x00	; 0
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	c9 01       	movw	r24, r18
    35b2:	cd b7       	in	r28, 0x3d	; 61
    35b4:	de b7       	in	r29, 0x3e	; 62
    35b6:	e2 e1       	ldi	r30, 0x12	; 18
    35b8:	0c 94 a1 1b 	jmp	0x3742	; 0x3742 <__epilogue_restores__>

000035bc <_ZN16PololuQTRSensorsD1Ev>:
    35bc:	cf 93       	push	r28
    35be:	df 93       	push	r29
    35c0:	ec 01       	movw	r28, r24
    35c2:	8a 81       	ldd	r24, Y+2	; 0x02
    35c4:	9b 81       	ldd	r25, Y+3	; 0x03
    35c6:	00 97       	sbiw	r24, 0x00	; 0
    35c8:	11 f0       	breq	.+4      	; 0x35ce <_ZN16PololuQTRSensorsD1Ev+0x12>
    35ca:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <free>
    35ce:	8e 81       	ldd	r24, Y+6	; 0x06
    35d0:	9f 81       	ldd	r25, Y+7	; 0x07
    35d2:	00 97       	sbiw	r24, 0x00	; 0
    35d4:	11 f0       	breq	.+4      	; 0x35da <_ZN16PololuQTRSensorsD1Ev+0x1e>
    35d6:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <free>
    35da:	88 81       	ld	r24, Y
    35dc:	99 81       	ldd	r25, Y+1	; 0x01
    35de:	00 97       	sbiw	r24, 0x00	; 0
    35e0:	11 f0       	breq	.+4      	; 0x35e6 <_ZN16PololuQTRSensorsD1Ev+0x2a>
    35e2:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <free>
    35e6:	8c 81       	ldd	r24, Y+4	; 0x04
    35e8:	9d 81       	ldd	r25, Y+5	; 0x05
    35ea:	00 97       	sbiw	r24, 0x00	; 0
    35ec:	11 f0       	breq	.+4      	; 0x35f2 <_ZN16PololuQTRSensorsD1Ev+0x36>
    35ee:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <free>
    35f2:	df 91       	pop	r29
    35f4:	cf 91       	pop	r28
    35f6:	08 95       	ret

000035f8 <__udivmodqi4>:
    35f8:	99 1b       	sub	r25, r25
    35fa:	79 e0       	ldi	r23, 0x09	; 9
    35fc:	04 c0       	rjmp	.+8      	; 0x3606 <__udivmodqi4_ep>

000035fe <__udivmodqi4_loop>:
    35fe:	99 1f       	adc	r25, r25
    3600:	96 17       	cp	r25, r22
    3602:	08 f0       	brcs	.+2      	; 0x3606 <__udivmodqi4_ep>
    3604:	96 1b       	sub	r25, r22

00003606 <__udivmodqi4_ep>:
    3606:	88 1f       	adc	r24, r24
    3608:	7a 95       	dec	r23
    360a:	c9 f7       	brne	.-14     	; 0x35fe <__udivmodqi4_loop>
    360c:	80 95       	com	r24
    360e:	08 95       	ret

00003610 <__udivmodhi4>:
    3610:	aa 1b       	sub	r26, r26
    3612:	bb 1b       	sub	r27, r27
    3614:	51 e1       	ldi	r21, 0x11	; 17
    3616:	07 c0       	rjmp	.+14     	; 0x3626 <__udivmodhi4_ep>

00003618 <__udivmodhi4_loop>:
    3618:	aa 1f       	adc	r26, r26
    361a:	bb 1f       	adc	r27, r27
    361c:	a6 17       	cp	r26, r22
    361e:	b7 07       	cpc	r27, r23
    3620:	10 f0       	brcs	.+4      	; 0x3626 <__udivmodhi4_ep>
    3622:	a6 1b       	sub	r26, r22
    3624:	b7 0b       	sbc	r27, r23

00003626 <__udivmodhi4_ep>:
    3626:	88 1f       	adc	r24, r24
    3628:	99 1f       	adc	r25, r25
    362a:	5a 95       	dec	r21
    362c:	a9 f7       	brne	.-22     	; 0x3618 <__udivmodhi4_loop>
    362e:	80 95       	com	r24
    3630:	90 95       	com	r25
    3632:	bc 01       	movw	r22, r24
    3634:	cd 01       	movw	r24, r26
    3636:	08 95       	ret

00003638 <__udivmodsi4>:
    3638:	a1 e2       	ldi	r26, 0x21	; 33
    363a:	1a 2e       	mov	r1, r26
    363c:	aa 1b       	sub	r26, r26
    363e:	bb 1b       	sub	r27, r27
    3640:	fd 01       	movw	r30, r26
    3642:	0d c0       	rjmp	.+26     	; 0x365e <__udivmodsi4_ep>

00003644 <__udivmodsi4_loop>:
    3644:	aa 1f       	adc	r26, r26
    3646:	bb 1f       	adc	r27, r27
    3648:	ee 1f       	adc	r30, r30
    364a:	ff 1f       	adc	r31, r31
    364c:	a2 17       	cp	r26, r18
    364e:	b3 07       	cpc	r27, r19
    3650:	e4 07       	cpc	r30, r20
    3652:	f5 07       	cpc	r31, r21
    3654:	20 f0       	brcs	.+8      	; 0x365e <__udivmodsi4_ep>
    3656:	a2 1b       	sub	r26, r18
    3658:	b3 0b       	sbc	r27, r19
    365a:	e4 0b       	sbc	r30, r20
    365c:	f5 0b       	sbc	r31, r21

0000365e <__udivmodsi4_ep>:
    365e:	66 1f       	adc	r22, r22
    3660:	77 1f       	adc	r23, r23
    3662:	88 1f       	adc	r24, r24
    3664:	99 1f       	adc	r25, r25
    3666:	1a 94       	dec	r1
    3668:	69 f7       	brne	.-38     	; 0x3644 <__udivmodsi4_loop>
    366a:	60 95       	com	r22
    366c:	70 95       	com	r23
    366e:	80 95       	com	r24
    3670:	90 95       	com	r25
    3672:	9b 01       	movw	r18, r22
    3674:	ac 01       	movw	r20, r24
    3676:	bd 01       	movw	r22, r26
    3678:	cf 01       	movw	r24, r30
    367a:	08 95       	ret

0000367c <__divmodsi4>:
    367c:	05 2e       	mov	r0, r21
    367e:	97 fb       	bst	r25, 7
    3680:	1e f4       	brtc	.+6      	; 0x3688 <__divmodsi4+0xc>
    3682:	00 94       	com	r0
    3684:	0e 94 55 1b 	call	0x36aa	; 0x36aa <__negsi2>
    3688:	57 fd       	sbrc	r21, 7
    368a:	07 d0       	rcall	.+14     	; 0x369a <__divmodsi4_neg2>
    368c:	0e 94 1c 1b 	call	0x3638	; 0x3638 <__udivmodsi4>
    3690:	07 fc       	sbrc	r0, 7
    3692:	03 d0       	rcall	.+6      	; 0x369a <__divmodsi4_neg2>
    3694:	4e f4       	brtc	.+18     	; 0x36a8 <__divmodsi4_exit>
    3696:	0c 94 55 1b 	jmp	0x36aa	; 0x36aa <__negsi2>

0000369a <__divmodsi4_neg2>:
    369a:	50 95       	com	r21
    369c:	40 95       	com	r20
    369e:	30 95       	com	r19
    36a0:	21 95       	neg	r18
    36a2:	3f 4f       	sbci	r19, 0xFF	; 255
    36a4:	4f 4f       	sbci	r20, 0xFF	; 255
    36a6:	5f 4f       	sbci	r21, 0xFF	; 255

000036a8 <__divmodsi4_exit>:
    36a8:	08 95       	ret

000036aa <__negsi2>:
    36aa:	90 95       	com	r25
    36ac:	80 95       	com	r24
    36ae:	70 95       	com	r23
    36b0:	61 95       	neg	r22
    36b2:	7f 4f       	sbci	r23, 0xFF	; 255
    36b4:	8f 4f       	sbci	r24, 0xFF	; 255
    36b6:	9f 4f       	sbci	r25, 0xFF	; 255
    36b8:	08 95       	ret

000036ba <__tablejump2__>:
    36ba:	ee 0f       	add	r30, r30
    36bc:	ff 1f       	adc	r31, r31
    36be:	05 90       	lpm	r0, Z+
    36c0:	f4 91       	lpm	r31, Z
    36c2:	e0 2d       	mov	r30, r0
    36c4:	09 94       	ijmp

000036c6 <__umulhisi3>:
    36c6:	a2 9f       	mul	r26, r18
    36c8:	b0 01       	movw	r22, r0
    36ca:	b3 9f       	mul	r27, r19
    36cc:	c0 01       	movw	r24, r0
    36ce:	a3 9f       	mul	r26, r19
    36d0:	70 0d       	add	r23, r0
    36d2:	81 1d       	adc	r24, r1
    36d4:	11 24       	eor	r1, r1
    36d6:	91 1d       	adc	r25, r1
    36d8:	b2 9f       	mul	r27, r18
    36da:	70 0d       	add	r23, r0
    36dc:	81 1d       	adc	r24, r1
    36de:	11 24       	eor	r1, r1
    36e0:	91 1d       	adc	r25, r1
    36e2:	08 95       	ret

000036e4 <__muluhisi3>:
    36e4:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <__umulhisi3>
    36e8:	a5 9f       	mul	r26, r21
    36ea:	90 0d       	add	r25, r0
    36ec:	b4 9f       	mul	r27, r20
    36ee:	90 0d       	add	r25, r0
    36f0:	a4 9f       	mul	r26, r20
    36f2:	80 0d       	add	r24, r0
    36f4:	91 1d       	adc	r25, r1
    36f6:	11 24       	eor	r1, r1
    36f8:	08 95       	ret

000036fa <__mulshisi3>:
    36fa:	b7 ff       	sbrs	r27, 7
    36fc:	0c 94 72 1b 	jmp	0x36e4	; 0x36e4 <__muluhisi3>

00003700 <__mulohisi3>:
    3700:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__muluhisi3>
    3704:	82 1b       	sub	r24, r18
    3706:	93 0b       	sbc	r25, r19
    3708:	08 95       	ret

0000370a <__prologue_saves__>:
    370a:	2f 92       	push	r2
    370c:	3f 92       	push	r3
    370e:	4f 92       	push	r4
    3710:	5f 92       	push	r5
    3712:	6f 92       	push	r6
    3714:	7f 92       	push	r7
    3716:	8f 92       	push	r8
    3718:	9f 92       	push	r9
    371a:	af 92       	push	r10
    371c:	bf 92       	push	r11
    371e:	cf 92       	push	r12
    3720:	df 92       	push	r13
    3722:	ef 92       	push	r14
    3724:	ff 92       	push	r15
    3726:	0f 93       	push	r16
    3728:	1f 93       	push	r17
    372a:	cf 93       	push	r28
    372c:	df 93       	push	r29
    372e:	cd b7       	in	r28, 0x3d	; 61
    3730:	de b7       	in	r29, 0x3e	; 62
    3732:	ca 1b       	sub	r28, r26
    3734:	db 0b       	sbc	r29, r27
    3736:	0f b6       	in	r0, 0x3f	; 63
    3738:	f8 94       	cli
    373a:	de bf       	out	0x3e, r29	; 62
    373c:	0f be       	out	0x3f, r0	; 63
    373e:	cd bf       	out	0x3d, r28	; 61
    3740:	09 94       	ijmp

00003742 <__epilogue_restores__>:
    3742:	2a 88       	ldd	r2, Y+18	; 0x12
    3744:	39 88       	ldd	r3, Y+17	; 0x11
    3746:	48 88       	ldd	r4, Y+16	; 0x10
    3748:	5f 84       	ldd	r5, Y+15	; 0x0f
    374a:	6e 84       	ldd	r6, Y+14	; 0x0e
    374c:	7d 84       	ldd	r7, Y+13	; 0x0d
    374e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3750:	9b 84       	ldd	r9, Y+11	; 0x0b
    3752:	aa 84       	ldd	r10, Y+10	; 0x0a
    3754:	b9 84       	ldd	r11, Y+9	; 0x09
    3756:	c8 84       	ldd	r12, Y+8	; 0x08
    3758:	df 80       	ldd	r13, Y+7	; 0x07
    375a:	ee 80       	ldd	r14, Y+6	; 0x06
    375c:	fd 80       	ldd	r15, Y+5	; 0x05
    375e:	0c 81       	ldd	r16, Y+4	; 0x04
    3760:	1b 81       	ldd	r17, Y+3	; 0x03
    3762:	aa 81       	ldd	r26, Y+2	; 0x02
    3764:	b9 81       	ldd	r27, Y+1	; 0x01
    3766:	ce 0f       	add	r28, r30
    3768:	d1 1d       	adc	r29, r1
    376a:	0f b6       	in	r0, 0x3f	; 63
    376c:	f8 94       	cli
    376e:	de bf       	out	0x3e, r29	; 62
    3770:	0f be       	out	0x3f, r0	; 63
    3772:	cd bf       	out	0x3d, r28	; 61
    3774:	ed 01       	movw	r28, r26
    3776:	08 95       	ret

00003778 <malloc>:
    3778:	0f 93       	push	r16
    377a:	1f 93       	push	r17
    377c:	cf 93       	push	r28
    377e:	df 93       	push	r29
    3780:	82 30       	cpi	r24, 0x02	; 2
    3782:	91 05       	cpc	r25, r1
    3784:	10 f4       	brcc	.+4      	; 0x378a <malloc+0x12>
    3786:	82 e0       	ldi	r24, 0x02	; 2
    3788:	90 e0       	ldi	r25, 0x00	; 0
    378a:	e0 91 3d 02 	lds	r30, 0x023D	; 0x80023d <__flp>
    378e:	f0 91 3e 02 	lds	r31, 0x023E	; 0x80023e <__flp+0x1>
    3792:	20 e0       	ldi	r18, 0x00	; 0
    3794:	30 e0       	ldi	r19, 0x00	; 0
    3796:	a0 e0       	ldi	r26, 0x00	; 0
    3798:	b0 e0       	ldi	r27, 0x00	; 0
    379a:	30 97       	sbiw	r30, 0x00	; 0
    379c:	19 f1       	breq	.+70     	; 0x37e4 <malloc+0x6c>
    379e:	40 81       	ld	r20, Z
    37a0:	51 81       	ldd	r21, Z+1	; 0x01
    37a2:	02 81       	ldd	r16, Z+2	; 0x02
    37a4:	13 81       	ldd	r17, Z+3	; 0x03
    37a6:	48 17       	cp	r20, r24
    37a8:	59 07       	cpc	r21, r25
    37aa:	c8 f0       	brcs	.+50     	; 0x37de <malloc+0x66>
    37ac:	84 17       	cp	r24, r20
    37ae:	95 07       	cpc	r25, r21
    37b0:	69 f4       	brne	.+26     	; 0x37cc <malloc+0x54>
    37b2:	10 97       	sbiw	r26, 0x00	; 0
    37b4:	31 f0       	breq	.+12     	; 0x37c2 <malloc+0x4a>
    37b6:	12 96       	adiw	r26, 0x02	; 2
    37b8:	0c 93       	st	X, r16
    37ba:	12 97       	sbiw	r26, 0x02	; 2
    37bc:	13 96       	adiw	r26, 0x03	; 3
    37be:	1c 93       	st	X, r17
    37c0:	27 c0       	rjmp	.+78     	; 0x3810 <malloc+0x98>
    37c2:	00 93 3d 02 	sts	0x023D, r16	; 0x80023d <__flp>
    37c6:	10 93 3e 02 	sts	0x023E, r17	; 0x80023e <__flp+0x1>
    37ca:	22 c0       	rjmp	.+68     	; 0x3810 <malloc+0x98>
    37cc:	21 15       	cp	r18, r1
    37ce:	31 05       	cpc	r19, r1
    37d0:	19 f0       	breq	.+6      	; 0x37d8 <malloc+0x60>
    37d2:	42 17       	cp	r20, r18
    37d4:	53 07       	cpc	r21, r19
    37d6:	18 f4       	brcc	.+6      	; 0x37de <malloc+0x66>
    37d8:	9a 01       	movw	r18, r20
    37da:	bd 01       	movw	r22, r26
    37dc:	ef 01       	movw	r28, r30
    37de:	df 01       	movw	r26, r30
    37e0:	f8 01       	movw	r30, r16
    37e2:	db cf       	rjmp	.-74     	; 0x379a <malloc+0x22>
    37e4:	21 15       	cp	r18, r1
    37e6:	31 05       	cpc	r19, r1
    37e8:	f9 f0       	breq	.+62     	; 0x3828 <malloc+0xb0>
    37ea:	28 1b       	sub	r18, r24
    37ec:	39 0b       	sbc	r19, r25
    37ee:	24 30       	cpi	r18, 0x04	; 4
    37f0:	31 05       	cpc	r19, r1
    37f2:	80 f4       	brcc	.+32     	; 0x3814 <malloc+0x9c>
    37f4:	8a 81       	ldd	r24, Y+2	; 0x02
    37f6:	9b 81       	ldd	r25, Y+3	; 0x03
    37f8:	61 15       	cp	r22, r1
    37fa:	71 05       	cpc	r23, r1
    37fc:	21 f0       	breq	.+8      	; 0x3806 <malloc+0x8e>
    37fe:	fb 01       	movw	r30, r22
    3800:	93 83       	std	Z+3, r25	; 0x03
    3802:	82 83       	std	Z+2, r24	; 0x02
    3804:	04 c0       	rjmp	.+8      	; 0x380e <malloc+0x96>
    3806:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <__flp+0x1>
    380a:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <__flp>
    380e:	fe 01       	movw	r30, r28
    3810:	32 96       	adiw	r30, 0x02	; 2
    3812:	44 c0       	rjmp	.+136    	; 0x389c <malloc+0x124>
    3814:	fe 01       	movw	r30, r28
    3816:	e2 0f       	add	r30, r18
    3818:	f3 1f       	adc	r31, r19
    381a:	81 93       	st	Z+, r24
    381c:	91 93       	st	Z+, r25
    381e:	22 50       	subi	r18, 0x02	; 2
    3820:	31 09       	sbc	r19, r1
    3822:	39 83       	std	Y+1, r19	; 0x01
    3824:	28 83       	st	Y, r18
    3826:	3a c0       	rjmp	.+116    	; 0x389c <malloc+0x124>
    3828:	20 91 3b 02 	lds	r18, 0x023B	; 0x80023b <__brkval>
    382c:	30 91 3c 02 	lds	r19, 0x023C	; 0x80023c <__brkval+0x1>
    3830:	23 2b       	or	r18, r19
    3832:	41 f4       	brne	.+16     	; 0x3844 <malloc+0xcc>
    3834:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__malloc_heap_start>
    3838:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__malloc_heap_start+0x1>
    383c:	30 93 3c 02 	sts	0x023C, r19	; 0x80023c <__brkval+0x1>
    3840:	20 93 3b 02 	sts	0x023B, r18	; 0x80023b <__brkval>
    3844:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__malloc_heap_end>
    3848:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__malloc_heap_end+0x1>
    384c:	21 15       	cp	r18, r1
    384e:	31 05       	cpc	r19, r1
    3850:	41 f4       	brne	.+16     	; 0x3862 <malloc+0xea>
    3852:	2d b7       	in	r18, 0x3d	; 61
    3854:	3e b7       	in	r19, 0x3e	; 62
    3856:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__malloc_margin>
    385a:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__malloc_margin+0x1>
    385e:	24 1b       	sub	r18, r20
    3860:	35 0b       	sbc	r19, r21
    3862:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <__brkval>
    3866:	f0 91 3c 02 	lds	r31, 0x023C	; 0x80023c <__brkval+0x1>
    386a:	e2 17       	cp	r30, r18
    386c:	f3 07       	cpc	r31, r19
    386e:	a0 f4       	brcc	.+40     	; 0x3898 <malloc+0x120>
    3870:	2e 1b       	sub	r18, r30
    3872:	3f 0b       	sbc	r19, r31
    3874:	28 17       	cp	r18, r24
    3876:	39 07       	cpc	r19, r25
    3878:	78 f0       	brcs	.+30     	; 0x3898 <malloc+0x120>
    387a:	ac 01       	movw	r20, r24
    387c:	4e 5f       	subi	r20, 0xFE	; 254
    387e:	5f 4f       	sbci	r21, 0xFF	; 255
    3880:	24 17       	cp	r18, r20
    3882:	35 07       	cpc	r19, r21
    3884:	48 f0       	brcs	.+18     	; 0x3898 <malloc+0x120>
    3886:	4e 0f       	add	r20, r30
    3888:	5f 1f       	adc	r21, r31
    388a:	50 93 3c 02 	sts	0x023C, r21	; 0x80023c <__brkval+0x1>
    388e:	40 93 3b 02 	sts	0x023B, r20	; 0x80023b <__brkval>
    3892:	81 93       	st	Z+, r24
    3894:	91 93       	st	Z+, r25
    3896:	02 c0       	rjmp	.+4      	; 0x389c <malloc+0x124>
    3898:	e0 e0       	ldi	r30, 0x00	; 0
    389a:	f0 e0       	ldi	r31, 0x00	; 0
    389c:	cf 01       	movw	r24, r30
    389e:	df 91       	pop	r29
    38a0:	cf 91       	pop	r28
    38a2:	1f 91       	pop	r17
    38a4:	0f 91       	pop	r16
    38a6:	08 95       	ret

000038a8 <free>:
    38a8:	cf 93       	push	r28
    38aa:	df 93       	push	r29
    38ac:	00 97       	sbiw	r24, 0x00	; 0
    38ae:	09 f4       	brne	.+2      	; 0x38b2 <free+0xa>
    38b0:	81 c0       	rjmp	.+258    	; 0x39b4 <free+0x10c>
    38b2:	fc 01       	movw	r30, r24
    38b4:	32 97       	sbiw	r30, 0x02	; 2
    38b6:	13 82       	std	Z+3, r1	; 0x03
    38b8:	12 82       	std	Z+2, r1	; 0x02
    38ba:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <__flp>
    38be:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <__flp+0x1>
    38c2:	10 97       	sbiw	r26, 0x00	; 0
    38c4:	81 f4       	brne	.+32     	; 0x38e6 <free+0x3e>
    38c6:	20 81       	ld	r18, Z
    38c8:	31 81       	ldd	r19, Z+1	; 0x01
    38ca:	82 0f       	add	r24, r18
    38cc:	93 1f       	adc	r25, r19
    38ce:	20 91 3b 02 	lds	r18, 0x023B	; 0x80023b <__brkval>
    38d2:	30 91 3c 02 	lds	r19, 0x023C	; 0x80023c <__brkval+0x1>
    38d6:	28 17       	cp	r18, r24
    38d8:	39 07       	cpc	r19, r25
    38da:	51 f5       	brne	.+84     	; 0x3930 <free+0x88>
    38dc:	f0 93 3c 02 	sts	0x023C, r31	; 0x80023c <__brkval+0x1>
    38e0:	e0 93 3b 02 	sts	0x023B, r30	; 0x80023b <__brkval>
    38e4:	67 c0       	rjmp	.+206    	; 0x39b4 <free+0x10c>
    38e6:	ed 01       	movw	r28, r26
    38e8:	20 e0       	ldi	r18, 0x00	; 0
    38ea:	30 e0       	ldi	r19, 0x00	; 0
    38ec:	ce 17       	cp	r28, r30
    38ee:	df 07       	cpc	r29, r31
    38f0:	40 f4       	brcc	.+16     	; 0x3902 <free+0x5a>
    38f2:	4a 81       	ldd	r20, Y+2	; 0x02
    38f4:	5b 81       	ldd	r21, Y+3	; 0x03
    38f6:	9e 01       	movw	r18, r28
    38f8:	41 15       	cp	r20, r1
    38fa:	51 05       	cpc	r21, r1
    38fc:	f1 f0       	breq	.+60     	; 0x393a <free+0x92>
    38fe:	ea 01       	movw	r28, r20
    3900:	f5 cf       	rjmp	.-22     	; 0x38ec <free+0x44>
    3902:	d3 83       	std	Z+3, r29	; 0x03
    3904:	c2 83       	std	Z+2, r28	; 0x02
    3906:	40 81       	ld	r20, Z
    3908:	51 81       	ldd	r21, Z+1	; 0x01
    390a:	84 0f       	add	r24, r20
    390c:	95 1f       	adc	r25, r21
    390e:	c8 17       	cp	r28, r24
    3910:	d9 07       	cpc	r29, r25
    3912:	59 f4       	brne	.+22     	; 0x392a <free+0x82>
    3914:	88 81       	ld	r24, Y
    3916:	99 81       	ldd	r25, Y+1	; 0x01
    3918:	84 0f       	add	r24, r20
    391a:	95 1f       	adc	r25, r21
    391c:	02 96       	adiw	r24, 0x02	; 2
    391e:	91 83       	std	Z+1, r25	; 0x01
    3920:	80 83       	st	Z, r24
    3922:	8a 81       	ldd	r24, Y+2	; 0x02
    3924:	9b 81       	ldd	r25, Y+3	; 0x03
    3926:	93 83       	std	Z+3, r25	; 0x03
    3928:	82 83       	std	Z+2, r24	; 0x02
    392a:	21 15       	cp	r18, r1
    392c:	31 05       	cpc	r19, r1
    392e:	29 f4       	brne	.+10     	; 0x393a <free+0x92>
    3930:	f0 93 3e 02 	sts	0x023E, r31	; 0x80023e <__flp+0x1>
    3934:	e0 93 3d 02 	sts	0x023D, r30	; 0x80023d <__flp>
    3938:	3d c0       	rjmp	.+122    	; 0x39b4 <free+0x10c>
    393a:	e9 01       	movw	r28, r18
    393c:	fb 83       	std	Y+3, r31	; 0x03
    393e:	ea 83       	std	Y+2, r30	; 0x02
    3940:	49 91       	ld	r20, Y+
    3942:	59 91       	ld	r21, Y+
    3944:	c4 0f       	add	r28, r20
    3946:	d5 1f       	adc	r29, r21
    3948:	ec 17       	cp	r30, r28
    394a:	fd 07       	cpc	r31, r29
    394c:	61 f4       	brne	.+24     	; 0x3966 <free+0xbe>
    394e:	80 81       	ld	r24, Z
    3950:	91 81       	ldd	r25, Z+1	; 0x01
    3952:	84 0f       	add	r24, r20
    3954:	95 1f       	adc	r25, r21
    3956:	02 96       	adiw	r24, 0x02	; 2
    3958:	e9 01       	movw	r28, r18
    395a:	99 83       	std	Y+1, r25	; 0x01
    395c:	88 83       	st	Y, r24
    395e:	82 81       	ldd	r24, Z+2	; 0x02
    3960:	93 81       	ldd	r25, Z+3	; 0x03
    3962:	9b 83       	std	Y+3, r25	; 0x03
    3964:	8a 83       	std	Y+2, r24	; 0x02
    3966:	e0 e0       	ldi	r30, 0x00	; 0
    3968:	f0 e0       	ldi	r31, 0x00	; 0
    396a:	12 96       	adiw	r26, 0x02	; 2
    396c:	8d 91       	ld	r24, X+
    396e:	9c 91       	ld	r25, X
    3970:	13 97       	sbiw	r26, 0x03	; 3
    3972:	00 97       	sbiw	r24, 0x00	; 0
    3974:	19 f0       	breq	.+6      	; 0x397c <free+0xd4>
    3976:	fd 01       	movw	r30, r26
    3978:	dc 01       	movw	r26, r24
    397a:	f7 cf       	rjmp	.-18     	; 0x396a <free+0xc2>
    397c:	8d 91       	ld	r24, X+
    397e:	9c 91       	ld	r25, X
    3980:	11 97       	sbiw	r26, 0x01	; 1
    3982:	9d 01       	movw	r18, r26
    3984:	2e 5f       	subi	r18, 0xFE	; 254
    3986:	3f 4f       	sbci	r19, 0xFF	; 255
    3988:	82 0f       	add	r24, r18
    398a:	93 1f       	adc	r25, r19
    398c:	20 91 3b 02 	lds	r18, 0x023B	; 0x80023b <__brkval>
    3990:	30 91 3c 02 	lds	r19, 0x023C	; 0x80023c <__brkval+0x1>
    3994:	28 17       	cp	r18, r24
    3996:	39 07       	cpc	r19, r25
    3998:	69 f4       	brne	.+26     	; 0x39b4 <free+0x10c>
    399a:	30 97       	sbiw	r30, 0x00	; 0
    399c:	29 f4       	brne	.+10     	; 0x39a8 <free+0x100>
    399e:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <__flp+0x1>
    39a2:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <__flp>
    39a6:	02 c0       	rjmp	.+4      	; 0x39ac <free+0x104>
    39a8:	13 82       	std	Z+3, r1	; 0x03
    39aa:	12 82       	std	Z+2, r1	; 0x02
    39ac:	b0 93 3c 02 	sts	0x023C, r27	; 0x80023c <__brkval+0x1>
    39b0:	a0 93 3b 02 	sts	0x023B, r26	; 0x80023b <__brkval>
    39b4:	df 91       	pop	r29
    39b6:	cf 91       	pop	r28
    39b8:	08 95       	ret

000039ba <__do_global_dtors>:
    39ba:	10 e0       	ldi	r17, 0x00	; 0
    39bc:	cb e5       	ldi	r28, 0x5B	; 91
    39be:	d0 e0       	ldi	r29, 0x00	; 0
    39c0:	04 c0       	rjmp	.+8      	; 0x39ca <__do_global_dtors+0x10>
    39c2:	fe 01       	movw	r30, r28
    39c4:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <__tablejump2__>
    39c8:	21 96       	adiw	r28, 0x01	; 1
    39ca:	cc 35       	cpi	r28, 0x5C	; 92
    39cc:	d1 07       	cpc	r29, r17
    39ce:	c9 f7       	brne	.-14     	; 0x39c2 <__do_global_dtors+0x8>
    39d0:	f8 94       	cli

000039d2 <__stop_program>:
    39d2:	ff cf       	rjmp	.-2      	; 0x39d2 <__stop_program>
