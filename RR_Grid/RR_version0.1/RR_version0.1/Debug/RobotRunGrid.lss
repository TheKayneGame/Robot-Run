
RobotRunGrid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  00003156  000031ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003156  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e3  00800162  00800162  0000324c  2**0
                  ALLOC
  3 .stab         0000759c  00000000  00000000  0000324c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000a086  00000000  00000000  0000a7e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  0001486e  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000148b0  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000000f0  00000000  00000000  000148f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000211f  00000000  00000000  000149e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000d01  00000000  00000000  00016aff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001590  00000000  00000000  00017800  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000318  00000000  00000000  00018d90  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000830  00000000  00000000  000190a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000013f1  00000000  00000000  000198d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000d0  00000000  00000000  0001acc9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__dtors_end>
       4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
       8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
       c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      24:	0c 94 bc 10 	jmp	0x2178	; 0x2178 <__vector_9>
      28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      34:	0c 94 1e 0d 	jmp	0x1a3c	; 0x1a3c <__vector_13>
      38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      48:	0c 94 34 10 	jmp	0x2068	; 0x2068 <__vector_18>
      4c:	0c 94 97 10 	jmp	0x212e	; 0x212e <__vector_19>
      50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      68:	05 a8       	ldd	r0, Z+53	; 0x35
      6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
      6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <__stack+0xd3>
      6e:	4e b9       	out	0x0e, r20	; 14
      70:	38 36       	cpi	r19, 0x68	; 104
      72:	a9 02       	muls	r26, r25
      74:	0c 50       	subi	r16, 0x0C	; 12
      76:	b9 91       	ld	r27, Y+
      78:	86 88       	ldd	r8, Z+22	; 0x16
      7a:	08 3c       	cpi	r16, 0xC8	; 200
      7c:	a6 aa       	std	Z+54, r10	; 0x36
      7e:	aa 2a       	or	r10, r26
      80:	be 00       	.word	0x00be	; ????
      82:	00 00       	nop
      84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__trampolines_end>:
      86:	3e 66       	ori	r19, 0x6E	; 110
      88:	33 32       	cpi	r19, 0x23	; 35
      8a:	3e 3e       	cpi	r19, 0xEE	; 238
      8c:	61 33       	cpi	r22, 0x31	; 49
      8e:	32 00       	.word	0x0032	; ????

00000090 <__c.2399>:
      90:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

0000009a <__ctors_end>:
      9a:	9d 11       	cpse	r25, r13

0000009c <__dtors_end>:
      9c:	11 24       	eor	r1, r1
      9e:	1f be       	out	0x3f, r1	; 63
      a0:	cf ef       	ldi	r28, 0xFF	; 255
      a2:	d8 e0       	ldi	r29, 0x08	; 8
      a4:	de bf       	out	0x3e, r29	; 62
      a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
      a8:	11 e0       	ldi	r17, 0x01	; 1
      aa:	a0 e0       	ldi	r26, 0x00	; 0
      ac:	b1 e0       	ldi	r27, 0x01	; 1
      ae:	e6 e5       	ldi	r30, 0x56	; 86
      b0:	f1 e3       	ldi	r31, 0x31	; 49
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x10>
      b4:	05 90       	lpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a2 36       	cpi	r26, 0x62	; 98
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0xc>

000000be <__do_clear_bss>:
      be:	22 e0       	ldi	r18, 0x02	; 2
      c0:	a2 e6       	ldi	r26, 0x62	; 98
      c2:	b1 e0       	ldi	r27, 0x01	; 1
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	a5 34       	cpi	r26, 0x45	; 69
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	0e 94 0b 01 	call	0x216	; 0x216 <main>
      d2:	0c 94 9e 18 	jmp	0x313c	; 0x313c <__do_global_dtors>

000000d6 <__bad_interrupt>:
      d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <readGrid>:
	}
	driveRoute(route, 3);                                                                      //Drive back to home point
	play_from_program_space(PSTR(">g32>>c32"));                                                //End of order
}

void readGrid(int routes[4][4]){
      da:	fc 01       	movw	r30, r24
	
	routes[0][0] = 2;                                                                         //Home to grid
      dc:	42 e0       	ldi	r20, 0x02	; 2
      de:	50 e0       	ldi	r21, 0x00	; 0
      e0:	51 83       	std	Z+1, r21	; 0x01
      e2:	40 83       	st	Z, r20
	routes[0][1] = 3;
      e4:	83 e0       	ldi	r24, 0x03	; 3
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	93 83       	std	Z+3, r25	; 0x03
      ea:	82 83       	std	Z+2, r24	; 0x02
	routes[0][2] = 2;
      ec:	55 83       	std	Z+5, r21	; 0x05
      ee:	44 83       	std	Z+4, r20	; 0x04
	routes[0][3] = 5;
      f0:	25 e0       	ldi	r18, 0x05	; 5
      f2:	30 e0       	ldi	r19, 0x00	; 0
      f4:	37 83       	std	Z+7, r19	; 0x07
      f6:	26 83       	std	Z+6, r18	; 0x06
	
	routes[1][0] = 1;                                                                        //Home to charge point
      f8:	61 e0       	ldi	r22, 0x01	; 1
      fa:	70 e0       	ldi	r23, 0x00	; 0
      fc:	71 87       	std	Z+9, r23	; 0x09
      fe:	60 87       	std	Z+8, r22	; 0x08
	routes[1][1] = 1;
     100:	73 87       	std	Z+11, r23	; 0x0b
     102:	62 87       	std	Z+10, r22	; 0x0a
	routes[1][2] = 5;
     104:	35 87       	std	Z+13, r19	; 0x0d
     106:	24 87       	std	Z+12, r18	; 0x0c
	
	routes[2][0] = 3;                                                                        //Grid to charge point
     108:	91 8b       	std	Z+17, r25	; 0x11
     10a:	80 8b       	std	Z+16, r24	; 0x10
	routes[2][1] = 3;
     10c:	93 8b       	std	Z+19, r25	; 0x13
     10e:	82 8b       	std	Z+18, r24	; 0x12
	routes[2][2] = 5;
     110:	35 8b       	std	Z+21, r19	; 0x15
     112:	24 8b       	std	Z+20, r18	; 0x14
	
	routes[3][0] = 3;                                                                        //Grid to home
     114:	91 8f       	std	Z+25, r25	; 0x19
     116:	80 8f       	std	Z+24, r24	; 0x18
	routes[3][1] = 1;
     118:	73 8f       	std	Z+27, r23	; 0x1b
     11a:	62 8f       	std	Z+26, r22	; 0x1a
	routes[3][2] = 2;
     11c:	55 8f       	std	Z+29, r21	; 0x1d
     11e:	44 8f       	std	Z+28, r20	; 0x1c
	routes[3][3] = 5;
     120:	37 8f       	std	Z+31, r19	; 0x1f
     122:	26 8f       	std	Z+30, r18	; 0x1e
	
	routes[4][0] = 3;                                                                       //Charge point to grid
     124:	91 a3       	std	Z+33, r25	; 0x21
     126:	80 a3       	std	Z+32, r24	; 0x20
	routes[4][1] = 2;
     128:	53 a3       	std	Z+35, r21	; 0x23
     12a:	42 a3       	std	Z+34, r20	; 0x22
	routes[4][2] = 3;
     12c:	95 a3       	std	Z+37, r25	; 0x25
     12e:	84 a3       	std	Z+36, r24	; 0x24
	routes[4][3] = 5;	
     130:	37 a3       	std	Z+39, r19	; 0x27
     132:	26 a3       	std	Z+38, r18	; 0x26
     134:	08 95       	ret

00000136 <driveRoute>:
	                                                                                    
}

void driveRoute(int route[4][4], int flag){                                                //Drive the given route
     136:	ef 92       	push	r14
     138:	ff 92       	push	r15
     13a:	0f 93       	push	r16
     13c:	1f 93       	push	r17
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	eb 01       	movw	r28, r22
     144:	cc 0f       	add	r28, r28
     146:	dd 1f       	adc	r29, r29
     148:	cc 0f       	add	r28, r28
     14a:	dd 1f       	adc	r29, r29
     14c:	cc 0f       	add	r28, r28
     14e:	dd 1f       	adc	r29, r29
     150:	c8 0f       	add	r28, r24
     152:	d9 1f       	adc	r29, r25
	int intersectnum = 0, decision = LOW, resultTemp, turn = 0;                            //Flag selects the route
     154:	00 e0       	ldi	r16, 0x00	; 0
     156:	10 e0       	ldi	r17, 0x00	; 0
     158:	ee 24       	eor	r14, r14
     15a:	e3 94       	inc	r14
     15c:	f1 2c       	mov	r15, r1
     15e:	02 c0       	rjmp	.+4      	; 0x164 <driveRoute+0x2e>
     160:	0e 2d       	mov	r16, r14
     162:	1f 2d       	mov	r17, r15
		for(int i = 0; i < 3; i++){
			if(situations[i] == HIGH){                                                     //Counts number of possible turns
				turn++;
			}
		}
		followLine();
     164:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <followLine>
	}while(checkAfslag() == 0);                                                           //Keep following the line if the sensor does not detect any intersections
     168:	0e 94 37 06 	call	0xc6e	; 0xc6e <checkAfslag>
     16c:	89 2b       	or	r24, r25
     16e:	d1 f3       	breq	.-12     	; 0x164 <driveRoute+0x2e>
	
	resultTemp = checkAfslag();                                                           //If there is more than one option, the robot has to make a decision
     170:	0e 94 37 06 	call	0xc6e	; 0xc6e <checkAfslag>
	if(resultTemp > 1){                                                                    
     174:	02 97       	sbiw	r24, 0x02	; 2
     176:	4c f0       	brlt	.+18     	; 0x18a <driveRoute+0x54>
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
     178:	59 9a       	sbi	0x0b, 1	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     17a:	51 9a       	sbi	0x0a, 1	; 10
		decision = HIGH;
		red_led(1);
	}
	
	checkDistance();                                                                      //Keep checking for objects on the route
     17c:	0e 94 c4 06 	call	0xd88	; 0xd88 <checkDistance>
		
	if(checkAfslag() != 0){
     180:	0e 94 37 06 	call	0xc6e	; 0xc6e <checkAfslag>
     184:	89 2b       	or	r24, r25
     186:	51 f4       	brne	.+20     	; 0x19c <driveRoute+0x66>
     188:	3f c0       	rjmp	.+126    	; 0x208 <driveRoute+0xd2>
	if(resultTemp > 1){                                                                    
		decision = HIGH;
		red_led(1);
	}
	
	checkDistance();                                                                      //Keep checking for objects on the route
     18a:	0e 94 c4 06 	call	0xd88	; 0xd88 <checkDistance>
		
	if(checkAfslag() != 0){
     18e:	0e 94 37 06 	call	0xc6e	; 0xc6e <checkAfslag>
     192:	89 2b       	or	r24, r25
     194:	c9 f1       	breq	.+114    	; 0x208 <driveRoute+0xd2>
		
		if(decision == HIGH){                                                            //If there is more than one turn, the robot makes a decision depending on the values in the route array
     196:	01 30       	cpi	r16, 0x01	; 1
     198:	11 05       	cpc	r17, r1
     19a:	b1 f5       	brne	.+108    	; 0x208 <driveRoute+0xd2>
			switch(route[flag][intersectnum]){
     19c:	89 91       	ld	r24, Y+
     19e:	99 91       	ld	r25, Y+
     1a0:	82 30       	cpi	r24, 0x02	; 2
     1a2:	91 05       	cpc	r25, r1
     1a4:	a1 f0       	breq	.+40     	; 0x1ce <driveRoute+0x98>
     1a6:	1c f4       	brge	.+6      	; 0x1ae <driveRoute+0x78>
     1a8:	01 97       	sbiw	r24, 0x01	; 1
     1aa:	39 f0       	breq	.+14     	; 0x1ba <driveRoute+0x84>
     1ac:	2d c0       	rjmp	.+90     	; 0x208 <driveRoute+0xd2>
     1ae:	83 30       	cpi	r24, 0x03	; 3
     1b0:	91 05       	cpc	r25, r1
     1b2:	b9 f0       	breq	.+46     	; 0x1e2 <driveRoute+0xac>
     1b4:	05 97       	sbiw	r24, 0x05	; 5
     1b6:	f9 f0       	breq	.+62     	; 0x1f6 <driveRoute+0xc0>
     1b8:	27 c0       	rjmp	.+78     	; 0x208 <driveRoute+0xd2>
				case 1:
				motorControl(70, 'R', 0.30);
     1ba:	2a e9       	ldi	r18, 0x9A	; 154
     1bc:	39 e9       	ldi	r19, 0x99	; 153
     1be:	49 e9       	ldi	r20, 0x99	; 153
     1c0:	5e e3       	ldi	r21, 0x3E	; 62
     1c2:	62 e5       	ldi	r22, 0x52	; 82
     1c4:	86 e4       	ldi	r24, 0x46	; 70
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	0e 94 2c 01 	call	0x258	; 0x258 <motorControl>
				intersectnum++;
				goto Next;
     1cc:	c9 cf       	rjmp	.-110    	; 0x160 <driveRoute+0x2a>
				case 2:
				motorControl(70, 'L', 0.30);
     1ce:	2a e9       	ldi	r18, 0x9A	; 154
     1d0:	39 e9       	ldi	r19, 0x99	; 153
     1d2:	49 e9       	ldi	r20, 0x99	; 153
     1d4:	5e e3       	ldi	r21, 0x3E	; 62
     1d6:	6c e4       	ldi	r22, 0x4C	; 76
     1d8:	86 e4       	ldi	r24, 0x46	; 70
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	0e 94 2c 01 	call	0x258	; 0x258 <motorControl>
				intersectnum++;
				goto Next;
     1e0:	bf cf       	rjmp	.-130    	; 0x160 <driveRoute+0x2a>
				case 3:
				motorControl(80, 'F', 0.89);
     1e2:	2a e0       	ldi	r18, 0x0A	; 10
     1e4:	37 ed       	ldi	r19, 0xD7	; 215
     1e6:	43 e6       	ldi	r20, 0x63	; 99
     1e8:	5f e3       	ldi	r21, 0x3F	; 63
     1ea:	66 e4       	ldi	r22, 0x46	; 70
     1ec:	80 e5       	ldi	r24, 0x50	; 80
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	0e 94 2c 01 	call	0x258	; 0x258 <motorControl>
				intersectnum++;
				goto Next;
     1f4:	b5 cf       	rjmp	.-150    	; 0x160 <driveRoute+0x2a>
				case 5:
				motorControl(0, 'F', 0.89);    //stop
     1f6:	2a e0       	ldi	r18, 0x0A	; 10
     1f8:	37 ed       	ldi	r19, 0xD7	; 215
     1fa:	43 e6       	ldi	r20, 0x63	; 99
     1fc:	5f e3       	ldi	r21, 0x3F	; 63
     1fe:	66 e4       	ldi	r22, 0x46	; 70
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	0e 94 2c 01 	call	0x258	; 0x258 <motorControl>
				play_from_program_space(PSTR(">g32>>c32"));                            //Robot has reached destination

			}
		}
	}
}
     208:	df 91       	pop	r29
     20a:	cf 91       	pop	r28
     20c:	1f 91       	pop	r17
     20e:	0f 91       	pop	r16
     210:	ff 90       	pop	r15
     212:	ef 90       	pop	r14
     214:	08 95       	ret

00000216 <main>:
#include <pololu/3pi.h>
#include <avr/pgmspace.h>
#include <avr/io.h>
#include <avr/interrupt.h>

int main(){
     216:	cf 93       	push	r28
     218:	df 93       	push	r29
     21a:	cd b7       	in	r28, 0x3d	; 61
     21c:	de b7       	in	r29, 0x3e	; 62
     21e:	a0 97       	sbiw	r28, 0x20	; 32
     220:	0f b6       	in	r0, 0x3f	; 63
     222:	f8 94       	cli
     224:	de bf       	out	0x3e, r29	; 62
     226:	0f be       	out	0x3f, r0	; 63
     228:	cd bf       	out	0x3d, r28	; 61
	initialize();
     22a:	0e 94 79 05 	call	0xaf2	; 0xaf2 <initialize>
	
	int routes[4][4];
	readGrid(routes);
     22e:	ce 01       	movw	r24, r28
     230:	01 96       	adiw	r24, 0x01	; 1
     232:	0e 94 6d 00 	call	0xda	; 0xda <readGrid>
	int orderY[sizeOfOrder];
	wirCoord();
	wirMain(orderX, orderY);
	sortOrder(orderX, orderY);
	clear();*/
	driveRoute(routes, 1);
     236:	61 e0       	ldi	r22, 0x01	; 1
     238:	70 e0       	ldi	r23, 0x00	; 0
     23a:	ce 01       	movw	r24, r28
     23c:	01 96       	adiw	r24, 0x01	; 1
     23e:	0e 94 9b 00 	call	0x136	; 0x136 <driveRoute>
	//fetchOrder(orderX, orderY, routes);
	
     242:	80 e0       	ldi	r24, 0x00	; 0
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	a0 96       	adiw	r28, 0x20	; 32
     248:	0f b6       	in	r0, 0x3f	; 63
     24a:	f8 94       	cli
     24c:	de bf       	out	0x3e, r29	; 62
     24e:	0f be       	out	0x3f, r0	; 63
     250:	cd bf       	out	0x3d, r28	; 61
     252:	df 91       	pop	r29
     254:	cf 91       	pop	r28
     256:	08 95       	ret

00000258 <motorControl>:

int speedCurrent = 0;			//Defining the current speeds.
int speedCurrentRight = 0;
int speedCurrentLeft = 0;

void motorControl(int speed, char direction, float aggressionFactor){		//This function is an upgrade over the existing motor control function written by Pololu. This function moves the robot with an entered speed and acceleration time in a desired direction.
     258:	2f 92       	push	r2
     25a:	3f 92       	push	r3
     25c:	4f 92       	push	r4
     25e:	5f 92       	push	r5
     260:	6f 92       	push	r6
     262:	7f 92       	push	r7
     264:	8f 92       	push	r8
     266:	9f 92       	push	r9
     268:	af 92       	push	r10
     26a:	bf 92       	push	r11
     26c:	cf 92       	push	r12
     26e:	df 92       	push	r13
     270:	ef 92       	push	r14
     272:	ff 92       	push	r15
     274:	0f 93       	push	r16
     276:	1f 93       	push	r17
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
     27c:	cd b7       	in	r28, 0x3d	; 61
     27e:	de b7       	in	r29, 0x3e	; 62
     280:	66 97       	sbiw	r28, 0x16	; 22
     282:	0f b6       	in	r0, 0x3f	; 63
     284:	f8 94       	cli
     286:	de bf       	out	0x3e, r29	; 62
     288:	0f be       	out	0x3f, r0	; 63
     28a:	cd bf       	out	0x3d, r28	; 61
     28c:	1c 01       	movw	r2, r24
     28e:	29 83       	std	Y+1, r18	; 0x01
     290:	3a 83       	std	Y+2, r19	; 0x02
     292:	4b 83       	std	Y+3, r20	; 0x03
     294:	5c 83       	std	Y+4, r21	; 0x04
	int setSpeedRight = 0;
	int setSpeedLeft = 0;
	
	//directions direction;

	switch (direction){														//This switch case switches between the directions based on the user input.
     296:	66 34       	cpi	r22, 0x46	; 70
     298:	61 f0       	breq	.+24     	; 0x2b2 <motorControl+0x5a>
     29a:	20 f4       	brcc	.+8      	; 0x2a4 <motorControl+0x4c>
     29c:	62 34       	cpi	r22, 0x42	; 66
     29e:	09 f4       	brne	.+2      	; 0x2a2 <motorControl+0x4a>
     2a0:	95 c0       	rjmp	.+298    	; 0x3cc <motorControl+0x174>
     2a2:	08 c4       	rjmp	.+2064   	; 0xab4 <__stack+0x1b5>
     2a4:	6c 34       	cpi	r22, 0x4C	; 76
     2a6:	09 f4       	brne	.+2      	; 0x2aa <motorControl+0x52>
     2a8:	a9 c2       	rjmp	.+1362   	; 0x7fc <__LOCK_REGION_LENGTH__+0x3fc>
     2aa:	62 35       	cpi	r22, 0x52	; 82
     2ac:	09 f4       	brne	.+2      	; 0x2b0 <motorControl+0x58>
     2ae:	1b c1       	rjmp	.+566    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     2b0:	01 c4       	rjmp	.+2050   	; 0xab4 <__stack+0x1b5>
		case 'F':															//This case handles the forward movement of the 3PI robot.
		
		setSpeed = speed - speedCurrent;
     2b2:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <speedCurrent>
     2b6:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <speedCurrent+0x1>
     2ba:	91 01       	movw	r18, r2
     2bc:	28 1b       	sub	r18, r24
     2be:	39 0b       	sbc	r19, r25
     2c0:	45 e6       	ldi	r20, 0x65	; 101
     2c2:	50 e0       	ldi	r21, 0x00	; 0
     2c4:	5a 87       	std	Y+10, r21	; 0x0a
     2c6:	49 87       	std	Y+9, r20	; 0x09
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){	//This for loop increases the speed of the current speed to the desired speed with a total of a 100 increments.
     2c8:	41 2c       	mov	r4, r1
     2ca:	51 2c       	mov	r5, r1
     2cc:	32 01       	movw	r6, r4
			timerStart = get_ms();
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2*M_PI ) ) * sin ( 2* M_PI * accelerationCounter ) ) );		//This function transfers the input speed to a segmented speed increase based on the swept sinusoidal curve.
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     2ce:	03 2e       	mov	r0, r19
     2d0:	00 0c       	add	r0, r0
     2d2:	44 0b       	sbc	r20, r20
     2d4:	55 0b       	sbc	r21, r21
     2d6:	2d 83       	std	Y+5, r18	; 0x05
     2d8:	3e 83       	std	Y+6, r19	; 0x06
     2da:	4f 83       	std	Y+7, r20	; 0x07
     2dc:	58 87       	std	Y+8, r21	; 0x08
		case 'F':															//This case handles the forward movement of the 3PI robot.
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){	//This for loop increases the speed of the current speed to the desired speed with a total of a 100 increments.
			timerStart = get_ms();
     2de:	0e 94 3c 11 	call	0x2278	; 0x2278 <get_ms>
     2e2:	8b 01       	movw	r16, r22
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2*M_PI ) ) * sin ( 2* M_PI * accelerationCounter ) ) );		//This function transfers the input speed to a segmented speed increase based on the swept sinusoidal curve.
     2e4:	2b ed       	ldi	r18, 0xDB	; 219
     2e6:	3f e0       	ldi	r19, 0x0F	; 15
     2e8:	49 ec       	ldi	r20, 0xC9	; 201
     2ea:	50 e4       	ldi	r21, 0x40	; 64
     2ec:	c3 01       	movw	r24, r6
     2ee:	b2 01       	movw	r22, r4
     2f0:	0e 94 89 08 	call	0x1112	; 0x1112 <__mulsf3>
     2f4:	0e 94 f6 08 	call	0x11ec	; 0x11ec <sin>
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     2f8:	23 e8       	ldi	r18, 0x83	; 131
     2fa:	39 ef       	ldi	r19, 0xF9	; 249
     2fc:	42 e2       	ldi	r20, 0x22	; 34
     2fe:	5e e3       	ldi	r21, 0x3E	; 62
     300:	0e 94 89 08 	call	0x1112	; 0x1112 <__mulsf3>
     304:	9b 01       	movw	r18, r22
     306:	ac 01       	movw	r20, r24
     308:	c3 01       	movw	r24, r6
     30a:	b2 01       	movw	r22, r4
     30c:	0e 94 2a 07 	call	0xe54	; 0xe54 <__subsf3>
     310:	4b 01       	movw	r8, r22
     312:	5c 01       	movw	r10, r24
     314:	6d 81       	ldd	r22, Y+5	; 0x05
     316:	7e 81       	ldd	r23, Y+6	; 0x06
     318:	8f 81       	ldd	r24, Y+7	; 0x07
     31a:	98 85       	ldd	r25, Y+8	; 0x08
     31c:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__floatsisf>
     320:	9b 01       	movw	r18, r22
     322:	ac 01       	movw	r20, r24
     324:	c5 01       	movw	r24, r10
     326:	b4 01       	movw	r22, r8
     328:	0e 94 89 08 	call	0x1112	; 0x1112 <__mulsf3>
     32c:	4b 01       	movw	r8, r22
     32e:	5c 01       	movw	r10, r24
     330:	60 91 d3 01 	lds	r22, 0x01D3	; 0x8001d3 <speedCurrent>
     334:	70 91 d4 01 	lds	r23, 0x01D4	; 0x8001d4 <speedCurrent+0x1>
     338:	07 2e       	mov	r0, r23
     33a:	00 0c       	add	r0, r0
     33c:	88 0b       	sbc	r24, r24
     33e:	99 0b       	sbc	r25, r25
     340:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__floatsisf>
     344:	9b 01       	movw	r18, r22
     346:	ac 01       	movw	r20, r24
     348:	c5 01       	movw	r24, r10
     34a:	b4 01       	movw	r22, r8
     34c:	0e 94 2b 07 	call	0xe56	; 0xe56 <__addsf3>
     350:	0e 94 9c 07 	call	0xf38	; 0xf38 <__fixsfsi>
     354:	dc 01       	movw	r26, r24
     356:	cb 01       	movw	r24, r22
     358:	bc 01       	movw	r22, r24
     35a:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {											//This while loop temporarily freezes the system to make sure that the increments are spaced properly to facilitate a fluent and consequent increase in speed.
     35e:	48 01       	movw	r8, r16
     360:	11 0f       	add	r17, r17
     362:	aa 08       	sbc	r10, r10
     364:	bb 08       	sbc	r11, r11
     366:	0e 94 3c 11 	call	0x2278	; 0x2278 <get_ms>
     36a:	68 19       	sub	r22, r8
     36c:	79 09       	sbc	r23, r9
     36e:	8a 09       	sbc	r24, r10
     370:	9b 09       	sbc	r25, r11
     372:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__floatunsisf>
     376:	6b 01       	movw	r12, r22
     378:	7c 01       	movw	r14, r24
     37a:	20 e0       	ldi	r18, 0x00	; 0
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	40 e2       	ldi	r20, 0x20	; 32
     380:	51 e4       	ldi	r21, 0x41	; 65
     382:	69 81       	ldd	r22, Y+1	; 0x01
     384:	7a 81       	ldd	r23, Y+2	; 0x02
     386:	8b 81       	ldd	r24, Y+3	; 0x03
     388:	9c 81       	ldd	r25, Y+4	; 0x04
     38a:	0e 94 89 08 	call	0x1112	; 0x1112 <__mulsf3>
     38e:	9b 01       	movw	r18, r22
     390:	ac 01       	movw	r20, r24
     392:	c7 01       	movw	r24, r14
     394:	b6 01       	movw	r22, r12
     396:	0e 94 97 07 	call	0xf2e	; 0xf2e <__cmpsf2>
     39a:	88 23       	and	r24, r24
     39c:	24 f3       	brlt	.-56     	; 0x366 <motorControl+0x10e>
	switch (direction){														//This switch case switches between the directions based on the user input.
		case 'F':															//This case handles the forward movement of the 3PI robot.
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){	//This for loop increases the speed of the current speed to the desired speed with a total of a 100 increments.
     39e:	2a e0       	ldi	r18, 0x0A	; 10
     3a0:	37 ed       	ldi	r19, 0xD7	; 215
     3a2:	43 e2       	ldi	r20, 0x23	; 35
     3a4:	5c e3       	ldi	r21, 0x3C	; 60
     3a6:	c3 01       	movw	r24, r6
     3a8:	b2 01       	movw	r22, r4
     3aa:	0e 94 2b 07 	call	0xe56	; 0xe56 <__addsf3>
     3ae:	2b 01       	movw	r4, r22
     3b0:	3c 01       	movw	r6, r24
     3b2:	a9 85       	ldd	r26, Y+9	; 0x09
     3b4:	ba 85       	ldd	r27, Y+10	; 0x0a
     3b6:	11 97       	sbiw	r26, 0x01	; 1
     3b8:	ba 87       	std	Y+10, r27	; 0x0a
     3ba:	a9 87       	std	Y+9, r26	; 0x09
     3bc:	ab 2b       	or	r26, r27
     3be:	09 f0       	breq	.+2      	; 0x3c2 <motorControl+0x16a>
     3c0:	8e cf       	rjmp	.-228    	; 0x2de <motorControl+0x86>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {											//This while loop temporarily freezes the system to make sure that the increments are spaced properly to facilitate a fluent and consequent increase in speed.
				//Change the aggression factor to manipulate the acceleration time. A shorter time increases the overall jerk of the acceleration.
			}
		}
		speedCurrent = speed;
     3c2:	30 92 d4 01 	sts	0x01D4, r3	; 0x8001d4 <speedCurrent+0x1>
     3c6:	20 92 d3 01 	sts	0x01D3, r2	; 0x8001d3 <speedCurrent>
		break;
     3ca:	7a c3       	rjmp	.+1780   	; 0xac0 <__stack+0x1c1>
		
		case 'B':		//This case handles the backward movement of the robot. While the robot does not require this function in the standard routine, it is desired when operating the robot in manual mode.
		
		setSpeed = speed - speedCurrent;
     3cc:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <speedCurrent>
     3d0:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <speedCurrent+0x1>
     3d4:	91 01       	movw	r18, r2
     3d6:	28 1b       	sub	r18, r24
     3d8:	39 0b       	sbc	r19, r25
     3da:	45 e6       	ldi	r20, 0x65	; 101
     3dc:	50 e0       	ldi	r21, 0x00	; 0
     3de:	5a 87       	std	Y+10, r21	; 0x0a
     3e0:	49 87       	std	Y+9, r20	; 0x09
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     3e2:	41 2c       	mov	r4, r1
     3e4:	51 2c       	mov	r5, r1
     3e6:	32 01       	movw	r6, r4
			timerStart = get_ms();
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     3e8:	03 2e       	mov	r0, r19
     3ea:	00 0c       	add	r0, r0
     3ec:	44 0b       	sbc	r20, r20
     3ee:	55 0b       	sbc	r21, r21
     3f0:	2d 83       	std	Y+5, r18	; 0x05
     3f2:	3e 83       	std	Y+6, r19	; 0x06
     3f4:	4f 83       	std	Y+7, r20	; 0x07
     3f6:	58 87       	std	Y+8, r21	; 0x08
		case 'B':		//This case handles the backward movement of the robot. While the robot does not require this function in the standard routine, it is desired when operating the robot in manual mode.
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     3f8:	0e 94 3c 11 	call	0x2278	; 0x2278 <get_ms>
     3fc:	8b 01       	movw	r16, r22
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) );
     3fe:	2b ed       	ldi	r18, 0xDB	; 219
     400:	3f e0       	ldi	r19, 0x0F	; 15
     402:	49 ec       	ldi	r20, 0xC9	; 201
     404:	50 e4       	ldi	r21, 0x40	; 64
     406:	c3 01       	movw	r24, r6
     408:	b2 01       	movw	r22, r4
     40a:	0e 94 89 08 	call	0x1112	; 0x1112 <__mulsf3>
     40e:	0e 94 f6 08 	call	0x11ec	; 0x11ec <sin>
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     412:	23 e8       	ldi	r18, 0x83	; 131
     414:	39 ef       	ldi	r19, 0xF9	; 249
     416:	42 e2       	ldi	r20, 0x22	; 34
     418:	5e e3       	ldi	r21, 0x3E	; 62
     41a:	0e 94 89 08 	call	0x1112	; 0x1112 <__mulsf3>
     41e:	9b 01       	movw	r18, r22
     420:	ac 01       	movw	r20, r24
     422:	c3 01       	movw	r24, r6
     424:	b2 01       	movw	r22, r4
     426:	0e 94 2a 07 	call	0xe54	; 0xe54 <__subsf3>
     42a:	4b 01       	movw	r8, r22
     42c:	5c 01       	movw	r10, r24
     42e:	6d 81       	ldd	r22, Y+5	; 0x05
     430:	7e 81       	ldd	r23, Y+6	; 0x06
     432:	8f 81       	ldd	r24, Y+7	; 0x07
     434:	98 85       	ldd	r25, Y+8	; 0x08
     436:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__floatsisf>
     43a:	9b 01       	movw	r18, r22
     43c:	ac 01       	movw	r20, r24
     43e:	c5 01       	movw	r24, r10
     440:	b4 01       	movw	r22, r8
     442:	0e 94 89 08 	call	0x1112	; 0x1112 <__mulsf3>
     446:	4b 01       	movw	r8, r22
     448:	5c 01       	movw	r10, r24
     44a:	60 91 d3 01 	lds	r22, 0x01D3	; 0x8001d3 <speedCurrent>
     44e:	70 91 d4 01 	lds	r23, 0x01D4	; 0x8001d4 <speedCurrent+0x1>
     452:	07 2e       	mov	r0, r23
     454:	00 0c       	add	r0, r0
     456:	88 0b       	sbc	r24, r24
     458:	99 0b       	sbc	r25, r25
     45a:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__floatsisf>
     45e:	9b 01       	movw	r18, r22
     460:	ac 01       	movw	r20, r24
     462:	c5 01       	movw	r24, r10
     464:	b4 01       	movw	r22, r8
     466:	0e 94 2b 07 	call	0xe56	; 0xe56 <__addsf3>
     46a:	0e 94 9c 07 	call	0xf38	; 0xf38 <__fixsfsi>
     46e:	dc 01       	movw	r26, r24
     470:	cb 01       	movw	r24, r22
     472:	bc 01       	movw	r22, r24
     474:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     478:	48 01       	movw	r8, r16
     47a:	11 0f       	add	r17, r17
     47c:	aa 08       	sbc	r10, r10
     47e:	bb 08       	sbc	r11, r11
     480:	0e 94 3c 11 	call	0x2278	; 0x2278 <get_ms>
     484:	68 19       	sub	r22, r8
     486:	79 09       	sbc	r23, r9
     488:	8a 09       	sbc	r24, r10
     48a:	9b 09       	sbc	r25, r11
     48c:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__floatunsisf>
     490:	6b 01       	movw	r12, r22
     492:	7c 01       	movw	r14, r24
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	40 e2       	ldi	r20, 0x20	; 32
     49a:	51 e4       	ldi	r21, 0x41	; 65
     49c:	69 81       	ldd	r22, Y+1	; 0x01
     49e:	7a 81       	ldd	r23, Y+2	; 0x02
     4a0:	8b 81       	ldd	r24, Y+3	; 0x03
     4a2:	9c 81       	ldd	r25, Y+4	; 0x04
     4a4:	0e 94 89 08 	call	0x1112	; 0x1112 <__mulsf3>
     4a8:	9b 01       	movw	r18, r22
     4aa:	ac 01       	movw	r20, r24
     4ac:	c7 01       	movw	r24, r14
     4ae:	b6 01       	movw	r22, r12
     4b0:	0e 94 97 07 	call	0xf2e	; 0xf2e <__cmpsf2>
     4b4:	88 23       	and	r24, r24
     4b6:	24 f3       	brlt	.-56     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
		
		case 'B':		//This case handles the backward movement of the robot. While the robot does not require this function in the standard routine, it is desired when operating the robot in manual mode.
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     4b8:	2a e0       	ldi	r18, 0x0A	; 10
     4ba:	37 ed       	ldi	r19, 0xD7	; 215
     4bc:	43 e2       	ldi	r20, 0x23	; 35
     4be:	5c e3       	ldi	r21, 0x3C	; 60
     4c0:	c3 01       	movw	r24, r6
     4c2:	b2 01       	movw	r22, r4
     4c4:	0e 94 2b 07 	call	0xe56	; 0xe56 <__addsf3>
     4c8:	2b 01       	movw	r4, r22
     4ca:	3c 01       	movw	r6, r24
     4cc:	a9 85       	ldd	r26, Y+9	; 0x09
     4ce:	ba 85       	ldd	r27, Y+10	; 0x0a
     4d0:	11 97       	sbiw	r26, 0x01	; 1
     4d2:	ba 87       	std	Y+10, r27	; 0x0a
     4d4:	a9 87       	std	Y+9, r26	; 0x09
     4d6:	ab 2b       	or	r26, r27
     4d8:	09 f0       	breq	.+2      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
     4da:	8e cf       	rjmp	.-228    	; 0x3f8 <motorControl+0x1a0>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrent = speed;
     4dc:	30 92 d4 01 	sts	0x01D4, r3	; 0x8001d4 <speedCurrent+0x1>
     4e0:	20 92 d3 01 	sts	0x01D3, r2	; 0x8001d3 <speedCurrent>
		break;
     4e4:	ed c2       	rjmp	.+1498   	; 0xac0 <__stack+0x1c1>

		case 'R':		//This case handles the rotation of the robot 90 degrees to the right. The robot accelerates and decelerates with the same method used with forward and backward movement.
		
		setSpeedRight = speed + speedCurrentRight;
     4e6:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <speedCurrentRight>
     4ea:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <speedCurrentRight+0x1>
     4ee:	82 0d       	add	r24, r2
     4f0:	93 1d       	adc	r25, r3
		setSpeedLeft = speed - speedCurrentLeft;
     4f2:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <speedCurrentLeft>
     4f6:	30 91 d0 01 	lds	r19, 0x01D0	; 0x8001d0 <speedCurrentLeft+0x1>
     4fa:	a1 01       	movw	r20, r2
     4fc:	42 1b       	sub	r20, r18
     4fe:	53 0b       	sbc	r21, r19
     500:	9a 01       	movw	r18, r20
     502:	05 e6       	ldi	r16, 0x65	; 101
     504:	10 e0       	ldi	r17, 0x00	; 0
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     506:	1d 82       	std	Y+5, r1	; 0x05
     508:	1e 82       	std	Y+6, r1	; 0x06
     50a:	1f 82       	std	Y+7, r1	; 0x07
     50c:	18 86       	std	Y+8, r1	; 0x08
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			motorLeftSpeed = speedCurrent + (speedCurrentLeft + (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     50e:	ac 01       	movw	r20, r24
     510:	99 0f       	add	r25, r25
     512:	66 0b       	sbc	r22, r22
     514:	77 0b       	sbc	r23, r23
     516:	4d 87       	std	Y+13, r20	; 0x0d
     518:	5e 87       	std	Y+14, r21	; 0x0e
     51a:	6f 87       	std	Y+15, r22	; 0x0f
     51c:	78 8b       	std	Y+16, r23	; 0x10
     51e:	b9 01       	movw	r22, r18
     520:	33 0f       	add	r19, r19
     522:	88 0b       	sbc	r24, r24
     524:	99 0b       	sbc	r25, r25
     526:	69 8b       	std	Y+17, r22	; 0x11
     528:	7a 8b       	std	Y+18, r23	; 0x12
     52a:	8b 8b       	std	Y+19, r24	; 0x13
     52c:	9c 8b       	std	Y+20, r25	; 0x14
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     52e:	0e 94 3c 11 	call	0x2278	; 0x2278 <get_ms>
     532:	7e 8b       	std	Y+22, r23	; 0x16
     534:	6d 8b       	std	Y+21, r22	; 0x15
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
     536:	60 91 d3 01 	lds	r22, 0x01D3	; 0x8001d3 <speedCurrent>
     53a:	70 91 d4 01 	lds	r23, 0x01D4	; 0x8001d4 <speedCurrent+0x1>
     53e:	07 2e       	mov	r0, r23
     540:	00 0c       	add	r0, r0
     542:	88 0b       	sbc	r24, r24
     544:	99 0b       	sbc	r25, r25
     546:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__floatsisf>
     54a:	69 87       	std	Y+9, r22	; 0x09
     54c:	7a 87       	std	Y+10, r23	; 0x0a
     54e:	8b 87       	std	Y+11, r24	; 0x0b
     550:	9c 87       	std	Y+12, r25	; 0x0c
     552:	2b ed       	ldi	r18, 0xDB	; 219
     554:	3f e0       	ldi	r19, 0x0F	; 15
     556:	49 ec       	ldi	r20, 0xC9	; 201
     558:	50 e4       	ldi	r21, 0x40	; 64
     55a:	6d 81       	ldd	r22, Y+5	; 0x05
     55c:	7e 81       	ldd	r23, Y+6	; 0x06
     55e:	8f 81       	ldd	r24, Y+7	; 0x07
     560:	98 85       	ldd	r25, Y+8	; 0x08
     562:	0e 94 89 08 	call	0x1112	; 0x1112 <__mulsf3>
     566:	0e 94 f6 08 	call	0x11ec	; 0x11ec <sin>
     56a:	23 e8       	ldi	r18, 0x83	; 131
     56c:	39 ef       	ldi	r19, 0xF9	; 249
     56e:	42 e2       	ldi	r20, 0x22	; 34
     570:	5e e3       	ldi	r21, 0x3E	; 62
     572:	0e 94 89 08 	call	0x1112	; 0x1112 <__mulsf3>
     576:	2d 81       	ldd	r18, Y+5	; 0x05
     578:	3e 81       	ldd	r19, Y+6	; 0x06
     57a:	4f 81       	ldd	r20, Y+7	; 0x07
     57c:	58 85       	ldd	r21, Y+8	; 0x08
     57e:	0e 94 2b 07 	call	0xe56	; 0xe56 <__addsf3>
     582:	4b 01       	movw	r8, r22
     584:	5c 01       	movw	r10, r24
			
			motorLeftSpeed = speedCurrent + (speedCurrentLeft + (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     586:	60 91 d1 01 	lds	r22, 0x01D1	; 0x8001d1 <speedCurrentRight>
     58a:	70 91 d2 01 	lds	r23, 0x01D2	; 0x8001d2 <speedCurrentRight+0x1>
     58e:	07 2e       	mov	r0, r23
     590:	00 0c       	add	r0, r0
     592:	88 0b       	sbc	r24, r24
     594:	99 0b       	sbc	r25, r25
     596:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__floatsisf>
     59a:	2b 01       	movw	r4, r22
     59c:	3c 01       	movw	r6, r24
     59e:	6d 85       	ldd	r22, Y+13	; 0x0d
     5a0:	7e 85       	ldd	r23, Y+14	; 0x0e
     5a2:	8f 85       	ldd	r24, Y+15	; 0x0f
     5a4:	98 89       	ldd	r25, Y+16	; 0x10
     5a6:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__floatsisf>
     5aa:	a5 01       	movw	r20, r10
     5ac:	94 01       	movw	r18, r8
     5ae:	0e 94 89 08 	call	0x1112	; 0x1112 <__mulsf3>
     5b2:	9b 01       	movw	r18, r22
     5b4:	ac 01       	movw	r20, r24
     5b6:	c3 01       	movw	r24, r6
     5b8:	b2 01       	movw	r22, r4
     5ba:	0e 94 2a 07 	call	0xe54	; 0xe54 <__subsf3>
     5be:	29 85       	ldd	r18, Y+9	; 0x09
     5c0:	3a 85       	ldd	r19, Y+10	; 0x0a
     5c2:	4b 85       	ldd	r20, Y+11	; 0x0b
     5c4:	5c 85       	ldd	r21, Y+12	; 0x0c
     5c6:	0e 94 2b 07 	call	0xe56	; 0xe56 <__addsf3>
     5ca:	0e 94 9c 07 	call	0xf38	; 0xf38 <__fixsfsi>
     5ce:	2b 01       	movw	r4, r22
     5d0:	3c 01       	movw	r6, r24
     5d2:	60 91 cf 01 	lds	r22, 0x01CF	; 0x8001cf <speedCurrentLeft>
     5d6:	70 91 d0 01 	lds	r23, 0x01D0	; 0x8001d0 <speedCurrentLeft+0x1>
     5da:	07 2e       	mov	r0, r23
     5dc:	00 0c       	add	r0, r0
     5de:	88 0b       	sbc	r24, r24
     5e0:	99 0b       	sbc	r25, r25
     5e2:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__floatsisf>
     5e6:	6b 01       	movw	r12, r22
     5e8:	7c 01       	movw	r14, r24
     5ea:	69 89       	ldd	r22, Y+17	; 0x11
     5ec:	7a 89       	ldd	r23, Y+18	; 0x12
     5ee:	8b 89       	ldd	r24, Y+19	; 0x13
     5f0:	9c 89       	ldd	r25, Y+20	; 0x14
     5f2:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__floatsisf>
     5f6:	a5 01       	movw	r20, r10
     5f8:	94 01       	movw	r18, r8
     5fa:	0e 94 89 08 	call	0x1112	; 0x1112 <__mulsf3>
     5fe:	9b 01       	movw	r18, r22
     600:	ac 01       	movw	r20, r24
     602:	c7 01       	movw	r24, r14
     604:	b6 01       	movw	r22, r12
     606:	0e 94 2b 07 	call	0xe56	; 0xe56 <__addsf3>
     60a:	29 85       	ldd	r18, Y+9	; 0x09
     60c:	3a 85       	ldd	r19, Y+10	; 0x0a
     60e:	4b 85       	ldd	r20, Y+11	; 0x0b
     610:	5c 85       	ldd	r21, Y+12	; 0x0c
     612:	0e 94 2b 07 	call	0xe56	; 0xe56 <__addsf3>
     616:	0e 94 9c 07 	call	0xf38	; 0xf38 <__fixsfsi>
     61a:	dc 01       	movw	r26, r24
     61c:	cb 01       	movw	r24, r22
     61e:	b2 01       	movw	r22, r4
     620:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     624:	8d 89       	ldd	r24, Y+21	; 0x15
     626:	9e 89       	ldd	r25, Y+22	; 0x16
     628:	4c 01       	movw	r8, r24
     62a:	99 0f       	add	r25, r25
     62c:	aa 08       	sbc	r10, r10
     62e:	bb 08       	sbc	r11, r11
     630:	0e 94 3c 11 	call	0x2278	; 0x2278 <get_ms>
     634:	6b 01       	movw	r12, r22
     636:	7c 01       	movw	r14, r24
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	40 e2       	ldi	r20, 0x20	; 32
     63e:	51 e4       	ldi	r21, 0x41	; 65
     640:	69 81       	ldd	r22, Y+1	; 0x01
     642:	7a 81       	ldd	r23, Y+2	; 0x02
     644:	8b 81       	ldd	r24, Y+3	; 0x03
     646:	9c 81       	ldd	r25, Y+4	; 0x04
     648:	0e 94 89 08 	call	0x1112	; 0x1112 <__mulsf3>
     64c:	2b 01       	movw	r4, r22
     64e:	3c 01       	movw	r6, r24
     650:	c7 01       	movw	r24, r14
     652:	b6 01       	movw	r22, r12
     654:	68 19       	sub	r22, r8
     656:	79 09       	sbc	r23, r9
     658:	8a 09       	sbc	r24, r10
     65a:	9b 09       	sbc	r25, r11
     65c:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__floatunsisf>
     660:	a3 01       	movw	r20, r6
     662:	92 01       	movw	r18, r4
     664:	0e 94 97 07 	call	0xf2e	; 0xf2e <__cmpsf2>
     668:	88 23       	and	r24, r24
     66a:	14 f3       	brlt	.-60     	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
		case 'R':		//This case handles the rotation of the robot 90 degrees to the right. The robot accelerates and decelerates with the same method used with forward and backward movement.
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     66c:	2a e0       	ldi	r18, 0x0A	; 10
     66e:	37 ed       	ldi	r19, 0xD7	; 215
     670:	43 e2       	ldi	r20, 0x23	; 35
     672:	5c e3       	ldi	r21, 0x3C	; 60
     674:	6d 81       	ldd	r22, Y+5	; 0x05
     676:	7e 81       	ldd	r23, Y+6	; 0x06
     678:	8f 81       	ldd	r24, Y+7	; 0x07
     67a:	98 85       	ldd	r25, Y+8	; 0x08
     67c:	0e 94 2b 07 	call	0xe56	; 0xe56 <__addsf3>
     680:	6d 83       	std	Y+5, r22	; 0x05
     682:	7e 83       	std	Y+6, r23	; 0x06
     684:	8f 83       	std	Y+7, r24	; 0x07
     686:	98 87       	std	Y+8, r25	; 0x08
     688:	01 50       	subi	r16, 0x01	; 1
     68a:	11 09       	sbc	r17, r1
     68c:	09 f0       	breq	.+2      	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
     68e:	4f cf       	rjmp	.-354    	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = -speed;
     690:	88 27       	eor	r24, r24
     692:	99 27       	eor	r25, r25
     694:	82 19       	sub	r24, r2
     696:	93 09       	sbc	r25, r3
     698:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <speedCurrentRight+0x1>
     69c:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <speedCurrentRight>
		speedCurrentLeft = speed;
     6a0:	30 92 d0 01 	sts	0x01D0, r3	; 0x8001d0 <speedCurrentLeft+0x1>
     6a4:	20 92 cf 01 	sts	0x01CF, r2	; 0x8001cf <speedCurrentLeft>
     6a8:	05 e6       	ldi	r16, 0x65	; 101
     6aa:	10 e0       	ldi	r17, 0x00	; 0
		speed = 0;
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     6ac:	19 82       	std	Y+1, r1	; 0x01
     6ae:	1a 82       	std	Y+2, r1	; 0x02
     6b0:	1b 82       	std	Y+3, r1	; 0x03
     6b2:	1c 82       	std	Y+4, r1	; 0x04
			timerStart = get_ms();
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
     6b4:	9c 01       	movw	r18, r24
     6b6:	99 0f       	add	r25, r25
     6b8:	44 0b       	sbc	r20, r20
     6ba:	55 0b       	sbc	r21, r21
     6bc:	29 87       	std	Y+9, r18	; 0x09
     6be:	3a 87       	std	Y+10, r19	; 0x0a
     6c0:	4b 87       	std	Y+11, r20	; 0x0b
     6c2:	5c 87       	std	Y+12, r21	; 0x0c
     6c4:	c1 2c       	mov	r12, r1
     6c6:	d1 2c       	mov	r13, r1
     6c8:	76 01       	movw	r14, r12
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     6ca:	0e 94 3c 11 	call	0x2278	; 0x2278 <get_ms>
     6ce:	7e 87       	std	Y+14, r23	; 0x0e
     6d0:	6d 87       	std	Y+13, r22	; 0x0d
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
     6d2:	60 91 d3 01 	lds	r22, 0x01D3	; 0x8001d3 <speedCurrent>
     6d6:	70 91 d4 01 	lds	r23, 0x01D4	; 0x8001d4 <speedCurrent+0x1>
     6da:	07 2e       	mov	r0, r23
     6dc:	00 0c       	add	r0, r0
     6de:	88 0b       	sbc	r24, r24
     6e0:	99 0b       	sbc	r25, r25
     6e2:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__floatsisf>
     6e6:	69 83       	std	Y+1, r22	; 0x01
     6e8:	7a 83       	std	Y+2, r23	; 0x02
     6ea:	8b 83       	std	Y+3, r24	; 0x03
     6ec:	9c 83       	std	Y+4, r25	; 0x04
     6ee:	2b ed       	ldi	r18, 0xDB	; 219
     6f0:	3f e0       	ldi	r19, 0x0F	; 15
     6f2:	49 ec       	ldi	r20, 0xC9	; 201
     6f4:	50 e4       	ldi	r21, 0x40	; 64
     6f6:	c7 01       	movw	r24, r14
     6f8:	b6 01       	movw	r22, r12
     6fa:	0e 94 89 08 	call	0x1112	; 0x1112 <__mulsf3>
     6fe:	0e 94 f6 08 	call	0x11ec	; 0x11ec <sin>
     702:	23 e8       	ldi	r18, 0x83	; 131
     704:	39 ef       	ldi	r19, 0xF9	; 249
     706:	42 e2       	ldi	r20, 0x22	; 34
     708:	5e e3       	ldi	r21, 0x3E	; 62
     70a:	0e 94 89 08 	call	0x1112	; 0x1112 <__mulsf3>
     70e:	a7 01       	movw	r20, r14
     710:	96 01       	movw	r18, r12
     712:	0e 94 2b 07 	call	0xe56	; 0xe56 <__addsf3>
     716:	4b 01       	movw	r8, r22
     718:	5c 01       	movw	r10, r24
     71a:	69 85       	ldd	r22, Y+9	; 0x09
     71c:	7a 85       	ldd	r23, Y+10	; 0x0a
     71e:	8b 85       	ldd	r24, Y+11	; 0x0b
     720:	9c 85       	ldd	r25, Y+12	; 0x0c
     722:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__floatsisf>
     726:	9b 01       	movw	r18, r22
     728:	ac 01       	movw	r20, r24
     72a:	c5 01       	movw	r24, r10
     72c:	b4 01       	movw	r22, r8
     72e:	0e 94 89 08 	call	0x1112	; 0x1112 <__mulsf3>
     732:	4b 01       	movw	r8, r22
     734:	5c 01       	movw	r10, r24
			
			motorLeftSpeed = speedCurrent + (speedCurrentLeft + (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     736:	60 91 d1 01 	lds	r22, 0x01D1	; 0x8001d1 <speedCurrentRight>
     73a:	70 91 d2 01 	lds	r23, 0x01D2	; 0x8001d2 <speedCurrentRight+0x1>
     73e:	07 2e       	mov	r0, r23
     740:	00 0c       	add	r0, r0
     742:	88 0b       	sbc	r24, r24
     744:	99 0b       	sbc	r25, r25
     746:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__floatsisf>
     74a:	a5 01       	movw	r20, r10
     74c:	94 01       	movw	r18, r8
     74e:	0e 94 2a 07 	call	0xe54	; 0xe54 <__subsf3>
     752:	29 81       	ldd	r18, Y+1	; 0x01
     754:	3a 81       	ldd	r19, Y+2	; 0x02
     756:	4b 81       	ldd	r20, Y+3	; 0x03
     758:	5c 81       	ldd	r21, Y+4	; 0x04
     75a:	0e 94 2b 07 	call	0xe56	; 0xe56 <__addsf3>
     75e:	0e 94 9c 07 	call	0xf38	; 0xf38 <__fixsfsi>
     762:	6d 83       	std	Y+5, r22	; 0x05
     764:	7e 83       	std	Y+6, r23	; 0x06
     766:	8f 83       	std	Y+7, r24	; 0x07
     768:	98 87       	std	Y+8, r25	; 0x08
     76a:	60 91 cf 01 	lds	r22, 0x01CF	; 0x8001cf <speedCurrentLeft>
     76e:	70 91 d0 01 	lds	r23, 0x01D0	; 0x8001d0 <speedCurrentLeft+0x1>
     772:	07 2e       	mov	r0, r23
     774:	00 0c       	add	r0, r0
     776:	88 0b       	sbc	r24, r24
     778:	99 0b       	sbc	r25, r25
     77a:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__floatsisf>
     77e:	a5 01       	movw	r20, r10
     780:	94 01       	movw	r18, r8
     782:	0e 94 2b 07 	call	0xe56	; 0xe56 <__addsf3>
     786:	29 81       	ldd	r18, Y+1	; 0x01
     788:	3a 81       	ldd	r19, Y+2	; 0x02
     78a:	4b 81       	ldd	r20, Y+3	; 0x03
     78c:	5c 81       	ldd	r21, Y+4	; 0x04
     78e:	0e 94 2b 07 	call	0xe56	; 0xe56 <__addsf3>
     792:	0e 94 9c 07 	call	0xf38	; 0xf38 <__fixsfsi>
     796:	dc 01       	movw	r26, r24
     798:	cb 01       	movw	r24, r22
     79a:	6d 81       	ldd	r22, Y+5	; 0x05
     79c:	7e 81       	ldd	r23, Y+6	; 0x06
     79e:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     7a2:	4d 85       	ldd	r20, Y+13	; 0x0d
     7a4:	5e 85       	ldd	r21, Y+14	; 0x0e
     7a6:	4a 01       	movw	r8, r20
     7a8:	55 0f       	add	r21, r21
     7aa:	aa 08       	sbc	r10, r10
     7ac:	bb 08       	sbc	r11, r11
     7ae:	0e 94 3c 11 	call	0x2278	; 0x2278 <get_ms>
     7b2:	68 19       	sub	r22, r8
     7b4:	79 09       	sbc	r23, r9
     7b6:	8a 09       	sbc	r24, r10
     7b8:	9b 09       	sbc	r25, r11
     7ba:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__floatunsisf>
     7be:	9b 01       	movw	r18, r22
     7c0:	ac 01       	movw	r20, r24
     7c2:	c3 01       	movw	r24, r6
     7c4:	b2 01       	movw	r22, r4
     7c6:	0e 94 84 08 	call	0x1108	; 0x1108 <__gesf2>
     7ca:	18 16       	cp	r1, r24
     7cc:	84 f3       	brlt	.-32     	; 0x7ae <__LOCK_REGION_LENGTH__+0x3ae>
		speed = 0;
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     7ce:	2a e0       	ldi	r18, 0x0A	; 10
     7d0:	37 ed       	ldi	r19, 0xD7	; 215
     7d2:	43 e2       	ldi	r20, 0x23	; 35
     7d4:	5c e3       	ldi	r21, 0x3C	; 60
     7d6:	c7 01       	movw	r24, r14
     7d8:	b6 01       	movw	r22, r12
     7da:	0e 94 2b 07 	call	0xe56	; 0xe56 <__addsf3>
     7de:	6b 01       	movw	r12, r22
     7e0:	7c 01       	movw	r14, r24
     7e2:	01 50       	subi	r16, 0x01	; 1
     7e4:	11 09       	sbc	r17, r1
     7e6:	09 f0       	breq	.+2      	; 0x7ea <__LOCK_REGION_LENGTH__+0x3ea>
     7e8:	70 cf       	rjmp	.-288    	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = -speed;
     7ea:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <speedCurrentRight+0x1>
     7ee:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <speedCurrentRight>
		speedCurrentLeft = speed;
     7f2:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <speedCurrentLeft+0x1>
     7f6:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <speedCurrentLeft>
		
		break;
     7fa:	62 c1       	rjmp	.+708    	; 0xac0 <__stack+0x1c1>

		case 'L': //This case handles the rotation of the robot 90 degrees to the left. The robot accelerates and decelerates with the same method used with forward and backward movement.
		
		setSpeedRight = speed - speedCurrentRight;
     7fc:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <speedCurrentRight>
     800:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <speedCurrentRight+0x1>
     804:	91 01       	movw	r18, r2
     806:	28 1b       	sub	r18, r24
     808:	39 0b       	sbc	r19, r25
		setSpeedLeft = speed + speedCurrentLeft;
     80a:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <speedCurrentLeft>
     80e:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <speedCurrentLeft+0x1>
     812:	82 0d       	add	r24, r2
     814:	93 1d       	adc	r25, r3
     816:	65 e6       	ldi	r22, 0x65	; 101
     818:	70 e0       	ldi	r23, 0x00	; 0
     81a:	7a 8b       	std	Y+18, r23	; 0x12
     81c:	69 8b       	std	Y+17, r22	; 0x11
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     81e:	1d 82       	std	Y+5, r1	; 0x05
     820:	1e 82       	std	Y+6, r1	; 0x06
     822:	1f 82       	std	Y+7, r1	; 0x07
     824:	18 86       	std	Y+8, r1	; 0x08
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
			
			motorLeftSpeed = speedCurrentLeft - (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ));
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     826:	a9 01       	movw	r20, r18
     828:	33 0f       	add	r19, r19
     82a:	66 0b       	sbc	r22, r22
     82c:	77 0b       	sbc	r23, r23
     82e:	49 87       	std	Y+9, r20	; 0x09
     830:	5a 87       	std	Y+10, r21	; 0x0a
     832:	6b 87       	std	Y+11, r22	; 0x0b
     834:	7c 87       	std	Y+12, r23	; 0x0c
     836:	9c 01       	movw	r18, r24
     838:	99 0f       	add	r25, r25
     83a:	44 0b       	sbc	r20, r20
     83c:	55 0b       	sbc	r21, r21
     83e:	2d 87       	std	Y+13, r18	; 0x0d
     840:	3e 87       	std	Y+14, r19	; 0x0e
     842:	4f 87       	std	Y+15, r20	; 0x0f
     844:	58 8b       	std	Y+16, r21	; 0x10
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     846:	0e 94 3c 11 	call	0x2278	; 0x2278 <get_ms>
     84a:	8b 01       	movw	r16, r22
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
     84c:	2b ed       	ldi	r18, 0xDB	; 219
     84e:	3f e0       	ldi	r19, 0x0F	; 15
     850:	49 ec       	ldi	r20, 0xC9	; 201
     852:	50 e4       	ldi	r21, 0x40	; 64
     854:	6d 81       	ldd	r22, Y+5	; 0x05
     856:	7e 81       	ldd	r23, Y+6	; 0x06
     858:	8f 81       	ldd	r24, Y+7	; 0x07
     85a:	98 85       	ldd	r25, Y+8	; 0x08
     85c:	0e 94 89 08 	call	0x1112	; 0x1112 <__mulsf3>
     860:	0e 94 f6 08 	call	0x11ec	; 0x11ec <sin>
     864:	23 e8       	ldi	r18, 0x83	; 131
     866:	39 ef       	ldi	r19, 0xF9	; 249
     868:	42 e2       	ldi	r20, 0x22	; 34
     86a:	5e e3       	ldi	r21, 0x3E	; 62
     86c:	0e 94 89 08 	call	0x1112	; 0x1112 <__mulsf3>
     870:	2d 81       	ldd	r18, Y+5	; 0x05
     872:	3e 81       	ldd	r19, Y+6	; 0x06
     874:	4f 81       	ldd	r20, Y+7	; 0x07
     876:	58 85       	ldd	r21, Y+8	; 0x08
     878:	0e 94 2b 07 	call	0xe56	; 0xe56 <__addsf3>
     87c:	6b 01       	movw	r12, r22
     87e:	7c 01       	movw	r14, r24
			
			motorLeftSpeed = speedCurrentLeft - (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ));
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     880:	60 91 d1 01 	lds	r22, 0x01D1	; 0x8001d1 <speedCurrentRight>
     884:	70 91 d2 01 	lds	r23, 0x01D2	; 0x8001d2 <speedCurrentRight+0x1>
     888:	07 2e       	mov	r0, r23
     88a:	00 0c       	add	r0, r0
     88c:	88 0b       	sbc	r24, r24
     88e:	99 0b       	sbc	r25, r25
     890:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__floatsisf>
     894:	4b 01       	movw	r8, r22
     896:	5c 01       	movw	r10, r24
     898:	69 85       	ldd	r22, Y+9	; 0x09
     89a:	7a 85       	ldd	r23, Y+10	; 0x0a
     89c:	8b 85       	ldd	r24, Y+11	; 0x0b
     89e:	9c 85       	ldd	r25, Y+12	; 0x0c
     8a0:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__floatsisf>
     8a4:	a7 01       	movw	r20, r14
     8a6:	96 01       	movw	r18, r12
     8a8:	0e 94 89 08 	call	0x1112	; 0x1112 <__mulsf3>
     8ac:	9b 01       	movw	r18, r22
     8ae:	ac 01       	movw	r20, r24
     8b0:	c5 01       	movw	r24, r10
     8b2:	b4 01       	movw	r22, r8
     8b4:	0e 94 2b 07 	call	0xe56	; 0xe56 <__addsf3>
     8b8:	0e 94 9c 07 	call	0xf38	; 0xf38 <__fixsfsi>
     8bc:	4b 01       	movw	r8, r22
     8be:	5c 01       	movw	r10, r24
     8c0:	60 91 cf 01 	lds	r22, 0x01CF	; 0x8001cf <speedCurrentLeft>
     8c4:	70 91 d0 01 	lds	r23, 0x01D0	; 0x8001d0 <speedCurrentLeft+0x1>
     8c8:	07 2e       	mov	r0, r23
     8ca:	00 0c       	add	r0, r0
     8cc:	88 0b       	sbc	r24, r24
     8ce:	99 0b       	sbc	r25, r25
     8d0:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__floatsisf>
     8d4:	2b 01       	movw	r4, r22
     8d6:	3c 01       	movw	r6, r24
     8d8:	6d 85       	ldd	r22, Y+13	; 0x0d
     8da:	7e 85       	ldd	r23, Y+14	; 0x0e
     8dc:	8f 85       	ldd	r24, Y+15	; 0x0f
     8de:	98 89       	ldd	r25, Y+16	; 0x10
     8e0:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__floatsisf>
     8e4:	a7 01       	movw	r20, r14
     8e6:	96 01       	movw	r18, r12
     8e8:	0e 94 89 08 	call	0x1112	; 0x1112 <__mulsf3>
     8ec:	9b 01       	movw	r18, r22
     8ee:	ac 01       	movw	r20, r24
     8f0:	c3 01       	movw	r24, r6
     8f2:	b2 01       	movw	r22, r4
     8f4:	0e 94 2a 07 	call	0xe54	; 0xe54 <__subsf3>
     8f8:	0e 94 9c 07 	call	0xf38	; 0xf38 <__fixsfsi>
     8fc:	dc 01       	movw	r26, r24
     8fe:	cb 01       	movw	r24, r22
     900:	b4 01       	movw	r22, r8
     902:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     906:	48 01       	movw	r8, r16
     908:	11 0f       	add	r17, r17
     90a:	aa 08       	sbc	r10, r10
     90c:	bb 08       	sbc	r11, r11
     90e:	0e 94 3c 11 	call	0x2278	; 0x2278 <get_ms>
     912:	2b 01       	movw	r4, r22
     914:	3c 01       	movw	r6, r24
     916:	20 e0       	ldi	r18, 0x00	; 0
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	40 e2       	ldi	r20, 0x20	; 32
     91c:	51 e4       	ldi	r21, 0x41	; 65
     91e:	69 81       	ldd	r22, Y+1	; 0x01
     920:	7a 81       	ldd	r23, Y+2	; 0x02
     922:	8b 81       	ldd	r24, Y+3	; 0x03
     924:	9c 81       	ldd	r25, Y+4	; 0x04
     926:	0e 94 89 08 	call	0x1112	; 0x1112 <__mulsf3>
     92a:	6b 01       	movw	r12, r22
     92c:	7c 01       	movw	r14, r24
     92e:	c3 01       	movw	r24, r6
     930:	b2 01       	movw	r22, r4
     932:	68 19       	sub	r22, r8
     934:	79 09       	sbc	r23, r9
     936:	8a 09       	sbc	r24, r10
     938:	9b 09       	sbc	r25, r11
     93a:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__floatunsisf>
     93e:	a7 01       	movw	r20, r14
     940:	96 01       	movw	r18, r12
     942:	0e 94 97 07 	call	0xf2e	; 0xf2e <__cmpsf2>
     946:	88 23       	and	r24, r24
     948:	14 f3       	brlt	.-60     	; 0x90e <__stack+0xf>
		case 'L': //This case handles the rotation of the robot 90 degrees to the left. The robot accelerates and decelerates with the same method used with forward and backward movement.
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     94a:	2a e0       	ldi	r18, 0x0A	; 10
     94c:	37 ed       	ldi	r19, 0xD7	; 215
     94e:	43 e2       	ldi	r20, 0x23	; 35
     950:	5c e3       	ldi	r21, 0x3C	; 60
     952:	6d 81       	ldd	r22, Y+5	; 0x05
     954:	7e 81       	ldd	r23, Y+6	; 0x06
     956:	8f 81       	ldd	r24, Y+7	; 0x07
     958:	98 85       	ldd	r25, Y+8	; 0x08
     95a:	0e 94 2b 07 	call	0xe56	; 0xe56 <__addsf3>
     95e:	6d 83       	std	Y+5, r22	; 0x05
     960:	7e 83       	std	Y+6, r23	; 0x06
     962:	8f 83       	std	Y+7, r24	; 0x07
     964:	98 87       	std	Y+8, r25	; 0x08
     966:	a9 89       	ldd	r26, Y+17	; 0x11
     968:	ba 89       	ldd	r27, Y+18	; 0x12
     96a:	11 97       	sbiw	r26, 0x01	; 1
     96c:	ba 8b       	std	Y+18, r27	; 0x12
     96e:	a9 8b       	std	Y+17, r26	; 0x11
     970:	ab 2b       	or	r26, r27
     972:	09 f0       	breq	.+2      	; 0x976 <__stack+0x77>
     974:	68 cf       	rjmp	.-304    	; 0x846 <__LOCK_REGION_LENGTH__+0x446>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = speed;
     976:	30 92 d2 01 	sts	0x01D2, r3	; 0x8001d2 <speedCurrentRight+0x1>
     97a:	20 92 d1 01 	sts	0x01D1, r2	; 0x8001d1 <speedCurrentRight>
		speedCurrentLeft = -speed;
     97e:	31 94       	neg	r3
     980:	21 94       	neg	r2
     982:	31 08       	sbc	r3, r1
     984:	30 92 d0 01 	sts	0x01D0, r3	; 0x8001d0 <speedCurrentLeft+0x1>
     988:	20 92 cf 01 	sts	0x01CF, r2	; 0x8001cf <speedCurrentLeft>
     98c:	25 e6       	ldi	r18, 0x65	; 101
     98e:	30 e0       	ldi	r19, 0x00	; 0
		speed = 0;
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     990:	19 82       	std	Y+1, r1	; 0x01
     992:	1a 82       	std	Y+2, r1	; 0x02
     994:	1b 82       	std	Y+3, r1	; 0x03
     996:	1c 82       	std	Y+4, r1	; 0x04
			timerStart = get_ms();
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
     998:	a1 01       	movw	r20, r2
     99a:	33 0c       	add	r3, r3
     99c:	66 0b       	sbc	r22, r22
     99e:	77 0b       	sbc	r23, r23
     9a0:	4d 83       	std	Y+5, r20	; 0x05
     9a2:	5e 83       	std	Y+6, r21	; 0x06
     9a4:	6f 83       	std	Y+7, r22	; 0x07
     9a6:	78 87       	std	Y+8, r23	; 0x08
     9a8:	3a 87       	std	Y+10, r19	; 0x0a
     9aa:	29 87       	std	Y+9, r18	; 0x09
     9ac:	81 2c       	mov	r8, r1
     9ae:	91 2c       	mov	r9, r1
     9b0:	54 01       	movw	r10, r8
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     9b2:	0e 94 3c 11 	call	0x2278	; 0x2278 <get_ms>
     9b6:	8b 01       	movw	r16, r22
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
     9b8:	2b ed       	ldi	r18, 0xDB	; 219
     9ba:	3f e0       	ldi	r19, 0x0F	; 15
     9bc:	49 ec       	ldi	r20, 0xC9	; 201
     9be:	50 e4       	ldi	r21, 0x40	; 64
     9c0:	c5 01       	movw	r24, r10
     9c2:	b4 01       	movw	r22, r8
     9c4:	0e 94 89 08 	call	0x1112	; 0x1112 <__mulsf3>
     9c8:	0e 94 f6 08 	call	0x11ec	; 0x11ec <sin>
     9cc:	23 e8       	ldi	r18, 0x83	; 131
     9ce:	39 ef       	ldi	r19, 0xF9	; 249
     9d0:	42 e2       	ldi	r20, 0x22	; 34
     9d2:	5e e3       	ldi	r21, 0x3E	; 62
     9d4:	0e 94 89 08 	call	0x1112	; 0x1112 <__mulsf3>
     9d8:	a5 01       	movw	r20, r10
     9da:	94 01       	movw	r18, r8
     9dc:	0e 94 2b 07 	call	0xe56	; 0xe56 <__addsf3>
     9e0:	2b 01       	movw	r4, r22
     9e2:	3c 01       	movw	r6, r24
     9e4:	6d 81       	ldd	r22, Y+5	; 0x05
     9e6:	7e 81       	ldd	r23, Y+6	; 0x06
     9e8:	8f 81       	ldd	r24, Y+7	; 0x07
     9ea:	98 85       	ldd	r25, Y+8	; 0x08
     9ec:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__floatsisf>
     9f0:	9b 01       	movw	r18, r22
     9f2:	ac 01       	movw	r20, r24
     9f4:	c3 01       	movw	r24, r6
     9f6:	b2 01       	movw	r22, r4
     9f8:	0e 94 89 08 	call	0x1112	; 0x1112 <__mulsf3>
     9fc:	2b 01       	movw	r4, r22
     9fe:	3c 01       	movw	r6, r24
			
			motorLeftSpeed = speedCurrentLeft - (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ));
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     a00:	60 91 d1 01 	lds	r22, 0x01D1	; 0x8001d1 <speedCurrentRight>
     a04:	70 91 d2 01 	lds	r23, 0x01D2	; 0x8001d2 <speedCurrentRight+0x1>
     a08:	07 2e       	mov	r0, r23
     a0a:	00 0c       	add	r0, r0
     a0c:	88 0b       	sbc	r24, r24
     a0e:	99 0b       	sbc	r25, r25
     a10:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__floatsisf>
     a14:	a3 01       	movw	r20, r6
     a16:	92 01       	movw	r18, r4
     a18:	0e 94 2b 07 	call	0xe56	; 0xe56 <__addsf3>
     a1c:	0e 94 9c 07 	call	0xf38	; 0xf38 <__fixsfsi>
     a20:	69 83       	std	Y+1, r22	; 0x01
     a22:	7a 83       	std	Y+2, r23	; 0x02
     a24:	8b 83       	std	Y+3, r24	; 0x03
     a26:	9c 83       	std	Y+4, r25	; 0x04
     a28:	60 91 cf 01 	lds	r22, 0x01CF	; 0x8001cf <speedCurrentLeft>
     a2c:	70 91 d0 01 	lds	r23, 0x01D0	; 0x8001d0 <speedCurrentLeft+0x1>
     a30:	07 2e       	mov	r0, r23
     a32:	00 0c       	add	r0, r0
     a34:	88 0b       	sbc	r24, r24
     a36:	99 0b       	sbc	r25, r25
     a38:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <__floatsisf>
     a3c:	a3 01       	movw	r20, r6
     a3e:	92 01       	movw	r18, r4
     a40:	0e 94 2a 07 	call	0xe54	; 0xe54 <__subsf3>
     a44:	0e 94 9c 07 	call	0xf38	; 0xf38 <__fixsfsi>
     a48:	dc 01       	movw	r26, r24
     a4a:	cb 01       	movw	r24, r22
     a4c:	69 81       	ldd	r22, Y+1	; 0x01
     a4e:	7a 81       	ldd	r23, Y+2	; 0x02
     a50:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     a54:	28 01       	movw	r4, r16
     a56:	11 0f       	add	r17, r17
     a58:	66 08       	sbc	r6, r6
     a5a:	77 08       	sbc	r7, r7
     a5c:	0e 94 3c 11 	call	0x2278	; 0x2278 <get_ms>
     a60:	64 19       	sub	r22, r4
     a62:	75 09       	sbc	r23, r5
     a64:	86 09       	sbc	r24, r6
     a66:	97 09       	sbc	r25, r7
     a68:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__floatunsisf>
     a6c:	9b 01       	movw	r18, r22
     a6e:	ac 01       	movw	r20, r24
     a70:	c7 01       	movw	r24, r14
     a72:	b6 01       	movw	r22, r12
     a74:	0e 94 84 08 	call	0x1108	; 0x1108 <__gesf2>
     a78:	18 16       	cp	r1, r24
     a7a:	84 f3       	brlt	.-32     	; 0xa5c <__stack+0x15d>
		speed = 0;
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     a7c:	2a e0       	ldi	r18, 0x0A	; 10
     a7e:	37 ed       	ldi	r19, 0xD7	; 215
     a80:	43 e2       	ldi	r20, 0x23	; 35
     a82:	5c e3       	ldi	r21, 0x3C	; 60
     a84:	c5 01       	movw	r24, r10
     a86:	b4 01       	movw	r22, r8
     a88:	0e 94 2b 07 	call	0xe56	; 0xe56 <__addsf3>
     a8c:	4b 01       	movw	r8, r22
     a8e:	5c 01       	movw	r10, r24
     a90:	69 85       	ldd	r22, Y+9	; 0x09
     a92:	7a 85       	ldd	r23, Y+10	; 0x0a
     a94:	61 50       	subi	r22, 0x01	; 1
     a96:	71 09       	sbc	r23, r1
     a98:	7a 87       	std	Y+10, r23	; 0x0a
     a9a:	69 87       	std	Y+9, r22	; 0x09
     a9c:	67 2b       	or	r22, r23
     a9e:	09 f0       	breq	.+2      	; 0xaa2 <__stack+0x1a3>
     aa0:	88 cf       	rjmp	.-240    	; 0x9b2 <__stack+0xb3>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = speed;
     aa2:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <speedCurrentRight+0x1>
     aa6:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <speedCurrentRight>
		speedCurrentLeft = -speed;
     aaa:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <speedCurrentLeft+0x1>
     aae:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <speedCurrentLeft>
		break;
     ab2:	06 c0       	rjmp	.+12     	; 0xac0 <__stack+0x1c1>
		
		default:		//The default case puts the robot into a full stop and is only used in emergency situations. Using this case is not recommended as it applies the brakes instantaneously and therefore creates an extreme jerk in the acceleration curve.
		set_motors(0,0);
     ab4:	60 e0       	ldi	r22, 0x00	; 0
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <set_motors>
		break;
	}
}
     ac0:	66 96       	adiw	r28, 0x16	; 22
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	f8 94       	cli
     ac6:	de bf       	out	0x3e, r29	; 62
     ac8:	0f be       	out	0x3f, r0	; 63
     aca:	cd bf       	out	0x3d, r28	; 61
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	1f 91       	pop	r17
     ad2:	0f 91       	pop	r16
     ad4:	ff 90       	pop	r15
     ad6:	ef 90       	pop	r14
     ad8:	df 90       	pop	r13
     ada:	cf 90       	pop	r12
     adc:	bf 90       	pop	r11
     ade:	af 90       	pop	r10
     ae0:	9f 90       	pop	r9
     ae2:	8f 90       	pop	r8
     ae4:	7f 90       	pop	r7
     ae6:	6f 90       	pop	r6
     ae8:	5f 90       	pop	r5
     aea:	4f 90       	pop	r4
     aec:	3f 90       	pop	r3
     aee:	2f 90       	pop	r2
     af0:	08 95       	ret

00000af2 <initialize>:
#include "motoren.h"

int situations[3]={LOW, LOW, LOW};

void initialize()
{
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29

	
	unsigned int counter;
	pololu_3pi_init(2000);								//initialize sensor value from 0 to 2000
     af6:	80 ed       	ldi	r24, 0xD0	; 208
     af8:	97 e0       	ldi	r25, 0x07	; 7
     afa:	0e 94 99 11 	call	0x2332	; 0x2332 <pololu_3pi_init>
	
	while(!button_is_pressed(BUTTON_B))					//this function is activated until button B is pressed.
     afe:	1b c0       	rjmp	.+54     	; 0xb36 <initialize+0x44>
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
     b00:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <read_battery_millivolts_3pi>
     b04:	ec 01       	movw	r28, r24
	{
		int bat = read_battery_millivolts();
		clear();
     b06:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <clear>
		print_long(bat);								//print battery voltage in millivolts on the LCD
     b0a:	be 01       	movw	r22, r28
     b0c:	dd 0f       	add	r29, r29
     b0e:	88 0b       	sbc	r24, r24
     b10:	99 0b       	sbc	r25, r25
     b12:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <print_long>
		print("mV");
     b16:	81 e3       	ldi	r24, 0x31	; 49
     b18:	91 e0       	ldi	r25, 0x01	; 1
     b1a:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <print>
		lcd_goto_xy(0,1);
     b1e:	61 e0       	ldi	r22, 0x01	; 1
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <lcd_goto_xy>
		print("druk B");								//print instruction to continue
     b26:	84 e3       	ldi	r24, 0x34	; 52
     b28:	91 e0       	ldi	r25, 0x01	; 1
     b2a:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <print>
		delay_ms(100);
     b2e:	84 e6       	ldi	r24, 0x64	; 100
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	0e 94 04 11 	call	0x2208	; 0x2208 <delay_ms>

	
	unsigned int counter;
	pololu_3pi_init(2000);								//initialize sensor value from 0 to 2000
	
	while(!button_is_pressed(BUTTON_B))					//this function is activated until button B is pressed.
     b36:	80 e1       	ldi	r24, 0x10	; 16
     b38:	0e 94 06 10 	call	0x200c	; 0x200c <button_is_pressed>
     b3c:	88 23       	and	r24, r24
     b3e:	01 f3       	breq	.-64     	; 0xb00 <initialize+0xe>
		lcd_goto_xy(0,1);
		print("druk B");								//print instruction to continue
		delay_ms(100);
	}
	
	wait_for_button_release(BUTTON_B);					//button B is pressed
     b40:	80 e1       	ldi	r24, 0x10	; 16
     b42:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <wait_for_button_release>
	delay_ms(1000);
     b46:	88 ee       	ldi	r24, 0xE8	; 232
     b48:	93 e0       	ldi	r25, 0x03	; 3
     b4a:	0e 94 04 11 	call	0x2208	; 0x2208 <delay_ms>
     b4e:	cc ee       	ldi	r28, 0xEC	; 236
     b50:	df ef       	ldi	r29, 0xFF	; 255
	
	for(counter=0;counter<80;counter++)					//calibrating line sensors
	{
		if(counter < 20 || counter >= 60)
     b52:	c8 32       	cpi	r28, 0x28	; 40
     b54:	d1 05       	cpc	r29, r1
     b56:	38 f0       	brcs	.+14     	; 0xb66 <initialize+0x74>
		set_motors(40,-40);
     b58:	68 ed       	ldi	r22, 0xD8	; 216
     b5a:	7f ef       	ldi	r23, 0xFF	; 255
     b5c:	88 e2       	ldi	r24, 0x28	; 40
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <set_motors>
     b64:	06 c0       	rjmp	.+12     	; 0xb72 <initialize+0x80>
		else
		set_motors(-40,40);
     b66:	68 e2       	ldi	r22, 0x28	; 40
     b68:	70 e0       	ldi	r23, 0x00	; 0
     b6a:	88 ed       	ldi	r24, 0xD8	; 216
     b6c:	9f ef       	ldi	r25, 0xFF	; 255
     b6e:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <set_motors>
		calibrate_line_sensors(IR_EMITTERS_ON);
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	0e 94 5d 11 	call	0x22ba	; 0x22ba <calibrate_line_sensors>
		delay_ms(20);
     b78:	84 e1       	ldi	r24, 0x14	; 20
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	0e 94 04 11 	call	0x2208	; 0x2208 <delay_ms>
     b80:	21 96       	adiw	r28, 0x01	; 1
	}
	
	wait_for_button_release(BUTTON_B);					//button B is pressed
	delay_ms(1000);
	
	for(counter=0;counter<80;counter++)					//calibrating line sensors
     b82:	cc 33       	cpi	r28, 0x3C	; 60
     b84:	d1 05       	cpc	r29, r1
     b86:	29 f7       	brne	.-54     	; 0xb52 <initialize+0x60>
		set_motors(-40,40);
		calibrate_line_sensors(IR_EMITTERS_ON);
		delay_ms(20);
	}
	
	set_motors(0,0);
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <set_motors>
	
	while(!button_is_pressed(BUTTON_B))										//function is activated until button B is pressed
     b94:	15 c0       	rjmp	.+42     	; 0xbc0 <initialize+0xce>
	{
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);			//reading the sensors to determine the position of the robot
     b96:	61 e0       	ldi	r22, 0x01	; 1
     b98:	87 e3       	ldi	r24, 0x37	; 55
     b9a:	92 e0       	ldi	r25, 0x02	; 2
     b9c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <read_line>
     ba0:	ec 01       	movw	r28, r24
		clear();															//clear LCD
     ba2:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <clear>
		print("  ");
     ba6:	8b e3       	ldi	r24, 0x3B	; 59
     ba8:	91 e0       	ldi	r25, 0x01	; 1
     baa:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <print>
		print_long(position);												//print position of the robot compared to the line
     bae:	be 01       	movw	r22, r28
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <print_long>
		delay_ms(100);
     bb8:	84 e6       	ldi	r24, 0x64	; 100
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	0e 94 04 11 	call	0x2208	; 0x2208 <delay_ms>
		delay_ms(20);
	}
	
	set_motors(0,0);
	
	while(!button_is_pressed(BUTTON_B))										//function is activated until button B is pressed
     bc0:	80 e1       	ldi	r24, 0x10	; 16
     bc2:	0e 94 06 10 	call	0x200c	; 0x200c <button_is_pressed>
     bc6:	88 23       	and	r24, r24
     bc8:	31 f3       	breq	.-52     	; 0xb96 <initialize+0xa4>
		print("  ");
		print_long(position);												//print position of the robot compared to the line
		delay_ms(100);
	}
	
	wait_for_button_release(BUTTON_B);										//button B is pressed
     bca:	80 e1       	ldi	r24, 0x10	; 16
     bcc:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <wait_for_button_release>
	clear();																//clear LCD
     bd0:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <clear>
	print("Go!");
     bd4:	8e e3       	ldi	r24, 0x3E	; 62
     bd6:	91 e0       	ldi	r25, 0x01	; 1
     bd8:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <print>

}
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	08 95       	ret

00000be2 <followLine>:


void followLine()
{
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
	
	unsigned int pos = read_line(sensors,IR_EMITTERS_ON);					//write position of the robot to an unsigned int called pos
     be6:	61 e0       	ldi	r22, 0x01	; 1
     be8:	87 e3       	ldi	r24, 0x37	; 55
     bea:	92 e0       	ldi	r25, 0x02	; 2
     bec:	0e 94 63 11 	call	0x22c6	; 0x22c6 <read_line>
     bf0:	ec 01       	movw	r28, r24
	read_line_sensors(sensors,IR_EMITTERS_ON);								//read line sensors
     bf2:	61 e0       	ldi	r22, 0x01	; 1
     bf4:	87 e3       	ldi	r24, 0x37	; 55
     bf6:	92 e0       	ldi	r25, 0x02	; 2
     bf8:	0e 94 56 11 	call	0x22ac	; 0x22ac <read_line_sensors>


	clear();																//clear display
     bfc:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <clear>
	
	if(pos < 1950)
     c00:	ce 39       	cpi	r28, 0x9E	; 158
     c02:	87 e0       	ldi	r24, 0x07	; 7
     c04:	d8 07       	cpc	r29, r24
     c06:	98 f4       	brcc	.+38     	; 0xc2e <followLine+0x4c>
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
     c08:	5f 9a       	sbi	0x0b, 7	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     c0a:	57 9a       	sbi	0x0a, 7	; 10
	{
		
		green_led(1);

		if(pos < 1800)														//We are far to the right of the line: turn left.
     c0c:	c8 30       	cpi	r28, 0x08	; 8
     c0e:	d7 40       	sbci	r29, 0x07	; 7
     c10:	38 f4       	brcc	.+14     	; 0xc20 <followLine+0x3e>
		{
			set_motors(0,SPEED);
     c12:	6c e3       	ldi	r22, 0x3C	; 60
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <set_motors>
     c1e:	24 c0       	rjmp	.+72     	; 0xc68 <followLine+0x86>
		}
		else
		{
			set_motors(SLOW,SPEED);											//we are to the right of the line: turn left.
     c20:	6c e3       	ldi	r22, 0x3C	; 60
     c22:	70 e0       	ldi	r23, 0x00	; 0
     c24:	87 e3       	ldi	r24, 0x37	; 55
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <set_motors>
     c2c:	1d c0       	rjmp	.+58     	; 0xc68 <followLine+0x86>
		}
		
	}
	
	else if (pos > 2050)
     c2e:	c3 30       	cpi	r28, 0x03	; 3
     c30:	88 e0       	ldi	r24, 0x08	; 8
     c32:	d8 07       	cpc	r29, r24
     c34:	98 f0       	brcs	.+38     	; 0xc5c <followLine+0x7a>
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
     c36:	59 9a       	sbi	0x0b, 1	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     c38:	51 9a       	sbi	0x0a, 1	; 10
	{
		// We are far to the left of the line: turn right.
		red_led(1);
		
		if(pos > 2200)														//We are far to the left of the line: turn right
     c3a:	c9 39       	cpi	r28, 0x99	; 153
     c3c:	d8 40       	sbci	r29, 0x08	; 8
     c3e:	38 f0       	brcs	.+14     	; 0xc4e <followLine+0x6c>
		{
			set_motors(SPEED,0);
     c40:	60 e0       	ldi	r22, 0x00	; 0
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	8c e3       	ldi	r24, 0x3C	; 60
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <set_motors>
     c4c:	0d c0       	rjmp	.+26     	; 0xc68 <followLine+0x86>
		}
		else
		{
			set_motors(FAST,SLOW);											//We are to the left of the line: turn right
     c4e:	67 e3       	ldi	r22, 0x37	; 55
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	81 e4       	ldi	r24, 0x41	; 65
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <set_motors>
     c5a:	06 c0       	rjmp	.+12     	; 0xc68 <followLine+0x86>
		}
	}
	else
	{
		set_motors(SLOW,SLOW);												//we are on the line. move forward
     c5c:	67 e3       	ldi	r22, 0x37	; 55
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	87 e3       	ldi	r24, 0x37	; 55
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <set_motors>
		
	}

	
}
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	08 95       	ret

00000c6e <checkAfslag>:

int checkAfslag(){
     c6e:	0f 93       	push	r16
     c70:	1f 93       	push	r17
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
	int flag = 0;													//initialize flag and turn
	situations[0] =LOW;														//sensor left initialize
     c76:	e5 ed       	ldi	r30, 0xD5	; 213
     c78:	f1 e0       	ldi	r31, 0x01	; 1
     c7a:	11 82       	std	Z+1, r1	; 0x01
     c7c:	10 82       	st	Z, r1
	situations[1] =LOW;														//sensor center initialize
     c7e:	13 82       	std	Z+3, r1	; 0x03
     c80:	12 82       	std	Z+2, r1	; 0x02
	situations[2] =LOW;														//sensor right initialize
     c82:	15 82       	std	Z+5, r1	; 0x05
     c84:	14 82       	std	Z+4, r1	; 0x04
	read_line_sensors(sensors,IR_EMITTERS_ON);								//read line sensors
     c86:	61 e0       	ldi	r22, 0x01	; 1
     c88:	87 e3       	ldi	r24, 0x37	; 55
     c8a:	92 e0       	ldi	r25, 0x02	; 2
     c8c:	0e 94 56 11 	call	0x22ac	; 0x22ac <read_line_sensors>
	int rangeHigh = 1000;													//set high range to 1000
	
	if(SENSOR_L > rangeHigh){
     c90:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <sensors>
     c94:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <sensors+0x1>
     c98:	89 3e       	cpi	r24, 0xE9	; 233
     c9a:	93 40       	sbci	r25, 0x03	; 3
     c9c:	48 f0       	brcs	.+18     	; 0xcb0 <checkAfslag+0x42>
		situations[0] = HIGH;
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <situations+0x1>
     ca6:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <situations>
		flag = 1;															//sensor left is high, flag = 1
     caa:	c1 e0       	ldi	r28, 0x01	; 1
     cac:	d0 e0       	ldi	r29, 0x00	; 0
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <checkAfslag+0x46>

	
}

int checkAfslag(){
	int flag = 0;													//initialize flag and turn
     cb0:	c0 e0       	ldi	r28, 0x00	; 0
     cb2:	d0 e0       	ldi	r29, 0x00	; 0
	
	if(SENSOR_L > rangeHigh){
		situations[0] = HIGH;
		flag = 1;															//sensor left is high, flag = 1
	}
	if(SENSOR_C_C > rangeHigh){
     cb4:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sensors+0x4>
     cb8:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sensors+0x5>
     cbc:	89 3e       	cpi	r24, 0xE9	; 233
     cbe:	93 40       	sbci	r25, 0x03	; 3
     cc0:	40 f0       	brcs	.+16     	; 0xcd2 <checkAfslag+0x64>
		situations[1] = HIGH;
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <situations+0x3>
     cca:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <situations+0x2>
		flag = 2;															//sensor center is high, flag = 2
     cce:	c2 e0       	ldi	r28, 0x02	; 2
     cd0:	d0 e0       	ldi	r29, 0x00	; 0
	}
	if(SENSOR_R > rangeHigh){
     cd2:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <sensors+0x8>
     cd6:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <sensors+0x9>
     cda:	89 3e       	cpi	r24, 0xE9	; 233
     cdc:	93 40       	sbci	r25, 0x03	; 3
     cde:	40 f0       	brcs	.+16     	; 0xcf0 <checkAfslag+0x82>
		situations[2] = HIGH;
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	90 93 da 01 	sts	0x01DA, r25	; 0x8001da <situations+0x5>
     ce8:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <situations+0x4>
		flag = 3;															//sensor right is high, flag = 3
     cec:	c3 e0       	ldi	r28, 0x03	; 3
     cee:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	
	
	print_long(flag);														//print flag to LCD
     cf0:	be 01       	movw	r22, r28
     cf2:	0d 2e       	mov	r0, r29
     cf4:	00 0c       	add	r0, r0
     cf6:	88 0b       	sbc	r24, r24
     cf8:	99 0b       	sbc	r25, r25
     cfa:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <print_long>
	lcd_goto_xy(0,1);
     cfe:	61 e0       	ldi	r22, 0x01	; 1
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <lcd_goto_xy>
	print_long(situations[0]);												//print sensor data (0/1) to LCD
     d06:	05 ed       	ldi	r16, 0xD5	; 213
     d08:	11 e0       	ldi	r17, 0x01	; 1
     d0a:	f8 01       	movw	r30, r16
     d0c:	60 81       	ld	r22, Z
     d0e:	71 81       	ldd	r23, Z+1	; 0x01
     d10:	07 2e       	mov	r0, r23
     d12:	00 0c       	add	r0, r0
     d14:	88 0b       	sbc	r24, r24
     d16:	99 0b       	sbc	r25, r25
     d18:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <print_long>
	print_long(situations[1]);
     d1c:	f8 01       	movw	r30, r16
     d1e:	62 81       	ldd	r22, Z+2	; 0x02
     d20:	73 81       	ldd	r23, Z+3	; 0x03
     d22:	07 2e       	mov	r0, r23
     d24:	00 0c       	add	r0, r0
     d26:	88 0b       	sbc	r24, r24
     d28:	99 0b       	sbc	r25, r25
     d2a:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <print_long>
	print_long(situations[2]);
     d2e:	f8 01       	movw	r30, r16
     d30:	64 81       	ldd	r22, Z+4	; 0x04
     d32:	75 81       	ldd	r23, Z+5	; 0x05
     d34:	07 2e       	mov	r0, r23
     d36:	00 0c       	add	r0, r0
     d38:	88 0b       	sbc	r24, r24
     d3a:	99 0b       	sbc	r25, r25
     d3c:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <print_long>
	clear();																//clear LCD
     d40:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <clear>
	return flag;
}
     d44:	ce 01       	movw	r24, r28
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	1f 91       	pop	r17
     d4c:	0f 91       	pop	r16
     d4e:	08 95       	ret

00000d50 <moveObject>:
}


void moveObject()
{
	while(!button_is_pressed(BUTTON_B))
     d50:	12 c0       	rjmp	.+36     	; 0xd76 <moveObject+0x26>
	{
		clear();
     d52:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <clear>
		print("druk op");													//print instruction to LCD
     d56:	82 e4       	ldi	r24, 0x42	; 66
     d58:	91 e0       	ldi	r25, 0x01	; 1
     d5a:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <print>
		lcd_goto_xy(0,1);
     d5e:	61 e0       	ldi	r22, 0x01	; 1
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <lcd_goto_xy>
		print("B knop");
     d66:	8a e4       	ldi	r24, 0x4A	; 74
     d68:	91 e0       	ldi	r25, 0x01	; 1
     d6a:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <print>
		delay_ms(100);
     d6e:	84 e6       	ldi	r24, 0x64	; 100
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	0e 94 04 11 	call	0x2208	; 0x2208 <delay_ms>
}


void moveObject()
{
	while(!button_is_pressed(BUTTON_B))
     d76:	80 e1       	ldi	r24, 0x10	; 16
     d78:	0e 94 06 10 	call	0x200c	; 0x200c <button_is_pressed>
     d7c:	88 23       	and	r24, r24
     d7e:	49 f3       	breq	.-46     	; 0xd52 <moveObject+0x2>
		print("druk op");													//print instruction to LCD
		lcd_goto_xy(0,1);
		print("B knop");
		delay_ms(100);
	}
	wait_for_button_release(BUTTON_B);										//when button is released the robot will continue driving
     d80:	80 e1       	ldi	r24, 0x10	; 16
     d82:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <wait_for_button_release>
     d86:	08 95       	ret

00000d88 <checkDistance>:


int checkDistance()
{
	
	sensorDistance = analog_read(ADCH5);									//write sensor data to sensorDistance
     d88:	85 e0       	ldi	r24, 0x05	; 5
     d8a:	0e 94 cb 09 	call	0x1396	; 0x1396 <analog_read>
     d8e:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <sensorDistance+0x1>
     d92:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <sensorDistance>
	sensorDistance2 = analog_read(ADCH7);									//write sensor data to sensorDistance2
     d96:	87 e0       	ldi	r24, 0x07	; 7
     d98:	0e 94 cb 09 	call	0x1396	; 0x1396 <analog_read>
     d9c:	9c 01       	movw	r18, r24
     d9e:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <sensorDistance2+0x1>
     da2:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <sensorDistance2>
	
	distance = (2076/(sensorDistance - 11));								//convert sensor data to distance in cm
     da6:	60 91 df 01 	lds	r22, 0x01DF	; 0x8001df <sensorDistance>
     daa:	70 91 e0 01 	lds	r23, 0x01E0	; 0x8001e0 <sensorDistance+0x1>
     dae:	6b 50       	subi	r22, 0x0B	; 11
     db0:	71 09       	sbc	r23, r1
     db2:	ec e1       	ldi	r30, 0x1C	; 28
     db4:	f8 e0       	ldi	r31, 0x08	; 8
     db6:	cf 01       	movw	r24, r30
     db8:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__divmodhi4>
     dbc:	70 93 e2 01 	sts	0x01E2, r23	; 0x8001e2 <distance+0x1>
     dc0:	60 93 e1 01 	sts	0x01E1, r22	; 0x8001e1 <distance>
	distance2 = (2076/(sensorDistance2 - 11));								//convert sensor data to distance in cm
     dc4:	b9 01       	movw	r22, r18
     dc6:	6b 50       	subi	r22, 0x0B	; 11
     dc8:	71 09       	sbc	r23, r1
     dca:	cf 01       	movw	r24, r30
     dcc:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__divmodhi4>
     dd0:	70 93 e6 01 	sts	0x01E6, r23	; 0x8001e6 <distance2+0x1>
     dd4:	60 93 e5 01 	sts	0x01E5, r22	; 0x8001e5 <distance2>
	
	clear();																//clear LCD
     dd8:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <clear>
	
	
	if(distance < close && distance > veryClose)						    //compares if distance is less than 20 cm & bigger than 10 cm
     ddc:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <distance>
     de0:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <distance+0x1>
     de4:	9c 01       	movw	r18, r24
     de6:	2b 50       	subi	r18, 0x0B	; 11
     de8:	31 09       	sbc	r19, r1
     dea:	29 30       	cpi	r18, 0x09	; 9
     dec:	31 05       	cpc	r19, r1
     dee:	78 f4       	brcc	.+30     	; 0xe0e <checkDistance+0x86>
	{
		clear();
     df0:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <clear>
		play_from_program_space(PSTR(">g32>>c32"));							//sound warning
     df4:	80 e9       	ldi	r24, 0x90	; 144
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <play_from_program_space>
		print("dichtbij");													//warning on LCD
     dfc:	81 e5       	ldi	r24, 0x51	; 81
     dfe:	91 e0       	ldi	r25, 0x01	; 1
     e00:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <print>
		delay_ms(200);
     e04:	88 ec       	ldi	r24, 0xC8	; 200
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	0e 94 04 11 	call	0x2208	; 0x2208 <delay_ms>
     e0c:	20 c0       	rjmp	.+64     	; 0xe4e <checkDistance+0xc6>
	}
	else if(distance < veryClose && distance > 0)						    //compares if distance is less than 10 cm
     e0e:	01 97       	sbiw	r24, 0x01	; 1
     e10:	09 97       	sbiw	r24, 0x09	; 9
     e12:	e8 f4       	brcc	.+58     	; 0xe4e <checkDistance+0xc6>
	{
		clear();
     e14:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <clear>
		play_from_program_space(PSTR(">f32>>a32"));							//sound warning
     e18:	86 e8       	ldi	r24, 0x86	; 134
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <play_from_program_space>
		print("heeeel");													//warning on LCD
     e20:	8a e5       	ldi	r24, 0x5A	; 90
     e22:	91 e0       	ldi	r25, 0x01	; 1
     e24:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <print>
		lcd_goto_xy(0,1);
     e28:	61 e0       	ldi	r22, 0x01	; 1
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <lcd_goto_xy>
		print("dichtbij");
     e30:	81 e5       	ldi	r24, 0x51	; 81
     e32:	91 e0       	ldi	r25, 0x01	; 1
     e34:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <print>
		motorControl(STOP,'F',0.89);										//robot brakes
     e38:	2a e0       	ldi	r18, 0x0A	; 10
     e3a:	37 ed       	ldi	r19, 0xD7	; 215
     e3c:	43 e6       	ldi	r20, 0x63	; 99
     e3e:	5f e3       	ldi	r21, 0x3F	; 63
     e40:	66 e4       	ldi	r22, 0x46	; 70
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 2c 01 	call	0x258	; 0x258 <motorControl>
		moveObject();														//function that waits until the oject is removed
     e4a:	0e 94 a8 06 	call	0xd50	; 0xd50 <moveObject>
	}

	return 0;

}
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	08 95       	ret

00000e54 <__subsf3>:
     e54:	50 58       	subi	r21, 0x80	; 128

00000e56 <__addsf3>:
     e56:	bb 27       	eor	r27, r27
     e58:	aa 27       	eor	r26, r26
     e5a:	0e 94 42 07 	call	0xe84	; 0xe84 <__addsf3x>
     e5e:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <__fp_round>
     e62:	0e 94 3c 08 	call	0x1078	; 0x1078 <__fp_pscA>
     e66:	38 f0       	brcs	.+14     	; 0xe76 <__addsf3+0x20>
     e68:	0e 94 43 08 	call	0x1086	; 0x1086 <__fp_pscB>
     e6c:	20 f0       	brcs	.+8      	; 0xe76 <__addsf3+0x20>
     e6e:	39 f4       	brne	.+14     	; 0xe7e <__addsf3+0x28>
     e70:	9f 3f       	cpi	r25, 0xFF	; 255
     e72:	19 f4       	brne	.+6      	; 0xe7a <__addsf3+0x24>
     e74:	26 f4       	brtc	.+8      	; 0xe7e <__addsf3+0x28>
     e76:	0c 94 39 08 	jmp	0x1072	; 0x1072 <__fp_nan>
     e7a:	0e f4       	brtc	.+2      	; 0xe7e <__addsf3+0x28>
     e7c:	e0 95       	com	r30
     e7e:	e7 fb       	bst	r30, 7
     e80:	0c 94 33 08 	jmp	0x1066	; 0x1066 <__fp_inf>

00000e84 <__addsf3x>:
     e84:	e9 2f       	mov	r30, r25
     e86:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__fp_split3>
     e8a:	58 f3       	brcs	.-42     	; 0xe62 <__addsf3+0xc>
     e8c:	ba 17       	cp	r27, r26
     e8e:	62 07       	cpc	r22, r18
     e90:	73 07       	cpc	r23, r19
     e92:	84 07       	cpc	r24, r20
     e94:	95 07       	cpc	r25, r21
     e96:	20 f0       	brcs	.+8      	; 0xea0 <__addsf3x+0x1c>
     e98:	79 f4       	brne	.+30     	; 0xeb8 <__addsf3x+0x34>
     e9a:	a6 f5       	brtc	.+104    	; 0xf04 <__addsf3x+0x80>
     e9c:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__fp_zero>
     ea0:	0e f4       	brtc	.+2      	; 0xea4 <__addsf3x+0x20>
     ea2:	e0 95       	com	r30
     ea4:	0b 2e       	mov	r0, r27
     ea6:	ba 2f       	mov	r27, r26
     ea8:	a0 2d       	mov	r26, r0
     eaa:	0b 01       	movw	r0, r22
     eac:	b9 01       	movw	r22, r18
     eae:	90 01       	movw	r18, r0
     eb0:	0c 01       	movw	r0, r24
     eb2:	ca 01       	movw	r24, r20
     eb4:	a0 01       	movw	r20, r0
     eb6:	11 24       	eor	r1, r1
     eb8:	ff 27       	eor	r31, r31
     eba:	59 1b       	sub	r21, r25
     ebc:	99 f0       	breq	.+38     	; 0xee4 <__addsf3x+0x60>
     ebe:	59 3f       	cpi	r21, 0xF9	; 249
     ec0:	50 f4       	brcc	.+20     	; 0xed6 <__addsf3x+0x52>
     ec2:	50 3e       	cpi	r21, 0xE0	; 224
     ec4:	68 f1       	brcs	.+90     	; 0xf20 <__addsf3x+0x9c>
     ec6:	1a 16       	cp	r1, r26
     ec8:	f0 40       	sbci	r31, 0x00	; 0
     eca:	a2 2f       	mov	r26, r18
     ecc:	23 2f       	mov	r18, r19
     ece:	34 2f       	mov	r19, r20
     ed0:	44 27       	eor	r20, r20
     ed2:	58 5f       	subi	r21, 0xF8	; 248
     ed4:	f3 cf       	rjmp	.-26     	; 0xebc <__addsf3x+0x38>
     ed6:	46 95       	lsr	r20
     ed8:	37 95       	ror	r19
     eda:	27 95       	ror	r18
     edc:	a7 95       	ror	r26
     ede:	f0 40       	sbci	r31, 0x00	; 0
     ee0:	53 95       	inc	r21
     ee2:	c9 f7       	brne	.-14     	; 0xed6 <__addsf3x+0x52>
     ee4:	7e f4       	brtc	.+30     	; 0xf04 <__addsf3x+0x80>
     ee6:	1f 16       	cp	r1, r31
     ee8:	ba 0b       	sbc	r27, r26
     eea:	62 0b       	sbc	r22, r18
     eec:	73 0b       	sbc	r23, r19
     eee:	84 0b       	sbc	r24, r20
     ef0:	ba f0       	brmi	.+46     	; 0xf20 <__addsf3x+0x9c>
     ef2:	91 50       	subi	r25, 0x01	; 1
     ef4:	a1 f0       	breq	.+40     	; 0xf1e <__addsf3x+0x9a>
     ef6:	ff 0f       	add	r31, r31
     ef8:	bb 1f       	adc	r27, r27
     efa:	66 1f       	adc	r22, r22
     efc:	77 1f       	adc	r23, r23
     efe:	88 1f       	adc	r24, r24
     f00:	c2 f7       	brpl	.-16     	; 0xef2 <__addsf3x+0x6e>
     f02:	0e c0       	rjmp	.+28     	; 0xf20 <__addsf3x+0x9c>
     f04:	ba 0f       	add	r27, r26
     f06:	62 1f       	adc	r22, r18
     f08:	73 1f       	adc	r23, r19
     f0a:	84 1f       	adc	r24, r20
     f0c:	48 f4       	brcc	.+18     	; 0xf20 <__addsf3x+0x9c>
     f0e:	87 95       	ror	r24
     f10:	77 95       	ror	r23
     f12:	67 95       	ror	r22
     f14:	b7 95       	ror	r27
     f16:	f7 95       	ror	r31
     f18:	9e 3f       	cpi	r25, 0xFE	; 254
     f1a:	08 f0       	brcs	.+2      	; 0xf1e <__addsf3x+0x9a>
     f1c:	b0 cf       	rjmp	.-160    	; 0xe7e <__addsf3+0x28>
     f1e:	93 95       	inc	r25
     f20:	88 0f       	add	r24, r24
     f22:	08 f0       	brcs	.+2      	; 0xf26 <__addsf3x+0xa2>
     f24:	99 27       	eor	r25, r25
     f26:	ee 0f       	add	r30, r30
     f28:	97 95       	ror	r25
     f2a:	87 95       	ror	r24
     f2c:	08 95       	ret

00000f2e <__cmpsf2>:
     f2e:	0e 94 0f 08 	call	0x101e	; 0x101e <__fp_cmp>
     f32:	08 f4       	brcc	.+2      	; 0xf36 <__cmpsf2+0x8>
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	08 95       	ret

00000f38 <__fixsfsi>:
     f38:	0e 94 a3 07 	call	0xf46	; 0xf46 <__fixunssfsi>
     f3c:	68 94       	set
     f3e:	b1 11       	cpse	r27, r1
     f40:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__fp_szero>
     f44:	08 95       	ret

00000f46 <__fixunssfsi>:
     f46:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__fp_splitA>
     f4a:	88 f0       	brcs	.+34     	; 0xf6e <__fixunssfsi+0x28>
     f4c:	9f 57       	subi	r25, 0x7F	; 127
     f4e:	98 f0       	brcs	.+38     	; 0xf76 <__fixunssfsi+0x30>
     f50:	b9 2f       	mov	r27, r25
     f52:	99 27       	eor	r25, r25
     f54:	b7 51       	subi	r27, 0x17	; 23
     f56:	b0 f0       	brcs	.+44     	; 0xf84 <__fixunssfsi+0x3e>
     f58:	e1 f0       	breq	.+56     	; 0xf92 <__fixunssfsi+0x4c>
     f5a:	66 0f       	add	r22, r22
     f5c:	77 1f       	adc	r23, r23
     f5e:	88 1f       	adc	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	1a f0       	brmi	.+6      	; 0xf6a <__fixunssfsi+0x24>
     f64:	ba 95       	dec	r27
     f66:	c9 f7       	brne	.-14     	; 0xf5a <__fixunssfsi+0x14>
     f68:	14 c0       	rjmp	.+40     	; 0xf92 <__fixunssfsi+0x4c>
     f6a:	b1 30       	cpi	r27, 0x01	; 1
     f6c:	91 f0       	breq	.+36     	; 0xf92 <__fixunssfsi+0x4c>
     f6e:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__fp_zero>
     f72:	b1 e0       	ldi	r27, 0x01	; 1
     f74:	08 95       	ret
     f76:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__fp_zero>
     f7a:	67 2f       	mov	r22, r23
     f7c:	78 2f       	mov	r23, r24
     f7e:	88 27       	eor	r24, r24
     f80:	b8 5f       	subi	r27, 0xF8	; 248
     f82:	39 f0       	breq	.+14     	; 0xf92 <__fixunssfsi+0x4c>
     f84:	b9 3f       	cpi	r27, 0xF9	; 249
     f86:	cc f3       	brlt	.-14     	; 0xf7a <__fixunssfsi+0x34>
     f88:	86 95       	lsr	r24
     f8a:	77 95       	ror	r23
     f8c:	67 95       	ror	r22
     f8e:	b3 95       	inc	r27
     f90:	d9 f7       	brne	.-10     	; 0xf88 <__fixunssfsi+0x42>
     f92:	3e f4       	brtc	.+14     	; 0xfa2 <__fixunssfsi+0x5c>
     f94:	90 95       	com	r25
     f96:	80 95       	com	r24
     f98:	70 95       	com	r23
     f9a:	61 95       	neg	r22
     f9c:	7f 4f       	sbci	r23, 0xFF	; 255
     f9e:	8f 4f       	sbci	r24, 0xFF	; 255
     fa0:	9f 4f       	sbci	r25, 0xFF	; 255
     fa2:	08 95       	ret

00000fa4 <__floatunsisf>:
     fa4:	e8 94       	clt
     fa6:	09 c0       	rjmp	.+18     	; 0xfba <__floatsisf+0x12>

00000fa8 <__floatsisf>:
     fa8:	97 fb       	bst	r25, 7
     faa:	3e f4       	brtc	.+14     	; 0xfba <__floatsisf+0x12>
     fac:	90 95       	com	r25
     fae:	80 95       	com	r24
     fb0:	70 95       	com	r23
     fb2:	61 95       	neg	r22
     fb4:	7f 4f       	sbci	r23, 0xFF	; 255
     fb6:	8f 4f       	sbci	r24, 0xFF	; 255
     fb8:	9f 4f       	sbci	r25, 0xFF	; 255
     fba:	99 23       	and	r25, r25
     fbc:	a9 f0       	breq	.+42     	; 0xfe8 <__floatsisf+0x40>
     fbe:	f9 2f       	mov	r31, r25
     fc0:	96 e9       	ldi	r25, 0x96	; 150
     fc2:	bb 27       	eor	r27, r27
     fc4:	93 95       	inc	r25
     fc6:	f6 95       	lsr	r31
     fc8:	87 95       	ror	r24
     fca:	77 95       	ror	r23
     fcc:	67 95       	ror	r22
     fce:	b7 95       	ror	r27
     fd0:	f1 11       	cpse	r31, r1
     fd2:	f8 cf       	rjmp	.-16     	; 0xfc4 <__floatsisf+0x1c>
     fd4:	fa f4       	brpl	.+62     	; 0x1014 <__floatsisf+0x6c>
     fd6:	bb 0f       	add	r27, r27
     fd8:	11 f4       	brne	.+4      	; 0xfde <__floatsisf+0x36>
     fda:	60 ff       	sbrs	r22, 0
     fdc:	1b c0       	rjmp	.+54     	; 0x1014 <__floatsisf+0x6c>
     fde:	6f 5f       	subi	r22, 0xFF	; 255
     fe0:	7f 4f       	sbci	r23, 0xFF	; 255
     fe2:	8f 4f       	sbci	r24, 0xFF	; 255
     fe4:	9f 4f       	sbci	r25, 0xFF	; 255
     fe6:	16 c0       	rjmp	.+44     	; 0x1014 <__floatsisf+0x6c>
     fe8:	88 23       	and	r24, r24
     fea:	11 f0       	breq	.+4      	; 0xff0 <__floatsisf+0x48>
     fec:	96 e9       	ldi	r25, 0x96	; 150
     fee:	11 c0       	rjmp	.+34     	; 0x1012 <__floatsisf+0x6a>
     ff0:	77 23       	and	r23, r23
     ff2:	21 f0       	breq	.+8      	; 0xffc <__floatsisf+0x54>
     ff4:	9e e8       	ldi	r25, 0x8E	; 142
     ff6:	87 2f       	mov	r24, r23
     ff8:	76 2f       	mov	r23, r22
     ffa:	05 c0       	rjmp	.+10     	; 0x1006 <__floatsisf+0x5e>
     ffc:	66 23       	and	r22, r22
     ffe:	71 f0       	breq	.+28     	; 0x101c <__floatsisf+0x74>
    1000:	96 e8       	ldi	r25, 0x86	; 134
    1002:	86 2f       	mov	r24, r22
    1004:	70 e0       	ldi	r23, 0x00	; 0
    1006:	60 e0       	ldi	r22, 0x00	; 0
    1008:	2a f0       	brmi	.+10     	; 0x1014 <__floatsisf+0x6c>
    100a:	9a 95       	dec	r25
    100c:	66 0f       	add	r22, r22
    100e:	77 1f       	adc	r23, r23
    1010:	88 1f       	adc	r24, r24
    1012:	da f7       	brpl	.-10     	; 0x100a <__floatsisf+0x62>
    1014:	88 0f       	add	r24, r24
    1016:	96 95       	lsr	r25
    1018:	87 95       	ror	r24
    101a:	97 f9       	bld	r25, 7
    101c:	08 95       	ret

0000101e <__fp_cmp>:
    101e:	99 0f       	add	r25, r25
    1020:	00 08       	sbc	r0, r0
    1022:	55 0f       	add	r21, r21
    1024:	aa 0b       	sbc	r26, r26
    1026:	e0 e8       	ldi	r30, 0x80	; 128
    1028:	fe ef       	ldi	r31, 0xFE	; 254
    102a:	16 16       	cp	r1, r22
    102c:	17 06       	cpc	r1, r23
    102e:	e8 07       	cpc	r30, r24
    1030:	f9 07       	cpc	r31, r25
    1032:	c0 f0       	brcs	.+48     	; 0x1064 <__fp_cmp+0x46>
    1034:	12 16       	cp	r1, r18
    1036:	13 06       	cpc	r1, r19
    1038:	e4 07       	cpc	r30, r20
    103a:	f5 07       	cpc	r31, r21
    103c:	98 f0       	brcs	.+38     	; 0x1064 <__fp_cmp+0x46>
    103e:	62 1b       	sub	r22, r18
    1040:	73 0b       	sbc	r23, r19
    1042:	84 0b       	sbc	r24, r20
    1044:	95 0b       	sbc	r25, r21
    1046:	39 f4       	brne	.+14     	; 0x1056 <__fp_cmp+0x38>
    1048:	0a 26       	eor	r0, r26
    104a:	61 f0       	breq	.+24     	; 0x1064 <__fp_cmp+0x46>
    104c:	23 2b       	or	r18, r19
    104e:	24 2b       	or	r18, r20
    1050:	25 2b       	or	r18, r21
    1052:	21 f4       	brne	.+8      	; 0x105c <__fp_cmp+0x3e>
    1054:	08 95       	ret
    1056:	0a 26       	eor	r0, r26
    1058:	09 f4       	brne	.+2      	; 0x105c <__fp_cmp+0x3e>
    105a:	a1 40       	sbci	r26, 0x01	; 1
    105c:	a6 95       	lsr	r26
    105e:	8f ef       	ldi	r24, 0xFF	; 255
    1060:	81 1d       	adc	r24, r1
    1062:	81 1d       	adc	r24, r1
    1064:	08 95       	ret

00001066 <__fp_inf>:
    1066:	97 f9       	bld	r25, 7
    1068:	9f 67       	ori	r25, 0x7F	; 127
    106a:	80 e8       	ldi	r24, 0x80	; 128
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	60 e0       	ldi	r22, 0x00	; 0
    1070:	08 95       	ret

00001072 <__fp_nan>:
    1072:	9f ef       	ldi	r25, 0xFF	; 255
    1074:	80 ec       	ldi	r24, 0xC0	; 192
    1076:	08 95       	ret

00001078 <__fp_pscA>:
    1078:	00 24       	eor	r0, r0
    107a:	0a 94       	dec	r0
    107c:	16 16       	cp	r1, r22
    107e:	17 06       	cpc	r1, r23
    1080:	18 06       	cpc	r1, r24
    1082:	09 06       	cpc	r0, r25
    1084:	08 95       	ret

00001086 <__fp_pscB>:
    1086:	00 24       	eor	r0, r0
    1088:	0a 94       	dec	r0
    108a:	12 16       	cp	r1, r18
    108c:	13 06       	cpc	r1, r19
    108e:	14 06       	cpc	r1, r20
    1090:	05 06       	cpc	r0, r21
    1092:	08 95       	ret

00001094 <__fp_round>:
    1094:	09 2e       	mov	r0, r25
    1096:	03 94       	inc	r0
    1098:	00 0c       	add	r0, r0
    109a:	11 f4       	brne	.+4      	; 0x10a0 <__fp_round+0xc>
    109c:	88 23       	and	r24, r24
    109e:	52 f0       	brmi	.+20     	; 0x10b4 <__fp_round+0x20>
    10a0:	bb 0f       	add	r27, r27
    10a2:	40 f4       	brcc	.+16     	; 0x10b4 <__fp_round+0x20>
    10a4:	bf 2b       	or	r27, r31
    10a6:	11 f4       	brne	.+4      	; 0x10ac <__fp_round+0x18>
    10a8:	60 ff       	sbrs	r22, 0
    10aa:	04 c0       	rjmp	.+8      	; 0x10b4 <__fp_round+0x20>
    10ac:	6f 5f       	subi	r22, 0xFF	; 255
    10ae:	7f 4f       	sbci	r23, 0xFF	; 255
    10b0:	8f 4f       	sbci	r24, 0xFF	; 255
    10b2:	9f 4f       	sbci	r25, 0xFF	; 255
    10b4:	08 95       	ret

000010b6 <__fp_split3>:
    10b6:	57 fd       	sbrc	r21, 7
    10b8:	90 58       	subi	r25, 0x80	; 128
    10ba:	44 0f       	add	r20, r20
    10bc:	55 1f       	adc	r21, r21
    10be:	59 f0       	breq	.+22     	; 0x10d6 <__fp_splitA+0x10>
    10c0:	5f 3f       	cpi	r21, 0xFF	; 255
    10c2:	71 f0       	breq	.+28     	; 0x10e0 <__fp_splitA+0x1a>
    10c4:	47 95       	ror	r20

000010c6 <__fp_splitA>:
    10c6:	88 0f       	add	r24, r24
    10c8:	97 fb       	bst	r25, 7
    10ca:	99 1f       	adc	r25, r25
    10cc:	61 f0       	breq	.+24     	; 0x10e6 <__fp_splitA+0x20>
    10ce:	9f 3f       	cpi	r25, 0xFF	; 255
    10d0:	79 f0       	breq	.+30     	; 0x10f0 <__fp_splitA+0x2a>
    10d2:	87 95       	ror	r24
    10d4:	08 95       	ret
    10d6:	12 16       	cp	r1, r18
    10d8:	13 06       	cpc	r1, r19
    10da:	14 06       	cpc	r1, r20
    10dc:	55 1f       	adc	r21, r21
    10de:	f2 cf       	rjmp	.-28     	; 0x10c4 <__fp_split3+0xe>
    10e0:	46 95       	lsr	r20
    10e2:	f1 df       	rcall	.-30     	; 0x10c6 <__fp_splitA>
    10e4:	08 c0       	rjmp	.+16     	; 0x10f6 <__fp_splitA+0x30>
    10e6:	16 16       	cp	r1, r22
    10e8:	17 06       	cpc	r1, r23
    10ea:	18 06       	cpc	r1, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	f1 cf       	rjmp	.-30     	; 0x10d2 <__fp_splitA+0xc>
    10f0:	86 95       	lsr	r24
    10f2:	71 05       	cpc	r23, r1
    10f4:	61 05       	cpc	r22, r1
    10f6:	08 94       	sec
    10f8:	08 95       	ret

000010fa <__fp_zero>:
    10fa:	e8 94       	clt

000010fc <__fp_szero>:
    10fc:	bb 27       	eor	r27, r27
    10fe:	66 27       	eor	r22, r22
    1100:	77 27       	eor	r23, r23
    1102:	cb 01       	movw	r24, r22
    1104:	97 f9       	bld	r25, 7
    1106:	08 95       	ret

00001108 <__gesf2>:
    1108:	0e 94 0f 08 	call	0x101e	; 0x101e <__fp_cmp>
    110c:	08 f4       	brcc	.+2      	; 0x1110 <__gesf2+0x8>
    110e:	8f ef       	ldi	r24, 0xFF	; 255
    1110:	08 95       	ret

00001112 <__mulsf3>:
    1112:	0e 94 9c 08 	call	0x1138	; 0x1138 <__mulsf3x>
    1116:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <__fp_round>
    111a:	0e 94 3c 08 	call	0x1078	; 0x1078 <__fp_pscA>
    111e:	38 f0       	brcs	.+14     	; 0x112e <__mulsf3+0x1c>
    1120:	0e 94 43 08 	call	0x1086	; 0x1086 <__fp_pscB>
    1124:	20 f0       	brcs	.+8      	; 0x112e <__mulsf3+0x1c>
    1126:	95 23       	and	r25, r21
    1128:	11 f0       	breq	.+4      	; 0x112e <__mulsf3+0x1c>
    112a:	0c 94 33 08 	jmp	0x1066	; 0x1066 <__fp_inf>
    112e:	0c 94 39 08 	jmp	0x1072	; 0x1072 <__fp_nan>
    1132:	11 24       	eor	r1, r1
    1134:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__fp_szero>

00001138 <__mulsf3x>:
    1138:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__fp_split3>
    113c:	70 f3       	brcs	.-36     	; 0x111a <__mulsf3+0x8>

0000113e <__mulsf3_pse>:
    113e:	95 9f       	mul	r25, r21
    1140:	c1 f3       	breq	.-16     	; 0x1132 <__mulsf3+0x20>
    1142:	95 0f       	add	r25, r21
    1144:	50 e0       	ldi	r21, 0x00	; 0
    1146:	55 1f       	adc	r21, r21
    1148:	62 9f       	mul	r22, r18
    114a:	f0 01       	movw	r30, r0
    114c:	72 9f       	mul	r23, r18
    114e:	bb 27       	eor	r27, r27
    1150:	f0 0d       	add	r31, r0
    1152:	b1 1d       	adc	r27, r1
    1154:	63 9f       	mul	r22, r19
    1156:	aa 27       	eor	r26, r26
    1158:	f0 0d       	add	r31, r0
    115a:	b1 1d       	adc	r27, r1
    115c:	aa 1f       	adc	r26, r26
    115e:	64 9f       	mul	r22, r20
    1160:	66 27       	eor	r22, r22
    1162:	b0 0d       	add	r27, r0
    1164:	a1 1d       	adc	r26, r1
    1166:	66 1f       	adc	r22, r22
    1168:	82 9f       	mul	r24, r18
    116a:	22 27       	eor	r18, r18
    116c:	b0 0d       	add	r27, r0
    116e:	a1 1d       	adc	r26, r1
    1170:	62 1f       	adc	r22, r18
    1172:	73 9f       	mul	r23, r19
    1174:	b0 0d       	add	r27, r0
    1176:	a1 1d       	adc	r26, r1
    1178:	62 1f       	adc	r22, r18
    117a:	83 9f       	mul	r24, r19
    117c:	a0 0d       	add	r26, r0
    117e:	61 1d       	adc	r22, r1
    1180:	22 1f       	adc	r18, r18
    1182:	74 9f       	mul	r23, r20
    1184:	33 27       	eor	r19, r19
    1186:	a0 0d       	add	r26, r0
    1188:	61 1d       	adc	r22, r1
    118a:	23 1f       	adc	r18, r19
    118c:	84 9f       	mul	r24, r20
    118e:	60 0d       	add	r22, r0
    1190:	21 1d       	adc	r18, r1
    1192:	82 2f       	mov	r24, r18
    1194:	76 2f       	mov	r23, r22
    1196:	6a 2f       	mov	r22, r26
    1198:	11 24       	eor	r1, r1
    119a:	9f 57       	subi	r25, 0x7F	; 127
    119c:	50 40       	sbci	r21, 0x00	; 0
    119e:	9a f0       	brmi	.+38     	; 0x11c6 <__mulsf3_pse+0x88>
    11a0:	f1 f0       	breq	.+60     	; 0x11de <__mulsf3_pse+0xa0>
    11a2:	88 23       	and	r24, r24
    11a4:	4a f0       	brmi	.+18     	; 0x11b8 <__mulsf3_pse+0x7a>
    11a6:	ee 0f       	add	r30, r30
    11a8:	ff 1f       	adc	r31, r31
    11aa:	bb 1f       	adc	r27, r27
    11ac:	66 1f       	adc	r22, r22
    11ae:	77 1f       	adc	r23, r23
    11b0:	88 1f       	adc	r24, r24
    11b2:	91 50       	subi	r25, 0x01	; 1
    11b4:	50 40       	sbci	r21, 0x00	; 0
    11b6:	a9 f7       	brne	.-22     	; 0x11a2 <__mulsf3_pse+0x64>
    11b8:	9e 3f       	cpi	r25, 0xFE	; 254
    11ba:	51 05       	cpc	r21, r1
    11bc:	80 f0       	brcs	.+32     	; 0x11de <__mulsf3_pse+0xa0>
    11be:	0c 94 33 08 	jmp	0x1066	; 0x1066 <__fp_inf>
    11c2:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__fp_szero>
    11c6:	5f 3f       	cpi	r21, 0xFF	; 255
    11c8:	e4 f3       	brlt	.-8      	; 0x11c2 <__mulsf3_pse+0x84>
    11ca:	98 3e       	cpi	r25, 0xE8	; 232
    11cc:	d4 f3       	brlt	.-12     	; 0x11c2 <__mulsf3_pse+0x84>
    11ce:	86 95       	lsr	r24
    11d0:	77 95       	ror	r23
    11d2:	67 95       	ror	r22
    11d4:	b7 95       	ror	r27
    11d6:	f7 95       	ror	r31
    11d8:	e7 95       	ror	r30
    11da:	9f 5f       	subi	r25, 0xFF	; 255
    11dc:	c1 f7       	brne	.-16     	; 0x11ce <__mulsf3_pse+0x90>
    11de:	fe 2b       	or	r31, r30
    11e0:	88 0f       	add	r24, r24
    11e2:	91 1d       	adc	r25, r1
    11e4:	96 95       	lsr	r25
    11e6:	87 95       	ror	r24
    11e8:	97 f9       	bld	r25, 7
    11ea:	08 95       	ret

000011ec <sin>:
    11ec:	9f 93       	push	r25
    11ee:	0e 94 0e 09 	call	0x121c	; 0x121c <__fp_rempio2>
    11f2:	0f 90       	pop	r0
    11f4:	07 fc       	sbrc	r0, 7
    11f6:	ee 5f       	subi	r30, 0xFE	; 254
    11f8:	0c 94 37 09 	jmp	0x126e	; 0x126e <__fp_sinus>

000011fc <__fp_mpack>:
    11fc:	9f 3f       	cpi	r25, 0xFF	; 255
    11fe:	31 f0       	breq	.+12     	; 0x120c <__fp_mpack_finite+0xc>

00001200 <__fp_mpack_finite>:
    1200:	91 50       	subi	r25, 0x01	; 1
    1202:	20 f4       	brcc	.+8      	; 0x120c <__fp_mpack_finite+0xc>
    1204:	87 95       	ror	r24
    1206:	77 95       	ror	r23
    1208:	67 95       	ror	r22
    120a:	b7 95       	ror	r27
    120c:	88 0f       	add	r24, r24
    120e:	91 1d       	adc	r25, r1
    1210:	96 95       	lsr	r25
    1212:	87 95       	ror	r24
    1214:	97 f9       	bld	r25, 7
    1216:	08 95       	ret
    1218:	0c 94 39 08 	jmp	0x1072	; 0x1072 <__fp_nan>

0000121c <__fp_rempio2>:
    121c:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__fp_splitA>
    1220:	d8 f3       	brcs	.-10     	; 0x1218 <__fp_mpack_finite+0x18>
    1222:	e8 94       	clt
    1224:	e0 e0       	ldi	r30, 0x00	; 0
    1226:	bb 27       	eor	r27, r27
    1228:	9f 57       	subi	r25, 0x7F	; 127
    122a:	f0 f0       	brcs	.+60     	; 0x1268 <__fp_rempio2+0x4c>
    122c:	2a ed       	ldi	r18, 0xDA	; 218
    122e:	3f e0       	ldi	r19, 0x0F	; 15
    1230:	49 ec       	ldi	r20, 0xC9	; 201
    1232:	06 c0       	rjmp	.+12     	; 0x1240 <__fp_rempio2+0x24>
    1234:	ee 0f       	add	r30, r30
    1236:	bb 0f       	add	r27, r27
    1238:	66 1f       	adc	r22, r22
    123a:	77 1f       	adc	r23, r23
    123c:	88 1f       	adc	r24, r24
    123e:	28 f0       	brcs	.+10     	; 0x124a <__fp_rempio2+0x2e>
    1240:	b2 3a       	cpi	r27, 0xA2	; 162
    1242:	62 07       	cpc	r22, r18
    1244:	73 07       	cpc	r23, r19
    1246:	84 07       	cpc	r24, r20
    1248:	28 f0       	brcs	.+10     	; 0x1254 <__fp_rempio2+0x38>
    124a:	b2 5a       	subi	r27, 0xA2	; 162
    124c:	62 0b       	sbc	r22, r18
    124e:	73 0b       	sbc	r23, r19
    1250:	84 0b       	sbc	r24, r20
    1252:	e3 95       	inc	r30
    1254:	9a 95       	dec	r25
    1256:	72 f7       	brpl	.-36     	; 0x1234 <__fp_rempio2+0x18>
    1258:	80 38       	cpi	r24, 0x80	; 128
    125a:	30 f4       	brcc	.+12     	; 0x1268 <__fp_rempio2+0x4c>
    125c:	9a 95       	dec	r25
    125e:	bb 0f       	add	r27, r27
    1260:	66 1f       	adc	r22, r22
    1262:	77 1f       	adc	r23, r23
    1264:	88 1f       	adc	r24, r24
    1266:	d2 f7       	brpl	.-12     	; 0x125c <__fp_rempio2+0x40>
    1268:	90 48       	sbci	r25, 0x80	; 128
    126a:	0c 94 00 09 	jmp	0x1200	; 0x1200 <__fp_mpack_finite>

0000126e <__fp_sinus>:
    126e:	ef 93       	push	r30
    1270:	e0 ff       	sbrs	r30, 0
    1272:	07 c0       	rjmp	.+14     	; 0x1282 <__fp_sinus+0x14>
    1274:	a2 ea       	ldi	r26, 0xA2	; 162
    1276:	2a ed       	ldi	r18, 0xDA	; 218
    1278:	3f e0       	ldi	r19, 0x0F	; 15
    127a:	49 ec       	ldi	r20, 0xC9	; 201
    127c:	5f eb       	ldi	r21, 0xBF	; 191
    127e:	0e 94 42 07 	call	0xe84	; 0xe84 <__addsf3x>
    1282:	0e 94 4a 08 	call	0x1094	; 0x1094 <__fp_round>
    1286:	0f 90       	pop	r0
    1288:	03 94       	inc	r0
    128a:	01 fc       	sbrc	r0, 1
    128c:	90 58       	subi	r25, 0x80	; 128
    128e:	e8 e6       	ldi	r30, 0x68	; 104
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__fp_powsodd>

00001296 <__fp_powsodd>:
    1296:	9f 93       	push	r25
    1298:	8f 93       	push	r24
    129a:	7f 93       	push	r23
    129c:	6f 93       	push	r22
    129e:	ff 93       	push	r31
    12a0:	ef 93       	push	r30
    12a2:	9b 01       	movw	r18, r22
    12a4:	ac 01       	movw	r20, r24
    12a6:	0e 94 89 08 	call	0x1112	; 0x1112 <__mulsf3>
    12aa:	ef 91       	pop	r30
    12ac:	ff 91       	pop	r31
    12ae:	0e 94 5f 09 	call	0x12be	; 0x12be <__fp_powser>
    12b2:	2f 91       	pop	r18
    12b4:	3f 91       	pop	r19
    12b6:	4f 91       	pop	r20
    12b8:	5f 91       	pop	r21
    12ba:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__mulsf3>

000012be <__fp_powser>:
    12be:	df 93       	push	r29
    12c0:	cf 93       	push	r28
    12c2:	1f 93       	push	r17
    12c4:	0f 93       	push	r16
    12c6:	ff 92       	push	r15
    12c8:	ef 92       	push	r14
    12ca:	df 92       	push	r13
    12cc:	7b 01       	movw	r14, r22
    12ce:	8c 01       	movw	r16, r24
    12d0:	68 94       	set
    12d2:	06 c0       	rjmp	.+12     	; 0x12e0 <__fp_powser+0x22>
    12d4:	da 2e       	mov	r13, r26
    12d6:	ef 01       	movw	r28, r30
    12d8:	0e 94 9c 08 	call	0x1138	; 0x1138 <__mulsf3x>
    12dc:	fe 01       	movw	r30, r28
    12de:	e8 94       	clt
    12e0:	a5 91       	lpm	r26, Z+
    12e2:	25 91       	lpm	r18, Z+
    12e4:	35 91       	lpm	r19, Z+
    12e6:	45 91       	lpm	r20, Z+
    12e8:	55 91       	lpm	r21, Z+
    12ea:	a6 f3       	brts	.-24     	; 0x12d4 <__fp_powser+0x16>
    12ec:	ef 01       	movw	r28, r30
    12ee:	0e 94 42 07 	call	0xe84	; 0xe84 <__addsf3x>
    12f2:	fe 01       	movw	r30, r28
    12f4:	97 01       	movw	r18, r14
    12f6:	a8 01       	movw	r20, r16
    12f8:	da 94       	dec	r13
    12fa:	69 f7       	brne	.-38     	; 0x12d6 <__fp_powser+0x18>
    12fc:	df 90       	pop	r13
    12fe:	ef 90       	pop	r14
    1300:	ff 90       	pop	r15
    1302:	0f 91       	pop	r16
    1304:	1f 91       	pop	r17
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <_ZN15OrangutanAnalog7setModeEh.part.0>:
    130c:	ec e7       	ldi	r30, 0x7C	; 124
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	8f 7d       	andi	r24, 0xDF	; 223
    1314:	80 83       	st	Z, r24
    1316:	08 95       	ret

00001318 <_ZN15OrangutanAnalog7setModeEh>:
    1318:	81 11       	cpse	r24, r1
    131a:	03 c0       	rjmp	.+6      	; 0x1322 <_ZN15OrangutanAnalog7setModeEh+0xa>
    131c:	0e 94 86 09 	call	0x130c	; 0x130c <_ZN15OrangutanAnalog7setModeEh.part.0>
    1320:	08 95       	ret
    1322:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1326:	80 62       	ori	r24, 0x20	; 32
    1328:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    132c:	08 95       	ret

0000132e <_ZN15OrangutanAnalog7getModeEv>:
    132e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1332:	85 fb       	bst	r24, 5
    1334:	88 27       	eor	r24, r24
    1336:	80 f9       	bld	r24, 0
    1338:	08 95       	ret

0000133a <_ZN15OrangutanAnalog16conversionResultEv>:
    133a:	0e 94 97 09 	call	0x132e	; 0x132e <_ZN15OrangutanAnalog7getModeEv>
    133e:	88 23       	and	r24, r24
    1340:	21 f0       	breq	.+8      	; 0x134a <_ZN15OrangutanAnalog16conversionResultEv+0x10>
    1342:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	08 95       	ret
    134a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    134e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1352:	08 95       	ret

00001354 <_ZN15OrangutanAnalog15startConversionEhh>:
    1354:	80 32       	cpi	r24, 0x20	; 32
    1356:	a0 f4       	brcc	.+40     	; 0x1380 <_ZN15OrangutanAnalog15startConversionEhh+0x2c>
    1358:	97 e8       	ldi	r25, 0x87	; 135
    135a:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    135e:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1362:	66 23       	and	r22, r22
    1364:	11 f0       	breq	.+4      	; 0x136a <_ZN15OrangutanAnalog15startConversionEhh+0x16>
    1366:	90 6c       	ori	r25, 0xC0	; 192
    1368:	02 c0       	rjmp	.+4      	; 0x136e <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
    136a:	9f 77       	andi	r25, 0x7F	; 127
    136c:	90 64       	ori	r25, 0x40	; 64
    136e:	90 7e       	andi	r25, 0xE0	; 224
    1370:	98 2b       	or	r25, r24
    1372:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1376:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    137a:	80 64       	ori	r24, 0x40	; 64
    137c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1380:	08 95       	ret

00001382 <_ZN15OrangutanAnalog4readEh>:
    1382:	60 e0       	ldi	r22, 0x00	; 0
    1384:	0e 94 aa 09 	call	0x1354	; 0x1354 <_ZN15OrangutanAnalog15startConversionEhh>
    1388:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    138c:	86 fd       	sbrc	r24, 6
    138e:	fc cf       	rjmp	.-8      	; 0x1388 <_ZN15OrangutanAnalog4readEh+0x6>
    1390:	0e 94 9d 09 	call	0x133a	; 0x133a <_ZN15OrangutanAnalog16conversionResultEv>
    1394:	08 95       	ret

00001396 <analog_read>:
    1396:	0e 94 c1 09 	call	0x1382	; 0x1382 <_ZN15OrangutanAnalog4readEh>
    139a:	08 95       	ret

0000139c <_ZN15OrangutanAnalog11readAverageEhj>:
    139c:	a0 e0       	ldi	r26, 0x00	; 0
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e4 ed       	ldi	r30, 0xD4	; 212
    13a2:	f9 e0       	ldi	r31, 0x09	; 9
    13a4:	0c 94 4a 17 	jmp	0x2e94	; 0x2e94 <__prologue_saves__+0x14>
    13a8:	eb 01       	movw	r28, r22
    13aa:	60 e0       	ldi	r22, 0x00	; 0
    13ac:	0e 94 aa 09 	call	0x1354	; 0x1354 <_ZN15OrangutanAnalog15startConversionEhh>
    13b0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    13b4:	86 fd       	sbrc	r24, 6
    13b6:	fc cf       	rjmp	.-8      	; 0x13b0 <_ZN15OrangutanAnalog11readAverageEhj+0x14>
    13b8:	8e 01       	movw	r16, r28
    13ba:	c1 2c       	mov	r12, r1
    13bc:	d1 2c       	mov	r13, r1
    13be:	76 01       	movw	r14, r12
    13c0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    13c4:	80 64       	ori	r24, 0x40	; 64
    13c6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    13ca:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    13ce:	86 fd       	sbrc	r24, 6
    13d0:	fc cf       	rjmp	.-8      	; 0x13ca <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
    13d2:	0e 94 9d 09 	call	0x133a	; 0x133a <_ZN15OrangutanAnalog16conversionResultEv>
    13d6:	c8 0e       	add	r12, r24
    13d8:	d9 1e       	adc	r13, r25
    13da:	e1 1c       	adc	r14, r1
    13dc:	f1 1c       	adc	r15, r1
    13de:	01 50       	subi	r16, 0x01	; 1
    13e0:	11 09       	sbc	r17, r1
    13e2:	01 15       	cp	r16, r1
    13e4:	11 05       	cpc	r17, r1
    13e6:	61 f7       	brne	.-40     	; 0x13c0 <_ZN15OrangutanAnalog11readAverageEhj+0x24>
    13e8:	ce 01       	movw	r24, r28
    13ea:	96 95       	lsr	r25
    13ec:	87 95       	ror	r24
    13ee:	c0 34       	cpi	r28, 0x40	; 64
    13f0:	d1 05       	cpc	r29, r1
    13f2:	38 f4       	brcc	.+14     	; 0x1402 <_ZN15OrangutanAnalog11readAverageEhj+0x66>
    13f4:	8c 0d       	add	r24, r12
    13f6:	9d 1d       	adc	r25, r13
    13f8:	be 01       	movw	r22, r28
    13fa:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <__udivmodhi4>
    13fe:	cb 01       	movw	r24, r22
    1400:	0e c0       	rjmp	.+28     	; 0x141e <_ZN15OrangutanAnalog11readAverageEhj+0x82>
    1402:	a7 01       	movw	r20, r14
    1404:	96 01       	movw	r18, r12
    1406:	28 0f       	add	r18, r24
    1408:	39 1f       	adc	r19, r25
    140a:	41 1d       	adc	r20, r1
    140c:	51 1d       	adc	r21, r1
    140e:	ca 01       	movw	r24, r20
    1410:	b9 01       	movw	r22, r18
    1412:	9e 01       	movw	r18, r28
    1414:	40 e0       	ldi	r20, 0x00	; 0
    1416:	50 e0       	ldi	r21, 0x00	; 0
    1418:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__udivmodsi4>
    141c:	c9 01       	movw	r24, r18
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	e8 e0       	ldi	r30, 0x08	; 8
    1424:	0c 94 66 17 	jmp	0x2ecc	; 0x2ecc <__epilogue_restores__+0x14>

00001428 <_ZN15OrangutanAnalog12toMillivoltsEj>:
    1428:	cf 92       	push	r12
    142a:	df 92       	push	r13
    142c:	ef 92       	push	r14
    142e:	ff 92       	push	r15
    1430:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
    1434:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
    1438:	9c 01       	movw	r18, r24
    143a:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <__umulhisi3>
    143e:	6b 01       	movw	r12, r22
    1440:	7c 01       	movw	r14, r24
    1442:	0e 94 97 09 	call	0x132e	; 0x132e <_ZN15OrangutanAnalog7getModeEv>
    1446:	88 23       	and	r24, r24
    1448:	59 f0       	breq	.+22     	; 0x1460 <_ZN15OrangutanAnalog12toMillivoltsEj+0x38>
    144a:	c7 01       	movw	r24, r14
    144c:	b6 01       	movw	r22, r12
    144e:	61 58       	subi	r22, 0x81	; 129
    1450:	7f 4f       	sbci	r23, 0xFF	; 255
    1452:	8f 4f       	sbci	r24, 0xFF	; 255
    1454:	9f 4f       	sbci	r25, 0xFF	; 255
    1456:	2f ef       	ldi	r18, 0xFF	; 255
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	40 e0       	ldi	r20, 0x00	; 0
    145c:	50 e0       	ldi	r21, 0x00	; 0
    145e:	0a c0       	rjmp	.+20     	; 0x1474 <_ZN15OrangutanAnalog12toMillivoltsEj+0x4c>
    1460:	c7 01       	movw	r24, r14
    1462:	b6 01       	movw	r22, r12
    1464:	61 50       	subi	r22, 0x01	; 1
    1466:	7e 4f       	sbci	r23, 0xFE	; 254
    1468:	8f 4f       	sbci	r24, 0xFF	; 255
    146a:	9f 4f       	sbci	r25, 0xFF	; 255
    146c:	2f ef       	ldi	r18, 0xFF	; 255
    146e:	33 e0       	ldi	r19, 0x03	; 3
    1470:	40 e0       	ldi	r20, 0x00	; 0
    1472:	50 e0       	ldi	r21, 0x00	; 0
    1474:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__udivmodsi4>
    1478:	c9 01       	movw	r24, r18
    147a:	ff 90       	pop	r15
    147c:	ef 90       	pop	r14
    147e:	df 90       	pop	r13
    1480:	cf 90       	pop	r12
    1482:	08 95       	ret

00001484 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
    1484:	0e 94 ce 09 	call	0x139c	; 0x139c <_ZN15OrangutanAnalog11readAverageEhj>
    1488:	0e 94 14 0a 	call	0x1428	; 0x1428 <_ZN15OrangutanAnalog12toMillivoltsEj>
    148c:	08 95       	ret

0000148e <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
    148e:	1f 93       	push	r17
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    1494:	0e 94 97 09 	call	0x132e	; 0x132e <_ZN15OrangutanAnalog7getModeEv>
    1498:	18 2f       	mov	r17, r24
    149a:	0e 94 86 09 	call	0x130c	; 0x130c <_ZN15OrangutanAnalog7setModeEh.part.0>
    149e:	6a e0       	ldi	r22, 0x0A	; 10
    14a0:	70 e0       	ldi	r23, 0x00	; 0
    14a2:	86 e0       	ldi	r24, 0x06	; 6
    14a4:	0e 94 42 0a 	call	0x1484	; 0x1484 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
    14a8:	ec 01       	movw	r28, r24
    14aa:	81 2f       	mov	r24, r17
    14ac:	0e 94 8c 09 	call	0x1318	; 0x1318 <_ZN15OrangutanAnalog7setModeEh>
    14b0:	ce 01       	movw	r24, r28
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	8c 0f       	add	r24, r28
    14b8:	9d 1f       	adc	r25, r29
    14ba:	01 96       	adiw	r24, 0x01	; 1
    14bc:	96 95       	lsr	r25
    14be:	87 95       	ror	r24
    14c0:	df 91       	pop	r29
    14c2:	cf 91       	pop	r28
    14c4:	1f 91       	pop	r17
    14c6:	08 95       	ret

000014c8 <read_battery_millivolts_3pi>:
    14c8:	0e 94 47 0a 	call	0x148e	; 0x148e <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
    14cc:	08 95       	ret

000014ce <_ZL16currentCharacterv>:
    14ce:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <_ZL17use_program_space>
    14d2:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <__data_end>
    14d6:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <__data_end+0x1>
    14da:	99 23       	and	r25, r25
    14dc:	11 f0       	breq	.+4      	; 0x14e2 <_ZL16currentCharacterv+0x14>
    14de:	84 91       	lpm	r24, Z
    14e0:	01 c0       	rjmp	.+2      	; 0x14e4 <_ZL16currentCharacterv+0x16>
    14e2:	80 81       	ld	r24, Z
    14e4:	2f eb       	ldi	r18, 0xBF	; 191
    14e6:	28 0f       	add	r18, r24
    14e8:	2a 31       	cpi	r18, 0x1A	; 26
    14ea:	10 f4       	brcc	.+4      	; 0x14f0 <_ZL16currentCharacterv+0x22>
    14ec:	80 5e       	subi	r24, 0xE0	; 224
    14ee:	08 95       	ret
    14f0:	80 32       	cpi	r24, 0x20	; 32
    14f2:	49 f4       	brne	.+18     	; 0x1506 <_ZL16currentCharacterv+0x38>
    14f4:	9f 01       	movw	r18, r30
    14f6:	2f 5f       	subi	r18, 0xFF	; 255
    14f8:	3f 4f       	sbci	r19, 0xFF	; 255
    14fa:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <__data_end+0x1>
    14fe:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <__data_end>
    1502:	ef 2b       	or	r30, r31
    1504:	31 f7       	brne	.-52     	; 0x14d2 <_ZL16currentCharacterv+0x4>
    1506:	08 95       	ret

00001508 <_ZL9getNumberv>:
    1508:	1f 93       	push	r17
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZL16currentCharacterv>
    1512:	c0 e0       	ldi	r28, 0x00	; 0
    1514:	d0 e0       	ldi	r29, 0x00	; 0
    1516:	1a e0       	ldi	r17, 0x0A	; 10
    1518:	90 ed       	ldi	r25, 0xD0	; 208
    151a:	98 0f       	add	r25, r24
    151c:	9a 30       	cpi	r25, 0x0A	; 10
    151e:	b8 f4       	brcc	.+46     	; 0x154e <_ZL9getNumberv+0x46>
    1520:	9e 01       	movw	r18, r28
    1522:	12 9f       	mul	r17, r18
    1524:	e0 01       	movw	r28, r0
    1526:	13 9f       	mul	r17, r19
    1528:	d0 0d       	add	r29, r0
    152a:	11 24       	eor	r1, r1
    152c:	c8 0f       	add	r28, r24
    152e:	d1 1d       	adc	r29, r1
    1530:	87 fd       	sbrc	r24, 7
    1532:	da 95       	dec	r29
    1534:	e0 97       	sbiw	r28, 0x30	; 48
    1536:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
    153a:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <__data_end+0x1>
    153e:	01 96       	adiw	r24, 0x01	; 1
    1540:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <__data_end+0x1>
    1544:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>
    1548:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZL16currentCharacterv>
    154c:	e5 cf       	rjmp	.-54     	; 0x1518 <_ZL9getNumberv+0x10>
    154e:	ce 01       	movw	r24, r28
    1550:	df 91       	pop	r29
    1552:	cf 91       	pop	r28
    1554:	1f 91       	pop	r17
    1556:	08 95       	ret

00001558 <_ZN15OrangutanBuzzer5init2Ev>:
    1558:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    155c:	83 e2       	ldi	r24, 0x23	; 35
    155e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1562:	81 e1       	ldi	r24, 0x11	; 17
    1564:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1568:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    156c:	80 e1       	ldi	r24, 0x10	; 16
    156e:	97 e2       	ldi	r25, 0x27	; 39
    1570:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1574:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1578:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    157c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1580:	22 9a       	sbi	0x04, 2	; 4
    1582:	78 94       	sei
    1584:	08 95       	ret

00001586 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
    1586:	8f 92       	push	r8
    1588:	9f 92       	push	r9
    158a:	af 92       	push	r10
    158c:	bf 92       	push	r11
    158e:	df 92       	push	r13
    1590:	ef 92       	push	r14
    1592:	ff 92       	push	r15
    1594:	0f 93       	push	r16
    1596:	1f 93       	push	r17
    1598:	cf 93       	push	r28
    159a:	df 93       	push	r29
    159c:	5c 01       	movw	r10, r24
    159e:	8b 01       	movw	r16, r22
    15a0:	d4 2e       	mov	r13, r20
    15a2:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <buzzerInitialized>
    15a6:	81 11       	cpse	r24, r1
    15a8:	05 c0       	rjmp	.+10     	; 0x15b4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <buzzerInitialized>
    15b0:	0e 94 ac 0a 	call	0x1558	; 0x1558 <_ZN15OrangutanBuzzer5init2Ev>
    15b4:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <buzzerFinished>
    15b8:	b7 fe       	sbrs	r11, 7
    15ba:	05 c0       	rjmp	.+10     	; 0x15c6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
    15bc:	e8 94       	clt
    15be:	b7 f8       	bld	r11, 7
    15c0:	2a e0       	ldi	r18, 0x0A	; 10
    15c2:	f2 2e       	mov	r15, r18
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
    15c6:	ff 24       	eor	r15, r15
    15c8:	f3 94       	inc	r15
    15ca:	e0 90 81 00 	lds	r14, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    15ce:	2e 2d       	mov	r18, r14
    15d0:	28 7f       	andi	r18, 0xF8	; 248
    15d2:	e2 2e       	mov	r14, r18
    15d4:	48 ec       	ldi	r20, 0xC8	; 200
    15d6:	f4 9e       	mul	r15, r20
    15d8:	c0 01       	movw	r24, r0
    15da:	11 24       	eor	r1, r1
    15dc:	8a 15       	cp	r24, r10
    15de:	9b 05       	cpc	r25, r11
    15e0:	e0 f4       	brcc	.+56     	; 0x161a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
    15e2:	e5 01       	movw	r28, r10
    15e4:	51 e1       	ldi	r21, 0x11	; 17
    15e6:	a5 16       	cp	r10, r21
    15e8:	57 e2       	ldi	r21, 0x27	; 39
    15ea:	b5 06       	cpc	r11, r21
    15ec:	10 f0       	brcs	.+4      	; 0x15f2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
    15ee:	c0 e1       	ldi	r28, 0x10	; 16
    15f0:	d7 e2       	ldi	r29, 0x27	; 39
    15f2:	be 01       	movw	r22, r28
    15f4:	76 95       	lsr	r23
    15f6:	67 95       	ror	r22
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	60 58       	subi	r22, 0x80	; 128
    15fe:	79 46       	sbci	r23, 0x69	; 105
    1600:	87 46       	sbci	r24, 0x67	; 103
    1602:	9f 4f       	sbci	r25, 0xFF	; 255
    1604:	4e 01       	movw	r8, r28
    1606:	a1 2c       	mov	r10, r1
    1608:	b1 2c       	mov	r11, r1
    160a:	a5 01       	movw	r20, r10
    160c:	94 01       	movw	r18, r8
    160e:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__udivmodsi4>
    1612:	59 01       	movw	r10, r18
    1614:	8e 2d       	mov	r24, r14
    1616:	81 60       	ori	r24, 0x01	; 1
    1618:	24 c0       	rjmp	.+72     	; 0x1662 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
    161a:	c8 e2       	ldi	r28, 0x28	; 40
    161c:	fc 9e       	mul	r15, r28
    161e:	c0 2d       	mov	r28, r0
    1620:	11 24       	eor	r1, r1
    1622:	d0 e0       	ldi	r29, 0x00	; 0
    1624:	ca 15       	cp	r28, r10
    1626:	db 05       	cpc	r29, r11
    1628:	08 f4       	brcc	.+2      	; 0x162c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
    162a:	e5 01       	movw	r28, r10
    162c:	be 01       	movw	r22, r28
    162e:	76 95       	lsr	r23
    1630:	67 95       	ror	r22
    1632:	9e 01       	movw	r18, r28
    1634:	40 e0       	ldi	r20, 0x00	; 0
    1636:	50 e0       	ldi	r21, 0x00	; 0
    1638:	8a e0       	ldi	r24, 0x0A	; 10
    163a:	f8 12       	cpse	r15, r24
    163c:	07 c0       	rjmp	.+14     	; 0x164c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	60 5e       	subi	r22, 0xE0	; 224
    1644:	73 44       	sbci	r23, 0x43	; 67
    1646:	81 44       	sbci	r24, 0x41	; 65
    1648:	9f 4f       	sbci	r25, 0xFF	; 255
    164a:	06 c0       	rjmp	.+12     	; 0x1658 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	60 53       	subi	r22, 0x30	; 48
    1652:	7d 4e       	sbci	r23, 0xED	; 237
    1654:	8c 4e       	sbci	r24, 0xEC	; 236
    1656:	9f 4f       	sbci	r25, 0xFF	; 255
    1658:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__udivmodsi4>
    165c:	59 01       	movw	r10, r18
    165e:	8e 2d       	mov	r24, r14
    1660:	82 60       	ori	r24, 0x02	; 2
    1662:	88 2e       	mov	r8, r24
    1664:	2a e0       	ldi	r18, 0x0A	; 10
    1666:	f2 12       	cpse	r15, r18
    1668:	07 c0       	rjmp	.+14     	; 0x1678 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
    166a:	ce 01       	movw	r24, r28
    166c:	05 96       	adiw	r24, 0x05	; 5
    166e:	6a e0       	ldi	r22, 0x0A	; 10
    1670:	70 e0       	ldi	r23, 0x00	; 0
    1672:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <__udivmodhi4>
    1676:	eb 01       	movw	r28, r22
    1678:	c8 3e       	cpi	r28, 0xE8	; 232
    167a:	43 e0       	ldi	r20, 0x03	; 3
    167c:	d4 07       	cpc	r29, r20
    167e:	59 f0       	breq	.+22     	; 0x1696 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    1680:	98 01       	movw	r18, r16
    1682:	de 01       	movw	r26, r28
    1684:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <__umulhisi3>
    1688:	28 ee       	ldi	r18, 0xE8	; 232
    168a:	33 e0       	ldi	r19, 0x03	; 3
    168c:	40 e0       	ldi	r20, 0x00	; 0
    168e:	50 e0       	ldi	r21, 0x00	; 0
    1690:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__divmodsi4>
    1694:	89 01       	movw	r16, r18
    1696:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    169a:	80 92 81 00 	sts	0x0081, r8	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    169e:	b0 92 89 00 	sts	0x0089, r11	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    16a2:	a0 92 88 00 	sts	0x0088, r10	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    16a6:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    16aa:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    16ae:	4d 2d       	mov	r20, r13
    16b0:	40 31       	cpi	r20, 0x10	; 16
    16b2:	08 f0       	brcs	.+2      	; 0x16b6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    16b4:	4f e0       	ldi	r20, 0x0F	; 15
    16b6:	80 e1       	ldi	r24, 0x10	; 16
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	84 1b       	sub	r24, r20
    16bc:	91 09       	sbc	r25, r1
    16be:	a9 01       	movw	r20, r18
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    16c2:	56 95       	lsr	r21
    16c4:	47 95       	ror	r20
    16c6:	8a 95       	dec	r24
    16c8:	e2 f7       	brpl	.-8      	; 0x16c2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    16ca:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    16ce:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    16d2:	10 93 6a 01 	sts	0x016A, r17	; 0x80016a <_ZL13buzzerTimeout+0x1>
    16d6:	00 93 69 01 	sts	0x0169, r16	; 0x800169 <_ZL13buzzerTimeout>
    16da:	86 b3       	in	r24, 0x16	; 22
    16dc:	8f ef       	ldi	r24, 0xFF	; 255
    16de:	86 bb       	out	0x16, r24	; 22
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	1f 91       	pop	r17
    16ec:	0f 91       	pop	r16
    16ee:	ff 90       	pop	r15
    16f0:	ef 90       	pop	r14
    16f2:	df 90       	pop	r13
    16f4:	bf 90       	pop	r11
    16f6:	af 90       	pop	r10
    16f8:	9f 90       	pop	r9
    16fa:	8f 90       	pop	r8
    16fc:	08 95       	ret

000016fe <_ZN15OrangutanBuzzer8playNoteEhjh>:
    16fe:	cf 93       	push	r28
    1700:	df 93       	push	r29
    1702:	eb 01       	movw	r28, r22
    1704:	8f 3f       	cpi	r24, 0xFF	; 255
    1706:	11 f0       	breq	.+4      	; 0x170c <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
    1708:	41 11       	cpse	r20, r1
    170a:	05 c0       	rjmp	.+10     	; 0x1716 <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
    170c:	40 e0       	ldi	r20, 0x00	; 0
    170e:	be 01       	movw	r22, r28
    1710:	88 ee       	ldi	r24, 0xE8	; 232
    1712:	93 e0       	ldi	r25, 0x03	; 3
    1714:	43 c0       	rjmp	.+134    	; 0x179c <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
    1716:	81 31       	cpi	r24, 0x11	; 17
    1718:	30 f0       	brcs	.+12     	; 0x1726 <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
    171a:	50 ef       	ldi	r21, 0xF0	; 240
    171c:	58 0f       	add	r21, r24
    171e:	50 36       	cpi	r21, 0x60	; 96
    1720:	18 f0       	brcs	.+6      	; 0x1728 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1722:	5f e5       	ldi	r21, 0x5F	; 95
    1724:	01 c0       	rjmp	.+2      	; 0x1728 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1726:	50 e0       	ldi	r21, 0x00	; 0
    1728:	85 2f       	mov	r24, r21
    172a:	6c e0       	ldi	r22, 0x0C	; 12
    172c:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <__udivmodqi4>
    1730:	68 2f       	mov	r22, r24
    1732:	74 ef       	ldi	r23, 0xF4	; 244
    1734:	76 03       	mulsu	r23, r22
    1736:	90 01       	movw	r18, r0
    1738:	11 24       	eor	r1, r1
    173a:	25 0f       	add	r18, r21
    173c:	31 1d       	adc	r19, r1
    173e:	2c 30       	cpi	r18, 0x0C	; 12
    1740:	31 05       	cpc	r19, r1
    1742:	40 f4       	brcc	.+16     	; 0x1754 <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
    1744:	f9 01       	movw	r30, r18
    1746:	ee 0f       	add	r30, r30
    1748:	ff 1f       	adc	r31, r31
    174a:	ec 5e       	subi	r30, 0xEC	; 236
    174c:	fe 4f       	sbci	r31, 0xFE	; 254
    174e:	20 81       	ld	r18, Z
    1750:	31 81       	ldd	r19, Z+1	; 0x01
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	87 30       	cpi	r24, 0x07	; 7
    175a:	81 f0       	breq	.+32     	; 0x177c <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
    175c:	08 2e       	mov	r0, r24
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
    1760:	22 0f       	add	r18, r18
    1762:	33 1f       	adc	r19, r19
    1764:	0a 94       	dec	r0
    1766:	e2 f7       	brpl	.-8      	; 0x1760 <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    1768:	82 30       	cpi	r24, 0x02	; 2
    176a:	28 f0       	brcs	.+10     	; 0x1776 <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
    176c:	c9 01       	movw	r24, r18
    176e:	05 96       	adiw	r24, 0x05	; 5
    1770:	6a e0       	ldi	r22, 0x0A	; 10
    1772:	70 e0       	ldi	r23, 0x00	; 0
    1774:	0c c0       	rjmp	.+24     	; 0x178e <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
    1776:	c9 01       	movw	r24, r18
    1778:	90 58       	subi	r25, 0x80	; 128
    177a:	0c c0       	rjmp	.+24     	; 0x1794 <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
    177c:	c9 01       	movw	r24, r18
    177e:	36 e0       	ldi	r19, 0x06	; 6
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	3a 95       	dec	r19
    1786:	e1 f7       	brne	.-8      	; 0x1780 <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
    1788:	02 96       	adiw	r24, 0x02	; 2
    178a:	65 e0       	ldi	r22, 0x05	; 5
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <__udivmodhi4>
    1792:	cb 01       	movw	r24, r22
    1794:	40 31       	cpi	r20, 0x10	; 16
    1796:	08 f0       	brcs	.+2      	; 0x179a <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    1798:	4f e0       	ldi	r20, 0x0F	; 15
    179a:	be 01       	movw	r22, r28
    179c:	0e 94 c3 0a 	call	0x1586	; 0x1586 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    17a0:	df 91       	pop	r29
    17a2:	cf 91       	pop	r28
    17a4:	08 95       	ret

000017a6 <_ZL8nextNotev>:
    17a6:	a2 e0       	ldi	r26, 0x02	; 2
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e9 ed       	ldi	r30, 0xD9	; 217
    17ac:	fb e0       	ldi	r31, 0x0B	; 11
    17ae:	0c 94 42 17 	jmp	0x2e84	; 0x2e84 <__prologue_saves__+0x4>
    17b2:	90 90 0a 01 	lds	r9, 0x010A	; 0x80010a <_ZL6octave>
    17b6:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <_ZL8staccato>
    17ba:	88 23       	and	r24, r24
    17bc:	21 f0       	breq	.+8      	; 0x17c6 <_ZL8nextNotev+0x20>
    17be:	60 91 65 01 	lds	r22, 0x0165	; 0x800165 <_ZL22staccato_rest_duration>
    17c2:	61 11       	cpse	r22, r1
    17c4:	17 c0       	rjmp	.+46     	; 0x17f4 <_ZL8nextNotev+0x4e>
    17c6:	77 24       	eor	r7, r7
    17c8:	73 94       	inc	r7
    17ca:	b0 ec       	ldi	r27, 0xC0	; 192
    17cc:	ab 2e       	mov	r10, r27
    17ce:	bd e5       	ldi	r27, 0x5D	; 93
    17d0:	bb 2e       	mov	r11, r27
    17d2:	1a e0       	ldi	r17, 0x0A	; 10
    17d4:	61 2e       	mov	r6, r17
    17d6:	04 e0       	ldi	r16, 0x04	; 4
    17d8:	80 2e       	mov	r8, r16
    17da:	80 ed       	ldi	r24, 0xD0	; 208
    17dc:	c8 2e       	mov	r12, r24
    17de:	87 e0       	ldi	r24, 0x07	; 7
    17e0:	d8 2e       	mov	r13, r24
    17e2:	94 e0       	ldi	r25, 0x04	; 4
    17e4:	e9 2e       	mov	r14, r25
    17e6:	f1 2c       	mov	r15, r1
    17e8:	04 ef       	ldi	r16, 0xF4	; 244
    17ea:	11 e0       	ldi	r17, 0x01	; 1
    17ec:	2f e0       	ldi	r18, 0x0F	; 15
    17ee:	42 2e       	mov	r4, r18
    17f0:	51 2c       	mov	r5, r1
    17f2:	15 c0       	rjmp	.+42     	; 0x181e <_ZL8nextNotev+0x78>
    17f4:	70 e0       	ldi	r23, 0x00	; 0
    17f6:	40 e0       	ldi	r20, 0x00	; 0
    17f8:	88 ee       	ldi	r24, 0xE8	; 232
    17fa:	93 e0       	ldi	r25, 0x03	; 3
    17fc:	0e 94 c3 0a 	call	0x1586	; 0x1586 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1800:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <_ZL22staccato_rest_duration>
    1804:	17 c1       	rjmp	.+558    	; 0x1a34 <_ZL8nextNotev+0x28e>
    1806:	86 36       	cpi	r24, 0x66	; 102
    1808:	d4 f5       	brge	.+116    	; 0x187e <_ZL8nextNotev+0xd8>
    180a:	81 36       	cpi	r24, 0x61	; 97
    180c:	09 f4       	brne	.+2      	; 0x1810 <_ZL8nextNotev+0x6a>
    180e:	a9 c0       	rjmp	.+338    	; 0x1962 <_ZL8nextNotev+0x1bc>
    1810:	7c f5       	brge	.+94     	; 0x1870 <_ZL8nextNotev+0xca>
    1812:	8c 33       	cpi	r24, 0x3C	; 60
    1814:	09 f4       	brne	.+2      	; 0x1818 <_ZL8nextNotev+0x72>
    1816:	60 c0       	rjmp	.+192    	; 0x18d8 <_ZL8nextNotev+0x132>
    1818:	8e 33       	cpi	r24, 0x3E	; 62
    181a:	81 f4       	brne	.+32     	; 0x183c <_ZL8nextNotev+0x96>
    181c:	93 94       	inc	r9
    181e:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZL16currentCharacterv>
    1822:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <__data_end>
    1826:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <__data_end+0x1>
    182a:	2f 5f       	subi	r18, 0xFF	; 255
    182c:	3f 4f       	sbci	r19, 0xFF	; 255
    182e:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <__data_end+0x1>
    1832:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <__data_end>
    1836:	85 36       	cpi	r24, 0x65	; 101
    1838:	31 f7       	brne	.-52     	; 0x1806 <_ZL8nextNotev+0x60>
    183a:	52 c0       	rjmp	.+164    	; 0x18e0 <_ZL8nextNotev+0x13a>
    183c:	81 32       	cpi	r24, 0x21	; 33
    183e:	09 f0       	breq	.+2      	; 0x1842 <_ZL8nextNotev+0x9c>
    1840:	8b c0       	rjmp	.+278    	; 0x1958 <_ZL8nextNotev+0x1b2>
    1842:	80 92 0a 01 	sts	0x010A, r8	; 0x80010a <_ZL6octave>
    1846:	d0 92 09 01 	sts	0x0109, r13	; 0x800109 <_ZL19whole_note_duration+0x1>
    184a:	c0 92 08 01 	sts	0x0108, r12	; 0x800108 <_ZL19whole_note_duration>
    184e:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <_ZL9note_type+0x1>
    1852:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <_ZL9note_type>
    1856:	10 93 05 01 	sts	0x0105, r17	; 0x800105 <_ZL8duration+0x1>
    185a:	00 93 04 01 	sts	0x0104, r16	; 0x800104 <_ZL8duration>
    185e:	50 92 03 01 	sts	0x0103, r5	; 0x800103 <_ZL6volume+0x1>
    1862:	40 92 02 01 	sts	0x0102, r4	; 0x800102 <_ZL6volume>
    1866:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <_ZL8staccato>
    186a:	a4 e0       	ldi	r26, 0x04	; 4
    186c:	9a 2e       	mov	r9, r26
    186e:	d7 cf       	rjmp	.-82     	; 0x181e <_ZL8nextNotev+0x78>
    1870:	83 36       	cpi	r24, 0x63	; 99
    1872:	a1 f1       	breq	.+104    	; 0x18dc <_ZL8nextNotev+0x136>
    1874:	0c f4       	brge	.+2      	; 0x1878 <_ZL8nextNotev+0xd2>
    1876:	78 c0       	rjmp	.+240    	; 0x1968 <_ZL8nextNotev+0x1c2>
    1878:	10 e0       	ldi	r17, 0x00	; 0
    187a:	82 e0       	ldi	r24, 0x02	; 2
    187c:	77 c0       	rjmp	.+238    	; 0x196c <_ZL8nextNotev+0x1c6>
    187e:	8d 36       	cpi	r24, 0x6D	; 109
    1880:	c1 f1       	breq	.+112    	; 0x18f2 <_ZL8nextNotev+0x14c>
    1882:	94 f4       	brge	.+36     	; 0x18a8 <_ZL8nextNotev+0x102>
    1884:	87 36       	cpi	r24, 0x67	; 103
    1886:	91 f1       	breq	.+100    	; 0x18ec <_ZL8nextNotev+0x146>
    1888:	74 f1       	brlt	.+92     	; 0x18e6 <_ZL8nextNotev+0x140>
    188a:	8c 36       	cpi	r24, 0x6C	; 108
    188c:	09 f0       	breq	.+2      	; 0x1890 <_ZL8nextNotev+0xea>
    188e:	64 c0       	rjmp	.+200    	; 0x1958 <_ZL8nextNotev+0x1b2>
    1890:	0e 94 84 0a 	call	0x1508	; 0x1508 <_ZL9getNumberv>
    1894:	bc 01       	movw	r22, r24
    1896:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL9note_type+0x1>
    189a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL9note_type>
    189e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    18a2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    18a6:	51 c0       	rjmp	.+162    	; 0x194a <_ZL8nextNotev+0x1a4>
    18a8:	82 37       	cpi	r24, 0x72	; 114
    18aa:	c9 f1       	breq	.+114    	; 0x191e <_ZL8nextNotev+0x178>
    18ac:	4c f4       	brge	.+18     	; 0x18c0 <_ZL8nextNotev+0x11a>
    18ae:	8f 36       	cpi	r24, 0x6F	; 111
    18b0:	09 f0       	breq	.+2      	; 0x18b4 <_ZL8nextNotev+0x10e>
    18b2:	52 c0       	rjmp	.+164    	; 0x1958 <_ZL8nextNotev+0x1b2>
    18b4:	0e 94 84 0a 	call	0x1508	; 0x1508 <_ZL9getNumberv>
    18b8:	98 2e       	mov	r9, r24
    18ba:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZL6octave>
    18be:	af cf       	rjmp	.-162    	; 0x181e <_ZL8nextNotev+0x78>
    18c0:	84 37       	cpi	r24, 0x74	; 116
    18c2:	81 f1       	breq	.+96     	; 0x1924 <_ZL8nextNotev+0x17e>
    18c4:	86 37       	cpi	r24, 0x76	; 118
    18c6:	09 f0       	breq	.+2      	; 0x18ca <_ZL8nextNotev+0x124>
    18c8:	47 c0       	rjmp	.+142    	; 0x1958 <_ZL8nextNotev+0x1b2>
    18ca:	0e 94 84 0a 	call	0x1508	; 0x1508 <_ZL9getNumberv>
    18ce:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_ZL6volume+0x1>
    18d2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_ZL6volume>
    18d6:	a3 cf       	rjmp	.-186    	; 0x181e <_ZL8nextNotev+0x78>
    18d8:	9a 94       	dec	r9
    18da:	a1 cf       	rjmp	.-190    	; 0x181e <_ZL8nextNotev+0x78>
    18dc:	10 e0       	ldi	r17, 0x00	; 0
    18de:	20 c0       	rjmp	.+64     	; 0x1920 <_ZL8nextNotev+0x17a>
    18e0:	10 e0       	ldi	r17, 0x00	; 0
    18e2:	84 e0       	ldi	r24, 0x04	; 4
    18e4:	43 c0       	rjmp	.+134    	; 0x196c <_ZL8nextNotev+0x1c6>
    18e6:	10 e0       	ldi	r17, 0x00	; 0
    18e8:	85 e0       	ldi	r24, 0x05	; 5
    18ea:	40 c0       	rjmp	.+128    	; 0x196c <_ZL8nextNotev+0x1c6>
    18ec:	10 e0       	ldi	r17, 0x00	; 0
    18ee:	87 e0       	ldi	r24, 0x07	; 7
    18f0:	3d c0       	rjmp	.+122    	; 0x196c <_ZL8nextNotev+0x1c6>
    18f2:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZL16currentCharacterv>
    18f6:	8c 36       	cpi	r24, 0x6C	; 108
    18f8:	19 f4       	brne	.+6      	; 0x1900 <_ZL8nextNotev+0x15a>
    18fa:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <_ZL8staccato>
    18fe:	04 c0       	rjmp	.+8      	; 0x1908 <_ZL8nextNotev+0x162>
    1900:	70 92 66 01 	sts	0x0166, r7	; 0x800166 <_ZL8staccato>
    1904:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <_ZL22staccato_rest_duration>
    1908:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <__data_end>
    190c:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <__data_end+0x1>
    1910:	2f 5f       	subi	r18, 0xFF	; 255
    1912:	3f 4f       	sbci	r19, 0xFF	; 255
    1914:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <__data_end+0x1>
    1918:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <__data_end>
    191c:	80 cf       	rjmp	.-256    	; 0x181e <_ZL8nextNotev+0x78>
    191e:	11 e0       	ldi	r17, 0x01	; 1
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	24 c0       	rjmp	.+72     	; 0x196c <_ZL8nextNotev+0x1c6>
    1924:	0e 94 84 0a 	call	0x1508	; 0x1508 <_ZL9getNumberv>
    1928:	bc 01       	movw	r22, r24
    192a:	c5 01       	movw	r24, r10
    192c:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <__udivmodhi4>
    1930:	66 9e       	mul	r6, r22
    1932:	c0 01       	movw	r24, r0
    1934:	67 9e       	mul	r6, r23
    1936:	90 0d       	add	r25, r0
    1938:	11 24       	eor	r1, r1
    193a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZL19whole_note_duration+0x1>
    193e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL19whole_note_duration>
    1942:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <_ZL9note_type>
    1946:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <_ZL9note_type+0x1>
    194a:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <__udivmodhi4>
    194e:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_ZL8duration+0x1>
    1952:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_ZL8duration>
    1956:	63 cf       	rjmp	.-314    	; 0x181e <_ZL8nextNotev+0x78>
    1958:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <__data_end+0x1>
    195c:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <__data_end>
    1960:	69 c0       	rjmp	.+210    	; 0x1a34 <_ZL8nextNotev+0x28e>
    1962:	10 e0       	ldi	r17, 0x00	; 0
    1964:	89 e0       	ldi	r24, 0x09	; 9
    1966:	02 c0       	rjmp	.+4      	; 0x196c <_ZL8nextNotev+0x1c6>
    1968:	10 e0       	ldi	r17, 0x00	; 0
    196a:	8b e0       	ldi	r24, 0x0B	; 11
    196c:	08 2f       	mov	r16, r24
    196e:	9c e0       	ldi	r25, 0x0C	; 12
    1970:	99 9e       	mul	r9, r25
    1972:	00 0d       	add	r16, r0
    1974:	11 24       	eor	r1, r1
    1976:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZL16currentCharacterv>
    197a:	98 2f       	mov	r25, r24
    197c:	97 7f       	andi	r25, 0xF7	; 247
    197e:	93 32       	cpi	r25, 0x23	; 35
    1980:	61 f4       	brne	.+24     	; 0x199a <_ZL8nextNotev+0x1f4>
    1982:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <__data_end>
    1986:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <__data_end+0x1>
    198a:	2f 5f       	subi	r18, 0xFF	; 255
    198c:	3f 4f       	sbci	r19, 0xFF	; 255
    198e:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <__data_end+0x1>
    1992:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <__data_end>
    1996:	0f 5f       	subi	r16, 0xFF	; 255
    1998:	ee cf       	rjmp	.-36     	; 0x1976 <_ZL8nextNotev+0x1d0>
    199a:	8d 32       	cpi	r24, 0x2D	; 45
    199c:	71 f4       	brne	.+28     	; 0x19ba <_ZL8nextNotev+0x214>
    199e:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <__data_end>
    19a2:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <__data_end+0x1>
    19a6:	2f 5f       	subi	r18, 0xFF	; 255
    19a8:	3f 4f       	sbci	r19, 0xFF	; 255
    19aa:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <__data_end+0x1>
    19ae:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <__data_end>
    19b2:	01 50       	subi	r16, 0x01	; 1
    19b4:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZL16currentCharacterv>
    19b8:	f0 cf       	rjmp	.-32     	; 0x199a <_ZL8nextNotev+0x1f4>
    19ba:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_ZL8duration>
    19be:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_ZL8duration+0x1>
    19c2:	81 53       	subi	r24, 0x31	; 49
    19c4:	88 30       	cpi	r24, 0x08	; 8
    19c6:	50 f4       	brcc	.+20     	; 0x19dc <_ZL8nextNotev+0x236>
    19c8:	e0 90 08 01 	lds	r14, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    19cc:	f0 90 09 01 	lds	r15, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    19d0:	0e 94 84 0a 	call	0x1508	; 0x1508 <_ZL9getNumberv>
    19d4:	bc 01       	movw	r22, r24
    19d6:	c7 01       	movw	r24, r14
    19d8:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <__udivmodhi4>
    19dc:	7b 01       	movw	r14, r22
    19de:	f6 94       	lsr	r15
    19e0:	e7 94       	ror	r14
    19e2:	69 83       	std	Y+1, r22	; 0x01
    19e4:	7a 83       	std	Y+2, r23	; 0x02
    19e6:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZL16currentCharacterv>
    19ea:	69 81       	ldd	r22, Y+1	; 0x01
    19ec:	7a 81       	ldd	r23, Y+2	; 0x02
    19ee:	8e 32       	cpi	r24, 0x2E	; 46
    19f0:	69 f4       	brne	.+26     	; 0x1a0c <_ZL8nextNotev+0x266>
    19f2:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <__data_end>
    19f6:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <__data_end+0x1>
    19fa:	2f 5f       	subi	r18, 0xFF	; 255
    19fc:	3f 4f       	sbci	r19, 0xFF	; 255
    19fe:	30 93 63 01 	sts	0x0163, r19	; 0x800163 <__data_end+0x1>
    1a02:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <__data_end>
    1a06:	6e 0d       	add	r22, r14
    1a08:	7f 1d       	adc	r23, r15
    1a0a:	e9 cf       	rjmp	.-46     	; 0x19de <_ZL8nextNotev+0x238>
    1a0c:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <_ZL8staccato>
    1a10:	88 23       	and	r24, r24
    1a12:	39 f0       	breq	.+14     	; 0x1a22 <_ZL8nextNotev+0x27c>
    1a14:	9b 01       	movw	r18, r22
    1a16:	36 95       	lsr	r19
    1a18:	27 95       	ror	r18
    1a1a:	20 93 65 01 	sts	0x0165, r18	; 0x800165 <_ZL22staccato_rest_duration>
    1a1e:	62 1b       	sub	r22, r18
    1a20:	71 09       	sbc	r23, r1
    1a22:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <_ZL6volume>
    1a26:	11 23       	and	r17, r17
    1a28:	11 f0       	breq	.+4      	; 0x1a2e <_ZL8nextNotev+0x288>
    1a2a:	8f ef       	ldi	r24, 0xFF	; 255
    1a2c:	01 c0       	rjmp	.+2      	; 0x1a30 <_ZL8nextNotev+0x28a>
    1a2e:	80 2f       	mov	r24, r16
    1a30:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <_ZN15OrangutanBuzzer8playNoteEhjh>
    1a34:	22 96       	adiw	r28, 0x02	; 2
    1a36:	e0 e1       	ldi	r30, 0x10	; 16
    1a38:	0c 94 5e 17 	jmp	0x2ebc	; 0x2ebc <__epilogue_restores__+0x4>

00001a3c <__vector_13>:
    1a3c:	1f 92       	push	r1
    1a3e:	0f 92       	push	r0
    1a40:	0f b6       	in	r0, 0x3f	; 63
    1a42:	0f 92       	push	r0
    1a44:	11 24       	eor	r1, r1
    1a46:	2f 93       	push	r18
    1a48:	3f 93       	push	r19
    1a4a:	4f 93       	push	r20
    1a4c:	5f 93       	push	r21
    1a4e:	6f 93       	push	r22
    1a50:	7f 93       	push	r23
    1a52:	8f 93       	push	r24
    1a54:	9f 93       	push	r25
    1a56:	af 93       	push	r26
    1a58:	bf 93       	push	r27
    1a5a:	ef 93       	push	r30
    1a5c:	ff 93       	push	r31
    1a5e:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <_ZL13buzzerTimeout>
    1a62:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <_ZL13buzzerTimeout+0x1>
    1a66:	9c 01       	movw	r18, r24
    1a68:	21 50       	subi	r18, 0x01	; 1
    1a6a:	31 09       	sbc	r19, r1
    1a6c:	30 93 6a 01 	sts	0x016A, r19	; 0x80016a <_ZL13buzzerTimeout+0x1>
    1a70:	20 93 69 01 	sts	0x0169, r18	; 0x800169 <_ZL13buzzerTimeout>
    1a74:	89 2b       	or	r24, r25
    1a76:	11 f5       	brne	.+68     	; 0x1abc <__vector_13+0x80>
    1a78:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1a7c:	78 94       	sei
    1a7e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1a82:	88 7f       	andi	r24, 0xF8	; 248
    1a84:	81 60       	ori	r24, 0x01	; 1
    1a86:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1a8a:	80 e1       	ldi	r24, 0x10	; 16
    1a8c:	97 e2       	ldi	r25, 0x27	; 39
    1a8e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1a92:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1a96:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1a9a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <buzzerFinished>
    1aa4:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
    1aa8:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <__data_end+0x1>
    1aac:	89 2b       	or	r24, r25
    1aae:	31 f0       	breq	.+12     	; 0x1abc <__vector_13+0x80>
    1ab0:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <_ZL17play_mode_setting>
    1ab4:	81 11       	cpse	r24, r1
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <__vector_13+0x80>
    1ab8:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <_ZL8nextNotev>
    1abc:	ff 91       	pop	r31
    1abe:	ef 91       	pop	r30
    1ac0:	bf 91       	pop	r27
    1ac2:	af 91       	pop	r26
    1ac4:	9f 91       	pop	r25
    1ac6:	8f 91       	pop	r24
    1ac8:	7f 91       	pop	r23
    1aca:	6f 91       	pop	r22
    1acc:	5f 91       	pop	r21
    1ace:	4f 91       	pop	r20
    1ad0:	3f 91       	pop	r19
    1ad2:	2f 91       	pop	r18
    1ad4:	0f 90       	pop	r0
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	0f 90       	pop	r0
    1ada:	1f 90       	pop	r1
    1adc:	18 95       	reti

00001ade <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    1ade:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1ae2:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <__data_end+0x1>
    1ae6:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <_ZL17use_program_space>
    1af0:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <_ZL22staccato_rest_duration>
    1af4:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <_ZL8nextNotev>
    1af8:	08 95       	ret

00001afa <play_from_program_space>:
    1afa:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    1afe:	08 95       	ret

00001b00 <delay_us.constprop.0>:
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	6f 93       	push	r22
    1b06:	64 e0       	ldi	r22, 0x04	; 4
    1b08:	6a 95       	dec	r22
    1b0a:	f1 f7       	brne	.-4      	; 0x1b08 <delay_us.constprop.0+0x8>
    1b0c:	6f 91       	pop	r22
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	c9 f7       	brne	.-14     	; 0x1b04 <delay_us.constprop.0+0x4>
    1b12:	08 95       	ret

00001b14 <_ZN12OrangutanLCD8busyWaitEv>:
    1b14:	0f 93       	push	r16
    1b16:	1f 93       	push	r17
    1b18:	cf 93       	push	r28
    1b1a:	df 93       	push	r29
    1b1c:	1a b1       	in	r17, 0x0a	; 10
    1b1e:	57 98       	cbi	0x0a, 7	; 10
    1b20:	5a 98       	cbi	0x0b, 2	; 11
    1b22:	28 9a       	sbi	0x05, 0	; 5
    1b24:	c0 e0       	ldi	r28, 0x00	; 0
    1b26:	d0 e0       	ldi	r29, 0x00	; 0
    1b28:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <delay_us.constprop.0>
    1b2c:	5c 9a       	sbi	0x0b, 4	; 11
    1b2e:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <delay_us.constprop.0>
    1b32:	09 b1       	in	r16, 0x09	; 9
    1b34:	5c 98       	cbi	0x0b, 4	; 11
    1b36:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <delay_us.constprop.0>
    1b3a:	5c 9a       	sbi	0x0b, 4	; 11
    1b3c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <delay_us.constprop.0>
    1b40:	5c 98       	cbi	0x0b, 4	; 11
    1b42:	24 96       	adiw	r28, 0x04	; 4
    1b44:	07 ff       	sbrs	r16, 7
    1b46:	10 c0       	rjmp	.+32     	; 0x1b68 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    1b48:	ae 01       	movw	r20, r28
    1b4a:	60 e0       	ldi	r22, 0x00	; 0
    1b4c:	70 e0       	ldi	r23, 0x00	; 0
    1b4e:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <lcdTimeout>
    1b52:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <lcdTimeout+0x1>
    1b56:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <lcdTimeout+0x2>
    1b5a:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <lcdTimeout+0x3>
    1b5e:	48 17       	cp	r20, r24
    1b60:	59 07       	cpc	r21, r25
    1b62:	6a 07       	cpc	r22, r26
    1b64:	7b 07       	cpc	r23, r27
    1b66:	00 f3       	brcs	.-64     	; 0x1b28 <_ZN12OrangutanLCD8busyWaitEv+0x14>
    1b68:	1a b9       	out	0x0a, r17	; 10
    1b6a:	df 91       	pop	r29
    1b6c:	cf 91       	pop	r28
    1b6e:	1f 91       	pop	r17
    1b70:	0f 91       	pop	r16
    1b72:	08 95       	ret

00001b74 <_ZN12OrangutanLCD8sendDataEh>:
    1b74:	95 b1       	in	r25, 0x05	; 5
    1b76:	28 2f       	mov	r18, r24
    1b78:	21 70       	andi	r18, 0x01	; 1
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	22 0f       	add	r18, r18
    1b7e:	33 1f       	adc	r19, r19
    1b80:	48 2f       	mov	r20, r24
    1b82:	46 70       	andi	r20, 0x06	; 6
    1b84:	68 e0       	ldi	r22, 0x08	; 8
    1b86:	46 9f       	mul	r20, r22
    1b88:	a0 01       	movw	r20, r0
    1b8a:	11 24       	eor	r1, r1
    1b8c:	24 2b       	or	r18, r20
    1b8e:	9d 7c       	andi	r25, 0xCD	; 205
    1b90:	29 2b       	or	r18, r25
    1b92:	25 b9       	out	0x05, r18	; 5
    1b94:	9b b1       	in	r25, 0x0b	; 11
    1b96:	88 70       	andi	r24, 0x08	; 8
    1b98:	82 95       	swap	r24
    1b9a:	80 7f       	andi	r24, 0xF0	; 240
    1b9c:	9f 77       	andi	r25, 0x7F	; 127
    1b9e:	89 2b       	or	r24, r25
    1ba0:	8b b9       	out	0x0b, r24	; 11
    1ba2:	5c 9a       	sbi	0x0b, 4	; 11
    1ba4:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <delay_us.constprop.0>
    1ba8:	5c 98       	cbi	0x0b, 4	; 11
    1baa:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <delay_us.constprop.0>
    1bae:	08 95       	ret

00001bb0 <_ZN12OrangutanLCD4sendEhhh>:
    1bb0:	a0 e0       	ldi	r26, 0x00	; 0
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	ee ed       	ldi	r30, 0xDE	; 222
    1bb6:	fd e0       	ldi	r31, 0x0D	; 13
    1bb8:	0c 94 4b 17 	jmp	0x2e96	; 0x2e96 <__prologue_saves__+0x16>
    1bbc:	c8 2f       	mov	r28, r24
    1bbe:	d6 2e       	mov	r13, r22
    1bc0:	e4 2e       	mov	r14, r20
    1bc2:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <_ZZN12OrangutanLCD4initEvE11initialized>
    1bc6:	81 11       	cpse	r24, r1
    1bc8:	05 c0       	rjmp	.+10     	; 0x1bd4 <_ZN12OrangutanLCD4sendEhhh+0x24>
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <_ZZN12OrangutanLCD4initEvE11initialized>
    1bd0:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <_ZN12OrangutanLCD5init2Ev>
    1bd4:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <_ZN12OrangutanLCD8busyWaitEv>
    1bd8:	14 b1       	in	r17, 0x04	; 4
    1bda:	d5 b1       	in	r29, 0x05	; 5
    1bdc:	fa b0       	in	r15, 0x0a	; 10
    1bde:	0b b1       	in	r16, 0x0b	; 11
    1be0:	28 98       	cbi	0x05, 0	; 5
    1be2:	dd 20       	and	r13, r13
    1be4:	11 f0       	breq	.+4      	; 0x1bea <_ZN12OrangutanLCD4sendEhhh+0x3a>
    1be6:	5a 9a       	sbi	0x0b, 2	; 11
    1be8:	01 c0       	rjmp	.+2      	; 0x1bec <_ZN12OrangutanLCD4sendEhhh+0x3c>
    1bea:	5a 98       	cbi	0x0b, 2	; 11
    1bec:	94 b1       	in	r25, 0x04	; 4
    1bee:	92 63       	ori	r25, 0x32	; 50
    1bf0:	94 b9       	out	0x04, r25	; 4
    1bf2:	57 9a       	sbi	0x0a, 7	; 10
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	e8 16       	cp	r14, r24
    1bf8:	29 f0       	breq	.+10     	; 0x1c04 <_ZN12OrangutanLCD4sendEhhh+0x54>
    1bfa:	8c 2f       	mov	r24, r28
    1bfc:	82 95       	swap	r24
    1bfe:	8f 70       	andi	r24, 0x0F	; 15
    1c00:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <_ZN12OrangutanLCD8sendDataEh>
    1c04:	8c 2f       	mov	r24, r28
    1c06:	8f 70       	andi	r24, 0x0F	; 15
    1c08:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <_ZN12OrangutanLCD8sendDataEh>
    1c0c:	fa b8       	out	0x0a, r15	; 10
    1c0e:	0b b9       	out	0x0b, r16	; 11
    1c10:	14 b9       	out	0x04, r17	; 4
    1c12:	d5 b9       	out	0x05, r29	; 5
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
    1c18:	e7 e0       	ldi	r30, 0x07	; 7
    1c1a:	0c 94 67 17 	jmp	0x2ece	; 0x2ece <__epilogue_restores__+0x16>

00001c1e <_ZN12OrangutanLCD8send_cmdEh>:
    1c1e:	42 e0       	ldi	r20, 0x02	; 2
    1c20:	60 e0       	ldi	r22, 0x00	; 0
    1c22:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <_ZN12OrangutanLCD4sendEhhh>
    1c26:	08 95       	ret

00001c28 <_ZN12OrangutanLCD9send_dataEh>:
    1c28:	42 e0       	ldi	r20, 0x02	; 2
    1c2a:	61 e0       	ldi	r22, 0x01	; 1
    1c2c:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <_ZN12OrangutanLCD4sendEhhh>
    1c30:	08 95       	ret

00001c32 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    1c32:	41 e0       	ldi	r20, 0x01	; 1
    1c34:	60 e0       	ldi	r22, 0x00	; 0
    1c36:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <_ZN12OrangutanLCD4sendEhhh>
    1c3a:	08 95       	ret

00001c3c <_ZN12OrangutanLCD5init2Ev>:
    1c3c:	80 e1       	ldi	r24, 0x10	; 16
    1c3e:	97 e2       	ldi	r25, 0x27	; 39
    1c40:	a0 e0       	ldi	r26, 0x00	; 0
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <lcdTimeout>
    1c48:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <lcdTimeout+0x1>
    1c4c:	a0 93 6d 01 	sts	0x016D, r26	; 0x80016d <lcdTimeout+0x2>
    1c50:	b0 93 6e 01 	sts	0x016E, r27	; 0x80016e <lcdTimeout+0x3>
    1c54:	52 9a       	sbi	0x0a, 2	; 10
    1c56:	20 9a       	sbi	0x04, 0	; 4
    1c58:	54 9a       	sbi	0x0a, 4	; 10
    1c5a:	8e e1       	ldi	r24, 0x1E	; 30
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	0e 94 04 11 	call	0x2208	; 0x2208 <delay_ms>
    1c62:	83 e0       	ldi	r24, 0x03	; 3
    1c64:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1c68:	86 e0       	ldi	r24, 0x06	; 6
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	0e 94 04 11 	call	0x2208	; 0x2208 <delay_ms>
    1c70:	83 e0       	ldi	r24, 0x03	; 3
    1c72:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1c76:	82 e0       	ldi	r24, 0x02	; 2
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	0e 94 04 11 	call	0x2208	; 0x2208 <delay_ms>
    1c7e:	83 e0       	ldi	r24, 0x03	; 3
    1c80:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1c84:	82 e0       	ldi	r24, 0x02	; 2
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	0e 94 04 11 	call	0x2208	; 0x2208 <delay_ms>
    1c8c:	82 e0       	ldi	r24, 0x02	; 2
    1c8e:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1c92:	82 e0       	ldi	r24, 0x02	; 2
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	0e 94 04 11 	call	0x2208	; 0x2208 <delay_ms>
    1c9a:	88 e2       	ldi	r24, 0x28	; 40
    1c9c:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <_ZN12OrangutanLCD8send_cmdEh>
    1ca0:	88 e0       	ldi	r24, 0x08	; 8
    1ca2:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <_ZN12OrangutanLCD8send_cmdEh>
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <_ZN12OrangutanLCD8send_cmdEh>
    1cac:	86 e0       	ldi	r24, 0x06	; 6
    1cae:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <_ZN12OrangutanLCD8send_cmdEh>
    1cb2:	8c e0       	ldi	r24, 0x0C	; 12
    1cb4:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <_ZN12OrangutanLCD8send_cmdEh>
    1cb8:	08 95       	ret

00001cba <_ZN12OrangutanLCD5clearEv>:
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <_ZN12OrangutanLCD8send_cmdEh>
    1cc0:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <printf_chars>
    1cc4:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <printf_chars+0x1>
    1cc8:	89 2b       	or	r24, r25
    1cca:	f9 f0       	breq	.+62     	; 0x1d0a <_ZN12OrangutanLCD5clearEv+0x50>
    1ccc:	60 e0       	ldi	r22, 0x00	; 0
    1cce:	a0 e2       	ldi	r26, 0x20	; 32
    1cd0:	26 2f       	mov	r18, r22
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <numLCDCols>
    1cd8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <numLCDRows>
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	01 97       	sbiw	r24, 0x01	; 1
    1ce0:	78 9f       	mul	r23, r24
    1ce2:	a0 01       	movw	r20, r0
    1ce4:	79 9f       	mul	r23, r25
    1ce6:	50 0d       	add	r21, r0
    1ce8:	11 24       	eor	r1, r1
    1cea:	24 17       	cp	r18, r20
    1cec:	35 07       	cpc	r19, r21
    1cee:	4c f4       	brge	.+18     	; 0x1d02 <_ZN12OrangutanLCD5clearEv+0x48>
    1cf0:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <printf_chars>
    1cf4:	f0 91 72 01 	lds	r31, 0x0172	; 0x800172 <printf_chars+0x1>
    1cf8:	e2 0f       	add	r30, r18
    1cfa:	f3 1f       	adc	r31, r19
    1cfc:	a0 83       	st	Z, r26
    1cfe:	6f 5f       	subi	r22, 0xFF	; 255
    1d00:	e7 cf       	rjmp	.-50     	; 0x1cd0 <_ZN12OrangutanLCD5clearEv+0x16>
    1d02:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <col>
    1d06:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <row>
    1d0a:	08 95       	ret

00001d0c <clear>:
    1d0c:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <_ZN12OrangutanLCD5clearEv>
    1d10:	08 95       	ret

00001d12 <_ZN12OrangutanLCD5printEPKc>:
    1d12:	cf 93       	push	r28
    1d14:	df 93       	push	r29
    1d16:	ec 01       	movw	r28, r24
    1d18:	89 91       	ld	r24, Y+
    1d1a:	88 23       	and	r24, r24
    1d1c:	19 f0       	breq	.+6      	; 0x1d24 <_ZN12OrangutanLCD5printEPKc+0x12>
    1d1e:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <_ZN12OrangutanLCD9send_dataEh>
    1d22:	fa cf       	rjmp	.-12     	; 0x1d18 <_ZN12OrangutanLCD5printEPKc+0x6>
    1d24:	df 91       	pop	r29
    1d26:	cf 91       	pop	r28
    1d28:	08 95       	ret

00001d2a <print>:
    1d2a:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <_ZN12OrangutanLCD5printEPKc>
    1d2e:	08 95       	ret

00001d30 <_ZN12OrangutanLCD5printEm>:
    1d30:	aa e0       	ldi	r26, 0x0A	; 10
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	ee e9       	ldi	r30, 0x9E	; 158
    1d36:	fe e0       	ldi	r31, 0x0E	; 14
    1d38:	0c 94 4a 17 	jmp	0x2e94	; 0x2e94 <__prologue_saves__+0x14>
    1d3c:	1a e0       	ldi	r17, 0x0A	; 10
    1d3e:	5a e0       	ldi	r21, 0x0A	; 10
    1d40:	c5 2e       	mov	r12, r21
    1d42:	d1 2c       	mov	r13, r1
    1d44:	e1 2c       	mov	r14, r1
    1d46:	f1 2c       	mov	r15, r1
    1d48:	06 2f       	mov	r16, r22
    1d4a:	a7 01       	movw	r20, r14
    1d4c:	96 01       	movw	r18, r12
    1d4e:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__udivmodsi4>
    1d52:	ca 01       	movw	r24, r20
    1d54:	b9 01       	movw	r22, r18
    1d56:	11 50       	subi	r17, 0x01	; 1
    1d58:	e1 e0       	ldi	r30, 0x01	; 1
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	ec 0f       	add	r30, r28
    1d5e:	fd 1f       	adc	r31, r29
    1d60:	e1 0f       	add	r30, r17
    1d62:	f1 1d       	adc	r31, r1
    1d64:	00 5d       	subi	r16, 0xD0	; 208
    1d66:	2a e0       	ldi	r18, 0x0A	; 10
    1d68:	62 9f       	mul	r22, r18
    1d6a:	00 19       	sub	r16, r0
    1d6c:	11 24       	eor	r1, r1
    1d6e:	00 83       	st	Z, r16
    1d70:	61 15       	cp	r22, r1
    1d72:	71 05       	cpc	r23, r1
    1d74:	81 05       	cpc	r24, r1
    1d76:	91 05       	cpc	r25, r1
    1d78:	39 f7       	brne	.-50     	; 0x1d48 <_ZN12OrangutanLCD5printEm+0x18>
    1d7a:	1a 30       	cpi	r17, 0x0A	; 10
    1d7c:	58 f4       	brcc	.+22     	; 0x1d94 <_ZN12OrangutanLCD5printEm+0x64>
    1d7e:	e1 e0       	ldi	r30, 0x01	; 1
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	ec 0f       	add	r30, r28
    1d84:	fd 1f       	adc	r31, r29
    1d86:	e1 0f       	add	r30, r17
    1d88:	f1 1d       	adc	r31, r1
    1d8a:	80 81       	ld	r24, Z
    1d8c:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <_ZN12OrangutanLCD9send_dataEh>
    1d90:	1f 5f       	subi	r17, 0xFF	; 255
    1d92:	f3 cf       	rjmp	.-26     	; 0x1d7a <_ZN12OrangutanLCD5printEm+0x4a>
    1d94:	2a 96       	adiw	r28, 0x0a	; 10
    1d96:	e8 e0       	ldi	r30, 0x08	; 8
    1d98:	0c 94 66 17 	jmp	0x2ecc	; 0x2ecc <__epilogue_restores__+0x14>

00001d9c <_ZN12OrangutanLCD5printEl>:
    1d9c:	cf 92       	push	r12
    1d9e:	df 92       	push	r13
    1da0:	ef 92       	push	r14
    1da2:	ff 92       	push	r15
    1da4:	6b 01       	movw	r12, r22
    1da6:	7c 01       	movw	r14, r24
    1da8:	97 ff       	sbrs	r25, 7
    1daa:	0b c0       	rjmp	.+22     	; 0x1dc2 <_ZN12OrangutanLCD5printEl+0x26>
    1dac:	f0 94       	com	r15
    1dae:	e0 94       	com	r14
    1db0:	d0 94       	com	r13
    1db2:	c0 94       	com	r12
    1db4:	c1 1c       	adc	r12, r1
    1db6:	d1 1c       	adc	r13, r1
    1db8:	e1 1c       	adc	r14, r1
    1dba:	f1 1c       	adc	r15, r1
    1dbc:	8d e2       	ldi	r24, 0x2D	; 45
    1dbe:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <_ZN12OrangutanLCD9send_dataEh>
    1dc2:	c7 01       	movw	r24, r14
    1dc4:	b6 01       	movw	r22, r12
    1dc6:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <_ZN12OrangutanLCD5printEm>
    1dca:	ff 90       	pop	r15
    1dcc:	ef 90       	pop	r14
    1dce:	df 90       	pop	r13
    1dd0:	cf 90       	pop	r12
    1dd2:	08 95       	ret

00001dd4 <print_long>:
    1dd4:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <_ZN12OrangutanLCD5printEl>
    1dd8:	08 95       	ret

00001dda <_ZN12OrangutanLCD6gotoXYEhh>:
    1dda:	a5 e0       	ldi	r26, 0x05	; 5
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	e3 ef       	ldi	r30, 0xF3	; 243
    1de0:	fe e0       	ldi	r31, 0x0E	; 14
    1de2:	0c 94 4f 17 	jmp	0x2e9e	; 0x2e9e <__prologue_saves__+0x1e>
    1de6:	18 2f       	mov	r17, r24
    1de8:	80 e8       	ldi	r24, 0x80	; 128
    1dea:	89 83       	std	Y+1, r24	; 0x01
    1dec:	80 ec       	ldi	r24, 0xC0	; 192
    1dee:	8a 83       	std	Y+2, r24	; 0x02
    1df0:	84 e9       	ldi	r24, 0x94	; 148
    1df2:	8b 83       	std	Y+3, r24	; 0x03
    1df4:	84 ed       	ldi	r24, 0xD4	; 212
    1df6:	8c 83       	std	Y+4, r24	; 0x04
    1df8:	fe 01       	movw	r30, r28
    1dfa:	e6 0f       	add	r30, r22
    1dfc:	f1 1d       	adc	r31, r1
    1dfe:	81 81       	ldd	r24, Z+1	; 0x01
    1e00:	81 0f       	add	r24, r17
    1e02:	6d 83       	std	Y+5, r22	; 0x05
    1e04:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <_ZN12OrangutanLCD8send_cmdEh>
    1e08:	10 93 6f 01 	sts	0x016F, r17	; 0x80016f <col>
    1e0c:	6d 81       	ldd	r22, Y+5	; 0x05
    1e0e:	60 93 70 01 	sts	0x0170, r22	; 0x800170 <row>
    1e12:	25 96       	adiw	r28, 0x05	; 5
    1e14:	e3 e0       	ldi	r30, 0x03	; 3
    1e16:	0c 94 6b 17 	jmp	0x2ed6	; 0x2ed6 <__epilogue_restores__+0x1e>

00001e1a <lcd_goto_xy>:
    1e1a:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <_ZN12OrangutanLCD6gotoXYEhh>
    1e1e:	08 95       	ret

00001e20 <_ZN16OrangutanDigital9setOutputEhh>:
    1e20:	88 30       	cpi	r24, 0x08	; 8
    1e22:	58 f4       	brcc	.+22     	; 0x1e3a <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    1e24:	91 e0       	ldi	r25, 0x01	; 1
    1e26:	01 c0       	rjmp	.+2      	; 0x1e2a <_ZN16OrangutanDigital9setOutputEhh+0xa>
    1e28:	99 0f       	add	r25, r25
    1e2a:	8a 95       	dec	r24
    1e2c:	ea f7       	brpl	.-6      	; 0x1e28 <_ZN16OrangutanDigital9setOutputEhh+0x8>
    1e2e:	89 2f       	mov	r24, r25
    1e30:	aa e2       	ldi	r26, 0x2A	; 42
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	eb e2       	ldi	r30, 0x2B	; 43
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	21 c0       	rjmp	.+66     	; 0x1e7c <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    1e3a:	8e 30       	cpi	r24, 0x0E	; 14
    1e3c:	60 f4       	brcc	.+24     	; 0x1e56 <_ZN16OrangutanDigital9setOutputEhh+0x36>
    1e3e:	98 ef       	ldi	r25, 0xF8	; 248
    1e40:	98 0f       	add	r25, r24
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	01 c0       	rjmp	.+2      	; 0x1e48 <_ZN16OrangutanDigital9setOutputEhh+0x28>
    1e46:	88 0f       	add	r24, r24
    1e48:	9a 95       	dec	r25
    1e4a:	ea f7       	brpl	.-6      	; 0x1e46 <_ZN16OrangutanDigital9setOutputEhh+0x26>
    1e4c:	a4 e2       	ldi	r26, 0x24	; 36
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	e5 e2       	ldi	r30, 0x25	; 37
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	13 c0       	rjmp	.+38     	; 0x1e7c <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    1e56:	85 31       	cpi	r24, 0x15	; 21
    1e58:	60 f4       	brcc	.+24     	; 0x1e72 <_ZN16OrangutanDigital9setOutputEhh+0x52>
    1e5a:	92 ef       	ldi	r25, 0xF2	; 242
    1e5c:	98 0f       	add	r25, r24
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	01 c0       	rjmp	.+2      	; 0x1e64 <_ZN16OrangutanDigital9setOutputEhh+0x44>
    1e62:	88 0f       	add	r24, r24
    1e64:	9a 95       	dec	r25
    1e66:	ea f7       	brpl	.-6      	; 0x1e62 <_ZN16OrangutanDigital9setOutputEhh+0x42>
    1e68:	a7 e2       	ldi	r26, 0x27	; 39
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	e8 e2       	ldi	r30, 0x28	; 40
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	05 c0       	rjmp	.+10     	; 0x1e7c <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	a0 e0       	ldi	r26, 0x00	; 0
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	e0 e0       	ldi	r30, 0x00	; 0
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	6f 3f       	cpi	r22, 0xFF	; 255
    1e7e:	19 f4       	brne	.+6      	; 0x1e86 <_ZN16OrangutanDigital9setOutputEhh+0x66>
    1e80:	90 81       	ld	r25, Z
    1e82:	98 27       	eor	r25, r24
    1e84:	09 c0       	rjmp	.+18     	; 0x1e98 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    1e86:	66 23       	and	r22, r22
    1e88:	19 f0       	breq	.+6      	; 0x1e90 <_ZN16OrangutanDigital9setOutputEhh+0x70>
    1e8a:	90 81       	ld	r25, Z
    1e8c:	98 2b       	or	r25, r24
    1e8e:	04 c0       	rjmp	.+8      	; 0x1e98 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    1e90:	20 81       	ld	r18, Z
    1e92:	98 2f       	mov	r25, r24
    1e94:	90 95       	com	r25
    1e96:	92 23       	and	r25, r18
    1e98:	90 83       	st	Z, r25
    1e9a:	9c 91       	ld	r25, X
    1e9c:	98 2b       	or	r25, r24
    1e9e:	9c 93       	st	X, r25
    1ea0:	08 95       	ret

00001ea2 <_ZN15OrangutanMotors5init2Ev>:
    1ea2:	83 ef       	ldi	r24, 0xF3	; 243
    1ea4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1ea8:	84 bd       	out	0x24, r24	; 36
    1eaa:	82 e0       	ldi	r24, 0x02	; 2
    1eac:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    1eb0:	85 bd       	out	0x25, r24	; 37
    1eb2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    1eb6:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    1eba:	18 bc       	out	0x28, r1	; 40
    1ebc:	17 bc       	out	0x27, r1	; 39
    1ebe:	60 e0       	ldi	r22, 0x00	; 0
    1ec0:	86 e0       	ldi	r24, 0x06	; 6
    1ec2:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <_ZN16OrangutanDigital9setOutputEhh>
    1ec6:	60 e0       	ldi	r22, 0x00	; 0
    1ec8:	85 e0       	ldi	r24, 0x05	; 5
    1eca:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <_ZN16OrangutanDigital9setOutputEhh>
    1ece:	60 e0       	ldi	r22, 0x00	; 0
    1ed0:	8b e0       	ldi	r24, 0x0B	; 11
    1ed2:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <_ZN16OrangutanDigital9setOutputEhh>
    1ed6:	60 e0       	ldi	r22, 0x00	; 0
    1ed8:	83 e0       	ldi	r24, 0x03	; 3
    1eda:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <_ZN16OrangutanDigital9setOutputEhh>
    1ede:	08 95       	ret

00001ee0 <_ZN15OrangutanMotors4initEv>:
    1ee0:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <_ZZN15OrangutanMotors4initEvE11initialized>
    1ee4:	81 11       	cpse	r24, r1
    1ee6:	05 c0       	rjmp	.+10     	; 0x1ef2 <_ZN15OrangutanMotors4initEv+0x12>
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <_ZZN15OrangutanMotors4initEvE11initialized>
    1eee:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <_ZN15OrangutanMotors5init2Ev>
    1ef2:	08 95       	ret

00001ef4 <_ZN15OrangutanMotors10setM1SpeedEi>:
    1ef4:	cf 93       	push	r28
    1ef6:	df 93       	push	r29
    1ef8:	ec 01       	movw	r28, r24
    1efa:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <_ZN15OrangutanMotors4initEv>
    1efe:	d7 ff       	sbrs	r29, 7
    1f00:	05 c0       	rjmp	.+10     	; 0x1f0c <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    1f02:	d1 95       	neg	r29
    1f04:	c1 95       	neg	r28
    1f06:	d1 09       	sbc	r29, r1
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	01 c0       	rjmp	.+2      	; 0x1f0e <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	cf 3f       	cpi	r28, 0xFF	; 255
    1f10:	d1 05       	cpc	r29, r1
    1f12:	19 f0       	breq	.+6      	; 0x1f1a <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    1f14:	14 f0       	brlt	.+4      	; 0x1f1a <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    1f16:	cf ef       	ldi	r28, 0xFF	; 255
    1f18:	d0 e0       	ldi	r29, 0x00	; 0
    1f1a:	88 23       	and	r24, r24
    1f1c:	19 f0       	breq	.+6      	; 0x1f24 <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    1f1e:	18 bc       	out	0x28, r1	; 40
    1f20:	c7 bd       	out	0x27, r28	; 39
    1f22:	02 c0       	rjmp	.+4      	; 0x1f28 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    1f24:	c8 bd       	out	0x28, r28	; 40
    1f26:	17 bc       	out	0x27, r1	; 39
    1f28:	df 91       	pop	r29
    1f2a:	cf 91       	pop	r28
    1f2c:	08 95       	ret

00001f2e <_ZN15OrangutanMotors10setM2SpeedEi>:
    1f2e:	cf 93       	push	r28
    1f30:	df 93       	push	r29
    1f32:	ec 01       	movw	r28, r24
    1f34:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <_ZN15OrangutanMotors4initEv>
    1f38:	d7 ff       	sbrs	r29, 7
    1f3a:	05 c0       	rjmp	.+10     	; 0x1f46 <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    1f3c:	d1 95       	neg	r29
    1f3e:	c1 95       	neg	r28
    1f40:	d1 09       	sbc	r29, r1
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	01 c0       	rjmp	.+2      	; 0x1f48 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	cf 3f       	cpi	r28, 0xFF	; 255
    1f4a:	d1 05       	cpc	r29, r1
    1f4c:	19 f0       	breq	.+6      	; 0x1f54 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1f4e:	14 f0       	brlt	.+4      	; 0x1f54 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1f50:	cf ef       	ldi	r28, 0xFF	; 255
    1f52:	d0 e0       	ldi	r29, 0x00	; 0
    1f54:	88 23       	and	r24, r24
    1f56:	29 f0       	breq	.+10     	; 0x1f62 <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    1f58:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    1f5c:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    1f60:	04 c0       	rjmp	.+8      	; 0x1f6a <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    1f62:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    1f66:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    1f6a:	df 91       	pop	r29
    1f6c:	cf 91       	pop	r28
    1f6e:	08 95       	ret

00001f70 <_ZN15OrangutanMotors9setSpeedsEii>:
    1f70:	cf 93       	push	r28
    1f72:	df 93       	push	r29
    1f74:	eb 01       	movw	r28, r22
    1f76:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <_ZN15OrangutanMotors10setM1SpeedEi>
    1f7a:	ce 01       	movw	r24, r28
    1f7c:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <_ZN15OrangutanMotors10setM2SpeedEi>
    1f80:	df 91       	pop	r29
    1f82:	cf 91       	pop	r28
    1f84:	08 95       	ret

00001f86 <set_motors>:
    1f86:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <_ZN15OrangutanMotors9setSpeedsEii>
    1f8a:	08 95       	ret

00001f8c <_ZN20OrangutanPushbuttons5init2Ev>:
    1f8c:	84 b1       	in	r24, 0x04	; 4
    1f8e:	8d 7c       	andi	r24, 0xCD	; 205
    1f90:	84 b9       	out	0x04, r24	; 4
    1f92:	85 b1       	in	r24, 0x05	; 5
    1f94:	82 63       	ori	r24, 0x32	; 50
    1f96:	85 b9       	out	0x05, r24	; 5
    1f98:	85 e0       	ldi	r24, 0x05	; 5
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	6f 93       	push	r22
    1f9e:	64 e0       	ldi	r22, 0x04	; 4
    1fa0:	6a 95       	dec	r22
    1fa2:	f1 f7       	brne	.-4      	; 0x1fa0 <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    1fa4:	6f 91       	pop	r22
    1fa6:	01 97       	sbiw	r24, 0x01	; 1
    1fa8:	c9 f7       	brne	.-14     	; 0x1f9c <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    1faa:	08 95       	ret

00001fac <_ZN20OrangutanPushbuttons4initEv>:
    1fac:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    1fb0:	81 11       	cpse	r24, r1
    1fb2:	05 c0       	rjmp	.+10     	; 0x1fbe <_ZN20OrangutanPushbuttons4initEv+0x12>
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    1fba:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <_ZN20OrangutanPushbuttons5init2Ev>
    1fbe:	08 95       	ret

00001fc0 <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    1fc0:	cf 93       	push	r28
    1fc2:	c8 2f       	mov	r28, r24
    1fc4:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <_ZN20OrangutanPushbuttons4initEv>
    1fc8:	83 b1       	in	r24, 0x03	; 3
    1fca:	8c 23       	and	r24, r28
    1fcc:	e9 f3       	breq	.-6      	; 0x1fc8 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1fce:	8a e0       	ldi	r24, 0x0A	; 10
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	0e 94 04 11 	call	0x2208	; 0x2208 <delay_ms>
    1fd6:	83 b1       	in	r24, 0x03	; 3
    1fd8:	8c 23       	and	r24, r28
    1fda:	b1 f3       	breq	.-20     	; 0x1fc8 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1fdc:	83 b1       	in	r24, 0x03	; 3
    1fde:	8c 23       	and	r24, r28
    1fe0:	cf 91       	pop	r28
    1fe2:	08 95       	ret

00001fe4 <wait_for_button_release>:
    1fe4:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    1fe8:	08 95       	ret

00001fea <_ZN20OrangutanPushbuttons9isPressedEh>:
    1fea:	a1 e0       	ldi	r26, 0x01	; 1
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	eb ef       	ldi	r30, 0xFB	; 251
    1ff0:	ff e0       	ldi	r31, 0x0F	; 15
    1ff2:	0c 94 50 17 	jmp	0x2ea0	; 0x2ea0 <__prologue_saves__+0x20>
    1ff6:	89 83       	std	Y+1, r24	; 0x01
    1ff8:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <_ZN20OrangutanPushbuttons4initEv>
    1ffc:	93 b1       	in	r25, 0x03	; 3
    1ffe:	90 95       	com	r25
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	89 23       	and	r24, r25
    2004:	21 96       	adiw	r28, 0x01	; 1
    2006:	e2 e0       	ldi	r30, 0x02	; 2
    2008:	0c 94 6c 17 	jmp	0x2ed8	; 0x2ed8 <__epilogue_restores__+0x20>

0000200c <button_is_pressed>:
    200c:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <_ZN20OrangutanPushbuttons9isPressedEh>
    2010:	08 95       	ret

00002012 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>:
    2012:	28 2f       	mov	r18, r24
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	9a e0       	ldi	r25, 0x0A	; 10
    2018:	89 9f       	mul	r24, r25
    201a:	f0 01       	movw	r30, r0
    201c:	11 24       	eor	r1, r1
    201e:	ed 58       	subi	r30, 0x8D	; 141
    2020:	fe 4f       	sbci	r31, 0xFE	; 254
    2022:	80 85       	ldd	r24, Z+8	; 0x08
    2024:	91 85       	ldd	r25, Z+9	; 0x09
    2026:	00 97       	sbiw	r24, 0x00	; 0
    2028:	21 f0       	breq	.+8      	; 0x2032 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    202a:	52 81       	ldd	r21, Z+2	; 0x02
    202c:	44 81       	ldd	r20, Z+4	; 0x04
    202e:	54 17       	cp	r21, r20
    2030:	80 f0       	brcs	.+32     	; 0x2052 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x40>
    2032:	8a e0       	ldi	r24, 0x0A	; 10
    2034:	82 9f       	mul	r24, r18
    2036:	f0 01       	movw	r30, r0
    2038:	83 9f       	mul	r24, r19
    203a:	f0 0d       	add	r31, r0
    203c:	11 24       	eor	r1, r1
    203e:	ed 58       	subi	r30, 0x8D	; 141
    2040:	fe 4f       	sbci	r31, 0xFE	; 254
    2042:	92 81       	ldd	r25, Z+2	; 0x02
    2044:	84 81       	ldd	r24, Z+4	; 0x04
    2046:	98 13       	cpse	r25, r24
    2048:	0e c0       	rjmp	.+28     	; 0x2066 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x54>
    204a:	85 81       	ldd	r24, Z+5	; 0x05
    204c:	81 11       	cpse	r24, r1
    204e:	0a c0       	rjmp	.+20     	; 0x2064 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x52>
    2050:	08 95       	ret
    2052:	42 81       	ldd	r20, Z+2	; 0x02
    2054:	dc 01       	movw	r26, r24
    2056:	a4 0f       	add	r26, r20
    2058:	b1 1d       	adc	r27, r1
    205a:	6c 93       	st	X, r22
    205c:	82 81       	ldd	r24, Z+2	; 0x02
    205e:	8f 5f       	subi	r24, 0xFF	; 255
    2060:	82 83       	std	Z+2, r24	; 0x02
    2062:	e7 cf       	rjmp	.-50     	; 0x2032 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    2064:	12 82       	std	Z+2, r1	; 0x02
    2066:	08 95       	ret

00002068 <__vector_18>:
    2068:	1f 92       	push	r1
    206a:	0f 92       	push	r0
    206c:	0f b6       	in	r0, 0x3f	; 63
    206e:	0f 92       	push	r0
    2070:	11 24       	eor	r1, r1
    2072:	2f 93       	push	r18
    2074:	3f 93       	push	r19
    2076:	4f 93       	push	r20
    2078:	5f 93       	push	r21
    207a:	6f 93       	push	r22
    207c:	7f 93       	push	r23
    207e:	8f 93       	push	r24
    2080:	9f 93       	push	r25
    2082:	af 93       	push	r26
    2084:	bf 93       	push	r27
    2086:	ef 93       	push	r30
    2088:	ff 93       	push	r31
    208a:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	0e 94 09 10 	call	0x2012	; 0x2012 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>
    2094:	ff 91       	pop	r31
    2096:	ef 91       	pop	r30
    2098:	bf 91       	pop	r27
    209a:	af 91       	pop	r26
    209c:	9f 91       	pop	r25
    209e:	8f 91       	pop	r24
    20a0:	7f 91       	pop	r23
    20a2:	6f 91       	pop	r22
    20a4:	5f 91       	pop	r21
    20a6:	4f 91       	pop	r20
    20a8:	3f 91       	pop	r19
    20aa:	2f 91       	pop	r18
    20ac:	0f 90       	pop	r0
    20ae:	0f be       	out	0x3f, r0	; 63
    20b0:	0f 90       	pop	r0
    20b2:	1f 90       	pop	r1
    20b4:	18 95       	reti

000020b6 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>:
    20b6:	9a e0       	ldi	r25, 0x0A	; 10
    20b8:	89 9f       	mul	r24, r25
    20ba:	f0 01       	movw	r30, r0
    20bc:	11 24       	eor	r1, r1
    20be:	ed 58       	subi	r30, 0x8D	; 141
    20c0:	fe 4f       	sbci	r31, 0xFE	; 254
    20c2:	86 81       	ldd	r24, Z+6	; 0x06
    20c4:	97 81       	ldd	r25, Z+7	; 0x07
    20c6:	89 2b       	or	r24, r25
    20c8:	59 f0       	breq	.+22     	; 0x20e0 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    20ca:	91 81       	ldd	r25, Z+1	; 0x01
    20cc:	83 81       	ldd	r24, Z+3	; 0x03
    20ce:	98 17       	cp	r25, r24
    20d0:	38 f4       	brcc	.+14     	; 0x20e0 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    20d2:	80 81       	ld	r24, Z
    20d4:	81 11       	cpse	r24, r1
    20d6:	04 c0       	rjmp	.+8      	; 0x20e0 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    20d8:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    20dc:	80 62       	ori	r24, 0x20	; 32
    20de:	03 c0       	rjmp	.+6      	; 0x20e6 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x30>
    20e0:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    20e4:	8f 7d       	andi	r24, 0xDF	; 223
    20e6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    20ea:	08 95       	ret

000020ec <_ZN15OrangutanSerial11uart_tx_isrEh>:
    20ec:	9a e0       	ldi	r25, 0x0A	; 10
    20ee:	89 9f       	mul	r24, r25
    20f0:	f0 01       	movw	r30, r0
    20f2:	11 24       	eor	r1, r1
    20f4:	ed 58       	subi	r30, 0x8D	; 141
    20f6:	fe 4f       	sbci	r31, 0xFE	; 254
    20f8:	26 81       	ldd	r18, Z+6	; 0x06
    20fa:	37 81       	ldd	r19, Z+7	; 0x07
    20fc:	21 15       	cp	r18, r1
    20fe:	31 05       	cpc	r19, r1
    2100:	41 f0       	breq	.+16     	; 0x2112 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    2102:	41 81       	ldd	r20, Z+1	; 0x01
    2104:	93 81       	ldd	r25, Z+3	; 0x03
    2106:	49 17       	cp	r20, r25
    2108:	20 f4       	brcc	.+8      	; 0x2112 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    210a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    210e:	95 fd       	sbrc	r25, 5
    2110:	03 c0       	rjmp	.+6      	; 0x2118 <_ZN15OrangutanSerial11uart_tx_isrEh+0x2c>
    2112:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    2116:	08 95       	ret
    2118:	91 81       	ldd	r25, Z+1	; 0x01
    211a:	d9 01       	movw	r26, r18
    211c:	a9 0f       	add	r26, r25
    211e:	b1 1d       	adc	r27, r1
    2120:	9c 91       	ld	r25, X
    2122:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    2126:	91 81       	ldd	r25, Z+1	; 0x01
    2128:	9f 5f       	subi	r25, 0xFF	; 255
    212a:	91 83       	std	Z+1, r25	; 0x01
    212c:	f2 cf       	rjmp	.-28     	; 0x2112 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>

0000212e <__vector_19>:
    212e:	1f 92       	push	r1
    2130:	0f 92       	push	r0
    2132:	0f b6       	in	r0, 0x3f	; 63
    2134:	0f 92       	push	r0
    2136:	11 24       	eor	r1, r1
    2138:	2f 93       	push	r18
    213a:	3f 93       	push	r19
    213c:	4f 93       	push	r20
    213e:	5f 93       	push	r21
    2140:	6f 93       	push	r22
    2142:	7f 93       	push	r23
    2144:	8f 93       	push	r24
    2146:	9f 93       	push	r25
    2148:	af 93       	push	r26
    214a:	bf 93       	push	r27
    214c:	ef 93       	push	r30
    214e:	ff 93       	push	r31
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	0e 94 76 10 	call	0x20ec	; 0x20ec <_ZN15OrangutanSerial11uart_tx_isrEh>
    2156:	ff 91       	pop	r31
    2158:	ef 91       	pop	r30
    215a:	bf 91       	pop	r27
    215c:	af 91       	pop	r26
    215e:	9f 91       	pop	r25
    2160:	8f 91       	pop	r24
    2162:	7f 91       	pop	r23
    2164:	6f 91       	pop	r22
    2166:	5f 91       	pop	r21
    2168:	4f 91       	pop	r20
    216a:	3f 91       	pop	r19
    216c:	2f 91       	pop	r18
    216e:	0f 90       	pop	r0
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	0f 90       	pop	r0
    2174:	1f 90       	pop	r1
    2176:	18 95       	reti

00002178 <__vector_9>:
    2178:	2f 92       	push	r2
    217a:	8f 93       	push	r24
    217c:	9f 93       	push	r25
    217e:	2f b6       	in	r2, 0x3f	; 63
    2180:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <tickCount+0x1>
    2184:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <tickCount+0x2>
    2188:	01 96       	adiw	r24, 0x01	; 1
    218a:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <tickCount+0x1>
    218e:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <tickCount+0x2>
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <tickCount+0x3>
    2198:	89 1f       	adc	r24, r25
    219a:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <tickCount+0x3>
    219e:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <us_over_10+0x1>
    21a2:	9c 5f       	subi	r25, 0xFC	; 252
    21a4:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <us_over_10+0x1>
    21a8:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <us_over_10>
    21ac:	80 51       	subi	r24, 0x10	; 16
    21ae:	97 42       	sbci	r25, 0x27	; 39
    21b0:	c0 f0       	brcs	.+48     	; 0x21e2 <end>
    21b2:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <us_over_10+0x1>
    21b6:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <us_over_10>
    21ba:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <msCounter>
    21be:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <msCounter+0x1>
    21c2:	01 96       	adiw	r24, 0x01	; 1
    21c4:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <msCounter>
    21c8:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <msCounter+0x1>
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <msCounter+0x2>
    21d2:	89 1f       	adc	r24, r25
    21d4:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <msCounter+0x2>
    21d8:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <msCounter+0x3>
    21dc:	89 1f       	adc	r24, r25
    21de:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <msCounter+0x3>

000021e2 <end>:
    21e2:	2f be       	out	0x3f, r2	; 63
    21e4:	9f 91       	pop	r25
    21e6:	8f 91       	pop	r24
    21e8:	2f 90       	pop	r2
    21ea:	18 95       	reti

000021ec <_ZN13OrangutanTime17delayMillisecondsEj>:
    21ec:	28 ee       	ldi	r18, 0xE8	; 232
    21ee:	33 e0       	ldi	r19, 0x03	; 3
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	48 f0       	brcs	.+18     	; 0x2206 <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    21f4:	f9 01       	movw	r30, r18
    21f6:	6f 93       	push	r22
    21f8:	64 e0       	ldi	r22, 0x04	; 4
    21fa:	6a 95       	dec	r22
    21fc:	f1 f7       	brne	.-4      	; 0x21fa <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    21fe:	6f 91       	pop	r22
    2200:	31 97       	sbiw	r30, 0x01	; 1
    2202:	c9 f7       	brne	.-14     	; 0x21f6 <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    2204:	f5 cf       	rjmp	.-22     	; 0x21f0 <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    2206:	08 95       	ret

00002208 <delay_ms>:
    2208:	0e 94 f6 10 	call	0x21ec	; 0x21ec <_ZN13OrangutanTime17delayMillisecondsEj>
    220c:	08 95       	ret

0000220e <_ZN13OrangutanTime5init2Ev>:
    220e:	e0 e7       	ldi	r30, 0x70	; 112
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	80 81       	ld	r24, Z
    2214:	8e 7f       	andi	r24, 0xFE	; 254
    2216:	80 83       	st	Z, r24
    2218:	a0 eb       	ldi	r26, 0xB0	; 176
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	8c 91       	ld	r24, X
    221e:	83 60       	ori	r24, 0x03	; 3
    2220:	8c 93       	st	X, r24
    2222:	a1 eb       	ldi	r26, 0xB1	; 177
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	8c 91       	ld	r24, X
    2228:	80 7f       	andi	r24, 0xF0	; 240
    222a:	8c 93       	st	X, r24
    222c:	8c 91       	ld	r24, X
    222e:	82 60       	ori	r24, 0x02	; 2
    2230:	8c 93       	st	X, r24
    2232:	b8 9a       	sbi	0x17, 0	; 23
    2234:	80 81       	ld	r24, Z
    2236:	81 60       	ori	r24, 0x01	; 1
    2238:	80 83       	st	Z, r24
    223a:	78 94       	sei
    223c:	08 95       	ret

0000223e <_ZN13OrangutanTime4initEv>:
    223e:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <_ZZN13OrangutanTime4initEvE11initialized>
    2242:	81 11       	cpse	r24, r1
    2244:	05 c0       	rjmp	.+10     	; 0x2250 <_ZN13OrangutanTime4initEv+0x12>
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <_ZZN13OrangutanTime4initEvE11initialized>
    224c:	0e 94 07 11 	call	0x220e	; 0x220e <_ZN13OrangutanTime5init2Ev>
    2250:	08 95       	ret

00002252 <_ZN13OrangutanTime2msEv>:
    2252:	0e 94 1f 11 	call	0x223e	; 0x223e <_ZN13OrangutanTime4initEv>
    2256:	e0 e7       	ldi	r30, 0x70	; 112
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	80 81       	ld	r24, Z
    225c:	8e 7f       	andi	r24, 0xFE	; 254
    225e:	80 83       	st	Z, r24
    2260:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <msCounter>
    2264:	70 91 80 01 	lds	r23, 0x0180	; 0x800180 <msCounter+0x1>
    2268:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <msCounter+0x2>
    226c:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <msCounter+0x3>
    2270:	20 81       	ld	r18, Z
    2272:	21 60       	ori	r18, 0x01	; 1
    2274:	20 83       	st	Z, r18
    2276:	08 95       	ret

00002278 <get_ms>:
    2278:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN13OrangutanTime2msEv>
    227c:	08 95       	ret

0000227e <_ZN13OrangutanTime5resetEv>:
    227e:	0e 94 1f 11 	call	0x223e	; 0x223e <_ZN13OrangutanTime4initEv>
    2282:	e0 e7       	ldi	r30, 0x70	; 112
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	80 81       	ld	r24, Z
    2288:	8e 7f       	andi	r24, 0xFE	; 254
    228a:	80 83       	st	Z, r24
    228c:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <msCounter>
    2290:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <msCounter+0x1>
    2294:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <msCounter+0x2>
    2298:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <msCounter+0x3>
    229c:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <us_over_10+0x1>
    22a0:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <us_over_10>
    22a4:	80 81       	ld	r24, Z
    22a6:	81 60       	ori	r24, 0x01	; 1
    22a8:	80 83       	st	Z, r24
    22aa:	08 95       	ret

000022ac <read_line_sensors>:
    22ac:	46 2f       	mov	r20, r22
    22ae:	bc 01       	movw	r22, r24
    22b0:	87 e8       	ldi	r24, 0x87	; 135
    22b2:	91 e0       	ldi	r25, 0x01	; 1
    22b4:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN16PololuQTRSensors4readEPjh>
    22b8:	08 95       	ret

000022ba <calibrate_line_sensors>:
    22ba:	68 2f       	mov	r22, r24
    22bc:	87 e8       	ldi	r24, 0x87	; 135
    22be:	91 e0       	ldi	r25, 0x01	; 1
    22c0:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <_ZN16PololuQTRSensors9calibrateEh>
    22c4:	08 95       	ret

000022c6 <read_line>:
    22c6:	46 2f       	mov	r20, r22
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	bc 01       	movw	r22, r24
    22cc:	87 e8       	ldi	r24, 0x87	; 135
    22ce:	91 e0       	ldi	r25, 0x01	; 1
    22d0:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <_ZN16PololuQTRSensors8readLineEPjhh>
    22d4:	08 95       	ret

000022d6 <_ZN9Pololu3pi4initEjh>:
    22d6:	0f 93       	push	r16
    22d8:	cf 93       	push	r28
    22da:	df 93       	push	r29
    22dc:	00 d0       	rcall	.+0      	; 0x22de <_ZN9Pololu3pi4initEjh+0x8>
    22de:	00 d0       	rcall	.+0      	; 0x22e0 <_ZN9Pololu3pi4initEjh+0xa>
    22e0:	1f 92       	push	r1
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
    22e6:	9c 01       	movw	r18, r24
    22e8:	85 e0       	ldi	r24, 0x05	; 5
    22ea:	ec e2       	ldi	r30, 0x2C	; 44
    22ec:	f1 e0       	ldi	r31, 0x01	; 1
    22ee:	de 01       	movw	r26, r28
    22f0:	11 96       	adiw	r26, 0x01	; 1
    22f2:	01 90       	ld	r0, Z+
    22f4:	0d 92       	st	X+, r0
    22f6:	8a 95       	dec	r24
    22f8:	e1 f7       	brne	.-8      	; 0x22f2 <_ZN9Pololu3pi4initEjh+0x1c>
    22fa:	66 23       	and	r22, r22
    22fc:	11 f0       	breq	.+4      	; 0x2302 <_ZN9Pololu3pi4initEjh+0x2c>
    22fe:	0f ef       	ldi	r16, 0xFF	; 255
    2300:	01 c0       	rjmp	.+2      	; 0x2304 <_ZN9Pololu3pi4initEjh+0x2e>
    2302:	03 e1       	ldi	r16, 0x13	; 19
    2304:	45 e0       	ldi	r20, 0x05	; 5
    2306:	be 01       	movw	r22, r28
    2308:	6f 5f       	subi	r22, 0xFF	; 255
    230a:	7f 4f       	sbci	r23, 0xFF	; 255
    230c:	87 e8       	ldi	r24, 0x87	; 135
    230e:	91 e0       	ldi	r25, 0x01	; 1
    2310:	0e 94 3d 12 	call	0x247a	; 0x247a <_ZN18PololuQTRSensorsRC4initEPhhjh>
    2314:	87 e8       	ldi	r24, 0x87	; 135
    2316:	91 e0       	ldi	r25, 0x01	; 1
    2318:	0e 94 14 12 	call	0x2428	; 0x2428 <_ZN16PololuQTRSensors11emittersOffEv>
    231c:	0e 94 3f 11 	call	0x227e	; 0x227e <_ZN13OrangutanTime5resetEv>
    2320:	0f 90       	pop	r0
    2322:	0f 90       	pop	r0
    2324:	0f 90       	pop	r0
    2326:	0f 90       	pop	r0
    2328:	0f 90       	pop	r0
    232a:	df 91       	pop	r29
    232c:	cf 91       	pop	r28
    232e:	0f 91       	pop	r16
    2330:	08 95       	ret

00002332 <pololu_3pi_init>:
    2332:	60 e0       	ldi	r22, 0x00	; 0
    2334:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <_ZN9Pololu3pi4initEjh>
    2338:	08 95       	ret

0000233a <_GLOBAL__sub_D_pololu_3pi_init>:
    233a:	87 e8       	ldi	r24, 0x87	; 135
    233c:	91 e0       	ldi	r25, 0x01	; 1
    233e:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <_ZN16PololuQTRSensorsD1Ev>
    2342:	08 95       	ret

00002344 <delay_us>:
    2344:	6f 93       	push	r22
    2346:	64 e0       	ldi	r22, 0x04	; 4
    2348:	6a 95       	dec	r22
    234a:	f1 f7       	brne	.-4      	; 0x2348 <delay_us+0x4>
    234c:	6f 91       	pop	r22
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	c9 f7       	brne	.-14     	; 0x2344 <delay_us>
    2352:	08 95       	ret

00002354 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    2354:	fc 01       	movw	r30, r24
    2356:	11 82       	std	Z+1, r1	; 0x01
    2358:	10 82       	st	Z, r1
    235a:	13 82       	std	Z+3, r1	; 0x03
    235c:	12 82       	std	Z+2, r1	; 0x02
    235e:	15 82       	std	Z+5, r1	; 0x05
    2360:	14 82       	std	Z+4, r1	; 0x04
    2362:	16 82       	std	Z+6, r1	; 0x06
    2364:	68 30       	cpi	r22, 0x08	; 8
    2366:	68 f4       	brcc	.+26     	; 0x2382 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    2368:	89 e2       	ldi	r24, 0x29	; 41
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	91 83       	std	Z+1, r25	; 0x01
    236e:	80 83       	st	Z, r24
    2370:	8b e2       	ldi	r24, 0x2B	; 43
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	93 83       	std	Z+3, r25	; 0x03
    2376:	82 83       	std	Z+2, r24	; 0x02
    2378:	8a e2       	ldi	r24, 0x2A	; 42
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	95 83       	std	Z+5, r25	; 0x05
    237e:	84 83       	std	Z+4, r24	; 0x04
    2380:	1f c0       	rjmp	.+62     	; 0x23c0 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    2382:	6e 30       	cpi	r22, 0x0E	; 14
    2384:	70 f4       	brcc	.+28     	; 0x23a2 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    2386:	83 e2       	ldi	r24, 0x23	; 35
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	91 83       	std	Z+1, r25	; 0x01
    238c:	80 83       	st	Z, r24
    238e:	85 e2       	ldi	r24, 0x25	; 37
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	93 83       	std	Z+3, r25	; 0x03
    2394:	82 83       	std	Z+2, r24	; 0x02
    2396:	84 e2       	ldi	r24, 0x24	; 36
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	95 83       	std	Z+5, r25	; 0x05
    239c:	84 83       	std	Z+4, r24	; 0x04
    239e:	68 50       	subi	r22, 0x08	; 8
    23a0:	0f c0       	rjmp	.+30     	; 0x23c0 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    23a2:	65 31       	cpi	r22, 0x15	; 21
    23a4:	98 f4       	brcc	.+38     	; 0x23cc <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    23a6:	86 e2       	ldi	r24, 0x26	; 38
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	91 83       	std	Z+1, r25	; 0x01
    23ac:	80 83       	st	Z, r24
    23ae:	88 e2       	ldi	r24, 0x28	; 40
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	93 83       	std	Z+3, r25	; 0x03
    23b4:	82 83       	std	Z+2, r24	; 0x02
    23b6:	87 e2       	ldi	r24, 0x27	; 39
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	95 83       	std	Z+5, r25	; 0x05
    23bc:	84 83       	std	Z+4, r24	; 0x04
    23be:	6e 50       	subi	r22, 0x0E	; 14
    23c0:	81 e0       	ldi	r24, 0x01	; 1
    23c2:	01 c0       	rjmp	.+2      	; 0x23c6 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    23c4:	88 0f       	add	r24, r24
    23c6:	6a 95       	dec	r22
    23c8:	ea f7       	brpl	.-6      	; 0x23c4 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    23ca:	86 83       	std	Z+6, r24	; 0x06
    23cc:	08 95       	ret

000023ce <_ZN16PololuQTRSensors4initEhhh>:
    23ce:	a7 e0       	ldi	r26, 0x07	; 7
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	ed ee       	ldi	r30, 0xED	; 237
    23d4:	f1 e1       	ldi	r31, 0x11	; 17
    23d6:	0c 94 4e 17 	jmp	0x2e9c	; 0x2e9c <__prologue_saves__+0x1c>
    23da:	8c 01       	movw	r16, r24
    23dc:	fc 01       	movw	r30, r24
    23de:	11 82       	std	Z+1, r1	; 0x01
    23e0:	10 82       	st	Z, r1
    23e2:	13 82       	std	Z+3, r1	; 0x03
    23e4:	12 82       	std	Z+2, r1	; 0x02
    23e6:	15 82       	std	Z+5, r1	; 0x05
    23e8:	14 82       	std	Z+4, r1	; 0x04
    23ea:	17 82       	std	Z+7, r1	; 0x07
    23ec:	16 82       	std	Z+6, r1	; 0x06
    23ee:	61 31       	cpi	r22, 0x11	; 17
    23f0:	18 f0       	brcs	.+6      	; 0x23f8 <_ZN16PololuQTRSensors4initEhhh+0x2a>
    23f2:	80 e1       	ldi	r24, 0x10	; 16
    23f4:	80 87       	std	Z+8, r24	; 0x08
    23f6:	02 c0       	rjmp	.+4      	; 0x23fc <_ZN16PololuQTRSensors4initEhhh+0x2e>
    23f8:	fc 01       	movw	r30, r24
    23fa:	60 87       	std	Z+8, r22	; 0x08
    23fc:	f8 01       	movw	r30, r16
    23fe:	20 8b       	std	Z+16, r18	; 0x10
    2400:	64 2f       	mov	r22, r20
    2402:	ce 01       	movw	r24, r28
    2404:	01 96       	adiw	r24, 0x01	; 1
    2406:	0e 94 aa 11 	call	0x2354	; 0x2354 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    240a:	8f 81       	ldd	r24, Y+7	; 0x07
    240c:	f8 01       	movw	r30, r16
    240e:	81 87       	std	Z+9, r24	; 0x09
    2410:	8b 81       	ldd	r24, Y+3	; 0x03
    2412:	9c 81       	ldd	r25, Y+4	; 0x04
    2414:	93 87       	std	Z+11, r25	; 0x0b
    2416:	82 87       	std	Z+10, r24	; 0x0a
    2418:	8d 81       	ldd	r24, Y+5	; 0x05
    241a:	9e 81       	ldd	r25, Y+6	; 0x06
    241c:	95 87       	std	Z+13, r25	; 0x0d
    241e:	84 87       	std	Z+12, r24	; 0x0c
    2420:	27 96       	adiw	r28, 0x07	; 7
    2422:	e4 e0       	ldi	r30, 0x04	; 4
    2424:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <__epilogue_restores__+0x1c>

00002428 <_ZN16PololuQTRSensors11emittersOffEv>:
    2428:	fc 01       	movw	r30, r24
    242a:	a4 85       	ldd	r26, Z+12	; 0x0c
    242c:	b5 85       	ldd	r27, Z+13	; 0x0d
    242e:	10 97       	sbiw	r26, 0x00	; 0
    2430:	79 f0       	breq	.+30     	; 0x2450 <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    2432:	8c 91       	ld	r24, X
    2434:	91 85       	ldd	r25, Z+9	; 0x09
    2436:	89 2b       	or	r24, r25
    2438:	8c 93       	st	X, r24
    243a:	a2 85       	ldd	r26, Z+10	; 0x0a
    243c:	b3 85       	ldd	r27, Z+11	; 0x0b
    243e:	9c 91       	ld	r25, X
    2440:	81 85       	ldd	r24, Z+9	; 0x09
    2442:	80 95       	com	r24
    2444:	89 23       	and	r24, r25
    2446:	8c 93       	st	X, r24
    2448:	88 ec       	ldi	r24, 0xC8	; 200
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	0e 94 a2 11 	call	0x2344	; 0x2344 <delay_us>
    2450:	08 95       	ret

00002452 <_ZN16PololuQTRSensors10emittersOnEv>:
    2452:	fc 01       	movw	r30, r24
    2454:	a4 85       	ldd	r26, Z+12	; 0x0c
    2456:	b5 85       	ldd	r27, Z+13	; 0x0d
    2458:	10 97       	sbiw	r26, 0x00	; 0
    245a:	71 f0       	breq	.+28     	; 0x2478 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    245c:	8c 91       	ld	r24, X
    245e:	91 85       	ldd	r25, Z+9	; 0x09
    2460:	89 2b       	or	r24, r25
    2462:	8c 93       	st	X, r24
    2464:	a2 85       	ldd	r26, Z+10	; 0x0a
    2466:	b3 85       	ldd	r27, Z+11	; 0x0b
    2468:	8c 91       	ld	r24, X
    246a:	91 85       	ldd	r25, Z+9	; 0x09
    246c:	89 2b       	or	r24, r25
    246e:	8c 93       	st	X, r24
    2470:	88 ec       	ldi	r24, 0xC8	; 200
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	0e 94 a2 11 	call	0x2344	; 0x2344 <delay_us>
    2478:	08 95       	ret

0000247a <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    247a:	a7 e0       	ldi	r26, 0x07	; 7
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	e3 e4       	ldi	r30, 0x43	; 67
    2480:	f2 e1       	ldi	r31, 0x12	; 18
    2482:	0c 94 43 17 	jmp	0x2e86	; 0x2e86 <__prologue_saves__+0x6>
    2486:	7c 01       	movw	r14, r24
    2488:	4b 01       	movw	r8, r22
    248a:	64 2f       	mov	r22, r20
    248c:	39 01       	movw	r6, r18
    248e:	40 2f       	mov	r20, r16
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	0e 94 e7 11 	call	0x23ce	; 0x23ce <_ZN16PololuQTRSensors4initEhhh>
    2496:	87 01       	movw	r16, r14
    2498:	0f 5b       	subi	r16, 0xBF	; 191
    249a:	1f 4f       	sbci	r17, 0xFF	; 255
    249c:	f8 01       	movw	r30, r16
    249e:	10 82       	st	Z, r1
    24a0:	67 01       	movw	r12, r14
    24a2:	f2 e4       	ldi	r31, 0x42	; 66
    24a4:	cf 0e       	add	r12, r31
    24a6:	d1 1c       	adc	r13, r1
    24a8:	f6 01       	movw	r30, r12
    24aa:	10 82       	st	Z, r1
    24ac:	57 01       	movw	r10, r14
    24ae:	f3 e4       	ldi	r31, 0x43	; 67
    24b0:	af 0e       	add	r10, r31
    24b2:	b1 1c       	adc	r11, r1
    24b4:	f5 01       	movw	r30, r10
    24b6:	10 82       	st	Z, r1
    24b8:	f7 01       	movw	r30, r14
    24ba:	77 86       	std	Z+15, r7	; 0x0f
    24bc:	66 86       	std	Z+14, r6	; 0x0e
    24be:	51 2c       	mov	r5, r1
    24c0:	f7 01       	movw	r30, r14
    24c2:	80 85       	ldd	r24, Z+8	; 0x08
    24c4:	58 16       	cp	r5, r24
    24c6:	50 f5       	brcc	.+84     	; 0x251c <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    24c8:	65 2c       	mov	r6, r5
    24ca:	71 2c       	mov	r7, r1
    24cc:	f4 01       	movw	r30, r8
    24ce:	e6 0d       	add	r30, r6
    24d0:	f7 1d       	adc	r31, r7
    24d2:	60 81       	ld	r22, Z
    24d4:	ce 01       	movw	r24, r28
    24d6:	01 96       	adiw	r24, 0x01	; 1
    24d8:	0e 94 aa 11 	call	0x2354	; 0x2354 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    24dc:	2f 81       	ldd	r18, Y+7	; 0x07
    24de:	f7 01       	movw	r30, r14
    24e0:	e6 0d       	add	r30, r6
    24e2:	f7 1d       	adc	r31, r7
    24e4:	21 8b       	std	Z+17, r18	; 0x11
    24e6:	89 81       	ldd	r24, Y+1	; 0x01
    24e8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ea:	f3 01       	movw	r30, r6
    24ec:	ee 0f       	add	r30, r30
    24ee:	ff 1f       	adc	r31, r31
    24f0:	ee 0d       	add	r30, r14
    24f2:	ff 1d       	adc	r31, r15
    24f4:	92 a3       	std	Z+34, r25	; 0x22
    24f6:	81 a3       	std	Z+33, r24	; 0x21
    24f8:	83 32       	cpi	r24, 0x23	; 35
    24fa:	91 05       	cpc	r25, r1
    24fc:	11 f4       	brne	.+4      	; 0x2502 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    24fe:	f8 01       	movw	r30, r16
    2500:	08 c0       	rjmp	.+16     	; 0x2512 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    2502:	86 32       	cpi	r24, 0x26	; 38
    2504:	91 05       	cpc	r25, r1
    2506:	11 f4       	brne	.+4      	; 0x250c <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    2508:	f6 01       	movw	r30, r12
    250a:	03 c0       	rjmp	.+6      	; 0x2512 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    250c:	89 97       	sbiw	r24, 0x29	; 41
    250e:	21 f4       	brne	.+8      	; 0x2518 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    2510:	f5 01       	movw	r30, r10
    2512:	80 81       	ld	r24, Z
    2514:	82 2b       	or	r24, r18
    2516:	80 83       	st	Z, r24
    2518:	53 94       	inc	r5
    251a:	d2 cf       	rjmp	.-92     	; 0x24c0 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    251c:	27 96       	adiw	r28, 0x07	; 7
    251e:	ef e0       	ldi	r30, 0x0F	; 15
    2520:	0c 94 5f 17 	jmp	0x2ebe	; 0x2ebe <__epilogue_restores__+0x6>

00002524 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    2524:	a0 e0       	ldi	r26, 0x00	; 0
    2526:	b0 e0       	ldi	r27, 0x00	; 0
    2528:	e8 e9       	ldi	r30, 0x98	; 152
    252a:	f2 e1       	ldi	r31, 0x12	; 18
    252c:	0c 94 45 17 	jmp	0x2e8a	; 0x2e8a <__prologue_saves__+0xa>
    2530:	ec 01       	movw	r28, r24
    2532:	5b 01       	movw	r10, r22
    2534:	6c 01       	movw	r12, r24
    2536:	81 e4       	ldi	r24, 0x41	; 65
    2538:	c8 0e       	add	r12, r24
    253a:	d1 1c       	adc	r13, r1
    253c:	f6 01       	movw	r30, r12
    253e:	80 80       	ld	r8, Z
    2540:	7e 01       	movw	r14, r28
    2542:	f2 e4       	ldi	r31, 0x42	; 66
    2544:	ef 0e       	add	r14, r31
    2546:	f1 1c       	adc	r15, r1
    2548:	f7 01       	movw	r30, r14
    254a:	70 80       	ld	r7, Z
    254c:	8e 01       	movw	r16, r28
    254e:	0d 5b       	subi	r16, 0xBD	; 189
    2550:	1f 4f       	sbci	r17, 0xFF	; 255
    2552:	f8 01       	movw	r30, r16
    2554:	90 80       	ld	r9, Z
    2556:	80 e0       	ldi	r24, 0x00	; 0
    2558:	98 85       	ldd	r25, Y+8	; 0x08
    255a:	89 17       	cp	r24, r25
    255c:	48 f4       	brcc	.+18     	; 0x2570 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    255e:	f5 01       	movw	r30, r10
    2560:	e8 0f       	add	r30, r24
    2562:	f1 1d       	adc	r31, r1
    2564:	e8 0f       	add	r30, r24
    2566:	f1 1d       	adc	r31, r1
    2568:	11 82       	std	Z+1, r1	; 0x01
    256a:	10 82       	st	Z, r1
    256c:	8f 5f       	subi	r24, 0xFF	; 255
    256e:	f4 cf       	rjmp	.-24     	; 0x2558 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    2570:	84 b1       	in	r24, 0x04	; 4
    2572:	f6 01       	movw	r30, r12
    2574:	90 81       	ld	r25, Z
    2576:	89 2b       	or	r24, r25
    2578:	84 b9       	out	0x04, r24	; 4
    257a:	87 b1       	in	r24, 0x07	; 7
    257c:	f7 01       	movw	r30, r14
    257e:	90 81       	ld	r25, Z
    2580:	89 2b       	or	r24, r25
    2582:	87 b9       	out	0x07, r24	; 7
    2584:	8a b1       	in	r24, 0x0a	; 10
    2586:	f8 01       	movw	r30, r16
    2588:	90 81       	ld	r25, Z
    258a:	89 2b       	or	r24, r25
    258c:	8a b9       	out	0x0a, r24	; 10
    258e:	85 b1       	in	r24, 0x05	; 5
    2590:	f6 01       	movw	r30, r12
    2592:	90 81       	ld	r25, Z
    2594:	89 2b       	or	r24, r25
    2596:	85 b9       	out	0x05, r24	; 5
    2598:	88 b1       	in	r24, 0x08	; 8
    259a:	f7 01       	movw	r30, r14
    259c:	90 81       	ld	r25, Z
    259e:	89 2b       	or	r24, r25
    25a0:	88 b9       	out	0x08, r24	; 8
    25a2:	8b b1       	in	r24, 0x0b	; 11
    25a4:	f8 01       	movw	r30, r16
    25a6:	90 81       	ld	r25, Z
    25a8:	89 2b       	or	r24, r25
    25aa:	8b b9       	out	0x0b, r24	; 11
    25ac:	8a e0       	ldi	r24, 0x0A	; 10
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	0e 94 a2 11 	call	0x2344	; 0x2344 <delay_us>
    25b4:	94 b1       	in	r25, 0x04	; 4
    25b6:	f6 01       	movw	r30, r12
    25b8:	80 81       	ld	r24, Z
    25ba:	80 95       	com	r24
    25bc:	89 23       	and	r24, r25
    25be:	84 b9       	out	0x04, r24	; 4
    25c0:	97 b1       	in	r25, 0x07	; 7
    25c2:	f7 01       	movw	r30, r14
    25c4:	80 81       	ld	r24, Z
    25c6:	80 95       	com	r24
    25c8:	89 23       	and	r24, r25
    25ca:	87 b9       	out	0x07, r24	; 7
    25cc:	9a b1       	in	r25, 0x0a	; 10
    25ce:	f8 01       	movw	r30, r16
    25d0:	80 81       	ld	r24, Z
    25d2:	80 95       	com	r24
    25d4:	89 23       	and	r24, r25
    25d6:	8a b9       	out	0x0a, r24	; 10
    25d8:	95 b1       	in	r25, 0x05	; 5
    25da:	f6 01       	movw	r30, r12
    25dc:	80 81       	ld	r24, Z
    25de:	80 95       	com	r24
    25e0:	89 23       	and	r24, r25
    25e2:	85 b9       	out	0x05, r24	; 5
    25e4:	98 b1       	in	r25, 0x08	; 8
    25e6:	f7 01       	movw	r30, r14
    25e8:	80 81       	ld	r24, Z
    25ea:	80 95       	com	r24
    25ec:	89 23       	and	r24, r25
    25ee:	88 b9       	out	0x08, r24	; 8
    25f0:	9b b1       	in	r25, 0x0b	; 11
    25f2:	f8 01       	movw	r30, r16
    25f4:	80 81       	ld	r24, Z
    25f6:	80 95       	com	r24
    25f8:	89 23       	and	r24, r25
    25fa:	8b b9       	out	0x0b, r24	; 11
    25fc:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2600:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2604:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2608:	83 60       	ori	r24, 0x03	; 3
    260a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    260e:	82 e0       	ldi	r24, 0x02	; 2
    2610:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2614:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    2618:	80 e0       	ldi	r24, 0x00	; 0
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	2e 85       	ldd	r18, Y+14	; 0x0e
    261e:	3f 85       	ldd	r19, Y+15	; 0x0f
    2620:	82 17       	cp	r24, r18
    2622:	93 07       	cpc	r25, r19
    2624:	20 f5       	brcc	.+72     	; 0x266e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    2626:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    262a:	2c 2d       	mov	r18, r12
    262c:	24 1b       	sub	r18, r20
    262e:	82 0f       	add	r24, r18
    2630:	91 1d       	adc	r25, r1
    2632:	03 b1       	in	r16, 0x03	; 3
    2634:	08 11       	cpse	r16, r8
    2636:	32 c0       	rjmp	.+100    	; 0x269c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2638:	f6 b0       	in	r15, 0x06	; 6
    263a:	f7 10       	cpse	r15, r7
    263c:	2f c0       	rjmp	.+94     	; 0x269c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    263e:	29 b1       	in	r18, 0x09	; 9
    2640:	29 11       	cpse	r18, r9
    2642:	2c c0       	rjmp	.+88     	; 0x269c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2644:	10 c0       	rjmp	.+32     	; 0x2666 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    2646:	21 2f       	mov	r18, r17
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	a9 01       	movw	r20, r18
    264c:	44 0f       	add	r20, r20
    264e:	55 1f       	adc	r21, r21
    2650:	f5 01       	movw	r30, r10
    2652:	e4 0f       	add	r30, r20
    2654:	f5 1f       	adc	r31, r21
    2656:	60 81       	ld	r22, Z
    2658:	71 81       	ldd	r23, Z+1	; 0x01
    265a:	67 2b       	or	r22, r23
    265c:	21 f1       	breq	.+72     	; 0x26a6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    265e:	1f 5f       	subi	r17, 0xFF	; 255
    2660:	28 85       	ldd	r18, Y+8	; 0x08
    2662:	12 17       	cp	r17, r18
    2664:	80 f3       	brcs	.-32     	; 0x2646 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    2666:	7f 2c       	mov	r7, r15
    2668:	80 2e       	mov	r8, r16
    266a:	4c 2d       	mov	r20, r12
    266c:	d7 cf       	rjmp	.-82     	; 0x261c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    266e:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2672:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	88 85       	ldd	r24, Y+8	; 0x08
    267a:	28 17       	cp	r18, r24
    267c:	30 f5       	brcc	.+76     	; 0x26ca <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    267e:	f5 01       	movw	r30, r10
    2680:	e2 0f       	add	r30, r18
    2682:	f1 1d       	adc	r31, r1
    2684:	e2 0f       	add	r30, r18
    2686:	f1 1d       	adc	r31, r1
    2688:	80 81       	ld	r24, Z
    268a:	91 81       	ldd	r25, Z+1	; 0x01
    268c:	89 2b       	or	r24, r25
    268e:	21 f4       	brne	.+8      	; 0x2698 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    2690:	8e 85       	ldd	r24, Y+14	; 0x0e
    2692:	9f 85       	ldd	r25, Y+15	; 0x0f
    2694:	91 83       	std	Z+1, r25	; 0x01
    2696:	80 83       	st	Z, r24
    2698:	2f 5f       	subi	r18, 0xFF	; 255
    269a:	ee cf       	rjmp	.-36     	; 0x2678 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    269c:	03 b1       	in	r16, 0x03	; 3
    269e:	f6 b0       	in	r15, 0x06	; 6
    26a0:	99 b0       	in	r9, 0x09	; 9
    26a2:	10 e0       	ldi	r17, 0x00	; 0
    26a4:	dd cf       	rjmp	.-70     	; 0x2660 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    26a6:	de 01       	movw	r26, r28
    26a8:	a4 0f       	add	r26, r20
    26aa:	b5 1f       	adc	r27, r21
    26ac:	91 96       	adiw	r26, 0x21	; 33
    26ae:	0d 90       	ld	r0, X+
    26b0:	bc 91       	ld	r27, X
    26b2:	a0 2d       	mov	r26, r0
    26b4:	4c 91       	ld	r20, X
    26b6:	de 01       	movw	r26, r28
    26b8:	a2 0f       	add	r26, r18
    26ba:	b3 1f       	adc	r27, r19
    26bc:	51 96       	adiw	r26, 0x11	; 17
    26be:	2c 91       	ld	r18, X
    26c0:	42 23       	and	r20, r18
    26c2:	69 f6       	brne	.-102    	; 0x265e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    26c4:	91 83       	std	Z+1, r25	; 0x01
    26c6:	80 83       	st	Z, r24
    26c8:	ca cf       	rjmp	.-108    	; 0x265e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    26ca:	cd b7       	in	r28, 0x3d	; 61
    26cc:	de b7       	in	r29, 0x3e	; 62
    26ce:	ed e0       	ldi	r30, 0x0D	; 13
    26d0:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__epilogue_restores__+0xa>

000026d4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    26d4:	ef 92       	push	r14
    26d6:	ff 92       	push	r15
    26d8:	0f 93       	push	r16
    26da:	1f 93       	push	r17
    26dc:	cf 93       	push	r28
    26de:	df 93       	push	r29
    26e0:	fc 01       	movw	r30, r24
    26e2:	9b 01       	movw	r18, r22
    26e4:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    26e8:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    26ec:	47 b1       	in	r20, 0x07	; 7
    26ee:	18 b1       	in	r17, 0x08	; 8
    26f0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    26f4:	86 fd       	sbrc	r24, 6
    26f6:	fc cf       	rjmp	.-8      	; 0x26f0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	90 85       	ldd	r25, Z+8	; 0x08
    26fc:	89 17       	cp	r24, r25
    26fe:	48 f4       	brcc	.+18     	; 0x2712 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    2700:	d9 01       	movw	r26, r18
    2702:	a8 0f       	add	r26, r24
    2704:	b1 1d       	adc	r27, r1
    2706:	a8 0f       	add	r26, r24
    2708:	b1 1d       	adc	r27, r1
    270a:	1d 92       	st	X+, r1
    270c:	1c 92       	st	X, r1
    270e:	8f 5f       	subi	r24, 0xFF	; 255
    2710:	f4 cf       	rjmp	.-24     	; 0x26fa <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    2712:	97 b1       	in	r25, 0x07	; 7
    2714:	82 a1       	ldd	r24, Z+34	; 0x22
    2716:	80 95       	com	r24
    2718:	89 23       	and	r24, r25
    271a:	87 b9       	out	0x07, r24	; 7
    271c:	98 b1       	in	r25, 0x08	; 8
    271e:	82 a1       	ldd	r24, Z+34	; 0x22
    2720:	80 95       	com	r24
    2722:	89 23       	and	r24, r25
    2724:	88 b9       	out	0x08, r24	; 8
    2726:	87 e8       	ldi	r24, 0x87	; 135
    2728:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    272c:	e1 2c       	mov	r14, r1
    272e:	81 a1       	ldd	r24, Z+33	; 0x21
    2730:	e8 16       	cp	r14, r24
    2732:	10 f0       	brcs	.+4      	; 0x2738 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    2734:	e1 2c       	mov	r14, r1
    2736:	29 c0       	rjmp	.+82     	; 0x278a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    2738:	50 e0       	ldi	r21, 0x00	; 0
    273a:	80 85       	ldd	r24, Z+8	; 0x08
    273c:	58 17       	cp	r21, r24
    273e:	18 f5       	brcc	.+70     	; 0x2786 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    2740:	a5 2f       	mov	r26, r21
    2742:	b0 e0       	ldi	r27, 0x00	; 0
    2744:	ef 01       	movw	r28, r30
    2746:	ca 0f       	add	r28, r26
    2748:	db 1f       	adc	r29, r27
    274a:	89 89       	ldd	r24, Y+17	; 0x11
    274c:	80 64       	ori	r24, 0x40	; 64
    274e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2752:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2756:	80 64       	ori	r24, 0x40	; 64
    2758:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    275c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2760:	86 fd       	sbrc	r24, 6
    2762:	fc cf       	rjmp	.-8      	; 0x275c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    2764:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    2768:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    276c:	aa 0f       	add	r26, r26
    276e:	bb 1f       	adc	r27, r27
    2770:	a2 0f       	add	r26, r18
    2772:	b3 1f       	adc	r27, r19
    2774:	8d 91       	ld	r24, X+
    2776:	9c 91       	ld	r25, X
    2778:	11 97       	sbiw	r26, 0x01	; 1
    277a:	86 0f       	add	r24, r22
    277c:	97 1f       	adc	r25, r23
    277e:	8d 93       	st	X+, r24
    2780:	9c 93       	st	X, r25
    2782:	5f 5f       	subi	r21, 0xFF	; 255
    2784:	da cf       	rjmp	.-76     	; 0x273a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    2786:	e3 94       	inc	r14
    2788:	d2 cf       	rjmp	.-92     	; 0x272e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    278a:	80 85       	ldd	r24, Z+8	; 0x08
    278c:	e8 16       	cp	r14, r24
    278e:	a0 f4       	brcc	.+40     	; 0x27b8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    2790:	e9 01       	movw	r28, r18
    2792:	ce 0d       	add	r28, r14
    2794:	d1 1d       	adc	r29, r1
    2796:	ce 0d       	add	r28, r14
    2798:	d1 1d       	adc	r29, r1
    279a:	61 a1       	ldd	r22, Z+33	; 0x21
    279c:	70 e0       	ldi	r23, 0x00	; 0
    279e:	cb 01       	movw	r24, r22
    27a0:	95 95       	asr	r25
    27a2:	87 95       	ror	r24
    27a4:	a8 81       	ld	r26, Y
    27a6:	b9 81       	ldd	r27, Y+1	; 0x01
    27a8:	8a 0f       	add	r24, r26
    27aa:	9b 1f       	adc	r25, r27
    27ac:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <__udivmodhi4>
    27b0:	79 83       	std	Y+1, r23	; 0x01
    27b2:	68 83       	st	Y, r22
    27b4:	e3 94       	inc	r14
    27b6:	e9 cf       	rjmp	.-46     	; 0x278a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    27b8:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    27bc:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    27c0:	18 b9       	out	0x08, r17	; 8
    27c2:	47 b9       	out	0x07, r20	; 7
    27c4:	cd b7       	in	r28, 0x3d	; 61
    27c6:	de b7       	in	r29, 0x3e	; 62
    27c8:	e6 e0       	ldi	r30, 0x06	; 6
    27ca:	0c 94 68 17 	jmp	0x2ed0	; 0x2ed0 <__epilogue_restores__+0x18>

000027ce <_ZN16PololuQTRSensors4readEPjh>:
    27ce:	a0 e2       	ldi	r26, 0x20	; 32
    27d0:	b0 e0       	ldi	r27, 0x00	; 0
    27d2:	ed ee       	ldi	r30, 0xED	; 237
    27d4:	f3 e1       	ldi	r31, 0x13	; 19
    27d6:	0c 94 4b 17 	jmp	0x2e96	; 0x2e96 <__prologue_saves__+0x16>
    27da:	8c 01       	movw	r16, r24
    27dc:	7b 01       	movw	r14, r22
    27de:	d4 2e       	mov	r13, r20
    27e0:	8f ef       	ldi	r24, 0xFF	; 255
    27e2:	84 0f       	add	r24, r20
    27e4:	82 30       	cpi	r24, 0x02	; 2
    27e6:	18 f4       	brcc	.+6      	; 0x27ee <_ZN16PololuQTRSensors4readEPjh+0x20>
    27e8:	c8 01       	movw	r24, r16
    27ea:	0e 94 29 12 	call	0x2452	; 0x2452 <_ZN16PololuQTRSensors10emittersOnEv>
    27ee:	d8 01       	movw	r26, r16
    27f0:	50 96       	adiw	r26, 0x10	; 16
    27f2:	8c 91       	ld	r24, X
    27f4:	b7 01       	movw	r22, r14
    27f6:	81 11       	cpse	r24, r1
    27f8:	10 c0       	rjmp	.+32     	; 0x281a <_ZN16PololuQTRSensors4readEPjh+0x4c>
    27fa:	c8 01       	movw	r24, r16
    27fc:	0e 94 92 12 	call	0x2524	; 0x2524 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2800:	c8 01       	movw	r24, r16
    2802:	0e 94 14 12 	call	0x2428	; 0x2428 <_ZN16PololuQTRSensors11emittersOffEv>
    2806:	b2 e0       	ldi	r27, 0x02	; 2
    2808:	db 12       	cpse	r13, r27
    280a:	3a c0       	rjmp	.+116    	; 0x2880 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    280c:	be 01       	movw	r22, r28
    280e:	6f 5f       	subi	r22, 0xFF	; 255
    2810:	7f 4f       	sbci	r23, 0xFF	; 255
    2812:	c8 01       	movw	r24, r16
    2814:	0e 94 92 12 	call	0x2524	; 0x2524 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2818:	0f c0       	rjmp	.+30     	; 0x2838 <_ZN16PololuQTRSensors4readEPjh+0x6a>
    281a:	c8 01       	movw	r24, r16
    281c:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2820:	c8 01       	movw	r24, r16
    2822:	0e 94 14 12 	call	0x2428	; 0x2428 <_ZN16PololuQTRSensors11emittersOffEv>
    2826:	e2 e0       	ldi	r30, 0x02	; 2
    2828:	de 12       	cpse	r13, r30
    282a:	2a c0       	rjmp	.+84     	; 0x2880 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    282c:	be 01       	movw	r22, r28
    282e:	6f 5f       	subi	r22, 0xFF	; 255
    2830:	7f 4f       	sbci	r23, 0xFF	; 255
    2832:	c8 01       	movw	r24, r16
    2834:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2838:	40 e0       	ldi	r20, 0x00	; 0
    283a:	f8 01       	movw	r30, r16
    283c:	80 85       	ldd	r24, Z+8	; 0x08
    283e:	48 17       	cp	r20, r24
    2840:	f8 f4       	brcc	.+62     	; 0x2880 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2842:	84 2f       	mov	r24, r20
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	88 0f       	add	r24, r24
    2848:	99 1f       	adc	r25, r25
    284a:	f7 01       	movw	r30, r14
    284c:	e8 0f       	add	r30, r24
    284e:	f9 1f       	adc	r31, r25
    2850:	21 e0       	ldi	r18, 0x01	; 1
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	2c 0f       	add	r18, r28
    2856:	3d 1f       	adc	r19, r29
    2858:	82 0f       	add	r24, r18
    285a:	93 1f       	adc	r25, r19
    285c:	d8 01       	movw	r26, r16
    285e:	1e 96       	adiw	r26, 0x0e	; 14
    2860:	2d 91       	ld	r18, X+
    2862:	3c 91       	ld	r19, X
    2864:	1f 97       	sbiw	r26, 0x0f	; 15
    2866:	dc 01       	movw	r26, r24
    2868:	8d 91       	ld	r24, X+
    286a:	9c 91       	ld	r25, X
    286c:	28 1b       	sub	r18, r24
    286e:	39 0b       	sbc	r19, r25
    2870:	80 81       	ld	r24, Z
    2872:	91 81       	ldd	r25, Z+1	; 0x01
    2874:	82 0f       	add	r24, r18
    2876:	93 1f       	adc	r25, r19
    2878:	91 83       	std	Z+1, r25	; 0x01
    287a:	80 83       	st	Z, r24
    287c:	4f 5f       	subi	r20, 0xFF	; 255
    287e:	dd cf       	rjmp	.-70     	; 0x283a <_ZN16PololuQTRSensors4readEPjh+0x6c>
    2880:	a0 96       	adiw	r28, 0x20	; 32
    2882:	e7 e0       	ldi	r30, 0x07	; 7
    2884:	0c 94 67 17 	jmp	0x2ece	; 0x2ece <__epilogue_restores__+0x16>

00002888 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    2888:	2f 92       	push	r2
    288a:	3f 92       	push	r3
    288c:	5f 92       	push	r5
    288e:	6f 92       	push	r6
    2890:	7f 92       	push	r7
    2892:	8f 92       	push	r8
    2894:	9f 92       	push	r9
    2896:	af 92       	push	r10
    2898:	bf 92       	push	r11
    289a:	cf 92       	push	r12
    289c:	df 92       	push	r13
    289e:	ef 92       	push	r14
    28a0:	ff 92       	push	r15
    28a2:	0f 93       	push	r16
    28a4:	1f 93       	push	r17
    28a6:	cf 93       	push	r28
    28a8:	df 93       	push	r29
    28aa:	cd b7       	in	r28, 0x3d	; 61
    28ac:	de b7       	in	r29, 0x3e	; 62
    28ae:	c0 56       	subi	r28, 0x60	; 96
    28b0:	d1 09       	sbc	r29, r1
    28b2:	0f b6       	in	r0, 0x3f	; 63
    28b4:	f8 94       	cli
    28b6:	de bf       	out	0x3e, r29	; 62
    28b8:	0f be       	out	0x3f, r0	; 63
    28ba:	cd bf       	out	0x3d, r28	; 61
    28bc:	8c 01       	movw	r16, r24
    28be:	4b 01       	movw	r8, r22
    28c0:	5a 01       	movw	r10, r20
    28c2:	52 2e       	mov	r5, r18
    28c4:	da 01       	movw	r26, r20
    28c6:	8d 91       	ld	r24, X+
    28c8:	9c 91       	ld	r25, X
    28ca:	89 2b       	or	r24, r25
    28cc:	31 f0       	breq	.+12     	; 0x28da <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x52>
    28ce:	f4 01       	movw	r30, r8
    28d0:	80 81       	ld	r24, Z
    28d2:	91 81       	ldd	r25, Z+1	; 0x01
    28d4:	89 2b       	or	r24, r25
    28d6:	f1 f4       	brne	.+60     	; 0x2914 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    28d8:	24 c0       	rjmp	.+72     	; 0x2922 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x9a>
    28da:	d8 01       	movw	r26, r16
    28dc:	18 96       	adiw	r26, 0x08	; 8
    28de:	8c 91       	ld	r24, X
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	88 0f       	add	r24, r24
    28e4:	99 1f       	adc	r25, r25
    28e6:	0e 94 7d 17 	call	0x2efa	; 0x2efa <malloc>
    28ea:	f5 01       	movw	r30, r10
    28ec:	91 83       	std	Z+1, r25	; 0x01
    28ee:	80 83       	st	Z, r24
    28f0:	00 97       	sbiw	r24, 0x00	; 0
    28f2:	09 f4       	brne	.+2      	; 0x28f6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x6e>
    28f4:	b1 c0       	rjmp	.+354    	; 0x2a58 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    28f6:	fc 01       	movw	r30, r24
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	d8 01       	movw	r26, r16
    28fe:	18 96       	adiw	r26, 0x08	; 8
    2900:	8c 91       	ld	r24, X
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	28 17       	cp	r18, r24
    2906:	39 07       	cpc	r19, r25
    2908:	14 f7       	brge	.-60     	; 0x28ce <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x46>
    290a:	11 92       	st	Z+, r1
    290c:	11 92       	st	Z+, r1
    290e:	2f 5f       	subi	r18, 0xFF	; 255
    2910:	3f 4f       	sbci	r19, 0xFF	; 255
    2912:	f4 cf       	rjmp	.-24     	; 0x28fc <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x74>
    2914:	e1 2c       	mov	r14, r1
    2916:	f1 2c       	mov	r15, r1
    2918:	6e 01       	movw	r12, r28
    291a:	b1 e2       	ldi	r27, 0x21	; 33
    291c:	cb 0e       	add	r12, r27
    291e:	d1 1c       	adc	r13, r1
    2920:	21 c0       	rjmp	.+66     	; 0x2964 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    2922:	f8 01       	movw	r30, r16
    2924:	80 85       	ldd	r24, Z+8	; 0x08
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	88 0f       	add	r24, r24
    292a:	99 1f       	adc	r25, r25
    292c:	0e 94 7d 17 	call	0x2efa	; 0x2efa <malloc>
    2930:	d4 01       	movw	r26, r8
    2932:	8d 93       	st	X+, r24
    2934:	9c 93       	st	X, r25
    2936:	00 97       	sbiw	r24, 0x00	; 0
    2938:	09 f4       	brne	.+2      	; 0x293c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb4>
    293a:	8e c0       	rjmp	.+284    	; 0x2a58 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    293c:	fc 01       	movw	r30, r24
    293e:	20 e0       	ldi	r18, 0x00	; 0
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	d8 01       	movw	r26, r16
    2944:	18 96       	adiw	r26, 0x08	; 8
    2946:	8c 91       	ld	r24, X
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	28 17       	cp	r18, r24
    294c:	39 07       	cpc	r19, r25
    294e:	14 f7       	brge	.-60     	; 0x2914 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    2950:	d8 01       	movw	r26, r16
    2952:	1e 96       	adiw	r26, 0x0e	; 14
    2954:	8d 91       	ld	r24, X+
    2956:	9c 91       	ld	r25, X
    2958:	1f 97       	sbiw	r26, 0x0f	; 15
    295a:	81 93       	st	Z+, r24
    295c:	91 93       	st	Z+, r25
    295e:	2f 5f       	subi	r18, 0xFF	; 255
    2960:	3f 4f       	sbci	r19, 0xFF	; 255
    2962:	ef cf       	rjmp	.-34     	; 0x2942 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xba>
    2964:	45 2d       	mov	r20, r5
    2966:	be 01       	movw	r22, r28
    2968:	6f 5b       	subi	r22, 0xBF	; 191
    296a:	7f 4f       	sbci	r23, 0xFF	; 255
    296c:	c8 01       	movw	r24, r16
    296e:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN16PololuQTRSensors4readEPjh>
    2972:	f8 01       	movw	r30, r16
    2974:	60 84       	ldd	r6, Z+8	; 0x08
    2976:	71 2c       	mov	r7, r1
    2978:	fe 01       	movw	r30, r28
    297a:	ef 5b       	subi	r30, 0xBF	; 191
    297c:	ff 4f       	sbci	r31, 0xFF	; 255
    297e:	c6 01       	movw	r24, r12
    2980:	9e 01       	movw	r18, r28
    2982:	2f 5f       	subi	r18, 0xFF	; 255
    2984:	3f 4f       	sbci	r19, 0xFF	; 255
    2986:	19 01       	movw	r2, r18
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	26 15       	cp	r18, r6
    298e:	37 05       	cpc	r19, r7
    2990:	4c f5       	brge	.+82     	; 0x29e4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x15c>
    2992:	e1 14       	cp	r14, r1
    2994:	f1 04       	cpc	r15, r1
    2996:	89 f0       	breq	.+34     	; 0x29ba <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    2998:	dc 01       	movw	r26, r24
    299a:	6d 91       	ld	r22, X+
    299c:	7c 91       	ld	r23, X
    299e:	40 81       	ld	r20, Z
    29a0:	51 81       	ldd	r21, Z+1	; 0x01
    29a2:	64 17       	cp	r22, r20
    29a4:	75 07       	cpc	r23, r21
    29a6:	48 f0       	brcs	.+18     	; 0x29ba <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    29a8:	d1 01       	movw	r26, r2
    29aa:	6d 91       	ld	r22, X+
    29ac:	7c 91       	ld	r23, X
    29ae:	40 81       	ld	r20, Z
    29b0:	51 81       	ldd	r21, Z+1	; 0x01
    29b2:	46 17       	cp	r20, r22
    29b4:	57 07       	cpc	r21, r23
    29b6:	48 f0       	brcs	.+18     	; 0x29ca <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x142>
    29b8:	0d c0       	rjmp	.+26     	; 0x29d4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x14c>
    29ba:	40 81       	ld	r20, Z
    29bc:	51 81       	ldd	r21, Z+1	; 0x01
    29be:	dc 01       	movw	r26, r24
    29c0:	4d 93       	st	X+, r20
    29c2:	5c 93       	st	X, r21
    29c4:	e1 14       	cp	r14, r1
    29c6:	f1 04       	cpc	r15, r1
    29c8:	79 f7       	brne	.-34     	; 0x29a8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x120>
    29ca:	40 81       	ld	r20, Z
    29cc:	51 81       	ldd	r21, Z+1	; 0x01
    29ce:	d1 01       	movw	r26, r2
    29d0:	4d 93       	st	X+, r20
    29d2:	5c 93       	st	X, r21
    29d4:	2f 5f       	subi	r18, 0xFF	; 255
    29d6:	3f 4f       	sbci	r19, 0xFF	; 255
    29d8:	b2 e0       	ldi	r27, 0x02	; 2
    29da:	2b 0e       	add	r2, r27
    29dc:	31 1c       	adc	r3, r1
    29de:	32 96       	adiw	r30, 0x02	; 2
    29e0:	02 96       	adiw	r24, 0x02	; 2
    29e2:	d4 cf       	rjmp	.-88     	; 0x298c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x104>
    29e4:	ef ef       	ldi	r30, 0xFF	; 255
    29e6:	ee 1a       	sub	r14, r30
    29e8:	fe 0a       	sbc	r15, r30
    29ea:	fa e0       	ldi	r31, 0x0A	; 10
    29ec:	ef 16       	cp	r14, r31
    29ee:	f1 04       	cpc	r15, r1
    29f0:	09 f0       	breq	.+2      	; 0x29f4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x16c>
    29f2:	b8 cf       	rjmp	.-144    	; 0x2964 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    29f4:	9e 01       	movw	r18, r28
    29f6:	2f 5f       	subi	r18, 0xFF	; 255
    29f8:	3f 4f       	sbci	r19, 0xFF	; 255
    29fa:	79 01       	movw	r14, r18
    29fc:	36 01       	movw	r6, r12
    29fe:	80 e0       	ldi	r24, 0x00	; 0
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	f8 01       	movw	r30, r16
    2a04:	20 85       	ldd	r18, Z+8	; 0x08
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	82 17       	cp	r24, r18
    2a0a:	93 07       	cpc	r25, r19
    2a0c:	2c f5       	brge	.+74     	; 0x2a58 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    2a0e:	d7 01       	movw	r26, r14
    2a10:	2d 91       	ld	r18, X+
    2a12:	3d 91       	ld	r19, X+
    2a14:	7d 01       	movw	r14, r26
    2a16:	b3 01       	movw	r22, r6
    2a18:	6c 19       	sub	r22, r12
    2a1a:	7d 09       	sbc	r23, r13
    2a1c:	d5 01       	movw	r26, r10
    2a1e:	ed 91       	ld	r30, X+
    2a20:	fc 91       	ld	r31, X
    2a22:	e6 0f       	add	r30, r22
    2a24:	f7 1f       	adc	r31, r23
    2a26:	40 81       	ld	r20, Z
    2a28:	51 81       	ldd	r21, Z+1	; 0x01
    2a2a:	42 17       	cp	r20, r18
    2a2c:	53 07       	cpc	r21, r19
    2a2e:	10 f4       	brcc	.+4      	; 0x2a34 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1ac>
    2a30:	31 83       	std	Z+1, r19	; 0x01
    2a32:	20 83       	st	Z, r18
    2a34:	f3 01       	movw	r30, r6
    2a36:	21 91       	ld	r18, Z+
    2a38:	31 91       	ld	r19, Z+
    2a3a:	3f 01       	movw	r6, r30
    2a3c:	d4 01       	movw	r26, r8
    2a3e:	ed 91       	ld	r30, X+
    2a40:	fc 91       	ld	r31, X
    2a42:	e6 0f       	add	r30, r22
    2a44:	f7 1f       	adc	r31, r23
    2a46:	40 81       	ld	r20, Z
    2a48:	51 81       	ldd	r21, Z+1	; 0x01
    2a4a:	24 17       	cp	r18, r20
    2a4c:	35 07       	cpc	r19, r21
    2a4e:	10 f4       	brcc	.+4      	; 0x2a54 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1cc>
    2a50:	31 83       	std	Z+1, r19	; 0x01
    2a52:	20 83       	st	Z, r18
    2a54:	01 96       	adiw	r24, 0x01	; 1
    2a56:	d5 cf       	rjmp	.-86     	; 0x2a02 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17a>
    2a58:	c0 5a       	subi	r28, 0xA0	; 160
    2a5a:	df 4f       	sbci	r29, 0xFF	; 255
    2a5c:	0f b6       	in	r0, 0x3f	; 63
    2a5e:	f8 94       	cli
    2a60:	de bf       	out	0x3e, r29	; 62
    2a62:	0f be       	out	0x3f, r0	; 63
    2a64:	cd bf       	out	0x3d, r28	; 61
    2a66:	df 91       	pop	r29
    2a68:	cf 91       	pop	r28
    2a6a:	1f 91       	pop	r17
    2a6c:	0f 91       	pop	r16
    2a6e:	ff 90       	pop	r15
    2a70:	ef 90       	pop	r14
    2a72:	df 90       	pop	r13
    2a74:	cf 90       	pop	r12
    2a76:	bf 90       	pop	r11
    2a78:	af 90       	pop	r10
    2a7a:	9f 90       	pop	r9
    2a7c:	8f 90       	pop	r8
    2a7e:	7f 90       	pop	r7
    2a80:	6f 90       	pop	r6
    2a82:	5f 90       	pop	r5
    2a84:	3f 90       	pop	r3
    2a86:	2f 90       	pop	r2
    2a88:	08 95       	ret

00002a8a <_ZN16PololuQTRSensors9calibrateEh>:
    2a8a:	1f 93       	push	r17
    2a8c:	cf 93       	push	r28
    2a8e:	df 93       	push	r29
    2a90:	ec 01       	movw	r28, r24
    2a92:	16 2f       	mov	r17, r22
    2a94:	8f ef       	ldi	r24, 0xFF	; 255
    2a96:	86 0f       	add	r24, r22
    2a98:	82 30       	cpi	r24, 0x02	; 2
    2a9a:	18 f0       	brcs	.+6      	; 0x2aa2 <_ZN16PololuQTRSensors9calibrateEh+0x18>
    2a9c:	66 23       	and	r22, r22
    2a9e:	59 f0       	breq	.+22     	; 0x2ab6 <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    2aa0:	14 c0       	rjmp	.+40     	; 0x2aca <_ZN16PololuQTRSensors9calibrateEh+0x40>
    2aa2:	21 e0       	ldi	r18, 0x01	; 1
    2aa4:	ae 01       	movw	r20, r28
    2aa6:	4e 5f       	subi	r20, 0xFE	; 254
    2aa8:	5f 4f       	sbci	r21, 0xFF	; 255
    2aaa:	be 01       	movw	r22, r28
    2aac:	ce 01       	movw	r24, r28
    2aae:	0e 94 44 14 	call	0x2888	; 0x2888 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    2ab2:	12 30       	cpi	r17, 0x02	; 2
    2ab4:	51 f4       	brne	.+20     	; 0x2aca <_ZN16PololuQTRSensors9calibrateEh+0x40>
    2ab6:	ae 01       	movw	r20, r28
    2ab8:	4a 5f       	subi	r20, 0xFA	; 250
    2aba:	5f 4f       	sbci	r21, 0xFF	; 255
    2abc:	be 01       	movw	r22, r28
    2abe:	6c 5f       	subi	r22, 0xFC	; 252
    2ac0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	ce 01       	movw	r24, r28
    2ac6:	0e 94 44 14 	call	0x2888	; 0x2888 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    2aca:	df 91       	pop	r29
    2acc:	cf 91       	pop	r28
    2ace:	1f 91       	pop	r17
    2ad0:	08 95       	ret

00002ad2 <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    2ad2:	a0 e0       	ldi	r26, 0x00	; 0
    2ad4:	b0 e0       	ldi	r27, 0x00	; 0
    2ad6:	ef e6       	ldi	r30, 0x6F	; 111
    2ad8:	f5 e1       	ldi	r31, 0x15	; 21
    2ada:	0c 94 49 17 	jmp	0x2e92	; 0x2e92 <__prologue_saves__+0x12>
    2ade:	ec 01       	movw	r28, r24
    2ae0:	8b 01       	movw	r16, r22
    2ae2:	b4 2e       	mov	r11, r20
    2ae4:	84 2f       	mov	r24, r20
    2ae6:	8d 7f       	andi	r24, 0xFD	; 253
    2ae8:	51 f4       	brne	.+20     	; 0x2afe <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    2aea:	8c 81       	ldd	r24, Y+4	; 0x04
    2aec:	9d 81       	ldd	r25, Y+5	; 0x05
    2aee:	89 2b       	or	r24, r25
    2af0:	09 f4       	brne	.+2      	; 0x2af4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x22>
    2af2:	97 c0       	rjmp	.+302    	; 0x2c22 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2af4:	8e 81       	ldd	r24, Y+6	; 0x06
    2af6:	9f 81       	ldd	r25, Y+7	; 0x07
    2af8:	89 2b       	or	r24, r25
    2afa:	09 f4       	brne	.+2      	; 0x2afe <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    2afc:	92 c0       	rjmp	.+292    	; 0x2c22 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2afe:	8f ef       	ldi	r24, 0xFF	; 255
    2b00:	8b 0d       	add	r24, r11
    2b02:	82 30       	cpi	r24, 0x02	; 2
    2b04:	50 f4       	brcc	.+20     	; 0x2b1a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    2b06:	88 81       	ld	r24, Y
    2b08:	99 81       	ldd	r25, Y+1	; 0x01
    2b0a:	89 2b       	or	r24, r25
    2b0c:	09 f4       	brne	.+2      	; 0x2b10 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3e>
    2b0e:	89 c0       	rjmp	.+274    	; 0x2c22 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2b10:	8a 81       	ldd	r24, Y+2	; 0x02
    2b12:	9b 81       	ldd	r25, Y+3	; 0x03
    2b14:	89 2b       	or	r24, r25
    2b16:	09 f4       	brne	.+2      	; 0x2b1a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    2b18:	84 c0       	rjmp	.+264    	; 0x2c22 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2b1a:	4b 2d       	mov	r20, r11
    2b1c:	b8 01       	movw	r22, r16
    2b1e:	ce 01       	movw	r24, r28
    2b20:	0e 94 e7 13 	call	0x27ce	; 0x27ce <_ZN16PololuQTRSensors4readEPjh>
    2b24:	78 01       	movw	r14, r16
    2b26:	00 e0       	ldi	r16, 0x00	; 0
    2b28:	10 e0       	ldi	r17, 0x00	; 0
    2b2a:	c1 2c       	mov	r12, r1
    2b2c:	d1 2c       	mov	r13, r1
    2b2e:	88 85       	ldd	r24, Y+8	; 0x08
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	c8 16       	cp	r12, r24
    2b34:	d9 06       	cpc	r13, r25
    2b36:	0c f0       	brlt	.+2      	; 0x2b3a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x68>
    2b38:	74 c0       	rjmp	.+232    	; 0x2c22 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	b8 12       	cpse	r11, r24
    2b3e:	0a c0       	rjmp	.+20     	; 0x2b54 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x82>
    2b40:	ea 81       	ldd	r30, Y+2	; 0x02
    2b42:	fb 81       	ldd	r31, Y+3	; 0x03
    2b44:	e0 0f       	add	r30, r16
    2b46:	f1 1f       	adc	r31, r17
    2b48:	01 90       	ld	r0, Z+
    2b4a:	f0 81       	ld	r31, Z
    2b4c:	e0 2d       	mov	r30, r0
    2b4e:	a8 81       	ld	r26, Y
    2b50:	b9 81       	ldd	r27, Y+1	; 0x01
    2b52:	0d c0       	rjmp	.+26     	; 0x2b6e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x9c>
    2b54:	8c 81       	ldd	r24, Y+4	; 0x04
    2b56:	9d 81       	ldd	r25, Y+5	; 0x05
    2b58:	2e 81       	ldd	r18, Y+6	; 0x06
    2b5a:	3f 81       	ldd	r19, Y+7	; 0x07
    2b5c:	b1 10       	cpse	r11, r1
    2b5e:	0c c0       	rjmp	.+24     	; 0x2b78 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    2b60:	f9 01       	movw	r30, r18
    2b62:	e0 0f       	add	r30, r16
    2b64:	f1 1f       	adc	r31, r17
    2b66:	01 90       	ld	r0, Z+
    2b68:	f0 81       	ld	r31, Z
    2b6a:	e0 2d       	mov	r30, r0
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	a0 0f       	add	r26, r16
    2b70:	b1 1f       	adc	r27, r17
    2b72:	8d 91       	ld	r24, X+
    2b74:	9c 91       	ld	r25, X
    2b76:	28 c0       	rjmp	.+80     	; 0x2bc8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    2b78:	fc 01       	movw	r30, r24
    2b7a:	e0 0f       	add	r30, r16
    2b7c:	f1 1f       	adc	r31, r17
    2b7e:	40 81       	ld	r20, Z
    2b80:	51 81       	ldd	r21, Z+1	; 0x01
    2b82:	e8 81       	ld	r30, Y
    2b84:	f9 81       	ldd	r31, Y+1	; 0x01
    2b86:	e0 0f       	add	r30, r16
    2b88:	f1 1f       	adc	r31, r17
    2b8a:	80 81       	ld	r24, Z
    2b8c:	91 81       	ldd	r25, Z+1	; 0x01
    2b8e:	ee 85       	ldd	r30, Y+14	; 0x0e
    2b90:	ff 85       	ldd	r31, Y+15	; 0x0f
    2b92:	48 17       	cp	r20, r24
    2b94:	59 07       	cpc	r21, r25
    2b96:	10 f4       	brcc	.+4      	; 0x2b9c <_ZN16PololuQTRSensors14readCalibratedEPjh+0xca>
    2b98:	cf 01       	movw	r24, r30
    2b9a:	04 c0       	rjmp	.+8      	; 0x2ba4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd2>
    2b9c:	8e 0f       	add	r24, r30
    2b9e:	9f 1f       	adc	r25, r31
    2ba0:	84 1b       	sub	r24, r20
    2ba2:	95 0b       	sbc	r25, r21
    2ba4:	d9 01       	movw	r26, r18
    2ba6:	a0 0f       	add	r26, r16
    2ba8:	b1 1f       	adc	r27, r17
    2baa:	2d 91       	ld	r18, X+
    2bac:	3c 91       	ld	r19, X
    2bae:	aa 81       	ldd	r26, Y+2	; 0x02
    2bb0:	bb 81       	ldd	r27, Y+3	; 0x03
    2bb2:	a0 0f       	add	r26, r16
    2bb4:	b1 1f       	adc	r27, r17
    2bb6:	4d 91       	ld	r20, X+
    2bb8:	5c 91       	ld	r21, X
    2bba:	24 17       	cp	r18, r20
    2bbc:	35 07       	cpc	r19, r21
    2bbe:	20 f0       	brcs	.+8      	; 0x2bc8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    2bc0:	e4 0f       	add	r30, r20
    2bc2:	f5 1f       	adc	r31, r21
    2bc4:	e2 1b       	sub	r30, r18
    2bc6:	f3 0b       	sbc	r31, r19
    2bc8:	e8 1b       	sub	r30, r24
    2bca:	f9 0b       	sbc	r31, r25
    2bcc:	a9 f0       	breq	.+42     	; 0x2bf8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x126>
    2bce:	d7 01       	movw	r26, r14
    2bd0:	2d 91       	ld	r18, X+
    2bd2:	3c 91       	ld	r19, X
    2bd4:	40 e0       	ldi	r20, 0x00	; 0
    2bd6:	50 e0       	ldi	r21, 0x00	; 0
    2bd8:	28 1b       	sub	r18, r24
    2bda:	39 0b       	sbc	r19, r25
    2bdc:	41 09       	sbc	r20, r1
    2bde:	51 09       	sbc	r21, r1
    2be0:	a8 ee       	ldi	r26, 0xE8	; 232
    2be2:	b3 e0       	ldi	r27, 0x03	; 3
    2be4:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__muluhisi3>
    2be8:	9f 01       	movw	r18, r30
    2bea:	40 e0       	ldi	r20, 0x00	; 0
    2bec:	50 e0       	ldi	r21, 0x00	; 0
    2bee:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__divmodsi4>
    2bf2:	37 fd       	sbrc	r19, 7
    2bf4:	0a c0       	rjmp	.+20     	; 0x2c0a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x138>
    2bf6:	02 c0       	rjmp	.+4      	; 0x2bfc <_ZN16PololuQTRSensors14readCalibratedEPjh+0x12a>
    2bf8:	20 e0       	ldi	r18, 0x00	; 0
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	29 3e       	cpi	r18, 0xE9	; 233
    2bfe:	b3 e0       	ldi	r27, 0x03	; 3
    2c00:	3b 07       	cpc	r19, r27
    2c02:	2c f0       	brlt	.+10     	; 0x2c0e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    2c04:	28 ee       	ldi	r18, 0xE8	; 232
    2c06:	33 e0       	ldi	r19, 0x03	; 3
    2c08:	02 c0       	rjmp	.+4      	; 0x2c0e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    2c0a:	20 e0       	ldi	r18, 0x00	; 0
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	f7 01       	movw	r30, r14
    2c10:	21 93       	st	Z+, r18
    2c12:	31 93       	st	Z+, r19
    2c14:	7f 01       	movw	r14, r30
    2c16:	ff ef       	ldi	r31, 0xFF	; 255
    2c18:	cf 1a       	sub	r12, r31
    2c1a:	df 0a       	sbc	r13, r31
    2c1c:	0e 5f       	subi	r16, 0xFE	; 254
    2c1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c20:	86 cf       	rjmp	.-244    	; 0x2b2e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x5c>
    2c22:	cd b7       	in	r28, 0x3d	; 61
    2c24:	de b7       	in	r29, 0x3e	; 62
    2c26:	e9 e0       	ldi	r30, 0x09	; 9
    2c28:	0c 94 65 17 	jmp	0x2eca	; 0x2eca <__epilogue_restores__+0x12>

00002c2c <_ZN16PololuQTRSensors8readLineEPjhh>:
    2c2c:	a0 e0       	ldi	r26, 0x00	; 0
    2c2e:	b0 e0       	ldi	r27, 0x00	; 0
    2c30:	ec e1       	ldi	r30, 0x1C	; 28
    2c32:	f6 e1       	ldi	r31, 0x16	; 22
    2c34:	0c 94 40 17 	jmp	0x2e80	; 0x2e80 <__prologue_saves__>
    2c38:	ec 01       	movw	r28, r24
    2c3a:	8b 01       	movw	r16, r22
    2c3c:	82 2e       	mov	r8, r18
    2c3e:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <_ZN16PololuQTRSensors14readCalibratedEPjh>
    2c42:	28 84       	ldd	r2, Y+8	; 0x08
    2c44:	e8 01       	movw	r28, r16
    2c46:	41 2c       	mov	r4, r1
    2c48:	51 2c       	mov	r5, r1
    2c4a:	32 01       	movw	r6, r4
    2c4c:	00 e0       	ldi	r16, 0x00	; 0
    2c4e:	10 e0       	ldi	r17, 0x00	; 0
    2c50:	c1 2c       	mov	r12, r1
    2c52:	d1 2c       	mov	r13, r1
    2c54:	76 01       	movw	r14, r12
    2c56:	31 2c       	mov	r3, r1
    2c58:	91 2c       	mov	r9, r1
    2c5a:	58 ee       	ldi	r21, 0xE8	; 232
    2c5c:	a5 2e       	mov	r10, r21
    2c5e:	53 e0       	ldi	r21, 0x03	; 3
    2c60:	b5 2e       	mov	r11, r21
    2c62:	92 14       	cp	r9, r2
    2c64:	21 f1       	breq	.+72     	; 0x2cae <_ZN16PololuQTRSensors8readLineEPjhh+0x82>
    2c66:	e9 91       	ld	r30, Y+
    2c68:	f9 91       	ld	r31, Y+
    2c6a:	88 20       	and	r8, r8
    2c6c:	21 f0       	breq	.+8      	; 0x2c76 <_ZN16PololuQTRSensors8readLineEPjhh+0x4a>
    2c6e:	c5 01       	movw	r24, r10
    2c70:	8e 1b       	sub	r24, r30
    2c72:	9f 0b       	sbc	r25, r31
    2c74:	fc 01       	movw	r30, r24
    2c76:	e9 3c       	cpi	r30, 0xC9	; 201
    2c78:	f1 05       	cpc	r31, r1
    2c7a:	24 f4       	brge	.+8      	; 0x2c84 <_ZN16PololuQTRSensors8readLineEPjhh+0x58>
    2c7c:	e3 33       	cpi	r30, 0x33	; 51
    2c7e:	f1 05       	cpc	r31, r1
    2c80:	74 f0       	brlt	.+28     	; 0x2c9e <_ZN16PololuQTRSensors8readLineEPjhh+0x72>
    2c82:	02 c0       	rjmp	.+4      	; 0x2c88 <_ZN16PololuQTRSensors8readLineEPjhh+0x5c>
    2c84:	33 24       	eor	r3, r3
    2c86:	33 94       	inc	r3
    2c88:	df 01       	movw	r26, r30
    2c8a:	a3 01       	movw	r20, r6
    2c8c:	92 01       	movw	r18, r4
    2c8e:	0e 94 38 17 	call	0x2e70	; 0x2e70 <__mulshisi3>
    2c92:	c6 0e       	add	r12, r22
    2c94:	d7 1e       	adc	r13, r23
    2c96:	e8 1e       	adc	r14, r24
    2c98:	f9 1e       	adc	r15, r25
    2c9a:	0e 0f       	add	r16, r30
    2c9c:	1f 1f       	adc	r17, r31
    2c9e:	93 94       	inc	r9
    2ca0:	98 ee       	ldi	r25, 0xE8	; 232
    2ca2:	49 0e       	add	r4, r25
    2ca4:	93 e0       	ldi	r25, 0x03	; 3
    2ca6:	59 1e       	adc	r5, r25
    2ca8:	61 1c       	adc	r6, r1
    2caa:	71 1c       	adc	r7, r1
    2cac:	da cf       	rjmp	.-76     	; 0x2c62 <_ZN16PololuQTRSensors8readLineEPjhh+0x36>
    2cae:	31 10       	cpse	r3, r1
    2cb0:	1e c0       	rjmp	.+60     	; 0x2cee <_ZN16PololuQTRSensors8readLineEPjhh+0xc2>
    2cb2:	49 2d       	mov	r20, r9
    2cb4:	50 e0       	ldi	r21, 0x00	; 0
    2cb6:	41 50       	subi	r20, 0x01	; 1
    2cb8:	51 09       	sbc	r21, r1
    2cba:	24 ef       	ldi	r18, 0xF4	; 244
    2cbc:	31 e0       	ldi	r19, 0x01	; 1
    2cbe:	42 9f       	mul	r20, r18
    2cc0:	c0 01       	movw	r24, r0
    2cc2:	43 9f       	mul	r20, r19
    2cc4:	90 0d       	add	r25, r0
    2cc6:	52 9f       	mul	r21, r18
    2cc8:	90 0d       	add	r25, r0
    2cca:	11 24       	eor	r1, r1
    2ccc:	20 91 cb 01 	lds	r18, 0x01CB	; 0x8001cb <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    2cd0:	30 91 cc 01 	lds	r19, 0x01CC	; 0x8001cc <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    2cd4:	28 17       	cp	r18, r24
    2cd6:	39 07       	cpc	r19, r25
    2cd8:	b4 f0       	brlt	.+44     	; 0x2d06 <_ZN16PololuQTRSensors8readLineEPjhh+0xda>
    2cda:	88 ee       	ldi	r24, 0xE8	; 232
    2cdc:	93 e0       	ldi	r25, 0x03	; 3
    2cde:	48 9f       	mul	r20, r24
    2ce0:	90 01       	movw	r18, r0
    2ce2:	49 9f       	mul	r20, r25
    2ce4:	30 0d       	add	r19, r0
    2ce6:	58 9f       	mul	r21, r24
    2ce8:	30 0d       	add	r19, r0
    2cea:	11 24       	eor	r1, r1
    2cec:	0e c0       	rjmp	.+28     	; 0x2d0a <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    2cee:	98 01       	movw	r18, r16
    2cf0:	40 e0       	ldi	r20, 0x00	; 0
    2cf2:	50 e0       	ldi	r21, 0x00	; 0
    2cf4:	c7 01       	movw	r24, r14
    2cf6:	b6 01       	movw	r22, r12
    2cf8:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__udivmodsi4>
    2cfc:	30 93 cc 01 	sts	0x01CC, r19	; 0x8001cc <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    2d00:	20 93 cb 01 	sts	0x01CB, r18	; 0x8001cb <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    2d04:	02 c0       	rjmp	.+4      	; 0x2d0a <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	c9 01       	movw	r24, r18
    2d0c:	cd b7       	in	r28, 0x3d	; 61
    2d0e:	de b7       	in	r29, 0x3e	; 62
    2d10:	e2 e1       	ldi	r30, 0x12	; 18
    2d12:	0c 94 5c 17 	jmp	0x2eb8	; 0x2eb8 <__epilogue_restores__>

00002d16 <_ZN16PololuQTRSensorsD1Ev>:
    2d16:	cf 93       	push	r28
    2d18:	df 93       	push	r29
    2d1a:	ec 01       	movw	r28, r24
    2d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d20:	00 97       	sbiw	r24, 0x00	; 0
    2d22:	11 f0       	breq	.+4      	; 0x2d28 <_ZN16PololuQTRSensorsD1Ev+0x12>
    2d24:	0e 94 15 18 	call	0x302a	; 0x302a <free>
    2d28:	8e 81       	ldd	r24, Y+6	; 0x06
    2d2a:	9f 81       	ldd	r25, Y+7	; 0x07
    2d2c:	00 97       	sbiw	r24, 0x00	; 0
    2d2e:	11 f0       	breq	.+4      	; 0x2d34 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    2d30:	0e 94 15 18 	call	0x302a	; 0x302a <free>
    2d34:	88 81       	ld	r24, Y
    2d36:	99 81       	ldd	r25, Y+1	; 0x01
    2d38:	00 97       	sbiw	r24, 0x00	; 0
    2d3a:	11 f0       	breq	.+4      	; 0x2d40 <_ZN16PololuQTRSensorsD1Ev+0x2a>
    2d3c:	0e 94 15 18 	call	0x302a	; 0x302a <free>
    2d40:	8c 81       	ldd	r24, Y+4	; 0x04
    2d42:	9d 81       	ldd	r25, Y+5	; 0x05
    2d44:	00 97       	sbiw	r24, 0x00	; 0
    2d46:	11 f0       	breq	.+4      	; 0x2d4c <_ZN16PololuQTRSensorsD1Ev+0x36>
    2d48:	0e 94 15 18 	call	0x302a	; 0x302a <free>
    2d4c:	df 91       	pop	r29
    2d4e:	cf 91       	pop	r28
    2d50:	08 95       	ret

00002d52 <__udivmodqi4>:
    2d52:	99 1b       	sub	r25, r25
    2d54:	79 e0       	ldi	r23, 0x09	; 9
    2d56:	04 c0       	rjmp	.+8      	; 0x2d60 <__udivmodqi4_ep>

00002d58 <__udivmodqi4_loop>:
    2d58:	99 1f       	adc	r25, r25
    2d5a:	96 17       	cp	r25, r22
    2d5c:	08 f0       	brcs	.+2      	; 0x2d60 <__udivmodqi4_ep>
    2d5e:	96 1b       	sub	r25, r22

00002d60 <__udivmodqi4_ep>:
    2d60:	88 1f       	adc	r24, r24
    2d62:	7a 95       	dec	r23
    2d64:	c9 f7       	brne	.-14     	; 0x2d58 <__udivmodqi4_loop>
    2d66:	80 95       	com	r24
    2d68:	08 95       	ret

00002d6a <__udivmodhi4>:
    2d6a:	aa 1b       	sub	r26, r26
    2d6c:	bb 1b       	sub	r27, r27
    2d6e:	51 e1       	ldi	r21, 0x11	; 17
    2d70:	07 c0       	rjmp	.+14     	; 0x2d80 <__udivmodhi4_ep>

00002d72 <__udivmodhi4_loop>:
    2d72:	aa 1f       	adc	r26, r26
    2d74:	bb 1f       	adc	r27, r27
    2d76:	a6 17       	cp	r26, r22
    2d78:	b7 07       	cpc	r27, r23
    2d7a:	10 f0       	brcs	.+4      	; 0x2d80 <__udivmodhi4_ep>
    2d7c:	a6 1b       	sub	r26, r22
    2d7e:	b7 0b       	sbc	r27, r23

00002d80 <__udivmodhi4_ep>:
    2d80:	88 1f       	adc	r24, r24
    2d82:	99 1f       	adc	r25, r25
    2d84:	5a 95       	dec	r21
    2d86:	a9 f7       	brne	.-22     	; 0x2d72 <__udivmodhi4_loop>
    2d88:	80 95       	com	r24
    2d8a:	90 95       	com	r25
    2d8c:	bc 01       	movw	r22, r24
    2d8e:	cd 01       	movw	r24, r26
    2d90:	08 95       	ret

00002d92 <__divmodhi4>:
    2d92:	97 fb       	bst	r25, 7
    2d94:	07 2e       	mov	r0, r23
    2d96:	16 f4       	brtc	.+4      	; 0x2d9c <__divmodhi4+0xa>
    2d98:	00 94       	com	r0
    2d9a:	07 d0       	rcall	.+14     	; 0x2daa <__divmodhi4_neg1>
    2d9c:	77 fd       	sbrc	r23, 7
    2d9e:	09 d0       	rcall	.+18     	; 0x2db2 <__divmodhi4_neg2>
    2da0:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <__udivmodhi4>
    2da4:	07 fc       	sbrc	r0, 7
    2da6:	05 d0       	rcall	.+10     	; 0x2db2 <__divmodhi4_neg2>
    2da8:	3e f4       	brtc	.+14     	; 0x2db8 <__divmodhi4_exit>

00002daa <__divmodhi4_neg1>:
    2daa:	90 95       	com	r25
    2dac:	81 95       	neg	r24
    2dae:	9f 4f       	sbci	r25, 0xFF	; 255
    2db0:	08 95       	ret

00002db2 <__divmodhi4_neg2>:
    2db2:	70 95       	com	r23
    2db4:	61 95       	neg	r22
    2db6:	7f 4f       	sbci	r23, 0xFF	; 255

00002db8 <__divmodhi4_exit>:
    2db8:	08 95       	ret

00002dba <__udivmodsi4>:
    2dba:	a1 e2       	ldi	r26, 0x21	; 33
    2dbc:	1a 2e       	mov	r1, r26
    2dbe:	aa 1b       	sub	r26, r26
    2dc0:	bb 1b       	sub	r27, r27
    2dc2:	fd 01       	movw	r30, r26
    2dc4:	0d c0       	rjmp	.+26     	; 0x2de0 <__udivmodsi4_ep>

00002dc6 <__udivmodsi4_loop>:
    2dc6:	aa 1f       	adc	r26, r26
    2dc8:	bb 1f       	adc	r27, r27
    2dca:	ee 1f       	adc	r30, r30
    2dcc:	ff 1f       	adc	r31, r31
    2dce:	a2 17       	cp	r26, r18
    2dd0:	b3 07       	cpc	r27, r19
    2dd2:	e4 07       	cpc	r30, r20
    2dd4:	f5 07       	cpc	r31, r21
    2dd6:	20 f0       	brcs	.+8      	; 0x2de0 <__udivmodsi4_ep>
    2dd8:	a2 1b       	sub	r26, r18
    2dda:	b3 0b       	sbc	r27, r19
    2ddc:	e4 0b       	sbc	r30, r20
    2dde:	f5 0b       	sbc	r31, r21

00002de0 <__udivmodsi4_ep>:
    2de0:	66 1f       	adc	r22, r22
    2de2:	77 1f       	adc	r23, r23
    2de4:	88 1f       	adc	r24, r24
    2de6:	99 1f       	adc	r25, r25
    2de8:	1a 94       	dec	r1
    2dea:	69 f7       	brne	.-38     	; 0x2dc6 <__udivmodsi4_loop>
    2dec:	60 95       	com	r22
    2dee:	70 95       	com	r23
    2df0:	80 95       	com	r24
    2df2:	90 95       	com	r25
    2df4:	9b 01       	movw	r18, r22
    2df6:	ac 01       	movw	r20, r24
    2df8:	bd 01       	movw	r22, r26
    2dfa:	cf 01       	movw	r24, r30
    2dfc:	08 95       	ret

00002dfe <__divmodsi4>:
    2dfe:	05 2e       	mov	r0, r21
    2e00:	97 fb       	bst	r25, 7
    2e02:	1e f4       	brtc	.+6      	; 0x2e0a <__divmodsi4+0xc>
    2e04:	00 94       	com	r0
    2e06:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <__negsi2>
    2e0a:	57 fd       	sbrc	r21, 7
    2e0c:	07 d0       	rcall	.+14     	; 0x2e1c <__divmodsi4_neg2>
    2e0e:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__udivmodsi4>
    2e12:	07 fc       	sbrc	r0, 7
    2e14:	03 d0       	rcall	.+6      	; 0x2e1c <__divmodsi4_neg2>
    2e16:	4e f4       	brtc	.+18     	; 0x2e2a <__divmodsi4_exit>
    2e18:	0c 94 16 17 	jmp	0x2e2c	; 0x2e2c <__negsi2>

00002e1c <__divmodsi4_neg2>:
    2e1c:	50 95       	com	r21
    2e1e:	40 95       	com	r20
    2e20:	30 95       	com	r19
    2e22:	21 95       	neg	r18
    2e24:	3f 4f       	sbci	r19, 0xFF	; 255
    2e26:	4f 4f       	sbci	r20, 0xFF	; 255
    2e28:	5f 4f       	sbci	r21, 0xFF	; 255

00002e2a <__divmodsi4_exit>:
    2e2a:	08 95       	ret

00002e2c <__negsi2>:
    2e2c:	90 95       	com	r25
    2e2e:	80 95       	com	r24
    2e30:	70 95       	com	r23
    2e32:	61 95       	neg	r22
    2e34:	7f 4f       	sbci	r23, 0xFF	; 255
    2e36:	8f 4f       	sbci	r24, 0xFF	; 255
    2e38:	9f 4f       	sbci	r25, 0xFF	; 255
    2e3a:	08 95       	ret

00002e3c <__umulhisi3>:
    2e3c:	a2 9f       	mul	r26, r18
    2e3e:	b0 01       	movw	r22, r0
    2e40:	b3 9f       	mul	r27, r19
    2e42:	c0 01       	movw	r24, r0
    2e44:	a3 9f       	mul	r26, r19
    2e46:	70 0d       	add	r23, r0
    2e48:	81 1d       	adc	r24, r1
    2e4a:	11 24       	eor	r1, r1
    2e4c:	91 1d       	adc	r25, r1
    2e4e:	b2 9f       	mul	r27, r18
    2e50:	70 0d       	add	r23, r0
    2e52:	81 1d       	adc	r24, r1
    2e54:	11 24       	eor	r1, r1
    2e56:	91 1d       	adc	r25, r1
    2e58:	08 95       	ret

00002e5a <__muluhisi3>:
    2e5a:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <__umulhisi3>
    2e5e:	a5 9f       	mul	r26, r21
    2e60:	90 0d       	add	r25, r0
    2e62:	b4 9f       	mul	r27, r20
    2e64:	90 0d       	add	r25, r0
    2e66:	a4 9f       	mul	r26, r20
    2e68:	80 0d       	add	r24, r0
    2e6a:	91 1d       	adc	r25, r1
    2e6c:	11 24       	eor	r1, r1
    2e6e:	08 95       	ret

00002e70 <__mulshisi3>:
    2e70:	b7 ff       	sbrs	r27, 7
    2e72:	0c 94 2d 17 	jmp	0x2e5a	; 0x2e5a <__muluhisi3>

00002e76 <__mulohisi3>:
    2e76:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__muluhisi3>
    2e7a:	82 1b       	sub	r24, r18
    2e7c:	93 0b       	sbc	r25, r19
    2e7e:	08 95       	ret

00002e80 <__prologue_saves__>:
    2e80:	2f 92       	push	r2
    2e82:	3f 92       	push	r3
    2e84:	4f 92       	push	r4
    2e86:	5f 92       	push	r5
    2e88:	6f 92       	push	r6
    2e8a:	7f 92       	push	r7
    2e8c:	8f 92       	push	r8
    2e8e:	9f 92       	push	r9
    2e90:	af 92       	push	r10
    2e92:	bf 92       	push	r11
    2e94:	cf 92       	push	r12
    2e96:	df 92       	push	r13
    2e98:	ef 92       	push	r14
    2e9a:	ff 92       	push	r15
    2e9c:	0f 93       	push	r16
    2e9e:	1f 93       	push	r17
    2ea0:	cf 93       	push	r28
    2ea2:	df 93       	push	r29
    2ea4:	cd b7       	in	r28, 0x3d	; 61
    2ea6:	de b7       	in	r29, 0x3e	; 62
    2ea8:	ca 1b       	sub	r28, r26
    2eaa:	db 0b       	sbc	r29, r27
    2eac:	0f b6       	in	r0, 0x3f	; 63
    2eae:	f8 94       	cli
    2eb0:	de bf       	out	0x3e, r29	; 62
    2eb2:	0f be       	out	0x3f, r0	; 63
    2eb4:	cd bf       	out	0x3d, r28	; 61
    2eb6:	09 94       	ijmp

00002eb8 <__epilogue_restores__>:
    2eb8:	2a 88       	ldd	r2, Y+18	; 0x12
    2eba:	39 88       	ldd	r3, Y+17	; 0x11
    2ebc:	48 88       	ldd	r4, Y+16	; 0x10
    2ebe:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ec0:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ec2:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ec4:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ec6:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ec8:	aa 84       	ldd	r10, Y+10	; 0x0a
    2eca:	b9 84       	ldd	r11, Y+9	; 0x09
    2ecc:	c8 84       	ldd	r12, Y+8	; 0x08
    2ece:	df 80       	ldd	r13, Y+7	; 0x07
    2ed0:	ee 80       	ldd	r14, Y+6	; 0x06
    2ed2:	fd 80       	ldd	r15, Y+5	; 0x05
    2ed4:	0c 81       	ldd	r16, Y+4	; 0x04
    2ed6:	1b 81       	ldd	r17, Y+3	; 0x03
    2ed8:	aa 81       	ldd	r26, Y+2	; 0x02
    2eda:	b9 81       	ldd	r27, Y+1	; 0x01
    2edc:	ce 0f       	add	r28, r30
    2ede:	d1 1d       	adc	r29, r1
    2ee0:	0f b6       	in	r0, 0x3f	; 63
    2ee2:	f8 94       	cli
    2ee4:	de bf       	out	0x3e, r29	; 62
    2ee6:	0f be       	out	0x3f, r0	; 63
    2ee8:	cd bf       	out	0x3d, r28	; 61
    2eea:	ed 01       	movw	r28, r26
    2eec:	08 95       	ret

00002eee <__tablejump2__>:
    2eee:	ee 0f       	add	r30, r30
    2ef0:	ff 1f       	adc	r31, r31
    2ef2:	05 90       	lpm	r0, Z+
    2ef4:	f4 91       	lpm	r31, Z
    2ef6:	e0 2d       	mov	r30, r0
    2ef8:	09 94       	ijmp

00002efa <malloc>:
    2efa:	0f 93       	push	r16
    2efc:	1f 93       	push	r17
    2efe:	cf 93       	push	r28
    2f00:	df 93       	push	r29
    2f02:	82 30       	cpi	r24, 0x02	; 2
    2f04:	91 05       	cpc	r25, r1
    2f06:	10 f4       	brcc	.+4      	; 0x2f0c <malloc+0x12>
    2f08:	82 e0       	ldi	r24, 0x02	; 2
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <__flp>
    2f10:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <__flp+0x1>
    2f14:	20 e0       	ldi	r18, 0x00	; 0
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	a0 e0       	ldi	r26, 0x00	; 0
    2f1a:	b0 e0       	ldi	r27, 0x00	; 0
    2f1c:	30 97       	sbiw	r30, 0x00	; 0
    2f1e:	19 f1       	breq	.+70     	; 0x2f66 <malloc+0x6c>
    2f20:	40 81       	ld	r20, Z
    2f22:	51 81       	ldd	r21, Z+1	; 0x01
    2f24:	02 81       	ldd	r16, Z+2	; 0x02
    2f26:	13 81       	ldd	r17, Z+3	; 0x03
    2f28:	48 17       	cp	r20, r24
    2f2a:	59 07       	cpc	r21, r25
    2f2c:	c8 f0       	brcs	.+50     	; 0x2f60 <malloc+0x66>
    2f2e:	84 17       	cp	r24, r20
    2f30:	95 07       	cpc	r25, r21
    2f32:	69 f4       	brne	.+26     	; 0x2f4e <malloc+0x54>
    2f34:	10 97       	sbiw	r26, 0x00	; 0
    2f36:	31 f0       	breq	.+12     	; 0x2f44 <malloc+0x4a>
    2f38:	12 96       	adiw	r26, 0x02	; 2
    2f3a:	0c 93       	st	X, r16
    2f3c:	12 97       	sbiw	r26, 0x02	; 2
    2f3e:	13 96       	adiw	r26, 0x03	; 3
    2f40:	1c 93       	st	X, r17
    2f42:	27 c0       	rjmp	.+78     	; 0x2f92 <malloc+0x98>
    2f44:	00 93 43 02 	sts	0x0243, r16	; 0x800243 <__flp>
    2f48:	10 93 44 02 	sts	0x0244, r17	; 0x800244 <__flp+0x1>
    2f4c:	22 c0       	rjmp	.+68     	; 0x2f92 <malloc+0x98>
    2f4e:	21 15       	cp	r18, r1
    2f50:	31 05       	cpc	r19, r1
    2f52:	19 f0       	breq	.+6      	; 0x2f5a <malloc+0x60>
    2f54:	42 17       	cp	r20, r18
    2f56:	53 07       	cpc	r21, r19
    2f58:	18 f4       	brcc	.+6      	; 0x2f60 <malloc+0x66>
    2f5a:	9a 01       	movw	r18, r20
    2f5c:	bd 01       	movw	r22, r26
    2f5e:	ef 01       	movw	r28, r30
    2f60:	df 01       	movw	r26, r30
    2f62:	f8 01       	movw	r30, r16
    2f64:	db cf       	rjmp	.-74     	; 0x2f1c <malloc+0x22>
    2f66:	21 15       	cp	r18, r1
    2f68:	31 05       	cpc	r19, r1
    2f6a:	f9 f0       	breq	.+62     	; 0x2faa <malloc+0xb0>
    2f6c:	28 1b       	sub	r18, r24
    2f6e:	39 0b       	sbc	r19, r25
    2f70:	24 30       	cpi	r18, 0x04	; 4
    2f72:	31 05       	cpc	r19, r1
    2f74:	80 f4       	brcc	.+32     	; 0x2f96 <malloc+0x9c>
    2f76:	8a 81       	ldd	r24, Y+2	; 0x02
    2f78:	9b 81       	ldd	r25, Y+3	; 0x03
    2f7a:	61 15       	cp	r22, r1
    2f7c:	71 05       	cpc	r23, r1
    2f7e:	21 f0       	breq	.+8      	; 0x2f88 <malloc+0x8e>
    2f80:	fb 01       	movw	r30, r22
    2f82:	93 83       	std	Z+3, r25	; 0x03
    2f84:	82 83       	std	Z+2, r24	; 0x02
    2f86:	04 c0       	rjmp	.+8      	; 0x2f90 <malloc+0x96>
    2f88:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <__flp+0x1>
    2f8c:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <__flp>
    2f90:	fe 01       	movw	r30, r28
    2f92:	32 96       	adiw	r30, 0x02	; 2
    2f94:	44 c0       	rjmp	.+136    	; 0x301e <malloc+0x124>
    2f96:	fe 01       	movw	r30, r28
    2f98:	e2 0f       	add	r30, r18
    2f9a:	f3 1f       	adc	r31, r19
    2f9c:	81 93       	st	Z+, r24
    2f9e:	91 93       	st	Z+, r25
    2fa0:	22 50       	subi	r18, 0x02	; 2
    2fa2:	31 09       	sbc	r19, r1
    2fa4:	39 83       	std	Y+1, r19	; 0x01
    2fa6:	28 83       	st	Y, r18
    2fa8:	3a c0       	rjmp	.+116    	; 0x301e <malloc+0x124>
    2faa:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <__brkval>
    2fae:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <__brkval+0x1>
    2fb2:	23 2b       	or	r18, r19
    2fb4:	41 f4       	brne	.+16     	; 0x2fc6 <malloc+0xcc>
    2fb6:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__malloc_heap_start>
    2fba:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__malloc_heap_start+0x1>
    2fbe:	30 93 42 02 	sts	0x0242, r19	; 0x800242 <__brkval+0x1>
    2fc2:	20 93 41 02 	sts	0x0241, r18	; 0x800241 <__brkval>
    2fc6:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__malloc_heap_end>
    2fca:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__malloc_heap_end+0x1>
    2fce:	21 15       	cp	r18, r1
    2fd0:	31 05       	cpc	r19, r1
    2fd2:	41 f4       	brne	.+16     	; 0x2fe4 <malloc+0xea>
    2fd4:	2d b7       	in	r18, 0x3d	; 61
    2fd6:	3e b7       	in	r19, 0x3e	; 62
    2fd8:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__malloc_margin>
    2fdc:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__malloc_margin+0x1>
    2fe0:	24 1b       	sub	r18, r20
    2fe2:	35 0b       	sbc	r19, r21
    2fe4:	e0 91 41 02 	lds	r30, 0x0241	; 0x800241 <__brkval>
    2fe8:	f0 91 42 02 	lds	r31, 0x0242	; 0x800242 <__brkval+0x1>
    2fec:	e2 17       	cp	r30, r18
    2fee:	f3 07       	cpc	r31, r19
    2ff0:	a0 f4       	brcc	.+40     	; 0x301a <malloc+0x120>
    2ff2:	2e 1b       	sub	r18, r30
    2ff4:	3f 0b       	sbc	r19, r31
    2ff6:	28 17       	cp	r18, r24
    2ff8:	39 07       	cpc	r19, r25
    2ffa:	78 f0       	brcs	.+30     	; 0x301a <malloc+0x120>
    2ffc:	ac 01       	movw	r20, r24
    2ffe:	4e 5f       	subi	r20, 0xFE	; 254
    3000:	5f 4f       	sbci	r21, 0xFF	; 255
    3002:	24 17       	cp	r18, r20
    3004:	35 07       	cpc	r19, r21
    3006:	48 f0       	brcs	.+18     	; 0x301a <malloc+0x120>
    3008:	4e 0f       	add	r20, r30
    300a:	5f 1f       	adc	r21, r31
    300c:	50 93 42 02 	sts	0x0242, r21	; 0x800242 <__brkval+0x1>
    3010:	40 93 41 02 	sts	0x0241, r20	; 0x800241 <__brkval>
    3014:	81 93       	st	Z+, r24
    3016:	91 93       	st	Z+, r25
    3018:	02 c0       	rjmp	.+4      	; 0x301e <malloc+0x124>
    301a:	e0 e0       	ldi	r30, 0x00	; 0
    301c:	f0 e0       	ldi	r31, 0x00	; 0
    301e:	cf 01       	movw	r24, r30
    3020:	df 91       	pop	r29
    3022:	cf 91       	pop	r28
    3024:	1f 91       	pop	r17
    3026:	0f 91       	pop	r16
    3028:	08 95       	ret

0000302a <free>:
    302a:	cf 93       	push	r28
    302c:	df 93       	push	r29
    302e:	00 97       	sbiw	r24, 0x00	; 0
    3030:	09 f4       	brne	.+2      	; 0x3034 <free+0xa>
    3032:	81 c0       	rjmp	.+258    	; 0x3136 <free+0x10c>
    3034:	fc 01       	movw	r30, r24
    3036:	32 97       	sbiw	r30, 0x02	; 2
    3038:	13 82       	std	Z+3, r1	; 0x03
    303a:	12 82       	std	Z+2, r1	; 0x02
    303c:	a0 91 43 02 	lds	r26, 0x0243	; 0x800243 <__flp>
    3040:	b0 91 44 02 	lds	r27, 0x0244	; 0x800244 <__flp+0x1>
    3044:	10 97       	sbiw	r26, 0x00	; 0
    3046:	81 f4       	brne	.+32     	; 0x3068 <free+0x3e>
    3048:	20 81       	ld	r18, Z
    304a:	31 81       	ldd	r19, Z+1	; 0x01
    304c:	82 0f       	add	r24, r18
    304e:	93 1f       	adc	r25, r19
    3050:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <__brkval>
    3054:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <__brkval+0x1>
    3058:	28 17       	cp	r18, r24
    305a:	39 07       	cpc	r19, r25
    305c:	51 f5       	brne	.+84     	; 0x30b2 <free+0x88>
    305e:	f0 93 42 02 	sts	0x0242, r31	; 0x800242 <__brkval+0x1>
    3062:	e0 93 41 02 	sts	0x0241, r30	; 0x800241 <__brkval>
    3066:	67 c0       	rjmp	.+206    	; 0x3136 <free+0x10c>
    3068:	ed 01       	movw	r28, r26
    306a:	20 e0       	ldi	r18, 0x00	; 0
    306c:	30 e0       	ldi	r19, 0x00	; 0
    306e:	ce 17       	cp	r28, r30
    3070:	df 07       	cpc	r29, r31
    3072:	40 f4       	brcc	.+16     	; 0x3084 <free+0x5a>
    3074:	4a 81       	ldd	r20, Y+2	; 0x02
    3076:	5b 81       	ldd	r21, Y+3	; 0x03
    3078:	9e 01       	movw	r18, r28
    307a:	41 15       	cp	r20, r1
    307c:	51 05       	cpc	r21, r1
    307e:	f1 f0       	breq	.+60     	; 0x30bc <free+0x92>
    3080:	ea 01       	movw	r28, r20
    3082:	f5 cf       	rjmp	.-22     	; 0x306e <free+0x44>
    3084:	d3 83       	std	Z+3, r29	; 0x03
    3086:	c2 83       	std	Z+2, r28	; 0x02
    3088:	40 81       	ld	r20, Z
    308a:	51 81       	ldd	r21, Z+1	; 0x01
    308c:	84 0f       	add	r24, r20
    308e:	95 1f       	adc	r25, r21
    3090:	c8 17       	cp	r28, r24
    3092:	d9 07       	cpc	r29, r25
    3094:	59 f4       	brne	.+22     	; 0x30ac <free+0x82>
    3096:	88 81       	ld	r24, Y
    3098:	99 81       	ldd	r25, Y+1	; 0x01
    309a:	84 0f       	add	r24, r20
    309c:	95 1f       	adc	r25, r21
    309e:	02 96       	adiw	r24, 0x02	; 2
    30a0:	91 83       	std	Z+1, r25	; 0x01
    30a2:	80 83       	st	Z, r24
    30a4:	8a 81       	ldd	r24, Y+2	; 0x02
    30a6:	9b 81       	ldd	r25, Y+3	; 0x03
    30a8:	93 83       	std	Z+3, r25	; 0x03
    30aa:	82 83       	std	Z+2, r24	; 0x02
    30ac:	21 15       	cp	r18, r1
    30ae:	31 05       	cpc	r19, r1
    30b0:	29 f4       	brne	.+10     	; 0x30bc <free+0x92>
    30b2:	f0 93 44 02 	sts	0x0244, r31	; 0x800244 <__flp+0x1>
    30b6:	e0 93 43 02 	sts	0x0243, r30	; 0x800243 <__flp>
    30ba:	3d c0       	rjmp	.+122    	; 0x3136 <free+0x10c>
    30bc:	e9 01       	movw	r28, r18
    30be:	fb 83       	std	Y+3, r31	; 0x03
    30c0:	ea 83       	std	Y+2, r30	; 0x02
    30c2:	49 91       	ld	r20, Y+
    30c4:	59 91       	ld	r21, Y+
    30c6:	c4 0f       	add	r28, r20
    30c8:	d5 1f       	adc	r29, r21
    30ca:	ec 17       	cp	r30, r28
    30cc:	fd 07       	cpc	r31, r29
    30ce:	61 f4       	brne	.+24     	; 0x30e8 <free+0xbe>
    30d0:	80 81       	ld	r24, Z
    30d2:	91 81       	ldd	r25, Z+1	; 0x01
    30d4:	84 0f       	add	r24, r20
    30d6:	95 1f       	adc	r25, r21
    30d8:	02 96       	adiw	r24, 0x02	; 2
    30da:	e9 01       	movw	r28, r18
    30dc:	99 83       	std	Y+1, r25	; 0x01
    30de:	88 83       	st	Y, r24
    30e0:	82 81       	ldd	r24, Z+2	; 0x02
    30e2:	93 81       	ldd	r25, Z+3	; 0x03
    30e4:	9b 83       	std	Y+3, r25	; 0x03
    30e6:	8a 83       	std	Y+2, r24	; 0x02
    30e8:	e0 e0       	ldi	r30, 0x00	; 0
    30ea:	f0 e0       	ldi	r31, 0x00	; 0
    30ec:	12 96       	adiw	r26, 0x02	; 2
    30ee:	8d 91       	ld	r24, X+
    30f0:	9c 91       	ld	r25, X
    30f2:	13 97       	sbiw	r26, 0x03	; 3
    30f4:	00 97       	sbiw	r24, 0x00	; 0
    30f6:	19 f0       	breq	.+6      	; 0x30fe <free+0xd4>
    30f8:	fd 01       	movw	r30, r26
    30fa:	dc 01       	movw	r26, r24
    30fc:	f7 cf       	rjmp	.-18     	; 0x30ec <free+0xc2>
    30fe:	8d 91       	ld	r24, X+
    3100:	9c 91       	ld	r25, X
    3102:	11 97       	sbiw	r26, 0x01	; 1
    3104:	9d 01       	movw	r18, r26
    3106:	2e 5f       	subi	r18, 0xFE	; 254
    3108:	3f 4f       	sbci	r19, 0xFF	; 255
    310a:	82 0f       	add	r24, r18
    310c:	93 1f       	adc	r25, r19
    310e:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <__brkval>
    3112:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <__brkval+0x1>
    3116:	28 17       	cp	r18, r24
    3118:	39 07       	cpc	r19, r25
    311a:	69 f4       	brne	.+26     	; 0x3136 <free+0x10c>
    311c:	30 97       	sbiw	r30, 0x00	; 0
    311e:	29 f4       	brne	.+10     	; 0x312a <free+0x100>
    3120:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <__flp+0x1>
    3124:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <__flp>
    3128:	02 c0       	rjmp	.+4      	; 0x312e <free+0x104>
    312a:	13 82       	std	Z+3, r1	; 0x03
    312c:	12 82       	std	Z+2, r1	; 0x02
    312e:	b0 93 42 02 	sts	0x0242, r27	; 0x800242 <__brkval+0x1>
    3132:	a0 93 41 02 	sts	0x0241, r26	; 0x800241 <__brkval>
    3136:	df 91       	pop	r29
    3138:	cf 91       	pop	r28
    313a:	08 95       	ret

0000313c <__do_global_dtors>:
    313c:	10 e0       	ldi	r17, 0x00	; 0
    313e:	cd e4       	ldi	r28, 0x4D	; 77
    3140:	d0 e0       	ldi	r29, 0x00	; 0
    3142:	04 c0       	rjmp	.+8      	; 0x314c <__do_global_dtors+0x10>
    3144:	fe 01       	movw	r30, r28
    3146:	0e 94 77 17 	call	0x2eee	; 0x2eee <__tablejump2__>
    314a:	21 96       	adiw	r28, 0x01	; 1
    314c:	ce 34       	cpi	r28, 0x4E	; 78
    314e:	d1 07       	cpc	r29, r17
    3150:	c9 f7       	brne	.-14     	; 0x3144 <__do_global_dtors+0x8>
    3152:	f8 94       	cli

00003154 <__stop_program>:
    3154:	ff cf       	rjmp	.-2      	; 0x3154 <__stop_program>
