
RobotRunGrid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00800100  000035e0  00003674  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000035e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e8  0080018e  0080018e  00003702  2**0
                  ALLOC
  3 .stab         000074b8  00000000  00000000  00003704  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000a086  00000000  00000000  0000abbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  00014c42  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00014c84  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000110  00000000  00000000  00014cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002444  00000000  00000000  00014dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000cfe  00000000  00000000  00017218  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001704  00000000  00000000  00017f16  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000348  00000000  00000000  0001961c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000008b0  00000000  00000000  00019964  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001322  00000000  00000000  0001a214  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000d0  00000000  00000000  0001b536  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__dtors_end>
       4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      24:	0c 94 15 13 	jmp	0x262a	; 0x262a <__vector_9>
      28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      34:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__vector_13>
      38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      48:	0c 94 8d 12 	jmp	0x251a	; 0x251a <__vector_18>
      4c:	0c 94 f0 12 	jmp	0x25e0	; 0x25e0 <__vector_19>
      50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      68:	05 a8       	ldd	r0, Z+53	; 0x35
      6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
      6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <__stack+0xd3>
      6e:	4e b9       	out	0x0e, r20	; 14
      70:	38 36       	cpi	r19, 0x68	; 104
      72:	a9 02       	muls	r26, r25
      74:	0c 50       	subi	r16, 0x0C	; 12
      76:	b9 91       	ld	r27, Y+
      78:	86 88       	ldd	r8, Z+22	; 0x16
      7a:	08 3c       	cpi	r16, 0xC8	; 200
      7c:	a6 aa       	std	Z+54, r10	; 0x36
      7e:	aa 2a       	or	r10, r26
      80:	be 00       	.word	0x00be	; ????
      82:	00 00       	nop
      84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__trampolines_end>:
      86:	3e 66       	ori	r19, 0x6E	; 110
      88:	33 32       	cpi	r19, 0x23	; 35
      8a:	3e 3e       	cpi	r19, 0xEE	; 238
      8c:	61 33       	cpi	r22, 0x31	; 49
      8e:	32 00       	.word	0x0032	; ????

00000090 <__ctors_end>:
      90:	f6 13       	cpse	r31, r22

00000092 <__dtors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf ef       	ldi	r28, 0xFF	; 255
      98:	d8 e0       	ldi	r29, 0x08	; 8
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
      9e:	11 e0       	ldi	r17, 0x01	; 1
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	e0 ee       	ldi	r30, 0xE0	; 224
      a6:	f5 e3       	ldi	r31, 0x35	; 53
      a8:	02 c0       	rjmp	.+4      	; 0xae <__do_copy_data+0x10>
      aa:	05 90       	lpm	r0, Z+
      ac:	0d 92       	st	X+, r0
      ae:	ae 38       	cpi	r26, 0x8E	; 142
      b0:	b1 07       	cpc	r27, r17
      b2:	d9 f7       	brne	.-10     	; 0xaa <__do_copy_data+0xc>

000000b4 <__do_clear_bss>:
      b4:	22 e0       	ldi	r18, 0x02	; 2
      b6:	ae e8       	ldi	r26, 0x8E	; 142
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
      bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
      be:	a6 37       	cpi	r26, 0x76	; 118
      c0:	b2 07       	cpc	r27, r18
      c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
      c4:	0e 94 8c 03 	call	0x718	; 0x718 <main>
      c8:	0c 94 e3 1a 	jmp	0x35c6	; 0x35c6 <__do_global_dtors>

000000cc <__bad_interrupt>:
      cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <swapOne>:
	temp = *secondYValue;                                                                               //Swap Y-Coordinates
	*secondYValue = *firstYValue;
	*firstYValue = temp;
}

void swapOne(float *firstValue, float *secondValue) {                                                  //Swap function for the distance array
      d0:	cf 92       	push	r12
      d2:	df 92       	push	r13
      d4:	ef 92       	push	r14
      d6:	ff 92       	push	r15
      d8:	0f 93       	push	r16
      da:	1f 93       	push	r17
	float temp;

	temp = *secondValue;
      dc:	fb 01       	movw	r30, r22
      de:	00 81       	ld	r16, Z
      e0:	11 81       	ldd	r17, Z+1	; 0x01
      e2:	22 81       	ldd	r18, Z+2	; 0x02
      e4:	33 81       	ldd	r19, Z+3	; 0x03
	*secondValue = *firstValue;
      e6:	fc 01       	movw	r30, r24
      e8:	c0 80       	ld	r12, Z
      ea:	d1 80       	ldd	r13, Z+1	; 0x01
      ec:	e2 80       	ldd	r14, Z+2	; 0x02
      ee:	f3 80       	ldd	r15, Z+3	; 0x03
      f0:	fb 01       	movw	r30, r22
      f2:	c0 82       	st	Z, r12
      f4:	d1 82       	std	Z+1, r13	; 0x01
      f6:	e2 82       	std	Z+2, r14	; 0x02
      f8:	f3 82       	std	Z+3, r15	; 0x03
	*firstValue = temp;
      fa:	fc 01       	movw	r30, r24
      fc:	00 83       	st	Z, r16
      fe:	11 83       	std	Z+1, r17	; 0x01
     100:	22 83       	std	Z+2, r18	; 0x02
     102:	33 83       	std	Z+3, r19	; 0x03
}
     104:	1f 91       	pop	r17
     106:	0f 91       	pop	r16
     108:	ff 90       	pop	r15
     10a:	ef 90       	pop	r14
     10c:	df 90       	pop	r13
     10e:	cf 90       	pop	r12
     110:	08 95       	ret

00000112 <sortOrder>:

void sortOrder(int X[], int Y[]) {                                                                   //Sorting algorithm, this sorts the coordinates of the given order
     112:	2f 92       	push	r2
     114:	3f 92       	push	r3
     116:	4f 92       	push	r4
     118:	5f 92       	push	r5
     11a:	6f 92       	push	r6
     11c:	7f 92       	push	r7
     11e:	8f 92       	push	r8
     120:	9f 92       	push	r9
     122:	af 92       	push	r10
     124:	bf 92       	push	r11
     126:	cf 92       	push	r12
     128:	df 92       	push	r13
     12a:	ef 92       	push	r14
     12c:	ff 92       	push	r15
     12e:	0f 93       	push	r16
     130:	1f 93       	push	r17
     132:	cf 93       	push	r28
     134:	df 93       	push	r29
     136:	cd b7       	in	r28, 0x3d	; 61
     138:	de b7       	in	r29, 0x3e	; 62
     13a:	a5 97       	sbiw	r28, 0x25	; 37
     13c:	0f b6       	in	r0, 0x3f	; 63
     13e:	f8 94       	cli
     140:	de bf       	out	0x3e, r29	; 62
     142:	0f be       	out	0x3f, r0	; 63
     144:	cd bf       	out	0x3d, r28	; 61
     146:	9b a3       	std	Y+35, r25	; 0x23
     148:	8a a3       	std	Y+34, r24	; 0x22
     14a:	6c a3       	std	Y+36, r22	; 0x24
     14c:	7d a3       	std	Y+37, r23	; 0x25
     14e:	06 96       	adiw	r24, 0x06	; 6
     150:	98 a3       	std	Y+32, r25	; 0x20
     152:	8f 8f       	std	Y+31, r24	; 0x1f
     154:	b6 c0       	rjmp	.+364    	; 0x2c2 <sortOrder+0x1b0>
     156:	7e 8e       	std	Y+30, r7	; 0x1e
     158:	6d 8e       	std	Y+29, r6	; 0x1d

	while (check != 1) {
		orderCorrect = 1;

		for (int i = 0; i < (sizeOfOrder - 1); i++) {
			Distance[i] = sqrt((pow(X[i], 2)) + (pow(Y[i], 2)));                                    //Pythagoras
     15a:	f3 01       	movw	r30, r6
     15c:	01 90       	ld	r0, Z+
     15e:	f0 81       	ld	r31, Z
     160:	e0 2d       	mov	r30, r0
     162:	fa 8f       	std	Y+26, r31	; 0x1a
     164:	e9 8f       	std	Y+25, r30	; 0x19
     166:	bf 01       	movw	r22, r30
     168:	ff 0f       	add	r31, r31
     16a:	88 0b       	sbc	r24, r24
     16c:	99 0b       	sbc	r25, r25
     16e:	0e 94 ed 09 	call	0x13da	; 0x13da <__floatsisf>
     172:	6b 01       	movw	r12, r22
     174:	7c 01       	movw	r14, r24
     176:	3c 8e       	std	Y+28, r3	; 0x1c
     178:	2b 8e       	std	Y+27, r2	; 0x1b
     17a:	f1 01       	movw	r30, r2
     17c:	00 81       	ld	r16, Z
     17e:	11 81       	ldd	r17, Z+1	; 0x01
     180:	b8 01       	movw	r22, r16
     182:	01 2e       	mov	r0, r17
     184:	00 0c       	add	r0, r0
     186:	88 0b       	sbc	r24, r24
     188:	99 0b       	sbc	r25, r25
     18a:	0e 94 ed 09 	call	0x13da	; 0x13da <__floatsisf>
     18e:	4b 01       	movw	r8, r22
     190:	5c 01       	movw	r10, r24
     192:	9b 01       	movw	r18, r22
     194:	ac 01       	movw	r20, r24
     196:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
     19a:	69 8b       	std	Y+17, r22	; 0x11
     19c:	7a 8b       	std	Y+18, r23	; 0x12
     19e:	8b 8b       	std	Y+19, r24	; 0x13
     1a0:	9c 8b       	std	Y+20, r25	; 0x14
     1a2:	a5 01       	movw	r20, r10
     1a4:	94 01       	movw	r18, r8
     1a6:	c5 01       	movw	r24, r10
     1a8:	b4 01       	movw	r22, r8
     1aa:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
     1ae:	4b 01       	movw	r8, r22
     1b0:	5c 01       	movw	r10, r24
     1b2:	a7 01       	movw	r20, r14
     1b4:	96 01       	movw	r18, r12
     1b6:	c7 01       	movw	r24, r14
     1b8:	b6 01       	movw	r22, r12
     1ba:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
     1be:	9b 01       	movw	r18, r22
     1c0:	ac 01       	movw	r20, r24
     1c2:	c5 01       	movw	r24, r10
     1c4:	b4 01       	movw	r22, r8
     1c6:	0e 94 44 09 	call	0x1288	; 0x1288 <__addsf3>
     1ca:	0e 94 1d 0b 	call	0x163a	; 0x163a <sqrt>
     1ce:	6b 01       	movw	r12, r22
     1d0:	7c 01       	movw	r14, r24
     1d2:	f2 01       	movw	r30, r4
     1d4:	61 93       	st	Z+, r22
     1d6:	71 93       	st	Z+, r23
     1d8:	81 93       	st	Z+, r24
     1da:	91 93       	st	Z+, r25
     1dc:	2f 01       	movw	r4, r30
     1de:	e9 8b       	std	Y+17, r30	; 0x11
     1e0:	59 a2       	std	Y+33, r5	; 0x21
			firstDistanceValue =  Distance[i];
			secondDistanceValue =  Distance[i + 1];
     1e2:	80 80       	ld	r8, Z
     1e4:	91 80       	ldd	r9, Z+1	; 0x01
     1e6:	a2 80       	ldd	r10, Z+2	; 0x02
     1e8:	b3 80       	ldd	r11, Z+3	; 0x03

			if ( Distance[i] >  Distance[i + 1]) {                                                  //Compare the distance of two points to each other
     1ea:	a5 01       	movw	r20, r10
     1ec:	94 01       	movw	r18, r8
     1ee:	0e 94 9d 0a 	call	0x153a	; 0x153a <__gesf2>
     1f2:	18 16       	cp	r1, r24
     1f4:	d4 f4       	brge	.+52     	; 0x22a <sortOrder+0x118>
				swapOne(& Distance[i], & Distance[i + 1]);                                          //Place the biggest one further behind in the array
     1f6:	b2 01       	movw	r22, r4
     1f8:	8d 89       	ldd	r24, Y+21	; 0x15
     1fa:	9e 89       	ldd	r25, Y+22	; 0x16
     1fc:	0e 94 68 00 	call	0xd0	; 0xd0 <swapOne>


void swapTwo( int *firstXValue, int *secondXValue, int *firstYValue, int *secondYValue){                //Swap function for the coordinates
	int temp;

	temp = *secondXValue;                                                                               //Swap X-Coordinates
     200:	f3 01       	movw	r30, r6
     202:	82 81       	ldd	r24, Z+2	; 0x02
     204:	93 81       	ldd	r25, Z+3	; 0x03
	*secondXValue = *firstXValue;
     206:	20 81       	ld	r18, Z
     208:	31 81       	ldd	r19, Z+1	; 0x01
     20a:	33 83       	std	Z+3, r19	; 0x03
     20c:	22 83       	std	Z+2, r18	; 0x02
	*firstXValue = temp;
     20e:	91 83       	std	Z+1, r25	; 0x01
     210:	80 83       	st	Z, r24

	temp = *secondYValue;                                                                               //Swap Y-Coordinates
     212:	f1 01       	movw	r30, r2
     214:	82 81       	ldd	r24, Z+2	; 0x02
     216:	93 81       	ldd	r25, Z+3	; 0x03
	*secondYValue = *firstYValue;
     218:	20 81       	ld	r18, Z
     21a:	31 81       	ldd	r19, Z+1	; 0x01
     21c:	33 83       	std	Z+3, r19	; 0x03
     21e:	22 83       	std	Z+2, r18	; 0x02
	*firstYValue = temp;
     220:	91 83       	std	Z+1, r25	; 0x01
     222:	80 83       	st	Z, r24
			secondDistanceValue =  Distance[i + 1];

			if ( Distance[i] >  Distance[i + 1]) {                                                  //Compare the distance of two points to each other
				swapOne(& Distance[i], & Distance[i + 1]);                                          //Place the biggest one further behind in the array
				swapTwo(&X[i], &X[i + 1], &Y[i], &Y[i + 1]);                                        //Swap the coordinates accordingly
				orderCorrect = 0;
     224:	1f 8a       	std	Y+23, r1	; 0x17
     226:	18 8e       	std	Y+24, r1	; 0x18
     228:	36 c0       	rjmp	.+108    	; 0x296 <sortOrder+0x184>
				} else if ((firstDistanceValue == secondDistanceValue) && (Y[i] == Y[i + 1])) {     //If the distance is the same and the Y values are the same
     22a:	c7 01       	movw	r24, r14
     22c:	b6 01       	movw	r22, r12
     22e:	0e 94 b5 09 	call	0x136a	; 0x136a <__fixsfsi>
     232:	7b 01       	movw	r14, r22
     234:	c5 01       	movw	r24, r10
     236:	b4 01       	movw	r22, r8
     238:	0e 94 b5 09 	call	0x136a	; 0x136a <__fixsfsi>
     23c:	e6 16       	cp	r14, r22
     23e:	f7 06       	cpc	r15, r23
     240:	51 f5       	brne	.+84     	; 0x296 <sortOrder+0x184>
     242:	eb 8d       	ldd	r30, Y+27	; 0x1b
     244:	fc 8d       	ldd	r31, Y+28	; 0x1c
     246:	82 81       	ldd	r24, Z+2	; 0x02
     248:	93 81       	ldd	r25, Z+3	; 0x03
     24a:	08 17       	cp	r16, r24
     24c:	19 07       	cpc	r17, r25
     24e:	19 f5       	brne	.+70     	; 0x296 <sortOrder+0x184>
				if (X[i] < X[i + 1]) {                                                              //Compare the X values
     250:	ed 8d       	ldd	r30, Y+29	; 0x1d
     252:	fe 8d       	ldd	r31, Y+30	; 0x1e
     254:	82 81       	ldd	r24, Z+2	; 0x02
     256:	93 81       	ldd	r25, Z+3	; 0x03
     258:	29 8d       	ldd	r18, Y+25	; 0x19
     25a:	3a 8d       	ldd	r19, Y+26	; 0x1a
     25c:	28 17       	cp	r18, r24
     25e:	39 07       	cpc	r19, r25
     260:	d4 f4       	brge	.+52     	; 0x296 <sortOrder+0x184>
					swapOne(& Distance[i], & Distance[i + 1]);
     262:	69 89       	ldd	r22, Y+17	; 0x11
     264:	79 a1       	ldd	r23, Y+33	; 0x21
     266:	8d 89       	ldd	r24, Y+21	; 0x15
     268:	9e 89       	ldd	r25, Y+22	; 0x16
     26a:	0e 94 68 00 	call	0xd0	; 0xd0 <swapOne>


void swapTwo( int *firstXValue, int *secondXValue, int *firstYValue, int *secondYValue){                //Swap function for the coordinates
	int temp;

	temp = *secondXValue;                                                                               //Swap X-Coordinates
     26e:	ed 8d       	ldd	r30, Y+29	; 0x1d
     270:	fe 8d       	ldd	r31, Y+30	; 0x1e
     272:	82 81       	ldd	r24, Z+2	; 0x02
     274:	93 81       	ldd	r25, Z+3	; 0x03
	*secondXValue = *firstXValue;
     276:	20 81       	ld	r18, Z
     278:	31 81       	ldd	r19, Z+1	; 0x01
     27a:	33 83       	std	Z+3, r19	; 0x03
     27c:	22 83       	std	Z+2, r18	; 0x02
	*firstXValue = temp;
     27e:	91 83       	std	Z+1, r25	; 0x01
     280:	80 83       	st	Z, r24

	temp = *secondYValue;                                                                               //Swap Y-Coordinates
     282:	eb 8d       	ldd	r30, Y+27	; 0x1b
     284:	fc 8d       	ldd	r31, Y+28	; 0x1c
     286:	82 81       	ldd	r24, Z+2	; 0x02
     288:	93 81       	ldd	r25, Z+3	; 0x03
	*secondYValue = *firstYValue;
     28a:	20 81       	ld	r18, Z
     28c:	31 81       	ldd	r19, Z+1	; 0x01
     28e:	33 83       	std	Z+3, r19	; 0x03
     290:	22 83       	std	Z+2, r18	; 0x02
	*firstYValue = temp;
     292:	91 83       	std	Z+1, r25	; 0x01
     294:	80 83       	st	Z, r24
     296:	f2 e0       	ldi	r31, 0x02	; 2
     298:	6f 0e       	add	r6, r31
     29a:	71 1c       	adc	r7, r1
     29c:	22 e0       	ldi	r18, 0x02	; 2
     29e:	22 0e       	add	r2, r18
     2a0:	31 1c       	adc	r3, r1
     2a2:	8d 89       	ldd	r24, Y+21	; 0x15
     2a4:	9e 89       	ldd	r25, Y+22	; 0x16
     2a6:	04 96       	adiw	r24, 0x04	; 4
     2a8:	9e 8b       	std	Y+22, r25	; 0x16
     2aa:	8d 8b       	std	Y+21, r24	; 0x15
	float Distance[sizeOfOrder];

	while (check != 1) {
		orderCorrect = 1;

		for (int i = 0; i < (sizeOfOrder - 1); i++) {
     2ac:	ef 8d       	ldd	r30, Y+31	; 0x1f
     2ae:	f8 a1       	ldd	r31, Y+32	; 0x20
     2b0:	6e 16       	cp	r6, r30
     2b2:	7f 06       	cpc	r7, r31
     2b4:	09 f0       	breq	.+2      	; 0x2b8 <sortOrder+0x1a6>
     2b6:	4f cf       	rjmp	.-354    	; 0x156 <sortOrder+0x44>
					swapOne(& Distance[i], & Distance[i + 1]);
					swapTwo(&X[i], &X[i + 1], &Y[i], &Y[i + 1]);
				}
			}
		}
		if (orderCorrect == 1) {
     2b8:	2f 89       	ldd	r18, Y+23	; 0x17
     2ba:	38 8d       	ldd	r19, Y+24	; 0x18
     2bc:	21 30       	cpi	r18, 0x01	; 1
     2be:	31 05       	cpc	r19, r1
     2c0:	69 f0       	breq	.+26     	; 0x2dc <sortOrder+0x1ca>
     2c2:	6a a0       	ldd	r6, Y+34	; 0x22
     2c4:	7b a0       	ldd	r7, Y+35	; 0x23
     2c6:	2c a0       	ldd	r2, Y+36	; 0x24
     2c8:	3d a0       	ldd	r3, Y+37	; 0x25
     2ca:	ce 01       	movw	r24, r28
     2cc:	01 96       	adiw	r24, 0x01	; 1
     2ce:	2c 01       	movw	r4, r24
	temp = *secondValue;
	*secondValue = *firstValue;
	*firstValue = temp;
}

void sortOrder(int X[], int Y[]) {                                                                   //Sorting algorithm, this sorts the coordinates of the given order
     2d0:	9e 8b       	std	Y+22, r25	; 0x16
     2d2:	8d 8b       	std	Y+21, r24	; 0x15
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	9f 8b       	std	Y+23, r25	; 0x17
     2d8:	18 8e       	std	Y+24, r1	; 0x18
     2da:	3d cf       	rjmp	.-390    	; 0x156 <sortOrder+0x44>
		}
		if (orderCorrect == 1) {
			check = 1;
		}
	}
}
     2dc:	a5 96       	adiw	r28, 0x25	; 37
     2de:	0f b6       	in	r0, 0x3f	; 63
     2e0:	f8 94       	cli
     2e2:	de bf       	out	0x3e, r29	; 62
     2e4:	0f be       	out	0x3f, r0	; 63
     2e6:	cd bf       	out	0x3d, r28	; 61
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	1f 91       	pop	r17
     2ee:	0f 91       	pop	r16
     2f0:	ff 90       	pop	r15
     2f2:	ef 90       	pop	r14
     2f4:	df 90       	pop	r13
     2f6:	cf 90       	pop	r12
     2f8:	bf 90       	pop	r11
     2fa:	af 90       	pop	r10
     2fc:	9f 90       	pop	r9
     2fe:	8f 90       	pop	r8
     300:	7f 90       	pop	r7
     302:	6f 90       	pop	r6
     304:	5f 90       	pop	r5
     306:	4f 90       	pop	r4
     308:	3f 90       	pop	r3
     30a:	2f 90       	pop	r2
     30c:	08 95       	ret

0000030e <readGrid>:



void readGrid(int routes[4][4]){
     30e:	fc 01       	movw	r30, r24
	
	//routes[0][0] = 2;                                                                         //Home to grid
	routes[0][0] = 3;
     310:	83 e0       	ldi	r24, 0x03	; 3
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	91 83       	std	Z+1, r25	; 0x01
     316:	80 83       	st	Z, r24
	routes[0][1] = 2;
     318:	42 e0       	ldi	r20, 0x02	; 2
     31a:	50 e0       	ldi	r21, 0x00	; 0
     31c:	53 83       	std	Z+3, r21	; 0x03
     31e:	42 83       	std	Z+2, r20	; 0x02
	routes[0][2] = 5;
     320:	25 e0       	ldi	r18, 0x05	; 5
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	35 83       	std	Z+5, r19	; 0x05
     326:	24 83       	std	Z+4, r18	; 0x04
	
	routes[1][0] = 1;                                                                        //Home to charge point
     328:	61 e0       	ldi	r22, 0x01	; 1
     32a:	70 e0       	ldi	r23, 0x00	; 0
     32c:	71 87       	std	Z+9, r23	; 0x09
     32e:	60 87       	std	Z+8, r22	; 0x08
	routes[1][1] = 1;
     330:	73 87       	std	Z+11, r23	; 0x0b
     332:	62 87       	std	Z+10, r22	; 0x0a
	routes[1][2] = 5;
     334:	35 87       	std	Z+13, r19	; 0x0d
     336:	24 87       	std	Z+12, r18	; 0x0c
	
	routes[2][0] = 3;                                                                        //Grid to charge point
     338:	91 8b       	std	Z+17, r25	; 0x11
     33a:	80 8b       	std	Z+16, r24	; 0x10
	routes[2][1] = 3;
     33c:	93 8b       	std	Z+19, r25	; 0x13
     33e:	82 8b       	std	Z+18, r24	; 0x12
	routes[2][2] = 5;
     340:	35 8b       	std	Z+21, r19	; 0x15
     342:	24 8b       	std	Z+20, r18	; 0x14
	
	routes[3][0] = 3;                                                                        //Grid to home
     344:	91 8f       	std	Z+25, r25	; 0x19
     346:	80 8f       	std	Z+24, r24	; 0x18
	routes[3][1] = 1;
     348:	73 8f       	std	Z+27, r23	; 0x1b
     34a:	62 8f       	std	Z+26, r22	; 0x1a
	routes[3][2] = 2;
     34c:	55 8f       	std	Z+29, r21	; 0x1d
     34e:	44 8f       	std	Z+28, r20	; 0x1c
	routes[3][3] = 5;
     350:	37 8f       	std	Z+31, r19	; 0x1f
     352:	26 8f       	std	Z+30, r18	; 0x1e
	
	routes[4][0] = 3;                                                                       //Charge point to grid
     354:	91 a3       	std	Z+33, r25	; 0x21
     356:	80 a3       	std	Z+32, r24	; 0x20
	routes[4][1] = 2;
     358:	53 a3       	std	Z+35, r21	; 0x23
     35a:	42 a3       	std	Z+34, r20	; 0x22
	routes[4][2] = 3;
     35c:	95 a3       	std	Z+37, r25	; 0x25
     35e:	84 a3       	std	Z+36, r24	; 0x24
	routes[4][3] = 5;
     360:	37 a3       	std	Z+39, r19	; 0x27
     362:	26 a3       	std	Z+38, r18	; 0x26
     364:	08 95       	ret

00000366 <setDirection>:
	else{
		setDirection(S, directionCurrent);
	}
}

void setDirection(direction directionDesired, direction directionCurrent){
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	cd b7       	in	r28, 0x3d	; 61
     36c:	de b7       	in	r29, 0x3e	; 62
     36e:	60 97       	sbiw	r28, 0x10	; 16
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	f8 94       	cli
     374:	de bf       	out	0x3e, r29	; 62
     376:	0f be       	out	0x3f, r0	; 63
     378:	cd bf       	out	0x3d, r28	; 61
	rotation orientation[4][4] ={{X, R, T, L},
     37a:	90 e1       	ldi	r25, 0x10	; 16
     37c:	e4 e1       	ldi	r30, 0x14	; 20
     37e:	f1 e0       	ldi	r31, 0x01	; 1
     380:	de 01       	movw	r26, r28
     382:	11 96       	adiw	r26, 0x01	; 1
     384:	01 90       	ld	r0, Z+
     386:	0d 92       	st	X+, r0
     388:	9a 95       	dec	r25
     38a:	e1 f7       	brne	.-8      	; 0x384 <setDirection+0x1e>
	{L, X, R, T},
	{T, L, X, R},
	{R, T, L, X}};
	
	switch(orientation[directionDesired][directionCurrent]){
     38c:	e1 e0       	ldi	r30, 0x01	; 1
     38e:	f0 e0       	ldi	r31, 0x00	; 0
     390:	ec 0f       	add	r30, r28
     392:	fd 1f       	adc	r31, r29
     394:	94 e0       	ldi	r25, 0x04	; 4
     396:	89 9f       	mul	r24, r25
     398:	e0 0d       	add	r30, r0
     39a:	f1 1d       	adc	r31, r1
     39c:	11 24       	eor	r1, r1
     39e:	e6 0f       	add	r30, r22
     3a0:	f1 1d       	adc	r31, r1
     3a2:	80 81       	ld	r24, Z
     3a4:	81 30       	cpi	r24, 0x01	; 1
     3a6:	21 f0       	breq	.+8      	; 0x3b0 <setDirection+0x4a>
     3a8:	38 f1       	brcs	.+78     	; 0x3f8 <setDirection+0x92>
     3aa:	82 30       	cpi	r24, 0x02	; 2
     3ac:	99 f0       	breq	.+38     	; 0x3d4 <setDirection+0x6e>
     3ae:	3e c0       	rjmp	.+124    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		case R:
		motorControl(70, 'R', 0.30);
     3b0:	2a e9       	ldi	r18, 0x9A	; 154
     3b2:	39 e9       	ldi	r19, 0x99	; 153
     3b4:	49 e9       	ldi	r20, 0x99	; 153
     3b6:	5e e3       	ldi	r21, 0x3E	; 62
     3b8:	62 e5       	ldi	r22, 0x52	; 82
     3ba:	86 e4       	ldi	r24, 0x46	; 70
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	0e 94 cc 03 	call	0x798	; 0x798 <motorControl>
		directionCurrent = directionDesired;
		print("R");
     3c2:	81 e5       	ldi	r24, 0x51	; 81
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	0e 94 ee 10 	call	0x21dc	; 0x21dc <print>
		    : "0" ( microseconds )
		    );  
}

// These are alternative aliases:
static inline void delay(unsigned int milliseconds) { delay_ms(milliseconds); }
     3ca:	84 ef       	ldi	r24, 0xF4	; 244
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	0e 94 5d 13 	call	0x26ba	; 0x26ba <delay_ms>
     3d2:	2c c0       	rjmp	.+88     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		delay(500);
		break;
		case L:
		motorControl(70, 'L', 0.30);
     3d4:	2a e9       	ldi	r18, 0x9A	; 154
     3d6:	39 e9       	ldi	r19, 0x99	; 153
     3d8:	49 e9       	ldi	r20, 0x99	; 153
     3da:	5e e3       	ldi	r21, 0x3E	; 62
     3dc:	6c e4       	ldi	r22, 0x4C	; 76
     3de:	86 e4       	ldi	r24, 0x46	; 70
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	0e 94 cc 03 	call	0x798	; 0x798 <motorControl>
		directionCurrent = directionDesired;
		print("L");
     3e6:	83 e5       	ldi	r24, 0x53	; 83
     3e8:	91 e0       	ldi	r25, 0x01	; 1
     3ea:	0e 94 ee 10 	call	0x21dc	; 0x21dc <print>
     3ee:	84 ef       	ldi	r24, 0xF4	; 244
     3f0:	91 e0       	ldi	r25, 0x01	; 1
     3f2:	0e 94 5d 13 	call	0x26ba	; 0x26ba <delay_ms>
     3f6:	1a c0       	rjmp	.+52     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		delay(500);
		break;
		case T:
		motorControl(70, 'R', 0.30);
     3f8:	2a e9       	ldi	r18, 0x9A	; 154
     3fa:	39 e9       	ldi	r19, 0x99	; 153
     3fc:	49 e9       	ldi	r20, 0x99	; 153
     3fe:	5e e3       	ldi	r21, 0x3E	; 62
     400:	62 e5       	ldi	r22, 0x52	; 82
     402:	86 e4       	ldi	r24, 0x46	; 70
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	0e 94 cc 03 	call	0x798	; 0x798 <motorControl>
		motorControl(70, 'R', 0.30);
     40a:	2a e9       	ldi	r18, 0x9A	; 154
     40c:	39 e9       	ldi	r19, 0x99	; 153
     40e:	49 e9       	ldi	r20, 0x99	; 153
     410:	5e e3       	ldi	r21, 0x3E	; 62
     412:	62 e5       	ldi	r22, 0x52	; 82
     414:	86 e4       	ldi	r24, 0x46	; 70
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	0e 94 cc 03 	call	0x798	; 0x798 <motorControl>
		directionCurrent = directionDesired;
		print("B");
     41c:	86 e6       	ldi	r24, 0x66	; 102
     41e:	91 e0       	ldi	r25, 0x01	; 1
     420:	0e 94 ee 10 	call	0x21dc	; 0x21dc <print>
     424:	84 ef       	ldi	r24, 0xF4	; 244
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	0e 94 5d 13 	call	0x26ba	; 0x26ba <delay_ms>
		delay(500);
		break;
		default:
		break;
	}
}
     42c:	60 96       	adiw	r28, 0x10	; 16
     42e:	0f b6       	in	r0, 0x3f	; 63
     430:	f8 94       	cli
     432:	de bf       	out	0x3e, r29	; 62
     434:	0f be       	out	0x3f, r0	; 63
     436:	cd bf       	out	0x3d, r28	; 61
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	08 95       	ret

0000043e <getInstructionsX>:
		
	}
}

void getInstructionsX(int gridZero, int orderX){
	if(gridZero){
     43e:	89 2b       	or	r24, r25
     440:	31 f0       	breq	.+12     	; 0x44e <getInstructionsX+0x10>
		positionCurrentX = 0;
     442:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <positionCurrentX+0x1>
     446:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <positionCurrentX>
		directionCurrent = N;
     44a:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <directionCurrent>
	}
	
	if(orderX > positionCurrentX){
     44e:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <positionCurrentX>
     452:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <positionCurrentX+0x1>
     456:	86 17       	cp	r24, r22
     458:	97 07       	cpc	r25, r23
     45a:	34 f4       	brge	.+12     	; 0x468 <getInstructionsX+0x2a>
		setDirection(E, directionCurrent);
     45c:	60 91 0d 02 	lds	r22, 0x020D	; 0x80020d <directionCurrent>
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	0e 94 b3 01 	call	0x366	; 0x366 <setDirection>
     466:	08 95       	ret
	}
	else{
		setDirection(W, directionCurrent);
     468:	60 91 0d 02 	lds	r22, 0x020D	; 0x80020d <directionCurrent>
     46c:	83 e0       	ldi	r24, 0x03	; 3
     46e:	0e 94 b3 01 	call	0x366	; 0x366 <setDirection>
     472:	08 95       	ret

00000474 <getInstructionsY>:
	}
}

void getInstructionsY(int gridZero, int orderY){
	if(gridZero){
     474:	89 2b       	or	r24, r25
     476:	31 f0       	breq	.+12     	; 0x484 <getInstructionsY+0x10>
		positionCurrentY = 0;
     478:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <positionCurrentY+0x1>
     47c:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <positionCurrentY>
		directionCurrent = N;
     480:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <directionCurrent>
	}
	
	if(orderY > positionCurrentY){
     484:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <positionCurrentY>
     488:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <positionCurrentY+0x1>
     48c:	86 17       	cp	r24, r22
     48e:	97 07       	cpc	r25, r23
     490:	34 f4       	brge	.+12     	; 0x49e <getInstructionsY+0x2a>
		setDirection(N, directionCurrent);
     492:	60 91 0d 02 	lds	r22, 0x020D	; 0x80020d <directionCurrent>
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	0e 94 b3 01 	call	0x366	; 0x366 <setDirection>
     49c:	08 95       	ret
	}
	else{
		setDirection(S, directionCurrent);
     49e:	60 91 0d 02 	lds	r22, 0x020D	; 0x80020d <directionCurrent>
     4a2:	82 e0       	ldi	r24, 0x02	; 2
     4a4:	0e 94 b3 01 	call	0x366	; 0x366 <setDirection>
     4a8:	08 95       	ret

000004aa <driveRoute>:
		default:
		break;
	}
}

void driveRoute(int route[4][4], int flag){                                                //Drive the given route
     4aa:	ef 92       	push	r14
     4ac:	ff 92       	push	r15
     4ae:	0f 93       	push	r16
     4b0:	1f 93       	push	r17
     4b2:	cf 93       	push	r28
     4b4:	df 93       	push	r29
		decision = checkDecision();
		
		if(checkAfslag() != 0){
			
			if(decision == HIGH){                                                          //If there is more than one turn, the robot makes a decision depending on the values in the route array
				switch(route[flag][intersectnum]){
     4b6:	8b 01       	movw	r16, r22
     4b8:	00 0f       	add	r16, r16
     4ba:	11 1f       	adc	r17, r17
     4bc:	00 0f       	add	r16, r16
     4be:	11 1f       	adc	r17, r17
     4c0:	00 0f       	add	r16, r16
     4c2:	11 1f       	adc	r17, r17
     4c4:	08 0f       	add	r16, r24
     4c6:	19 1f       	adc	r17, r25
		break;
	}
}

void driveRoute(int route[4][4], int flag){                                                //Drive the given route
	int intersectnum = 0, decision = LOW, endOfRoute = 0;            //Flag selects the route
     4c8:	e1 2c       	mov	r14, r1
     4ca:	f1 2c       	mov	r15, r1
	
	do{
		decision = checkDecision();
     4cc:	0e 94 1c 09 	call	0x1238	; 0x1238 <checkDecision>
     4d0:	ec 01       	movw	r28, r24
		
		if(checkAfslag() != 0){
     4d2:	0e 94 d7 08 	call	0x11ae	; 0x11ae <checkAfslag>
     4d6:	89 2b       	or	r24, r25
     4d8:	c9 f3       	breq	.-14     	; 0x4cc <driveRoute+0x22>
			
			if(decision == HIGH){                                                          //If there is more than one turn, the robot makes a decision depending on the values in the route array
     4da:	21 97       	sbiw	r28, 0x01	; 1
     4dc:	b9 f7       	brne	.-18     	; 0x4cc <driveRoute+0x22>
				switch(route[flag][intersectnum]){
     4de:	f7 01       	movw	r30, r14
     4e0:	ee 0f       	add	r30, r30
     4e2:	ff 1f       	adc	r31, r31
     4e4:	e0 0f       	add	r30, r16
     4e6:	f1 1f       	adc	r31, r17
     4e8:	80 81       	ld	r24, Z
     4ea:	91 81       	ldd	r25, Z+1	; 0x01
     4ec:	82 30       	cpi	r24, 0x02	; 2
     4ee:	91 05       	cpc	r25, r1
     4f0:	f9 f0       	breq	.+62     	; 0x530 <driveRoute+0x86>
     4f2:	1c f4       	brge	.+6      	; 0x4fa <driveRoute+0x50>
     4f4:	01 97       	sbiw	r24, 0x01	; 1
     4f6:	39 f0       	breq	.+14     	; 0x506 <driveRoute+0x5c>
     4f8:	e9 cf       	rjmp	.-46     	; 0x4cc <driveRoute+0x22>
     4fa:	83 30       	cpi	r24, 0x03	; 3
     4fc:	91 05       	cpc	r25, r1
     4fe:	49 f1       	breq	.+82     	; 0x552 <driveRoute+0xa8>
     500:	05 97       	sbiw	r24, 0x05	; 5
     502:	c1 f1       	breq	.+112    	; 0x574 <driveRoute+0xca>
     504:	e3 cf       	rjmp	.-58     	; 0x4cc <driveRoute+0x22>
     506:	86 e9       	ldi	r24, 0x96	; 150
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	0e 94 5d 13 	call	0x26ba	; 0x26ba <delay_ms>
					case 1:
					delay(150);
					motorControl(70, 'R', 0.30);
     50e:	2a e9       	ldi	r18, 0x9A	; 154
     510:	39 e9       	ldi	r19, 0x99	; 153
     512:	49 e9       	ldi	r20, 0x99	; 153
     514:	5e e3       	ldi	r21, 0x3E	; 62
     516:	62 e5       	ldi	r22, 0x52	; 82
     518:	86 e4       	ldi	r24, 0x46	; 70
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	0e 94 cc 03 	call	0x798	; 0x798 <motorControl>
					intersectnum++;
     520:	8f ef       	ldi	r24, 0xFF	; 255
     522:	e8 1a       	sub	r14, r24
     524:	f8 0a       	sbc	r15, r24
					print("R");
     526:	81 e5       	ldi	r24, 0x51	; 81
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	0e 94 ee 10 	call	0x21dc	; 0x21dc <print>
					break;
     52e:	ce cf       	rjmp	.-100    	; 0x4cc <driveRoute+0x22>
					case 2:
					motorControl(70, 'L', 0.30);
     530:	2a e9       	ldi	r18, 0x9A	; 154
     532:	39 e9       	ldi	r19, 0x99	; 153
     534:	49 e9       	ldi	r20, 0x99	; 153
     536:	5e e3       	ldi	r21, 0x3E	; 62
     538:	6c e4       	ldi	r22, 0x4C	; 76
     53a:	86 e4       	ldi	r24, 0x46	; 70
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	0e 94 cc 03 	call	0x798	; 0x798 <motorControl>
					intersectnum++;
     542:	8f ef       	ldi	r24, 0xFF	; 255
     544:	e8 1a       	sub	r14, r24
     546:	f8 0a       	sbc	r15, r24
					print("R");
     548:	81 e5       	ldi	r24, 0x51	; 81
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	0e 94 ee 10 	call	0x21dc	; 0x21dc <print>
					break;
     550:	bd cf       	rjmp	.-134    	; 0x4cc <driveRoute+0x22>
					case 3:
					motorControl(60, 'F', 0.89);
     552:	2a e0       	ldi	r18, 0x0A	; 10
     554:	37 ed       	ldi	r19, 0xD7	; 215
     556:	43 e6       	ldi	r20, 0x63	; 99
     558:	5f e3       	ldi	r21, 0x3F	; 63
     55a:	66 e4       	ldi	r22, 0x46	; 70
     55c:	8c e3       	ldi	r24, 0x3C	; 60
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	0e 94 cc 03 	call	0x798	; 0x798 <motorControl>
					intersectnum++;
     564:	8f ef       	ldi	r24, 0xFF	; 255
     566:	e8 1a       	sub	r14, r24
     568:	f8 0a       	sbc	r15, r24
					print("F");
     56a:	85 e5       	ldi	r24, 0x55	; 85
     56c:	91 e0       	ldi	r25, 0x01	; 1
     56e:	0e 94 ee 10 	call	0x21dc	; 0x21dc <print>
					break;
     572:	ac cf       	rjmp	.-168    	; 0x4cc <driveRoute+0x22>
					case 5:
					motorControl(0, 'F', 0.89);
     574:	2a e0       	ldi	r18, 0x0A	; 10
     576:	37 ed       	ldi	r19, 0xD7	; 215
     578:	43 e6       	ldi	r20, 0x63	; 99
     57a:	5f e3       	ldi	r21, 0x3F	; 63
     57c:	66 e4       	ldi	r22, 0x46	; 70
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	0e 94 cc 03 	call	0x798	; 0x798 <motorControl>
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
     586:	5f 9a       	sbi	0x0b, 7	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     588:	57 9a       	sbi	0x0a, 7	; 10
				}
				//clear();
			}
		}
	}while(endOfRoute !=  1);
	motorControl(0, 'F', 0.89);
     58a:	2a e0       	ldi	r18, 0x0A	; 10
     58c:	37 ed       	ldi	r19, 0xD7	; 215
     58e:	43 e6       	ldi	r20, 0x63	; 99
     590:	5f e3       	ldi	r21, 0x3F	; 63
     592:	66 e4       	ldi	r22, 0x46	; 70
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	0e 94 cc 03 	call	0x798	; 0x798 <motorControl>

     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	1f 91       	pop	r17
     5a2:	0f 91       	pop	r16
     5a4:	ff 90       	pop	r15
     5a6:	ef 90       	pop	r14
     5a8:	08 95       	ret

000005aa <fetchOrder2>:
	routes[4][1] = 2;
	routes[4][2] = 3;
	routes[4][3] = 5;
	
}
void fetchOrder2(int OrderX[], int orderY[], int route[4][4]){
     5aa:	af 92       	push	r10
     5ac:	bf 92       	push	r11
     5ae:	cf 92       	push	r12
     5b0:	df 92       	push	r13
     5b2:	ef 92       	push	r14
     5b4:	ff 92       	push	r15
     5b6:	0f 93       	push	r16
     5b8:	1f 93       	push	r17
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	6c 01       	movw	r12, r24
     5c0:	5b 01       	movw	r10, r22
     5c2:	ca 01       	movw	r24, r20
	driveRoute(route, 0);
     5c4:	60 e0       	ldi	r22, 0x00	; 0
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	0e 94 55 02 	call	0x4aa	; 0x4aa <driveRoute>
	print("DoneD!");
     5cc:	87 e5       	ldi	r24, 0x57	; 87
     5ce:	91 e0       	ldi	r25, 0x01	; 1
     5d0:	0e 94 ee 10 	call	0x21dc	; 0x21dc <print>
// 	while(checkAfslag() == 0){
// 		followLine();
// 		print("Here!");
// 		
// 	}
	for(int orderNum = 0; orderNum < sizeOfOrder; orderNum++){
     5d4:	e1 2c       	mov	r14, r1
     5d6:	f1 2c       	mov	r15, r1
		if(checkAfslag() != 0){
     5d8:	0e 94 d7 08 	call	0x11ae	; 0x11ae <checkAfslag>
     5dc:	89 2b       	or	r24, r25
     5de:	09 f4       	brne	.+2      	; 0x5e2 <fetchOrder2+0x38>
     5e0:	88 c0       	rjmp	.+272    	; 0x6f2 <fetchOrder2+0x148>
			lcd_goto_xy(0,1);
     5e2:	61 e0       	ldi	r22, 0x01	; 1
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	0e 94 66 11 	call	0x22cc	; 0x22cc <lcd_goto_xy>
			print_long(orderNum);
     5ea:	b7 01       	movw	r22, r14
     5ec:	0f 2c       	mov	r0, r15
     5ee:	00 0c       	add	r0, r0
     5f0:	88 0b       	sbc	r24, r24
     5f2:	99 0b       	sbc	r25, r25
     5f4:	0e 94 43 11 	call	0x2286	; 0x2286 <print_long>
			while((OrderX[orderNum] != positionCurrentX) && (orderY[orderNum] != positionCurrentY)){
     5f8:	c7 01       	movw	r24, r14
     5fa:	88 0f       	add	r24, r24
     5fc:	99 1f       	adc	r25, r25
     5fe:	86 01       	movw	r16, r12
     600:	08 0f       	add	r16, r24
     602:	19 1f       	adc	r17, r25
     604:	f8 01       	movw	r30, r16
     606:	40 81       	ld	r20, Z
     608:	51 81       	ldd	r21, Z+1	; 0x01
     60a:	20 91 3e 02 	lds	r18, 0x023E	; 0x80023e <positionCurrentX>
     60e:	30 91 3f 02 	lds	r19, 0x023F	; 0x80023f <positionCurrentX+0x1>
     612:	42 17       	cp	r20, r18
     614:	53 07       	cpc	r21, r19
     616:	09 f4       	brne	.+2      	; 0x61a <fetchOrder2+0x70>
     618:	6c c0       	rjmp	.+216    	; 0x6f2 <fetchOrder2+0x148>
     61a:	e5 01       	movw	r28, r10
     61c:	c8 0f       	add	r28, r24
     61e:	d9 1f       	adc	r29, r25
     620:	28 81       	ld	r18, Y
     622:	39 81       	ldd	r19, Y+1	; 0x01
     624:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <positionCurrentY>
     628:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <positionCurrentY+0x1>
     62c:	28 17       	cp	r18, r24
     62e:	39 07       	cpc	r19, r25
     630:	09 f4       	brne	.+2      	; 0x634 <fetchOrder2+0x8a>
     632:	5f c0       	rjmp	.+190    	; 0x6f2 <fetchOrder2+0x148>
				if(checkAfslag() != 0){
     634:	0e 94 d7 08 	call	0x11ae	; 0x11ae <checkAfslag>
     638:	89 2b       	or	r24, r25
     63a:	e1 f1       	breq	.+120    	; 0x6b4 <fetchOrder2+0x10a>
					if( OrderX[orderNum] == positionCurrentX){
     63c:	f8 01       	movw	r30, r16
     63e:	60 81       	ld	r22, Z
     640:	71 81       	ldd	r23, Z+1	; 0x01
     642:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <positionCurrentX>
     646:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <positionCurrentX+0x1>
     64a:	68 17       	cp	r22, r24
     64c:	79 07       	cpc	r23, r25
     64e:	29 f4       	brne	.+10     	; 0x65a <fetchOrder2+0xb0>
						getInstructionsX(gridZero, OrderX[orderNum]);
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	0e 94 1f 02 	call	0x43e	; 0x43e <getInstructionsX>
     658:	06 c0       	rjmp	.+12     	; 0x666 <fetchOrder2+0xbc>
					}
					else{
						getInstructionsY(gridZero, orderY[orderNum]);
     65a:	68 81       	ld	r22, Y
     65c:	79 81       	ldd	r23, Y+1	; 0x01
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	0e 94 3a 02 	call	0x474	; 0x474 <getInstructionsY>
					}
					if((OrderX[orderNum] == positionCurrentX) && (orderY[orderNum] == positionCurrentY)){
     666:	f8 01       	movw	r30, r16
     668:	20 81       	ld	r18, Z
     66a:	31 81       	ldd	r19, Z+1	; 0x01
     66c:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <positionCurrentX>
     670:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <positionCurrentX+0x1>
     674:	28 17       	cp	r18, r24
     676:	39 07       	cpc	r19, r25
     678:	e9 f4       	brne	.+58     	; 0x6b4 <fetchOrder2+0x10a>
     67a:	28 81       	ld	r18, Y
     67c:	39 81       	ldd	r19, Y+1	; 0x01
     67e:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <positionCurrentY>
     682:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <positionCurrentY+0x1>
     686:	28 17       	cp	r18, r24
     688:	39 07       	cpc	r19, r25
     68a:	a1 f4       	brne	.+40     	; 0x6b4 <fetchOrder2+0x10a>
						motorControl(0, 'F', 0.89);
     68c:	2a e0       	ldi	r18, 0x0A	; 10
     68e:	37 ed       	ldi	r19, 0xD7	; 215
     690:	43 e6       	ldi	r20, 0x63	; 99
     692:	5f e3       	ldi	r21, 0x3F	; 63
     694:	66 e4       	ldi	r22, 0x46	; 70
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	0e 94 cc 03 	call	0x798	; 0x798 <motorControl>
						play_from_program_space(PSTR(">f32>>a32"));
     69e:	86 e8       	ldi	r24, 0x86	; 134
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <play_from_program_space>
						orderNum++;
     6a6:	ff ef       	ldi	r31, 0xFF	; 255
     6a8:	ef 1a       	sub	r14, r31
     6aa:	ff 0a       	sbc	r15, r31
     6ac:	88 eb       	ldi	r24, 0xB8	; 184
     6ae:	9b e0       	ldi	r25, 0x0B	; 11
     6b0:	0e 94 5d 13 	call	0x26ba	; 0x26ba <delay_ms>
						delay(3000);
					}
				}
				followLine();
     6b4:	0e 94 91 08 	call	0x1122	; 0x1122 <followLine>
// 	}
	for(int orderNum = 0; orderNum < sizeOfOrder; orderNum++){
		if(checkAfslag() != 0){
			lcd_goto_xy(0,1);
			print_long(orderNum);
			while((OrderX[orderNum] != positionCurrentX) && (orderY[orderNum] != positionCurrentY)){
     6b8:	c7 01       	movw	r24, r14
     6ba:	88 0f       	add	r24, r24
     6bc:	99 1f       	adc	r25, r25
     6be:	86 01       	movw	r16, r12
     6c0:	08 0f       	add	r16, r24
     6c2:	19 1f       	adc	r17, r25
     6c4:	f8 01       	movw	r30, r16
     6c6:	40 81       	ld	r20, Z
     6c8:	51 81       	ldd	r21, Z+1	; 0x01
     6ca:	20 91 3e 02 	lds	r18, 0x023E	; 0x80023e <positionCurrentX>
     6ce:	30 91 3f 02 	lds	r19, 0x023F	; 0x80023f <positionCurrentX+0x1>
     6d2:	42 17       	cp	r20, r18
     6d4:	53 07       	cpc	r21, r19
     6d6:	69 f0       	breq	.+26     	; 0x6f2 <fetchOrder2+0x148>
     6d8:	e5 01       	movw	r28, r10
     6da:	c8 0f       	add	r28, r24
     6dc:	d9 1f       	adc	r29, r25
     6de:	28 81       	ld	r18, Y
     6e0:	39 81       	ldd	r19, Y+1	; 0x01
     6e2:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <positionCurrentY>
     6e6:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <positionCurrentY+0x1>
     6ea:	28 17       	cp	r18, r24
     6ec:	39 07       	cpc	r19, r25
     6ee:	09 f0       	breq	.+2      	; 0x6f2 <fetchOrder2+0x148>
     6f0:	a1 cf       	rjmp	.-190    	; 0x634 <fetchOrder2+0x8a>
// 	while(checkAfslag() == 0){
// 		followLine();
// 		print("Here!");
// 		
// 	}
	for(int orderNum = 0; orderNum < sizeOfOrder; orderNum++){
     6f2:	ff ef       	ldi	r31, 0xFF	; 255
     6f4:	ef 1a       	sub	r14, r31
     6f6:	ff 0a       	sbc	r15, r31
     6f8:	84 e0       	ldi	r24, 0x04	; 4
     6fa:	e8 16       	cp	r14, r24
     6fc:	f1 04       	cpc	r15, r1
     6fe:	0c f4       	brge	.+2      	; 0x702 <fetchOrder2+0x158>
     700:	6b cf       	rjmp	.-298    	; 0x5d8 <fetchOrder2+0x2e>
				followLine();
			}
		}
		
	}
}
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	1f 91       	pop	r17
     708:	0f 91       	pop	r16
     70a:	ff 90       	pop	r15
     70c:	ef 90       	pop	r14
     70e:	df 90       	pop	r13
     710:	cf 90       	pop	r12
     712:	bf 90       	pop	r11
     714:	af 90       	pop	r10
     716:	08 95       	ret

00000718 <main>:
#include <pololu/3pi.h>
#include <avr/pgmspace.h>
#include <avr/io.h>
#include <avr/interrupt.h>

int main(){
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
     71c:	cd b7       	in	r28, 0x3d	; 61
     71e:	de b7       	in	r29, 0x3e	; 62
     720:	e0 97       	sbiw	r28, 0x30	; 48
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	f8 94       	cli
     726:	de bf       	out	0x3e, r29	; 62
     728:	0f be       	out	0x3f, r0	; 63
     72a:	cd bf       	out	0x3d, r28	; 61
	initialize();
     72c:	0e 94 19 08 	call	0x1032	; 0x1032 <initialize>
	int routes[4][4];
	readGrid(routes);
     730:	ce 01       	movw	r24, r28
     732:	01 96       	adiw	r24, 0x01	; 1
     734:	0e 94 87 01 	call	0x30e	; 0x30e <readGrid>
	int orderX[sizeOfOrder] ={0, 3, 2, 4};
     738:	88 e0       	ldi	r24, 0x08	; 8
     73a:	e4 e2       	ldi	r30, 0x24	; 36
     73c:	f1 e0       	ldi	r31, 0x01	; 1
     73e:	de 01       	movw	r26, r28
     740:	91 96       	adiw	r26, 0x21	; 33
     742:	01 90       	ld	r0, Z+
     744:	0d 92       	st	X+, r0
     746:	8a 95       	dec	r24
     748:	e1 f7       	brne	.-8      	; 0x742 <main+0x2a>
	int orderY[sizeOfOrder] ={4, 2, 3, 0};
     74a:	88 e0       	ldi	r24, 0x08	; 8
     74c:	ec e2       	ldi	r30, 0x2C	; 44
     74e:	f1 e0       	ldi	r31, 0x01	; 1
     750:	de 01       	movw	r26, r28
     752:	99 96       	adiw	r26, 0x29	; 41
     754:	01 90       	ld	r0, Z+
     756:	0d 92       	st	X+, r0
     758:	8a 95       	dec	r24
     75a:	e1 f7       	brne	.-8      	; 0x754 <main+0x3c>
	//wirMain(orderX, orderY);
	sortOrder(orderX, orderY);
     75c:	be 01       	movw	r22, r28
     75e:	67 5d       	subi	r22, 0xD7	; 215
     760:	7f 4f       	sbci	r23, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	81 96       	adiw	r24, 0x21	; 33
     766:	0e 94 89 00 	call	0x112	; 0x112 <sortOrder>
	fetchOrder2(orderX, orderY, routes);
     76a:	ae 01       	movw	r20, r28
     76c:	4f 5f       	subi	r20, 0xFF	; 255
     76e:	5f 4f       	sbci	r21, 0xFF	; 255
     770:	be 01       	movw	r22, r28
     772:	67 5d       	subi	r22, 0xD7	; 215
     774:	7f 4f       	sbci	r23, 0xFF	; 255
     776:	ce 01       	movw	r24, r28
     778:	81 96       	adiw	r24, 0x21	; 33
     77a:	0e 94 d5 02 	call	0x5aa	; 0x5aa <fetchOrder2>
	clear();
     77e:	0e 94 df 10 	call	0x21be	; 0x21be <clear>
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	e0 96       	adiw	r28, 0x30	; 48
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	f8 94       	cli
     78c:	de bf       	out	0x3e, r29	; 62
     78e:	0f be       	out	0x3f, r0	; 63
     790:	cd bf       	out	0x3d, r28	; 61
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	08 95       	ret

00000798 <motorControl>:

int speedCurrent = 0;			//Defining the current speeds.
int speedCurrentRight = 0;
int speedCurrentLeft = 0;

void motorControl(int speed, char direction, float aggressionFactor){		//This function is an upgrade over the existing motor control function written by Pololu. This function moves the robot with an entered speed and acceleration time in a desired direction.
     798:	2f 92       	push	r2
     79a:	3f 92       	push	r3
     79c:	4f 92       	push	r4
     79e:	5f 92       	push	r5
     7a0:	6f 92       	push	r6
     7a2:	7f 92       	push	r7
     7a4:	8f 92       	push	r8
     7a6:	9f 92       	push	r9
     7a8:	af 92       	push	r10
     7aa:	bf 92       	push	r11
     7ac:	cf 92       	push	r12
     7ae:	df 92       	push	r13
     7b0:	ef 92       	push	r14
     7b2:	ff 92       	push	r15
     7b4:	0f 93       	push	r16
     7b6:	1f 93       	push	r17
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	cd b7       	in	r28, 0x3d	; 61
     7be:	de b7       	in	r29, 0x3e	; 62
     7c0:	66 97       	sbiw	r28, 0x16	; 22
     7c2:	0f b6       	in	r0, 0x3f	; 63
     7c4:	f8 94       	cli
     7c6:	de bf       	out	0x3e, r29	; 62
     7c8:	0f be       	out	0x3f, r0	; 63
     7ca:	cd bf       	out	0x3d, r28	; 61
     7cc:	1c 01       	movw	r2, r24
     7ce:	29 83       	std	Y+1, r18	; 0x01
     7d0:	3a 83       	std	Y+2, r19	; 0x02
     7d2:	4b 83       	std	Y+3, r20	; 0x03
     7d4:	5c 83       	std	Y+4, r21	; 0x04
	int setSpeedRight = 0;
	int setSpeedLeft = 0;
	
	//directions direction;

	switch (direction){														//This switch case switches between the directions based on the user input.
     7d6:	66 34       	cpi	r22, 0x46	; 70
     7d8:	61 f0       	breq	.+24     	; 0x7f2 <motorControl+0x5a>
     7da:	20 f4       	brcc	.+8      	; 0x7e4 <motorControl+0x4c>
     7dc:	62 34       	cpi	r22, 0x42	; 66
     7de:	09 f4       	brne	.+2      	; 0x7e2 <motorControl+0x4a>
     7e0:	95 c0       	rjmp	.+298    	; 0x90c <__stack+0xd>
     7e2:	08 c4       	rjmp	.+2064   	; 0xff4 <__stack+0x6f5>
     7e4:	6c 34       	cpi	r22, 0x4C	; 76
     7e6:	09 f4       	brne	.+2      	; 0x7ea <motorControl+0x52>
     7e8:	a9 c2       	rjmp	.+1362   	; 0xd3c <__stack+0x43d>
     7ea:	62 35       	cpi	r22, 0x52	; 82
     7ec:	09 f4       	brne	.+2      	; 0x7f0 <motorControl+0x58>
     7ee:	1b c1       	rjmp	.+566    	; 0xa26 <__stack+0x127>
     7f0:	01 c4       	rjmp	.+2050   	; 0xff4 <__stack+0x6f5>
		case 'F':															//This case handles the forward movement of the 3PI robot.
		
		setSpeed = speed - speedCurrent;
     7f2:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speedCurrent>
     7f6:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speedCurrent+0x1>
     7fa:	91 01       	movw	r18, r2
     7fc:	28 1b       	sub	r18, r24
     7fe:	39 0b       	sbc	r19, r25
     800:	45 e6       	ldi	r20, 0x65	; 101
     802:	50 e0       	ldi	r21, 0x00	; 0
     804:	5a 87       	std	Y+10, r21	; 0x0a
     806:	49 87       	std	Y+9, r20	; 0x09
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){	//This for loop increases the speed of the current speed to the desired speed with a total of a 100 increments.
     808:	41 2c       	mov	r4, r1
     80a:	51 2c       	mov	r5, r1
     80c:	32 01       	movw	r6, r4
			timerStart = get_ms();
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2*M_PI ) ) * sin ( 2* M_PI * accelerationCounter ) ) );		//This function transfers the input speed to a segmented speed increase based on the swept sinusoidal curve.
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     80e:	03 2e       	mov	r0, r19
     810:	00 0c       	add	r0, r0
     812:	44 0b       	sbc	r20, r20
     814:	55 0b       	sbc	r21, r21
     816:	2d 83       	std	Y+5, r18	; 0x05
     818:	3e 83       	std	Y+6, r19	; 0x06
     81a:	4f 83       	std	Y+7, r20	; 0x07
     81c:	58 87       	std	Y+8, r21	; 0x08
		case 'F':															//This case handles the forward movement of the 3PI robot.
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){	//This for loop increases the speed of the current speed to the desired speed with a total of a 100 increments.
			timerStart = get_ms();
     81e:	0e 94 95 13 	call	0x272a	; 0x272a <get_ms>
     822:	8b 01       	movw	r16, r22
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2*M_PI ) ) * sin ( 2* M_PI * accelerationCounter ) ) );		//This function transfers the input speed to a segmented speed increase based on the swept sinusoidal curve.
     824:	2b ed       	ldi	r18, 0xDB	; 219
     826:	3f e0       	ldi	r19, 0x0F	; 15
     828:	49 ec       	ldi	r20, 0xC9	; 201
     82a:	50 e4       	ldi	r21, 0x40	; 64
     82c:	c3 01       	movw	r24, r6
     82e:	b2 01       	movw	r22, r4
     830:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
     834:	0e 94 0f 0b 	call	0x161e	; 0x161e <sin>
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     838:	23 e8       	ldi	r18, 0x83	; 131
     83a:	39 ef       	ldi	r19, 0xF9	; 249
     83c:	42 e2       	ldi	r20, 0x22	; 34
     83e:	5e e3       	ldi	r21, 0x3E	; 62
     840:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
     844:	9b 01       	movw	r18, r22
     846:	ac 01       	movw	r20, r24
     848:	c3 01       	movw	r24, r6
     84a:	b2 01       	movw	r22, r4
     84c:	0e 94 43 09 	call	0x1286	; 0x1286 <__subsf3>
     850:	4b 01       	movw	r8, r22
     852:	5c 01       	movw	r10, r24
     854:	6d 81       	ldd	r22, Y+5	; 0x05
     856:	7e 81       	ldd	r23, Y+6	; 0x06
     858:	8f 81       	ldd	r24, Y+7	; 0x07
     85a:	98 85       	ldd	r25, Y+8	; 0x08
     85c:	0e 94 ed 09 	call	0x13da	; 0x13da <__floatsisf>
     860:	9b 01       	movw	r18, r22
     862:	ac 01       	movw	r20, r24
     864:	c5 01       	movw	r24, r10
     866:	b4 01       	movw	r22, r8
     868:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
     86c:	4b 01       	movw	r8, r22
     86e:	5c 01       	movw	r10, r24
     870:	60 91 ff 01 	lds	r22, 0x01FF	; 0x8001ff <speedCurrent>
     874:	70 91 00 02 	lds	r23, 0x0200	; 0x800200 <speedCurrent+0x1>
     878:	07 2e       	mov	r0, r23
     87a:	00 0c       	add	r0, r0
     87c:	88 0b       	sbc	r24, r24
     87e:	99 0b       	sbc	r25, r25
     880:	0e 94 ed 09 	call	0x13da	; 0x13da <__floatsisf>
     884:	9b 01       	movw	r18, r22
     886:	ac 01       	movw	r20, r24
     888:	c5 01       	movw	r24, r10
     88a:	b4 01       	movw	r22, r8
     88c:	0e 94 44 09 	call	0x1288	; 0x1288 <__addsf3>
     890:	0e 94 b5 09 	call	0x136a	; 0x136a <__fixsfsi>
     894:	dc 01       	movw	r26, r24
     896:	cb 01       	movw	r24, r22
     898:	bc 01       	movw	r22, r24
     89a:	0e 94 1c 12 	call	0x2438	; 0x2438 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {											//This while loop temporarily freezes the system to make sure that the increments are spaced properly to facilitate a fluent and consequent increase in speed.
     89e:	48 01       	movw	r8, r16
     8a0:	11 0f       	add	r17, r17
     8a2:	aa 08       	sbc	r10, r10
     8a4:	bb 08       	sbc	r11, r11
     8a6:	0e 94 95 13 	call	0x272a	; 0x272a <get_ms>
     8aa:	68 19       	sub	r22, r8
     8ac:	79 09       	sbc	r23, r9
     8ae:	8a 09       	sbc	r24, r10
     8b0:	9b 09       	sbc	r25, r11
     8b2:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__floatunsisf>
     8b6:	6b 01       	movw	r12, r22
     8b8:	7c 01       	movw	r14, r24
     8ba:	20 e0       	ldi	r18, 0x00	; 0
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	40 e2       	ldi	r20, 0x20	; 32
     8c0:	51 e4       	ldi	r21, 0x41	; 65
     8c2:	69 81       	ldd	r22, Y+1	; 0x01
     8c4:	7a 81       	ldd	r23, Y+2	; 0x02
     8c6:	8b 81       	ldd	r24, Y+3	; 0x03
     8c8:	9c 81       	ldd	r25, Y+4	; 0x04
     8ca:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
     8ce:	9b 01       	movw	r18, r22
     8d0:	ac 01       	movw	r20, r24
     8d2:	c7 01       	movw	r24, r14
     8d4:	b6 01       	movw	r22, r12
     8d6:	0e 94 b0 09 	call	0x1360	; 0x1360 <__cmpsf2>
     8da:	88 23       	and	r24, r24
     8dc:	24 f3       	brlt	.-56     	; 0x8a6 <motorControl+0x10e>
	switch (direction){														//This switch case switches between the directions based on the user input.
		case 'F':															//This case handles the forward movement of the 3PI robot.
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){	//This for loop increases the speed of the current speed to the desired speed with a total of a 100 increments.
     8de:	2a e0       	ldi	r18, 0x0A	; 10
     8e0:	37 ed       	ldi	r19, 0xD7	; 215
     8e2:	43 e2       	ldi	r20, 0x23	; 35
     8e4:	5c e3       	ldi	r21, 0x3C	; 60
     8e6:	c3 01       	movw	r24, r6
     8e8:	b2 01       	movw	r22, r4
     8ea:	0e 94 44 09 	call	0x1288	; 0x1288 <__addsf3>
     8ee:	2b 01       	movw	r4, r22
     8f0:	3c 01       	movw	r6, r24
     8f2:	a9 85       	ldd	r26, Y+9	; 0x09
     8f4:	ba 85       	ldd	r27, Y+10	; 0x0a
     8f6:	11 97       	sbiw	r26, 0x01	; 1
     8f8:	ba 87       	std	Y+10, r27	; 0x0a
     8fa:	a9 87       	std	Y+9, r26	; 0x09
     8fc:	ab 2b       	or	r26, r27
     8fe:	09 f0       	breq	.+2      	; 0x902 <__stack+0x3>
     900:	8e cf       	rjmp	.-228    	; 0x81e <motorControl+0x86>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {											//This while loop temporarily freezes the system to make sure that the increments are spaced properly to facilitate a fluent and consequent increase in speed.
				//Change the aggression factor to manipulate the acceleration time. A shorter time increases the overall jerk of the acceleration.
			}
		}
		speedCurrent = speed;
     902:	30 92 00 02 	sts	0x0200, r3	; 0x800200 <speedCurrent+0x1>
     906:	20 92 ff 01 	sts	0x01FF, r2	; 0x8001ff <speedCurrent>
		break;
     90a:	7a c3       	rjmp	.+1780   	; 0x1000 <__stack+0x701>
		
		case 'B':		//This case handles the backward movement of the robot. While the robot does not require this function in the standard routine, it is desired when operating the robot in manual mode.
		
		setSpeed = speed - speedCurrent;
     90c:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speedCurrent>
     910:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speedCurrent+0x1>
     914:	91 01       	movw	r18, r2
     916:	28 1b       	sub	r18, r24
     918:	39 0b       	sbc	r19, r25
     91a:	45 e6       	ldi	r20, 0x65	; 101
     91c:	50 e0       	ldi	r21, 0x00	; 0
     91e:	5a 87       	std	Y+10, r21	; 0x0a
     920:	49 87       	std	Y+9, r20	; 0x09
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     922:	41 2c       	mov	r4, r1
     924:	51 2c       	mov	r5, r1
     926:	32 01       	movw	r6, r4
			timerStart = get_ms();
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     928:	03 2e       	mov	r0, r19
     92a:	00 0c       	add	r0, r0
     92c:	44 0b       	sbc	r20, r20
     92e:	55 0b       	sbc	r21, r21
     930:	2d 83       	std	Y+5, r18	; 0x05
     932:	3e 83       	std	Y+6, r19	; 0x06
     934:	4f 83       	std	Y+7, r20	; 0x07
     936:	58 87       	std	Y+8, r21	; 0x08
		case 'B':		//This case handles the backward movement of the robot. While the robot does not require this function in the standard routine, it is desired when operating the robot in manual mode.
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     938:	0e 94 95 13 	call	0x272a	; 0x272a <get_ms>
     93c:	8b 01       	movw	r16, r22
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) );
     93e:	2b ed       	ldi	r18, 0xDB	; 219
     940:	3f e0       	ldi	r19, 0x0F	; 15
     942:	49 ec       	ldi	r20, 0xC9	; 201
     944:	50 e4       	ldi	r21, 0x40	; 64
     946:	c3 01       	movw	r24, r6
     948:	b2 01       	movw	r22, r4
     94a:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
     94e:	0e 94 0f 0b 	call	0x161e	; 0x161e <sin>
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     952:	23 e8       	ldi	r18, 0x83	; 131
     954:	39 ef       	ldi	r19, 0xF9	; 249
     956:	42 e2       	ldi	r20, 0x22	; 34
     958:	5e e3       	ldi	r21, 0x3E	; 62
     95a:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
     95e:	9b 01       	movw	r18, r22
     960:	ac 01       	movw	r20, r24
     962:	c3 01       	movw	r24, r6
     964:	b2 01       	movw	r22, r4
     966:	0e 94 43 09 	call	0x1286	; 0x1286 <__subsf3>
     96a:	4b 01       	movw	r8, r22
     96c:	5c 01       	movw	r10, r24
     96e:	6d 81       	ldd	r22, Y+5	; 0x05
     970:	7e 81       	ldd	r23, Y+6	; 0x06
     972:	8f 81       	ldd	r24, Y+7	; 0x07
     974:	98 85       	ldd	r25, Y+8	; 0x08
     976:	0e 94 ed 09 	call	0x13da	; 0x13da <__floatsisf>
     97a:	9b 01       	movw	r18, r22
     97c:	ac 01       	movw	r20, r24
     97e:	c5 01       	movw	r24, r10
     980:	b4 01       	movw	r22, r8
     982:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
     986:	4b 01       	movw	r8, r22
     988:	5c 01       	movw	r10, r24
     98a:	60 91 ff 01 	lds	r22, 0x01FF	; 0x8001ff <speedCurrent>
     98e:	70 91 00 02 	lds	r23, 0x0200	; 0x800200 <speedCurrent+0x1>
     992:	07 2e       	mov	r0, r23
     994:	00 0c       	add	r0, r0
     996:	88 0b       	sbc	r24, r24
     998:	99 0b       	sbc	r25, r25
     99a:	0e 94 ed 09 	call	0x13da	; 0x13da <__floatsisf>
     99e:	9b 01       	movw	r18, r22
     9a0:	ac 01       	movw	r20, r24
     9a2:	c5 01       	movw	r24, r10
     9a4:	b4 01       	movw	r22, r8
     9a6:	0e 94 44 09 	call	0x1288	; 0x1288 <__addsf3>
     9aa:	0e 94 b5 09 	call	0x136a	; 0x136a <__fixsfsi>
     9ae:	dc 01       	movw	r26, r24
     9b0:	cb 01       	movw	r24, r22
     9b2:	bc 01       	movw	r22, r24
     9b4:	0e 94 1c 12 	call	0x2438	; 0x2438 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     9b8:	48 01       	movw	r8, r16
     9ba:	11 0f       	add	r17, r17
     9bc:	aa 08       	sbc	r10, r10
     9be:	bb 08       	sbc	r11, r11
     9c0:	0e 94 95 13 	call	0x272a	; 0x272a <get_ms>
     9c4:	68 19       	sub	r22, r8
     9c6:	79 09       	sbc	r23, r9
     9c8:	8a 09       	sbc	r24, r10
     9ca:	9b 09       	sbc	r25, r11
     9cc:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__floatunsisf>
     9d0:	6b 01       	movw	r12, r22
     9d2:	7c 01       	movw	r14, r24
     9d4:	20 e0       	ldi	r18, 0x00	; 0
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	40 e2       	ldi	r20, 0x20	; 32
     9da:	51 e4       	ldi	r21, 0x41	; 65
     9dc:	69 81       	ldd	r22, Y+1	; 0x01
     9de:	7a 81       	ldd	r23, Y+2	; 0x02
     9e0:	8b 81       	ldd	r24, Y+3	; 0x03
     9e2:	9c 81       	ldd	r25, Y+4	; 0x04
     9e4:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
     9e8:	9b 01       	movw	r18, r22
     9ea:	ac 01       	movw	r20, r24
     9ec:	c7 01       	movw	r24, r14
     9ee:	b6 01       	movw	r22, r12
     9f0:	0e 94 b0 09 	call	0x1360	; 0x1360 <__cmpsf2>
     9f4:	88 23       	and	r24, r24
     9f6:	24 f3       	brlt	.-56     	; 0x9c0 <__stack+0xc1>
		
		case 'B':		//This case handles the backward movement of the robot. While the robot does not require this function in the standard routine, it is desired when operating the robot in manual mode.
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     9f8:	2a e0       	ldi	r18, 0x0A	; 10
     9fa:	37 ed       	ldi	r19, 0xD7	; 215
     9fc:	43 e2       	ldi	r20, 0x23	; 35
     9fe:	5c e3       	ldi	r21, 0x3C	; 60
     a00:	c3 01       	movw	r24, r6
     a02:	b2 01       	movw	r22, r4
     a04:	0e 94 44 09 	call	0x1288	; 0x1288 <__addsf3>
     a08:	2b 01       	movw	r4, r22
     a0a:	3c 01       	movw	r6, r24
     a0c:	a9 85       	ldd	r26, Y+9	; 0x09
     a0e:	ba 85       	ldd	r27, Y+10	; 0x0a
     a10:	11 97       	sbiw	r26, 0x01	; 1
     a12:	ba 87       	std	Y+10, r27	; 0x0a
     a14:	a9 87       	std	Y+9, r26	; 0x09
     a16:	ab 2b       	or	r26, r27
     a18:	09 f0       	breq	.+2      	; 0xa1c <__stack+0x11d>
     a1a:	8e cf       	rjmp	.-228    	; 0x938 <__stack+0x39>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrent = speed;
     a1c:	30 92 00 02 	sts	0x0200, r3	; 0x800200 <speedCurrent+0x1>
     a20:	20 92 ff 01 	sts	0x01FF, r2	; 0x8001ff <speedCurrent>
		break;
     a24:	ed c2       	rjmp	.+1498   	; 0x1000 <__stack+0x701>

		case 'R':		//This case handles the rotation of the robot 90 degrees to the right. The robot accelerates and decelerates with the same method used with forward and backward movement.
		
		setSpeedRight = speed + speedCurrentRight;
     a26:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <speedCurrentRight>
     a2a:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <speedCurrentRight+0x1>
     a2e:	82 0d       	add	r24, r2
     a30:	93 1d       	adc	r25, r3
		setSpeedLeft = speed - speedCurrentLeft;
     a32:	20 91 fb 01 	lds	r18, 0x01FB	; 0x8001fb <speedCurrentLeft>
     a36:	30 91 fc 01 	lds	r19, 0x01FC	; 0x8001fc <speedCurrentLeft+0x1>
     a3a:	a1 01       	movw	r20, r2
     a3c:	42 1b       	sub	r20, r18
     a3e:	53 0b       	sbc	r21, r19
     a40:	9a 01       	movw	r18, r20
     a42:	05 e6       	ldi	r16, 0x65	; 101
     a44:	10 e0       	ldi	r17, 0x00	; 0
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     a46:	1d 82       	std	Y+5, r1	; 0x05
     a48:	1e 82       	std	Y+6, r1	; 0x06
     a4a:	1f 82       	std	Y+7, r1	; 0x07
     a4c:	18 86       	std	Y+8, r1	; 0x08
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			motorLeftSpeed = speedCurrent + (speedCurrentLeft + (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     a4e:	ac 01       	movw	r20, r24
     a50:	99 0f       	add	r25, r25
     a52:	66 0b       	sbc	r22, r22
     a54:	77 0b       	sbc	r23, r23
     a56:	4d 87       	std	Y+13, r20	; 0x0d
     a58:	5e 87       	std	Y+14, r21	; 0x0e
     a5a:	6f 87       	std	Y+15, r22	; 0x0f
     a5c:	78 8b       	std	Y+16, r23	; 0x10
     a5e:	b9 01       	movw	r22, r18
     a60:	33 0f       	add	r19, r19
     a62:	88 0b       	sbc	r24, r24
     a64:	99 0b       	sbc	r25, r25
     a66:	69 8b       	std	Y+17, r22	; 0x11
     a68:	7a 8b       	std	Y+18, r23	; 0x12
     a6a:	8b 8b       	std	Y+19, r24	; 0x13
     a6c:	9c 8b       	std	Y+20, r25	; 0x14
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     a6e:	0e 94 95 13 	call	0x272a	; 0x272a <get_ms>
     a72:	7e 8b       	std	Y+22, r23	; 0x16
     a74:	6d 8b       	std	Y+21, r22	; 0x15
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
     a76:	60 91 ff 01 	lds	r22, 0x01FF	; 0x8001ff <speedCurrent>
     a7a:	70 91 00 02 	lds	r23, 0x0200	; 0x800200 <speedCurrent+0x1>
     a7e:	07 2e       	mov	r0, r23
     a80:	00 0c       	add	r0, r0
     a82:	88 0b       	sbc	r24, r24
     a84:	99 0b       	sbc	r25, r25
     a86:	0e 94 ed 09 	call	0x13da	; 0x13da <__floatsisf>
     a8a:	69 87       	std	Y+9, r22	; 0x09
     a8c:	7a 87       	std	Y+10, r23	; 0x0a
     a8e:	8b 87       	std	Y+11, r24	; 0x0b
     a90:	9c 87       	std	Y+12, r25	; 0x0c
     a92:	2b ed       	ldi	r18, 0xDB	; 219
     a94:	3f e0       	ldi	r19, 0x0F	; 15
     a96:	49 ec       	ldi	r20, 0xC9	; 201
     a98:	50 e4       	ldi	r21, 0x40	; 64
     a9a:	6d 81       	ldd	r22, Y+5	; 0x05
     a9c:	7e 81       	ldd	r23, Y+6	; 0x06
     a9e:	8f 81       	ldd	r24, Y+7	; 0x07
     aa0:	98 85       	ldd	r25, Y+8	; 0x08
     aa2:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
     aa6:	0e 94 0f 0b 	call	0x161e	; 0x161e <sin>
     aaa:	23 e8       	ldi	r18, 0x83	; 131
     aac:	39 ef       	ldi	r19, 0xF9	; 249
     aae:	42 e2       	ldi	r20, 0x22	; 34
     ab0:	5e e3       	ldi	r21, 0x3E	; 62
     ab2:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
     ab6:	2d 81       	ldd	r18, Y+5	; 0x05
     ab8:	3e 81       	ldd	r19, Y+6	; 0x06
     aba:	4f 81       	ldd	r20, Y+7	; 0x07
     abc:	58 85       	ldd	r21, Y+8	; 0x08
     abe:	0e 94 44 09 	call	0x1288	; 0x1288 <__addsf3>
     ac2:	4b 01       	movw	r8, r22
     ac4:	5c 01       	movw	r10, r24
			
			motorLeftSpeed = speedCurrent + (speedCurrentLeft + (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     ac6:	60 91 fd 01 	lds	r22, 0x01FD	; 0x8001fd <speedCurrentRight>
     aca:	70 91 fe 01 	lds	r23, 0x01FE	; 0x8001fe <speedCurrentRight+0x1>
     ace:	07 2e       	mov	r0, r23
     ad0:	00 0c       	add	r0, r0
     ad2:	88 0b       	sbc	r24, r24
     ad4:	99 0b       	sbc	r25, r25
     ad6:	0e 94 ed 09 	call	0x13da	; 0x13da <__floatsisf>
     ada:	2b 01       	movw	r4, r22
     adc:	3c 01       	movw	r6, r24
     ade:	6d 85       	ldd	r22, Y+13	; 0x0d
     ae0:	7e 85       	ldd	r23, Y+14	; 0x0e
     ae2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ae4:	98 89       	ldd	r25, Y+16	; 0x10
     ae6:	0e 94 ed 09 	call	0x13da	; 0x13da <__floatsisf>
     aea:	a5 01       	movw	r20, r10
     aec:	94 01       	movw	r18, r8
     aee:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
     af2:	9b 01       	movw	r18, r22
     af4:	ac 01       	movw	r20, r24
     af6:	c3 01       	movw	r24, r6
     af8:	b2 01       	movw	r22, r4
     afa:	0e 94 43 09 	call	0x1286	; 0x1286 <__subsf3>
     afe:	29 85       	ldd	r18, Y+9	; 0x09
     b00:	3a 85       	ldd	r19, Y+10	; 0x0a
     b02:	4b 85       	ldd	r20, Y+11	; 0x0b
     b04:	5c 85       	ldd	r21, Y+12	; 0x0c
     b06:	0e 94 44 09 	call	0x1288	; 0x1288 <__addsf3>
     b0a:	0e 94 b5 09 	call	0x136a	; 0x136a <__fixsfsi>
     b0e:	2b 01       	movw	r4, r22
     b10:	3c 01       	movw	r6, r24
     b12:	60 91 fb 01 	lds	r22, 0x01FB	; 0x8001fb <speedCurrentLeft>
     b16:	70 91 fc 01 	lds	r23, 0x01FC	; 0x8001fc <speedCurrentLeft+0x1>
     b1a:	07 2e       	mov	r0, r23
     b1c:	00 0c       	add	r0, r0
     b1e:	88 0b       	sbc	r24, r24
     b20:	99 0b       	sbc	r25, r25
     b22:	0e 94 ed 09 	call	0x13da	; 0x13da <__floatsisf>
     b26:	6b 01       	movw	r12, r22
     b28:	7c 01       	movw	r14, r24
     b2a:	69 89       	ldd	r22, Y+17	; 0x11
     b2c:	7a 89       	ldd	r23, Y+18	; 0x12
     b2e:	8b 89       	ldd	r24, Y+19	; 0x13
     b30:	9c 89       	ldd	r25, Y+20	; 0x14
     b32:	0e 94 ed 09 	call	0x13da	; 0x13da <__floatsisf>
     b36:	a5 01       	movw	r20, r10
     b38:	94 01       	movw	r18, r8
     b3a:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
     b3e:	9b 01       	movw	r18, r22
     b40:	ac 01       	movw	r20, r24
     b42:	c7 01       	movw	r24, r14
     b44:	b6 01       	movw	r22, r12
     b46:	0e 94 44 09 	call	0x1288	; 0x1288 <__addsf3>
     b4a:	29 85       	ldd	r18, Y+9	; 0x09
     b4c:	3a 85       	ldd	r19, Y+10	; 0x0a
     b4e:	4b 85       	ldd	r20, Y+11	; 0x0b
     b50:	5c 85       	ldd	r21, Y+12	; 0x0c
     b52:	0e 94 44 09 	call	0x1288	; 0x1288 <__addsf3>
     b56:	0e 94 b5 09 	call	0x136a	; 0x136a <__fixsfsi>
     b5a:	dc 01       	movw	r26, r24
     b5c:	cb 01       	movw	r24, r22
     b5e:	b2 01       	movw	r22, r4
     b60:	0e 94 1c 12 	call	0x2438	; 0x2438 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     b64:	8d 89       	ldd	r24, Y+21	; 0x15
     b66:	9e 89       	ldd	r25, Y+22	; 0x16
     b68:	4c 01       	movw	r8, r24
     b6a:	99 0f       	add	r25, r25
     b6c:	aa 08       	sbc	r10, r10
     b6e:	bb 08       	sbc	r11, r11
     b70:	0e 94 95 13 	call	0x272a	; 0x272a <get_ms>
     b74:	6b 01       	movw	r12, r22
     b76:	7c 01       	movw	r14, r24
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	40 e2       	ldi	r20, 0x20	; 32
     b7e:	51 e4       	ldi	r21, 0x41	; 65
     b80:	69 81       	ldd	r22, Y+1	; 0x01
     b82:	7a 81       	ldd	r23, Y+2	; 0x02
     b84:	8b 81       	ldd	r24, Y+3	; 0x03
     b86:	9c 81       	ldd	r25, Y+4	; 0x04
     b88:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
     b8c:	2b 01       	movw	r4, r22
     b8e:	3c 01       	movw	r6, r24
     b90:	c7 01       	movw	r24, r14
     b92:	b6 01       	movw	r22, r12
     b94:	68 19       	sub	r22, r8
     b96:	79 09       	sbc	r23, r9
     b98:	8a 09       	sbc	r24, r10
     b9a:	9b 09       	sbc	r25, r11
     b9c:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__floatunsisf>
     ba0:	a3 01       	movw	r20, r6
     ba2:	92 01       	movw	r18, r4
     ba4:	0e 94 b0 09 	call	0x1360	; 0x1360 <__cmpsf2>
     ba8:	88 23       	and	r24, r24
     baa:	14 f3       	brlt	.-60     	; 0xb70 <__stack+0x271>
		case 'R':		//This case handles the rotation of the robot 90 degrees to the right. The robot accelerates and decelerates with the same method used with forward and backward movement.
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     bac:	2a e0       	ldi	r18, 0x0A	; 10
     bae:	37 ed       	ldi	r19, 0xD7	; 215
     bb0:	43 e2       	ldi	r20, 0x23	; 35
     bb2:	5c e3       	ldi	r21, 0x3C	; 60
     bb4:	6d 81       	ldd	r22, Y+5	; 0x05
     bb6:	7e 81       	ldd	r23, Y+6	; 0x06
     bb8:	8f 81       	ldd	r24, Y+7	; 0x07
     bba:	98 85       	ldd	r25, Y+8	; 0x08
     bbc:	0e 94 44 09 	call	0x1288	; 0x1288 <__addsf3>
     bc0:	6d 83       	std	Y+5, r22	; 0x05
     bc2:	7e 83       	std	Y+6, r23	; 0x06
     bc4:	8f 83       	std	Y+7, r24	; 0x07
     bc6:	98 87       	std	Y+8, r25	; 0x08
     bc8:	01 50       	subi	r16, 0x01	; 1
     bca:	11 09       	sbc	r17, r1
     bcc:	09 f0       	breq	.+2      	; 0xbd0 <__stack+0x2d1>
     bce:	4f cf       	rjmp	.-354    	; 0xa6e <__stack+0x16f>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = -speed;
     bd0:	88 27       	eor	r24, r24
     bd2:	99 27       	eor	r25, r25
     bd4:	82 19       	sub	r24, r2
     bd6:	93 09       	sbc	r25, r3
     bd8:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <speedCurrentRight+0x1>
     bdc:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <speedCurrentRight>
		speedCurrentLeft = speed;
     be0:	30 92 fc 01 	sts	0x01FC, r3	; 0x8001fc <speedCurrentLeft+0x1>
     be4:	20 92 fb 01 	sts	0x01FB, r2	; 0x8001fb <speedCurrentLeft>
     be8:	05 e6       	ldi	r16, 0x65	; 101
     bea:	10 e0       	ldi	r17, 0x00	; 0
		speed = 0;
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     bec:	19 82       	std	Y+1, r1	; 0x01
     bee:	1a 82       	std	Y+2, r1	; 0x02
     bf0:	1b 82       	std	Y+3, r1	; 0x03
     bf2:	1c 82       	std	Y+4, r1	; 0x04
			timerStart = get_ms();
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
     bf4:	9c 01       	movw	r18, r24
     bf6:	99 0f       	add	r25, r25
     bf8:	44 0b       	sbc	r20, r20
     bfa:	55 0b       	sbc	r21, r21
     bfc:	29 87       	std	Y+9, r18	; 0x09
     bfe:	3a 87       	std	Y+10, r19	; 0x0a
     c00:	4b 87       	std	Y+11, r20	; 0x0b
     c02:	5c 87       	std	Y+12, r21	; 0x0c
     c04:	c1 2c       	mov	r12, r1
     c06:	d1 2c       	mov	r13, r1
     c08:	76 01       	movw	r14, r12
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     c0a:	0e 94 95 13 	call	0x272a	; 0x272a <get_ms>
     c0e:	7e 87       	std	Y+14, r23	; 0x0e
     c10:	6d 87       	std	Y+13, r22	; 0x0d
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
     c12:	60 91 ff 01 	lds	r22, 0x01FF	; 0x8001ff <speedCurrent>
     c16:	70 91 00 02 	lds	r23, 0x0200	; 0x800200 <speedCurrent+0x1>
     c1a:	07 2e       	mov	r0, r23
     c1c:	00 0c       	add	r0, r0
     c1e:	88 0b       	sbc	r24, r24
     c20:	99 0b       	sbc	r25, r25
     c22:	0e 94 ed 09 	call	0x13da	; 0x13da <__floatsisf>
     c26:	69 83       	std	Y+1, r22	; 0x01
     c28:	7a 83       	std	Y+2, r23	; 0x02
     c2a:	8b 83       	std	Y+3, r24	; 0x03
     c2c:	9c 83       	std	Y+4, r25	; 0x04
     c2e:	2b ed       	ldi	r18, 0xDB	; 219
     c30:	3f e0       	ldi	r19, 0x0F	; 15
     c32:	49 ec       	ldi	r20, 0xC9	; 201
     c34:	50 e4       	ldi	r21, 0x40	; 64
     c36:	c7 01       	movw	r24, r14
     c38:	b6 01       	movw	r22, r12
     c3a:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
     c3e:	0e 94 0f 0b 	call	0x161e	; 0x161e <sin>
     c42:	23 e8       	ldi	r18, 0x83	; 131
     c44:	39 ef       	ldi	r19, 0xF9	; 249
     c46:	42 e2       	ldi	r20, 0x22	; 34
     c48:	5e e3       	ldi	r21, 0x3E	; 62
     c4a:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
     c4e:	a7 01       	movw	r20, r14
     c50:	96 01       	movw	r18, r12
     c52:	0e 94 44 09 	call	0x1288	; 0x1288 <__addsf3>
     c56:	4b 01       	movw	r8, r22
     c58:	5c 01       	movw	r10, r24
     c5a:	69 85       	ldd	r22, Y+9	; 0x09
     c5c:	7a 85       	ldd	r23, Y+10	; 0x0a
     c5e:	8b 85       	ldd	r24, Y+11	; 0x0b
     c60:	9c 85       	ldd	r25, Y+12	; 0x0c
     c62:	0e 94 ed 09 	call	0x13da	; 0x13da <__floatsisf>
     c66:	9b 01       	movw	r18, r22
     c68:	ac 01       	movw	r20, r24
     c6a:	c5 01       	movw	r24, r10
     c6c:	b4 01       	movw	r22, r8
     c6e:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
     c72:	4b 01       	movw	r8, r22
     c74:	5c 01       	movw	r10, r24
			
			motorLeftSpeed = speedCurrent + (speedCurrentLeft + (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     c76:	60 91 fd 01 	lds	r22, 0x01FD	; 0x8001fd <speedCurrentRight>
     c7a:	70 91 fe 01 	lds	r23, 0x01FE	; 0x8001fe <speedCurrentRight+0x1>
     c7e:	07 2e       	mov	r0, r23
     c80:	00 0c       	add	r0, r0
     c82:	88 0b       	sbc	r24, r24
     c84:	99 0b       	sbc	r25, r25
     c86:	0e 94 ed 09 	call	0x13da	; 0x13da <__floatsisf>
     c8a:	a5 01       	movw	r20, r10
     c8c:	94 01       	movw	r18, r8
     c8e:	0e 94 43 09 	call	0x1286	; 0x1286 <__subsf3>
     c92:	29 81       	ldd	r18, Y+1	; 0x01
     c94:	3a 81       	ldd	r19, Y+2	; 0x02
     c96:	4b 81       	ldd	r20, Y+3	; 0x03
     c98:	5c 81       	ldd	r21, Y+4	; 0x04
     c9a:	0e 94 44 09 	call	0x1288	; 0x1288 <__addsf3>
     c9e:	0e 94 b5 09 	call	0x136a	; 0x136a <__fixsfsi>
     ca2:	6d 83       	std	Y+5, r22	; 0x05
     ca4:	7e 83       	std	Y+6, r23	; 0x06
     ca6:	8f 83       	std	Y+7, r24	; 0x07
     ca8:	98 87       	std	Y+8, r25	; 0x08
     caa:	60 91 fb 01 	lds	r22, 0x01FB	; 0x8001fb <speedCurrentLeft>
     cae:	70 91 fc 01 	lds	r23, 0x01FC	; 0x8001fc <speedCurrentLeft+0x1>
     cb2:	07 2e       	mov	r0, r23
     cb4:	00 0c       	add	r0, r0
     cb6:	88 0b       	sbc	r24, r24
     cb8:	99 0b       	sbc	r25, r25
     cba:	0e 94 ed 09 	call	0x13da	; 0x13da <__floatsisf>
     cbe:	a5 01       	movw	r20, r10
     cc0:	94 01       	movw	r18, r8
     cc2:	0e 94 44 09 	call	0x1288	; 0x1288 <__addsf3>
     cc6:	29 81       	ldd	r18, Y+1	; 0x01
     cc8:	3a 81       	ldd	r19, Y+2	; 0x02
     cca:	4b 81       	ldd	r20, Y+3	; 0x03
     ccc:	5c 81       	ldd	r21, Y+4	; 0x04
     cce:	0e 94 44 09 	call	0x1288	; 0x1288 <__addsf3>
     cd2:	0e 94 b5 09 	call	0x136a	; 0x136a <__fixsfsi>
     cd6:	dc 01       	movw	r26, r24
     cd8:	cb 01       	movw	r24, r22
     cda:	6d 81       	ldd	r22, Y+5	; 0x05
     cdc:	7e 81       	ldd	r23, Y+6	; 0x06
     cde:	0e 94 1c 12 	call	0x2438	; 0x2438 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     ce2:	4d 85       	ldd	r20, Y+13	; 0x0d
     ce4:	5e 85       	ldd	r21, Y+14	; 0x0e
     ce6:	4a 01       	movw	r8, r20
     ce8:	55 0f       	add	r21, r21
     cea:	aa 08       	sbc	r10, r10
     cec:	bb 08       	sbc	r11, r11
     cee:	0e 94 95 13 	call	0x272a	; 0x272a <get_ms>
     cf2:	68 19       	sub	r22, r8
     cf4:	79 09       	sbc	r23, r9
     cf6:	8a 09       	sbc	r24, r10
     cf8:	9b 09       	sbc	r25, r11
     cfa:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__floatunsisf>
     cfe:	9b 01       	movw	r18, r22
     d00:	ac 01       	movw	r20, r24
     d02:	c3 01       	movw	r24, r6
     d04:	b2 01       	movw	r22, r4
     d06:	0e 94 9d 0a 	call	0x153a	; 0x153a <__gesf2>
     d0a:	18 16       	cp	r1, r24
     d0c:	84 f3       	brlt	.-32     	; 0xcee <__stack+0x3ef>
		speed = 0;
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     d0e:	2a e0       	ldi	r18, 0x0A	; 10
     d10:	37 ed       	ldi	r19, 0xD7	; 215
     d12:	43 e2       	ldi	r20, 0x23	; 35
     d14:	5c e3       	ldi	r21, 0x3C	; 60
     d16:	c7 01       	movw	r24, r14
     d18:	b6 01       	movw	r22, r12
     d1a:	0e 94 44 09 	call	0x1288	; 0x1288 <__addsf3>
     d1e:	6b 01       	movw	r12, r22
     d20:	7c 01       	movw	r14, r24
     d22:	01 50       	subi	r16, 0x01	; 1
     d24:	11 09       	sbc	r17, r1
     d26:	09 f0       	breq	.+2      	; 0xd2a <__stack+0x42b>
     d28:	70 cf       	rjmp	.-288    	; 0xc0a <__stack+0x30b>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = -speed;
     d2a:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <speedCurrentRight+0x1>
     d2e:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <speedCurrentRight>
		speedCurrentLeft = speed;
     d32:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <speedCurrentLeft+0x1>
     d36:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <speedCurrentLeft>
		
		break;
     d3a:	62 c1       	rjmp	.+708    	; 0x1000 <__stack+0x701>

		case 'L': //This case handles the rotation of the robot 90 degrees to the left. The robot accelerates and decelerates with the same method used with forward and backward movement.
		
		setSpeedRight = speed - speedCurrentRight;
     d3c:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <speedCurrentRight>
     d40:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <speedCurrentRight+0x1>
     d44:	91 01       	movw	r18, r2
     d46:	28 1b       	sub	r18, r24
     d48:	39 0b       	sbc	r19, r25
		setSpeedLeft = speed + speedCurrentLeft;
     d4a:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <speedCurrentLeft>
     d4e:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <speedCurrentLeft+0x1>
     d52:	82 0d       	add	r24, r2
     d54:	93 1d       	adc	r25, r3
     d56:	65 e6       	ldi	r22, 0x65	; 101
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	7a 8b       	std	Y+18, r23	; 0x12
     d5c:	69 8b       	std	Y+17, r22	; 0x11
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     d5e:	1d 82       	std	Y+5, r1	; 0x05
     d60:	1e 82       	std	Y+6, r1	; 0x06
     d62:	1f 82       	std	Y+7, r1	; 0x07
     d64:	18 86       	std	Y+8, r1	; 0x08
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
			
			motorLeftSpeed = speedCurrentLeft - (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ));
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     d66:	a9 01       	movw	r20, r18
     d68:	33 0f       	add	r19, r19
     d6a:	66 0b       	sbc	r22, r22
     d6c:	77 0b       	sbc	r23, r23
     d6e:	49 87       	std	Y+9, r20	; 0x09
     d70:	5a 87       	std	Y+10, r21	; 0x0a
     d72:	6b 87       	std	Y+11, r22	; 0x0b
     d74:	7c 87       	std	Y+12, r23	; 0x0c
     d76:	9c 01       	movw	r18, r24
     d78:	99 0f       	add	r25, r25
     d7a:	44 0b       	sbc	r20, r20
     d7c:	55 0b       	sbc	r21, r21
     d7e:	2d 87       	std	Y+13, r18	; 0x0d
     d80:	3e 87       	std	Y+14, r19	; 0x0e
     d82:	4f 87       	std	Y+15, r20	; 0x0f
     d84:	58 8b       	std	Y+16, r21	; 0x10
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     d86:	0e 94 95 13 	call	0x272a	; 0x272a <get_ms>
     d8a:	8b 01       	movw	r16, r22
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
     d8c:	2b ed       	ldi	r18, 0xDB	; 219
     d8e:	3f e0       	ldi	r19, 0x0F	; 15
     d90:	49 ec       	ldi	r20, 0xC9	; 201
     d92:	50 e4       	ldi	r21, 0x40	; 64
     d94:	6d 81       	ldd	r22, Y+5	; 0x05
     d96:	7e 81       	ldd	r23, Y+6	; 0x06
     d98:	8f 81       	ldd	r24, Y+7	; 0x07
     d9a:	98 85       	ldd	r25, Y+8	; 0x08
     d9c:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
     da0:	0e 94 0f 0b 	call	0x161e	; 0x161e <sin>
     da4:	23 e8       	ldi	r18, 0x83	; 131
     da6:	39 ef       	ldi	r19, 0xF9	; 249
     da8:	42 e2       	ldi	r20, 0x22	; 34
     daa:	5e e3       	ldi	r21, 0x3E	; 62
     dac:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
     db0:	2d 81       	ldd	r18, Y+5	; 0x05
     db2:	3e 81       	ldd	r19, Y+6	; 0x06
     db4:	4f 81       	ldd	r20, Y+7	; 0x07
     db6:	58 85       	ldd	r21, Y+8	; 0x08
     db8:	0e 94 44 09 	call	0x1288	; 0x1288 <__addsf3>
     dbc:	6b 01       	movw	r12, r22
     dbe:	7c 01       	movw	r14, r24
			
			motorLeftSpeed = speedCurrentLeft - (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ));
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     dc0:	60 91 fd 01 	lds	r22, 0x01FD	; 0x8001fd <speedCurrentRight>
     dc4:	70 91 fe 01 	lds	r23, 0x01FE	; 0x8001fe <speedCurrentRight+0x1>
     dc8:	07 2e       	mov	r0, r23
     dca:	00 0c       	add	r0, r0
     dcc:	88 0b       	sbc	r24, r24
     dce:	99 0b       	sbc	r25, r25
     dd0:	0e 94 ed 09 	call	0x13da	; 0x13da <__floatsisf>
     dd4:	4b 01       	movw	r8, r22
     dd6:	5c 01       	movw	r10, r24
     dd8:	69 85       	ldd	r22, Y+9	; 0x09
     dda:	7a 85       	ldd	r23, Y+10	; 0x0a
     ddc:	8b 85       	ldd	r24, Y+11	; 0x0b
     dde:	9c 85       	ldd	r25, Y+12	; 0x0c
     de0:	0e 94 ed 09 	call	0x13da	; 0x13da <__floatsisf>
     de4:	a7 01       	movw	r20, r14
     de6:	96 01       	movw	r18, r12
     de8:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
     dec:	9b 01       	movw	r18, r22
     dee:	ac 01       	movw	r20, r24
     df0:	c5 01       	movw	r24, r10
     df2:	b4 01       	movw	r22, r8
     df4:	0e 94 44 09 	call	0x1288	; 0x1288 <__addsf3>
     df8:	0e 94 b5 09 	call	0x136a	; 0x136a <__fixsfsi>
     dfc:	4b 01       	movw	r8, r22
     dfe:	5c 01       	movw	r10, r24
     e00:	60 91 fb 01 	lds	r22, 0x01FB	; 0x8001fb <speedCurrentLeft>
     e04:	70 91 fc 01 	lds	r23, 0x01FC	; 0x8001fc <speedCurrentLeft+0x1>
     e08:	07 2e       	mov	r0, r23
     e0a:	00 0c       	add	r0, r0
     e0c:	88 0b       	sbc	r24, r24
     e0e:	99 0b       	sbc	r25, r25
     e10:	0e 94 ed 09 	call	0x13da	; 0x13da <__floatsisf>
     e14:	2b 01       	movw	r4, r22
     e16:	3c 01       	movw	r6, r24
     e18:	6d 85       	ldd	r22, Y+13	; 0x0d
     e1a:	7e 85       	ldd	r23, Y+14	; 0x0e
     e1c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e1e:	98 89       	ldd	r25, Y+16	; 0x10
     e20:	0e 94 ed 09 	call	0x13da	; 0x13da <__floatsisf>
     e24:	a7 01       	movw	r20, r14
     e26:	96 01       	movw	r18, r12
     e28:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
     e2c:	9b 01       	movw	r18, r22
     e2e:	ac 01       	movw	r20, r24
     e30:	c3 01       	movw	r24, r6
     e32:	b2 01       	movw	r22, r4
     e34:	0e 94 43 09 	call	0x1286	; 0x1286 <__subsf3>
     e38:	0e 94 b5 09 	call	0x136a	; 0x136a <__fixsfsi>
     e3c:	dc 01       	movw	r26, r24
     e3e:	cb 01       	movw	r24, r22
     e40:	b4 01       	movw	r22, r8
     e42:	0e 94 1c 12 	call	0x2438	; 0x2438 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     e46:	48 01       	movw	r8, r16
     e48:	11 0f       	add	r17, r17
     e4a:	aa 08       	sbc	r10, r10
     e4c:	bb 08       	sbc	r11, r11
     e4e:	0e 94 95 13 	call	0x272a	; 0x272a <get_ms>
     e52:	2b 01       	movw	r4, r22
     e54:	3c 01       	movw	r6, r24
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	40 e2       	ldi	r20, 0x20	; 32
     e5c:	51 e4       	ldi	r21, 0x41	; 65
     e5e:	69 81       	ldd	r22, Y+1	; 0x01
     e60:	7a 81       	ldd	r23, Y+2	; 0x02
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	9c 81       	ldd	r25, Y+4	; 0x04
     e66:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
     e6a:	6b 01       	movw	r12, r22
     e6c:	7c 01       	movw	r14, r24
     e6e:	c3 01       	movw	r24, r6
     e70:	b2 01       	movw	r22, r4
     e72:	68 19       	sub	r22, r8
     e74:	79 09       	sbc	r23, r9
     e76:	8a 09       	sbc	r24, r10
     e78:	9b 09       	sbc	r25, r11
     e7a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__floatunsisf>
     e7e:	a7 01       	movw	r20, r14
     e80:	96 01       	movw	r18, r12
     e82:	0e 94 b0 09 	call	0x1360	; 0x1360 <__cmpsf2>
     e86:	88 23       	and	r24, r24
     e88:	14 f3       	brlt	.-60     	; 0xe4e <__stack+0x54f>
		case 'L': //This case handles the rotation of the robot 90 degrees to the left. The robot accelerates and decelerates with the same method used with forward and backward movement.
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     e8a:	2a e0       	ldi	r18, 0x0A	; 10
     e8c:	37 ed       	ldi	r19, 0xD7	; 215
     e8e:	43 e2       	ldi	r20, 0x23	; 35
     e90:	5c e3       	ldi	r21, 0x3C	; 60
     e92:	6d 81       	ldd	r22, Y+5	; 0x05
     e94:	7e 81       	ldd	r23, Y+6	; 0x06
     e96:	8f 81       	ldd	r24, Y+7	; 0x07
     e98:	98 85       	ldd	r25, Y+8	; 0x08
     e9a:	0e 94 44 09 	call	0x1288	; 0x1288 <__addsf3>
     e9e:	6d 83       	std	Y+5, r22	; 0x05
     ea0:	7e 83       	std	Y+6, r23	; 0x06
     ea2:	8f 83       	std	Y+7, r24	; 0x07
     ea4:	98 87       	std	Y+8, r25	; 0x08
     ea6:	a9 89       	ldd	r26, Y+17	; 0x11
     ea8:	ba 89       	ldd	r27, Y+18	; 0x12
     eaa:	11 97       	sbiw	r26, 0x01	; 1
     eac:	ba 8b       	std	Y+18, r27	; 0x12
     eae:	a9 8b       	std	Y+17, r26	; 0x11
     eb0:	ab 2b       	or	r26, r27
     eb2:	09 f0       	breq	.+2      	; 0xeb6 <__stack+0x5b7>
     eb4:	68 cf       	rjmp	.-304    	; 0xd86 <__stack+0x487>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = speed;
     eb6:	30 92 fe 01 	sts	0x01FE, r3	; 0x8001fe <speedCurrentRight+0x1>
     eba:	20 92 fd 01 	sts	0x01FD, r2	; 0x8001fd <speedCurrentRight>
		speedCurrentLeft = -speed;
     ebe:	31 94       	neg	r3
     ec0:	21 94       	neg	r2
     ec2:	31 08       	sbc	r3, r1
     ec4:	30 92 fc 01 	sts	0x01FC, r3	; 0x8001fc <speedCurrentLeft+0x1>
     ec8:	20 92 fb 01 	sts	0x01FB, r2	; 0x8001fb <speedCurrentLeft>
     ecc:	25 e6       	ldi	r18, 0x65	; 101
     ece:	30 e0       	ldi	r19, 0x00	; 0
		speed = 0;
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     ed0:	19 82       	std	Y+1, r1	; 0x01
     ed2:	1a 82       	std	Y+2, r1	; 0x02
     ed4:	1b 82       	std	Y+3, r1	; 0x03
     ed6:	1c 82       	std	Y+4, r1	; 0x04
			timerStart = get_ms();
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
     ed8:	a1 01       	movw	r20, r2
     eda:	33 0c       	add	r3, r3
     edc:	66 0b       	sbc	r22, r22
     ede:	77 0b       	sbc	r23, r23
     ee0:	4d 83       	std	Y+5, r20	; 0x05
     ee2:	5e 83       	std	Y+6, r21	; 0x06
     ee4:	6f 83       	std	Y+7, r22	; 0x07
     ee6:	78 87       	std	Y+8, r23	; 0x08
     ee8:	3a 87       	std	Y+10, r19	; 0x0a
     eea:	29 87       	std	Y+9, r18	; 0x09
     eec:	81 2c       	mov	r8, r1
     eee:	91 2c       	mov	r9, r1
     ef0:	54 01       	movw	r10, r8
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     ef2:	0e 94 95 13 	call	0x272a	; 0x272a <get_ms>
     ef6:	8b 01       	movw	r16, r22
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
     ef8:	2b ed       	ldi	r18, 0xDB	; 219
     efa:	3f e0       	ldi	r19, 0x0F	; 15
     efc:	49 ec       	ldi	r20, 0xC9	; 201
     efe:	50 e4       	ldi	r21, 0x40	; 64
     f00:	c5 01       	movw	r24, r10
     f02:	b4 01       	movw	r22, r8
     f04:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
     f08:	0e 94 0f 0b 	call	0x161e	; 0x161e <sin>
     f0c:	23 e8       	ldi	r18, 0x83	; 131
     f0e:	39 ef       	ldi	r19, 0xF9	; 249
     f10:	42 e2       	ldi	r20, 0x22	; 34
     f12:	5e e3       	ldi	r21, 0x3E	; 62
     f14:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
     f18:	a5 01       	movw	r20, r10
     f1a:	94 01       	movw	r18, r8
     f1c:	0e 94 44 09 	call	0x1288	; 0x1288 <__addsf3>
     f20:	2b 01       	movw	r4, r22
     f22:	3c 01       	movw	r6, r24
     f24:	6d 81       	ldd	r22, Y+5	; 0x05
     f26:	7e 81       	ldd	r23, Y+6	; 0x06
     f28:	8f 81       	ldd	r24, Y+7	; 0x07
     f2a:	98 85       	ldd	r25, Y+8	; 0x08
     f2c:	0e 94 ed 09 	call	0x13da	; 0x13da <__floatsisf>
     f30:	9b 01       	movw	r18, r22
     f32:	ac 01       	movw	r20, r24
     f34:	c3 01       	movw	r24, r6
     f36:	b2 01       	movw	r22, r4
     f38:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
     f3c:	2b 01       	movw	r4, r22
     f3e:	3c 01       	movw	r6, r24
			
			motorLeftSpeed = speedCurrentLeft - (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ));
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     f40:	60 91 fd 01 	lds	r22, 0x01FD	; 0x8001fd <speedCurrentRight>
     f44:	70 91 fe 01 	lds	r23, 0x01FE	; 0x8001fe <speedCurrentRight+0x1>
     f48:	07 2e       	mov	r0, r23
     f4a:	00 0c       	add	r0, r0
     f4c:	88 0b       	sbc	r24, r24
     f4e:	99 0b       	sbc	r25, r25
     f50:	0e 94 ed 09 	call	0x13da	; 0x13da <__floatsisf>
     f54:	a3 01       	movw	r20, r6
     f56:	92 01       	movw	r18, r4
     f58:	0e 94 44 09 	call	0x1288	; 0x1288 <__addsf3>
     f5c:	0e 94 b5 09 	call	0x136a	; 0x136a <__fixsfsi>
     f60:	69 83       	std	Y+1, r22	; 0x01
     f62:	7a 83       	std	Y+2, r23	; 0x02
     f64:	8b 83       	std	Y+3, r24	; 0x03
     f66:	9c 83       	std	Y+4, r25	; 0x04
     f68:	60 91 fb 01 	lds	r22, 0x01FB	; 0x8001fb <speedCurrentLeft>
     f6c:	70 91 fc 01 	lds	r23, 0x01FC	; 0x8001fc <speedCurrentLeft+0x1>
     f70:	07 2e       	mov	r0, r23
     f72:	00 0c       	add	r0, r0
     f74:	88 0b       	sbc	r24, r24
     f76:	99 0b       	sbc	r25, r25
     f78:	0e 94 ed 09 	call	0x13da	; 0x13da <__floatsisf>
     f7c:	a3 01       	movw	r20, r6
     f7e:	92 01       	movw	r18, r4
     f80:	0e 94 43 09 	call	0x1286	; 0x1286 <__subsf3>
     f84:	0e 94 b5 09 	call	0x136a	; 0x136a <__fixsfsi>
     f88:	dc 01       	movw	r26, r24
     f8a:	cb 01       	movw	r24, r22
     f8c:	69 81       	ldd	r22, Y+1	; 0x01
     f8e:	7a 81       	ldd	r23, Y+2	; 0x02
     f90:	0e 94 1c 12 	call	0x2438	; 0x2438 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     f94:	28 01       	movw	r4, r16
     f96:	11 0f       	add	r17, r17
     f98:	66 08       	sbc	r6, r6
     f9a:	77 08       	sbc	r7, r7
     f9c:	0e 94 95 13 	call	0x272a	; 0x272a <get_ms>
     fa0:	64 19       	sub	r22, r4
     fa2:	75 09       	sbc	r23, r5
     fa4:	86 09       	sbc	r24, r6
     fa6:	97 09       	sbc	r25, r7
     fa8:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__floatunsisf>
     fac:	9b 01       	movw	r18, r22
     fae:	ac 01       	movw	r20, r24
     fb0:	c7 01       	movw	r24, r14
     fb2:	b6 01       	movw	r22, r12
     fb4:	0e 94 9d 0a 	call	0x153a	; 0x153a <__gesf2>
     fb8:	18 16       	cp	r1, r24
     fba:	84 f3       	brlt	.-32     	; 0xf9c <__stack+0x69d>
		speed = 0;
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     fbc:	2a e0       	ldi	r18, 0x0A	; 10
     fbe:	37 ed       	ldi	r19, 0xD7	; 215
     fc0:	43 e2       	ldi	r20, 0x23	; 35
     fc2:	5c e3       	ldi	r21, 0x3C	; 60
     fc4:	c5 01       	movw	r24, r10
     fc6:	b4 01       	movw	r22, r8
     fc8:	0e 94 44 09 	call	0x1288	; 0x1288 <__addsf3>
     fcc:	4b 01       	movw	r8, r22
     fce:	5c 01       	movw	r10, r24
     fd0:	69 85       	ldd	r22, Y+9	; 0x09
     fd2:	7a 85       	ldd	r23, Y+10	; 0x0a
     fd4:	61 50       	subi	r22, 0x01	; 1
     fd6:	71 09       	sbc	r23, r1
     fd8:	7a 87       	std	Y+10, r23	; 0x0a
     fda:	69 87       	std	Y+9, r22	; 0x09
     fdc:	67 2b       	or	r22, r23
     fde:	09 f0       	breq	.+2      	; 0xfe2 <__stack+0x6e3>
     fe0:	88 cf       	rjmp	.-240    	; 0xef2 <__stack+0x5f3>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = speed;
     fe2:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <speedCurrentRight+0x1>
     fe6:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <speedCurrentRight>
		speedCurrentLeft = -speed;
     fea:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <speedCurrentLeft+0x1>
     fee:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <speedCurrentLeft>
		break;
     ff2:	06 c0       	rjmp	.+12     	; 0x1000 <__stack+0x701>
		
		default:		//The default case puts the robot into a full stop and is only used in emergency situations. Using this case is not recommended as it applies the brakes instantaneously and therefore creates an extreme jerk in the acceleration curve.
		set_motors(0,0);
     ff4:	60 e0       	ldi	r22, 0x00	; 0
     ff6:	70 e0       	ldi	r23, 0x00	; 0
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	0e 94 1c 12 	call	0x2438	; 0x2438 <set_motors>
		break;
	}
}
    1000:	66 96       	adiw	r28, 0x16	; 22
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	f8 94       	cli
    1006:	de bf       	out	0x3e, r29	; 62
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	cd bf       	out	0x3d, r28	; 61
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	1f 91       	pop	r17
    1012:	0f 91       	pop	r16
    1014:	ff 90       	pop	r15
    1016:	ef 90       	pop	r14
    1018:	df 90       	pop	r13
    101a:	cf 90       	pop	r12
    101c:	bf 90       	pop	r11
    101e:	af 90       	pop	r10
    1020:	9f 90       	pop	r9
    1022:	8f 90       	pop	r8
    1024:	7f 90       	pop	r7
    1026:	6f 90       	pop	r6
    1028:	5f 90       	pop	r5
    102a:	4f 90       	pop	r4
    102c:	3f 90       	pop	r3
    102e:	2f 90       	pop	r2
    1030:	08 95       	ret

00001032 <initialize>:
#include "Grid.h"

int situations[3]={LOW, LOW, LOW};

void initialize()
{
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
	
	unsigned int counter;
	pololu_3pi_init(2000);								//initialize sensor value from 0 to 2000
    1036:	80 ed       	ldi	r24, 0xD0	; 208
    1038:	97 e0       	ldi	r25, 0x07	; 7
    103a:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <pololu_3pi_init>
	
	while(!button_is_pressed(BUTTON_B))					//this function is activated until button B is pressed.
    103e:	1b c0       	rjmp	.+54     	; 0x1076 <initialize+0x44>
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
    1040:	0e 94 bd 0c 	call	0x197a	; 0x197a <read_battery_millivolts_3pi>
    1044:	ec 01       	movw	r28, r24
	{
		int bat = read_battery_millivolts();
		clear();
    1046:	0e 94 df 10 	call	0x21be	; 0x21be <clear>
		print_long(bat);								//print battery voltage in millivolts on the LCD
    104a:	be 01       	movw	r22, r28
    104c:	dd 0f       	add	r29, r29
    104e:	88 0b       	sbc	r24, r24
    1050:	99 0b       	sbc	r25, r25
    1052:	0e 94 43 11 	call	0x2286	; 0x2286 <print_long>
		print("mV");
    1056:	8e e5       	ldi	r24, 0x5E	; 94
    1058:	91 e0       	ldi	r25, 0x01	; 1
    105a:	0e 94 ee 10 	call	0x21dc	; 0x21dc <print>
		lcd_goto_xy(0,1);
    105e:	61 e0       	ldi	r22, 0x01	; 1
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	0e 94 66 11 	call	0x22cc	; 0x22cc <lcd_goto_xy>
		print("druk B");								//print instruction to continue
    1066:	81 e6       	ldi	r24, 0x61	; 97
    1068:	91 e0       	ldi	r25, 0x01	; 1
    106a:	0e 94 ee 10 	call	0x21dc	; 0x21dc <print>
		delay_ms(100);
    106e:	84 e6       	ldi	r24, 0x64	; 100
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	0e 94 5d 13 	call	0x26ba	; 0x26ba <delay_ms>
{
	
	unsigned int counter;
	pololu_3pi_init(2000);								//initialize sensor value from 0 to 2000
	
	while(!button_is_pressed(BUTTON_B))					//this function is activated until button B is pressed.
    1076:	80 e1       	ldi	r24, 0x10	; 16
    1078:	0e 94 5f 12 	call	0x24be	; 0x24be <button_is_pressed>
    107c:	88 23       	and	r24, r24
    107e:	01 f3       	breq	.-64     	; 0x1040 <initialize+0xe>
		lcd_goto_xy(0,1);
		print("druk B");								//print instruction to continue
		delay_ms(100);
	}
	
	wait_for_button_release(BUTTON_B);					//button B is pressed
    1080:	80 e1       	ldi	r24, 0x10	; 16
    1082:	0e 94 4b 12 	call	0x2496	; 0x2496 <wait_for_button_release>
	delay_ms(1000);
    1086:	88 ee       	ldi	r24, 0xE8	; 232
    1088:	93 e0       	ldi	r25, 0x03	; 3
    108a:	0e 94 5d 13 	call	0x26ba	; 0x26ba <delay_ms>
    108e:	cc ee       	ldi	r28, 0xEC	; 236
    1090:	df ef       	ldi	r29, 0xFF	; 255
	
	for(counter=0;counter<80;counter++)					//calibrating line sensors
	{
		if(counter < 20 || counter >= 60)
    1092:	c8 32       	cpi	r28, 0x28	; 40
    1094:	d1 05       	cpc	r29, r1
    1096:	38 f0       	brcs	.+14     	; 0x10a6 <initialize+0x74>
		set_motors(40,-40);
    1098:	68 ed       	ldi	r22, 0xD8	; 216
    109a:	7f ef       	ldi	r23, 0xFF	; 255
    109c:	88 e2       	ldi	r24, 0x28	; 40
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	0e 94 1c 12 	call	0x2438	; 0x2438 <set_motors>
    10a4:	06 c0       	rjmp	.+12     	; 0x10b2 <initialize+0x80>
		else
		set_motors(-40,40);
    10a6:	68 e2       	ldi	r22, 0x28	; 40
    10a8:	70 e0       	ldi	r23, 0x00	; 0
    10aa:	88 ed       	ldi	r24, 0xD8	; 216
    10ac:	9f ef       	ldi	r25, 0xFF	; 255
    10ae:	0e 94 1c 12 	call	0x2438	; 0x2438 <set_motors>
		calibrate_line_sensors(IR_EMITTERS_ON);
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	0e 94 b6 13 	call	0x276c	; 0x276c <calibrate_line_sensors>
		delay_ms(20);
    10b8:	84 e1       	ldi	r24, 0x14	; 20
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	0e 94 5d 13 	call	0x26ba	; 0x26ba <delay_ms>
    10c0:	21 96       	adiw	r28, 0x01	; 1
	}
	
	wait_for_button_release(BUTTON_B);					//button B is pressed
	delay_ms(1000);
	
	for(counter=0;counter<80;counter++)					//calibrating line sensors
    10c2:	cc 33       	cpi	r28, 0x3C	; 60
    10c4:	d1 05       	cpc	r29, r1
    10c6:	29 f7       	brne	.-54     	; 0x1092 <initialize+0x60>
		set_motors(-40,40);
		calibrate_line_sensors(IR_EMITTERS_ON);
		delay_ms(20);
	}
	
	set_motors(0,0);
    10c8:	60 e0       	ldi	r22, 0x00	; 0
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	0e 94 1c 12 	call	0x2438	; 0x2438 <set_motors>
	
	while(!button_is_pressed(BUTTON_B))										//function is activated until button B is pressed
    10d4:	15 c0       	rjmp	.+42     	; 0x1100 <initialize+0xce>
	{
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);			//reading the sensors to determine the position of the robot
    10d6:	61 e0       	ldi	r22, 0x01	; 1
    10d8:	88 e6       	ldi	r24, 0x68	; 104
    10da:	92 e0       	ldi	r25, 0x02	; 2
    10dc:	0e 94 bc 13 	call	0x2778	; 0x2778 <read_line>
    10e0:	ec 01       	movw	r28, r24
		clear();															//clear LCD
    10e2:	0e 94 df 10 	call	0x21be	; 0x21be <clear>
		print("  ");
    10e6:	88 e6       	ldi	r24, 0x68	; 104
    10e8:	91 e0       	ldi	r25, 0x01	; 1
    10ea:	0e 94 ee 10 	call	0x21dc	; 0x21dc <print>
		print_long(position);												//print position of the robot compared to the line
    10ee:	be 01       	movw	r22, r28
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 43 11 	call	0x2286	; 0x2286 <print_long>
		delay_ms(100);
    10f8:	84 e6       	ldi	r24, 0x64	; 100
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	0e 94 5d 13 	call	0x26ba	; 0x26ba <delay_ms>
		delay_ms(20);
	}
	
	set_motors(0,0);
	
	while(!button_is_pressed(BUTTON_B))										//function is activated until button B is pressed
    1100:	80 e1       	ldi	r24, 0x10	; 16
    1102:	0e 94 5f 12 	call	0x24be	; 0x24be <button_is_pressed>
    1106:	88 23       	and	r24, r24
    1108:	31 f3       	breq	.-52     	; 0x10d6 <initialize+0xa4>
		print("  ");
		print_long(position);												//print position of the robot compared to the line
		delay_ms(100);
	}
	
	wait_for_button_release(BUTTON_B);										//button B is pressed
    110a:	80 e1       	ldi	r24, 0x10	; 16
    110c:	0e 94 4b 12 	call	0x2496	; 0x2496 <wait_for_button_release>
	clear();																//clear LCD
    1110:	0e 94 df 10 	call	0x21be	; 0x21be <clear>
	print("Go!");
    1114:	8b e6       	ldi	r24, 0x6B	; 107
    1116:	91 e0       	ldi	r25, 0x01	; 1
    1118:	0e 94 ee 10 	call	0x21dc	; 0x21dc <print>

}
    111c:	df 91       	pop	r29
    111e:	cf 91       	pop	r28
    1120:	08 95       	ret

00001122 <followLine>:


void followLine()
{
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
	
	unsigned int pos = read_line(sensors,IR_EMITTERS_ON);					//write position of the robot to an unsigned int called pos
    1126:	61 e0       	ldi	r22, 0x01	; 1
    1128:	88 e6       	ldi	r24, 0x68	; 104
    112a:	92 e0       	ldi	r25, 0x02	; 2
    112c:	0e 94 bc 13 	call	0x2778	; 0x2778 <read_line>
    1130:	ec 01       	movw	r28, r24
	read_line_sensors(sensors,IR_EMITTERS_ON);								//read line sensors
    1132:	61 e0       	ldi	r22, 0x01	; 1
    1134:	88 e6       	ldi	r24, 0x68	; 104
    1136:	92 e0       	ldi	r25, 0x02	; 2
    1138:	0e 94 af 13 	call	0x275e	; 0x275e <read_line_sensors>


	clear();																//clear display
    113c:	0e 94 df 10 	call	0x21be	; 0x21be <clear>
	
	if(pos < 1950)
    1140:	ce 39       	cpi	r28, 0x9E	; 158
    1142:	87 e0       	ldi	r24, 0x07	; 7
    1144:	d8 07       	cpc	r29, r24
    1146:	98 f4       	brcc	.+38     	; 0x116e <followLine+0x4c>
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
    1148:	5f 9a       	sbi	0x0b, 7	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    114a:	57 9a       	sbi	0x0a, 7	; 10
	{
		
		green_led(1);

		if(pos < 1800)														//We are far to the right of the line: turn left.
    114c:	c8 30       	cpi	r28, 0x08	; 8
    114e:	d7 40       	sbci	r29, 0x07	; 7
    1150:	38 f4       	brcc	.+14     	; 0x1160 <followLine+0x3e>
		{
			set_motors(0,SPEED);
    1152:	6c e3       	ldi	r22, 0x3C	; 60
    1154:	70 e0       	ldi	r23, 0x00	; 0
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	0e 94 1c 12 	call	0x2438	; 0x2438 <set_motors>
    115e:	24 c0       	rjmp	.+72     	; 0x11a8 <followLine+0x86>
		}
		else
		{
			set_motors(SLOW,SPEED);											//we are to the right of the line: turn left.
    1160:	6c e3       	ldi	r22, 0x3C	; 60
    1162:	70 e0       	ldi	r23, 0x00	; 0
    1164:	87 e3       	ldi	r24, 0x37	; 55
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	0e 94 1c 12 	call	0x2438	; 0x2438 <set_motors>
    116c:	1d c0       	rjmp	.+58     	; 0x11a8 <followLine+0x86>
		}
		
	}
	
	else if (pos > 2050)
    116e:	c3 30       	cpi	r28, 0x03	; 3
    1170:	88 e0       	ldi	r24, 0x08	; 8
    1172:	d8 07       	cpc	r29, r24
    1174:	98 f0       	brcs	.+38     	; 0x119c <followLine+0x7a>
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
    1176:	59 9a       	sbi	0x0b, 1	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    1178:	51 9a       	sbi	0x0a, 1	; 10
	{
		// We are far to the left of the line: turn right.
		red_led(1);
		
		if(pos > 2200)														//We are far to the left of the line: turn right
    117a:	c9 39       	cpi	r28, 0x99	; 153
    117c:	d8 40       	sbci	r29, 0x08	; 8
    117e:	38 f0       	brcs	.+14     	; 0x118e <followLine+0x6c>
		{
			set_motors(SPEED,0);
    1180:	60 e0       	ldi	r22, 0x00	; 0
    1182:	70 e0       	ldi	r23, 0x00	; 0
    1184:	8c e3       	ldi	r24, 0x3C	; 60
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	0e 94 1c 12 	call	0x2438	; 0x2438 <set_motors>
    118c:	0d c0       	rjmp	.+26     	; 0x11a8 <followLine+0x86>
		}
		else
		{
			set_motors(FAST,SLOW);											//We are to the left of the line: turn right
    118e:	67 e3       	ldi	r22, 0x37	; 55
    1190:	70 e0       	ldi	r23, 0x00	; 0
    1192:	81 e4       	ldi	r24, 0x41	; 65
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	0e 94 1c 12 	call	0x2438	; 0x2438 <set_motors>
    119a:	06 c0       	rjmp	.+12     	; 0x11a8 <followLine+0x86>
		}
	}
	else
	{
		set_motors(SLOW,SLOW);												//we are on the line. move forward
    119c:	67 e3       	ldi	r22, 0x37	; 55
    119e:	70 e0       	ldi	r23, 0x00	; 0
    11a0:	87 e3       	ldi	r24, 0x37	; 55
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	0e 94 1c 12 	call	0x2438	; 0x2438 <set_motors>
		
	}

	
}
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
    11ac:	08 95       	ret

000011ae <checkAfslag>:

int checkAfslag(){
    11ae:	cf 93       	push	r28
    11b0:	df 93       	push	r29

	int flag = 0;													        //initialize flag and turn
	situations[0] =LOW;														//sensor left initialize
    11b2:	e1 e0       	ldi	r30, 0x01	; 1
    11b4:	f2 e0       	ldi	r31, 0x02	; 2
    11b6:	11 82       	std	Z+1, r1	; 0x01
    11b8:	10 82       	st	Z, r1
	situations[1] =LOW;														//sensor center initialize
    11ba:	13 82       	std	Z+3, r1	; 0x03
    11bc:	12 82       	std	Z+2, r1	; 0x02
	situations[2] =LOW;														//sensor right initialize
    11be:	15 82       	std	Z+5, r1	; 0x05
    11c0:	14 82       	std	Z+4, r1	; 0x04
	read_line_sensors(sensors,IR_EMITTERS_ON);								//read line sensors
    11c2:	61 e0       	ldi	r22, 0x01	; 1
    11c4:	88 e6       	ldi	r24, 0x68	; 104
    11c6:	92 e0       	ldi	r25, 0x02	; 2
    11c8:	0e 94 af 13 	call	0x275e	; 0x275e <read_line_sensors>
	int rangeHigh = 1500;													//set high range to 1000
	
	if(SENSOR_L > rangeHigh){
    11cc:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <sensors>
    11d0:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <sensors+0x1>
    11d4:	8d 3d       	cpi	r24, 0xDD	; 221
    11d6:	95 40       	sbci	r25, 0x05	; 5
    11d8:	48 f0       	brcs	.+18     	; 0x11ec <checkAfslag+0x3e>
		situations[0] = HIGH;
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <situations+0x1>
    11e2:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <situations>
		flag = 1;															//sensor left is high, flag = 1
    11e6:	c1 e0       	ldi	r28, 0x01	; 1
    11e8:	d0 e0       	ldi	r29, 0x00	; 0
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <checkAfslag+0x42>
	
}

int checkAfslag(){

	int flag = 0;													        //initialize flag and turn
    11ec:	c0 e0       	ldi	r28, 0x00	; 0
    11ee:	d0 e0       	ldi	r29, 0x00	; 0
	
	if(SENSOR_L > rangeHigh){
		situations[0] = HIGH;
		flag = 1;															//sensor left is high, flag = 1
	}
	if(SENSOR_C_C > rangeHigh){
    11f0:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <sensors+0x4>
    11f4:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <sensors+0x5>
    11f8:	8d 3d       	cpi	r24, 0xDD	; 221
    11fa:	95 40       	sbci	r25, 0x05	; 5
    11fc:	40 f0       	brcs	.+16     	; 0x120e <checkAfslag+0x60>
		situations[1] = HIGH;
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <situations+0x3>
    1206:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <situations+0x2>
		flag = 2;															//sensor center is high, flag = 2
    120a:	c2 e0       	ldi	r28, 0x02	; 2
    120c:	d0 e0       	ldi	r29, 0x00	; 0
	}
	if(SENSOR_R > rangeHigh){
    120e:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <sensors+0x8>
    1212:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <sensors+0x9>
    1216:	8d 3d       	cpi	r24, 0xDD	; 221
    1218:	95 40       	sbci	r25, 0x05	; 5
    121a:	40 f0       	brcs	.+16     	; 0x122c <checkAfslag+0x7e>
		situations[2] = HIGH;
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <situations+0x5>
    1224:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <situations+0x4>
		flag = 3;															//sensor right is high, flag = 3
    1228:	c3 e0       	ldi	r28, 0x03	; 3
    122a:	d0 e0       	ldi	r29, 0x00	; 0
	}
	clear();																//clear LCD
    122c:	0e 94 df 10 	call	0x21be	; 0x21be <clear>
	return flag;
}
    1230:	ce 01       	movw	r24, r28
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	08 95       	ret

00001238 <checkDecision>:

int checkDecision()
{
    1238:	0f 93       	push	r16
    123a:	1f 93       	push	r17
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
    1240:	c7 e0       	ldi	r28, 0x07	; 7
    1242:	d2 e0       	ldi	r29, 0x02	; 2
	int decision = LOW, turn, resultTemp = 0;
	do{
		turn = 0;
		checkAfslag();
    1244:	0e 94 d7 08 	call	0x11ae	; 0x11ae <checkAfslag>
    1248:	e1 e0       	ldi	r30, 0x01	; 1
    124a:	f2 e0       	ldi	r31, 0x02	; 2

int checkDecision()
{
	int decision = LOW, turn, resultTemp = 0;
	do{
		turn = 0;
    124c:	00 e0       	ldi	r16, 0x00	; 0
    124e:	10 e0       	ldi	r17, 0x00	; 0
		checkAfslag();
		for(int i = 0; i < 3; i++){
			if(situations[i] == HIGH){                                                     //Counts number of possible turns
    1250:	81 91       	ld	r24, Z+
    1252:	91 91       	ld	r25, Z+
    1254:	01 97       	sbiw	r24, 0x01	; 1
    1256:	11 f4       	brne	.+4      	; 0x125c <checkDecision+0x24>
				turn++;
    1258:	0f 5f       	subi	r16, 0xFF	; 255
    125a:	1f 4f       	sbci	r17, 0xFF	; 255
{
	int decision = LOW, turn, resultTemp = 0;
	do{
		turn = 0;
		checkAfslag();
		for(int i = 0; i < 3; i++){
    125c:	ec 17       	cp	r30, r28
    125e:	fd 07       	cpc	r31, r29
    1260:	b9 f7       	brne	.-18     	; 0x1250 <checkDecision+0x18>
			if(situations[i] == HIGH){                                                     //Counts number of possible turns
				turn++;
			}
		}
		followLine();
    1262:	0e 94 91 08 	call	0x1122	; 0x1122 <followLine>
		//	checkDistance();
	}while(checkAfslag() == 0);                                                           //Keep following the line if the sensor does not detect any intersections
    1266:	0e 94 d7 08 	call	0x11ae	; 0x11ae <checkAfslag>
    126a:	89 2b       	or	r24, r25
    126c:	59 f3       	breq	.-42     	; 0x1244 <checkDecision+0xc>
	
	resultTemp = turn;                                                                    //If there is more than one option, the robot has to make a decision
	if(resultTemp > 1){
		decision = HIGH;
	}
	return decision;
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	02 30       	cpi	r16, 0x02	; 2
    1274:	11 05       	cpc	r17, r1
    1276:	14 f4       	brge	.+4      	; 0x127c <checkDecision+0x44>
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	90 e0       	ldi	r25, 0x00	; 0
}
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	1f 91       	pop	r17
    1282:	0f 91       	pop	r16
    1284:	08 95       	ret

00001286 <__subsf3>:
    1286:	50 58       	subi	r21, 0x80	; 128

00001288 <__addsf3>:
    1288:	bb 27       	eor	r27, r27
    128a:	aa 27       	eor	r26, r26
    128c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__addsf3x>
    1290:	0c 94 63 0a 	jmp	0x14c6	; 0x14c6 <__fp_round>
    1294:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__fp_pscA>
    1298:	38 f0       	brcs	.+14     	; 0x12a8 <__addsf3+0x20>
    129a:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__fp_pscB>
    129e:	20 f0       	brcs	.+8      	; 0x12a8 <__addsf3+0x20>
    12a0:	39 f4       	brne	.+14     	; 0x12b0 <__addsf3+0x28>
    12a2:	9f 3f       	cpi	r25, 0xFF	; 255
    12a4:	19 f4       	brne	.+6      	; 0x12ac <__addsf3+0x24>
    12a6:	26 f4       	brtc	.+8      	; 0x12b0 <__addsf3+0x28>
    12a8:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__fp_nan>
    12ac:	0e f4       	brtc	.+2      	; 0x12b0 <__addsf3+0x28>
    12ae:	e0 95       	com	r30
    12b0:	e7 fb       	bst	r30, 7
    12b2:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__fp_inf>

000012b6 <__addsf3x>:
    12b6:	e9 2f       	mov	r30, r25
    12b8:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__fp_split3>
    12bc:	58 f3       	brcs	.-42     	; 0x1294 <__addsf3+0xc>
    12be:	ba 17       	cp	r27, r26
    12c0:	62 07       	cpc	r22, r18
    12c2:	73 07       	cpc	r23, r19
    12c4:	84 07       	cpc	r24, r20
    12c6:	95 07       	cpc	r25, r21
    12c8:	20 f0       	brcs	.+8      	; 0x12d2 <__addsf3x+0x1c>
    12ca:	79 f4       	brne	.+30     	; 0x12ea <__addsf3x+0x34>
    12cc:	a6 f5       	brtc	.+104    	; 0x1336 <__addsf3x+0x80>
    12ce:	0c 94 96 0a 	jmp	0x152c	; 0x152c <__fp_zero>
    12d2:	0e f4       	brtc	.+2      	; 0x12d6 <__addsf3x+0x20>
    12d4:	e0 95       	com	r30
    12d6:	0b 2e       	mov	r0, r27
    12d8:	ba 2f       	mov	r27, r26
    12da:	a0 2d       	mov	r26, r0
    12dc:	0b 01       	movw	r0, r22
    12de:	b9 01       	movw	r22, r18
    12e0:	90 01       	movw	r18, r0
    12e2:	0c 01       	movw	r0, r24
    12e4:	ca 01       	movw	r24, r20
    12e6:	a0 01       	movw	r20, r0
    12e8:	11 24       	eor	r1, r1
    12ea:	ff 27       	eor	r31, r31
    12ec:	59 1b       	sub	r21, r25
    12ee:	99 f0       	breq	.+38     	; 0x1316 <__addsf3x+0x60>
    12f0:	59 3f       	cpi	r21, 0xF9	; 249
    12f2:	50 f4       	brcc	.+20     	; 0x1308 <__addsf3x+0x52>
    12f4:	50 3e       	cpi	r21, 0xE0	; 224
    12f6:	68 f1       	brcs	.+90     	; 0x1352 <__addsf3x+0x9c>
    12f8:	1a 16       	cp	r1, r26
    12fa:	f0 40       	sbci	r31, 0x00	; 0
    12fc:	a2 2f       	mov	r26, r18
    12fe:	23 2f       	mov	r18, r19
    1300:	34 2f       	mov	r19, r20
    1302:	44 27       	eor	r20, r20
    1304:	58 5f       	subi	r21, 0xF8	; 248
    1306:	f3 cf       	rjmp	.-26     	; 0x12ee <__addsf3x+0x38>
    1308:	46 95       	lsr	r20
    130a:	37 95       	ror	r19
    130c:	27 95       	ror	r18
    130e:	a7 95       	ror	r26
    1310:	f0 40       	sbci	r31, 0x00	; 0
    1312:	53 95       	inc	r21
    1314:	c9 f7       	brne	.-14     	; 0x1308 <__addsf3x+0x52>
    1316:	7e f4       	brtc	.+30     	; 0x1336 <__addsf3x+0x80>
    1318:	1f 16       	cp	r1, r31
    131a:	ba 0b       	sbc	r27, r26
    131c:	62 0b       	sbc	r22, r18
    131e:	73 0b       	sbc	r23, r19
    1320:	84 0b       	sbc	r24, r20
    1322:	ba f0       	brmi	.+46     	; 0x1352 <__addsf3x+0x9c>
    1324:	91 50       	subi	r25, 0x01	; 1
    1326:	a1 f0       	breq	.+40     	; 0x1350 <__addsf3x+0x9a>
    1328:	ff 0f       	add	r31, r31
    132a:	bb 1f       	adc	r27, r27
    132c:	66 1f       	adc	r22, r22
    132e:	77 1f       	adc	r23, r23
    1330:	88 1f       	adc	r24, r24
    1332:	c2 f7       	brpl	.-16     	; 0x1324 <__addsf3x+0x6e>
    1334:	0e c0       	rjmp	.+28     	; 0x1352 <__addsf3x+0x9c>
    1336:	ba 0f       	add	r27, r26
    1338:	62 1f       	adc	r22, r18
    133a:	73 1f       	adc	r23, r19
    133c:	84 1f       	adc	r24, r20
    133e:	48 f4       	brcc	.+18     	; 0x1352 <__addsf3x+0x9c>
    1340:	87 95       	ror	r24
    1342:	77 95       	ror	r23
    1344:	67 95       	ror	r22
    1346:	b7 95       	ror	r27
    1348:	f7 95       	ror	r31
    134a:	9e 3f       	cpi	r25, 0xFE	; 254
    134c:	08 f0       	brcs	.+2      	; 0x1350 <__addsf3x+0x9a>
    134e:	b0 cf       	rjmp	.-160    	; 0x12b0 <__addsf3+0x28>
    1350:	93 95       	inc	r25
    1352:	88 0f       	add	r24, r24
    1354:	08 f0       	brcs	.+2      	; 0x1358 <__addsf3x+0xa2>
    1356:	99 27       	eor	r25, r25
    1358:	ee 0f       	add	r30, r30
    135a:	97 95       	ror	r25
    135c:	87 95       	ror	r24
    135e:	08 95       	ret

00001360 <__cmpsf2>:
    1360:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fp_cmp>
    1364:	08 f4       	brcc	.+2      	; 0x1368 <__cmpsf2+0x8>
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	08 95       	ret

0000136a <__fixsfsi>:
    136a:	0e 94 bc 09 	call	0x1378	; 0x1378 <__fixunssfsi>
    136e:	68 94       	set
    1370:	b1 11       	cpse	r27, r1
    1372:	0c 94 97 0a 	jmp	0x152e	; 0x152e <__fp_szero>
    1376:	08 95       	ret

00001378 <__fixunssfsi>:
    1378:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__fp_splitA>
    137c:	88 f0       	brcs	.+34     	; 0x13a0 <__fixunssfsi+0x28>
    137e:	9f 57       	subi	r25, 0x7F	; 127
    1380:	98 f0       	brcs	.+38     	; 0x13a8 <__fixunssfsi+0x30>
    1382:	b9 2f       	mov	r27, r25
    1384:	99 27       	eor	r25, r25
    1386:	b7 51       	subi	r27, 0x17	; 23
    1388:	b0 f0       	brcs	.+44     	; 0x13b6 <__fixunssfsi+0x3e>
    138a:	e1 f0       	breq	.+56     	; 0x13c4 <__fixunssfsi+0x4c>
    138c:	66 0f       	add	r22, r22
    138e:	77 1f       	adc	r23, r23
    1390:	88 1f       	adc	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	1a f0       	brmi	.+6      	; 0x139c <__fixunssfsi+0x24>
    1396:	ba 95       	dec	r27
    1398:	c9 f7       	brne	.-14     	; 0x138c <__fixunssfsi+0x14>
    139a:	14 c0       	rjmp	.+40     	; 0x13c4 <__fixunssfsi+0x4c>
    139c:	b1 30       	cpi	r27, 0x01	; 1
    139e:	91 f0       	breq	.+36     	; 0x13c4 <__fixunssfsi+0x4c>
    13a0:	0e 94 96 0a 	call	0x152c	; 0x152c <__fp_zero>
    13a4:	b1 e0       	ldi	r27, 0x01	; 1
    13a6:	08 95       	ret
    13a8:	0c 94 96 0a 	jmp	0x152c	; 0x152c <__fp_zero>
    13ac:	67 2f       	mov	r22, r23
    13ae:	78 2f       	mov	r23, r24
    13b0:	88 27       	eor	r24, r24
    13b2:	b8 5f       	subi	r27, 0xF8	; 248
    13b4:	39 f0       	breq	.+14     	; 0x13c4 <__fixunssfsi+0x4c>
    13b6:	b9 3f       	cpi	r27, 0xF9	; 249
    13b8:	cc f3       	brlt	.-14     	; 0x13ac <__fixunssfsi+0x34>
    13ba:	86 95       	lsr	r24
    13bc:	77 95       	ror	r23
    13be:	67 95       	ror	r22
    13c0:	b3 95       	inc	r27
    13c2:	d9 f7       	brne	.-10     	; 0x13ba <__fixunssfsi+0x42>
    13c4:	3e f4       	brtc	.+14     	; 0x13d4 <__fixunssfsi+0x5c>
    13c6:	90 95       	com	r25
    13c8:	80 95       	com	r24
    13ca:	70 95       	com	r23
    13cc:	61 95       	neg	r22
    13ce:	7f 4f       	sbci	r23, 0xFF	; 255
    13d0:	8f 4f       	sbci	r24, 0xFF	; 255
    13d2:	9f 4f       	sbci	r25, 0xFF	; 255
    13d4:	08 95       	ret

000013d6 <__floatunsisf>:
    13d6:	e8 94       	clt
    13d8:	09 c0       	rjmp	.+18     	; 0x13ec <__floatsisf+0x12>

000013da <__floatsisf>:
    13da:	97 fb       	bst	r25, 7
    13dc:	3e f4       	brtc	.+14     	; 0x13ec <__floatsisf+0x12>
    13de:	90 95       	com	r25
    13e0:	80 95       	com	r24
    13e2:	70 95       	com	r23
    13e4:	61 95       	neg	r22
    13e6:	7f 4f       	sbci	r23, 0xFF	; 255
    13e8:	8f 4f       	sbci	r24, 0xFF	; 255
    13ea:	9f 4f       	sbci	r25, 0xFF	; 255
    13ec:	99 23       	and	r25, r25
    13ee:	a9 f0       	breq	.+42     	; 0x141a <__floatsisf+0x40>
    13f0:	f9 2f       	mov	r31, r25
    13f2:	96 e9       	ldi	r25, 0x96	; 150
    13f4:	bb 27       	eor	r27, r27
    13f6:	93 95       	inc	r25
    13f8:	f6 95       	lsr	r31
    13fa:	87 95       	ror	r24
    13fc:	77 95       	ror	r23
    13fe:	67 95       	ror	r22
    1400:	b7 95       	ror	r27
    1402:	f1 11       	cpse	r31, r1
    1404:	f8 cf       	rjmp	.-16     	; 0x13f6 <__floatsisf+0x1c>
    1406:	fa f4       	brpl	.+62     	; 0x1446 <__floatsisf+0x6c>
    1408:	bb 0f       	add	r27, r27
    140a:	11 f4       	brne	.+4      	; 0x1410 <__floatsisf+0x36>
    140c:	60 ff       	sbrs	r22, 0
    140e:	1b c0       	rjmp	.+54     	; 0x1446 <__floatsisf+0x6c>
    1410:	6f 5f       	subi	r22, 0xFF	; 255
    1412:	7f 4f       	sbci	r23, 0xFF	; 255
    1414:	8f 4f       	sbci	r24, 0xFF	; 255
    1416:	9f 4f       	sbci	r25, 0xFF	; 255
    1418:	16 c0       	rjmp	.+44     	; 0x1446 <__floatsisf+0x6c>
    141a:	88 23       	and	r24, r24
    141c:	11 f0       	breq	.+4      	; 0x1422 <__floatsisf+0x48>
    141e:	96 e9       	ldi	r25, 0x96	; 150
    1420:	11 c0       	rjmp	.+34     	; 0x1444 <__floatsisf+0x6a>
    1422:	77 23       	and	r23, r23
    1424:	21 f0       	breq	.+8      	; 0x142e <__floatsisf+0x54>
    1426:	9e e8       	ldi	r25, 0x8E	; 142
    1428:	87 2f       	mov	r24, r23
    142a:	76 2f       	mov	r23, r22
    142c:	05 c0       	rjmp	.+10     	; 0x1438 <__floatsisf+0x5e>
    142e:	66 23       	and	r22, r22
    1430:	71 f0       	breq	.+28     	; 0x144e <__floatsisf+0x74>
    1432:	96 e8       	ldi	r25, 0x86	; 134
    1434:	86 2f       	mov	r24, r22
    1436:	70 e0       	ldi	r23, 0x00	; 0
    1438:	60 e0       	ldi	r22, 0x00	; 0
    143a:	2a f0       	brmi	.+10     	; 0x1446 <__floatsisf+0x6c>
    143c:	9a 95       	dec	r25
    143e:	66 0f       	add	r22, r22
    1440:	77 1f       	adc	r23, r23
    1442:	88 1f       	adc	r24, r24
    1444:	da f7       	brpl	.-10     	; 0x143c <__floatsisf+0x62>
    1446:	88 0f       	add	r24, r24
    1448:	96 95       	lsr	r25
    144a:	87 95       	ror	r24
    144c:	97 f9       	bld	r25, 7
    144e:	08 95       	ret

00001450 <__fp_cmp>:
    1450:	99 0f       	add	r25, r25
    1452:	00 08       	sbc	r0, r0
    1454:	55 0f       	add	r21, r21
    1456:	aa 0b       	sbc	r26, r26
    1458:	e0 e8       	ldi	r30, 0x80	; 128
    145a:	fe ef       	ldi	r31, 0xFE	; 254
    145c:	16 16       	cp	r1, r22
    145e:	17 06       	cpc	r1, r23
    1460:	e8 07       	cpc	r30, r24
    1462:	f9 07       	cpc	r31, r25
    1464:	c0 f0       	brcs	.+48     	; 0x1496 <__fp_cmp+0x46>
    1466:	12 16       	cp	r1, r18
    1468:	13 06       	cpc	r1, r19
    146a:	e4 07       	cpc	r30, r20
    146c:	f5 07       	cpc	r31, r21
    146e:	98 f0       	brcs	.+38     	; 0x1496 <__fp_cmp+0x46>
    1470:	62 1b       	sub	r22, r18
    1472:	73 0b       	sbc	r23, r19
    1474:	84 0b       	sbc	r24, r20
    1476:	95 0b       	sbc	r25, r21
    1478:	39 f4       	brne	.+14     	; 0x1488 <__fp_cmp+0x38>
    147a:	0a 26       	eor	r0, r26
    147c:	61 f0       	breq	.+24     	; 0x1496 <__fp_cmp+0x46>
    147e:	23 2b       	or	r18, r19
    1480:	24 2b       	or	r18, r20
    1482:	25 2b       	or	r18, r21
    1484:	21 f4       	brne	.+8      	; 0x148e <__fp_cmp+0x3e>
    1486:	08 95       	ret
    1488:	0a 26       	eor	r0, r26
    148a:	09 f4       	brne	.+2      	; 0x148e <__fp_cmp+0x3e>
    148c:	a1 40       	sbci	r26, 0x01	; 1
    148e:	a6 95       	lsr	r26
    1490:	8f ef       	ldi	r24, 0xFF	; 255
    1492:	81 1d       	adc	r24, r1
    1494:	81 1d       	adc	r24, r1
    1496:	08 95       	ret

00001498 <__fp_inf>:
    1498:	97 f9       	bld	r25, 7
    149a:	9f 67       	ori	r25, 0x7F	; 127
    149c:	80 e8       	ldi	r24, 0x80	; 128
    149e:	70 e0       	ldi	r23, 0x00	; 0
    14a0:	60 e0       	ldi	r22, 0x00	; 0
    14a2:	08 95       	ret

000014a4 <__fp_nan>:
    14a4:	9f ef       	ldi	r25, 0xFF	; 255
    14a6:	80 ec       	ldi	r24, 0xC0	; 192
    14a8:	08 95       	ret

000014aa <__fp_pscA>:
    14aa:	00 24       	eor	r0, r0
    14ac:	0a 94       	dec	r0
    14ae:	16 16       	cp	r1, r22
    14b0:	17 06       	cpc	r1, r23
    14b2:	18 06       	cpc	r1, r24
    14b4:	09 06       	cpc	r0, r25
    14b6:	08 95       	ret

000014b8 <__fp_pscB>:
    14b8:	00 24       	eor	r0, r0
    14ba:	0a 94       	dec	r0
    14bc:	12 16       	cp	r1, r18
    14be:	13 06       	cpc	r1, r19
    14c0:	14 06       	cpc	r1, r20
    14c2:	05 06       	cpc	r0, r21
    14c4:	08 95       	ret

000014c6 <__fp_round>:
    14c6:	09 2e       	mov	r0, r25
    14c8:	03 94       	inc	r0
    14ca:	00 0c       	add	r0, r0
    14cc:	11 f4       	brne	.+4      	; 0x14d2 <__fp_round+0xc>
    14ce:	88 23       	and	r24, r24
    14d0:	52 f0       	brmi	.+20     	; 0x14e6 <__fp_round+0x20>
    14d2:	bb 0f       	add	r27, r27
    14d4:	40 f4       	brcc	.+16     	; 0x14e6 <__fp_round+0x20>
    14d6:	bf 2b       	or	r27, r31
    14d8:	11 f4       	brne	.+4      	; 0x14de <__fp_round+0x18>
    14da:	60 ff       	sbrs	r22, 0
    14dc:	04 c0       	rjmp	.+8      	; 0x14e6 <__fp_round+0x20>
    14de:	6f 5f       	subi	r22, 0xFF	; 255
    14e0:	7f 4f       	sbci	r23, 0xFF	; 255
    14e2:	8f 4f       	sbci	r24, 0xFF	; 255
    14e4:	9f 4f       	sbci	r25, 0xFF	; 255
    14e6:	08 95       	ret

000014e8 <__fp_split3>:
    14e8:	57 fd       	sbrc	r21, 7
    14ea:	90 58       	subi	r25, 0x80	; 128
    14ec:	44 0f       	add	r20, r20
    14ee:	55 1f       	adc	r21, r21
    14f0:	59 f0       	breq	.+22     	; 0x1508 <__fp_splitA+0x10>
    14f2:	5f 3f       	cpi	r21, 0xFF	; 255
    14f4:	71 f0       	breq	.+28     	; 0x1512 <__fp_splitA+0x1a>
    14f6:	47 95       	ror	r20

000014f8 <__fp_splitA>:
    14f8:	88 0f       	add	r24, r24
    14fa:	97 fb       	bst	r25, 7
    14fc:	99 1f       	adc	r25, r25
    14fe:	61 f0       	breq	.+24     	; 0x1518 <__fp_splitA+0x20>
    1500:	9f 3f       	cpi	r25, 0xFF	; 255
    1502:	79 f0       	breq	.+30     	; 0x1522 <__fp_splitA+0x2a>
    1504:	87 95       	ror	r24
    1506:	08 95       	ret
    1508:	12 16       	cp	r1, r18
    150a:	13 06       	cpc	r1, r19
    150c:	14 06       	cpc	r1, r20
    150e:	55 1f       	adc	r21, r21
    1510:	f2 cf       	rjmp	.-28     	; 0x14f6 <__fp_split3+0xe>
    1512:	46 95       	lsr	r20
    1514:	f1 df       	rcall	.-30     	; 0x14f8 <__fp_splitA>
    1516:	08 c0       	rjmp	.+16     	; 0x1528 <__fp_splitA+0x30>
    1518:	16 16       	cp	r1, r22
    151a:	17 06       	cpc	r1, r23
    151c:	18 06       	cpc	r1, r24
    151e:	99 1f       	adc	r25, r25
    1520:	f1 cf       	rjmp	.-30     	; 0x1504 <__fp_splitA+0xc>
    1522:	86 95       	lsr	r24
    1524:	71 05       	cpc	r23, r1
    1526:	61 05       	cpc	r22, r1
    1528:	08 94       	sec
    152a:	08 95       	ret

0000152c <__fp_zero>:
    152c:	e8 94       	clt

0000152e <__fp_szero>:
    152e:	bb 27       	eor	r27, r27
    1530:	66 27       	eor	r22, r22
    1532:	77 27       	eor	r23, r23
    1534:	cb 01       	movw	r24, r22
    1536:	97 f9       	bld	r25, 7
    1538:	08 95       	ret

0000153a <__gesf2>:
    153a:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fp_cmp>
    153e:	08 f4       	brcc	.+2      	; 0x1542 <__gesf2+0x8>
    1540:	8f ef       	ldi	r24, 0xFF	; 255
    1542:	08 95       	ret

00001544 <__mulsf3>:
    1544:	0e 94 b5 0a 	call	0x156a	; 0x156a <__mulsf3x>
    1548:	0c 94 63 0a 	jmp	0x14c6	; 0x14c6 <__fp_round>
    154c:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__fp_pscA>
    1550:	38 f0       	brcs	.+14     	; 0x1560 <__mulsf3+0x1c>
    1552:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__fp_pscB>
    1556:	20 f0       	brcs	.+8      	; 0x1560 <__mulsf3+0x1c>
    1558:	95 23       	and	r25, r21
    155a:	11 f0       	breq	.+4      	; 0x1560 <__mulsf3+0x1c>
    155c:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__fp_inf>
    1560:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__fp_nan>
    1564:	11 24       	eor	r1, r1
    1566:	0c 94 97 0a 	jmp	0x152e	; 0x152e <__fp_szero>

0000156a <__mulsf3x>:
    156a:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__fp_split3>
    156e:	70 f3       	brcs	.-36     	; 0x154c <__mulsf3+0x8>

00001570 <__mulsf3_pse>:
    1570:	95 9f       	mul	r25, r21
    1572:	c1 f3       	breq	.-16     	; 0x1564 <__mulsf3+0x20>
    1574:	95 0f       	add	r25, r21
    1576:	50 e0       	ldi	r21, 0x00	; 0
    1578:	55 1f       	adc	r21, r21
    157a:	62 9f       	mul	r22, r18
    157c:	f0 01       	movw	r30, r0
    157e:	72 9f       	mul	r23, r18
    1580:	bb 27       	eor	r27, r27
    1582:	f0 0d       	add	r31, r0
    1584:	b1 1d       	adc	r27, r1
    1586:	63 9f       	mul	r22, r19
    1588:	aa 27       	eor	r26, r26
    158a:	f0 0d       	add	r31, r0
    158c:	b1 1d       	adc	r27, r1
    158e:	aa 1f       	adc	r26, r26
    1590:	64 9f       	mul	r22, r20
    1592:	66 27       	eor	r22, r22
    1594:	b0 0d       	add	r27, r0
    1596:	a1 1d       	adc	r26, r1
    1598:	66 1f       	adc	r22, r22
    159a:	82 9f       	mul	r24, r18
    159c:	22 27       	eor	r18, r18
    159e:	b0 0d       	add	r27, r0
    15a0:	a1 1d       	adc	r26, r1
    15a2:	62 1f       	adc	r22, r18
    15a4:	73 9f       	mul	r23, r19
    15a6:	b0 0d       	add	r27, r0
    15a8:	a1 1d       	adc	r26, r1
    15aa:	62 1f       	adc	r22, r18
    15ac:	83 9f       	mul	r24, r19
    15ae:	a0 0d       	add	r26, r0
    15b0:	61 1d       	adc	r22, r1
    15b2:	22 1f       	adc	r18, r18
    15b4:	74 9f       	mul	r23, r20
    15b6:	33 27       	eor	r19, r19
    15b8:	a0 0d       	add	r26, r0
    15ba:	61 1d       	adc	r22, r1
    15bc:	23 1f       	adc	r18, r19
    15be:	84 9f       	mul	r24, r20
    15c0:	60 0d       	add	r22, r0
    15c2:	21 1d       	adc	r18, r1
    15c4:	82 2f       	mov	r24, r18
    15c6:	76 2f       	mov	r23, r22
    15c8:	6a 2f       	mov	r22, r26
    15ca:	11 24       	eor	r1, r1
    15cc:	9f 57       	subi	r25, 0x7F	; 127
    15ce:	50 40       	sbci	r21, 0x00	; 0
    15d0:	9a f0       	brmi	.+38     	; 0x15f8 <__mulsf3_pse+0x88>
    15d2:	f1 f0       	breq	.+60     	; 0x1610 <__mulsf3_pse+0xa0>
    15d4:	88 23       	and	r24, r24
    15d6:	4a f0       	brmi	.+18     	; 0x15ea <__mulsf3_pse+0x7a>
    15d8:	ee 0f       	add	r30, r30
    15da:	ff 1f       	adc	r31, r31
    15dc:	bb 1f       	adc	r27, r27
    15de:	66 1f       	adc	r22, r22
    15e0:	77 1f       	adc	r23, r23
    15e2:	88 1f       	adc	r24, r24
    15e4:	91 50       	subi	r25, 0x01	; 1
    15e6:	50 40       	sbci	r21, 0x00	; 0
    15e8:	a9 f7       	brne	.-22     	; 0x15d4 <__mulsf3_pse+0x64>
    15ea:	9e 3f       	cpi	r25, 0xFE	; 254
    15ec:	51 05       	cpc	r21, r1
    15ee:	80 f0       	brcs	.+32     	; 0x1610 <__mulsf3_pse+0xa0>
    15f0:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__fp_inf>
    15f4:	0c 94 97 0a 	jmp	0x152e	; 0x152e <__fp_szero>
    15f8:	5f 3f       	cpi	r21, 0xFF	; 255
    15fa:	e4 f3       	brlt	.-8      	; 0x15f4 <__mulsf3_pse+0x84>
    15fc:	98 3e       	cpi	r25, 0xE8	; 232
    15fe:	d4 f3       	brlt	.-12     	; 0x15f4 <__mulsf3_pse+0x84>
    1600:	86 95       	lsr	r24
    1602:	77 95       	ror	r23
    1604:	67 95       	ror	r22
    1606:	b7 95       	ror	r27
    1608:	f7 95       	ror	r31
    160a:	e7 95       	ror	r30
    160c:	9f 5f       	subi	r25, 0xFF	; 255
    160e:	c1 f7       	brne	.-16     	; 0x1600 <__mulsf3_pse+0x90>
    1610:	fe 2b       	or	r31, r30
    1612:	88 0f       	add	r24, r24
    1614:	91 1d       	adc	r25, r1
    1616:	96 95       	lsr	r25
    1618:	87 95       	ror	r24
    161a:	97 f9       	bld	r25, 7
    161c:	08 95       	ret

0000161e <sin>:
    161e:	9f 93       	push	r25
    1620:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <__fp_rempio2>
    1624:	0f 90       	pop	r0
    1626:	07 fc       	sbrc	r0, 7
    1628:	ee 5f       	subi	r30, 0xFE	; 254
    162a:	0c 94 9d 0b 	jmp	0x173a	; 0x173a <__fp_sinus>
    162e:	19 f4       	brne	.+6      	; 0x1636 <sin+0x18>
    1630:	16 f4       	brtc	.+4      	; 0x1636 <sin+0x18>
    1632:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__fp_nan>
    1636:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__fp_mpack>

0000163a <sqrt>:
    163a:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__fp_splitA>
    163e:	b8 f3       	brcs	.-18     	; 0x162e <sin+0x10>
    1640:	99 23       	and	r25, r25
    1642:	c9 f3       	breq	.-14     	; 0x1636 <sin+0x18>
    1644:	b6 f3       	brts	.-20     	; 0x1632 <sin+0x14>
    1646:	9f 57       	subi	r25, 0x7F	; 127
    1648:	55 0b       	sbc	r21, r21
    164a:	87 ff       	sbrs	r24, 7
    164c:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__fp_norm2>
    1650:	00 24       	eor	r0, r0
    1652:	a0 e6       	ldi	r26, 0x60	; 96
    1654:	40 ea       	ldi	r20, 0xA0	; 160
    1656:	90 01       	movw	r18, r0
    1658:	80 58       	subi	r24, 0x80	; 128
    165a:	56 95       	lsr	r21
    165c:	97 95       	ror	r25
    165e:	28 f4       	brcc	.+10     	; 0x166a <sqrt+0x30>
    1660:	80 5c       	subi	r24, 0xC0	; 192
    1662:	66 0f       	add	r22, r22
    1664:	77 1f       	adc	r23, r23
    1666:	88 1f       	adc	r24, r24
    1668:	20 f0       	brcs	.+8      	; 0x1672 <sqrt+0x38>
    166a:	26 17       	cp	r18, r22
    166c:	37 07       	cpc	r19, r23
    166e:	48 07       	cpc	r20, r24
    1670:	30 f4       	brcc	.+12     	; 0x167e <sqrt+0x44>
    1672:	62 1b       	sub	r22, r18
    1674:	73 0b       	sbc	r23, r19
    1676:	84 0b       	sbc	r24, r20
    1678:	20 29       	or	r18, r0
    167a:	31 29       	or	r19, r1
    167c:	4a 2b       	or	r20, r26
    167e:	a6 95       	lsr	r26
    1680:	17 94       	ror	r1
    1682:	07 94       	ror	r0
    1684:	20 25       	eor	r18, r0
    1686:	31 25       	eor	r19, r1
    1688:	4a 27       	eor	r20, r26
    168a:	58 f7       	brcc	.-42     	; 0x1662 <sqrt+0x28>
    168c:	66 0f       	add	r22, r22
    168e:	77 1f       	adc	r23, r23
    1690:	88 1f       	adc	r24, r24
    1692:	20 f0       	brcs	.+8      	; 0x169c <sqrt+0x62>
    1694:	26 17       	cp	r18, r22
    1696:	37 07       	cpc	r19, r23
    1698:	48 07       	cpc	r20, r24
    169a:	30 f4       	brcc	.+12     	; 0x16a8 <sqrt+0x6e>
    169c:	62 0b       	sbc	r22, r18
    169e:	73 0b       	sbc	r23, r19
    16a0:	84 0b       	sbc	r24, r20
    16a2:	20 0d       	add	r18, r0
    16a4:	31 1d       	adc	r19, r1
    16a6:	41 1d       	adc	r20, r1
    16a8:	a0 95       	com	r26
    16aa:	81 f7       	brne	.-32     	; 0x168c <sqrt+0x52>
    16ac:	b9 01       	movw	r22, r18
    16ae:	84 2f       	mov	r24, r20
    16b0:	91 58       	subi	r25, 0x81	; 129
    16b2:	88 0f       	add	r24, r24
    16b4:	96 95       	lsr	r25
    16b6:	87 95       	ror	r24
    16b8:	08 95       	ret

000016ba <__fp_mpack>:
    16ba:	9f 3f       	cpi	r25, 0xFF	; 255
    16bc:	31 f0       	breq	.+12     	; 0x16ca <__fp_mpack_finite+0xc>

000016be <__fp_mpack_finite>:
    16be:	91 50       	subi	r25, 0x01	; 1
    16c0:	20 f4       	brcc	.+8      	; 0x16ca <__fp_mpack_finite+0xc>
    16c2:	87 95       	ror	r24
    16c4:	77 95       	ror	r23
    16c6:	67 95       	ror	r22
    16c8:	b7 95       	ror	r27
    16ca:	88 0f       	add	r24, r24
    16cc:	91 1d       	adc	r25, r1
    16ce:	96 95       	lsr	r25
    16d0:	87 95       	ror	r24
    16d2:	97 f9       	bld	r25, 7
    16d4:	08 95       	ret

000016d6 <__fp_norm2>:
    16d6:	91 50       	subi	r25, 0x01	; 1
    16d8:	50 40       	sbci	r21, 0x00	; 0
    16da:	66 0f       	add	r22, r22
    16dc:	77 1f       	adc	r23, r23
    16de:	88 1f       	adc	r24, r24
    16e0:	d2 f7       	brpl	.-12     	; 0x16d6 <__fp_norm2>
    16e2:	08 95       	ret
    16e4:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__fp_nan>

000016e8 <__fp_rempio2>:
    16e8:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__fp_splitA>
    16ec:	d8 f3       	brcs	.-10     	; 0x16e4 <__fp_norm2+0xe>
    16ee:	e8 94       	clt
    16f0:	e0 e0       	ldi	r30, 0x00	; 0
    16f2:	bb 27       	eor	r27, r27
    16f4:	9f 57       	subi	r25, 0x7F	; 127
    16f6:	f0 f0       	brcs	.+60     	; 0x1734 <__fp_rempio2+0x4c>
    16f8:	2a ed       	ldi	r18, 0xDA	; 218
    16fa:	3f e0       	ldi	r19, 0x0F	; 15
    16fc:	49 ec       	ldi	r20, 0xC9	; 201
    16fe:	06 c0       	rjmp	.+12     	; 0x170c <__fp_rempio2+0x24>
    1700:	ee 0f       	add	r30, r30
    1702:	bb 0f       	add	r27, r27
    1704:	66 1f       	adc	r22, r22
    1706:	77 1f       	adc	r23, r23
    1708:	88 1f       	adc	r24, r24
    170a:	28 f0       	brcs	.+10     	; 0x1716 <__fp_rempio2+0x2e>
    170c:	b2 3a       	cpi	r27, 0xA2	; 162
    170e:	62 07       	cpc	r22, r18
    1710:	73 07       	cpc	r23, r19
    1712:	84 07       	cpc	r24, r20
    1714:	28 f0       	brcs	.+10     	; 0x1720 <__fp_rempio2+0x38>
    1716:	b2 5a       	subi	r27, 0xA2	; 162
    1718:	62 0b       	sbc	r22, r18
    171a:	73 0b       	sbc	r23, r19
    171c:	84 0b       	sbc	r24, r20
    171e:	e3 95       	inc	r30
    1720:	9a 95       	dec	r25
    1722:	72 f7       	brpl	.-36     	; 0x1700 <__fp_rempio2+0x18>
    1724:	80 38       	cpi	r24, 0x80	; 128
    1726:	30 f4       	brcc	.+12     	; 0x1734 <__fp_rempio2+0x4c>
    1728:	9a 95       	dec	r25
    172a:	bb 0f       	add	r27, r27
    172c:	66 1f       	adc	r22, r22
    172e:	77 1f       	adc	r23, r23
    1730:	88 1f       	adc	r24, r24
    1732:	d2 f7       	brpl	.-12     	; 0x1728 <__fp_rempio2+0x40>
    1734:	90 48       	sbci	r25, 0x80	; 128
    1736:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <__fp_mpack_finite>

0000173a <__fp_sinus>:
    173a:	ef 93       	push	r30
    173c:	e0 ff       	sbrs	r30, 0
    173e:	07 c0       	rjmp	.+14     	; 0x174e <__fp_sinus+0x14>
    1740:	a2 ea       	ldi	r26, 0xA2	; 162
    1742:	2a ed       	ldi	r18, 0xDA	; 218
    1744:	3f e0       	ldi	r19, 0x0F	; 15
    1746:	49 ec       	ldi	r20, 0xC9	; 201
    1748:	5f eb       	ldi	r21, 0xBF	; 191
    174a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__addsf3x>
    174e:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__fp_round>
    1752:	0f 90       	pop	r0
    1754:	03 94       	inc	r0
    1756:	01 fc       	sbrc	r0, 1
    1758:	90 58       	subi	r25, 0x80	; 128
    175a:	e8 e6       	ldi	r30, 0x68	; 104
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	0c 94 b1 0b 	jmp	0x1762	; 0x1762 <__fp_powsodd>

00001762 <__fp_powsodd>:
    1762:	9f 93       	push	r25
    1764:	8f 93       	push	r24
    1766:	7f 93       	push	r23
    1768:	6f 93       	push	r22
    176a:	ff 93       	push	r31
    176c:	ef 93       	push	r30
    176e:	9b 01       	movw	r18, r22
    1770:	ac 01       	movw	r20, r24
    1772:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__mulsf3>
    1776:	ef 91       	pop	r30
    1778:	ff 91       	pop	r31
    177a:	0e 94 c5 0b 	call	0x178a	; 0x178a <__fp_powser>
    177e:	2f 91       	pop	r18
    1780:	3f 91       	pop	r19
    1782:	4f 91       	pop	r20
    1784:	5f 91       	pop	r21
    1786:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <__mulsf3>

0000178a <__fp_powser>:
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	1f 93       	push	r17
    1790:	0f 93       	push	r16
    1792:	ff 92       	push	r15
    1794:	ef 92       	push	r14
    1796:	df 92       	push	r13
    1798:	7b 01       	movw	r14, r22
    179a:	8c 01       	movw	r16, r24
    179c:	68 94       	set
    179e:	06 c0       	rjmp	.+12     	; 0x17ac <__fp_powser+0x22>
    17a0:	da 2e       	mov	r13, r26
    17a2:	ef 01       	movw	r28, r30
    17a4:	0e 94 b5 0a 	call	0x156a	; 0x156a <__mulsf3x>
    17a8:	fe 01       	movw	r30, r28
    17aa:	e8 94       	clt
    17ac:	a5 91       	lpm	r26, Z+
    17ae:	25 91       	lpm	r18, Z+
    17b0:	35 91       	lpm	r19, Z+
    17b2:	45 91       	lpm	r20, Z+
    17b4:	55 91       	lpm	r21, Z+
    17b6:	a6 f3       	brts	.-24     	; 0x17a0 <__fp_powser+0x16>
    17b8:	ef 01       	movw	r28, r30
    17ba:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__addsf3x>
    17be:	fe 01       	movw	r30, r28
    17c0:	97 01       	movw	r18, r14
    17c2:	a8 01       	movw	r20, r16
    17c4:	da 94       	dec	r13
    17c6:	69 f7       	brne	.-38     	; 0x17a2 <__fp_powser+0x18>
    17c8:	df 90       	pop	r13
    17ca:	ef 90       	pop	r14
    17cc:	ff 90       	pop	r15
    17ce:	0f 91       	pop	r16
    17d0:	1f 91       	pop	r17
    17d2:	cf 91       	pop	r28
    17d4:	df 91       	pop	r29
    17d6:	08 95       	ret

000017d8 <_ZN15OrangutanAnalog7setModeEh.part.0>:
    17d8:	ec e7       	ldi	r30, 0x7C	; 124
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	8f 7d       	andi	r24, 0xDF	; 223
    17e0:	80 83       	st	Z, r24
    17e2:	08 95       	ret

000017e4 <_ZN15OrangutanAnalog7setModeEh>:
    17e4:	81 11       	cpse	r24, r1
    17e6:	03 c0       	rjmp	.+6      	; 0x17ee <_ZN15OrangutanAnalog7setModeEh+0xa>
    17e8:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <_ZN15OrangutanAnalog7setModeEh.part.0>
    17ec:	08 95       	ret
    17ee:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    17f2:	80 62       	ori	r24, 0x20	; 32
    17f4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    17f8:	08 95       	ret

000017fa <_ZN15OrangutanAnalog7getModeEv>:
    17fa:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    17fe:	85 fb       	bst	r24, 5
    1800:	88 27       	eor	r24, r24
    1802:	80 f9       	bld	r24, 0
    1804:	08 95       	ret

00001806 <_ZN15OrangutanAnalog16conversionResultEv>:
    1806:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <_ZN15OrangutanAnalog7getModeEv>
    180a:	88 23       	and	r24, r24
    180c:	21 f0       	breq	.+8      	; 0x1816 <_ZN15OrangutanAnalog16conversionResultEv+0x10>
    180e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	08 95       	ret
    1816:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    181a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    181e:	08 95       	ret

00001820 <_ZN15OrangutanAnalog15startConversionEhh>:
    1820:	80 32       	cpi	r24, 0x20	; 32
    1822:	a0 f4       	brcc	.+40     	; 0x184c <_ZN15OrangutanAnalog15startConversionEhh+0x2c>
    1824:	97 e8       	ldi	r25, 0x87	; 135
    1826:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    182a:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    182e:	66 23       	and	r22, r22
    1830:	11 f0       	breq	.+4      	; 0x1836 <_ZN15OrangutanAnalog15startConversionEhh+0x16>
    1832:	90 6c       	ori	r25, 0xC0	; 192
    1834:	02 c0       	rjmp	.+4      	; 0x183a <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
    1836:	9f 77       	andi	r25, 0x7F	; 127
    1838:	90 64       	ori	r25, 0x40	; 64
    183a:	90 7e       	andi	r25, 0xE0	; 224
    183c:	98 2b       	or	r25, r24
    183e:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1842:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1846:	80 64       	ori	r24, 0x40	; 64
    1848:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    184c:	08 95       	ret

0000184e <_ZN15OrangutanAnalog11readAverageEhj>:
    184e:	a0 e0       	ldi	r26, 0x00	; 0
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	ed e2       	ldi	r30, 0x2D	; 45
    1854:	fc e0       	ldi	r31, 0x0C	; 12
    1856:	0c 94 8f 19 	jmp	0x331e	; 0x331e <__prologue_saves__+0x14>
    185a:	eb 01       	movw	r28, r22
    185c:	60 e0       	ldi	r22, 0x00	; 0
    185e:	0e 94 10 0c 	call	0x1820	; 0x1820 <_ZN15OrangutanAnalog15startConversionEhh>
    1862:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1866:	86 fd       	sbrc	r24, 6
    1868:	fc cf       	rjmp	.-8      	; 0x1862 <_ZN15OrangutanAnalog11readAverageEhj+0x14>
    186a:	8e 01       	movw	r16, r28
    186c:	c1 2c       	mov	r12, r1
    186e:	d1 2c       	mov	r13, r1
    1870:	76 01       	movw	r14, r12
    1872:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1876:	80 64       	ori	r24, 0x40	; 64
    1878:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    187c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1880:	86 fd       	sbrc	r24, 6
    1882:	fc cf       	rjmp	.-8      	; 0x187c <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
    1884:	0e 94 03 0c 	call	0x1806	; 0x1806 <_ZN15OrangutanAnalog16conversionResultEv>
    1888:	c8 0e       	add	r12, r24
    188a:	d9 1e       	adc	r13, r25
    188c:	e1 1c       	adc	r14, r1
    188e:	f1 1c       	adc	r15, r1
    1890:	01 50       	subi	r16, 0x01	; 1
    1892:	11 09       	sbc	r17, r1
    1894:	01 15       	cp	r16, r1
    1896:	11 05       	cpc	r17, r1
    1898:	61 f7       	brne	.-40     	; 0x1872 <_ZN15OrangutanAnalog11readAverageEhj+0x24>
    189a:	ce 01       	movw	r24, r28
    189c:	96 95       	lsr	r25
    189e:	87 95       	ror	r24
    18a0:	c0 34       	cpi	r28, 0x40	; 64
    18a2:	d1 05       	cpc	r29, r1
    18a4:	38 f4       	brcc	.+14     	; 0x18b4 <_ZN15OrangutanAnalog11readAverageEhj+0x66>
    18a6:	8c 0d       	add	r24, r12
    18a8:	9d 1d       	adc	r25, r13
    18aa:	be 01       	movw	r22, r28
    18ac:	0e 94 0e 19 	call	0x321c	; 0x321c <__udivmodhi4>
    18b0:	cb 01       	movw	r24, r22
    18b2:	0e c0       	rjmp	.+28     	; 0x18d0 <_ZN15OrangutanAnalog11readAverageEhj+0x82>
    18b4:	a7 01       	movw	r20, r14
    18b6:	96 01       	movw	r18, r12
    18b8:	28 0f       	add	r18, r24
    18ba:	39 1f       	adc	r19, r25
    18bc:	41 1d       	adc	r20, r1
    18be:	51 1d       	adc	r21, r1
    18c0:	ca 01       	movw	r24, r20
    18c2:	b9 01       	movw	r22, r18
    18c4:	9e 01       	movw	r18, r28
    18c6:	40 e0       	ldi	r20, 0x00	; 0
    18c8:	50 e0       	ldi	r21, 0x00	; 0
    18ca:	0e 94 22 19 	call	0x3244	; 0x3244 <__udivmodsi4>
    18ce:	c9 01       	movw	r24, r18
    18d0:	cd b7       	in	r28, 0x3d	; 61
    18d2:	de b7       	in	r29, 0x3e	; 62
    18d4:	e8 e0       	ldi	r30, 0x08	; 8
    18d6:	0c 94 ab 19 	jmp	0x3356	; 0x3356 <__epilogue_restores__+0x14>

000018da <_ZN15OrangutanAnalog12toMillivoltsEj>:
    18da:	cf 92       	push	r12
    18dc:	df 92       	push	r13
    18de:	ef 92       	push	r14
    18e0:	ff 92       	push	r15
    18e2:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
    18e6:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
    18ea:	9c 01       	movw	r18, r24
    18ec:	0e 94 63 19 	call	0x32c6	; 0x32c6 <__umulhisi3>
    18f0:	6b 01       	movw	r12, r22
    18f2:	7c 01       	movw	r14, r24
    18f4:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <_ZN15OrangutanAnalog7getModeEv>
    18f8:	88 23       	and	r24, r24
    18fa:	59 f0       	breq	.+22     	; 0x1912 <_ZN15OrangutanAnalog12toMillivoltsEj+0x38>
    18fc:	c7 01       	movw	r24, r14
    18fe:	b6 01       	movw	r22, r12
    1900:	61 58       	subi	r22, 0x81	; 129
    1902:	7f 4f       	sbci	r23, 0xFF	; 255
    1904:	8f 4f       	sbci	r24, 0xFF	; 255
    1906:	9f 4f       	sbci	r25, 0xFF	; 255
    1908:	2f ef       	ldi	r18, 0xFF	; 255
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	40 e0       	ldi	r20, 0x00	; 0
    190e:	50 e0       	ldi	r21, 0x00	; 0
    1910:	0a c0       	rjmp	.+20     	; 0x1926 <_ZN15OrangutanAnalog12toMillivoltsEj+0x4c>
    1912:	c7 01       	movw	r24, r14
    1914:	b6 01       	movw	r22, r12
    1916:	61 50       	subi	r22, 0x01	; 1
    1918:	7e 4f       	sbci	r23, 0xFE	; 254
    191a:	8f 4f       	sbci	r24, 0xFF	; 255
    191c:	9f 4f       	sbci	r25, 0xFF	; 255
    191e:	2f ef       	ldi	r18, 0xFF	; 255
    1920:	33 e0       	ldi	r19, 0x03	; 3
    1922:	40 e0       	ldi	r20, 0x00	; 0
    1924:	50 e0       	ldi	r21, 0x00	; 0
    1926:	0e 94 22 19 	call	0x3244	; 0x3244 <__udivmodsi4>
    192a:	c9 01       	movw	r24, r18
    192c:	ff 90       	pop	r15
    192e:	ef 90       	pop	r14
    1930:	df 90       	pop	r13
    1932:	cf 90       	pop	r12
    1934:	08 95       	ret

00001936 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
    1936:	0e 94 27 0c 	call	0x184e	; 0x184e <_ZN15OrangutanAnalog11readAverageEhj>
    193a:	0e 94 6d 0c 	call	0x18da	; 0x18da <_ZN15OrangutanAnalog12toMillivoltsEj>
    193e:	08 95       	ret

00001940 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
    1940:	1f 93       	push	r17
    1942:	cf 93       	push	r28
    1944:	df 93       	push	r29
    1946:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <_ZN15OrangutanAnalog7getModeEv>
    194a:	18 2f       	mov	r17, r24
    194c:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <_ZN15OrangutanAnalog7setModeEh.part.0>
    1950:	6a e0       	ldi	r22, 0x0A	; 10
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	86 e0       	ldi	r24, 0x06	; 6
    1956:	0e 94 9b 0c 	call	0x1936	; 0x1936 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
    195a:	ec 01       	movw	r28, r24
    195c:	81 2f       	mov	r24, r17
    195e:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <_ZN15OrangutanAnalog7setModeEh>
    1962:	ce 01       	movw	r24, r28
    1964:	88 0f       	add	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	8c 0f       	add	r24, r28
    196a:	9d 1f       	adc	r25, r29
    196c:	01 96       	adiw	r24, 0x01	; 1
    196e:	96 95       	lsr	r25
    1970:	87 95       	ror	r24
    1972:	df 91       	pop	r29
    1974:	cf 91       	pop	r28
    1976:	1f 91       	pop	r17
    1978:	08 95       	ret

0000197a <read_battery_millivolts_3pi>:
    197a:	0e 94 a0 0c 	call	0x1940	; 0x1940 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
    197e:	08 95       	ret

00001980 <_ZL16currentCharacterv>:
    1980:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <_ZL17use_program_space>
    1984:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <__data_end>
    1988:	f0 91 8f 01 	lds	r31, 0x018F	; 0x80018f <__data_end+0x1>
    198c:	99 23       	and	r25, r25
    198e:	11 f0       	breq	.+4      	; 0x1994 <_ZL16currentCharacterv+0x14>
    1990:	84 91       	lpm	r24, Z
    1992:	01 c0       	rjmp	.+2      	; 0x1996 <_ZL16currentCharacterv+0x16>
    1994:	80 81       	ld	r24, Z
    1996:	2f eb       	ldi	r18, 0xBF	; 191
    1998:	28 0f       	add	r18, r24
    199a:	2a 31       	cpi	r18, 0x1A	; 26
    199c:	10 f4       	brcc	.+4      	; 0x19a2 <_ZL16currentCharacterv+0x22>
    199e:	80 5e       	subi	r24, 0xE0	; 224
    19a0:	08 95       	ret
    19a2:	80 32       	cpi	r24, 0x20	; 32
    19a4:	49 f4       	brne	.+18     	; 0x19b8 <_ZL16currentCharacterv+0x38>
    19a6:	9f 01       	movw	r18, r30
    19a8:	2f 5f       	subi	r18, 0xFF	; 255
    19aa:	3f 4f       	sbci	r19, 0xFF	; 255
    19ac:	30 93 8f 01 	sts	0x018F, r19	; 0x80018f <__data_end+0x1>
    19b0:	20 93 8e 01 	sts	0x018E, r18	; 0x80018e <__data_end>
    19b4:	ef 2b       	or	r30, r31
    19b6:	31 f7       	brne	.-52     	; 0x1984 <_ZL16currentCharacterv+0x4>
    19b8:	08 95       	ret

000019ba <_ZL9getNumberv>:
    19ba:	1f 93       	push	r17
    19bc:	cf 93       	push	r28
    19be:	df 93       	push	r29
    19c0:	0e 94 c0 0c 	call	0x1980	; 0x1980 <_ZL16currentCharacterv>
    19c4:	c0 e0       	ldi	r28, 0x00	; 0
    19c6:	d0 e0       	ldi	r29, 0x00	; 0
    19c8:	1a e0       	ldi	r17, 0x0A	; 10
    19ca:	90 ed       	ldi	r25, 0xD0	; 208
    19cc:	98 0f       	add	r25, r24
    19ce:	9a 30       	cpi	r25, 0x0A	; 10
    19d0:	b8 f4       	brcc	.+46     	; 0x1a00 <_ZL9getNumberv+0x46>
    19d2:	9e 01       	movw	r18, r28
    19d4:	12 9f       	mul	r17, r18
    19d6:	e0 01       	movw	r28, r0
    19d8:	13 9f       	mul	r17, r19
    19da:	d0 0d       	add	r29, r0
    19dc:	11 24       	eor	r1, r1
    19de:	c8 0f       	add	r28, r24
    19e0:	d1 1d       	adc	r29, r1
    19e2:	87 fd       	sbrc	r24, 7
    19e4:	da 95       	dec	r29
    19e6:	e0 97       	sbiw	r28, 0x30	; 48
    19e8:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <__data_end>
    19ec:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <__data_end+0x1>
    19f0:	01 96       	adiw	r24, 0x01	; 1
    19f2:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <__data_end+0x1>
    19f6:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <__data_end>
    19fa:	0e 94 c0 0c 	call	0x1980	; 0x1980 <_ZL16currentCharacterv>
    19fe:	e5 cf       	rjmp	.-54     	; 0x19ca <_ZL9getNumberv+0x10>
    1a00:	ce 01       	movw	r24, r28
    1a02:	df 91       	pop	r29
    1a04:	cf 91       	pop	r28
    1a06:	1f 91       	pop	r17
    1a08:	08 95       	ret

00001a0a <_ZN15OrangutanBuzzer5init2Ev>:
    1a0a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1a0e:	83 e2       	ldi	r24, 0x23	; 35
    1a10:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1a14:	81 e1       	ldi	r24, 0x11	; 17
    1a16:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1a1a:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    1a1e:	80 e1       	ldi	r24, 0x10	; 16
    1a20:	97 e2       	ldi	r25, 0x27	; 39
    1a22:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1a26:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1a2a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1a2e:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1a32:	22 9a       	sbi	0x04, 2	; 4
    1a34:	78 94       	sei
    1a36:	08 95       	ret

00001a38 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
    1a38:	8f 92       	push	r8
    1a3a:	9f 92       	push	r9
    1a3c:	af 92       	push	r10
    1a3e:	bf 92       	push	r11
    1a40:	df 92       	push	r13
    1a42:	ef 92       	push	r14
    1a44:	ff 92       	push	r15
    1a46:	0f 93       	push	r16
    1a48:	1f 93       	push	r17
    1a4a:	cf 93       	push	r28
    1a4c:	df 93       	push	r29
    1a4e:	5c 01       	movw	r10, r24
    1a50:	8b 01       	movw	r16, r22
    1a52:	d4 2e       	mov	r13, r20
    1a54:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <buzzerInitialized>
    1a58:	81 11       	cpse	r24, r1
    1a5a:	05 c0       	rjmp	.+10     	; 0x1a66 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <buzzerInitialized>
    1a62:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <_ZN15OrangutanBuzzer5init2Ev>
    1a66:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <buzzerFinished>
    1a6a:	b7 fe       	sbrs	r11, 7
    1a6c:	05 c0       	rjmp	.+10     	; 0x1a78 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
    1a6e:	e8 94       	clt
    1a70:	b7 f8       	bld	r11, 7
    1a72:	2a e0       	ldi	r18, 0x0A	; 10
    1a74:	f2 2e       	mov	r15, r18
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
    1a78:	ff 24       	eor	r15, r15
    1a7a:	f3 94       	inc	r15
    1a7c:	e0 90 81 00 	lds	r14, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1a80:	2e 2d       	mov	r18, r14
    1a82:	28 7f       	andi	r18, 0xF8	; 248
    1a84:	e2 2e       	mov	r14, r18
    1a86:	48 ec       	ldi	r20, 0xC8	; 200
    1a88:	f4 9e       	mul	r15, r20
    1a8a:	c0 01       	movw	r24, r0
    1a8c:	11 24       	eor	r1, r1
    1a8e:	8a 15       	cp	r24, r10
    1a90:	9b 05       	cpc	r25, r11
    1a92:	e0 f4       	brcc	.+56     	; 0x1acc <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
    1a94:	e5 01       	movw	r28, r10
    1a96:	51 e1       	ldi	r21, 0x11	; 17
    1a98:	a5 16       	cp	r10, r21
    1a9a:	57 e2       	ldi	r21, 0x27	; 39
    1a9c:	b5 06       	cpc	r11, r21
    1a9e:	10 f0       	brcs	.+4      	; 0x1aa4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
    1aa0:	c0 e1       	ldi	r28, 0x10	; 16
    1aa2:	d7 e2       	ldi	r29, 0x27	; 39
    1aa4:	be 01       	movw	r22, r28
    1aa6:	76 95       	lsr	r23
    1aa8:	67 95       	ror	r22
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	60 58       	subi	r22, 0x80	; 128
    1ab0:	79 46       	sbci	r23, 0x69	; 105
    1ab2:	87 46       	sbci	r24, 0x67	; 103
    1ab4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab6:	4e 01       	movw	r8, r28
    1ab8:	a1 2c       	mov	r10, r1
    1aba:	b1 2c       	mov	r11, r1
    1abc:	a5 01       	movw	r20, r10
    1abe:	94 01       	movw	r18, r8
    1ac0:	0e 94 22 19 	call	0x3244	; 0x3244 <__udivmodsi4>
    1ac4:	59 01       	movw	r10, r18
    1ac6:	8e 2d       	mov	r24, r14
    1ac8:	81 60       	ori	r24, 0x01	; 1
    1aca:	24 c0       	rjmp	.+72     	; 0x1b14 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
    1acc:	c8 e2       	ldi	r28, 0x28	; 40
    1ace:	fc 9e       	mul	r15, r28
    1ad0:	c0 2d       	mov	r28, r0
    1ad2:	11 24       	eor	r1, r1
    1ad4:	d0 e0       	ldi	r29, 0x00	; 0
    1ad6:	ca 15       	cp	r28, r10
    1ad8:	db 05       	cpc	r29, r11
    1ada:	08 f4       	brcc	.+2      	; 0x1ade <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
    1adc:	e5 01       	movw	r28, r10
    1ade:	be 01       	movw	r22, r28
    1ae0:	76 95       	lsr	r23
    1ae2:	67 95       	ror	r22
    1ae4:	9e 01       	movw	r18, r28
    1ae6:	40 e0       	ldi	r20, 0x00	; 0
    1ae8:	50 e0       	ldi	r21, 0x00	; 0
    1aea:	8a e0       	ldi	r24, 0x0A	; 10
    1aec:	f8 12       	cpse	r15, r24
    1aee:	07 c0       	rjmp	.+14     	; 0x1afe <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	60 5e       	subi	r22, 0xE0	; 224
    1af6:	73 44       	sbci	r23, 0x43	; 67
    1af8:	81 44       	sbci	r24, 0x41	; 65
    1afa:	9f 4f       	sbci	r25, 0xFF	; 255
    1afc:	06 c0       	rjmp	.+12     	; 0x1b0a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	60 53       	subi	r22, 0x30	; 48
    1b04:	7d 4e       	sbci	r23, 0xED	; 237
    1b06:	8c 4e       	sbci	r24, 0xEC	; 236
    1b08:	9f 4f       	sbci	r25, 0xFF	; 255
    1b0a:	0e 94 22 19 	call	0x3244	; 0x3244 <__udivmodsi4>
    1b0e:	59 01       	movw	r10, r18
    1b10:	8e 2d       	mov	r24, r14
    1b12:	82 60       	ori	r24, 0x02	; 2
    1b14:	88 2e       	mov	r8, r24
    1b16:	2a e0       	ldi	r18, 0x0A	; 10
    1b18:	f2 12       	cpse	r15, r18
    1b1a:	07 c0       	rjmp	.+14     	; 0x1b2a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
    1b1c:	ce 01       	movw	r24, r28
    1b1e:	05 96       	adiw	r24, 0x05	; 5
    1b20:	6a e0       	ldi	r22, 0x0A	; 10
    1b22:	70 e0       	ldi	r23, 0x00	; 0
    1b24:	0e 94 0e 19 	call	0x321c	; 0x321c <__udivmodhi4>
    1b28:	eb 01       	movw	r28, r22
    1b2a:	c8 3e       	cpi	r28, 0xE8	; 232
    1b2c:	43 e0       	ldi	r20, 0x03	; 3
    1b2e:	d4 07       	cpc	r29, r20
    1b30:	59 f0       	breq	.+22     	; 0x1b48 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    1b32:	98 01       	movw	r18, r16
    1b34:	de 01       	movw	r26, r28
    1b36:	0e 94 63 19 	call	0x32c6	; 0x32c6 <__umulhisi3>
    1b3a:	28 ee       	ldi	r18, 0xE8	; 232
    1b3c:	33 e0       	ldi	r19, 0x03	; 3
    1b3e:	40 e0       	ldi	r20, 0x00	; 0
    1b40:	50 e0       	ldi	r21, 0x00	; 0
    1b42:	0e 94 44 19 	call	0x3288	; 0x3288 <__divmodsi4>
    1b46:	89 01       	movw	r16, r18
    1b48:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1b4c:	80 92 81 00 	sts	0x0081, r8	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1b50:	b0 92 89 00 	sts	0x0089, r11	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1b54:	a0 92 88 00 	sts	0x0088, r10	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1b58:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1b5c:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1b60:	4d 2d       	mov	r20, r13
    1b62:	40 31       	cpi	r20, 0x10	; 16
    1b64:	08 f0       	brcs	.+2      	; 0x1b68 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    1b66:	4f e0       	ldi	r20, 0x0F	; 15
    1b68:	80 e1       	ldi	r24, 0x10	; 16
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	84 1b       	sub	r24, r20
    1b6e:	91 09       	sbc	r25, r1
    1b70:	a9 01       	movw	r20, r18
    1b72:	02 c0       	rjmp	.+4      	; 0x1b78 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    1b74:	56 95       	lsr	r21
    1b76:	47 95       	ror	r20
    1b78:	8a 95       	dec	r24
    1b7a:	e2 f7       	brpl	.-8      	; 0x1b74 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    1b7c:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1b80:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1b84:	10 93 96 01 	sts	0x0196, r17	; 0x800196 <_ZL13buzzerTimeout+0x1>
    1b88:	00 93 95 01 	sts	0x0195, r16	; 0x800195 <_ZL13buzzerTimeout>
    1b8c:	86 b3       	in	r24, 0x16	; 22
    1b8e:	8f ef       	ldi	r24, 0xFF	; 255
    1b90:	86 bb       	out	0x16, r24	; 22
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1b98:	df 91       	pop	r29
    1b9a:	cf 91       	pop	r28
    1b9c:	1f 91       	pop	r17
    1b9e:	0f 91       	pop	r16
    1ba0:	ff 90       	pop	r15
    1ba2:	ef 90       	pop	r14
    1ba4:	df 90       	pop	r13
    1ba6:	bf 90       	pop	r11
    1ba8:	af 90       	pop	r10
    1baa:	9f 90       	pop	r9
    1bac:	8f 90       	pop	r8
    1bae:	08 95       	ret

00001bb0 <_ZN15OrangutanBuzzer8playNoteEhjh>:
    1bb0:	cf 93       	push	r28
    1bb2:	df 93       	push	r29
    1bb4:	eb 01       	movw	r28, r22
    1bb6:	8f 3f       	cpi	r24, 0xFF	; 255
    1bb8:	11 f0       	breq	.+4      	; 0x1bbe <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
    1bba:	41 11       	cpse	r20, r1
    1bbc:	05 c0       	rjmp	.+10     	; 0x1bc8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
    1bbe:	40 e0       	ldi	r20, 0x00	; 0
    1bc0:	be 01       	movw	r22, r28
    1bc2:	88 ee       	ldi	r24, 0xE8	; 232
    1bc4:	93 e0       	ldi	r25, 0x03	; 3
    1bc6:	43 c0       	rjmp	.+134    	; 0x1c4e <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
    1bc8:	81 31       	cpi	r24, 0x11	; 17
    1bca:	30 f0       	brcs	.+12     	; 0x1bd8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
    1bcc:	50 ef       	ldi	r21, 0xF0	; 240
    1bce:	58 0f       	add	r21, r24
    1bd0:	50 36       	cpi	r21, 0x60	; 96
    1bd2:	18 f0       	brcs	.+6      	; 0x1bda <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1bd4:	5f e5       	ldi	r21, 0x5F	; 95
    1bd6:	01 c0       	rjmp	.+2      	; 0x1bda <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1bd8:	50 e0       	ldi	r21, 0x00	; 0
    1bda:	85 2f       	mov	r24, r21
    1bdc:	6c e0       	ldi	r22, 0x0C	; 12
    1bde:	0e 94 02 19 	call	0x3204	; 0x3204 <__udivmodqi4>
    1be2:	68 2f       	mov	r22, r24
    1be4:	74 ef       	ldi	r23, 0xF4	; 244
    1be6:	76 03       	mulsu	r23, r22
    1be8:	90 01       	movw	r18, r0
    1bea:	11 24       	eor	r1, r1
    1bec:	25 0f       	add	r18, r21
    1bee:	31 1d       	adc	r19, r1
    1bf0:	2c 30       	cpi	r18, 0x0C	; 12
    1bf2:	31 05       	cpc	r19, r1
    1bf4:	40 f4       	brcc	.+16     	; 0x1c06 <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
    1bf6:	f9 01       	movw	r30, r18
    1bf8:	ee 0f       	add	r30, r30
    1bfa:	ff 1f       	adc	r31, r31
    1bfc:	ec 5c       	subi	r30, 0xCC	; 204
    1bfe:	fe 4f       	sbci	r31, 0xFE	; 254
    1c00:	20 81       	ld	r18, Z
    1c02:	31 81       	ldd	r19, Z+1	; 0x01
    1c04:	02 c0       	rjmp	.+4      	; 0x1c0a <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	87 30       	cpi	r24, 0x07	; 7
    1c0c:	81 f0       	breq	.+32     	; 0x1c2e <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
    1c0e:	08 2e       	mov	r0, r24
    1c10:	02 c0       	rjmp	.+4      	; 0x1c16 <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
    1c12:	22 0f       	add	r18, r18
    1c14:	33 1f       	adc	r19, r19
    1c16:	0a 94       	dec	r0
    1c18:	e2 f7       	brpl	.-8      	; 0x1c12 <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    1c1a:	82 30       	cpi	r24, 0x02	; 2
    1c1c:	28 f0       	brcs	.+10     	; 0x1c28 <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
    1c1e:	c9 01       	movw	r24, r18
    1c20:	05 96       	adiw	r24, 0x05	; 5
    1c22:	6a e0       	ldi	r22, 0x0A	; 10
    1c24:	70 e0       	ldi	r23, 0x00	; 0
    1c26:	0c c0       	rjmp	.+24     	; 0x1c40 <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
    1c28:	c9 01       	movw	r24, r18
    1c2a:	90 58       	subi	r25, 0x80	; 128
    1c2c:	0c c0       	rjmp	.+24     	; 0x1c46 <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
    1c2e:	c9 01       	movw	r24, r18
    1c30:	36 e0       	ldi	r19, 0x06	; 6
    1c32:	88 0f       	add	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	3a 95       	dec	r19
    1c38:	e1 f7       	brne	.-8      	; 0x1c32 <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
    1c3a:	02 96       	adiw	r24, 0x02	; 2
    1c3c:	65 e0       	ldi	r22, 0x05	; 5
    1c3e:	70 e0       	ldi	r23, 0x00	; 0
    1c40:	0e 94 0e 19 	call	0x321c	; 0x321c <__udivmodhi4>
    1c44:	cb 01       	movw	r24, r22
    1c46:	40 31       	cpi	r20, 0x10	; 16
    1c48:	08 f0       	brcs	.+2      	; 0x1c4c <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    1c4a:	4f e0       	ldi	r20, 0x0F	; 15
    1c4c:	be 01       	movw	r22, r28
    1c4e:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1c52:	df 91       	pop	r29
    1c54:	cf 91       	pop	r28
    1c56:	08 95       	ret

00001c58 <_ZL8nextNotev>:
    1c58:	a2 e0       	ldi	r26, 0x02	; 2
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e2 e3       	ldi	r30, 0x32	; 50
    1c5e:	fe e0       	ldi	r31, 0x0E	; 14
    1c60:	0c 94 87 19 	jmp	0x330e	; 0x330e <__prologue_saves__+0x4>
    1c64:	90 90 0a 01 	lds	r9, 0x010A	; 0x80010a <_ZL6octave>
    1c68:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <_ZL8staccato>
    1c6c:	88 23       	and	r24, r24
    1c6e:	21 f0       	breq	.+8      	; 0x1c78 <_ZL8nextNotev+0x20>
    1c70:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <_ZL22staccato_rest_duration>
    1c74:	61 11       	cpse	r22, r1
    1c76:	17 c0       	rjmp	.+46     	; 0x1ca6 <_ZL8nextNotev+0x4e>
    1c78:	77 24       	eor	r7, r7
    1c7a:	73 94       	inc	r7
    1c7c:	b0 ec       	ldi	r27, 0xC0	; 192
    1c7e:	ab 2e       	mov	r10, r27
    1c80:	bd e5       	ldi	r27, 0x5D	; 93
    1c82:	bb 2e       	mov	r11, r27
    1c84:	1a e0       	ldi	r17, 0x0A	; 10
    1c86:	61 2e       	mov	r6, r17
    1c88:	04 e0       	ldi	r16, 0x04	; 4
    1c8a:	80 2e       	mov	r8, r16
    1c8c:	80 ed       	ldi	r24, 0xD0	; 208
    1c8e:	c8 2e       	mov	r12, r24
    1c90:	87 e0       	ldi	r24, 0x07	; 7
    1c92:	d8 2e       	mov	r13, r24
    1c94:	94 e0       	ldi	r25, 0x04	; 4
    1c96:	e9 2e       	mov	r14, r25
    1c98:	f1 2c       	mov	r15, r1
    1c9a:	04 ef       	ldi	r16, 0xF4	; 244
    1c9c:	11 e0       	ldi	r17, 0x01	; 1
    1c9e:	2f e0       	ldi	r18, 0x0F	; 15
    1ca0:	42 2e       	mov	r4, r18
    1ca2:	51 2c       	mov	r5, r1
    1ca4:	15 c0       	rjmp	.+42     	; 0x1cd0 <_ZL8nextNotev+0x78>
    1ca6:	70 e0       	ldi	r23, 0x00	; 0
    1ca8:	40 e0       	ldi	r20, 0x00	; 0
    1caa:	88 ee       	ldi	r24, 0xE8	; 232
    1cac:	93 e0       	ldi	r25, 0x03	; 3
    1cae:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1cb2:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <_ZL22staccato_rest_duration>
    1cb6:	17 c1       	rjmp	.+558    	; 0x1ee6 <_ZL8nextNotev+0x28e>
    1cb8:	86 36       	cpi	r24, 0x66	; 102
    1cba:	d4 f5       	brge	.+116    	; 0x1d30 <_ZL8nextNotev+0xd8>
    1cbc:	81 36       	cpi	r24, 0x61	; 97
    1cbe:	09 f4       	brne	.+2      	; 0x1cc2 <_ZL8nextNotev+0x6a>
    1cc0:	a9 c0       	rjmp	.+338    	; 0x1e14 <_ZL8nextNotev+0x1bc>
    1cc2:	7c f5       	brge	.+94     	; 0x1d22 <_ZL8nextNotev+0xca>
    1cc4:	8c 33       	cpi	r24, 0x3C	; 60
    1cc6:	09 f4       	brne	.+2      	; 0x1cca <_ZL8nextNotev+0x72>
    1cc8:	60 c0       	rjmp	.+192    	; 0x1d8a <_ZL8nextNotev+0x132>
    1cca:	8e 33       	cpi	r24, 0x3E	; 62
    1ccc:	81 f4       	brne	.+32     	; 0x1cee <_ZL8nextNotev+0x96>
    1cce:	93 94       	inc	r9
    1cd0:	0e 94 c0 0c 	call	0x1980	; 0x1980 <_ZL16currentCharacterv>
    1cd4:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <__data_end>
    1cd8:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <__data_end+0x1>
    1cdc:	2f 5f       	subi	r18, 0xFF	; 255
    1cde:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce0:	30 93 8f 01 	sts	0x018F, r19	; 0x80018f <__data_end+0x1>
    1ce4:	20 93 8e 01 	sts	0x018E, r18	; 0x80018e <__data_end>
    1ce8:	85 36       	cpi	r24, 0x65	; 101
    1cea:	31 f7       	brne	.-52     	; 0x1cb8 <_ZL8nextNotev+0x60>
    1cec:	52 c0       	rjmp	.+164    	; 0x1d92 <_ZL8nextNotev+0x13a>
    1cee:	81 32       	cpi	r24, 0x21	; 33
    1cf0:	09 f0       	breq	.+2      	; 0x1cf4 <_ZL8nextNotev+0x9c>
    1cf2:	8b c0       	rjmp	.+278    	; 0x1e0a <_ZL8nextNotev+0x1b2>
    1cf4:	80 92 0a 01 	sts	0x010A, r8	; 0x80010a <_ZL6octave>
    1cf8:	d0 92 09 01 	sts	0x0109, r13	; 0x800109 <_ZL19whole_note_duration+0x1>
    1cfc:	c0 92 08 01 	sts	0x0108, r12	; 0x800108 <_ZL19whole_note_duration>
    1d00:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <_ZL9note_type+0x1>
    1d04:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <_ZL9note_type>
    1d08:	10 93 05 01 	sts	0x0105, r17	; 0x800105 <_ZL8duration+0x1>
    1d0c:	00 93 04 01 	sts	0x0104, r16	; 0x800104 <_ZL8duration>
    1d10:	50 92 03 01 	sts	0x0103, r5	; 0x800103 <_ZL6volume+0x1>
    1d14:	40 92 02 01 	sts	0x0102, r4	; 0x800102 <_ZL6volume>
    1d18:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <_ZL8staccato>
    1d1c:	a4 e0       	ldi	r26, 0x04	; 4
    1d1e:	9a 2e       	mov	r9, r26
    1d20:	d7 cf       	rjmp	.-82     	; 0x1cd0 <_ZL8nextNotev+0x78>
    1d22:	83 36       	cpi	r24, 0x63	; 99
    1d24:	a1 f1       	breq	.+104    	; 0x1d8e <_ZL8nextNotev+0x136>
    1d26:	0c f4       	brge	.+2      	; 0x1d2a <_ZL8nextNotev+0xd2>
    1d28:	78 c0       	rjmp	.+240    	; 0x1e1a <_ZL8nextNotev+0x1c2>
    1d2a:	10 e0       	ldi	r17, 0x00	; 0
    1d2c:	82 e0       	ldi	r24, 0x02	; 2
    1d2e:	77 c0       	rjmp	.+238    	; 0x1e1e <_ZL8nextNotev+0x1c6>
    1d30:	8d 36       	cpi	r24, 0x6D	; 109
    1d32:	c1 f1       	breq	.+112    	; 0x1da4 <_ZL8nextNotev+0x14c>
    1d34:	94 f4       	brge	.+36     	; 0x1d5a <_ZL8nextNotev+0x102>
    1d36:	87 36       	cpi	r24, 0x67	; 103
    1d38:	91 f1       	breq	.+100    	; 0x1d9e <_ZL8nextNotev+0x146>
    1d3a:	74 f1       	brlt	.+92     	; 0x1d98 <_ZL8nextNotev+0x140>
    1d3c:	8c 36       	cpi	r24, 0x6C	; 108
    1d3e:	09 f0       	breq	.+2      	; 0x1d42 <_ZL8nextNotev+0xea>
    1d40:	64 c0       	rjmp	.+200    	; 0x1e0a <_ZL8nextNotev+0x1b2>
    1d42:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <_ZL9getNumberv>
    1d46:	bc 01       	movw	r22, r24
    1d48:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL9note_type+0x1>
    1d4c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL9note_type>
    1d50:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    1d54:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    1d58:	51 c0       	rjmp	.+162    	; 0x1dfc <_ZL8nextNotev+0x1a4>
    1d5a:	82 37       	cpi	r24, 0x72	; 114
    1d5c:	c9 f1       	breq	.+114    	; 0x1dd0 <_ZL8nextNotev+0x178>
    1d5e:	4c f4       	brge	.+18     	; 0x1d72 <_ZL8nextNotev+0x11a>
    1d60:	8f 36       	cpi	r24, 0x6F	; 111
    1d62:	09 f0       	breq	.+2      	; 0x1d66 <_ZL8nextNotev+0x10e>
    1d64:	52 c0       	rjmp	.+164    	; 0x1e0a <_ZL8nextNotev+0x1b2>
    1d66:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <_ZL9getNumberv>
    1d6a:	98 2e       	mov	r9, r24
    1d6c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZL6octave>
    1d70:	af cf       	rjmp	.-162    	; 0x1cd0 <_ZL8nextNotev+0x78>
    1d72:	84 37       	cpi	r24, 0x74	; 116
    1d74:	81 f1       	breq	.+96     	; 0x1dd6 <_ZL8nextNotev+0x17e>
    1d76:	86 37       	cpi	r24, 0x76	; 118
    1d78:	09 f0       	breq	.+2      	; 0x1d7c <_ZL8nextNotev+0x124>
    1d7a:	47 c0       	rjmp	.+142    	; 0x1e0a <_ZL8nextNotev+0x1b2>
    1d7c:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <_ZL9getNumberv>
    1d80:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_ZL6volume+0x1>
    1d84:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_ZL6volume>
    1d88:	a3 cf       	rjmp	.-186    	; 0x1cd0 <_ZL8nextNotev+0x78>
    1d8a:	9a 94       	dec	r9
    1d8c:	a1 cf       	rjmp	.-190    	; 0x1cd0 <_ZL8nextNotev+0x78>
    1d8e:	10 e0       	ldi	r17, 0x00	; 0
    1d90:	20 c0       	rjmp	.+64     	; 0x1dd2 <_ZL8nextNotev+0x17a>
    1d92:	10 e0       	ldi	r17, 0x00	; 0
    1d94:	84 e0       	ldi	r24, 0x04	; 4
    1d96:	43 c0       	rjmp	.+134    	; 0x1e1e <_ZL8nextNotev+0x1c6>
    1d98:	10 e0       	ldi	r17, 0x00	; 0
    1d9a:	85 e0       	ldi	r24, 0x05	; 5
    1d9c:	40 c0       	rjmp	.+128    	; 0x1e1e <_ZL8nextNotev+0x1c6>
    1d9e:	10 e0       	ldi	r17, 0x00	; 0
    1da0:	87 e0       	ldi	r24, 0x07	; 7
    1da2:	3d c0       	rjmp	.+122    	; 0x1e1e <_ZL8nextNotev+0x1c6>
    1da4:	0e 94 c0 0c 	call	0x1980	; 0x1980 <_ZL16currentCharacterv>
    1da8:	8c 36       	cpi	r24, 0x6C	; 108
    1daa:	19 f4       	brne	.+6      	; 0x1db2 <_ZL8nextNotev+0x15a>
    1dac:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <_ZL8staccato>
    1db0:	04 c0       	rjmp	.+8      	; 0x1dba <_ZL8nextNotev+0x162>
    1db2:	70 92 92 01 	sts	0x0192, r7	; 0x800192 <_ZL8staccato>
    1db6:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <_ZL22staccato_rest_duration>
    1dba:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <__data_end>
    1dbe:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <__data_end+0x1>
    1dc2:	2f 5f       	subi	r18, 0xFF	; 255
    1dc4:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc6:	30 93 8f 01 	sts	0x018F, r19	; 0x80018f <__data_end+0x1>
    1dca:	20 93 8e 01 	sts	0x018E, r18	; 0x80018e <__data_end>
    1dce:	80 cf       	rjmp	.-256    	; 0x1cd0 <_ZL8nextNotev+0x78>
    1dd0:	11 e0       	ldi	r17, 0x01	; 1
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	24 c0       	rjmp	.+72     	; 0x1e1e <_ZL8nextNotev+0x1c6>
    1dd6:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <_ZL9getNumberv>
    1dda:	bc 01       	movw	r22, r24
    1ddc:	c5 01       	movw	r24, r10
    1dde:	0e 94 0e 19 	call	0x321c	; 0x321c <__udivmodhi4>
    1de2:	66 9e       	mul	r6, r22
    1de4:	c0 01       	movw	r24, r0
    1de6:	67 9e       	mul	r6, r23
    1de8:	90 0d       	add	r25, r0
    1dea:	11 24       	eor	r1, r1
    1dec:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZL19whole_note_duration+0x1>
    1df0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL19whole_note_duration>
    1df4:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <_ZL9note_type>
    1df8:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <_ZL9note_type+0x1>
    1dfc:	0e 94 0e 19 	call	0x321c	; 0x321c <__udivmodhi4>
    1e00:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_ZL8duration+0x1>
    1e04:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_ZL8duration>
    1e08:	63 cf       	rjmp	.-314    	; 0x1cd0 <_ZL8nextNotev+0x78>
    1e0a:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <__data_end+0x1>
    1e0e:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <__data_end>
    1e12:	69 c0       	rjmp	.+210    	; 0x1ee6 <_ZL8nextNotev+0x28e>
    1e14:	10 e0       	ldi	r17, 0x00	; 0
    1e16:	89 e0       	ldi	r24, 0x09	; 9
    1e18:	02 c0       	rjmp	.+4      	; 0x1e1e <_ZL8nextNotev+0x1c6>
    1e1a:	10 e0       	ldi	r17, 0x00	; 0
    1e1c:	8b e0       	ldi	r24, 0x0B	; 11
    1e1e:	08 2f       	mov	r16, r24
    1e20:	9c e0       	ldi	r25, 0x0C	; 12
    1e22:	99 9e       	mul	r9, r25
    1e24:	00 0d       	add	r16, r0
    1e26:	11 24       	eor	r1, r1
    1e28:	0e 94 c0 0c 	call	0x1980	; 0x1980 <_ZL16currentCharacterv>
    1e2c:	98 2f       	mov	r25, r24
    1e2e:	97 7f       	andi	r25, 0xF7	; 247
    1e30:	93 32       	cpi	r25, 0x23	; 35
    1e32:	61 f4       	brne	.+24     	; 0x1e4c <_ZL8nextNotev+0x1f4>
    1e34:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <__data_end>
    1e38:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <__data_end+0x1>
    1e3c:	2f 5f       	subi	r18, 0xFF	; 255
    1e3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e40:	30 93 8f 01 	sts	0x018F, r19	; 0x80018f <__data_end+0x1>
    1e44:	20 93 8e 01 	sts	0x018E, r18	; 0x80018e <__data_end>
    1e48:	0f 5f       	subi	r16, 0xFF	; 255
    1e4a:	ee cf       	rjmp	.-36     	; 0x1e28 <_ZL8nextNotev+0x1d0>
    1e4c:	8d 32       	cpi	r24, 0x2D	; 45
    1e4e:	71 f4       	brne	.+28     	; 0x1e6c <_ZL8nextNotev+0x214>
    1e50:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <__data_end>
    1e54:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <__data_end+0x1>
    1e58:	2f 5f       	subi	r18, 0xFF	; 255
    1e5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e5c:	30 93 8f 01 	sts	0x018F, r19	; 0x80018f <__data_end+0x1>
    1e60:	20 93 8e 01 	sts	0x018E, r18	; 0x80018e <__data_end>
    1e64:	01 50       	subi	r16, 0x01	; 1
    1e66:	0e 94 c0 0c 	call	0x1980	; 0x1980 <_ZL16currentCharacterv>
    1e6a:	f0 cf       	rjmp	.-32     	; 0x1e4c <_ZL8nextNotev+0x1f4>
    1e6c:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_ZL8duration>
    1e70:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_ZL8duration+0x1>
    1e74:	81 53       	subi	r24, 0x31	; 49
    1e76:	88 30       	cpi	r24, 0x08	; 8
    1e78:	50 f4       	brcc	.+20     	; 0x1e8e <_ZL8nextNotev+0x236>
    1e7a:	e0 90 08 01 	lds	r14, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    1e7e:	f0 90 09 01 	lds	r15, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    1e82:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <_ZL9getNumberv>
    1e86:	bc 01       	movw	r22, r24
    1e88:	c7 01       	movw	r24, r14
    1e8a:	0e 94 0e 19 	call	0x321c	; 0x321c <__udivmodhi4>
    1e8e:	7b 01       	movw	r14, r22
    1e90:	f6 94       	lsr	r15
    1e92:	e7 94       	ror	r14
    1e94:	69 83       	std	Y+1, r22	; 0x01
    1e96:	7a 83       	std	Y+2, r23	; 0x02
    1e98:	0e 94 c0 0c 	call	0x1980	; 0x1980 <_ZL16currentCharacterv>
    1e9c:	69 81       	ldd	r22, Y+1	; 0x01
    1e9e:	7a 81       	ldd	r23, Y+2	; 0x02
    1ea0:	8e 32       	cpi	r24, 0x2E	; 46
    1ea2:	69 f4       	brne	.+26     	; 0x1ebe <_ZL8nextNotev+0x266>
    1ea4:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <__data_end>
    1ea8:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <__data_end+0x1>
    1eac:	2f 5f       	subi	r18, 0xFF	; 255
    1eae:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb0:	30 93 8f 01 	sts	0x018F, r19	; 0x80018f <__data_end+0x1>
    1eb4:	20 93 8e 01 	sts	0x018E, r18	; 0x80018e <__data_end>
    1eb8:	6e 0d       	add	r22, r14
    1eba:	7f 1d       	adc	r23, r15
    1ebc:	e9 cf       	rjmp	.-46     	; 0x1e90 <_ZL8nextNotev+0x238>
    1ebe:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <_ZL8staccato>
    1ec2:	88 23       	and	r24, r24
    1ec4:	39 f0       	breq	.+14     	; 0x1ed4 <_ZL8nextNotev+0x27c>
    1ec6:	9b 01       	movw	r18, r22
    1ec8:	36 95       	lsr	r19
    1eca:	27 95       	ror	r18
    1ecc:	20 93 91 01 	sts	0x0191, r18	; 0x800191 <_ZL22staccato_rest_duration>
    1ed0:	62 1b       	sub	r22, r18
    1ed2:	71 09       	sbc	r23, r1
    1ed4:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <_ZL6volume>
    1ed8:	11 23       	and	r17, r17
    1eda:	11 f0       	breq	.+4      	; 0x1ee0 <_ZL8nextNotev+0x288>
    1edc:	8f ef       	ldi	r24, 0xFF	; 255
    1ede:	01 c0       	rjmp	.+2      	; 0x1ee2 <_ZL8nextNotev+0x28a>
    1ee0:	80 2f       	mov	r24, r16
    1ee2:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <_ZN15OrangutanBuzzer8playNoteEhjh>
    1ee6:	22 96       	adiw	r28, 0x02	; 2
    1ee8:	e0 e1       	ldi	r30, 0x10	; 16
    1eea:	0c 94 a3 19 	jmp	0x3346	; 0x3346 <__epilogue_restores__+0x4>

00001eee <__vector_13>:
    1eee:	1f 92       	push	r1
    1ef0:	0f 92       	push	r0
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	0f 92       	push	r0
    1ef6:	11 24       	eor	r1, r1
    1ef8:	2f 93       	push	r18
    1efa:	3f 93       	push	r19
    1efc:	4f 93       	push	r20
    1efe:	5f 93       	push	r21
    1f00:	6f 93       	push	r22
    1f02:	7f 93       	push	r23
    1f04:	8f 93       	push	r24
    1f06:	9f 93       	push	r25
    1f08:	af 93       	push	r26
    1f0a:	bf 93       	push	r27
    1f0c:	ef 93       	push	r30
    1f0e:	ff 93       	push	r31
    1f10:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <_ZL13buzzerTimeout>
    1f14:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <_ZL13buzzerTimeout+0x1>
    1f18:	9c 01       	movw	r18, r24
    1f1a:	21 50       	subi	r18, 0x01	; 1
    1f1c:	31 09       	sbc	r19, r1
    1f1e:	30 93 96 01 	sts	0x0196, r19	; 0x800196 <_ZL13buzzerTimeout+0x1>
    1f22:	20 93 95 01 	sts	0x0195, r18	; 0x800195 <_ZL13buzzerTimeout>
    1f26:	89 2b       	or	r24, r25
    1f28:	11 f5       	brne	.+68     	; 0x1f6e <__vector_13+0x80>
    1f2a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1f2e:	78 94       	sei
    1f30:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1f34:	88 7f       	andi	r24, 0xF8	; 248
    1f36:	81 60       	ori	r24, 0x01	; 1
    1f38:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1f3c:	80 e1       	ldi	r24, 0x10	; 16
    1f3e:	97 e2       	ldi	r25, 0x27	; 39
    1f40:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1f44:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1f48:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1f4c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <buzzerFinished>
    1f56:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <__data_end>
    1f5a:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <__data_end+0x1>
    1f5e:	89 2b       	or	r24, r25
    1f60:	31 f0       	breq	.+12     	; 0x1f6e <__vector_13+0x80>
    1f62:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <_ZL17play_mode_setting>
    1f66:	81 11       	cpse	r24, r1
    1f68:	02 c0       	rjmp	.+4      	; 0x1f6e <__vector_13+0x80>
    1f6a:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <_ZL8nextNotev>
    1f6e:	ff 91       	pop	r31
    1f70:	ef 91       	pop	r30
    1f72:	bf 91       	pop	r27
    1f74:	af 91       	pop	r26
    1f76:	9f 91       	pop	r25
    1f78:	8f 91       	pop	r24
    1f7a:	7f 91       	pop	r23
    1f7c:	6f 91       	pop	r22
    1f7e:	5f 91       	pop	r21
    1f80:	4f 91       	pop	r20
    1f82:	3f 91       	pop	r19
    1f84:	2f 91       	pop	r18
    1f86:	0f 90       	pop	r0
    1f88:	0f be       	out	0x3f, r0	; 63
    1f8a:	0f 90       	pop	r0
    1f8c:	1f 90       	pop	r1
    1f8e:	18 95       	reti

00001f90 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    1f90:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1f94:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <__data_end+0x1>
    1f98:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <__data_end>
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <_ZL17use_program_space>
    1fa2:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <_ZL22staccato_rest_duration>
    1fa6:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <_ZL8nextNotev>
    1faa:	08 95       	ret

00001fac <play_from_program_space>:
    1fac:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    1fb0:	08 95       	ret

00001fb2 <delay_us.constprop.0>:
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	6f 93       	push	r22
    1fb8:	64 e0       	ldi	r22, 0x04	; 4
    1fba:	6a 95       	dec	r22
    1fbc:	f1 f7       	brne	.-4      	; 0x1fba <delay_us.constprop.0+0x8>
    1fbe:	6f 91       	pop	r22
    1fc0:	01 97       	sbiw	r24, 0x01	; 1
    1fc2:	c9 f7       	brne	.-14     	; 0x1fb6 <delay_us.constprop.0+0x4>
    1fc4:	08 95       	ret

00001fc6 <_ZN12OrangutanLCD8busyWaitEv>:
    1fc6:	0f 93       	push	r16
    1fc8:	1f 93       	push	r17
    1fca:	cf 93       	push	r28
    1fcc:	df 93       	push	r29
    1fce:	1a b1       	in	r17, 0x0a	; 10
    1fd0:	57 98       	cbi	0x0a, 7	; 10
    1fd2:	5a 98       	cbi	0x0b, 2	; 11
    1fd4:	28 9a       	sbi	0x05, 0	; 5
    1fd6:	c0 e0       	ldi	r28, 0x00	; 0
    1fd8:	d0 e0       	ldi	r29, 0x00	; 0
    1fda:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <delay_us.constprop.0>
    1fde:	5c 9a       	sbi	0x0b, 4	; 11
    1fe0:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <delay_us.constprop.0>
    1fe4:	09 b1       	in	r16, 0x09	; 9
    1fe6:	5c 98       	cbi	0x0b, 4	; 11
    1fe8:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <delay_us.constprop.0>
    1fec:	5c 9a       	sbi	0x0b, 4	; 11
    1fee:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <delay_us.constprop.0>
    1ff2:	5c 98       	cbi	0x0b, 4	; 11
    1ff4:	24 96       	adiw	r28, 0x04	; 4
    1ff6:	07 ff       	sbrs	r16, 7
    1ff8:	10 c0       	rjmp	.+32     	; 0x201a <_ZN12OrangutanLCD8busyWaitEv+0x54>
    1ffa:	ae 01       	movw	r20, r28
    1ffc:	60 e0       	ldi	r22, 0x00	; 0
    1ffe:	70 e0       	ldi	r23, 0x00	; 0
    2000:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <lcdTimeout>
    2004:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <lcdTimeout+0x1>
    2008:	a0 91 99 01 	lds	r26, 0x0199	; 0x800199 <lcdTimeout+0x2>
    200c:	b0 91 9a 01 	lds	r27, 0x019A	; 0x80019a <lcdTimeout+0x3>
    2010:	48 17       	cp	r20, r24
    2012:	59 07       	cpc	r21, r25
    2014:	6a 07       	cpc	r22, r26
    2016:	7b 07       	cpc	r23, r27
    2018:	00 f3       	brcs	.-64     	; 0x1fda <_ZN12OrangutanLCD8busyWaitEv+0x14>
    201a:	1a b9       	out	0x0a, r17	; 10
    201c:	df 91       	pop	r29
    201e:	cf 91       	pop	r28
    2020:	1f 91       	pop	r17
    2022:	0f 91       	pop	r16
    2024:	08 95       	ret

00002026 <_ZN12OrangutanLCD8sendDataEh>:
    2026:	95 b1       	in	r25, 0x05	; 5
    2028:	28 2f       	mov	r18, r24
    202a:	21 70       	andi	r18, 0x01	; 1
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	22 0f       	add	r18, r18
    2030:	33 1f       	adc	r19, r19
    2032:	48 2f       	mov	r20, r24
    2034:	46 70       	andi	r20, 0x06	; 6
    2036:	68 e0       	ldi	r22, 0x08	; 8
    2038:	46 9f       	mul	r20, r22
    203a:	a0 01       	movw	r20, r0
    203c:	11 24       	eor	r1, r1
    203e:	24 2b       	or	r18, r20
    2040:	9d 7c       	andi	r25, 0xCD	; 205
    2042:	29 2b       	or	r18, r25
    2044:	25 b9       	out	0x05, r18	; 5
    2046:	9b b1       	in	r25, 0x0b	; 11
    2048:	88 70       	andi	r24, 0x08	; 8
    204a:	82 95       	swap	r24
    204c:	80 7f       	andi	r24, 0xF0	; 240
    204e:	9f 77       	andi	r25, 0x7F	; 127
    2050:	89 2b       	or	r24, r25
    2052:	8b b9       	out	0x0b, r24	; 11
    2054:	5c 9a       	sbi	0x0b, 4	; 11
    2056:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <delay_us.constprop.0>
    205a:	5c 98       	cbi	0x0b, 4	; 11
    205c:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <delay_us.constprop.0>
    2060:	08 95       	ret

00002062 <_ZN12OrangutanLCD4sendEhhh>:
    2062:	a0 e0       	ldi	r26, 0x00	; 0
    2064:	b0 e0       	ldi	r27, 0x00	; 0
    2066:	e7 e3       	ldi	r30, 0x37	; 55
    2068:	f0 e1       	ldi	r31, 0x10	; 16
    206a:	0c 94 90 19 	jmp	0x3320	; 0x3320 <__prologue_saves__+0x16>
    206e:	c8 2f       	mov	r28, r24
    2070:	d6 2e       	mov	r13, r22
    2072:	e4 2e       	mov	r14, r20
    2074:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <_ZZN12OrangutanLCD4initEvE11initialized>
    2078:	81 11       	cpse	r24, r1
    207a:	05 c0       	rjmp	.+10     	; 0x2086 <_ZN12OrangutanLCD4sendEhhh+0x24>
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_ZZN12OrangutanLCD4initEvE11initialized>
    2082:	0e 94 77 10 	call	0x20ee	; 0x20ee <_ZN12OrangutanLCD5init2Ev>
    2086:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <_ZN12OrangutanLCD8busyWaitEv>
    208a:	14 b1       	in	r17, 0x04	; 4
    208c:	d5 b1       	in	r29, 0x05	; 5
    208e:	fa b0       	in	r15, 0x0a	; 10
    2090:	0b b1       	in	r16, 0x0b	; 11
    2092:	28 98       	cbi	0x05, 0	; 5
    2094:	dd 20       	and	r13, r13
    2096:	11 f0       	breq	.+4      	; 0x209c <_ZN12OrangutanLCD4sendEhhh+0x3a>
    2098:	5a 9a       	sbi	0x0b, 2	; 11
    209a:	01 c0       	rjmp	.+2      	; 0x209e <_ZN12OrangutanLCD4sendEhhh+0x3c>
    209c:	5a 98       	cbi	0x0b, 2	; 11
    209e:	94 b1       	in	r25, 0x04	; 4
    20a0:	92 63       	ori	r25, 0x32	; 50
    20a2:	94 b9       	out	0x04, r25	; 4
    20a4:	57 9a       	sbi	0x0a, 7	; 10
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	e8 16       	cp	r14, r24
    20aa:	29 f0       	breq	.+10     	; 0x20b6 <_ZN12OrangutanLCD4sendEhhh+0x54>
    20ac:	8c 2f       	mov	r24, r28
    20ae:	82 95       	swap	r24
    20b0:	8f 70       	andi	r24, 0x0F	; 15
    20b2:	0e 94 13 10 	call	0x2026	; 0x2026 <_ZN12OrangutanLCD8sendDataEh>
    20b6:	8c 2f       	mov	r24, r28
    20b8:	8f 70       	andi	r24, 0x0F	; 15
    20ba:	0e 94 13 10 	call	0x2026	; 0x2026 <_ZN12OrangutanLCD8sendDataEh>
    20be:	fa b8       	out	0x0a, r15	; 10
    20c0:	0b b9       	out	0x0b, r16	; 11
    20c2:	14 b9       	out	0x04, r17	; 4
    20c4:	d5 b9       	out	0x05, r29	; 5
    20c6:	cd b7       	in	r28, 0x3d	; 61
    20c8:	de b7       	in	r29, 0x3e	; 62
    20ca:	e7 e0       	ldi	r30, 0x07	; 7
    20cc:	0c 94 ac 19 	jmp	0x3358	; 0x3358 <__epilogue_restores__+0x16>

000020d0 <_ZN12OrangutanLCD8send_cmdEh>:
    20d0:	42 e0       	ldi	r20, 0x02	; 2
    20d2:	60 e0       	ldi	r22, 0x00	; 0
    20d4:	0e 94 31 10 	call	0x2062	; 0x2062 <_ZN12OrangutanLCD4sendEhhh>
    20d8:	08 95       	ret

000020da <_ZN12OrangutanLCD9send_dataEh>:
    20da:	42 e0       	ldi	r20, 0x02	; 2
    20dc:	61 e0       	ldi	r22, 0x01	; 1
    20de:	0e 94 31 10 	call	0x2062	; 0x2062 <_ZN12OrangutanLCD4sendEhhh>
    20e2:	08 95       	ret

000020e4 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    20e4:	41 e0       	ldi	r20, 0x01	; 1
    20e6:	60 e0       	ldi	r22, 0x00	; 0
    20e8:	0e 94 31 10 	call	0x2062	; 0x2062 <_ZN12OrangutanLCD4sendEhhh>
    20ec:	08 95       	ret

000020ee <_ZN12OrangutanLCD5init2Ev>:
    20ee:	80 e1       	ldi	r24, 0x10	; 16
    20f0:	97 e2       	ldi	r25, 0x27	; 39
    20f2:	a0 e0       	ldi	r26, 0x00	; 0
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <lcdTimeout>
    20fa:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <lcdTimeout+0x1>
    20fe:	a0 93 99 01 	sts	0x0199, r26	; 0x800199 <lcdTimeout+0x2>
    2102:	b0 93 9a 01 	sts	0x019A, r27	; 0x80019a <lcdTimeout+0x3>
    2106:	52 9a       	sbi	0x0a, 2	; 10
    2108:	20 9a       	sbi	0x04, 0	; 4
    210a:	54 9a       	sbi	0x0a, 4	; 10
    210c:	8e e1       	ldi	r24, 0x1E	; 30
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	0e 94 5d 13 	call	0x26ba	; 0x26ba <delay_ms>
    2114:	83 e0       	ldi	r24, 0x03	; 3
    2116:	0e 94 72 10 	call	0x20e4	; 0x20e4 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    211a:	86 e0       	ldi	r24, 0x06	; 6
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	0e 94 5d 13 	call	0x26ba	; 0x26ba <delay_ms>
    2122:	83 e0       	ldi	r24, 0x03	; 3
    2124:	0e 94 72 10 	call	0x20e4	; 0x20e4 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2128:	82 e0       	ldi	r24, 0x02	; 2
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	0e 94 5d 13 	call	0x26ba	; 0x26ba <delay_ms>
    2130:	83 e0       	ldi	r24, 0x03	; 3
    2132:	0e 94 72 10 	call	0x20e4	; 0x20e4 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2136:	82 e0       	ldi	r24, 0x02	; 2
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	0e 94 5d 13 	call	0x26ba	; 0x26ba <delay_ms>
    213e:	82 e0       	ldi	r24, 0x02	; 2
    2140:	0e 94 72 10 	call	0x20e4	; 0x20e4 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2144:	82 e0       	ldi	r24, 0x02	; 2
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	0e 94 5d 13 	call	0x26ba	; 0x26ba <delay_ms>
    214c:	88 e2       	ldi	r24, 0x28	; 40
    214e:	0e 94 68 10 	call	0x20d0	; 0x20d0 <_ZN12OrangutanLCD8send_cmdEh>
    2152:	88 e0       	ldi	r24, 0x08	; 8
    2154:	0e 94 68 10 	call	0x20d0	; 0x20d0 <_ZN12OrangutanLCD8send_cmdEh>
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	0e 94 68 10 	call	0x20d0	; 0x20d0 <_ZN12OrangutanLCD8send_cmdEh>
    215e:	86 e0       	ldi	r24, 0x06	; 6
    2160:	0e 94 68 10 	call	0x20d0	; 0x20d0 <_ZN12OrangutanLCD8send_cmdEh>
    2164:	8c e0       	ldi	r24, 0x0C	; 12
    2166:	0e 94 68 10 	call	0x20d0	; 0x20d0 <_ZN12OrangutanLCD8send_cmdEh>
    216a:	08 95       	ret

0000216c <_ZN12OrangutanLCD5clearEv>:
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	0e 94 68 10 	call	0x20d0	; 0x20d0 <_ZN12OrangutanLCD8send_cmdEh>
    2172:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <printf_chars>
    2176:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <printf_chars+0x1>
    217a:	89 2b       	or	r24, r25
    217c:	f9 f0       	breq	.+62     	; 0x21bc <_ZN12OrangutanLCD5clearEv+0x50>
    217e:	60 e0       	ldi	r22, 0x00	; 0
    2180:	a0 e2       	ldi	r26, 0x20	; 32
    2182:	26 2f       	mov	r18, r22
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <numLCDCols>
    218a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <numLCDRows>
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	01 97       	sbiw	r24, 0x01	; 1
    2192:	78 9f       	mul	r23, r24
    2194:	a0 01       	movw	r20, r0
    2196:	79 9f       	mul	r23, r25
    2198:	50 0d       	add	r21, r0
    219a:	11 24       	eor	r1, r1
    219c:	24 17       	cp	r18, r20
    219e:	35 07       	cpc	r19, r21
    21a0:	4c f4       	brge	.+18     	; 0x21b4 <_ZN12OrangutanLCD5clearEv+0x48>
    21a2:	e0 91 9d 01 	lds	r30, 0x019D	; 0x80019d <printf_chars>
    21a6:	f0 91 9e 01 	lds	r31, 0x019E	; 0x80019e <printf_chars+0x1>
    21aa:	e2 0f       	add	r30, r18
    21ac:	f3 1f       	adc	r31, r19
    21ae:	a0 83       	st	Z, r26
    21b0:	6f 5f       	subi	r22, 0xFF	; 255
    21b2:	e7 cf       	rjmp	.-50     	; 0x2182 <_ZN12OrangutanLCD5clearEv+0x16>
    21b4:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <col>
    21b8:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <row>
    21bc:	08 95       	ret

000021be <clear>:
    21be:	0e 94 b6 10 	call	0x216c	; 0x216c <_ZN12OrangutanLCD5clearEv>
    21c2:	08 95       	ret

000021c4 <_ZN12OrangutanLCD5printEPKc>:
    21c4:	cf 93       	push	r28
    21c6:	df 93       	push	r29
    21c8:	ec 01       	movw	r28, r24
    21ca:	89 91       	ld	r24, Y+
    21cc:	88 23       	and	r24, r24
    21ce:	19 f0       	breq	.+6      	; 0x21d6 <_ZN12OrangutanLCD5printEPKc+0x12>
    21d0:	0e 94 6d 10 	call	0x20da	; 0x20da <_ZN12OrangutanLCD9send_dataEh>
    21d4:	fa cf       	rjmp	.-12     	; 0x21ca <_ZN12OrangutanLCD5printEPKc+0x6>
    21d6:	df 91       	pop	r29
    21d8:	cf 91       	pop	r28
    21da:	08 95       	ret

000021dc <print>:
    21dc:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <_ZN12OrangutanLCD5printEPKc>
    21e0:	08 95       	ret

000021e2 <_ZN12OrangutanLCD5printEm>:
    21e2:	aa e0       	ldi	r26, 0x0A	; 10
    21e4:	b0 e0       	ldi	r27, 0x00	; 0
    21e6:	e7 ef       	ldi	r30, 0xF7	; 247
    21e8:	f0 e1       	ldi	r31, 0x10	; 16
    21ea:	0c 94 8f 19 	jmp	0x331e	; 0x331e <__prologue_saves__+0x14>
    21ee:	1a e0       	ldi	r17, 0x0A	; 10
    21f0:	5a e0       	ldi	r21, 0x0A	; 10
    21f2:	c5 2e       	mov	r12, r21
    21f4:	d1 2c       	mov	r13, r1
    21f6:	e1 2c       	mov	r14, r1
    21f8:	f1 2c       	mov	r15, r1
    21fa:	06 2f       	mov	r16, r22
    21fc:	a7 01       	movw	r20, r14
    21fe:	96 01       	movw	r18, r12
    2200:	0e 94 22 19 	call	0x3244	; 0x3244 <__udivmodsi4>
    2204:	ca 01       	movw	r24, r20
    2206:	b9 01       	movw	r22, r18
    2208:	11 50       	subi	r17, 0x01	; 1
    220a:	e1 e0       	ldi	r30, 0x01	; 1
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	ec 0f       	add	r30, r28
    2210:	fd 1f       	adc	r31, r29
    2212:	e1 0f       	add	r30, r17
    2214:	f1 1d       	adc	r31, r1
    2216:	00 5d       	subi	r16, 0xD0	; 208
    2218:	2a e0       	ldi	r18, 0x0A	; 10
    221a:	62 9f       	mul	r22, r18
    221c:	00 19       	sub	r16, r0
    221e:	11 24       	eor	r1, r1
    2220:	00 83       	st	Z, r16
    2222:	61 15       	cp	r22, r1
    2224:	71 05       	cpc	r23, r1
    2226:	81 05       	cpc	r24, r1
    2228:	91 05       	cpc	r25, r1
    222a:	39 f7       	brne	.-50     	; 0x21fa <_ZN12OrangutanLCD5printEm+0x18>
    222c:	1a 30       	cpi	r17, 0x0A	; 10
    222e:	58 f4       	brcc	.+22     	; 0x2246 <_ZN12OrangutanLCD5printEm+0x64>
    2230:	e1 e0       	ldi	r30, 0x01	; 1
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	ec 0f       	add	r30, r28
    2236:	fd 1f       	adc	r31, r29
    2238:	e1 0f       	add	r30, r17
    223a:	f1 1d       	adc	r31, r1
    223c:	80 81       	ld	r24, Z
    223e:	0e 94 6d 10 	call	0x20da	; 0x20da <_ZN12OrangutanLCD9send_dataEh>
    2242:	1f 5f       	subi	r17, 0xFF	; 255
    2244:	f3 cf       	rjmp	.-26     	; 0x222c <_ZN12OrangutanLCD5printEm+0x4a>
    2246:	2a 96       	adiw	r28, 0x0a	; 10
    2248:	e8 e0       	ldi	r30, 0x08	; 8
    224a:	0c 94 ab 19 	jmp	0x3356	; 0x3356 <__epilogue_restores__+0x14>

0000224e <_ZN12OrangutanLCD5printEl>:
    224e:	cf 92       	push	r12
    2250:	df 92       	push	r13
    2252:	ef 92       	push	r14
    2254:	ff 92       	push	r15
    2256:	6b 01       	movw	r12, r22
    2258:	7c 01       	movw	r14, r24
    225a:	97 ff       	sbrs	r25, 7
    225c:	0b c0       	rjmp	.+22     	; 0x2274 <_ZN12OrangutanLCD5printEl+0x26>
    225e:	f0 94       	com	r15
    2260:	e0 94       	com	r14
    2262:	d0 94       	com	r13
    2264:	c0 94       	com	r12
    2266:	c1 1c       	adc	r12, r1
    2268:	d1 1c       	adc	r13, r1
    226a:	e1 1c       	adc	r14, r1
    226c:	f1 1c       	adc	r15, r1
    226e:	8d e2       	ldi	r24, 0x2D	; 45
    2270:	0e 94 6d 10 	call	0x20da	; 0x20da <_ZN12OrangutanLCD9send_dataEh>
    2274:	c7 01       	movw	r24, r14
    2276:	b6 01       	movw	r22, r12
    2278:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <_ZN12OrangutanLCD5printEm>
    227c:	ff 90       	pop	r15
    227e:	ef 90       	pop	r14
    2280:	df 90       	pop	r13
    2282:	cf 90       	pop	r12
    2284:	08 95       	ret

00002286 <print_long>:
    2286:	0e 94 27 11 	call	0x224e	; 0x224e <_ZN12OrangutanLCD5printEl>
    228a:	08 95       	ret

0000228c <_ZN12OrangutanLCD6gotoXYEhh>:
    228c:	a5 e0       	ldi	r26, 0x05	; 5
    228e:	b0 e0       	ldi	r27, 0x00	; 0
    2290:	ec e4       	ldi	r30, 0x4C	; 76
    2292:	f1 e1       	ldi	r31, 0x11	; 17
    2294:	0c 94 94 19 	jmp	0x3328	; 0x3328 <__prologue_saves__+0x1e>
    2298:	18 2f       	mov	r17, r24
    229a:	80 e8       	ldi	r24, 0x80	; 128
    229c:	89 83       	std	Y+1, r24	; 0x01
    229e:	80 ec       	ldi	r24, 0xC0	; 192
    22a0:	8a 83       	std	Y+2, r24	; 0x02
    22a2:	84 e9       	ldi	r24, 0x94	; 148
    22a4:	8b 83       	std	Y+3, r24	; 0x03
    22a6:	84 ed       	ldi	r24, 0xD4	; 212
    22a8:	8c 83       	std	Y+4, r24	; 0x04
    22aa:	fe 01       	movw	r30, r28
    22ac:	e6 0f       	add	r30, r22
    22ae:	f1 1d       	adc	r31, r1
    22b0:	81 81       	ldd	r24, Z+1	; 0x01
    22b2:	81 0f       	add	r24, r17
    22b4:	6d 83       	std	Y+5, r22	; 0x05
    22b6:	0e 94 68 10 	call	0x20d0	; 0x20d0 <_ZN12OrangutanLCD8send_cmdEh>
    22ba:	10 93 9b 01 	sts	0x019B, r17	; 0x80019b <col>
    22be:	6d 81       	ldd	r22, Y+5	; 0x05
    22c0:	60 93 9c 01 	sts	0x019C, r22	; 0x80019c <row>
    22c4:	25 96       	adiw	r28, 0x05	; 5
    22c6:	e3 e0       	ldi	r30, 0x03	; 3
    22c8:	0c 94 b0 19 	jmp	0x3360	; 0x3360 <__epilogue_restores__+0x1e>

000022cc <lcd_goto_xy>:
    22cc:	0e 94 46 11 	call	0x228c	; 0x228c <_ZN12OrangutanLCD6gotoXYEhh>
    22d0:	08 95       	ret

000022d2 <_ZN16OrangutanDigital9setOutputEhh>:
    22d2:	88 30       	cpi	r24, 0x08	; 8
    22d4:	58 f4       	brcc	.+22     	; 0x22ec <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    22d6:	91 e0       	ldi	r25, 0x01	; 1
    22d8:	01 c0       	rjmp	.+2      	; 0x22dc <_ZN16OrangutanDigital9setOutputEhh+0xa>
    22da:	99 0f       	add	r25, r25
    22dc:	8a 95       	dec	r24
    22de:	ea f7       	brpl	.-6      	; 0x22da <_ZN16OrangutanDigital9setOutputEhh+0x8>
    22e0:	89 2f       	mov	r24, r25
    22e2:	aa e2       	ldi	r26, 0x2A	; 42
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	eb e2       	ldi	r30, 0x2B	; 43
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	21 c0       	rjmp	.+66     	; 0x232e <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    22ec:	8e 30       	cpi	r24, 0x0E	; 14
    22ee:	60 f4       	brcc	.+24     	; 0x2308 <_ZN16OrangutanDigital9setOutputEhh+0x36>
    22f0:	98 ef       	ldi	r25, 0xF8	; 248
    22f2:	98 0f       	add	r25, r24
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	01 c0       	rjmp	.+2      	; 0x22fa <_ZN16OrangutanDigital9setOutputEhh+0x28>
    22f8:	88 0f       	add	r24, r24
    22fa:	9a 95       	dec	r25
    22fc:	ea f7       	brpl	.-6      	; 0x22f8 <_ZN16OrangutanDigital9setOutputEhh+0x26>
    22fe:	a4 e2       	ldi	r26, 0x24	; 36
    2300:	b0 e0       	ldi	r27, 0x00	; 0
    2302:	e5 e2       	ldi	r30, 0x25	; 37
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	13 c0       	rjmp	.+38     	; 0x232e <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    2308:	85 31       	cpi	r24, 0x15	; 21
    230a:	60 f4       	brcc	.+24     	; 0x2324 <_ZN16OrangutanDigital9setOutputEhh+0x52>
    230c:	92 ef       	ldi	r25, 0xF2	; 242
    230e:	98 0f       	add	r25, r24
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	01 c0       	rjmp	.+2      	; 0x2316 <_ZN16OrangutanDigital9setOutputEhh+0x44>
    2314:	88 0f       	add	r24, r24
    2316:	9a 95       	dec	r25
    2318:	ea f7       	brpl	.-6      	; 0x2314 <_ZN16OrangutanDigital9setOutputEhh+0x42>
    231a:	a7 e2       	ldi	r26, 0x27	; 39
    231c:	b0 e0       	ldi	r27, 0x00	; 0
    231e:	e8 e2       	ldi	r30, 0x28	; 40
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	05 c0       	rjmp	.+10     	; 0x232e <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	a0 e0       	ldi	r26, 0x00	; 0
    2328:	b0 e0       	ldi	r27, 0x00	; 0
    232a:	e0 e0       	ldi	r30, 0x00	; 0
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	6f 3f       	cpi	r22, 0xFF	; 255
    2330:	19 f4       	brne	.+6      	; 0x2338 <_ZN16OrangutanDigital9setOutputEhh+0x66>
    2332:	90 81       	ld	r25, Z
    2334:	98 27       	eor	r25, r24
    2336:	09 c0       	rjmp	.+18     	; 0x234a <_ZN16OrangutanDigital9setOutputEhh+0x78>
    2338:	66 23       	and	r22, r22
    233a:	19 f0       	breq	.+6      	; 0x2342 <_ZN16OrangutanDigital9setOutputEhh+0x70>
    233c:	90 81       	ld	r25, Z
    233e:	98 2b       	or	r25, r24
    2340:	04 c0       	rjmp	.+8      	; 0x234a <_ZN16OrangutanDigital9setOutputEhh+0x78>
    2342:	20 81       	ld	r18, Z
    2344:	98 2f       	mov	r25, r24
    2346:	90 95       	com	r25
    2348:	92 23       	and	r25, r18
    234a:	90 83       	st	Z, r25
    234c:	9c 91       	ld	r25, X
    234e:	98 2b       	or	r25, r24
    2350:	9c 93       	st	X, r25
    2352:	08 95       	ret

00002354 <_ZN15OrangutanMotors5init2Ev>:
    2354:	83 ef       	ldi	r24, 0xF3	; 243
    2356:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    235a:	84 bd       	out	0x24, r24	; 36
    235c:	82 e0       	ldi	r24, 0x02	; 2
    235e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2362:	85 bd       	out	0x25, r24	; 37
    2364:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    2368:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    236c:	18 bc       	out	0x28, r1	; 40
    236e:	17 bc       	out	0x27, r1	; 39
    2370:	60 e0       	ldi	r22, 0x00	; 0
    2372:	86 e0       	ldi	r24, 0x06	; 6
    2374:	0e 94 69 11 	call	0x22d2	; 0x22d2 <_ZN16OrangutanDigital9setOutputEhh>
    2378:	60 e0       	ldi	r22, 0x00	; 0
    237a:	85 e0       	ldi	r24, 0x05	; 5
    237c:	0e 94 69 11 	call	0x22d2	; 0x22d2 <_ZN16OrangutanDigital9setOutputEhh>
    2380:	60 e0       	ldi	r22, 0x00	; 0
    2382:	8b e0       	ldi	r24, 0x0B	; 11
    2384:	0e 94 69 11 	call	0x22d2	; 0x22d2 <_ZN16OrangutanDigital9setOutputEhh>
    2388:	60 e0       	ldi	r22, 0x00	; 0
    238a:	83 e0       	ldi	r24, 0x03	; 3
    238c:	0e 94 69 11 	call	0x22d2	; 0x22d2 <_ZN16OrangutanDigital9setOutputEhh>
    2390:	08 95       	ret

00002392 <_ZN15OrangutanMotors4initEv>:
    2392:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <_ZZN15OrangutanMotors4initEvE11initialized>
    2396:	81 11       	cpse	r24, r1
    2398:	05 c0       	rjmp	.+10     	; 0x23a4 <_ZN15OrangutanMotors4initEv+0x12>
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_ZZN15OrangutanMotors4initEvE11initialized>
    23a0:	0e 94 aa 11 	call	0x2354	; 0x2354 <_ZN15OrangutanMotors5init2Ev>
    23a4:	08 95       	ret

000023a6 <_ZN15OrangutanMotors10setM1SpeedEi>:
    23a6:	cf 93       	push	r28
    23a8:	df 93       	push	r29
    23aa:	ec 01       	movw	r28, r24
    23ac:	0e 94 c9 11 	call	0x2392	; 0x2392 <_ZN15OrangutanMotors4initEv>
    23b0:	d7 ff       	sbrs	r29, 7
    23b2:	05 c0       	rjmp	.+10     	; 0x23be <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    23b4:	d1 95       	neg	r29
    23b6:	c1 95       	neg	r28
    23b8:	d1 09       	sbc	r29, r1
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	01 c0       	rjmp	.+2      	; 0x23c0 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	cf 3f       	cpi	r28, 0xFF	; 255
    23c2:	d1 05       	cpc	r29, r1
    23c4:	19 f0       	breq	.+6      	; 0x23cc <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    23c6:	14 f0       	brlt	.+4      	; 0x23cc <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    23c8:	cf ef       	ldi	r28, 0xFF	; 255
    23ca:	d0 e0       	ldi	r29, 0x00	; 0
    23cc:	88 23       	and	r24, r24
    23ce:	19 f0       	breq	.+6      	; 0x23d6 <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    23d0:	18 bc       	out	0x28, r1	; 40
    23d2:	c7 bd       	out	0x27, r28	; 39
    23d4:	02 c0       	rjmp	.+4      	; 0x23da <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    23d6:	c8 bd       	out	0x28, r28	; 40
    23d8:	17 bc       	out	0x27, r1	; 39
    23da:	df 91       	pop	r29
    23dc:	cf 91       	pop	r28
    23de:	08 95       	ret

000023e0 <_ZN15OrangutanMotors10setM2SpeedEi>:
    23e0:	cf 93       	push	r28
    23e2:	df 93       	push	r29
    23e4:	ec 01       	movw	r28, r24
    23e6:	0e 94 c9 11 	call	0x2392	; 0x2392 <_ZN15OrangutanMotors4initEv>
    23ea:	d7 ff       	sbrs	r29, 7
    23ec:	05 c0       	rjmp	.+10     	; 0x23f8 <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    23ee:	d1 95       	neg	r29
    23f0:	c1 95       	neg	r28
    23f2:	d1 09       	sbc	r29, r1
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	01 c0       	rjmp	.+2      	; 0x23fa <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	cf 3f       	cpi	r28, 0xFF	; 255
    23fc:	d1 05       	cpc	r29, r1
    23fe:	19 f0       	breq	.+6      	; 0x2406 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    2400:	14 f0       	brlt	.+4      	; 0x2406 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    2402:	cf ef       	ldi	r28, 0xFF	; 255
    2404:	d0 e0       	ldi	r29, 0x00	; 0
    2406:	88 23       	and	r24, r24
    2408:	29 f0       	breq	.+10     	; 0x2414 <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    240a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    240e:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    2412:	04 c0       	rjmp	.+8      	; 0x241c <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    2414:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    2418:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    241c:	df 91       	pop	r29
    241e:	cf 91       	pop	r28
    2420:	08 95       	ret

00002422 <_ZN15OrangutanMotors9setSpeedsEii>:
    2422:	cf 93       	push	r28
    2424:	df 93       	push	r29
    2426:	eb 01       	movw	r28, r22
    2428:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <_ZN15OrangutanMotors10setM1SpeedEi>
    242c:	ce 01       	movw	r24, r28
    242e:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <_ZN15OrangutanMotors10setM2SpeedEi>
    2432:	df 91       	pop	r29
    2434:	cf 91       	pop	r28
    2436:	08 95       	ret

00002438 <set_motors>:
    2438:	0e 94 11 12 	call	0x2422	; 0x2422 <_ZN15OrangutanMotors9setSpeedsEii>
    243c:	08 95       	ret

0000243e <_ZN20OrangutanPushbuttons5init2Ev>:
    243e:	84 b1       	in	r24, 0x04	; 4
    2440:	8d 7c       	andi	r24, 0xCD	; 205
    2442:	84 b9       	out	0x04, r24	; 4
    2444:	85 b1       	in	r24, 0x05	; 5
    2446:	82 63       	ori	r24, 0x32	; 50
    2448:	85 b9       	out	0x05, r24	; 5
    244a:	85 e0       	ldi	r24, 0x05	; 5
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	6f 93       	push	r22
    2450:	64 e0       	ldi	r22, 0x04	; 4
    2452:	6a 95       	dec	r22
    2454:	f1 f7       	brne	.-4      	; 0x2452 <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    2456:	6f 91       	pop	r22
    2458:	01 97       	sbiw	r24, 0x01	; 1
    245a:	c9 f7       	brne	.-14     	; 0x244e <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    245c:	08 95       	ret

0000245e <_ZN20OrangutanPushbuttons4initEv>:
    245e:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    2462:	81 11       	cpse	r24, r1
    2464:	05 c0       	rjmp	.+10     	; 0x2470 <_ZN20OrangutanPushbuttons4initEv+0x12>
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    246c:	0e 94 1f 12 	call	0x243e	; 0x243e <_ZN20OrangutanPushbuttons5init2Ev>
    2470:	08 95       	ret

00002472 <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    2472:	cf 93       	push	r28
    2474:	c8 2f       	mov	r28, r24
    2476:	0e 94 2f 12 	call	0x245e	; 0x245e <_ZN20OrangutanPushbuttons4initEv>
    247a:	83 b1       	in	r24, 0x03	; 3
    247c:	8c 23       	and	r24, r28
    247e:	e9 f3       	breq	.-6      	; 0x247a <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    2480:	8a e0       	ldi	r24, 0x0A	; 10
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	0e 94 5d 13 	call	0x26ba	; 0x26ba <delay_ms>
    2488:	83 b1       	in	r24, 0x03	; 3
    248a:	8c 23       	and	r24, r28
    248c:	b1 f3       	breq	.-20     	; 0x247a <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    248e:	83 b1       	in	r24, 0x03	; 3
    2490:	8c 23       	and	r24, r28
    2492:	cf 91       	pop	r28
    2494:	08 95       	ret

00002496 <wait_for_button_release>:
    2496:	0e 94 39 12 	call	0x2472	; 0x2472 <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    249a:	08 95       	ret

0000249c <_ZN20OrangutanPushbuttons9isPressedEh>:
    249c:	a1 e0       	ldi	r26, 0x01	; 1
    249e:	b0 e0       	ldi	r27, 0x00	; 0
    24a0:	e4 e5       	ldi	r30, 0x54	; 84
    24a2:	f2 e1       	ldi	r31, 0x12	; 18
    24a4:	0c 94 95 19 	jmp	0x332a	; 0x332a <__prologue_saves__+0x20>
    24a8:	89 83       	std	Y+1, r24	; 0x01
    24aa:	0e 94 2f 12 	call	0x245e	; 0x245e <_ZN20OrangutanPushbuttons4initEv>
    24ae:	93 b1       	in	r25, 0x03	; 3
    24b0:	90 95       	com	r25
    24b2:	89 81       	ldd	r24, Y+1	; 0x01
    24b4:	89 23       	and	r24, r25
    24b6:	21 96       	adiw	r28, 0x01	; 1
    24b8:	e2 e0       	ldi	r30, 0x02	; 2
    24ba:	0c 94 b1 19 	jmp	0x3362	; 0x3362 <__epilogue_restores__+0x20>

000024be <button_is_pressed>:
    24be:	0e 94 4e 12 	call	0x249c	; 0x249c <_ZN20OrangutanPushbuttons9isPressedEh>
    24c2:	08 95       	ret

000024c4 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>:
    24c4:	28 2f       	mov	r18, r24
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	9a e0       	ldi	r25, 0x0A	; 10
    24ca:	89 9f       	mul	r24, r25
    24cc:	f0 01       	movw	r30, r0
    24ce:	11 24       	eor	r1, r1
    24d0:	e1 56       	subi	r30, 0x61	; 97
    24d2:	fe 4f       	sbci	r31, 0xFE	; 254
    24d4:	80 85       	ldd	r24, Z+8	; 0x08
    24d6:	91 85       	ldd	r25, Z+9	; 0x09
    24d8:	00 97       	sbiw	r24, 0x00	; 0
    24da:	21 f0       	breq	.+8      	; 0x24e4 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    24dc:	52 81       	ldd	r21, Z+2	; 0x02
    24de:	44 81       	ldd	r20, Z+4	; 0x04
    24e0:	54 17       	cp	r21, r20
    24e2:	80 f0       	brcs	.+32     	; 0x2504 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x40>
    24e4:	8a e0       	ldi	r24, 0x0A	; 10
    24e6:	82 9f       	mul	r24, r18
    24e8:	f0 01       	movw	r30, r0
    24ea:	83 9f       	mul	r24, r19
    24ec:	f0 0d       	add	r31, r0
    24ee:	11 24       	eor	r1, r1
    24f0:	e1 56       	subi	r30, 0x61	; 97
    24f2:	fe 4f       	sbci	r31, 0xFE	; 254
    24f4:	92 81       	ldd	r25, Z+2	; 0x02
    24f6:	84 81       	ldd	r24, Z+4	; 0x04
    24f8:	98 13       	cpse	r25, r24
    24fa:	0e c0       	rjmp	.+28     	; 0x2518 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x54>
    24fc:	85 81       	ldd	r24, Z+5	; 0x05
    24fe:	81 11       	cpse	r24, r1
    2500:	0a c0       	rjmp	.+20     	; 0x2516 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x52>
    2502:	08 95       	ret
    2504:	42 81       	ldd	r20, Z+2	; 0x02
    2506:	dc 01       	movw	r26, r24
    2508:	a4 0f       	add	r26, r20
    250a:	b1 1d       	adc	r27, r1
    250c:	6c 93       	st	X, r22
    250e:	82 81       	ldd	r24, Z+2	; 0x02
    2510:	8f 5f       	subi	r24, 0xFF	; 255
    2512:	82 83       	std	Z+2, r24	; 0x02
    2514:	e7 cf       	rjmp	.-50     	; 0x24e4 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    2516:	12 82       	std	Z+2, r1	; 0x02
    2518:	08 95       	ret

0000251a <__vector_18>:
    251a:	1f 92       	push	r1
    251c:	0f 92       	push	r0
    251e:	0f b6       	in	r0, 0x3f	; 63
    2520:	0f 92       	push	r0
    2522:	11 24       	eor	r1, r1
    2524:	2f 93       	push	r18
    2526:	3f 93       	push	r19
    2528:	4f 93       	push	r20
    252a:	5f 93       	push	r21
    252c:	6f 93       	push	r22
    252e:	7f 93       	push	r23
    2530:	8f 93       	push	r24
    2532:	9f 93       	push	r25
    2534:	af 93       	push	r26
    2536:	bf 93       	push	r27
    2538:	ef 93       	push	r30
    253a:	ff 93       	push	r31
    253c:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	0e 94 62 12 	call	0x24c4	; 0x24c4 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>
    2546:	ff 91       	pop	r31
    2548:	ef 91       	pop	r30
    254a:	bf 91       	pop	r27
    254c:	af 91       	pop	r26
    254e:	9f 91       	pop	r25
    2550:	8f 91       	pop	r24
    2552:	7f 91       	pop	r23
    2554:	6f 91       	pop	r22
    2556:	5f 91       	pop	r21
    2558:	4f 91       	pop	r20
    255a:	3f 91       	pop	r19
    255c:	2f 91       	pop	r18
    255e:	0f 90       	pop	r0
    2560:	0f be       	out	0x3f, r0	; 63
    2562:	0f 90       	pop	r0
    2564:	1f 90       	pop	r1
    2566:	18 95       	reti

00002568 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>:
    2568:	9a e0       	ldi	r25, 0x0A	; 10
    256a:	89 9f       	mul	r24, r25
    256c:	f0 01       	movw	r30, r0
    256e:	11 24       	eor	r1, r1
    2570:	e1 56       	subi	r30, 0x61	; 97
    2572:	fe 4f       	sbci	r31, 0xFE	; 254
    2574:	86 81       	ldd	r24, Z+6	; 0x06
    2576:	97 81       	ldd	r25, Z+7	; 0x07
    2578:	89 2b       	or	r24, r25
    257a:	59 f0       	breq	.+22     	; 0x2592 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    257c:	91 81       	ldd	r25, Z+1	; 0x01
    257e:	83 81       	ldd	r24, Z+3	; 0x03
    2580:	98 17       	cp	r25, r24
    2582:	38 f4       	brcc	.+14     	; 0x2592 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    2584:	80 81       	ld	r24, Z
    2586:	81 11       	cpse	r24, r1
    2588:	04 c0       	rjmp	.+8      	; 0x2592 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    258a:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    258e:	80 62       	ori	r24, 0x20	; 32
    2590:	03 c0       	rjmp	.+6      	; 0x2598 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x30>
    2592:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2596:	8f 7d       	andi	r24, 0xDF	; 223
    2598:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    259c:	08 95       	ret

0000259e <_ZN15OrangutanSerial11uart_tx_isrEh>:
    259e:	9a e0       	ldi	r25, 0x0A	; 10
    25a0:	89 9f       	mul	r24, r25
    25a2:	f0 01       	movw	r30, r0
    25a4:	11 24       	eor	r1, r1
    25a6:	e1 56       	subi	r30, 0x61	; 97
    25a8:	fe 4f       	sbci	r31, 0xFE	; 254
    25aa:	26 81       	ldd	r18, Z+6	; 0x06
    25ac:	37 81       	ldd	r19, Z+7	; 0x07
    25ae:	21 15       	cp	r18, r1
    25b0:	31 05       	cpc	r19, r1
    25b2:	41 f0       	breq	.+16     	; 0x25c4 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    25b4:	41 81       	ldd	r20, Z+1	; 0x01
    25b6:	93 81       	ldd	r25, Z+3	; 0x03
    25b8:	49 17       	cp	r20, r25
    25ba:	20 f4       	brcc	.+8      	; 0x25c4 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    25bc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    25c0:	95 fd       	sbrc	r25, 5
    25c2:	03 c0       	rjmp	.+6      	; 0x25ca <_ZN15OrangutanSerial11uart_tx_isrEh+0x2c>
    25c4:	0e 94 b4 12 	call	0x2568	; 0x2568 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    25c8:	08 95       	ret
    25ca:	91 81       	ldd	r25, Z+1	; 0x01
    25cc:	d9 01       	movw	r26, r18
    25ce:	a9 0f       	add	r26, r25
    25d0:	b1 1d       	adc	r27, r1
    25d2:	9c 91       	ld	r25, X
    25d4:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    25d8:	91 81       	ldd	r25, Z+1	; 0x01
    25da:	9f 5f       	subi	r25, 0xFF	; 255
    25dc:	91 83       	std	Z+1, r25	; 0x01
    25de:	f2 cf       	rjmp	.-28     	; 0x25c4 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>

000025e0 <__vector_19>:
    25e0:	1f 92       	push	r1
    25e2:	0f 92       	push	r0
    25e4:	0f b6       	in	r0, 0x3f	; 63
    25e6:	0f 92       	push	r0
    25e8:	11 24       	eor	r1, r1
    25ea:	2f 93       	push	r18
    25ec:	3f 93       	push	r19
    25ee:	4f 93       	push	r20
    25f0:	5f 93       	push	r21
    25f2:	6f 93       	push	r22
    25f4:	7f 93       	push	r23
    25f6:	8f 93       	push	r24
    25f8:	9f 93       	push	r25
    25fa:	af 93       	push	r26
    25fc:	bf 93       	push	r27
    25fe:	ef 93       	push	r30
    2600:	ff 93       	push	r31
    2602:	80 e0       	ldi	r24, 0x00	; 0
    2604:	0e 94 cf 12 	call	0x259e	; 0x259e <_ZN15OrangutanSerial11uart_tx_isrEh>
    2608:	ff 91       	pop	r31
    260a:	ef 91       	pop	r30
    260c:	bf 91       	pop	r27
    260e:	af 91       	pop	r26
    2610:	9f 91       	pop	r25
    2612:	8f 91       	pop	r24
    2614:	7f 91       	pop	r23
    2616:	6f 91       	pop	r22
    2618:	5f 91       	pop	r21
    261a:	4f 91       	pop	r20
    261c:	3f 91       	pop	r19
    261e:	2f 91       	pop	r18
    2620:	0f 90       	pop	r0
    2622:	0f be       	out	0x3f, r0	; 63
    2624:	0f 90       	pop	r0
    2626:	1f 90       	pop	r1
    2628:	18 95       	reti

0000262a <__vector_9>:
    262a:	2f 92       	push	r2
    262c:	8f 93       	push	r24
    262e:	9f 93       	push	r25
    2630:	2f b6       	in	r2, 0x3f	; 63
    2632:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <tickCount+0x1>
    2636:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <tickCount+0x2>
    263a:	01 96       	adiw	r24, 0x01	; 1
    263c:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <tickCount+0x1>
    2640:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <tickCount+0x2>
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <tickCount+0x3>
    264a:	89 1f       	adc	r24, r25
    264c:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <tickCount+0x3>
    2650:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <us_over_10+0x1>
    2654:	9c 5f       	subi	r25, 0xFC	; 252
    2656:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <us_over_10+0x1>
    265a:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <us_over_10>
    265e:	80 51       	subi	r24, 0x10	; 16
    2660:	97 42       	sbci	r25, 0x27	; 39
    2662:	c0 f0       	brcs	.+48     	; 0x2694 <end>
    2664:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <us_over_10+0x1>
    2668:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <us_over_10>
    266c:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <msCounter>
    2670:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <msCounter+0x1>
    2674:	01 96       	adiw	r24, 0x01	; 1
    2676:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <msCounter>
    267a:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <msCounter+0x1>
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <msCounter+0x2>
    2684:	89 1f       	adc	r24, r25
    2686:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <msCounter+0x2>
    268a:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <msCounter+0x3>
    268e:	89 1f       	adc	r24, r25
    2690:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <msCounter+0x3>

00002694 <end>:
    2694:	2f be       	out	0x3f, r2	; 63
    2696:	9f 91       	pop	r25
    2698:	8f 91       	pop	r24
    269a:	2f 90       	pop	r2
    269c:	18 95       	reti

0000269e <_ZN13OrangutanTime17delayMillisecondsEj>:
    269e:	28 ee       	ldi	r18, 0xE8	; 232
    26a0:	33 e0       	ldi	r19, 0x03	; 3
    26a2:	01 97       	sbiw	r24, 0x01	; 1
    26a4:	48 f0       	brcs	.+18     	; 0x26b8 <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    26a6:	f9 01       	movw	r30, r18
    26a8:	6f 93       	push	r22
    26aa:	64 e0       	ldi	r22, 0x04	; 4
    26ac:	6a 95       	dec	r22
    26ae:	f1 f7       	brne	.-4      	; 0x26ac <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    26b0:	6f 91       	pop	r22
    26b2:	31 97       	sbiw	r30, 0x01	; 1
    26b4:	c9 f7       	brne	.-14     	; 0x26a8 <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    26b6:	f5 cf       	rjmp	.-22     	; 0x26a2 <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    26b8:	08 95       	ret

000026ba <delay_ms>:
    26ba:	0e 94 4f 13 	call	0x269e	; 0x269e <_ZN13OrangutanTime17delayMillisecondsEj>
    26be:	08 95       	ret

000026c0 <_ZN13OrangutanTime5init2Ev>:
    26c0:	e0 e7       	ldi	r30, 0x70	; 112
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	80 81       	ld	r24, Z
    26c6:	8e 7f       	andi	r24, 0xFE	; 254
    26c8:	80 83       	st	Z, r24
    26ca:	a0 eb       	ldi	r26, 0xB0	; 176
    26cc:	b0 e0       	ldi	r27, 0x00	; 0
    26ce:	8c 91       	ld	r24, X
    26d0:	83 60       	ori	r24, 0x03	; 3
    26d2:	8c 93       	st	X, r24
    26d4:	a1 eb       	ldi	r26, 0xB1	; 177
    26d6:	b0 e0       	ldi	r27, 0x00	; 0
    26d8:	8c 91       	ld	r24, X
    26da:	80 7f       	andi	r24, 0xF0	; 240
    26dc:	8c 93       	st	X, r24
    26de:	8c 91       	ld	r24, X
    26e0:	82 60       	ori	r24, 0x02	; 2
    26e2:	8c 93       	st	X, r24
    26e4:	b8 9a       	sbi	0x17, 0	; 23
    26e6:	80 81       	ld	r24, Z
    26e8:	81 60       	ori	r24, 0x01	; 1
    26ea:	80 83       	st	Z, r24
    26ec:	78 94       	sei
    26ee:	08 95       	ret

000026f0 <_ZN13OrangutanTime4initEv>:
    26f0:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <_ZZN13OrangutanTime4initEvE11initialized>
    26f4:	81 11       	cpse	r24, r1
    26f6:	05 c0       	rjmp	.+10     	; 0x2702 <_ZN13OrangutanTime4initEv+0x12>
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <_ZZN13OrangutanTime4initEvE11initialized>
    26fe:	0e 94 60 13 	call	0x26c0	; 0x26c0 <_ZN13OrangutanTime5init2Ev>
    2702:	08 95       	ret

00002704 <_ZN13OrangutanTime2msEv>:
    2704:	0e 94 78 13 	call	0x26f0	; 0x26f0 <_ZN13OrangutanTime4initEv>
    2708:	e0 e7       	ldi	r30, 0x70	; 112
    270a:	f0 e0       	ldi	r31, 0x00	; 0
    270c:	80 81       	ld	r24, Z
    270e:	8e 7f       	andi	r24, 0xFE	; 254
    2710:	80 83       	st	Z, r24
    2712:	60 91 ab 01 	lds	r22, 0x01AB	; 0x8001ab <msCounter>
    2716:	70 91 ac 01 	lds	r23, 0x01AC	; 0x8001ac <msCounter+0x1>
    271a:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <msCounter+0x2>
    271e:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <msCounter+0x3>
    2722:	20 81       	ld	r18, Z
    2724:	21 60       	ori	r18, 0x01	; 1
    2726:	20 83       	st	Z, r18
    2728:	08 95       	ret

0000272a <get_ms>:
    272a:	0e 94 82 13 	call	0x2704	; 0x2704 <_ZN13OrangutanTime2msEv>
    272e:	08 95       	ret

00002730 <_ZN13OrangutanTime5resetEv>:
    2730:	0e 94 78 13 	call	0x26f0	; 0x26f0 <_ZN13OrangutanTime4initEv>
    2734:	e0 e7       	ldi	r30, 0x70	; 112
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	80 81       	ld	r24, Z
    273a:	8e 7f       	andi	r24, 0xFE	; 254
    273c:	80 83       	st	Z, r24
    273e:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <msCounter>
    2742:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <msCounter+0x1>
    2746:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <msCounter+0x2>
    274a:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <msCounter+0x3>
    274e:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <us_over_10+0x1>
    2752:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <us_over_10>
    2756:	80 81       	ld	r24, Z
    2758:	81 60       	ori	r24, 0x01	; 1
    275a:	80 83       	st	Z, r24
    275c:	08 95       	ret

0000275e <read_line_sensors>:
    275e:	46 2f       	mov	r20, r22
    2760:	bc 01       	movw	r22, r24
    2762:	83 eb       	ldi	r24, 0xB3	; 179
    2764:	91 e0       	ldi	r25, 0x01	; 1
    2766:	0e 94 40 16 	call	0x2c80	; 0x2c80 <_ZN16PololuQTRSensors4readEPjh>
    276a:	08 95       	ret

0000276c <calibrate_line_sensors>:
    276c:	68 2f       	mov	r22, r24
    276e:	83 eb       	ldi	r24, 0xB3	; 179
    2770:	91 e0       	ldi	r25, 0x01	; 1
    2772:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <_ZN16PololuQTRSensors9calibrateEh>
    2776:	08 95       	ret

00002778 <read_line>:
    2778:	46 2f       	mov	r20, r22
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	bc 01       	movw	r22, r24
    277e:	83 eb       	ldi	r24, 0xB3	; 179
    2780:	91 e0       	ldi	r25, 0x01	; 1
    2782:	0e 94 6f 18 	call	0x30de	; 0x30de <_ZN16PololuQTRSensors8readLineEPjhh>
    2786:	08 95       	ret

00002788 <_ZN9Pololu3pi4initEjh>:
    2788:	0f 93       	push	r16
    278a:	cf 93       	push	r28
    278c:	df 93       	push	r29
    278e:	00 d0       	rcall	.+0      	; 0x2790 <_ZN9Pololu3pi4initEjh+0x8>
    2790:	00 d0       	rcall	.+0      	; 0x2792 <_ZN9Pololu3pi4initEjh+0xa>
    2792:	1f 92       	push	r1
    2794:	cd b7       	in	r28, 0x3d	; 61
    2796:	de b7       	in	r29, 0x3e	; 62
    2798:	9c 01       	movw	r18, r24
    279a:	85 e0       	ldi	r24, 0x05	; 5
    279c:	ec e4       	ldi	r30, 0x4C	; 76
    279e:	f1 e0       	ldi	r31, 0x01	; 1
    27a0:	de 01       	movw	r26, r28
    27a2:	11 96       	adiw	r26, 0x01	; 1
    27a4:	01 90       	ld	r0, Z+
    27a6:	0d 92       	st	X+, r0
    27a8:	8a 95       	dec	r24
    27aa:	e1 f7       	brne	.-8      	; 0x27a4 <_ZN9Pololu3pi4initEjh+0x1c>
    27ac:	66 23       	and	r22, r22
    27ae:	11 f0       	breq	.+4      	; 0x27b4 <_ZN9Pololu3pi4initEjh+0x2c>
    27b0:	0f ef       	ldi	r16, 0xFF	; 255
    27b2:	01 c0       	rjmp	.+2      	; 0x27b6 <_ZN9Pololu3pi4initEjh+0x2e>
    27b4:	03 e1       	ldi	r16, 0x13	; 19
    27b6:	45 e0       	ldi	r20, 0x05	; 5
    27b8:	be 01       	movw	r22, r28
    27ba:	6f 5f       	subi	r22, 0xFF	; 255
    27bc:	7f 4f       	sbci	r23, 0xFF	; 255
    27be:	83 eb       	ldi	r24, 0xB3	; 179
    27c0:	91 e0       	ldi	r25, 0x01	; 1
    27c2:	0e 94 96 14 	call	0x292c	; 0x292c <_ZN18PololuQTRSensorsRC4initEPhhjh>
    27c6:	83 eb       	ldi	r24, 0xB3	; 179
    27c8:	91 e0       	ldi	r25, 0x01	; 1
    27ca:	0e 94 6d 14 	call	0x28da	; 0x28da <_ZN16PololuQTRSensors11emittersOffEv>
    27ce:	0e 94 98 13 	call	0x2730	; 0x2730 <_ZN13OrangutanTime5resetEv>
    27d2:	0f 90       	pop	r0
    27d4:	0f 90       	pop	r0
    27d6:	0f 90       	pop	r0
    27d8:	0f 90       	pop	r0
    27da:	0f 90       	pop	r0
    27dc:	df 91       	pop	r29
    27de:	cf 91       	pop	r28
    27e0:	0f 91       	pop	r16
    27e2:	08 95       	ret

000027e4 <pololu_3pi_init>:
    27e4:	60 e0       	ldi	r22, 0x00	; 0
    27e6:	0e 94 c4 13 	call	0x2788	; 0x2788 <_ZN9Pololu3pi4initEjh>
    27ea:	08 95       	ret

000027ec <_GLOBAL__sub_D_pololu_3pi_init>:
    27ec:	83 eb       	ldi	r24, 0xB3	; 179
    27ee:	91 e0       	ldi	r25, 0x01	; 1
    27f0:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <_ZN16PololuQTRSensorsD1Ev>
    27f4:	08 95       	ret

000027f6 <delay_us>:
    27f6:	6f 93       	push	r22
    27f8:	64 e0       	ldi	r22, 0x04	; 4
    27fa:	6a 95       	dec	r22
    27fc:	f1 f7       	brne	.-4      	; 0x27fa <delay_us+0x4>
    27fe:	6f 91       	pop	r22
    2800:	01 97       	sbiw	r24, 0x01	; 1
    2802:	c9 f7       	brne	.-14     	; 0x27f6 <delay_us>
    2804:	08 95       	ret

00002806 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    2806:	fc 01       	movw	r30, r24
    2808:	11 82       	std	Z+1, r1	; 0x01
    280a:	10 82       	st	Z, r1
    280c:	13 82       	std	Z+3, r1	; 0x03
    280e:	12 82       	std	Z+2, r1	; 0x02
    2810:	15 82       	std	Z+5, r1	; 0x05
    2812:	14 82       	std	Z+4, r1	; 0x04
    2814:	16 82       	std	Z+6, r1	; 0x06
    2816:	68 30       	cpi	r22, 0x08	; 8
    2818:	68 f4       	brcc	.+26     	; 0x2834 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    281a:	89 e2       	ldi	r24, 0x29	; 41
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	91 83       	std	Z+1, r25	; 0x01
    2820:	80 83       	st	Z, r24
    2822:	8b e2       	ldi	r24, 0x2B	; 43
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	93 83       	std	Z+3, r25	; 0x03
    2828:	82 83       	std	Z+2, r24	; 0x02
    282a:	8a e2       	ldi	r24, 0x2A	; 42
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	95 83       	std	Z+5, r25	; 0x05
    2830:	84 83       	std	Z+4, r24	; 0x04
    2832:	1f c0       	rjmp	.+62     	; 0x2872 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    2834:	6e 30       	cpi	r22, 0x0E	; 14
    2836:	70 f4       	brcc	.+28     	; 0x2854 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    2838:	83 e2       	ldi	r24, 0x23	; 35
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	91 83       	std	Z+1, r25	; 0x01
    283e:	80 83       	st	Z, r24
    2840:	85 e2       	ldi	r24, 0x25	; 37
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	93 83       	std	Z+3, r25	; 0x03
    2846:	82 83       	std	Z+2, r24	; 0x02
    2848:	84 e2       	ldi	r24, 0x24	; 36
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	95 83       	std	Z+5, r25	; 0x05
    284e:	84 83       	std	Z+4, r24	; 0x04
    2850:	68 50       	subi	r22, 0x08	; 8
    2852:	0f c0       	rjmp	.+30     	; 0x2872 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    2854:	65 31       	cpi	r22, 0x15	; 21
    2856:	98 f4       	brcc	.+38     	; 0x287e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    2858:	86 e2       	ldi	r24, 0x26	; 38
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	91 83       	std	Z+1, r25	; 0x01
    285e:	80 83       	st	Z, r24
    2860:	88 e2       	ldi	r24, 0x28	; 40
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	93 83       	std	Z+3, r25	; 0x03
    2866:	82 83       	std	Z+2, r24	; 0x02
    2868:	87 e2       	ldi	r24, 0x27	; 39
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	95 83       	std	Z+5, r25	; 0x05
    286e:	84 83       	std	Z+4, r24	; 0x04
    2870:	6e 50       	subi	r22, 0x0E	; 14
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	01 c0       	rjmp	.+2      	; 0x2878 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    2876:	88 0f       	add	r24, r24
    2878:	6a 95       	dec	r22
    287a:	ea f7       	brpl	.-6      	; 0x2876 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    287c:	86 83       	std	Z+6, r24	; 0x06
    287e:	08 95       	ret

00002880 <_ZN16PololuQTRSensors4initEhhh>:
    2880:	a7 e0       	ldi	r26, 0x07	; 7
    2882:	b0 e0       	ldi	r27, 0x00	; 0
    2884:	e6 e4       	ldi	r30, 0x46	; 70
    2886:	f4 e1       	ldi	r31, 0x14	; 20
    2888:	0c 94 93 19 	jmp	0x3326	; 0x3326 <__prologue_saves__+0x1c>
    288c:	8c 01       	movw	r16, r24
    288e:	fc 01       	movw	r30, r24
    2890:	11 82       	std	Z+1, r1	; 0x01
    2892:	10 82       	st	Z, r1
    2894:	13 82       	std	Z+3, r1	; 0x03
    2896:	12 82       	std	Z+2, r1	; 0x02
    2898:	15 82       	std	Z+5, r1	; 0x05
    289a:	14 82       	std	Z+4, r1	; 0x04
    289c:	17 82       	std	Z+7, r1	; 0x07
    289e:	16 82       	std	Z+6, r1	; 0x06
    28a0:	61 31       	cpi	r22, 0x11	; 17
    28a2:	18 f0       	brcs	.+6      	; 0x28aa <_ZN16PololuQTRSensors4initEhhh+0x2a>
    28a4:	80 e1       	ldi	r24, 0x10	; 16
    28a6:	80 87       	std	Z+8, r24	; 0x08
    28a8:	02 c0       	rjmp	.+4      	; 0x28ae <_ZN16PololuQTRSensors4initEhhh+0x2e>
    28aa:	fc 01       	movw	r30, r24
    28ac:	60 87       	std	Z+8, r22	; 0x08
    28ae:	f8 01       	movw	r30, r16
    28b0:	20 8b       	std	Z+16, r18	; 0x10
    28b2:	64 2f       	mov	r22, r20
    28b4:	ce 01       	movw	r24, r28
    28b6:	01 96       	adiw	r24, 0x01	; 1
    28b8:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    28bc:	8f 81       	ldd	r24, Y+7	; 0x07
    28be:	f8 01       	movw	r30, r16
    28c0:	81 87       	std	Z+9, r24	; 0x09
    28c2:	8b 81       	ldd	r24, Y+3	; 0x03
    28c4:	9c 81       	ldd	r25, Y+4	; 0x04
    28c6:	93 87       	std	Z+11, r25	; 0x0b
    28c8:	82 87       	std	Z+10, r24	; 0x0a
    28ca:	8d 81       	ldd	r24, Y+5	; 0x05
    28cc:	9e 81       	ldd	r25, Y+6	; 0x06
    28ce:	95 87       	std	Z+13, r25	; 0x0d
    28d0:	84 87       	std	Z+12, r24	; 0x0c
    28d2:	27 96       	adiw	r28, 0x07	; 7
    28d4:	e4 e0       	ldi	r30, 0x04	; 4
    28d6:	0c 94 af 19 	jmp	0x335e	; 0x335e <__epilogue_restores__+0x1c>

000028da <_ZN16PololuQTRSensors11emittersOffEv>:
    28da:	fc 01       	movw	r30, r24
    28dc:	a4 85       	ldd	r26, Z+12	; 0x0c
    28de:	b5 85       	ldd	r27, Z+13	; 0x0d
    28e0:	10 97       	sbiw	r26, 0x00	; 0
    28e2:	79 f0       	breq	.+30     	; 0x2902 <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    28e4:	8c 91       	ld	r24, X
    28e6:	91 85       	ldd	r25, Z+9	; 0x09
    28e8:	89 2b       	or	r24, r25
    28ea:	8c 93       	st	X, r24
    28ec:	a2 85       	ldd	r26, Z+10	; 0x0a
    28ee:	b3 85       	ldd	r27, Z+11	; 0x0b
    28f0:	9c 91       	ld	r25, X
    28f2:	81 85       	ldd	r24, Z+9	; 0x09
    28f4:	80 95       	com	r24
    28f6:	89 23       	and	r24, r25
    28f8:	8c 93       	st	X, r24
    28fa:	88 ec       	ldi	r24, 0xC8	; 200
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <delay_us>
    2902:	08 95       	ret

00002904 <_ZN16PololuQTRSensors10emittersOnEv>:
    2904:	fc 01       	movw	r30, r24
    2906:	a4 85       	ldd	r26, Z+12	; 0x0c
    2908:	b5 85       	ldd	r27, Z+13	; 0x0d
    290a:	10 97       	sbiw	r26, 0x00	; 0
    290c:	71 f0       	breq	.+28     	; 0x292a <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    290e:	8c 91       	ld	r24, X
    2910:	91 85       	ldd	r25, Z+9	; 0x09
    2912:	89 2b       	or	r24, r25
    2914:	8c 93       	st	X, r24
    2916:	a2 85       	ldd	r26, Z+10	; 0x0a
    2918:	b3 85       	ldd	r27, Z+11	; 0x0b
    291a:	8c 91       	ld	r24, X
    291c:	91 85       	ldd	r25, Z+9	; 0x09
    291e:	89 2b       	or	r24, r25
    2920:	8c 93       	st	X, r24
    2922:	88 ec       	ldi	r24, 0xC8	; 200
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <delay_us>
    292a:	08 95       	ret

0000292c <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    292c:	a7 e0       	ldi	r26, 0x07	; 7
    292e:	b0 e0       	ldi	r27, 0x00	; 0
    2930:	ec e9       	ldi	r30, 0x9C	; 156
    2932:	f4 e1       	ldi	r31, 0x14	; 20
    2934:	0c 94 88 19 	jmp	0x3310	; 0x3310 <__prologue_saves__+0x6>
    2938:	7c 01       	movw	r14, r24
    293a:	4b 01       	movw	r8, r22
    293c:	64 2f       	mov	r22, r20
    293e:	39 01       	movw	r6, r18
    2940:	40 2f       	mov	r20, r16
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	0e 94 40 14 	call	0x2880	; 0x2880 <_ZN16PololuQTRSensors4initEhhh>
    2948:	87 01       	movw	r16, r14
    294a:	0f 5b       	subi	r16, 0xBF	; 191
    294c:	1f 4f       	sbci	r17, 0xFF	; 255
    294e:	f8 01       	movw	r30, r16
    2950:	10 82       	st	Z, r1
    2952:	67 01       	movw	r12, r14
    2954:	f2 e4       	ldi	r31, 0x42	; 66
    2956:	cf 0e       	add	r12, r31
    2958:	d1 1c       	adc	r13, r1
    295a:	f6 01       	movw	r30, r12
    295c:	10 82       	st	Z, r1
    295e:	57 01       	movw	r10, r14
    2960:	f3 e4       	ldi	r31, 0x43	; 67
    2962:	af 0e       	add	r10, r31
    2964:	b1 1c       	adc	r11, r1
    2966:	f5 01       	movw	r30, r10
    2968:	10 82       	st	Z, r1
    296a:	f7 01       	movw	r30, r14
    296c:	77 86       	std	Z+15, r7	; 0x0f
    296e:	66 86       	std	Z+14, r6	; 0x0e
    2970:	51 2c       	mov	r5, r1
    2972:	f7 01       	movw	r30, r14
    2974:	80 85       	ldd	r24, Z+8	; 0x08
    2976:	58 16       	cp	r5, r24
    2978:	50 f5       	brcc	.+84     	; 0x29ce <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    297a:	65 2c       	mov	r6, r5
    297c:	71 2c       	mov	r7, r1
    297e:	f4 01       	movw	r30, r8
    2980:	e6 0d       	add	r30, r6
    2982:	f7 1d       	adc	r31, r7
    2984:	60 81       	ld	r22, Z
    2986:	ce 01       	movw	r24, r28
    2988:	01 96       	adiw	r24, 0x01	; 1
    298a:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    298e:	2f 81       	ldd	r18, Y+7	; 0x07
    2990:	f7 01       	movw	r30, r14
    2992:	e6 0d       	add	r30, r6
    2994:	f7 1d       	adc	r31, r7
    2996:	21 8b       	std	Z+17, r18	; 0x11
    2998:	89 81       	ldd	r24, Y+1	; 0x01
    299a:	9a 81       	ldd	r25, Y+2	; 0x02
    299c:	f3 01       	movw	r30, r6
    299e:	ee 0f       	add	r30, r30
    29a0:	ff 1f       	adc	r31, r31
    29a2:	ee 0d       	add	r30, r14
    29a4:	ff 1d       	adc	r31, r15
    29a6:	92 a3       	std	Z+34, r25	; 0x22
    29a8:	81 a3       	std	Z+33, r24	; 0x21
    29aa:	83 32       	cpi	r24, 0x23	; 35
    29ac:	91 05       	cpc	r25, r1
    29ae:	11 f4       	brne	.+4      	; 0x29b4 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    29b0:	f8 01       	movw	r30, r16
    29b2:	08 c0       	rjmp	.+16     	; 0x29c4 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    29b4:	86 32       	cpi	r24, 0x26	; 38
    29b6:	91 05       	cpc	r25, r1
    29b8:	11 f4       	brne	.+4      	; 0x29be <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    29ba:	f6 01       	movw	r30, r12
    29bc:	03 c0       	rjmp	.+6      	; 0x29c4 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    29be:	89 97       	sbiw	r24, 0x29	; 41
    29c0:	21 f4       	brne	.+8      	; 0x29ca <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    29c2:	f5 01       	movw	r30, r10
    29c4:	80 81       	ld	r24, Z
    29c6:	82 2b       	or	r24, r18
    29c8:	80 83       	st	Z, r24
    29ca:	53 94       	inc	r5
    29cc:	d2 cf       	rjmp	.-92     	; 0x2972 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    29ce:	27 96       	adiw	r28, 0x07	; 7
    29d0:	ef e0       	ldi	r30, 0x0F	; 15
    29d2:	0c 94 a4 19 	jmp	0x3348	; 0x3348 <__epilogue_restores__+0x6>

000029d6 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    29d6:	a0 e0       	ldi	r26, 0x00	; 0
    29d8:	b0 e0       	ldi	r27, 0x00	; 0
    29da:	e1 ef       	ldi	r30, 0xF1	; 241
    29dc:	f4 e1       	ldi	r31, 0x14	; 20
    29de:	0c 94 8a 19 	jmp	0x3314	; 0x3314 <__prologue_saves__+0xa>
    29e2:	ec 01       	movw	r28, r24
    29e4:	5b 01       	movw	r10, r22
    29e6:	6c 01       	movw	r12, r24
    29e8:	81 e4       	ldi	r24, 0x41	; 65
    29ea:	c8 0e       	add	r12, r24
    29ec:	d1 1c       	adc	r13, r1
    29ee:	f6 01       	movw	r30, r12
    29f0:	80 80       	ld	r8, Z
    29f2:	7e 01       	movw	r14, r28
    29f4:	f2 e4       	ldi	r31, 0x42	; 66
    29f6:	ef 0e       	add	r14, r31
    29f8:	f1 1c       	adc	r15, r1
    29fa:	f7 01       	movw	r30, r14
    29fc:	70 80       	ld	r7, Z
    29fe:	8e 01       	movw	r16, r28
    2a00:	0d 5b       	subi	r16, 0xBD	; 189
    2a02:	1f 4f       	sbci	r17, 0xFF	; 255
    2a04:	f8 01       	movw	r30, r16
    2a06:	90 80       	ld	r9, Z
    2a08:	80 e0       	ldi	r24, 0x00	; 0
    2a0a:	98 85       	ldd	r25, Y+8	; 0x08
    2a0c:	89 17       	cp	r24, r25
    2a0e:	48 f4       	brcc	.+18     	; 0x2a22 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    2a10:	f5 01       	movw	r30, r10
    2a12:	e8 0f       	add	r30, r24
    2a14:	f1 1d       	adc	r31, r1
    2a16:	e8 0f       	add	r30, r24
    2a18:	f1 1d       	adc	r31, r1
    2a1a:	11 82       	std	Z+1, r1	; 0x01
    2a1c:	10 82       	st	Z, r1
    2a1e:	8f 5f       	subi	r24, 0xFF	; 255
    2a20:	f4 cf       	rjmp	.-24     	; 0x2a0a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    2a22:	84 b1       	in	r24, 0x04	; 4
    2a24:	f6 01       	movw	r30, r12
    2a26:	90 81       	ld	r25, Z
    2a28:	89 2b       	or	r24, r25
    2a2a:	84 b9       	out	0x04, r24	; 4
    2a2c:	87 b1       	in	r24, 0x07	; 7
    2a2e:	f7 01       	movw	r30, r14
    2a30:	90 81       	ld	r25, Z
    2a32:	89 2b       	or	r24, r25
    2a34:	87 b9       	out	0x07, r24	; 7
    2a36:	8a b1       	in	r24, 0x0a	; 10
    2a38:	f8 01       	movw	r30, r16
    2a3a:	90 81       	ld	r25, Z
    2a3c:	89 2b       	or	r24, r25
    2a3e:	8a b9       	out	0x0a, r24	; 10
    2a40:	85 b1       	in	r24, 0x05	; 5
    2a42:	f6 01       	movw	r30, r12
    2a44:	90 81       	ld	r25, Z
    2a46:	89 2b       	or	r24, r25
    2a48:	85 b9       	out	0x05, r24	; 5
    2a4a:	88 b1       	in	r24, 0x08	; 8
    2a4c:	f7 01       	movw	r30, r14
    2a4e:	90 81       	ld	r25, Z
    2a50:	89 2b       	or	r24, r25
    2a52:	88 b9       	out	0x08, r24	; 8
    2a54:	8b b1       	in	r24, 0x0b	; 11
    2a56:	f8 01       	movw	r30, r16
    2a58:	90 81       	ld	r25, Z
    2a5a:	89 2b       	or	r24, r25
    2a5c:	8b b9       	out	0x0b, r24	; 11
    2a5e:	8a e0       	ldi	r24, 0x0A	; 10
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <delay_us>
    2a66:	94 b1       	in	r25, 0x04	; 4
    2a68:	f6 01       	movw	r30, r12
    2a6a:	80 81       	ld	r24, Z
    2a6c:	80 95       	com	r24
    2a6e:	89 23       	and	r24, r25
    2a70:	84 b9       	out	0x04, r24	; 4
    2a72:	97 b1       	in	r25, 0x07	; 7
    2a74:	f7 01       	movw	r30, r14
    2a76:	80 81       	ld	r24, Z
    2a78:	80 95       	com	r24
    2a7a:	89 23       	and	r24, r25
    2a7c:	87 b9       	out	0x07, r24	; 7
    2a7e:	9a b1       	in	r25, 0x0a	; 10
    2a80:	f8 01       	movw	r30, r16
    2a82:	80 81       	ld	r24, Z
    2a84:	80 95       	com	r24
    2a86:	89 23       	and	r24, r25
    2a88:	8a b9       	out	0x0a, r24	; 10
    2a8a:	95 b1       	in	r25, 0x05	; 5
    2a8c:	f6 01       	movw	r30, r12
    2a8e:	80 81       	ld	r24, Z
    2a90:	80 95       	com	r24
    2a92:	89 23       	and	r24, r25
    2a94:	85 b9       	out	0x05, r24	; 5
    2a96:	98 b1       	in	r25, 0x08	; 8
    2a98:	f7 01       	movw	r30, r14
    2a9a:	80 81       	ld	r24, Z
    2a9c:	80 95       	com	r24
    2a9e:	89 23       	and	r24, r25
    2aa0:	88 b9       	out	0x08, r24	; 8
    2aa2:	9b b1       	in	r25, 0x0b	; 11
    2aa4:	f8 01       	movw	r30, r16
    2aa6:	80 81       	ld	r24, Z
    2aa8:	80 95       	com	r24
    2aaa:	89 23       	and	r24, r25
    2aac:	8b b9       	out	0x0b, r24	; 11
    2aae:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2ab2:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2ab6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2aba:	83 60       	ori	r24, 0x03	; 3
    2abc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2ac0:	82 e0       	ldi	r24, 0x02	; 2
    2ac2:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2ac6:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	2e 85       	ldd	r18, Y+14	; 0x0e
    2ad0:	3f 85       	ldd	r19, Y+15	; 0x0f
    2ad2:	82 17       	cp	r24, r18
    2ad4:	93 07       	cpc	r25, r19
    2ad6:	20 f5       	brcc	.+72     	; 0x2b20 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    2ad8:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    2adc:	2c 2d       	mov	r18, r12
    2ade:	24 1b       	sub	r18, r20
    2ae0:	82 0f       	add	r24, r18
    2ae2:	91 1d       	adc	r25, r1
    2ae4:	03 b1       	in	r16, 0x03	; 3
    2ae6:	08 11       	cpse	r16, r8
    2ae8:	32 c0       	rjmp	.+100    	; 0x2b4e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2aea:	f6 b0       	in	r15, 0x06	; 6
    2aec:	f7 10       	cpse	r15, r7
    2aee:	2f c0       	rjmp	.+94     	; 0x2b4e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2af0:	29 b1       	in	r18, 0x09	; 9
    2af2:	29 11       	cpse	r18, r9
    2af4:	2c c0       	rjmp	.+88     	; 0x2b4e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2af6:	10 c0       	rjmp	.+32     	; 0x2b18 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    2af8:	21 2f       	mov	r18, r17
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	a9 01       	movw	r20, r18
    2afe:	44 0f       	add	r20, r20
    2b00:	55 1f       	adc	r21, r21
    2b02:	f5 01       	movw	r30, r10
    2b04:	e4 0f       	add	r30, r20
    2b06:	f5 1f       	adc	r31, r21
    2b08:	60 81       	ld	r22, Z
    2b0a:	71 81       	ldd	r23, Z+1	; 0x01
    2b0c:	67 2b       	or	r22, r23
    2b0e:	21 f1       	breq	.+72     	; 0x2b58 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    2b10:	1f 5f       	subi	r17, 0xFF	; 255
    2b12:	28 85       	ldd	r18, Y+8	; 0x08
    2b14:	12 17       	cp	r17, r18
    2b16:	80 f3       	brcs	.-32     	; 0x2af8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    2b18:	7f 2c       	mov	r7, r15
    2b1a:	80 2e       	mov	r8, r16
    2b1c:	4c 2d       	mov	r20, r12
    2b1e:	d7 cf       	rjmp	.-82     	; 0x2ace <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    2b20:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2b24:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	88 85       	ldd	r24, Y+8	; 0x08
    2b2c:	28 17       	cp	r18, r24
    2b2e:	30 f5       	brcc	.+76     	; 0x2b7c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    2b30:	f5 01       	movw	r30, r10
    2b32:	e2 0f       	add	r30, r18
    2b34:	f1 1d       	adc	r31, r1
    2b36:	e2 0f       	add	r30, r18
    2b38:	f1 1d       	adc	r31, r1
    2b3a:	80 81       	ld	r24, Z
    2b3c:	91 81       	ldd	r25, Z+1	; 0x01
    2b3e:	89 2b       	or	r24, r25
    2b40:	21 f4       	brne	.+8      	; 0x2b4a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    2b42:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b44:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b46:	91 83       	std	Z+1, r25	; 0x01
    2b48:	80 83       	st	Z, r24
    2b4a:	2f 5f       	subi	r18, 0xFF	; 255
    2b4c:	ee cf       	rjmp	.-36     	; 0x2b2a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    2b4e:	03 b1       	in	r16, 0x03	; 3
    2b50:	f6 b0       	in	r15, 0x06	; 6
    2b52:	99 b0       	in	r9, 0x09	; 9
    2b54:	10 e0       	ldi	r17, 0x00	; 0
    2b56:	dd cf       	rjmp	.-70     	; 0x2b12 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    2b58:	de 01       	movw	r26, r28
    2b5a:	a4 0f       	add	r26, r20
    2b5c:	b5 1f       	adc	r27, r21
    2b5e:	91 96       	adiw	r26, 0x21	; 33
    2b60:	0d 90       	ld	r0, X+
    2b62:	bc 91       	ld	r27, X
    2b64:	a0 2d       	mov	r26, r0
    2b66:	4c 91       	ld	r20, X
    2b68:	de 01       	movw	r26, r28
    2b6a:	a2 0f       	add	r26, r18
    2b6c:	b3 1f       	adc	r27, r19
    2b6e:	51 96       	adiw	r26, 0x11	; 17
    2b70:	2c 91       	ld	r18, X
    2b72:	42 23       	and	r20, r18
    2b74:	69 f6       	brne	.-102    	; 0x2b10 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    2b76:	91 83       	std	Z+1, r25	; 0x01
    2b78:	80 83       	st	Z, r24
    2b7a:	ca cf       	rjmp	.-108    	; 0x2b10 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    2b7c:	cd b7       	in	r28, 0x3d	; 61
    2b7e:	de b7       	in	r29, 0x3e	; 62
    2b80:	ed e0       	ldi	r30, 0x0D	; 13
    2b82:	0c 94 a6 19 	jmp	0x334c	; 0x334c <__epilogue_restores__+0xa>

00002b86 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    2b86:	ef 92       	push	r14
    2b88:	ff 92       	push	r15
    2b8a:	0f 93       	push	r16
    2b8c:	1f 93       	push	r17
    2b8e:	cf 93       	push	r28
    2b90:	df 93       	push	r29
    2b92:	fc 01       	movw	r30, r24
    2b94:	9b 01       	movw	r18, r22
    2b96:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2b9a:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2b9e:	47 b1       	in	r20, 0x07	; 7
    2ba0:	18 b1       	in	r17, 0x08	; 8
    2ba2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2ba6:	86 fd       	sbrc	r24, 6
    2ba8:	fc cf       	rjmp	.-8      	; 0x2ba2 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    2baa:	80 e0       	ldi	r24, 0x00	; 0
    2bac:	90 85       	ldd	r25, Z+8	; 0x08
    2bae:	89 17       	cp	r24, r25
    2bb0:	48 f4       	brcc	.+18     	; 0x2bc4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    2bb2:	d9 01       	movw	r26, r18
    2bb4:	a8 0f       	add	r26, r24
    2bb6:	b1 1d       	adc	r27, r1
    2bb8:	a8 0f       	add	r26, r24
    2bba:	b1 1d       	adc	r27, r1
    2bbc:	1d 92       	st	X+, r1
    2bbe:	1c 92       	st	X, r1
    2bc0:	8f 5f       	subi	r24, 0xFF	; 255
    2bc2:	f4 cf       	rjmp	.-24     	; 0x2bac <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    2bc4:	97 b1       	in	r25, 0x07	; 7
    2bc6:	82 a1       	ldd	r24, Z+34	; 0x22
    2bc8:	80 95       	com	r24
    2bca:	89 23       	and	r24, r25
    2bcc:	87 b9       	out	0x07, r24	; 7
    2bce:	98 b1       	in	r25, 0x08	; 8
    2bd0:	82 a1       	ldd	r24, Z+34	; 0x22
    2bd2:	80 95       	com	r24
    2bd4:	89 23       	and	r24, r25
    2bd6:	88 b9       	out	0x08, r24	; 8
    2bd8:	87 e8       	ldi	r24, 0x87	; 135
    2bda:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2bde:	e1 2c       	mov	r14, r1
    2be0:	81 a1       	ldd	r24, Z+33	; 0x21
    2be2:	e8 16       	cp	r14, r24
    2be4:	10 f0       	brcs	.+4      	; 0x2bea <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    2be6:	e1 2c       	mov	r14, r1
    2be8:	29 c0       	rjmp	.+82     	; 0x2c3c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    2bea:	50 e0       	ldi	r21, 0x00	; 0
    2bec:	80 85       	ldd	r24, Z+8	; 0x08
    2bee:	58 17       	cp	r21, r24
    2bf0:	18 f5       	brcc	.+70     	; 0x2c38 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    2bf2:	a5 2f       	mov	r26, r21
    2bf4:	b0 e0       	ldi	r27, 0x00	; 0
    2bf6:	ef 01       	movw	r28, r30
    2bf8:	ca 0f       	add	r28, r26
    2bfa:	db 1f       	adc	r29, r27
    2bfc:	89 89       	ldd	r24, Y+17	; 0x11
    2bfe:	80 64       	ori	r24, 0x40	; 64
    2c00:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2c04:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2c08:	80 64       	ori	r24, 0x40	; 64
    2c0a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2c0e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2c12:	86 fd       	sbrc	r24, 6
    2c14:	fc cf       	rjmp	.-8      	; 0x2c0e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    2c16:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    2c1a:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    2c1e:	aa 0f       	add	r26, r26
    2c20:	bb 1f       	adc	r27, r27
    2c22:	a2 0f       	add	r26, r18
    2c24:	b3 1f       	adc	r27, r19
    2c26:	8d 91       	ld	r24, X+
    2c28:	9c 91       	ld	r25, X
    2c2a:	11 97       	sbiw	r26, 0x01	; 1
    2c2c:	86 0f       	add	r24, r22
    2c2e:	97 1f       	adc	r25, r23
    2c30:	8d 93       	st	X+, r24
    2c32:	9c 93       	st	X, r25
    2c34:	5f 5f       	subi	r21, 0xFF	; 255
    2c36:	da cf       	rjmp	.-76     	; 0x2bec <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    2c38:	e3 94       	inc	r14
    2c3a:	d2 cf       	rjmp	.-92     	; 0x2be0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    2c3c:	80 85       	ldd	r24, Z+8	; 0x08
    2c3e:	e8 16       	cp	r14, r24
    2c40:	a0 f4       	brcc	.+40     	; 0x2c6a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    2c42:	e9 01       	movw	r28, r18
    2c44:	ce 0d       	add	r28, r14
    2c46:	d1 1d       	adc	r29, r1
    2c48:	ce 0d       	add	r28, r14
    2c4a:	d1 1d       	adc	r29, r1
    2c4c:	61 a1       	ldd	r22, Z+33	; 0x21
    2c4e:	70 e0       	ldi	r23, 0x00	; 0
    2c50:	cb 01       	movw	r24, r22
    2c52:	95 95       	asr	r25
    2c54:	87 95       	ror	r24
    2c56:	a8 81       	ld	r26, Y
    2c58:	b9 81       	ldd	r27, Y+1	; 0x01
    2c5a:	8a 0f       	add	r24, r26
    2c5c:	9b 1f       	adc	r25, r27
    2c5e:	0e 94 0e 19 	call	0x321c	; 0x321c <__udivmodhi4>
    2c62:	79 83       	std	Y+1, r23	; 0x01
    2c64:	68 83       	st	Y, r22
    2c66:	e3 94       	inc	r14
    2c68:	e9 cf       	rjmp	.-46     	; 0x2c3c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    2c6a:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2c6e:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2c72:	18 b9       	out	0x08, r17	; 8
    2c74:	47 b9       	out	0x07, r20	; 7
    2c76:	cd b7       	in	r28, 0x3d	; 61
    2c78:	de b7       	in	r29, 0x3e	; 62
    2c7a:	e6 e0       	ldi	r30, 0x06	; 6
    2c7c:	0c 94 ad 19 	jmp	0x335a	; 0x335a <__epilogue_restores__+0x18>

00002c80 <_ZN16PololuQTRSensors4readEPjh>:
    2c80:	a0 e2       	ldi	r26, 0x20	; 32
    2c82:	b0 e0       	ldi	r27, 0x00	; 0
    2c84:	e6 e4       	ldi	r30, 0x46	; 70
    2c86:	f6 e1       	ldi	r31, 0x16	; 22
    2c88:	0c 94 90 19 	jmp	0x3320	; 0x3320 <__prologue_saves__+0x16>
    2c8c:	8c 01       	movw	r16, r24
    2c8e:	7b 01       	movw	r14, r22
    2c90:	d4 2e       	mov	r13, r20
    2c92:	8f ef       	ldi	r24, 0xFF	; 255
    2c94:	84 0f       	add	r24, r20
    2c96:	82 30       	cpi	r24, 0x02	; 2
    2c98:	18 f4       	brcc	.+6      	; 0x2ca0 <_ZN16PololuQTRSensors4readEPjh+0x20>
    2c9a:	c8 01       	movw	r24, r16
    2c9c:	0e 94 82 14 	call	0x2904	; 0x2904 <_ZN16PololuQTRSensors10emittersOnEv>
    2ca0:	d8 01       	movw	r26, r16
    2ca2:	50 96       	adiw	r26, 0x10	; 16
    2ca4:	8c 91       	ld	r24, X
    2ca6:	b7 01       	movw	r22, r14
    2ca8:	81 11       	cpse	r24, r1
    2caa:	10 c0       	rjmp	.+32     	; 0x2ccc <_ZN16PololuQTRSensors4readEPjh+0x4c>
    2cac:	c8 01       	movw	r24, r16
    2cae:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2cb2:	c8 01       	movw	r24, r16
    2cb4:	0e 94 6d 14 	call	0x28da	; 0x28da <_ZN16PololuQTRSensors11emittersOffEv>
    2cb8:	b2 e0       	ldi	r27, 0x02	; 2
    2cba:	db 12       	cpse	r13, r27
    2cbc:	3a c0       	rjmp	.+116    	; 0x2d32 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2cbe:	be 01       	movw	r22, r28
    2cc0:	6f 5f       	subi	r22, 0xFF	; 255
    2cc2:	7f 4f       	sbci	r23, 0xFF	; 255
    2cc4:	c8 01       	movw	r24, r16
    2cc6:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2cca:	0f c0       	rjmp	.+30     	; 0x2cea <_ZN16PololuQTRSensors4readEPjh+0x6a>
    2ccc:	c8 01       	movw	r24, r16
    2cce:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2cd2:	c8 01       	movw	r24, r16
    2cd4:	0e 94 6d 14 	call	0x28da	; 0x28da <_ZN16PololuQTRSensors11emittersOffEv>
    2cd8:	e2 e0       	ldi	r30, 0x02	; 2
    2cda:	de 12       	cpse	r13, r30
    2cdc:	2a c0       	rjmp	.+84     	; 0x2d32 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2cde:	be 01       	movw	r22, r28
    2ce0:	6f 5f       	subi	r22, 0xFF	; 255
    2ce2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ce4:	c8 01       	movw	r24, r16
    2ce6:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2cea:	40 e0       	ldi	r20, 0x00	; 0
    2cec:	f8 01       	movw	r30, r16
    2cee:	80 85       	ldd	r24, Z+8	; 0x08
    2cf0:	48 17       	cp	r20, r24
    2cf2:	f8 f4       	brcc	.+62     	; 0x2d32 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2cf4:	84 2f       	mov	r24, r20
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	88 0f       	add	r24, r24
    2cfa:	99 1f       	adc	r25, r25
    2cfc:	f7 01       	movw	r30, r14
    2cfe:	e8 0f       	add	r30, r24
    2d00:	f9 1f       	adc	r31, r25
    2d02:	21 e0       	ldi	r18, 0x01	; 1
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	2c 0f       	add	r18, r28
    2d08:	3d 1f       	adc	r19, r29
    2d0a:	82 0f       	add	r24, r18
    2d0c:	93 1f       	adc	r25, r19
    2d0e:	d8 01       	movw	r26, r16
    2d10:	1e 96       	adiw	r26, 0x0e	; 14
    2d12:	2d 91       	ld	r18, X+
    2d14:	3c 91       	ld	r19, X
    2d16:	1f 97       	sbiw	r26, 0x0f	; 15
    2d18:	dc 01       	movw	r26, r24
    2d1a:	8d 91       	ld	r24, X+
    2d1c:	9c 91       	ld	r25, X
    2d1e:	28 1b       	sub	r18, r24
    2d20:	39 0b       	sbc	r19, r25
    2d22:	80 81       	ld	r24, Z
    2d24:	91 81       	ldd	r25, Z+1	; 0x01
    2d26:	82 0f       	add	r24, r18
    2d28:	93 1f       	adc	r25, r19
    2d2a:	91 83       	std	Z+1, r25	; 0x01
    2d2c:	80 83       	st	Z, r24
    2d2e:	4f 5f       	subi	r20, 0xFF	; 255
    2d30:	dd cf       	rjmp	.-70     	; 0x2cec <_ZN16PololuQTRSensors4readEPjh+0x6c>
    2d32:	a0 96       	adiw	r28, 0x20	; 32
    2d34:	e7 e0       	ldi	r30, 0x07	; 7
    2d36:	0c 94 ac 19 	jmp	0x3358	; 0x3358 <__epilogue_restores__+0x16>

00002d3a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    2d3a:	2f 92       	push	r2
    2d3c:	3f 92       	push	r3
    2d3e:	5f 92       	push	r5
    2d40:	6f 92       	push	r6
    2d42:	7f 92       	push	r7
    2d44:	8f 92       	push	r8
    2d46:	9f 92       	push	r9
    2d48:	af 92       	push	r10
    2d4a:	bf 92       	push	r11
    2d4c:	cf 92       	push	r12
    2d4e:	df 92       	push	r13
    2d50:	ef 92       	push	r14
    2d52:	ff 92       	push	r15
    2d54:	0f 93       	push	r16
    2d56:	1f 93       	push	r17
    2d58:	cf 93       	push	r28
    2d5a:	df 93       	push	r29
    2d5c:	cd b7       	in	r28, 0x3d	; 61
    2d5e:	de b7       	in	r29, 0x3e	; 62
    2d60:	c0 56       	subi	r28, 0x60	; 96
    2d62:	d1 09       	sbc	r29, r1
    2d64:	0f b6       	in	r0, 0x3f	; 63
    2d66:	f8 94       	cli
    2d68:	de bf       	out	0x3e, r29	; 62
    2d6a:	0f be       	out	0x3f, r0	; 63
    2d6c:	cd bf       	out	0x3d, r28	; 61
    2d6e:	8c 01       	movw	r16, r24
    2d70:	4b 01       	movw	r8, r22
    2d72:	5a 01       	movw	r10, r20
    2d74:	52 2e       	mov	r5, r18
    2d76:	da 01       	movw	r26, r20
    2d78:	8d 91       	ld	r24, X+
    2d7a:	9c 91       	ld	r25, X
    2d7c:	89 2b       	or	r24, r25
    2d7e:	31 f0       	breq	.+12     	; 0x2d8c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x52>
    2d80:	f4 01       	movw	r30, r8
    2d82:	80 81       	ld	r24, Z
    2d84:	91 81       	ldd	r25, Z+1	; 0x01
    2d86:	89 2b       	or	r24, r25
    2d88:	f1 f4       	brne	.+60     	; 0x2dc6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    2d8a:	24 c0       	rjmp	.+72     	; 0x2dd4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x9a>
    2d8c:	d8 01       	movw	r26, r16
    2d8e:	18 96       	adiw	r26, 0x08	; 8
    2d90:	8c 91       	ld	r24, X
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	88 0f       	add	r24, r24
    2d96:	99 1f       	adc	r25, r25
    2d98:	0e 94 c2 19 	call	0x3384	; 0x3384 <malloc>
    2d9c:	f5 01       	movw	r30, r10
    2d9e:	91 83       	std	Z+1, r25	; 0x01
    2da0:	80 83       	st	Z, r24
    2da2:	00 97       	sbiw	r24, 0x00	; 0
    2da4:	09 f4       	brne	.+2      	; 0x2da8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x6e>
    2da6:	b1 c0       	rjmp	.+354    	; 0x2f0a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    2da8:	fc 01       	movw	r30, r24
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	d8 01       	movw	r26, r16
    2db0:	18 96       	adiw	r26, 0x08	; 8
    2db2:	8c 91       	ld	r24, X
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	28 17       	cp	r18, r24
    2db8:	39 07       	cpc	r19, r25
    2dba:	14 f7       	brge	.-60     	; 0x2d80 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x46>
    2dbc:	11 92       	st	Z+, r1
    2dbe:	11 92       	st	Z+, r1
    2dc0:	2f 5f       	subi	r18, 0xFF	; 255
    2dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    2dc4:	f4 cf       	rjmp	.-24     	; 0x2dae <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x74>
    2dc6:	e1 2c       	mov	r14, r1
    2dc8:	f1 2c       	mov	r15, r1
    2dca:	6e 01       	movw	r12, r28
    2dcc:	b1 e2       	ldi	r27, 0x21	; 33
    2dce:	cb 0e       	add	r12, r27
    2dd0:	d1 1c       	adc	r13, r1
    2dd2:	21 c0       	rjmp	.+66     	; 0x2e16 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    2dd4:	f8 01       	movw	r30, r16
    2dd6:	80 85       	ldd	r24, Z+8	; 0x08
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	88 0f       	add	r24, r24
    2ddc:	99 1f       	adc	r25, r25
    2dde:	0e 94 c2 19 	call	0x3384	; 0x3384 <malloc>
    2de2:	d4 01       	movw	r26, r8
    2de4:	8d 93       	st	X+, r24
    2de6:	9c 93       	st	X, r25
    2de8:	00 97       	sbiw	r24, 0x00	; 0
    2dea:	09 f4       	brne	.+2      	; 0x2dee <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb4>
    2dec:	8e c0       	rjmp	.+284    	; 0x2f0a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    2dee:	fc 01       	movw	r30, r24
    2df0:	20 e0       	ldi	r18, 0x00	; 0
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	d8 01       	movw	r26, r16
    2df6:	18 96       	adiw	r26, 0x08	; 8
    2df8:	8c 91       	ld	r24, X
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	28 17       	cp	r18, r24
    2dfe:	39 07       	cpc	r19, r25
    2e00:	14 f7       	brge	.-60     	; 0x2dc6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    2e02:	d8 01       	movw	r26, r16
    2e04:	1e 96       	adiw	r26, 0x0e	; 14
    2e06:	8d 91       	ld	r24, X+
    2e08:	9c 91       	ld	r25, X
    2e0a:	1f 97       	sbiw	r26, 0x0f	; 15
    2e0c:	81 93       	st	Z+, r24
    2e0e:	91 93       	st	Z+, r25
    2e10:	2f 5f       	subi	r18, 0xFF	; 255
    2e12:	3f 4f       	sbci	r19, 0xFF	; 255
    2e14:	ef cf       	rjmp	.-34     	; 0x2df4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xba>
    2e16:	45 2d       	mov	r20, r5
    2e18:	be 01       	movw	r22, r28
    2e1a:	6f 5b       	subi	r22, 0xBF	; 191
    2e1c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e1e:	c8 01       	movw	r24, r16
    2e20:	0e 94 40 16 	call	0x2c80	; 0x2c80 <_ZN16PololuQTRSensors4readEPjh>
    2e24:	f8 01       	movw	r30, r16
    2e26:	60 84       	ldd	r6, Z+8	; 0x08
    2e28:	71 2c       	mov	r7, r1
    2e2a:	fe 01       	movw	r30, r28
    2e2c:	ef 5b       	subi	r30, 0xBF	; 191
    2e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e30:	c6 01       	movw	r24, r12
    2e32:	9e 01       	movw	r18, r28
    2e34:	2f 5f       	subi	r18, 0xFF	; 255
    2e36:	3f 4f       	sbci	r19, 0xFF	; 255
    2e38:	19 01       	movw	r2, r18
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	26 15       	cp	r18, r6
    2e40:	37 05       	cpc	r19, r7
    2e42:	4c f5       	brge	.+82     	; 0x2e96 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x15c>
    2e44:	e1 14       	cp	r14, r1
    2e46:	f1 04       	cpc	r15, r1
    2e48:	89 f0       	breq	.+34     	; 0x2e6c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    2e4a:	dc 01       	movw	r26, r24
    2e4c:	6d 91       	ld	r22, X+
    2e4e:	7c 91       	ld	r23, X
    2e50:	40 81       	ld	r20, Z
    2e52:	51 81       	ldd	r21, Z+1	; 0x01
    2e54:	64 17       	cp	r22, r20
    2e56:	75 07       	cpc	r23, r21
    2e58:	48 f0       	brcs	.+18     	; 0x2e6c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    2e5a:	d1 01       	movw	r26, r2
    2e5c:	6d 91       	ld	r22, X+
    2e5e:	7c 91       	ld	r23, X
    2e60:	40 81       	ld	r20, Z
    2e62:	51 81       	ldd	r21, Z+1	; 0x01
    2e64:	46 17       	cp	r20, r22
    2e66:	57 07       	cpc	r21, r23
    2e68:	48 f0       	brcs	.+18     	; 0x2e7c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x142>
    2e6a:	0d c0       	rjmp	.+26     	; 0x2e86 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x14c>
    2e6c:	40 81       	ld	r20, Z
    2e6e:	51 81       	ldd	r21, Z+1	; 0x01
    2e70:	dc 01       	movw	r26, r24
    2e72:	4d 93       	st	X+, r20
    2e74:	5c 93       	st	X, r21
    2e76:	e1 14       	cp	r14, r1
    2e78:	f1 04       	cpc	r15, r1
    2e7a:	79 f7       	brne	.-34     	; 0x2e5a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x120>
    2e7c:	40 81       	ld	r20, Z
    2e7e:	51 81       	ldd	r21, Z+1	; 0x01
    2e80:	d1 01       	movw	r26, r2
    2e82:	4d 93       	st	X+, r20
    2e84:	5c 93       	st	X, r21
    2e86:	2f 5f       	subi	r18, 0xFF	; 255
    2e88:	3f 4f       	sbci	r19, 0xFF	; 255
    2e8a:	b2 e0       	ldi	r27, 0x02	; 2
    2e8c:	2b 0e       	add	r2, r27
    2e8e:	31 1c       	adc	r3, r1
    2e90:	32 96       	adiw	r30, 0x02	; 2
    2e92:	02 96       	adiw	r24, 0x02	; 2
    2e94:	d4 cf       	rjmp	.-88     	; 0x2e3e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x104>
    2e96:	ef ef       	ldi	r30, 0xFF	; 255
    2e98:	ee 1a       	sub	r14, r30
    2e9a:	fe 0a       	sbc	r15, r30
    2e9c:	fa e0       	ldi	r31, 0x0A	; 10
    2e9e:	ef 16       	cp	r14, r31
    2ea0:	f1 04       	cpc	r15, r1
    2ea2:	09 f0       	breq	.+2      	; 0x2ea6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x16c>
    2ea4:	b8 cf       	rjmp	.-144    	; 0x2e16 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    2ea6:	9e 01       	movw	r18, r28
    2ea8:	2f 5f       	subi	r18, 0xFF	; 255
    2eaa:	3f 4f       	sbci	r19, 0xFF	; 255
    2eac:	79 01       	movw	r14, r18
    2eae:	36 01       	movw	r6, r12
    2eb0:	80 e0       	ldi	r24, 0x00	; 0
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	f8 01       	movw	r30, r16
    2eb6:	20 85       	ldd	r18, Z+8	; 0x08
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	82 17       	cp	r24, r18
    2ebc:	93 07       	cpc	r25, r19
    2ebe:	2c f5       	brge	.+74     	; 0x2f0a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    2ec0:	d7 01       	movw	r26, r14
    2ec2:	2d 91       	ld	r18, X+
    2ec4:	3d 91       	ld	r19, X+
    2ec6:	7d 01       	movw	r14, r26
    2ec8:	b3 01       	movw	r22, r6
    2eca:	6c 19       	sub	r22, r12
    2ecc:	7d 09       	sbc	r23, r13
    2ece:	d5 01       	movw	r26, r10
    2ed0:	ed 91       	ld	r30, X+
    2ed2:	fc 91       	ld	r31, X
    2ed4:	e6 0f       	add	r30, r22
    2ed6:	f7 1f       	adc	r31, r23
    2ed8:	40 81       	ld	r20, Z
    2eda:	51 81       	ldd	r21, Z+1	; 0x01
    2edc:	42 17       	cp	r20, r18
    2ede:	53 07       	cpc	r21, r19
    2ee0:	10 f4       	brcc	.+4      	; 0x2ee6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1ac>
    2ee2:	31 83       	std	Z+1, r19	; 0x01
    2ee4:	20 83       	st	Z, r18
    2ee6:	f3 01       	movw	r30, r6
    2ee8:	21 91       	ld	r18, Z+
    2eea:	31 91       	ld	r19, Z+
    2eec:	3f 01       	movw	r6, r30
    2eee:	d4 01       	movw	r26, r8
    2ef0:	ed 91       	ld	r30, X+
    2ef2:	fc 91       	ld	r31, X
    2ef4:	e6 0f       	add	r30, r22
    2ef6:	f7 1f       	adc	r31, r23
    2ef8:	40 81       	ld	r20, Z
    2efa:	51 81       	ldd	r21, Z+1	; 0x01
    2efc:	24 17       	cp	r18, r20
    2efe:	35 07       	cpc	r19, r21
    2f00:	10 f4       	brcc	.+4      	; 0x2f06 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1cc>
    2f02:	31 83       	std	Z+1, r19	; 0x01
    2f04:	20 83       	st	Z, r18
    2f06:	01 96       	adiw	r24, 0x01	; 1
    2f08:	d5 cf       	rjmp	.-86     	; 0x2eb4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17a>
    2f0a:	c0 5a       	subi	r28, 0xA0	; 160
    2f0c:	df 4f       	sbci	r29, 0xFF	; 255
    2f0e:	0f b6       	in	r0, 0x3f	; 63
    2f10:	f8 94       	cli
    2f12:	de bf       	out	0x3e, r29	; 62
    2f14:	0f be       	out	0x3f, r0	; 63
    2f16:	cd bf       	out	0x3d, r28	; 61
    2f18:	df 91       	pop	r29
    2f1a:	cf 91       	pop	r28
    2f1c:	1f 91       	pop	r17
    2f1e:	0f 91       	pop	r16
    2f20:	ff 90       	pop	r15
    2f22:	ef 90       	pop	r14
    2f24:	df 90       	pop	r13
    2f26:	cf 90       	pop	r12
    2f28:	bf 90       	pop	r11
    2f2a:	af 90       	pop	r10
    2f2c:	9f 90       	pop	r9
    2f2e:	8f 90       	pop	r8
    2f30:	7f 90       	pop	r7
    2f32:	6f 90       	pop	r6
    2f34:	5f 90       	pop	r5
    2f36:	3f 90       	pop	r3
    2f38:	2f 90       	pop	r2
    2f3a:	08 95       	ret

00002f3c <_ZN16PololuQTRSensors9calibrateEh>:
    2f3c:	1f 93       	push	r17
    2f3e:	cf 93       	push	r28
    2f40:	df 93       	push	r29
    2f42:	ec 01       	movw	r28, r24
    2f44:	16 2f       	mov	r17, r22
    2f46:	8f ef       	ldi	r24, 0xFF	; 255
    2f48:	86 0f       	add	r24, r22
    2f4a:	82 30       	cpi	r24, 0x02	; 2
    2f4c:	18 f0       	brcs	.+6      	; 0x2f54 <_ZN16PololuQTRSensors9calibrateEh+0x18>
    2f4e:	66 23       	and	r22, r22
    2f50:	59 f0       	breq	.+22     	; 0x2f68 <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    2f52:	14 c0       	rjmp	.+40     	; 0x2f7c <_ZN16PololuQTRSensors9calibrateEh+0x40>
    2f54:	21 e0       	ldi	r18, 0x01	; 1
    2f56:	ae 01       	movw	r20, r28
    2f58:	4e 5f       	subi	r20, 0xFE	; 254
    2f5a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f5c:	be 01       	movw	r22, r28
    2f5e:	ce 01       	movw	r24, r28
    2f60:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    2f64:	12 30       	cpi	r17, 0x02	; 2
    2f66:	51 f4       	brne	.+20     	; 0x2f7c <_ZN16PololuQTRSensors9calibrateEh+0x40>
    2f68:	ae 01       	movw	r20, r28
    2f6a:	4a 5f       	subi	r20, 0xFA	; 250
    2f6c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f6e:	be 01       	movw	r22, r28
    2f70:	6c 5f       	subi	r22, 0xFC	; 252
    2f72:	7f 4f       	sbci	r23, 0xFF	; 255
    2f74:	20 e0       	ldi	r18, 0x00	; 0
    2f76:	ce 01       	movw	r24, r28
    2f78:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    2f7c:	df 91       	pop	r29
    2f7e:	cf 91       	pop	r28
    2f80:	1f 91       	pop	r17
    2f82:	08 95       	ret

00002f84 <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    2f84:	a0 e0       	ldi	r26, 0x00	; 0
    2f86:	b0 e0       	ldi	r27, 0x00	; 0
    2f88:	e8 ec       	ldi	r30, 0xC8	; 200
    2f8a:	f7 e1       	ldi	r31, 0x17	; 23
    2f8c:	0c 94 8e 19 	jmp	0x331c	; 0x331c <__prologue_saves__+0x12>
    2f90:	ec 01       	movw	r28, r24
    2f92:	8b 01       	movw	r16, r22
    2f94:	b4 2e       	mov	r11, r20
    2f96:	84 2f       	mov	r24, r20
    2f98:	8d 7f       	andi	r24, 0xFD	; 253
    2f9a:	51 f4       	brne	.+20     	; 0x2fb0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    2f9c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f9e:	9d 81       	ldd	r25, Y+5	; 0x05
    2fa0:	89 2b       	or	r24, r25
    2fa2:	09 f4       	brne	.+2      	; 0x2fa6 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x22>
    2fa4:	97 c0       	rjmp	.+302    	; 0x30d4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2fa6:	8e 81       	ldd	r24, Y+6	; 0x06
    2fa8:	9f 81       	ldd	r25, Y+7	; 0x07
    2faa:	89 2b       	or	r24, r25
    2fac:	09 f4       	brne	.+2      	; 0x2fb0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    2fae:	92 c0       	rjmp	.+292    	; 0x30d4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2fb0:	8f ef       	ldi	r24, 0xFF	; 255
    2fb2:	8b 0d       	add	r24, r11
    2fb4:	82 30       	cpi	r24, 0x02	; 2
    2fb6:	50 f4       	brcc	.+20     	; 0x2fcc <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    2fb8:	88 81       	ld	r24, Y
    2fba:	99 81       	ldd	r25, Y+1	; 0x01
    2fbc:	89 2b       	or	r24, r25
    2fbe:	09 f4       	brne	.+2      	; 0x2fc2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3e>
    2fc0:	89 c0       	rjmp	.+274    	; 0x30d4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc4:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc6:	89 2b       	or	r24, r25
    2fc8:	09 f4       	brne	.+2      	; 0x2fcc <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    2fca:	84 c0       	rjmp	.+264    	; 0x30d4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2fcc:	4b 2d       	mov	r20, r11
    2fce:	b8 01       	movw	r22, r16
    2fd0:	ce 01       	movw	r24, r28
    2fd2:	0e 94 40 16 	call	0x2c80	; 0x2c80 <_ZN16PololuQTRSensors4readEPjh>
    2fd6:	78 01       	movw	r14, r16
    2fd8:	00 e0       	ldi	r16, 0x00	; 0
    2fda:	10 e0       	ldi	r17, 0x00	; 0
    2fdc:	c1 2c       	mov	r12, r1
    2fde:	d1 2c       	mov	r13, r1
    2fe0:	88 85       	ldd	r24, Y+8	; 0x08
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	c8 16       	cp	r12, r24
    2fe6:	d9 06       	cpc	r13, r25
    2fe8:	0c f0       	brlt	.+2      	; 0x2fec <_ZN16PololuQTRSensors14readCalibratedEPjh+0x68>
    2fea:	74 c0       	rjmp	.+232    	; 0x30d4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2fec:	81 e0       	ldi	r24, 0x01	; 1
    2fee:	b8 12       	cpse	r11, r24
    2ff0:	0a c0       	rjmp	.+20     	; 0x3006 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x82>
    2ff2:	ea 81       	ldd	r30, Y+2	; 0x02
    2ff4:	fb 81       	ldd	r31, Y+3	; 0x03
    2ff6:	e0 0f       	add	r30, r16
    2ff8:	f1 1f       	adc	r31, r17
    2ffa:	01 90       	ld	r0, Z+
    2ffc:	f0 81       	ld	r31, Z
    2ffe:	e0 2d       	mov	r30, r0
    3000:	a8 81       	ld	r26, Y
    3002:	b9 81       	ldd	r27, Y+1	; 0x01
    3004:	0d c0       	rjmp	.+26     	; 0x3020 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x9c>
    3006:	8c 81       	ldd	r24, Y+4	; 0x04
    3008:	9d 81       	ldd	r25, Y+5	; 0x05
    300a:	2e 81       	ldd	r18, Y+6	; 0x06
    300c:	3f 81       	ldd	r19, Y+7	; 0x07
    300e:	b1 10       	cpse	r11, r1
    3010:	0c c0       	rjmp	.+24     	; 0x302a <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    3012:	f9 01       	movw	r30, r18
    3014:	e0 0f       	add	r30, r16
    3016:	f1 1f       	adc	r31, r17
    3018:	01 90       	ld	r0, Z+
    301a:	f0 81       	ld	r31, Z
    301c:	e0 2d       	mov	r30, r0
    301e:	dc 01       	movw	r26, r24
    3020:	a0 0f       	add	r26, r16
    3022:	b1 1f       	adc	r27, r17
    3024:	8d 91       	ld	r24, X+
    3026:	9c 91       	ld	r25, X
    3028:	28 c0       	rjmp	.+80     	; 0x307a <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    302a:	fc 01       	movw	r30, r24
    302c:	e0 0f       	add	r30, r16
    302e:	f1 1f       	adc	r31, r17
    3030:	40 81       	ld	r20, Z
    3032:	51 81       	ldd	r21, Z+1	; 0x01
    3034:	e8 81       	ld	r30, Y
    3036:	f9 81       	ldd	r31, Y+1	; 0x01
    3038:	e0 0f       	add	r30, r16
    303a:	f1 1f       	adc	r31, r17
    303c:	80 81       	ld	r24, Z
    303e:	91 81       	ldd	r25, Z+1	; 0x01
    3040:	ee 85       	ldd	r30, Y+14	; 0x0e
    3042:	ff 85       	ldd	r31, Y+15	; 0x0f
    3044:	48 17       	cp	r20, r24
    3046:	59 07       	cpc	r21, r25
    3048:	10 f4       	brcc	.+4      	; 0x304e <_ZN16PololuQTRSensors14readCalibratedEPjh+0xca>
    304a:	cf 01       	movw	r24, r30
    304c:	04 c0       	rjmp	.+8      	; 0x3056 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd2>
    304e:	8e 0f       	add	r24, r30
    3050:	9f 1f       	adc	r25, r31
    3052:	84 1b       	sub	r24, r20
    3054:	95 0b       	sbc	r25, r21
    3056:	d9 01       	movw	r26, r18
    3058:	a0 0f       	add	r26, r16
    305a:	b1 1f       	adc	r27, r17
    305c:	2d 91       	ld	r18, X+
    305e:	3c 91       	ld	r19, X
    3060:	aa 81       	ldd	r26, Y+2	; 0x02
    3062:	bb 81       	ldd	r27, Y+3	; 0x03
    3064:	a0 0f       	add	r26, r16
    3066:	b1 1f       	adc	r27, r17
    3068:	4d 91       	ld	r20, X+
    306a:	5c 91       	ld	r21, X
    306c:	24 17       	cp	r18, r20
    306e:	35 07       	cpc	r19, r21
    3070:	20 f0       	brcs	.+8      	; 0x307a <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    3072:	e4 0f       	add	r30, r20
    3074:	f5 1f       	adc	r31, r21
    3076:	e2 1b       	sub	r30, r18
    3078:	f3 0b       	sbc	r31, r19
    307a:	e8 1b       	sub	r30, r24
    307c:	f9 0b       	sbc	r31, r25
    307e:	a9 f0       	breq	.+42     	; 0x30aa <_ZN16PololuQTRSensors14readCalibratedEPjh+0x126>
    3080:	d7 01       	movw	r26, r14
    3082:	2d 91       	ld	r18, X+
    3084:	3c 91       	ld	r19, X
    3086:	40 e0       	ldi	r20, 0x00	; 0
    3088:	50 e0       	ldi	r21, 0x00	; 0
    308a:	28 1b       	sub	r18, r24
    308c:	39 0b       	sbc	r19, r25
    308e:	41 09       	sbc	r20, r1
    3090:	51 09       	sbc	r21, r1
    3092:	a8 ee       	ldi	r26, 0xE8	; 232
    3094:	b3 e0       	ldi	r27, 0x03	; 3
    3096:	0e 94 72 19 	call	0x32e4	; 0x32e4 <__muluhisi3>
    309a:	9f 01       	movw	r18, r30
    309c:	40 e0       	ldi	r20, 0x00	; 0
    309e:	50 e0       	ldi	r21, 0x00	; 0
    30a0:	0e 94 44 19 	call	0x3288	; 0x3288 <__divmodsi4>
    30a4:	37 fd       	sbrc	r19, 7
    30a6:	0a c0       	rjmp	.+20     	; 0x30bc <_ZN16PololuQTRSensors14readCalibratedEPjh+0x138>
    30a8:	02 c0       	rjmp	.+4      	; 0x30ae <_ZN16PololuQTRSensors14readCalibratedEPjh+0x12a>
    30aa:	20 e0       	ldi	r18, 0x00	; 0
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	29 3e       	cpi	r18, 0xE9	; 233
    30b0:	b3 e0       	ldi	r27, 0x03	; 3
    30b2:	3b 07       	cpc	r19, r27
    30b4:	2c f0       	brlt	.+10     	; 0x30c0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    30b6:	28 ee       	ldi	r18, 0xE8	; 232
    30b8:	33 e0       	ldi	r19, 0x03	; 3
    30ba:	02 c0       	rjmp	.+4      	; 0x30c0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    30bc:	20 e0       	ldi	r18, 0x00	; 0
    30be:	30 e0       	ldi	r19, 0x00	; 0
    30c0:	f7 01       	movw	r30, r14
    30c2:	21 93       	st	Z+, r18
    30c4:	31 93       	st	Z+, r19
    30c6:	7f 01       	movw	r14, r30
    30c8:	ff ef       	ldi	r31, 0xFF	; 255
    30ca:	cf 1a       	sub	r12, r31
    30cc:	df 0a       	sbc	r13, r31
    30ce:	0e 5f       	subi	r16, 0xFE	; 254
    30d0:	1f 4f       	sbci	r17, 0xFF	; 255
    30d2:	86 cf       	rjmp	.-244    	; 0x2fe0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x5c>
    30d4:	cd b7       	in	r28, 0x3d	; 61
    30d6:	de b7       	in	r29, 0x3e	; 62
    30d8:	e9 e0       	ldi	r30, 0x09	; 9
    30da:	0c 94 aa 19 	jmp	0x3354	; 0x3354 <__epilogue_restores__+0x12>

000030de <_ZN16PololuQTRSensors8readLineEPjhh>:
    30de:	a0 e0       	ldi	r26, 0x00	; 0
    30e0:	b0 e0       	ldi	r27, 0x00	; 0
    30e2:	e5 e7       	ldi	r30, 0x75	; 117
    30e4:	f8 e1       	ldi	r31, 0x18	; 24
    30e6:	0c 94 85 19 	jmp	0x330a	; 0x330a <__prologue_saves__>
    30ea:	ec 01       	movw	r28, r24
    30ec:	8b 01       	movw	r16, r22
    30ee:	82 2e       	mov	r8, r18
    30f0:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <_ZN16PololuQTRSensors14readCalibratedEPjh>
    30f4:	28 84       	ldd	r2, Y+8	; 0x08
    30f6:	e8 01       	movw	r28, r16
    30f8:	41 2c       	mov	r4, r1
    30fa:	51 2c       	mov	r5, r1
    30fc:	32 01       	movw	r6, r4
    30fe:	00 e0       	ldi	r16, 0x00	; 0
    3100:	10 e0       	ldi	r17, 0x00	; 0
    3102:	c1 2c       	mov	r12, r1
    3104:	d1 2c       	mov	r13, r1
    3106:	76 01       	movw	r14, r12
    3108:	31 2c       	mov	r3, r1
    310a:	91 2c       	mov	r9, r1
    310c:	58 ee       	ldi	r21, 0xE8	; 232
    310e:	a5 2e       	mov	r10, r21
    3110:	53 e0       	ldi	r21, 0x03	; 3
    3112:	b5 2e       	mov	r11, r21
    3114:	92 14       	cp	r9, r2
    3116:	21 f1       	breq	.+72     	; 0x3160 <_ZN16PololuQTRSensors8readLineEPjhh+0x82>
    3118:	e9 91       	ld	r30, Y+
    311a:	f9 91       	ld	r31, Y+
    311c:	88 20       	and	r8, r8
    311e:	21 f0       	breq	.+8      	; 0x3128 <_ZN16PololuQTRSensors8readLineEPjhh+0x4a>
    3120:	c5 01       	movw	r24, r10
    3122:	8e 1b       	sub	r24, r30
    3124:	9f 0b       	sbc	r25, r31
    3126:	fc 01       	movw	r30, r24
    3128:	e9 3c       	cpi	r30, 0xC9	; 201
    312a:	f1 05       	cpc	r31, r1
    312c:	24 f4       	brge	.+8      	; 0x3136 <_ZN16PololuQTRSensors8readLineEPjhh+0x58>
    312e:	e3 33       	cpi	r30, 0x33	; 51
    3130:	f1 05       	cpc	r31, r1
    3132:	74 f0       	brlt	.+28     	; 0x3150 <_ZN16PololuQTRSensors8readLineEPjhh+0x72>
    3134:	02 c0       	rjmp	.+4      	; 0x313a <_ZN16PololuQTRSensors8readLineEPjhh+0x5c>
    3136:	33 24       	eor	r3, r3
    3138:	33 94       	inc	r3
    313a:	df 01       	movw	r26, r30
    313c:	a3 01       	movw	r20, r6
    313e:	92 01       	movw	r18, r4
    3140:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__mulshisi3>
    3144:	c6 0e       	add	r12, r22
    3146:	d7 1e       	adc	r13, r23
    3148:	e8 1e       	adc	r14, r24
    314a:	f9 1e       	adc	r15, r25
    314c:	0e 0f       	add	r16, r30
    314e:	1f 1f       	adc	r17, r31
    3150:	93 94       	inc	r9
    3152:	98 ee       	ldi	r25, 0xE8	; 232
    3154:	49 0e       	add	r4, r25
    3156:	93 e0       	ldi	r25, 0x03	; 3
    3158:	59 1e       	adc	r5, r25
    315a:	61 1c       	adc	r6, r1
    315c:	71 1c       	adc	r7, r1
    315e:	da cf       	rjmp	.-76     	; 0x3114 <_ZN16PololuQTRSensors8readLineEPjhh+0x36>
    3160:	31 10       	cpse	r3, r1
    3162:	1e c0       	rjmp	.+60     	; 0x31a0 <_ZN16PololuQTRSensors8readLineEPjhh+0xc2>
    3164:	49 2d       	mov	r20, r9
    3166:	50 e0       	ldi	r21, 0x00	; 0
    3168:	41 50       	subi	r20, 0x01	; 1
    316a:	51 09       	sbc	r21, r1
    316c:	24 ef       	ldi	r18, 0xF4	; 244
    316e:	31 e0       	ldi	r19, 0x01	; 1
    3170:	42 9f       	mul	r20, r18
    3172:	c0 01       	movw	r24, r0
    3174:	43 9f       	mul	r20, r19
    3176:	90 0d       	add	r25, r0
    3178:	52 9f       	mul	r21, r18
    317a:	90 0d       	add	r25, r0
    317c:	11 24       	eor	r1, r1
    317e:	20 91 f7 01 	lds	r18, 0x01F7	; 0x8001f7 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    3182:	30 91 f8 01 	lds	r19, 0x01F8	; 0x8001f8 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    3186:	28 17       	cp	r18, r24
    3188:	39 07       	cpc	r19, r25
    318a:	b4 f0       	brlt	.+44     	; 0x31b8 <_ZN16PololuQTRSensors8readLineEPjhh+0xda>
    318c:	88 ee       	ldi	r24, 0xE8	; 232
    318e:	93 e0       	ldi	r25, 0x03	; 3
    3190:	48 9f       	mul	r20, r24
    3192:	90 01       	movw	r18, r0
    3194:	49 9f       	mul	r20, r25
    3196:	30 0d       	add	r19, r0
    3198:	58 9f       	mul	r21, r24
    319a:	30 0d       	add	r19, r0
    319c:	11 24       	eor	r1, r1
    319e:	0e c0       	rjmp	.+28     	; 0x31bc <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    31a0:	98 01       	movw	r18, r16
    31a2:	40 e0       	ldi	r20, 0x00	; 0
    31a4:	50 e0       	ldi	r21, 0x00	; 0
    31a6:	c7 01       	movw	r24, r14
    31a8:	b6 01       	movw	r22, r12
    31aa:	0e 94 22 19 	call	0x3244	; 0x3244 <__udivmodsi4>
    31ae:	30 93 f8 01 	sts	0x01F8, r19	; 0x8001f8 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    31b2:	20 93 f7 01 	sts	0x01F7, r18	; 0x8001f7 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    31b6:	02 c0       	rjmp	.+4      	; 0x31bc <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    31b8:	20 e0       	ldi	r18, 0x00	; 0
    31ba:	30 e0       	ldi	r19, 0x00	; 0
    31bc:	c9 01       	movw	r24, r18
    31be:	cd b7       	in	r28, 0x3d	; 61
    31c0:	de b7       	in	r29, 0x3e	; 62
    31c2:	e2 e1       	ldi	r30, 0x12	; 18
    31c4:	0c 94 a1 19 	jmp	0x3342	; 0x3342 <__epilogue_restores__>

000031c8 <_ZN16PololuQTRSensorsD1Ev>:
    31c8:	cf 93       	push	r28
    31ca:	df 93       	push	r29
    31cc:	ec 01       	movw	r28, r24
    31ce:	8a 81       	ldd	r24, Y+2	; 0x02
    31d0:	9b 81       	ldd	r25, Y+3	; 0x03
    31d2:	00 97       	sbiw	r24, 0x00	; 0
    31d4:	11 f0       	breq	.+4      	; 0x31da <_ZN16PololuQTRSensorsD1Ev+0x12>
    31d6:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <free>
    31da:	8e 81       	ldd	r24, Y+6	; 0x06
    31dc:	9f 81       	ldd	r25, Y+7	; 0x07
    31de:	00 97       	sbiw	r24, 0x00	; 0
    31e0:	11 f0       	breq	.+4      	; 0x31e6 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    31e2:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <free>
    31e6:	88 81       	ld	r24, Y
    31e8:	99 81       	ldd	r25, Y+1	; 0x01
    31ea:	00 97       	sbiw	r24, 0x00	; 0
    31ec:	11 f0       	breq	.+4      	; 0x31f2 <_ZN16PololuQTRSensorsD1Ev+0x2a>
    31ee:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <free>
    31f2:	8c 81       	ldd	r24, Y+4	; 0x04
    31f4:	9d 81       	ldd	r25, Y+5	; 0x05
    31f6:	00 97       	sbiw	r24, 0x00	; 0
    31f8:	11 f0       	breq	.+4      	; 0x31fe <_ZN16PololuQTRSensorsD1Ev+0x36>
    31fa:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <free>
    31fe:	df 91       	pop	r29
    3200:	cf 91       	pop	r28
    3202:	08 95       	ret

00003204 <__udivmodqi4>:
    3204:	99 1b       	sub	r25, r25
    3206:	79 e0       	ldi	r23, 0x09	; 9
    3208:	04 c0       	rjmp	.+8      	; 0x3212 <__udivmodqi4_ep>

0000320a <__udivmodqi4_loop>:
    320a:	99 1f       	adc	r25, r25
    320c:	96 17       	cp	r25, r22
    320e:	08 f0       	brcs	.+2      	; 0x3212 <__udivmodqi4_ep>
    3210:	96 1b       	sub	r25, r22

00003212 <__udivmodqi4_ep>:
    3212:	88 1f       	adc	r24, r24
    3214:	7a 95       	dec	r23
    3216:	c9 f7       	brne	.-14     	; 0x320a <__udivmodqi4_loop>
    3218:	80 95       	com	r24
    321a:	08 95       	ret

0000321c <__udivmodhi4>:
    321c:	aa 1b       	sub	r26, r26
    321e:	bb 1b       	sub	r27, r27
    3220:	51 e1       	ldi	r21, 0x11	; 17
    3222:	07 c0       	rjmp	.+14     	; 0x3232 <__udivmodhi4_ep>

00003224 <__udivmodhi4_loop>:
    3224:	aa 1f       	adc	r26, r26
    3226:	bb 1f       	adc	r27, r27
    3228:	a6 17       	cp	r26, r22
    322a:	b7 07       	cpc	r27, r23
    322c:	10 f0       	brcs	.+4      	; 0x3232 <__udivmodhi4_ep>
    322e:	a6 1b       	sub	r26, r22
    3230:	b7 0b       	sbc	r27, r23

00003232 <__udivmodhi4_ep>:
    3232:	88 1f       	adc	r24, r24
    3234:	99 1f       	adc	r25, r25
    3236:	5a 95       	dec	r21
    3238:	a9 f7       	brne	.-22     	; 0x3224 <__udivmodhi4_loop>
    323a:	80 95       	com	r24
    323c:	90 95       	com	r25
    323e:	bc 01       	movw	r22, r24
    3240:	cd 01       	movw	r24, r26
    3242:	08 95       	ret

00003244 <__udivmodsi4>:
    3244:	a1 e2       	ldi	r26, 0x21	; 33
    3246:	1a 2e       	mov	r1, r26
    3248:	aa 1b       	sub	r26, r26
    324a:	bb 1b       	sub	r27, r27
    324c:	fd 01       	movw	r30, r26
    324e:	0d c0       	rjmp	.+26     	; 0x326a <__udivmodsi4_ep>

00003250 <__udivmodsi4_loop>:
    3250:	aa 1f       	adc	r26, r26
    3252:	bb 1f       	adc	r27, r27
    3254:	ee 1f       	adc	r30, r30
    3256:	ff 1f       	adc	r31, r31
    3258:	a2 17       	cp	r26, r18
    325a:	b3 07       	cpc	r27, r19
    325c:	e4 07       	cpc	r30, r20
    325e:	f5 07       	cpc	r31, r21
    3260:	20 f0       	brcs	.+8      	; 0x326a <__udivmodsi4_ep>
    3262:	a2 1b       	sub	r26, r18
    3264:	b3 0b       	sbc	r27, r19
    3266:	e4 0b       	sbc	r30, r20
    3268:	f5 0b       	sbc	r31, r21

0000326a <__udivmodsi4_ep>:
    326a:	66 1f       	adc	r22, r22
    326c:	77 1f       	adc	r23, r23
    326e:	88 1f       	adc	r24, r24
    3270:	99 1f       	adc	r25, r25
    3272:	1a 94       	dec	r1
    3274:	69 f7       	brne	.-38     	; 0x3250 <__udivmodsi4_loop>
    3276:	60 95       	com	r22
    3278:	70 95       	com	r23
    327a:	80 95       	com	r24
    327c:	90 95       	com	r25
    327e:	9b 01       	movw	r18, r22
    3280:	ac 01       	movw	r20, r24
    3282:	bd 01       	movw	r22, r26
    3284:	cf 01       	movw	r24, r30
    3286:	08 95       	ret

00003288 <__divmodsi4>:
    3288:	05 2e       	mov	r0, r21
    328a:	97 fb       	bst	r25, 7
    328c:	1e f4       	brtc	.+6      	; 0x3294 <__divmodsi4+0xc>
    328e:	00 94       	com	r0
    3290:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__negsi2>
    3294:	57 fd       	sbrc	r21, 7
    3296:	07 d0       	rcall	.+14     	; 0x32a6 <__divmodsi4_neg2>
    3298:	0e 94 22 19 	call	0x3244	; 0x3244 <__udivmodsi4>
    329c:	07 fc       	sbrc	r0, 7
    329e:	03 d0       	rcall	.+6      	; 0x32a6 <__divmodsi4_neg2>
    32a0:	4e f4       	brtc	.+18     	; 0x32b4 <__divmodsi4_exit>
    32a2:	0c 94 5b 19 	jmp	0x32b6	; 0x32b6 <__negsi2>

000032a6 <__divmodsi4_neg2>:
    32a6:	50 95       	com	r21
    32a8:	40 95       	com	r20
    32aa:	30 95       	com	r19
    32ac:	21 95       	neg	r18
    32ae:	3f 4f       	sbci	r19, 0xFF	; 255
    32b0:	4f 4f       	sbci	r20, 0xFF	; 255
    32b2:	5f 4f       	sbci	r21, 0xFF	; 255

000032b4 <__divmodsi4_exit>:
    32b4:	08 95       	ret

000032b6 <__negsi2>:
    32b6:	90 95       	com	r25
    32b8:	80 95       	com	r24
    32ba:	70 95       	com	r23
    32bc:	61 95       	neg	r22
    32be:	7f 4f       	sbci	r23, 0xFF	; 255
    32c0:	8f 4f       	sbci	r24, 0xFF	; 255
    32c2:	9f 4f       	sbci	r25, 0xFF	; 255
    32c4:	08 95       	ret

000032c6 <__umulhisi3>:
    32c6:	a2 9f       	mul	r26, r18
    32c8:	b0 01       	movw	r22, r0
    32ca:	b3 9f       	mul	r27, r19
    32cc:	c0 01       	movw	r24, r0
    32ce:	a3 9f       	mul	r26, r19
    32d0:	70 0d       	add	r23, r0
    32d2:	81 1d       	adc	r24, r1
    32d4:	11 24       	eor	r1, r1
    32d6:	91 1d       	adc	r25, r1
    32d8:	b2 9f       	mul	r27, r18
    32da:	70 0d       	add	r23, r0
    32dc:	81 1d       	adc	r24, r1
    32de:	11 24       	eor	r1, r1
    32e0:	91 1d       	adc	r25, r1
    32e2:	08 95       	ret

000032e4 <__muluhisi3>:
    32e4:	0e 94 63 19 	call	0x32c6	; 0x32c6 <__umulhisi3>
    32e8:	a5 9f       	mul	r26, r21
    32ea:	90 0d       	add	r25, r0
    32ec:	b4 9f       	mul	r27, r20
    32ee:	90 0d       	add	r25, r0
    32f0:	a4 9f       	mul	r26, r20
    32f2:	80 0d       	add	r24, r0
    32f4:	91 1d       	adc	r25, r1
    32f6:	11 24       	eor	r1, r1
    32f8:	08 95       	ret

000032fa <__mulshisi3>:
    32fa:	b7 ff       	sbrs	r27, 7
    32fc:	0c 94 72 19 	jmp	0x32e4	; 0x32e4 <__muluhisi3>

00003300 <__mulohisi3>:
    3300:	0e 94 72 19 	call	0x32e4	; 0x32e4 <__muluhisi3>
    3304:	82 1b       	sub	r24, r18
    3306:	93 0b       	sbc	r25, r19
    3308:	08 95       	ret

0000330a <__prologue_saves__>:
    330a:	2f 92       	push	r2
    330c:	3f 92       	push	r3
    330e:	4f 92       	push	r4
    3310:	5f 92       	push	r5
    3312:	6f 92       	push	r6
    3314:	7f 92       	push	r7
    3316:	8f 92       	push	r8
    3318:	9f 92       	push	r9
    331a:	af 92       	push	r10
    331c:	bf 92       	push	r11
    331e:	cf 92       	push	r12
    3320:	df 92       	push	r13
    3322:	ef 92       	push	r14
    3324:	ff 92       	push	r15
    3326:	0f 93       	push	r16
    3328:	1f 93       	push	r17
    332a:	cf 93       	push	r28
    332c:	df 93       	push	r29
    332e:	cd b7       	in	r28, 0x3d	; 61
    3330:	de b7       	in	r29, 0x3e	; 62
    3332:	ca 1b       	sub	r28, r26
    3334:	db 0b       	sbc	r29, r27
    3336:	0f b6       	in	r0, 0x3f	; 63
    3338:	f8 94       	cli
    333a:	de bf       	out	0x3e, r29	; 62
    333c:	0f be       	out	0x3f, r0	; 63
    333e:	cd bf       	out	0x3d, r28	; 61
    3340:	09 94       	ijmp

00003342 <__epilogue_restores__>:
    3342:	2a 88       	ldd	r2, Y+18	; 0x12
    3344:	39 88       	ldd	r3, Y+17	; 0x11
    3346:	48 88       	ldd	r4, Y+16	; 0x10
    3348:	5f 84       	ldd	r5, Y+15	; 0x0f
    334a:	6e 84       	ldd	r6, Y+14	; 0x0e
    334c:	7d 84       	ldd	r7, Y+13	; 0x0d
    334e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3350:	9b 84       	ldd	r9, Y+11	; 0x0b
    3352:	aa 84       	ldd	r10, Y+10	; 0x0a
    3354:	b9 84       	ldd	r11, Y+9	; 0x09
    3356:	c8 84       	ldd	r12, Y+8	; 0x08
    3358:	df 80       	ldd	r13, Y+7	; 0x07
    335a:	ee 80       	ldd	r14, Y+6	; 0x06
    335c:	fd 80       	ldd	r15, Y+5	; 0x05
    335e:	0c 81       	ldd	r16, Y+4	; 0x04
    3360:	1b 81       	ldd	r17, Y+3	; 0x03
    3362:	aa 81       	ldd	r26, Y+2	; 0x02
    3364:	b9 81       	ldd	r27, Y+1	; 0x01
    3366:	ce 0f       	add	r28, r30
    3368:	d1 1d       	adc	r29, r1
    336a:	0f b6       	in	r0, 0x3f	; 63
    336c:	f8 94       	cli
    336e:	de bf       	out	0x3e, r29	; 62
    3370:	0f be       	out	0x3f, r0	; 63
    3372:	cd bf       	out	0x3d, r28	; 61
    3374:	ed 01       	movw	r28, r26
    3376:	08 95       	ret

00003378 <__tablejump2__>:
    3378:	ee 0f       	add	r30, r30
    337a:	ff 1f       	adc	r31, r31
    337c:	05 90       	lpm	r0, Z+
    337e:	f4 91       	lpm	r31, Z
    3380:	e0 2d       	mov	r30, r0
    3382:	09 94       	ijmp

00003384 <malloc>:
    3384:	0f 93       	push	r16
    3386:	1f 93       	push	r17
    3388:	cf 93       	push	r28
    338a:	df 93       	push	r29
    338c:	82 30       	cpi	r24, 0x02	; 2
    338e:	91 05       	cpc	r25, r1
    3390:	10 f4       	brcc	.+4      	; 0x3396 <malloc+0x12>
    3392:	82 e0       	ldi	r24, 0x02	; 2
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <__flp>
    339a:	f0 91 75 02 	lds	r31, 0x0275	; 0x800275 <__flp+0x1>
    339e:	20 e0       	ldi	r18, 0x00	; 0
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	a0 e0       	ldi	r26, 0x00	; 0
    33a4:	b0 e0       	ldi	r27, 0x00	; 0
    33a6:	30 97       	sbiw	r30, 0x00	; 0
    33a8:	19 f1       	breq	.+70     	; 0x33f0 <malloc+0x6c>
    33aa:	40 81       	ld	r20, Z
    33ac:	51 81       	ldd	r21, Z+1	; 0x01
    33ae:	02 81       	ldd	r16, Z+2	; 0x02
    33b0:	13 81       	ldd	r17, Z+3	; 0x03
    33b2:	48 17       	cp	r20, r24
    33b4:	59 07       	cpc	r21, r25
    33b6:	c8 f0       	brcs	.+50     	; 0x33ea <malloc+0x66>
    33b8:	84 17       	cp	r24, r20
    33ba:	95 07       	cpc	r25, r21
    33bc:	69 f4       	brne	.+26     	; 0x33d8 <malloc+0x54>
    33be:	10 97       	sbiw	r26, 0x00	; 0
    33c0:	31 f0       	breq	.+12     	; 0x33ce <malloc+0x4a>
    33c2:	12 96       	adiw	r26, 0x02	; 2
    33c4:	0c 93       	st	X, r16
    33c6:	12 97       	sbiw	r26, 0x02	; 2
    33c8:	13 96       	adiw	r26, 0x03	; 3
    33ca:	1c 93       	st	X, r17
    33cc:	27 c0       	rjmp	.+78     	; 0x341c <malloc+0x98>
    33ce:	00 93 74 02 	sts	0x0274, r16	; 0x800274 <__flp>
    33d2:	10 93 75 02 	sts	0x0275, r17	; 0x800275 <__flp+0x1>
    33d6:	22 c0       	rjmp	.+68     	; 0x341c <malloc+0x98>
    33d8:	21 15       	cp	r18, r1
    33da:	31 05       	cpc	r19, r1
    33dc:	19 f0       	breq	.+6      	; 0x33e4 <malloc+0x60>
    33de:	42 17       	cp	r20, r18
    33e0:	53 07       	cpc	r21, r19
    33e2:	18 f4       	brcc	.+6      	; 0x33ea <malloc+0x66>
    33e4:	9a 01       	movw	r18, r20
    33e6:	bd 01       	movw	r22, r26
    33e8:	ef 01       	movw	r28, r30
    33ea:	df 01       	movw	r26, r30
    33ec:	f8 01       	movw	r30, r16
    33ee:	db cf       	rjmp	.-74     	; 0x33a6 <malloc+0x22>
    33f0:	21 15       	cp	r18, r1
    33f2:	31 05       	cpc	r19, r1
    33f4:	f9 f0       	breq	.+62     	; 0x3434 <malloc+0xb0>
    33f6:	28 1b       	sub	r18, r24
    33f8:	39 0b       	sbc	r19, r25
    33fa:	24 30       	cpi	r18, 0x04	; 4
    33fc:	31 05       	cpc	r19, r1
    33fe:	80 f4       	brcc	.+32     	; 0x3420 <malloc+0x9c>
    3400:	8a 81       	ldd	r24, Y+2	; 0x02
    3402:	9b 81       	ldd	r25, Y+3	; 0x03
    3404:	61 15       	cp	r22, r1
    3406:	71 05       	cpc	r23, r1
    3408:	21 f0       	breq	.+8      	; 0x3412 <malloc+0x8e>
    340a:	fb 01       	movw	r30, r22
    340c:	93 83       	std	Z+3, r25	; 0x03
    340e:	82 83       	std	Z+2, r24	; 0x02
    3410:	04 c0       	rjmp	.+8      	; 0x341a <malloc+0x96>
    3412:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <__flp+0x1>
    3416:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <__flp>
    341a:	fe 01       	movw	r30, r28
    341c:	32 96       	adiw	r30, 0x02	; 2
    341e:	44 c0       	rjmp	.+136    	; 0x34a8 <malloc+0x124>
    3420:	fe 01       	movw	r30, r28
    3422:	e2 0f       	add	r30, r18
    3424:	f3 1f       	adc	r31, r19
    3426:	81 93       	st	Z+, r24
    3428:	91 93       	st	Z+, r25
    342a:	22 50       	subi	r18, 0x02	; 2
    342c:	31 09       	sbc	r19, r1
    342e:	39 83       	std	Y+1, r19	; 0x01
    3430:	28 83       	st	Y, r18
    3432:	3a c0       	rjmp	.+116    	; 0x34a8 <malloc+0x124>
    3434:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <__brkval>
    3438:	30 91 73 02 	lds	r19, 0x0273	; 0x800273 <__brkval+0x1>
    343c:	23 2b       	or	r18, r19
    343e:	41 f4       	brne	.+16     	; 0x3450 <malloc+0xcc>
    3440:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__malloc_heap_start>
    3444:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__malloc_heap_start+0x1>
    3448:	30 93 73 02 	sts	0x0273, r19	; 0x800273 <__brkval+0x1>
    344c:	20 93 72 02 	sts	0x0272, r18	; 0x800272 <__brkval>
    3450:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__malloc_heap_end>
    3454:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__malloc_heap_end+0x1>
    3458:	21 15       	cp	r18, r1
    345a:	31 05       	cpc	r19, r1
    345c:	41 f4       	brne	.+16     	; 0x346e <malloc+0xea>
    345e:	2d b7       	in	r18, 0x3d	; 61
    3460:	3e b7       	in	r19, 0x3e	; 62
    3462:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__malloc_margin>
    3466:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__malloc_margin+0x1>
    346a:	24 1b       	sub	r18, r20
    346c:	35 0b       	sbc	r19, r21
    346e:	e0 91 72 02 	lds	r30, 0x0272	; 0x800272 <__brkval>
    3472:	f0 91 73 02 	lds	r31, 0x0273	; 0x800273 <__brkval+0x1>
    3476:	e2 17       	cp	r30, r18
    3478:	f3 07       	cpc	r31, r19
    347a:	a0 f4       	brcc	.+40     	; 0x34a4 <malloc+0x120>
    347c:	2e 1b       	sub	r18, r30
    347e:	3f 0b       	sbc	r19, r31
    3480:	28 17       	cp	r18, r24
    3482:	39 07       	cpc	r19, r25
    3484:	78 f0       	brcs	.+30     	; 0x34a4 <malloc+0x120>
    3486:	ac 01       	movw	r20, r24
    3488:	4e 5f       	subi	r20, 0xFE	; 254
    348a:	5f 4f       	sbci	r21, 0xFF	; 255
    348c:	24 17       	cp	r18, r20
    348e:	35 07       	cpc	r19, r21
    3490:	48 f0       	brcs	.+18     	; 0x34a4 <malloc+0x120>
    3492:	4e 0f       	add	r20, r30
    3494:	5f 1f       	adc	r21, r31
    3496:	50 93 73 02 	sts	0x0273, r21	; 0x800273 <__brkval+0x1>
    349a:	40 93 72 02 	sts	0x0272, r20	; 0x800272 <__brkval>
    349e:	81 93       	st	Z+, r24
    34a0:	91 93       	st	Z+, r25
    34a2:	02 c0       	rjmp	.+4      	; 0x34a8 <malloc+0x124>
    34a4:	e0 e0       	ldi	r30, 0x00	; 0
    34a6:	f0 e0       	ldi	r31, 0x00	; 0
    34a8:	cf 01       	movw	r24, r30
    34aa:	df 91       	pop	r29
    34ac:	cf 91       	pop	r28
    34ae:	1f 91       	pop	r17
    34b0:	0f 91       	pop	r16
    34b2:	08 95       	ret

000034b4 <free>:
    34b4:	cf 93       	push	r28
    34b6:	df 93       	push	r29
    34b8:	00 97       	sbiw	r24, 0x00	; 0
    34ba:	09 f4       	brne	.+2      	; 0x34be <free+0xa>
    34bc:	81 c0       	rjmp	.+258    	; 0x35c0 <free+0x10c>
    34be:	fc 01       	movw	r30, r24
    34c0:	32 97       	sbiw	r30, 0x02	; 2
    34c2:	13 82       	std	Z+3, r1	; 0x03
    34c4:	12 82       	std	Z+2, r1	; 0x02
    34c6:	a0 91 74 02 	lds	r26, 0x0274	; 0x800274 <__flp>
    34ca:	b0 91 75 02 	lds	r27, 0x0275	; 0x800275 <__flp+0x1>
    34ce:	10 97       	sbiw	r26, 0x00	; 0
    34d0:	81 f4       	brne	.+32     	; 0x34f2 <free+0x3e>
    34d2:	20 81       	ld	r18, Z
    34d4:	31 81       	ldd	r19, Z+1	; 0x01
    34d6:	82 0f       	add	r24, r18
    34d8:	93 1f       	adc	r25, r19
    34da:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <__brkval>
    34de:	30 91 73 02 	lds	r19, 0x0273	; 0x800273 <__brkval+0x1>
    34e2:	28 17       	cp	r18, r24
    34e4:	39 07       	cpc	r19, r25
    34e6:	51 f5       	brne	.+84     	; 0x353c <free+0x88>
    34e8:	f0 93 73 02 	sts	0x0273, r31	; 0x800273 <__brkval+0x1>
    34ec:	e0 93 72 02 	sts	0x0272, r30	; 0x800272 <__brkval>
    34f0:	67 c0       	rjmp	.+206    	; 0x35c0 <free+0x10c>
    34f2:	ed 01       	movw	r28, r26
    34f4:	20 e0       	ldi	r18, 0x00	; 0
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	ce 17       	cp	r28, r30
    34fa:	df 07       	cpc	r29, r31
    34fc:	40 f4       	brcc	.+16     	; 0x350e <free+0x5a>
    34fe:	4a 81       	ldd	r20, Y+2	; 0x02
    3500:	5b 81       	ldd	r21, Y+3	; 0x03
    3502:	9e 01       	movw	r18, r28
    3504:	41 15       	cp	r20, r1
    3506:	51 05       	cpc	r21, r1
    3508:	f1 f0       	breq	.+60     	; 0x3546 <free+0x92>
    350a:	ea 01       	movw	r28, r20
    350c:	f5 cf       	rjmp	.-22     	; 0x34f8 <free+0x44>
    350e:	d3 83       	std	Z+3, r29	; 0x03
    3510:	c2 83       	std	Z+2, r28	; 0x02
    3512:	40 81       	ld	r20, Z
    3514:	51 81       	ldd	r21, Z+1	; 0x01
    3516:	84 0f       	add	r24, r20
    3518:	95 1f       	adc	r25, r21
    351a:	c8 17       	cp	r28, r24
    351c:	d9 07       	cpc	r29, r25
    351e:	59 f4       	brne	.+22     	; 0x3536 <free+0x82>
    3520:	88 81       	ld	r24, Y
    3522:	99 81       	ldd	r25, Y+1	; 0x01
    3524:	84 0f       	add	r24, r20
    3526:	95 1f       	adc	r25, r21
    3528:	02 96       	adiw	r24, 0x02	; 2
    352a:	91 83       	std	Z+1, r25	; 0x01
    352c:	80 83       	st	Z, r24
    352e:	8a 81       	ldd	r24, Y+2	; 0x02
    3530:	9b 81       	ldd	r25, Y+3	; 0x03
    3532:	93 83       	std	Z+3, r25	; 0x03
    3534:	82 83       	std	Z+2, r24	; 0x02
    3536:	21 15       	cp	r18, r1
    3538:	31 05       	cpc	r19, r1
    353a:	29 f4       	brne	.+10     	; 0x3546 <free+0x92>
    353c:	f0 93 75 02 	sts	0x0275, r31	; 0x800275 <__flp+0x1>
    3540:	e0 93 74 02 	sts	0x0274, r30	; 0x800274 <__flp>
    3544:	3d c0       	rjmp	.+122    	; 0x35c0 <free+0x10c>
    3546:	e9 01       	movw	r28, r18
    3548:	fb 83       	std	Y+3, r31	; 0x03
    354a:	ea 83       	std	Y+2, r30	; 0x02
    354c:	49 91       	ld	r20, Y+
    354e:	59 91       	ld	r21, Y+
    3550:	c4 0f       	add	r28, r20
    3552:	d5 1f       	adc	r29, r21
    3554:	ec 17       	cp	r30, r28
    3556:	fd 07       	cpc	r31, r29
    3558:	61 f4       	brne	.+24     	; 0x3572 <free+0xbe>
    355a:	80 81       	ld	r24, Z
    355c:	91 81       	ldd	r25, Z+1	; 0x01
    355e:	84 0f       	add	r24, r20
    3560:	95 1f       	adc	r25, r21
    3562:	02 96       	adiw	r24, 0x02	; 2
    3564:	e9 01       	movw	r28, r18
    3566:	99 83       	std	Y+1, r25	; 0x01
    3568:	88 83       	st	Y, r24
    356a:	82 81       	ldd	r24, Z+2	; 0x02
    356c:	93 81       	ldd	r25, Z+3	; 0x03
    356e:	9b 83       	std	Y+3, r25	; 0x03
    3570:	8a 83       	std	Y+2, r24	; 0x02
    3572:	e0 e0       	ldi	r30, 0x00	; 0
    3574:	f0 e0       	ldi	r31, 0x00	; 0
    3576:	12 96       	adiw	r26, 0x02	; 2
    3578:	8d 91       	ld	r24, X+
    357a:	9c 91       	ld	r25, X
    357c:	13 97       	sbiw	r26, 0x03	; 3
    357e:	00 97       	sbiw	r24, 0x00	; 0
    3580:	19 f0       	breq	.+6      	; 0x3588 <free+0xd4>
    3582:	fd 01       	movw	r30, r26
    3584:	dc 01       	movw	r26, r24
    3586:	f7 cf       	rjmp	.-18     	; 0x3576 <free+0xc2>
    3588:	8d 91       	ld	r24, X+
    358a:	9c 91       	ld	r25, X
    358c:	11 97       	sbiw	r26, 0x01	; 1
    358e:	9d 01       	movw	r18, r26
    3590:	2e 5f       	subi	r18, 0xFE	; 254
    3592:	3f 4f       	sbci	r19, 0xFF	; 255
    3594:	82 0f       	add	r24, r18
    3596:	93 1f       	adc	r25, r19
    3598:	20 91 72 02 	lds	r18, 0x0272	; 0x800272 <__brkval>
    359c:	30 91 73 02 	lds	r19, 0x0273	; 0x800273 <__brkval+0x1>
    35a0:	28 17       	cp	r18, r24
    35a2:	39 07       	cpc	r19, r25
    35a4:	69 f4       	brne	.+26     	; 0x35c0 <free+0x10c>
    35a6:	30 97       	sbiw	r30, 0x00	; 0
    35a8:	29 f4       	brne	.+10     	; 0x35b4 <free+0x100>
    35aa:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <__flp+0x1>
    35ae:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <__flp>
    35b2:	02 c0       	rjmp	.+4      	; 0x35b8 <free+0x104>
    35b4:	13 82       	std	Z+3, r1	; 0x03
    35b6:	12 82       	std	Z+2, r1	; 0x02
    35b8:	b0 93 73 02 	sts	0x0273, r27	; 0x800273 <__brkval+0x1>
    35bc:	a0 93 72 02 	sts	0x0272, r26	; 0x800272 <__brkval>
    35c0:	df 91       	pop	r29
    35c2:	cf 91       	pop	r28
    35c4:	08 95       	ret

000035c6 <__do_global_dtors>:
    35c6:	10 e0       	ldi	r17, 0x00	; 0
    35c8:	c8 e4       	ldi	r28, 0x48	; 72
    35ca:	d0 e0       	ldi	r29, 0x00	; 0
    35cc:	04 c0       	rjmp	.+8      	; 0x35d6 <__do_global_dtors+0x10>
    35ce:	fe 01       	movw	r30, r28
    35d0:	0e 94 bc 19 	call	0x3378	; 0x3378 <__tablejump2__>
    35d4:	21 96       	adiw	r28, 0x01	; 1
    35d6:	c9 34       	cpi	r28, 0x49	; 73
    35d8:	d1 07       	cpc	r29, r17
    35da:	c9 f7       	brne	.-14     	; 0x35ce <__do_global_dtors+0x8>
    35dc:	f8 94       	cli

000035de <__stop_program>:
    35de:	ff cf       	rjmp	.-2      	; 0x35de <__stop_program>
