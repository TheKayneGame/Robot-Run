
RobotRunGrid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000086  00800100  00003782  00003816  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003782  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e8  00800186  00800186  0000389c  2**0
                  ALLOC
  3 .stab         0000759c  00000000  00000000  0000389c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000a086  00000000  00000000  0000ae38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  00014ebe  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00014f00  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000110  00000000  00000000  00014f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000026bc  00000000  00000000  00015050  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000d20  00000000  00000000  0001770c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000189d  00000000  00000000  0001842c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000003b8  00000000  00000000  00019ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000008e3  00000000  00000000  0001a084  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000017fc  00000000  00000000  0001a967  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000f0  00000000  00000000  0001c163  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__dtors_end>
       4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
       8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
       c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      10:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      14:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      18:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      1c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      20:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      24:	0c 94 d2 13 	jmp	0x27a4	; 0x27a4 <__vector_9>
      28:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      2c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      30:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      34:	0c 94 34 10 	jmp	0x2068	; 0x2068 <__vector_13>
      38:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      3c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      40:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      44:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      48:	0c 94 4a 13 	jmp	0x2694	; 0x2694 <__vector_18>
      4c:	0c 94 ad 13 	jmp	0x275a	; 0x275a <__vector_19>
      50:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      54:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      58:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      5c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      60:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      64:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      68:	05 a8       	ldd	r0, Z+53	; 0x35
      6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
      6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <__stack+0xd3>
      6e:	4e b9       	out	0x0e, r20	; 14
      70:	38 36       	cpi	r19, 0x68	; 104
      72:	a9 02       	muls	r26, r25
      74:	0c 50       	subi	r16, 0x0C	; 12
      76:	b9 91       	ld	r27, Y+
      78:	86 88       	ldd	r8, Z+22	; 0x16
      7a:	08 3c       	cpi	r16, 0xC8	; 200
      7c:	a6 aa       	std	Z+54, r10	; 0x36
      7e:	aa 2a       	or	r10, r26
      80:	be 00       	.word	0x00be	; ????
      82:	00 00       	nop
      84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__trampolines_end>:
      86:	3e 67       	ori	r19, 0x7E	; 126
      88:	33 32       	cpi	r19, 0x23	; 35
      8a:	3e 3e       	cpi	r19, 0xEE	; 238
      8c:	63 33       	cpi	r22, 0x33	; 51
      8e:	32 00       	.word	0x0032	; ????

00000090 <__c.2360>:
      90:	3e 66 33 32 3e 3e 61 33 32 00                       >f32>>a32.

0000009a <__c.2403>:
      9a:	3e 66 33 32 3e 3e 61 33 32 00                       >f32>>a32.

000000a4 <__c.2401>:
      a4:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

000000ae <__c.2395>:
      ae:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

000000b8 <__ctors_end>:
      b8:	b3 14       	cp	r11, r3

000000ba <__dtors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d8 e0       	ldi	r29, 0x08	; 8
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
      c6:	11 e0       	ldi	r17, 0x01	; 1
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	e2 e8       	ldi	r30, 0x82	; 130
      ce:	f7 e3       	ldi	r31, 0x37	; 55
      d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
      d2:	05 90       	lpm	r0, Z+
      d4:	0d 92       	st	X+, r0
      d6:	a6 38       	cpi	r26, 0x86	; 134
      d8:	b1 07       	cpc	r27, r17
      da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
      dc:	22 e0       	ldi	r18, 0x02	; 2
      de:	a6 e8       	ldi	r26, 0x86	; 134
      e0:	b1 e0       	ldi	r27, 0x01	; 1
      e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
      e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
      e6:	ae 36       	cpi	r26, 0x6E	; 110
      e8:	b2 07       	cpc	r27, r18
      ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>
      ec:	0e 94 b1 03 	call	0x762	; 0x762 <main>
      f0:	0c 94 b4 1b 	jmp	0x3768	; 0x3768 <__do_global_dtors>

000000f4 <__bad_interrupt>:
      f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f8 <swapOne>:
	temp = *secondYValue;                                                                               //Swap Y-Coordinates
	*secondYValue = *firstYValue;
	*firstYValue = temp;
}

void swapOne(float *firstValue, float *secondValue) {                                                  //Swap function for the distance array
      f8:	cf 92       	push	r12
      fa:	df 92       	push	r13
      fc:	ef 92       	push	r14
      fe:	ff 92       	push	r15
     100:	0f 93       	push	r16
     102:	1f 93       	push	r17
	float temp;

	temp = *secondValue;
     104:	fb 01       	movw	r30, r22
     106:	00 81       	ld	r16, Z
     108:	11 81       	ldd	r17, Z+1	; 0x01
     10a:	22 81       	ldd	r18, Z+2	; 0x02
     10c:	33 81       	ldd	r19, Z+3	; 0x03
	*secondValue = *firstValue;
     10e:	fc 01       	movw	r30, r24
     110:	c0 80       	ld	r12, Z
     112:	d1 80       	ldd	r13, Z+1	; 0x01
     114:	e2 80       	ldd	r14, Z+2	; 0x02
     116:	f3 80       	ldd	r15, Z+3	; 0x03
     118:	fb 01       	movw	r30, r22
     11a:	c0 82       	st	Z, r12
     11c:	d1 82       	std	Z+1, r13	; 0x01
     11e:	e2 82       	std	Z+2, r14	; 0x02
     120:	f3 82       	std	Z+3, r15	; 0x03
	*firstValue = temp;
     122:	fc 01       	movw	r30, r24
     124:	00 83       	st	Z, r16
     126:	11 83       	std	Z+1, r17	; 0x01
     128:	22 83       	std	Z+2, r18	; 0x02
     12a:	33 83       	std	Z+3, r19	; 0x03
}
     12c:	1f 91       	pop	r17
     12e:	0f 91       	pop	r16
     130:	ff 90       	pop	r15
     132:	ef 90       	pop	r14
     134:	df 90       	pop	r13
     136:	cf 90       	pop	r12
     138:	08 95       	ret

0000013a <sortOrder>:

void sortOrder(int X[], int Y[]) {                                                                   //Sorting algorithm, this sorts the coordinates of the given order
     13a:	2f 92       	push	r2
     13c:	3f 92       	push	r3
     13e:	4f 92       	push	r4
     140:	5f 92       	push	r5
     142:	6f 92       	push	r6
     144:	7f 92       	push	r7
     146:	8f 92       	push	r8
     148:	9f 92       	push	r9
     14a:	af 92       	push	r10
     14c:	bf 92       	push	r11
     14e:	cf 92       	push	r12
     150:	df 92       	push	r13
     152:	ef 92       	push	r14
     154:	ff 92       	push	r15
     156:	0f 93       	push	r16
     158:	1f 93       	push	r17
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
     15e:	cd b7       	in	r28, 0x3d	; 61
     160:	de b7       	in	r29, 0x3e	; 62
     162:	a5 97       	sbiw	r28, 0x25	; 37
     164:	0f b6       	in	r0, 0x3f	; 63
     166:	f8 94       	cli
     168:	de bf       	out	0x3e, r29	; 62
     16a:	0f be       	out	0x3f, r0	; 63
     16c:	cd bf       	out	0x3d, r28	; 61
     16e:	9b a3       	std	Y+35, r25	; 0x23
     170:	8a a3       	std	Y+34, r24	; 0x22
     172:	6c a3       	std	Y+36, r22	; 0x24
     174:	7d a3       	std	Y+37, r23	; 0x25
     176:	06 96       	adiw	r24, 0x06	; 6
     178:	98 a3       	std	Y+32, r25	; 0x20
     17a:	8f 8f       	std	Y+31, r24	; 0x1f
     17c:	b6 c0       	rjmp	.+364    	; 0x2ea <sortOrder+0x1b0>
     17e:	7e 8e       	std	Y+30, r7	; 0x1e
     180:	6d 8e       	std	Y+29, r6	; 0x1d

	while (check != 1) {
		orderCorrect = 1;

		for (int i = 0; i < (sizeOfOrder - 1); i++) {
			Distance[i] = sqrt((pow(X[i], 2)) + (pow(Y[i], 2)));                                    //Pythagoras
     182:	f3 01       	movw	r30, r6
     184:	01 90       	ld	r0, Z+
     186:	f0 81       	ld	r31, Z
     188:	e0 2d       	mov	r30, r0
     18a:	fa 8f       	std	Y+26, r31	; 0x1a
     18c:	e9 8f       	std	Y+25, r30	; 0x19
     18e:	bf 01       	movw	r22, r30
     190:	ff 0f       	add	r31, r31
     192:	88 0b       	sbc	r24, r24
     194:	99 0b       	sbc	r25, r25
     196:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     19a:	6b 01       	movw	r12, r22
     19c:	7c 01       	movw	r14, r24
     19e:	3c 8e       	std	Y+28, r3	; 0x1c
     1a0:	2b 8e       	std	Y+27, r2	; 0x1b
     1a2:	f1 01       	movw	r30, r2
     1a4:	00 81       	ld	r16, Z
     1a6:	11 81       	ldd	r17, Z+1	; 0x01
     1a8:	b8 01       	movw	r22, r16
     1aa:	01 2e       	mov	r0, r17
     1ac:	00 0c       	add	r0, r0
     1ae:	88 0b       	sbc	r24, r24
     1b0:	99 0b       	sbc	r25, r25
     1b2:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     1b6:	4b 01       	movw	r8, r22
     1b8:	5c 01       	movw	r10, r24
     1ba:	9b 01       	movw	r18, r22
     1bc:	ac 01       	movw	r20, r24
     1be:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__mulsf3>
     1c2:	69 8b       	std	Y+17, r22	; 0x11
     1c4:	7a 8b       	std	Y+18, r23	; 0x12
     1c6:	8b 8b       	std	Y+19, r24	; 0x13
     1c8:	9c 8b       	std	Y+20, r25	; 0x14
     1ca:	a5 01       	movw	r20, r10
     1cc:	94 01       	movw	r18, r8
     1ce:	c5 01       	movw	r24, r10
     1d0:	b4 01       	movw	r22, r8
     1d2:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__mulsf3>
     1d6:	4b 01       	movw	r8, r22
     1d8:	5c 01       	movw	r10, r24
     1da:	a7 01       	movw	r20, r14
     1dc:	96 01       	movw	r18, r12
     1de:	c7 01       	movw	r24, r14
     1e0:	b6 01       	movw	r22, r12
     1e2:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__mulsf3>
     1e6:	9b 01       	movw	r18, r22
     1e8:	ac 01       	movw	r20, r24
     1ea:	c5 01       	movw	r24, r10
     1ec:	b4 01       	movw	r22, r8
     1ee:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__addsf3>
     1f2:	0e 94 cd 0b 	call	0x179a	; 0x179a <sqrt>
     1f6:	6b 01       	movw	r12, r22
     1f8:	7c 01       	movw	r14, r24
     1fa:	f2 01       	movw	r30, r4
     1fc:	61 93       	st	Z+, r22
     1fe:	71 93       	st	Z+, r23
     200:	81 93       	st	Z+, r24
     202:	91 93       	st	Z+, r25
     204:	2f 01       	movw	r4, r30
     206:	e9 8b       	std	Y+17, r30	; 0x11
     208:	59 a2       	std	Y+33, r5	; 0x21
			firstDistanceValue =  Distance[i];
			secondDistanceValue =  Distance[i + 1];
     20a:	80 80       	ld	r8, Z
     20c:	91 80       	ldd	r9, Z+1	; 0x01
     20e:	a2 80       	ldd	r10, Z+2	; 0x02
     210:	b3 80       	ldd	r11, Z+3	; 0x03

			if ( Distance[i] >  Distance[i + 1]) {                                                  //Compare the distance of two points to each other
     212:	a5 01       	movw	r20, r10
     214:	94 01       	movw	r18, r8
     216:	0e 94 4d 0b 	call	0x169a	; 0x169a <__gesf2>
     21a:	18 16       	cp	r1, r24
     21c:	d4 f4       	brge	.+52     	; 0x252 <sortOrder+0x118>
				swapOne(& Distance[i], & Distance[i + 1]);                                          //Place the biggest one further behind in the array
     21e:	b2 01       	movw	r22, r4
     220:	8d 89       	ldd	r24, Y+21	; 0x15
     222:	9e 89       	ldd	r25, Y+22	; 0x16
     224:	0e 94 7c 00 	call	0xf8	; 0xf8 <swapOne>


void swapTwo( int *firstXValue, int *secondXValue, int *firstYValue, int *secondYValue){                //Swap function for the coordinates
	int temp;

	temp = *secondXValue;                                                                               //Swap X-Coordinates
     228:	f3 01       	movw	r30, r6
     22a:	82 81       	ldd	r24, Z+2	; 0x02
     22c:	93 81       	ldd	r25, Z+3	; 0x03
	*secondXValue = *firstXValue;
     22e:	20 81       	ld	r18, Z
     230:	31 81       	ldd	r19, Z+1	; 0x01
     232:	33 83       	std	Z+3, r19	; 0x03
     234:	22 83       	std	Z+2, r18	; 0x02
	*firstXValue = temp;
     236:	91 83       	std	Z+1, r25	; 0x01
     238:	80 83       	st	Z, r24

	temp = *secondYValue;                                                                               //Swap Y-Coordinates
     23a:	f1 01       	movw	r30, r2
     23c:	82 81       	ldd	r24, Z+2	; 0x02
     23e:	93 81       	ldd	r25, Z+3	; 0x03
	*secondYValue = *firstYValue;
     240:	20 81       	ld	r18, Z
     242:	31 81       	ldd	r19, Z+1	; 0x01
     244:	33 83       	std	Z+3, r19	; 0x03
     246:	22 83       	std	Z+2, r18	; 0x02
	*firstYValue = temp;
     248:	91 83       	std	Z+1, r25	; 0x01
     24a:	80 83       	st	Z, r24
			secondDistanceValue =  Distance[i + 1];

			if ( Distance[i] >  Distance[i + 1]) {                                                  //Compare the distance of two points to each other
				swapOne(& Distance[i], & Distance[i + 1]);                                          //Place the biggest one further behind in the array
				swapTwo(&X[i], &X[i + 1], &Y[i], &Y[i + 1]);                                        //Swap the coordinates accordingly
				orderCorrect = 0;
     24c:	1f 8a       	std	Y+23, r1	; 0x17
     24e:	18 8e       	std	Y+24, r1	; 0x18
     250:	36 c0       	rjmp	.+108    	; 0x2be <sortOrder+0x184>
				} else if ((firstDistanceValue == secondDistanceValue) && (Y[i] == Y[i + 1])) {     //If the distance is the same and the Y values are the same
     252:	c7 01       	movw	r24, r14
     254:	b6 01       	movw	r22, r12
     256:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__fixsfsi>
     25a:	7b 01       	movw	r14, r22
     25c:	c5 01       	movw	r24, r10
     25e:	b4 01       	movw	r22, r8
     260:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__fixsfsi>
     264:	e6 16       	cp	r14, r22
     266:	f7 06       	cpc	r15, r23
     268:	51 f5       	brne	.+84     	; 0x2be <sortOrder+0x184>
     26a:	eb 8d       	ldd	r30, Y+27	; 0x1b
     26c:	fc 8d       	ldd	r31, Y+28	; 0x1c
     26e:	82 81       	ldd	r24, Z+2	; 0x02
     270:	93 81       	ldd	r25, Z+3	; 0x03
     272:	08 17       	cp	r16, r24
     274:	19 07       	cpc	r17, r25
     276:	19 f5       	brne	.+70     	; 0x2be <sortOrder+0x184>
				if (X[i] < X[i + 1]) {                                                              //Compare the X values
     278:	ed 8d       	ldd	r30, Y+29	; 0x1d
     27a:	fe 8d       	ldd	r31, Y+30	; 0x1e
     27c:	82 81       	ldd	r24, Z+2	; 0x02
     27e:	93 81       	ldd	r25, Z+3	; 0x03
     280:	29 8d       	ldd	r18, Y+25	; 0x19
     282:	3a 8d       	ldd	r19, Y+26	; 0x1a
     284:	28 17       	cp	r18, r24
     286:	39 07       	cpc	r19, r25
     288:	d4 f4       	brge	.+52     	; 0x2be <sortOrder+0x184>
					swapOne(& Distance[i], & Distance[i + 1]);
     28a:	69 89       	ldd	r22, Y+17	; 0x11
     28c:	79 a1       	ldd	r23, Y+33	; 0x21
     28e:	8d 89       	ldd	r24, Y+21	; 0x15
     290:	9e 89       	ldd	r25, Y+22	; 0x16
     292:	0e 94 7c 00 	call	0xf8	; 0xf8 <swapOne>


void swapTwo( int *firstXValue, int *secondXValue, int *firstYValue, int *secondYValue){                //Swap function for the coordinates
	int temp;

	temp = *secondXValue;                                                                               //Swap X-Coordinates
     296:	ed 8d       	ldd	r30, Y+29	; 0x1d
     298:	fe 8d       	ldd	r31, Y+30	; 0x1e
     29a:	82 81       	ldd	r24, Z+2	; 0x02
     29c:	93 81       	ldd	r25, Z+3	; 0x03
	*secondXValue = *firstXValue;
     29e:	20 81       	ld	r18, Z
     2a0:	31 81       	ldd	r19, Z+1	; 0x01
     2a2:	33 83       	std	Z+3, r19	; 0x03
     2a4:	22 83       	std	Z+2, r18	; 0x02
	*firstXValue = temp;
     2a6:	91 83       	std	Z+1, r25	; 0x01
     2a8:	80 83       	st	Z, r24

	temp = *secondYValue;                                                                               //Swap Y-Coordinates
     2aa:	eb 8d       	ldd	r30, Y+27	; 0x1b
     2ac:	fc 8d       	ldd	r31, Y+28	; 0x1c
     2ae:	82 81       	ldd	r24, Z+2	; 0x02
     2b0:	93 81       	ldd	r25, Z+3	; 0x03
	*secondYValue = *firstYValue;
     2b2:	20 81       	ld	r18, Z
     2b4:	31 81       	ldd	r19, Z+1	; 0x01
     2b6:	33 83       	std	Z+3, r19	; 0x03
     2b8:	22 83       	std	Z+2, r18	; 0x02
	*firstYValue = temp;
     2ba:	91 83       	std	Z+1, r25	; 0x01
     2bc:	80 83       	st	Z, r24
     2be:	f2 e0       	ldi	r31, 0x02	; 2
     2c0:	6f 0e       	add	r6, r31
     2c2:	71 1c       	adc	r7, r1
     2c4:	22 e0       	ldi	r18, 0x02	; 2
     2c6:	22 0e       	add	r2, r18
     2c8:	31 1c       	adc	r3, r1
     2ca:	8d 89       	ldd	r24, Y+21	; 0x15
     2cc:	9e 89       	ldd	r25, Y+22	; 0x16
     2ce:	04 96       	adiw	r24, 0x04	; 4
     2d0:	9e 8b       	std	Y+22, r25	; 0x16
     2d2:	8d 8b       	std	Y+21, r24	; 0x15
	float Distance[sizeOfOrder];

	while (check != 1) {
		orderCorrect = 1;

		for (int i = 0; i < (sizeOfOrder - 1); i++) {
     2d4:	ef 8d       	ldd	r30, Y+31	; 0x1f
     2d6:	f8 a1       	ldd	r31, Y+32	; 0x20
     2d8:	6e 16       	cp	r6, r30
     2da:	7f 06       	cpc	r7, r31
     2dc:	09 f0       	breq	.+2      	; 0x2e0 <sortOrder+0x1a6>
     2de:	4f cf       	rjmp	.-354    	; 0x17e <sortOrder+0x44>
					swapOne(& Distance[i], & Distance[i + 1]);
					swapTwo(&X[i], &X[i + 1], &Y[i], &Y[i + 1]);
				}
			}
		}
		if (orderCorrect == 1) {
     2e0:	2f 89       	ldd	r18, Y+23	; 0x17
     2e2:	38 8d       	ldd	r19, Y+24	; 0x18
     2e4:	21 30       	cpi	r18, 0x01	; 1
     2e6:	31 05       	cpc	r19, r1
     2e8:	69 f0       	breq	.+26     	; 0x304 <sortOrder+0x1ca>
     2ea:	6a a0       	ldd	r6, Y+34	; 0x22
     2ec:	7b a0       	ldd	r7, Y+35	; 0x23
     2ee:	2c a0       	ldd	r2, Y+36	; 0x24
     2f0:	3d a0       	ldd	r3, Y+37	; 0x25
     2f2:	ce 01       	movw	r24, r28
     2f4:	01 96       	adiw	r24, 0x01	; 1
     2f6:	2c 01       	movw	r4, r24
	temp = *secondValue;
	*secondValue = *firstValue;
	*firstValue = temp;
}

void sortOrder(int X[], int Y[]) {                                                                   //Sorting algorithm, this sorts the coordinates of the given order
     2f8:	9e 8b       	std	Y+22, r25	; 0x16
     2fa:	8d 8b       	std	Y+21, r24	; 0x15
     2fc:	91 e0       	ldi	r25, 0x01	; 1
     2fe:	9f 8b       	std	Y+23, r25	; 0x17
     300:	18 8e       	std	Y+24, r1	; 0x18
     302:	3d cf       	rjmp	.-390    	; 0x17e <sortOrder+0x44>
		}
		if (orderCorrect == 1) {
			check = 1;
		}
	}
}
     304:	a5 96       	adiw	r28, 0x25	; 37
     306:	0f b6       	in	r0, 0x3f	; 63
     308:	f8 94       	cli
     30a:	de bf       	out	0x3e, r29	; 62
     30c:	0f be       	out	0x3f, r0	; 63
     30e:	cd bf       	out	0x3d, r28	; 61
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	1f 91       	pop	r17
     316:	0f 91       	pop	r16
     318:	ff 90       	pop	r15
     31a:	ef 90       	pop	r14
     31c:	df 90       	pop	r13
     31e:	cf 90       	pop	r12
     320:	bf 90       	pop	r11
     322:	af 90       	pop	r10
     324:	9f 90       	pop	r9
     326:	8f 90       	pop	r8
     328:	7f 90       	pop	r7
     32a:	6f 90       	pop	r6
     32c:	5f 90       	pop	r5
     32e:	4f 90       	pop	r4
     330:	3f 90       	pop	r3
     332:	2f 90       	pop	r2
     334:	08 95       	ret

00000336 <readGrid>:



void readGrid(int routes[4][4]){
     336:	fc 01       	movw	r30, r24
	
	routes[0][0] = 2;                                                                         //Home to grid
     338:	42 e0       	ldi	r20, 0x02	; 2
     33a:	50 e0       	ldi	r21, 0x00	; 0
     33c:	51 83       	std	Z+1, r21	; 0x01
     33e:	40 83       	st	Z, r20
	routes[0][1] = 3;
     340:	83 e0       	ldi	r24, 0x03	; 3
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	93 83       	std	Z+3, r25	; 0x03
     346:	82 83       	std	Z+2, r24	; 0x02
	routes[0][2] = 2;
     348:	55 83       	std	Z+5, r21	; 0x05
     34a:	44 83       	std	Z+4, r20	; 0x04
	routes[0][3] = 5;
     34c:	25 e0       	ldi	r18, 0x05	; 5
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	37 83       	std	Z+7, r19	; 0x07
     352:	26 83       	std	Z+6, r18	; 0x06
	
	routes[1][0] = 1;                                                                        //Home to charge point
     354:	61 e0       	ldi	r22, 0x01	; 1
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	71 87       	std	Z+9, r23	; 0x09
     35a:	60 87       	std	Z+8, r22	; 0x08
	routes[1][1] = 1;
     35c:	73 87       	std	Z+11, r23	; 0x0b
     35e:	62 87       	std	Z+10, r22	; 0x0a
	routes[1][2] = 5;
     360:	35 87       	std	Z+13, r19	; 0x0d
     362:	24 87       	std	Z+12, r18	; 0x0c
	
	routes[2][0] = 3;                                                                        //Grid to charge point
     364:	91 8b       	std	Z+17, r25	; 0x11
     366:	80 8b       	std	Z+16, r24	; 0x10
	routes[2][1] = 3;
     368:	93 8b       	std	Z+19, r25	; 0x13
     36a:	82 8b       	std	Z+18, r24	; 0x12
	routes[2][2] = 5;
     36c:	35 8b       	std	Z+21, r19	; 0x15
     36e:	24 8b       	std	Z+20, r18	; 0x14
	
	routes[3][0] = 3;                                                                        //Grid to home
     370:	91 8f       	std	Z+25, r25	; 0x19
     372:	80 8f       	std	Z+24, r24	; 0x18
	routes[3][1] = 1;
     374:	73 8f       	std	Z+27, r23	; 0x1b
     376:	62 8f       	std	Z+26, r22	; 0x1a
	routes[3][2] = 2;
     378:	55 8f       	std	Z+29, r21	; 0x1d
     37a:	44 8f       	std	Z+28, r20	; 0x1c
	routes[3][3] = 5;
     37c:	37 8f       	std	Z+31, r19	; 0x1f
     37e:	26 8f       	std	Z+30, r18	; 0x1e
	
	routes[4][0] = 3;                                                                       //Charge point to grid
     380:	91 a3       	std	Z+33, r25	; 0x21
     382:	80 a3       	std	Z+32, r24	; 0x20
	routes[4][1] = 2;
     384:	53 a3       	std	Z+35, r21	; 0x23
     386:	42 a3       	std	Z+34, r20	; 0x22
	routes[4][2] = 3;
     388:	95 a3       	std	Z+37, r25	; 0x25
     38a:	84 a3       	std	Z+36, r24	; 0x24
	routes[4][3] = 5;
     38c:	37 a3       	std	Z+39, r19	; 0x27
     38e:	26 a3       	std	Z+38, r18	; 0x26
     390:	08 95       	ret

00000392 <setDirection>:
	else{
		setDirection(S, directionCurrent);
	}
}

void setDirection(direction directionDesired, direction directionCurrent){
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
     39a:	60 97       	sbiw	r28, 0x10	; 16
     39c:	0f b6       	in	r0, 0x3f	; 63
     39e:	f8 94       	cli
     3a0:	de bf       	out	0x3e, r29	; 62
     3a2:	0f be       	out	0x3f, r0	; 63
     3a4:	cd bf       	out	0x3d, r28	; 61
	rotation orientation[4][4] ={{X, R, T, L},
     3a6:	90 e1       	ldi	r25, 0x10	; 16
     3a8:	e4 e1       	ldi	r30, 0x14	; 20
     3aa:	f1 e0       	ldi	r31, 0x01	; 1
     3ac:	de 01       	movw	r26, r28
     3ae:	11 96       	adiw	r26, 0x01	; 1
     3b0:	01 90       	ld	r0, Z+
     3b2:	0d 92       	st	X+, r0
     3b4:	9a 95       	dec	r25
     3b6:	e1 f7       	brne	.-8      	; 0x3b0 <setDirection+0x1e>
	{L, X, R, T},
	{T, L, X, R},
	{R, T, L, X}};
	
	switch(orientation[directionDesired][directionCurrent]){
     3b8:	e1 e0       	ldi	r30, 0x01	; 1
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	ec 0f       	add	r30, r28
     3be:	fd 1f       	adc	r31, r29
     3c0:	94 e0       	ldi	r25, 0x04	; 4
     3c2:	89 9f       	mul	r24, r25
     3c4:	e0 0d       	add	r30, r0
     3c6:	f1 1d       	adc	r31, r1
     3c8:	11 24       	eor	r1, r1
     3ca:	e6 0f       	add	r30, r22
     3cc:	f1 1d       	adc	r31, r1
     3ce:	80 81       	ld	r24, Z
     3d0:	81 30       	cpi	r24, 0x01	; 1
     3d2:	21 f0       	breq	.+8      	; 0x3dc <setDirection+0x4a>
     3d4:	f8 f0       	brcs	.+62     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     3d6:	82 30       	cpi	r24, 0x02	; 2
     3d8:	79 f0       	breq	.+30     	; 0x3f8 <setDirection+0x66>
     3da:	32 c0       	rjmp	.+100    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		case R:
		motorControl(70, 'R', 0.30);
     3dc:	2a e9       	ldi	r18, 0x9A	; 154
     3de:	39 e9       	ldi	r19, 0x99	; 153
     3e0:	49 e9       	ldi	r20, 0x99	; 153
     3e2:	5e e3       	ldi	r21, 0x3E	; 62
     3e4:	62 e5       	ldi	r22, 0x52	; 82
     3e6:	86 e4       	ldi	r24, 0x46	; 70
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <motorControl>
		    : "0" ( microseconds )
		    );  
}

// These are alternative aliases:
static inline void delay(unsigned int milliseconds) { delay_ms(milliseconds); }
     3ee:	84 ef       	ldi	r24, 0xF4	; 244
     3f0:	91 e0       	ldi	r25, 0x01	; 1
     3f2:	0e 94 1a 14 	call	0x2834	; 0x2834 <delay_ms>
     3f6:	24 c0       	rjmp	.+72     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		directionCurrent = directionDesired;
		delay(500);
		break;
		case L:
		motorControl(70, 'L', 0.30);
     3f8:	2a e9       	ldi	r18, 0x9A	; 154
     3fa:	39 e9       	ldi	r19, 0x99	; 153
     3fc:	49 e9       	ldi	r20, 0x99	; 153
     3fe:	5e e3       	ldi	r21, 0x3E	; 62
     400:	6c e4       	ldi	r22, 0x4C	; 76
     402:	86 e4       	ldi	r24, 0x46	; 70
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <motorControl>
     40a:	84 ef       	ldi	r24, 0xF4	; 244
     40c:	91 e0       	ldi	r25, 0x01	; 1
     40e:	0e 94 1a 14 	call	0x2834	; 0x2834 <delay_ms>
     412:	16 c0       	rjmp	.+44     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		directionCurrent = directionDesired;
		delay(500);
		break;
		case T:
		motorControl(70, 'R', 0.30);
     414:	2a e9       	ldi	r18, 0x9A	; 154
     416:	39 e9       	ldi	r19, 0x99	; 153
     418:	49 e9       	ldi	r20, 0x99	; 153
     41a:	5e e3       	ldi	r21, 0x3E	; 62
     41c:	62 e5       	ldi	r22, 0x52	; 82
     41e:	86 e4       	ldi	r24, 0x46	; 70
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <motorControl>
		motorControl(70, 'R', 0.30);
     426:	2a e9       	ldi	r18, 0x9A	; 154
     428:	39 e9       	ldi	r19, 0x99	; 153
     42a:	49 e9       	ldi	r20, 0x99	; 153
     42c:	5e e3       	ldi	r21, 0x3E	; 62
     42e:	62 e5       	ldi	r22, 0x52	; 82
     430:	86 e4       	ldi	r24, 0x46	; 70
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <motorControl>
     438:	84 ef       	ldi	r24, 0xF4	; 244
     43a:	91 e0       	ldi	r25, 0x01	; 1
     43c:	0e 94 1a 14 	call	0x2834	; 0x2834 <delay_ms>
		delay(500);
		break;
		default:
		break;
	}
}
     440:	60 96       	adiw	r28, 0x10	; 16
     442:	0f b6       	in	r0, 0x3f	; 63
     444:	f8 94       	cli
     446:	de bf       	out	0x3e, r29	; 62
     448:	0f be       	out	0x3f, r0	; 63
     44a:	cd bf       	out	0x3d, r28	; 61
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	08 95       	ret

00000452 <getInstructionsX>:
		}
	}
}

void getInstructionsX(int gridZero, int orderX){
	if(gridZero){
     452:	89 2b       	or	r24, r25
     454:	31 f0       	breq	.+12     	; 0x462 <getInstructionsX+0x10>
		positionCurrentX = 0;
     456:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <positionCurrentX+0x1>
     45a:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <positionCurrentX>
		directionCurrent = N;
     45e:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <directionCurrent>
	}
	
	if(orderX > positionCurrentX){
     462:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <positionCurrentX>
     466:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <positionCurrentX+0x1>
     46a:	86 17       	cp	r24, r22
     46c:	97 07       	cpc	r25, r23
     46e:	34 f4       	brge	.+12     	; 0x47c <getInstructionsX+0x2a>
		setDirection(E, directionCurrent);
     470:	60 91 05 02 	lds	r22, 0x0205	; 0x800205 <directionCurrent>
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	0e 94 c9 01 	call	0x392	; 0x392 <setDirection>
     47a:	08 95       	ret
	}
	else{
		setDirection(W, directionCurrent);
     47c:	60 91 05 02 	lds	r22, 0x0205	; 0x800205 <directionCurrent>
     480:	83 e0       	ldi	r24, 0x03	; 3
     482:	0e 94 c9 01 	call	0x392	; 0x392 <setDirection>
     486:	08 95       	ret

00000488 <getInstructionsY>:
	}
}

void getInstructionsY(int gridZero, int orderY){
	if(gridZero){
     488:	89 2b       	or	r24, r25
     48a:	31 f0       	breq	.+12     	; 0x498 <getInstructionsY+0x10>
		positionCurrentY = 0;
     48c:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <positionCurrentY+0x1>
     490:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <positionCurrentY>
		directionCurrent = N;
     494:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <directionCurrent>
	}
	
	if(orderY > positionCurrentY){
     498:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <positionCurrentY>
     49c:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <positionCurrentY+0x1>
     4a0:	86 17       	cp	r24, r22
     4a2:	97 07       	cpc	r25, r23
     4a4:	34 f4       	brge	.+12     	; 0x4b2 <getInstructionsY+0x2a>
		setDirection(N, directionCurrent);
     4a6:	60 91 05 02 	lds	r22, 0x0205	; 0x800205 <directionCurrent>
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	0e 94 c9 01 	call	0x392	; 0x392 <setDirection>
     4b0:	08 95       	ret
	}
	else{
		setDirection(S, directionCurrent);
     4b2:	60 91 05 02 	lds	r22, 0x0205	; 0x800205 <directionCurrent>
     4b6:	82 e0       	ldi	r24, 0x02	; 2
     4b8:	0e 94 c9 01 	call	0x392	; 0x392 <setDirection>
     4bc:	08 95       	ret

000004be <driveRoute>:
		default:
		break;
	}
}

void driveRoute(int route[4][4], int flag){                                                //Drive the given route
     4be:	8f 92       	push	r8
     4c0:	9f 92       	push	r9
     4c2:	af 92       	push	r10
     4c4:	bf 92       	push	r11
     4c6:	cf 92       	push	r12
     4c8:	df 92       	push	r13
     4ca:	ef 92       	push	r14
     4cc:	ff 92       	push	r15
     4ce:	0f 93       	push	r16
     4d0:	1f 93       	push	r17
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
		}
		
		if(checkAfslag() != 0){
			
			if(decision == HIGH){                                                          //If there is more than one turn, the robot makes a decision depending on the values in the route array
				switch(route[flag][intersectnum]){
     4d6:	6b 01       	movw	r12, r22
     4d8:	cc 0c       	add	r12, r12
     4da:	dd 1c       	adc	r13, r13
     4dc:	cc 0c       	add	r12, r12
     4de:	dd 1c       	adc	r13, r13
     4e0:	cc 0c       	add	r12, r12
     4e2:	dd 1c       	adc	r13, r13
     4e4:	c8 0e       	add	r12, r24
     4e6:	d9 1e       	adc	r13, r25
		break;
	}
}

void driveRoute(int route[4][4], int flag){                                                //Drive the given route
	int intersectnum = 0, decision = LOW, resultTemp, turn = 0, endOfRoute = 0;            //Flag selects the route
     4e8:	e1 2c       	mov	r14, r1
     4ea:	f1 2c       	mov	r15, r1
     4ec:	a1 2c       	mov	r10, r1
     4ee:	b1 2c       	mov	r11, r1
     4f0:	cf ef       	ldi	r28, 0xFF	; 255
     4f2:	d1 e0       	ldi	r29, 0x01	; 1
					print("F");
					break;
					case 5:
					motorControl(0, 'F', 0.89);
					play_from_program_space(PSTR(">g32>>c32"));                            //Robot has reached destination
					endOfRoute = 1;
     4f4:	88 24       	eor	r8, r8
     4f6:	83 94       	inc	r8
     4f8:	91 2c       	mov	r9, r1
	
	do{
		decision = LOW;
		do{
			turn = 0;
			checkAfslag();
     4fa:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <checkAfslag>
     4fe:	e9 ef       	ldi	r30, 0xF9	; 249
     500:	f1 e0       	ldi	r31, 0x01	; 1
	int intersectnum = 0, decision = LOW, resultTemp, turn = 0, endOfRoute = 0;            //Flag selects the route
	
	do{
		decision = LOW;
		do{
			turn = 0;
     502:	00 e0       	ldi	r16, 0x00	; 0
     504:	10 e0       	ldi	r17, 0x00	; 0
			checkAfslag();
			for(int i = 0; i < 3; i++){
				if(situations[i] == HIGH){                                                     //Counts number of possible turns
     506:	81 91       	ld	r24, Z+
     508:	91 91       	ld	r25, Z+
     50a:	01 97       	sbiw	r24, 0x01	; 1
     50c:	11 f4       	brne	.+4      	; 0x512 <driveRoute+0x54>
					turn++;
     50e:	0f 5f       	subi	r16, 0xFF	; 255
     510:	1f 4f       	sbci	r17, 0xFF	; 255
	do{
		decision = LOW;
		do{
			turn = 0;
			checkAfslag();
			for(int i = 0; i < 3; i++){
     512:	ce 17       	cp	r28, r30
     514:	df 07       	cpc	r29, r31
     516:	b9 f7       	brne	.-18     	; 0x506 <driveRoute+0x48>
				if(situations[i] == HIGH){                                                     //Counts number of possible turns
					turn++;
				}
			}
			followLine();
     518:	0e 94 b6 08 	call	0x116c	; 0x116c <followLine>
			checkDistance();
     51c:	0e 94 8d 09 	call	0x131a	; 0x131a <checkDistance>
		}while(checkAfslag() == 0);                                                           //Keep following the line if the sensor does not detect any intersections
     520:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <checkAfslag>
     524:	89 2b       	or	r24, r25
     526:	49 f3       	breq	.-46     	; 0x4fa <driveRoute+0x3c>
		
		resultTemp = turn;                                                                    //If there is more than one option, the robot has to make a decision
		if(resultTemp > 1){
     528:	02 30       	cpi	r16, 0x02	; 2
     52a:	11 05       	cpc	r17, r1
     52c:	0c f4       	brge	.+2      	; 0x530 <driveRoute+0x72>
     52e:	72 c0       	rjmp	.+228    	; 0x614 <driveRoute+0x156>
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
     530:	59 9a       	sbi	0x0b, 1	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
     532:	51 9a       	sbi	0x0a, 1	; 10
			decision = HIGH;
			red_led(1);
		}
		
		if(checkAfslag() != 0){
     534:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <checkAfslag>
     538:	89 2b       	or	r24, r25
     53a:	09 f4       	brne	.+2      	; 0x53e <driveRoute+0x80>
     53c:	5c c0       	rjmp	.+184    	; 0x5f6 <driveRoute+0x138>
			
			if(decision == HIGH){                                                          //If there is more than one turn, the robot makes a decision depending on the values in the route array
				switch(route[flag][intersectnum]){
     53e:	f5 01       	movw	r30, r10
     540:	ee 0f       	add	r30, r30
     542:	ff 1f       	adc	r31, r31
     544:	ec 0d       	add	r30, r12
     546:	fd 1d       	adc	r31, r13
     548:	80 81       	ld	r24, Z
     54a:	91 81       	ldd	r25, Z+1	; 0x01
     54c:	82 30       	cpi	r24, 0x02	; 2
     54e:	91 05       	cpc	r25, r1
     550:	f9 f0       	breq	.+62     	; 0x590 <driveRoute+0xd2>
     552:	1c f4       	brge	.+6      	; 0x55a <driveRoute+0x9c>
     554:	01 97       	sbiw	r24, 0x01	; 1
     556:	39 f0       	breq	.+14     	; 0x566 <driveRoute+0xa8>
     558:	4c c0       	rjmp	.+152    	; 0x5f2 <driveRoute+0x134>
     55a:	83 30       	cpi	r24, 0x03	; 3
     55c:	91 05       	cpc	r25, r1
     55e:	49 f1       	breq	.+82     	; 0x5b2 <driveRoute+0xf4>
     560:	05 97       	sbiw	r24, 0x05	; 5
     562:	c1 f1       	breq	.+112    	; 0x5d4 <driveRoute+0x116>
     564:	46 c0       	rjmp	.+140    	; 0x5f2 <driveRoute+0x134>
     566:	86 e9       	ldi	r24, 0x96	; 150
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	0e 94 1a 14 	call	0x2834	; 0x2834 <delay_ms>
					case 1:
					delay(150);
					motorControl(70, 'R', 0.30);
     56e:	2a e9       	ldi	r18, 0x9A	; 154
     570:	39 e9       	ldi	r19, 0x99	; 153
     572:	49 e9       	ldi	r20, 0x99	; 153
     574:	5e e3       	ldi	r21, 0x3E	; 62
     576:	62 e5       	ldi	r22, 0x52	; 82
     578:	86 e4       	ldi	r24, 0x46	; 70
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <motorControl>
					intersectnum++;
     580:	8f ef       	ldi	r24, 0xFF	; 255
     582:	a8 1a       	sub	r10, r24
     584:	b8 0a       	sbc	r11, r24
					print("R");
     586:	81 e5       	ldi	r24, 0x51	; 81
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	0e 94 ab 11 	call	0x2356	; 0x2356 <print>
					break;
     58e:	31 c0       	rjmp	.+98     	; 0x5f2 <driveRoute+0x134>
					case 2:
					motorControl(70, 'L', 0.30);
     590:	2a e9       	ldi	r18, 0x9A	; 154
     592:	39 e9       	ldi	r19, 0x99	; 153
     594:	49 e9       	ldi	r20, 0x99	; 153
     596:	5e e3       	ldi	r21, 0x3E	; 62
     598:	6c e4       	ldi	r22, 0x4C	; 76
     59a:	86 e4       	ldi	r24, 0x46	; 70
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <motorControl>
					intersectnum++;
     5a2:	8f ef       	ldi	r24, 0xFF	; 255
     5a4:	a8 1a       	sub	r10, r24
     5a6:	b8 0a       	sbc	r11, r24
					print("R");
     5a8:	81 e5       	ldi	r24, 0x51	; 81
     5aa:	91 e0       	ldi	r25, 0x01	; 1
     5ac:	0e 94 ab 11 	call	0x2356	; 0x2356 <print>
					break;
     5b0:	20 c0       	rjmp	.+64     	; 0x5f2 <driveRoute+0x134>
					case 3:
					motorControl(60, 'F', 0.89);
     5b2:	2a e0       	ldi	r18, 0x0A	; 10
     5b4:	37 ed       	ldi	r19, 0xD7	; 215
     5b6:	43 e6       	ldi	r20, 0x63	; 99
     5b8:	5f e3       	ldi	r21, 0x3F	; 63
     5ba:	66 e4       	ldi	r22, 0x46	; 70
     5bc:	8c e3       	ldi	r24, 0x3C	; 60
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <motorControl>
					intersectnum++;
     5c4:	8f ef       	ldi	r24, 0xFF	; 255
     5c6:	a8 1a       	sub	r10, r24
     5c8:	b8 0a       	sbc	r11, r24
					print("F");
     5ca:	83 e5       	ldi	r24, 0x53	; 83
     5cc:	91 e0       	ldi	r25, 0x01	; 1
     5ce:	0e 94 ab 11 	call	0x2356	; 0x2356 <print>
					break;
     5d2:	0f c0       	rjmp	.+30     	; 0x5f2 <driveRoute+0x134>
					case 5:
					motorControl(0, 'F', 0.89);
     5d4:	2a e0       	ldi	r18, 0x0A	; 10
     5d6:	37 ed       	ldi	r19, 0xD7	; 215
     5d8:	43 e6       	ldi	r20, 0x63	; 99
     5da:	5f e3       	ldi	r21, 0x3F	; 63
     5dc:	66 e4       	ldi	r22, 0x46	; 70
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <motorControl>
					play_from_program_space(PSTR(">g32>>c32"));                            //Robot has reached destination
     5e6:	86 e8       	ldi	r24, 0x86	; 134
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	0e 94 93 10 	call	0x2126	; 0x2126 <play_from_program_space>
					endOfRoute = 1;
     5ee:	e8 2c       	mov	r14, r8
     5f0:	f9 2c       	mov	r15, r9
					break;
				}
				clear();
     5f2:	0e 94 9c 11 	call	0x2338	; 0x2338 <clear>
			}
		}
	}while(endOfRoute !=  1);
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	e8 16       	cp	r14, r24
     5fa:	f1 04       	cpc	r15, r1
     5fc:	09 f0       	breq	.+2      	; 0x600 <driveRoute+0x142>
     5fe:	7d cf       	rjmp	.-262    	; 0x4fa <driveRoute+0x3c>
	motorControl(0, 'F', 0.89);
     600:	2a e0       	ldi	r18, 0x0A	; 10
     602:	37 ed       	ldi	r19, 0xD7	; 215
     604:	43 e6       	ldi	r20, 0x63	; 99
     606:	5f e3       	ldi	r21, 0x3F	; 63
     608:	66 e4       	ldi	r22, 0x46	; 70
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <motorControl>
}
     612:	03 c0       	rjmp	.+6      	; 0x61a <driveRoute+0x15c>
		if(resultTemp > 1){
			decision = HIGH;
			red_led(1);
		}
		
		if(checkAfslag() != 0){
     614:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <checkAfslag>
     618:	ee cf       	rjmp	.-36     	; 0x5f6 <driveRoute+0x138>
				clear();
			}
		}
	}while(endOfRoute !=  1);
	motorControl(0, 'F', 0.89);
}
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	1f 91       	pop	r17
     620:	0f 91       	pop	r16
     622:	ff 90       	pop	r15
     624:	ef 90       	pop	r14
     626:	df 90       	pop	r13
     628:	cf 90       	pop	r12
     62a:	bf 90       	pop	r11
     62c:	af 90       	pop	r10
     62e:	9f 90       	pop	r9
     630:	8f 90       	pop	r8
     632:	08 95       	ret

00000634 <fetchOrder2>:
	routes[4][1] = 2;
	routes[4][2] = 3;
	routes[4][3] = 5;
	
}
void fetchOrder2(int OrderX[], int orderY[], int route[4][4]){
     634:	af 92       	push	r10
     636:	bf 92       	push	r11
     638:	cf 92       	push	r12
     63a:	df 92       	push	r13
     63c:	ef 92       	push	r14
     63e:	ff 92       	push	r15
     640:	0f 93       	push	r16
     642:	1f 93       	push	r17
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	5c 01       	movw	r10, r24
     64a:	d6 2f       	mov	r29, r22
     64c:	c7 2f       	mov	r28, r23
     64e:	ca 01       	movw	r24, r20
	driveRoute(route, 0);
     650:	60 e0       	ldi	r22, 0x00	; 0
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	0e 94 5f 02 	call	0x4be	; 0x4be <driveRoute>
	int gridZero = 1;
	
	while(checkAfslag() == 0){
     658:	02 c0       	rjmp	.+4      	; 0x65e <fetchOrder2+0x2a>
		followLine();
     65a:	0e 94 b6 08 	call	0x116c	; 0x116c <followLine>
}
void fetchOrder2(int OrderX[], int orderY[], int route[4][4]){
	driveRoute(route, 0);
	int gridZero = 1;
	
	while(checkAfslag() == 0){
     65e:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <checkAfslag>
     662:	89 2b       	or	r24, r25
     664:	d1 f3       	breq	.-12     	; 0x65a <fetchOrder2+0x26>
     666:	75 01       	movw	r14, r10
     668:	cd 2e       	mov	r12, r29
     66a:	dc 2e       	mov	r13, r28
     66c:	88 e0       	ldi	r24, 0x08	; 8
     66e:	a8 0e       	add	r10, r24
     670:	b1 1c       	adc	r11, r1
     672:	55 c0       	rjmp	.+170    	; 0x71e <fetchOrder2+0xea>
		followLine();
	}
	for(int orderNum = 0; orderNum < sizeOfOrder; orderNum++){
		while((OrderX[orderNum] != positionCurrentX) && (orderY[orderNum] != positionCurrentY)){
			if(checkAfslag() != 0){
     674:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <checkAfslag>
     678:	89 2b       	or	r24, r25
     67a:	91 f1       	breq	.+100    	; 0x6e0 <fetchOrder2+0xac>
				if( OrderX[orderNum] == positionCurrentX){
     67c:	68 81       	ld	r22, Y
     67e:	79 81       	ldd	r23, Y+1	; 0x01
     680:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <positionCurrentX>
     684:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <positionCurrentX+0x1>
     688:	68 17       	cp	r22, r24
     68a:	79 07       	cpc	r23, r25
     68c:	29 f4       	brne	.+10     	; 0x698 <fetchOrder2+0x64>
					getInstructionsX(gridZero, OrderX[orderNum]);
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	0e 94 29 02 	call	0x452	; 0x452 <getInstructionsX>
     696:	07 c0       	rjmp	.+14     	; 0x6a6 <fetchOrder2+0x72>
				}
				else{
					getInstructionsY(gridZero, orderY[orderNum]);
     698:	f8 01       	movw	r30, r16
     69a:	60 81       	ld	r22, Z
     69c:	71 81       	ldd	r23, Z+1	; 0x01
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	0e 94 44 02 	call	0x488	; 0x488 <getInstructionsY>
				}
				if((OrderX[orderNum] == positionCurrentX) && (orderY[orderNum] == positionCurrentY)){
     6a6:	28 81       	ld	r18, Y
     6a8:	39 81       	ldd	r19, Y+1	; 0x01
     6aa:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <positionCurrentX>
     6ae:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <positionCurrentX+0x1>
     6b2:	28 17       	cp	r18, r24
     6b4:	39 07       	cpc	r19, r25
     6b6:	a1 f4       	brne	.+40     	; 0x6e0 <fetchOrder2+0xac>
     6b8:	f8 01       	movw	r30, r16
     6ba:	20 81       	ld	r18, Z
     6bc:	31 81       	ldd	r19, Z+1	; 0x01
     6be:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <positionCurrentY>
     6c2:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <positionCurrentY+0x1>
     6c6:	28 17       	cp	r18, r24
     6c8:	39 07       	cpc	r19, r25
     6ca:	51 f4       	brne	.+20     	; 0x6e0 <fetchOrder2+0xac>
					play_from_program_space(PSTR(">f32>>a32"));
     6cc:	80 e9       	ldi	r24, 0x90	; 144
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	0e 94 93 10 	call	0x2126	; 0x2126 <play_from_program_space>
     6d4:	84 ef       	ldi	r24, 0xF4	; 244
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	0e 94 1a 14 	call	0x2834	; 0x2834 <delay_ms>
					delay(500);
					clear();
     6dc:	0e 94 9c 11 	call	0x2338	; 0x2338 <clear>
				}
			}
			followLine();
     6e0:	0e 94 b6 08 	call	0x116c	; 0x116c <followLine>
	
	while(checkAfslag() == 0){
		followLine();
	}
	for(int orderNum = 0; orderNum < sizeOfOrder; orderNum++){
		while((OrderX[orderNum] != positionCurrentX) && (orderY[orderNum] != positionCurrentY)){
     6e4:	28 81       	ld	r18, Y
     6e6:	39 81       	ldd	r19, Y+1	; 0x01
     6e8:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <positionCurrentX>
     6ec:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <positionCurrentX+0x1>
     6f0:	28 17       	cp	r18, r24
     6f2:	39 07       	cpc	r19, r25
     6f4:	59 f0       	breq	.+22     	; 0x70c <fetchOrder2+0xd8>
     6f6:	f8 01       	movw	r30, r16
     6f8:	20 81       	ld	r18, Z
     6fa:	31 81       	ldd	r19, Z+1	; 0x01
     6fc:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <positionCurrentY>
     700:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <positionCurrentY+0x1>
     704:	28 17       	cp	r18, r24
     706:	39 07       	cpc	r19, r25
     708:	09 f0       	breq	.+2      	; 0x70c <fetchOrder2+0xd8>
     70a:	b4 cf       	rjmp	.-152    	; 0x674 <fetchOrder2+0x40>
     70c:	f2 e0       	ldi	r31, 0x02	; 2
     70e:	ef 0e       	add	r14, r31
     710:	f1 1c       	adc	r15, r1
     712:	82 e0       	ldi	r24, 0x02	; 2
     714:	c8 0e       	add	r12, r24
     716:	d1 1c       	adc	r13, r1
	int gridZero = 1;
	
	while(checkAfslag() == 0){
		followLine();
	}
	for(int orderNum = 0; orderNum < sizeOfOrder; orderNum++){
     718:	ea 14       	cp	r14, r10
     71a:	fb 04       	cpc	r15, r11
     71c:	b9 f0       	breq	.+46     	; 0x74c <fetchOrder2+0x118>
     71e:	e7 01       	movw	r28, r14
		while((OrderX[orderNum] != positionCurrentX) && (orderY[orderNum] != positionCurrentY)){
     720:	28 81       	ld	r18, Y
     722:	39 81       	ldd	r19, Y+1	; 0x01
     724:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <positionCurrentX>
     728:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <positionCurrentX+0x1>
     72c:	28 17       	cp	r18, r24
     72e:	39 07       	cpc	r19, r25
     730:	69 f3       	breq	.-38     	; 0x70c <fetchOrder2+0xd8>
     732:	86 01       	movw	r16, r12
     734:	f6 01       	movw	r30, r12
     736:	20 81       	ld	r18, Z
     738:	31 81       	ldd	r19, Z+1	; 0x01
     73a:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <positionCurrentY>
     73e:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <positionCurrentY+0x1>
     742:	28 17       	cp	r18, r24
     744:	39 07       	cpc	r19, r25
     746:	09 f0       	breq	.+2      	; 0x74a <fetchOrder2+0x116>
     748:	95 cf       	rjmp	.-214    	; 0x674 <fetchOrder2+0x40>
     74a:	e0 cf       	rjmp	.-64     	; 0x70c <fetchOrder2+0xd8>
				}
			}
			followLine();
		}
	}
}
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	1f 91       	pop	r17
     752:	0f 91       	pop	r16
     754:	ff 90       	pop	r15
     756:	ef 90       	pop	r14
     758:	df 90       	pop	r13
     75a:	cf 90       	pop	r12
     75c:	bf 90       	pop	r11
     75e:	af 90       	pop	r10
     760:	08 95       	ret

00000762 <main>:
#include <pololu/3pi.h>
#include <avr/pgmspace.h>
#include <avr/io.h>
#include <avr/interrupt.h>

int main(){
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
     766:	cd b7       	in	r28, 0x3d	; 61
     768:	de b7       	in	r29, 0x3e	; 62
     76a:	e0 97       	sbiw	r28, 0x30	; 48
     76c:	0f b6       	in	r0, 0x3f	; 63
     76e:	f8 94       	cli
     770:	de bf       	out	0x3e, r29	; 62
     772:	0f be       	out	0x3f, r0	; 63
     774:	cd bf       	out	0x3d, r28	; 61
	initialize();
     776:	0e 94 3e 08 	call	0x107c	; 0x107c <initialize>
	int routes[4][4];
	readGrid(routes);
     77a:	ce 01       	movw	r24, r28
     77c:	01 96       	adiw	r24, 0x01	; 1
     77e:	0e 94 9b 01 	call	0x336	; 0x336 <readGrid>
	int orderX[sizeOfOrder] ={0, 3, 2, 4};
     782:	88 e0       	ldi	r24, 0x08	; 8
     784:	e4 e2       	ldi	r30, 0x24	; 36
     786:	f1 e0       	ldi	r31, 0x01	; 1
     788:	de 01       	movw	r26, r28
     78a:	91 96       	adiw	r26, 0x21	; 33
     78c:	01 90       	ld	r0, Z+
     78e:	0d 92       	st	X+, r0
     790:	8a 95       	dec	r24
     792:	e1 f7       	brne	.-8      	; 0x78c <main+0x2a>
	int orderY[sizeOfOrder] ={4, 2, 3, 0};
     794:	88 e0       	ldi	r24, 0x08	; 8
     796:	ec e2       	ldi	r30, 0x2C	; 44
     798:	f1 e0       	ldi	r31, 0x01	; 1
     79a:	de 01       	movw	r26, r28
     79c:	99 96       	adiw	r26, 0x29	; 41
     79e:	01 90       	ld	r0, Z+
     7a0:	0d 92       	st	X+, r0
     7a2:	8a 95       	dec	r24
     7a4:	e1 f7       	brne	.-8      	; 0x79e <main+0x3c>
	//wirMain(orderX, orderY);
	sortOrder(orderX, orderY);
     7a6:	be 01       	movw	r22, r28
     7a8:	67 5d       	subi	r22, 0xD7	; 215
     7aa:	7f 4f       	sbci	r23, 0xFF	; 255
     7ac:	ce 01       	movw	r24, r28
     7ae:	81 96       	adiw	r24, 0x21	; 33
     7b0:	0e 94 9d 00 	call	0x13a	; 0x13a <sortOrder>
	fetchOrder2(orderX, orderY, routes);
     7b4:	ae 01       	movw	r20, r28
     7b6:	4f 5f       	subi	r20, 0xFF	; 255
     7b8:	5f 4f       	sbci	r21, 0xFF	; 255
     7ba:	be 01       	movw	r22, r28
     7bc:	67 5d       	subi	r22, 0xD7	; 215
     7be:	7f 4f       	sbci	r23, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	81 96       	adiw	r24, 0x21	; 33
     7c4:	0e 94 1a 03 	call	0x634	; 0x634 <fetchOrder2>
	clear();
     7c8:	0e 94 9c 11 	call	0x2338	; 0x2338 <clear>
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	e0 96       	adiw	r28, 0x30	; 48
     7d2:	0f b6       	in	r0, 0x3f	; 63
     7d4:	f8 94       	cli
     7d6:	de bf       	out	0x3e, r29	; 62
     7d8:	0f be       	out	0x3f, r0	; 63
     7da:	cd bf       	out	0x3d, r28	; 61
     7dc:	df 91       	pop	r29
     7de:	cf 91       	pop	r28
     7e0:	08 95       	ret

000007e2 <motorControl>:

int speedCurrent = 0;			//Defining the current speeds.
int speedCurrentRight = 0;
int speedCurrentLeft = 0;

void motorControl(int speed, char direction, float aggressionFactor){		//This function is an upgrade over the existing motor control function written by Pololu. This function moves the robot with an entered speed and acceleration time in a desired direction.
     7e2:	2f 92       	push	r2
     7e4:	3f 92       	push	r3
     7e6:	4f 92       	push	r4
     7e8:	5f 92       	push	r5
     7ea:	6f 92       	push	r6
     7ec:	7f 92       	push	r7
     7ee:	8f 92       	push	r8
     7f0:	9f 92       	push	r9
     7f2:	af 92       	push	r10
     7f4:	bf 92       	push	r11
     7f6:	cf 92       	push	r12
     7f8:	df 92       	push	r13
     7fa:	ef 92       	push	r14
     7fc:	ff 92       	push	r15
     7fe:	0f 93       	push	r16
     800:	1f 93       	push	r17
     802:	cf 93       	push	r28
     804:	df 93       	push	r29
     806:	cd b7       	in	r28, 0x3d	; 61
     808:	de b7       	in	r29, 0x3e	; 62
     80a:	66 97       	sbiw	r28, 0x16	; 22
     80c:	0f b6       	in	r0, 0x3f	; 63
     80e:	f8 94       	cli
     810:	de bf       	out	0x3e, r29	; 62
     812:	0f be       	out	0x3f, r0	; 63
     814:	cd bf       	out	0x3d, r28	; 61
     816:	1c 01       	movw	r2, r24
     818:	29 83       	std	Y+1, r18	; 0x01
     81a:	3a 83       	std	Y+2, r19	; 0x02
     81c:	4b 83       	std	Y+3, r20	; 0x03
     81e:	5c 83       	std	Y+4, r21	; 0x04
	int setSpeedRight = 0;
	int setSpeedLeft = 0;
	
	//directions direction;

	switch (direction){														//This switch case switches between the directions based on the user input.
     820:	66 34       	cpi	r22, 0x46	; 70
     822:	61 f0       	breq	.+24     	; 0x83c <motorControl+0x5a>
     824:	20 f4       	brcc	.+8      	; 0x82e <motorControl+0x4c>
     826:	62 34       	cpi	r22, 0x42	; 66
     828:	09 f4       	brne	.+2      	; 0x82c <motorControl+0x4a>
     82a:	95 c0       	rjmp	.+298    	; 0x956 <__stack+0x57>
     82c:	08 c4       	rjmp	.+2064   	; 0x103e <__stack+0x73f>
     82e:	6c 34       	cpi	r22, 0x4C	; 76
     830:	09 f4       	brne	.+2      	; 0x834 <motorControl+0x52>
     832:	a9 c2       	rjmp	.+1362   	; 0xd86 <__stack+0x487>
     834:	62 35       	cpi	r22, 0x52	; 82
     836:	09 f4       	brne	.+2      	; 0x83a <motorControl+0x58>
     838:	1b c1       	rjmp	.+566    	; 0xa70 <__stack+0x171>
     83a:	01 c4       	rjmp	.+2050   	; 0x103e <__stack+0x73f>
		case 'F':															//This case handles the forward movement of the 3PI robot.
		
		setSpeed = speed - speedCurrent;
     83c:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <speedCurrent>
     840:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <speedCurrent+0x1>
     844:	91 01       	movw	r18, r2
     846:	28 1b       	sub	r18, r24
     848:	39 0b       	sbc	r19, r25
     84a:	45 e6       	ldi	r20, 0x65	; 101
     84c:	50 e0       	ldi	r21, 0x00	; 0
     84e:	5a 87       	std	Y+10, r21	; 0x0a
     850:	49 87       	std	Y+9, r20	; 0x09
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){	//This for loop increases the speed of the current speed to the desired speed with a total of a 100 increments.
     852:	41 2c       	mov	r4, r1
     854:	51 2c       	mov	r5, r1
     856:	32 01       	movw	r6, r4
			timerStart = get_ms();
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2*M_PI ) ) * sin ( 2* M_PI * accelerationCounter ) ) );		//This function transfers the input speed to a segmented speed increase based on the swept sinusoidal curve.
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     858:	03 2e       	mov	r0, r19
     85a:	00 0c       	add	r0, r0
     85c:	44 0b       	sbc	r20, r20
     85e:	55 0b       	sbc	r21, r21
     860:	2d 83       	std	Y+5, r18	; 0x05
     862:	3e 83       	std	Y+6, r19	; 0x06
     864:	4f 83       	std	Y+7, r20	; 0x07
     866:	58 87       	std	Y+8, r21	; 0x08
		case 'F':															//This case handles the forward movement of the 3PI robot.
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){	//This for loop increases the speed of the current speed to the desired speed with a total of a 100 increments.
			timerStart = get_ms();
     868:	0e 94 52 14 	call	0x28a4	; 0x28a4 <get_ms>
     86c:	8b 01       	movw	r16, r22
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2*M_PI ) ) * sin ( 2* M_PI * accelerationCounter ) ) );		//This function transfers the input speed to a segmented speed increase based on the swept sinusoidal curve.
     86e:	2b ed       	ldi	r18, 0xDB	; 219
     870:	3f e0       	ldi	r19, 0x0F	; 15
     872:	49 ec       	ldi	r20, 0xC9	; 201
     874:	50 e4       	ldi	r21, 0x40	; 64
     876:	c3 01       	movw	r24, r6
     878:	b2 01       	movw	r22, r4
     87a:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__mulsf3>
     87e:	0e 94 bf 0b 	call	0x177e	; 0x177e <sin>
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     882:	23 e8       	ldi	r18, 0x83	; 131
     884:	39 ef       	ldi	r19, 0xF9	; 249
     886:	42 e2       	ldi	r20, 0x22	; 34
     888:	5e e3       	ldi	r21, 0x3E	; 62
     88a:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__mulsf3>
     88e:	9b 01       	movw	r18, r22
     890:	ac 01       	movw	r20, r24
     892:	c3 01       	movw	r24, r6
     894:	b2 01       	movw	r22, r4
     896:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__subsf3>
     89a:	4b 01       	movw	r8, r22
     89c:	5c 01       	movw	r10, r24
     89e:	6d 81       	ldd	r22, Y+5	; 0x05
     8a0:	7e 81       	ldd	r23, Y+6	; 0x06
     8a2:	8f 81       	ldd	r24, Y+7	; 0x07
     8a4:	98 85       	ldd	r25, Y+8	; 0x08
     8a6:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     8aa:	9b 01       	movw	r18, r22
     8ac:	ac 01       	movw	r20, r24
     8ae:	c5 01       	movw	r24, r10
     8b0:	b4 01       	movw	r22, r8
     8b2:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__mulsf3>
     8b6:	4b 01       	movw	r8, r22
     8b8:	5c 01       	movw	r10, r24
     8ba:	60 91 f7 01 	lds	r22, 0x01F7	; 0x8001f7 <speedCurrent>
     8be:	70 91 f8 01 	lds	r23, 0x01F8	; 0x8001f8 <speedCurrent+0x1>
     8c2:	07 2e       	mov	r0, r23
     8c4:	00 0c       	add	r0, r0
     8c6:	88 0b       	sbc	r24, r24
     8c8:	99 0b       	sbc	r25, r25
     8ca:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     8ce:	9b 01       	movw	r18, r22
     8d0:	ac 01       	movw	r20, r24
     8d2:	c5 01       	movw	r24, r10
     8d4:	b4 01       	movw	r22, r8
     8d6:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__addsf3>
     8da:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__fixsfsi>
     8de:	dc 01       	movw	r26, r24
     8e0:	cb 01       	movw	r24, r22
     8e2:	bc 01       	movw	r22, r24
     8e4:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {											//This while loop temporarily freezes the system to make sure that the increments are spaced properly to facilitate a fluent and consequent increase in speed.
     8e8:	48 01       	movw	r8, r16
     8ea:	11 0f       	add	r17, r17
     8ec:	aa 08       	sbc	r10, r10
     8ee:	bb 08       	sbc	r11, r11
     8f0:	0e 94 52 14 	call	0x28a4	; 0x28a4 <get_ms>
     8f4:	68 19       	sub	r22, r8
     8f6:	79 09       	sbc	r23, r9
     8f8:	8a 09       	sbc	r24, r10
     8fa:	9b 09       	sbc	r25, r11
     8fc:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__floatunsisf>
     900:	6b 01       	movw	r12, r22
     902:	7c 01       	movw	r14, r24
     904:	20 e0       	ldi	r18, 0x00	; 0
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	40 e2       	ldi	r20, 0x20	; 32
     90a:	51 e4       	ldi	r21, 0x41	; 65
     90c:	69 81       	ldd	r22, Y+1	; 0x01
     90e:	7a 81       	ldd	r23, Y+2	; 0x02
     910:	8b 81       	ldd	r24, Y+3	; 0x03
     912:	9c 81       	ldd	r25, Y+4	; 0x04
     914:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__mulsf3>
     918:	9b 01       	movw	r18, r22
     91a:	ac 01       	movw	r20, r24
     91c:	c7 01       	movw	r24, r14
     91e:	b6 01       	movw	r22, r12
     920:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__cmpsf2>
     924:	88 23       	and	r24, r24
     926:	24 f3       	brlt	.-56     	; 0x8f0 <motorControl+0x10e>
	switch (direction){														//This switch case switches between the directions based on the user input.
		case 'F':															//This case handles the forward movement of the 3PI robot.
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){	//This for loop increases the speed of the current speed to the desired speed with a total of a 100 increments.
     928:	2a e0       	ldi	r18, 0x0A	; 10
     92a:	37 ed       	ldi	r19, 0xD7	; 215
     92c:	43 e2       	ldi	r20, 0x23	; 35
     92e:	5c e3       	ldi	r21, 0x3C	; 60
     930:	c3 01       	movw	r24, r6
     932:	b2 01       	movw	r22, r4
     934:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__addsf3>
     938:	2b 01       	movw	r4, r22
     93a:	3c 01       	movw	r6, r24
     93c:	a9 85       	ldd	r26, Y+9	; 0x09
     93e:	ba 85       	ldd	r27, Y+10	; 0x0a
     940:	11 97       	sbiw	r26, 0x01	; 1
     942:	ba 87       	std	Y+10, r27	; 0x0a
     944:	a9 87       	std	Y+9, r26	; 0x09
     946:	ab 2b       	or	r26, r27
     948:	09 f0       	breq	.+2      	; 0x94c <__stack+0x4d>
     94a:	8e cf       	rjmp	.-228    	; 0x868 <motorControl+0x86>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {											//This while loop temporarily freezes the system to make sure that the increments are spaced properly to facilitate a fluent and consequent increase in speed.
				//Change the aggression factor to manipulate the acceleration time. A shorter time increases the overall jerk of the acceleration.
			}
		}
		speedCurrent = speed;
     94c:	30 92 f8 01 	sts	0x01F8, r3	; 0x8001f8 <speedCurrent+0x1>
     950:	20 92 f7 01 	sts	0x01F7, r2	; 0x8001f7 <speedCurrent>
		break;
     954:	7a c3       	rjmp	.+1780   	; 0x104a <__stack+0x74b>
		
		case 'B':		//This case handles the backward movement of the robot. While the robot does not require this function in the standard routine, it is desired when operating the robot in manual mode.
		
		setSpeed = speed - speedCurrent;
     956:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <speedCurrent>
     95a:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <speedCurrent+0x1>
     95e:	91 01       	movw	r18, r2
     960:	28 1b       	sub	r18, r24
     962:	39 0b       	sbc	r19, r25
     964:	45 e6       	ldi	r20, 0x65	; 101
     966:	50 e0       	ldi	r21, 0x00	; 0
     968:	5a 87       	std	Y+10, r21	; 0x0a
     96a:	49 87       	std	Y+9, r20	; 0x09
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     96c:	41 2c       	mov	r4, r1
     96e:	51 2c       	mov	r5, r1
     970:	32 01       	movw	r6, r4
			timerStart = get_ms();
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     972:	03 2e       	mov	r0, r19
     974:	00 0c       	add	r0, r0
     976:	44 0b       	sbc	r20, r20
     978:	55 0b       	sbc	r21, r21
     97a:	2d 83       	std	Y+5, r18	; 0x05
     97c:	3e 83       	std	Y+6, r19	; 0x06
     97e:	4f 83       	std	Y+7, r20	; 0x07
     980:	58 87       	std	Y+8, r21	; 0x08
		case 'B':		//This case handles the backward movement of the robot. While the robot does not require this function in the standard routine, it is desired when operating the robot in manual mode.
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     982:	0e 94 52 14 	call	0x28a4	; 0x28a4 <get_ms>
     986:	8b 01       	movw	r16, r22
			
			motorLeftSpeed = motorRightSpeed = speedCurrent + setSpeed * (accelerationCounter - ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) );
     988:	2b ed       	ldi	r18, 0xDB	; 219
     98a:	3f e0       	ldi	r19, 0x0F	; 15
     98c:	49 ec       	ldi	r20, 0xC9	; 201
     98e:	50 e4       	ldi	r21, 0x40	; 64
     990:	c3 01       	movw	r24, r6
     992:	b2 01       	movw	r22, r4
     994:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__mulsf3>
     998:	0e 94 bf 0b 	call	0x177e	; 0x177e <sin>
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     99c:	23 e8       	ldi	r18, 0x83	; 131
     99e:	39 ef       	ldi	r19, 0xF9	; 249
     9a0:	42 e2       	ldi	r20, 0x22	; 34
     9a2:	5e e3       	ldi	r21, 0x3E	; 62
     9a4:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__mulsf3>
     9a8:	9b 01       	movw	r18, r22
     9aa:	ac 01       	movw	r20, r24
     9ac:	c3 01       	movw	r24, r6
     9ae:	b2 01       	movw	r22, r4
     9b0:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__subsf3>
     9b4:	4b 01       	movw	r8, r22
     9b6:	5c 01       	movw	r10, r24
     9b8:	6d 81       	ldd	r22, Y+5	; 0x05
     9ba:	7e 81       	ldd	r23, Y+6	; 0x06
     9bc:	8f 81       	ldd	r24, Y+7	; 0x07
     9be:	98 85       	ldd	r25, Y+8	; 0x08
     9c0:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     9c4:	9b 01       	movw	r18, r22
     9c6:	ac 01       	movw	r20, r24
     9c8:	c5 01       	movw	r24, r10
     9ca:	b4 01       	movw	r22, r8
     9cc:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__mulsf3>
     9d0:	4b 01       	movw	r8, r22
     9d2:	5c 01       	movw	r10, r24
     9d4:	60 91 f7 01 	lds	r22, 0x01F7	; 0x8001f7 <speedCurrent>
     9d8:	70 91 f8 01 	lds	r23, 0x01F8	; 0x8001f8 <speedCurrent+0x1>
     9dc:	07 2e       	mov	r0, r23
     9de:	00 0c       	add	r0, r0
     9e0:	88 0b       	sbc	r24, r24
     9e2:	99 0b       	sbc	r25, r25
     9e4:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     9e8:	9b 01       	movw	r18, r22
     9ea:	ac 01       	movw	r20, r24
     9ec:	c5 01       	movw	r24, r10
     9ee:	b4 01       	movw	r22, r8
     9f0:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__addsf3>
     9f4:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__fixsfsi>
     9f8:	dc 01       	movw	r26, r24
     9fa:	cb 01       	movw	r24, r22
     9fc:	bc 01       	movw	r22, r24
     9fe:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     a02:	48 01       	movw	r8, r16
     a04:	11 0f       	add	r17, r17
     a06:	aa 08       	sbc	r10, r10
     a08:	bb 08       	sbc	r11, r11
     a0a:	0e 94 52 14 	call	0x28a4	; 0x28a4 <get_ms>
     a0e:	68 19       	sub	r22, r8
     a10:	79 09       	sbc	r23, r9
     a12:	8a 09       	sbc	r24, r10
     a14:	9b 09       	sbc	r25, r11
     a16:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__floatunsisf>
     a1a:	6b 01       	movw	r12, r22
     a1c:	7c 01       	movw	r14, r24
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	40 e2       	ldi	r20, 0x20	; 32
     a24:	51 e4       	ldi	r21, 0x41	; 65
     a26:	69 81       	ldd	r22, Y+1	; 0x01
     a28:	7a 81       	ldd	r23, Y+2	; 0x02
     a2a:	8b 81       	ldd	r24, Y+3	; 0x03
     a2c:	9c 81       	ldd	r25, Y+4	; 0x04
     a2e:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__mulsf3>
     a32:	9b 01       	movw	r18, r22
     a34:	ac 01       	movw	r20, r24
     a36:	c7 01       	movw	r24, r14
     a38:	b6 01       	movw	r22, r12
     a3a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__cmpsf2>
     a3e:	88 23       	and	r24, r24
     a40:	24 f3       	brlt	.-56     	; 0xa0a <__stack+0x10b>
		
		case 'B':		//This case handles the backward movement of the robot. While the robot does not require this function in the standard routine, it is desired when operating the robot in manual mode.
		
		setSpeed = speed - speedCurrent;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     a42:	2a e0       	ldi	r18, 0x0A	; 10
     a44:	37 ed       	ldi	r19, 0xD7	; 215
     a46:	43 e2       	ldi	r20, 0x23	; 35
     a48:	5c e3       	ldi	r21, 0x3C	; 60
     a4a:	c3 01       	movw	r24, r6
     a4c:	b2 01       	movw	r22, r4
     a4e:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__addsf3>
     a52:	2b 01       	movw	r4, r22
     a54:	3c 01       	movw	r6, r24
     a56:	a9 85       	ldd	r26, Y+9	; 0x09
     a58:	ba 85       	ldd	r27, Y+10	; 0x0a
     a5a:	11 97       	sbiw	r26, 0x01	; 1
     a5c:	ba 87       	std	Y+10, r27	; 0x0a
     a5e:	a9 87       	std	Y+9, r26	; 0x09
     a60:	ab 2b       	or	r26, r27
     a62:	09 f0       	breq	.+2      	; 0xa66 <__stack+0x167>
     a64:	8e cf       	rjmp	.-228    	; 0x982 <__stack+0x83>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrent = speed;
     a66:	30 92 f8 01 	sts	0x01F8, r3	; 0x8001f8 <speedCurrent+0x1>
     a6a:	20 92 f7 01 	sts	0x01F7, r2	; 0x8001f7 <speedCurrent>
		break;
     a6e:	ed c2       	rjmp	.+1498   	; 0x104a <__stack+0x74b>

		case 'R':		//This case handles the rotation of the robot 90 degrees to the right. The robot accelerates and decelerates with the same method used with forward and backward movement.
		
		setSpeedRight = speed + speedCurrentRight;
     a70:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <speedCurrentRight>
     a74:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <speedCurrentRight+0x1>
     a78:	82 0d       	add	r24, r2
     a7a:	93 1d       	adc	r25, r3
		setSpeedLeft = speed - speedCurrentLeft;
     a7c:	20 91 f3 01 	lds	r18, 0x01F3	; 0x8001f3 <speedCurrentLeft>
     a80:	30 91 f4 01 	lds	r19, 0x01F4	; 0x8001f4 <speedCurrentLeft+0x1>
     a84:	a1 01       	movw	r20, r2
     a86:	42 1b       	sub	r20, r18
     a88:	53 0b       	sbc	r21, r19
     a8a:	9a 01       	movw	r18, r20
     a8c:	05 e6       	ldi	r16, 0x65	; 101
     a8e:	10 e0       	ldi	r17, 0x00	; 0
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     a90:	1d 82       	std	Y+5, r1	; 0x05
     a92:	1e 82       	std	Y+6, r1	; 0x06
     a94:	1f 82       	std	Y+7, r1	; 0x07
     a96:	18 86       	std	Y+8, r1	; 0x08
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			motorLeftSpeed = speedCurrent + (speedCurrentLeft + (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     a98:	ac 01       	movw	r20, r24
     a9a:	99 0f       	add	r25, r25
     a9c:	66 0b       	sbc	r22, r22
     a9e:	77 0b       	sbc	r23, r23
     aa0:	4d 87       	std	Y+13, r20	; 0x0d
     aa2:	5e 87       	std	Y+14, r21	; 0x0e
     aa4:	6f 87       	std	Y+15, r22	; 0x0f
     aa6:	78 8b       	std	Y+16, r23	; 0x10
     aa8:	b9 01       	movw	r22, r18
     aaa:	33 0f       	add	r19, r19
     aac:	88 0b       	sbc	r24, r24
     aae:	99 0b       	sbc	r25, r25
     ab0:	69 8b       	std	Y+17, r22	; 0x11
     ab2:	7a 8b       	std	Y+18, r23	; 0x12
     ab4:	8b 8b       	std	Y+19, r24	; 0x13
     ab6:	9c 8b       	std	Y+20, r25	; 0x14
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     ab8:	0e 94 52 14 	call	0x28a4	; 0x28a4 <get_ms>
     abc:	7e 8b       	std	Y+22, r23	; 0x16
     abe:	6d 8b       	std	Y+21, r22	; 0x15
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
     ac0:	60 91 f7 01 	lds	r22, 0x01F7	; 0x8001f7 <speedCurrent>
     ac4:	70 91 f8 01 	lds	r23, 0x01F8	; 0x8001f8 <speedCurrent+0x1>
     ac8:	07 2e       	mov	r0, r23
     aca:	00 0c       	add	r0, r0
     acc:	88 0b       	sbc	r24, r24
     ace:	99 0b       	sbc	r25, r25
     ad0:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     ad4:	69 87       	std	Y+9, r22	; 0x09
     ad6:	7a 87       	std	Y+10, r23	; 0x0a
     ad8:	8b 87       	std	Y+11, r24	; 0x0b
     ada:	9c 87       	std	Y+12, r25	; 0x0c
     adc:	2b ed       	ldi	r18, 0xDB	; 219
     ade:	3f e0       	ldi	r19, 0x0F	; 15
     ae0:	49 ec       	ldi	r20, 0xC9	; 201
     ae2:	50 e4       	ldi	r21, 0x40	; 64
     ae4:	6d 81       	ldd	r22, Y+5	; 0x05
     ae6:	7e 81       	ldd	r23, Y+6	; 0x06
     ae8:	8f 81       	ldd	r24, Y+7	; 0x07
     aea:	98 85       	ldd	r25, Y+8	; 0x08
     aec:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__mulsf3>
     af0:	0e 94 bf 0b 	call	0x177e	; 0x177e <sin>
     af4:	23 e8       	ldi	r18, 0x83	; 131
     af6:	39 ef       	ldi	r19, 0xF9	; 249
     af8:	42 e2       	ldi	r20, 0x22	; 34
     afa:	5e e3       	ldi	r21, 0x3E	; 62
     afc:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__mulsf3>
     b00:	2d 81       	ldd	r18, Y+5	; 0x05
     b02:	3e 81       	ldd	r19, Y+6	; 0x06
     b04:	4f 81       	ldd	r20, Y+7	; 0x07
     b06:	58 85       	ldd	r21, Y+8	; 0x08
     b08:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__addsf3>
     b0c:	4b 01       	movw	r8, r22
     b0e:	5c 01       	movw	r10, r24
			
			motorLeftSpeed = speedCurrent + (speedCurrentLeft + (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     b10:	60 91 f5 01 	lds	r22, 0x01F5	; 0x8001f5 <speedCurrentRight>
     b14:	70 91 f6 01 	lds	r23, 0x01F6	; 0x8001f6 <speedCurrentRight+0x1>
     b18:	07 2e       	mov	r0, r23
     b1a:	00 0c       	add	r0, r0
     b1c:	88 0b       	sbc	r24, r24
     b1e:	99 0b       	sbc	r25, r25
     b20:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     b24:	2b 01       	movw	r4, r22
     b26:	3c 01       	movw	r6, r24
     b28:	6d 85       	ldd	r22, Y+13	; 0x0d
     b2a:	7e 85       	ldd	r23, Y+14	; 0x0e
     b2c:	8f 85       	ldd	r24, Y+15	; 0x0f
     b2e:	98 89       	ldd	r25, Y+16	; 0x10
     b30:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     b34:	a5 01       	movw	r20, r10
     b36:	94 01       	movw	r18, r8
     b38:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__mulsf3>
     b3c:	9b 01       	movw	r18, r22
     b3e:	ac 01       	movw	r20, r24
     b40:	c3 01       	movw	r24, r6
     b42:	b2 01       	movw	r22, r4
     b44:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__subsf3>
     b48:	29 85       	ldd	r18, Y+9	; 0x09
     b4a:	3a 85       	ldd	r19, Y+10	; 0x0a
     b4c:	4b 85       	ldd	r20, Y+11	; 0x0b
     b4e:	5c 85       	ldd	r21, Y+12	; 0x0c
     b50:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__addsf3>
     b54:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__fixsfsi>
     b58:	2b 01       	movw	r4, r22
     b5a:	3c 01       	movw	r6, r24
     b5c:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <speedCurrentLeft>
     b60:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <speedCurrentLeft+0x1>
     b64:	07 2e       	mov	r0, r23
     b66:	00 0c       	add	r0, r0
     b68:	88 0b       	sbc	r24, r24
     b6a:	99 0b       	sbc	r25, r25
     b6c:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     b70:	6b 01       	movw	r12, r22
     b72:	7c 01       	movw	r14, r24
     b74:	69 89       	ldd	r22, Y+17	; 0x11
     b76:	7a 89       	ldd	r23, Y+18	; 0x12
     b78:	8b 89       	ldd	r24, Y+19	; 0x13
     b7a:	9c 89       	ldd	r25, Y+20	; 0x14
     b7c:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     b80:	a5 01       	movw	r20, r10
     b82:	94 01       	movw	r18, r8
     b84:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__mulsf3>
     b88:	9b 01       	movw	r18, r22
     b8a:	ac 01       	movw	r20, r24
     b8c:	c7 01       	movw	r24, r14
     b8e:	b6 01       	movw	r22, r12
     b90:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__addsf3>
     b94:	29 85       	ldd	r18, Y+9	; 0x09
     b96:	3a 85       	ldd	r19, Y+10	; 0x0a
     b98:	4b 85       	ldd	r20, Y+11	; 0x0b
     b9a:	5c 85       	ldd	r21, Y+12	; 0x0c
     b9c:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__addsf3>
     ba0:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__fixsfsi>
     ba4:	dc 01       	movw	r26, r24
     ba6:	cb 01       	movw	r24, r22
     ba8:	b2 01       	movw	r22, r4
     baa:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     bae:	8d 89       	ldd	r24, Y+21	; 0x15
     bb0:	9e 89       	ldd	r25, Y+22	; 0x16
     bb2:	4c 01       	movw	r8, r24
     bb4:	99 0f       	add	r25, r25
     bb6:	aa 08       	sbc	r10, r10
     bb8:	bb 08       	sbc	r11, r11
     bba:	0e 94 52 14 	call	0x28a4	; 0x28a4 <get_ms>
     bbe:	6b 01       	movw	r12, r22
     bc0:	7c 01       	movw	r14, r24
     bc2:	20 e0       	ldi	r18, 0x00	; 0
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	40 e2       	ldi	r20, 0x20	; 32
     bc8:	51 e4       	ldi	r21, 0x41	; 65
     bca:	69 81       	ldd	r22, Y+1	; 0x01
     bcc:	7a 81       	ldd	r23, Y+2	; 0x02
     bce:	8b 81       	ldd	r24, Y+3	; 0x03
     bd0:	9c 81       	ldd	r25, Y+4	; 0x04
     bd2:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__mulsf3>
     bd6:	2b 01       	movw	r4, r22
     bd8:	3c 01       	movw	r6, r24
     bda:	c7 01       	movw	r24, r14
     bdc:	b6 01       	movw	r22, r12
     bde:	68 19       	sub	r22, r8
     be0:	79 09       	sbc	r23, r9
     be2:	8a 09       	sbc	r24, r10
     be4:	9b 09       	sbc	r25, r11
     be6:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__floatunsisf>
     bea:	a3 01       	movw	r20, r6
     bec:	92 01       	movw	r18, r4
     bee:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__cmpsf2>
     bf2:	88 23       	and	r24, r24
     bf4:	14 f3       	brlt	.-60     	; 0xbba <__stack+0x2bb>
		case 'R':		//This case handles the rotation of the robot 90 degrees to the right. The robot accelerates and decelerates with the same method used with forward and backward movement.
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     bf6:	2a e0       	ldi	r18, 0x0A	; 10
     bf8:	37 ed       	ldi	r19, 0xD7	; 215
     bfa:	43 e2       	ldi	r20, 0x23	; 35
     bfc:	5c e3       	ldi	r21, 0x3C	; 60
     bfe:	6d 81       	ldd	r22, Y+5	; 0x05
     c00:	7e 81       	ldd	r23, Y+6	; 0x06
     c02:	8f 81       	ldd	r24, Y+7	; 0x07
     c04:	98 85       	ldd	r25, Y+8	; 0x08
     c06:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__addsf3>
     c0a:	6d 83       	std	Y+5, r22	; 0x05
     c0c:	7e 83       	std	Y+6, r23	; 0x06
     c0e:	8f 83       	std	Y+7, r24	; 0x07
     c10:	98 87       	std	Y+8, r25	; 0x08
     c12:	01 50       	subi	r16, 0x01	; 1
     c14:	11 09       	sbc	r17, r1
     c16:	09 f0       	breq	.+2      	; 0xc1a <__stack+0x31b>
     c18:	4f cf       	rjmp	.-354    	; 0xab8 <__stack+0x1b9>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = -speed;
     c1a:	88 27       	eor	r24, r24
     c1c:	99 27       	eor	r25, r25
     c1e:	82 19       	sub	r24, r2
     c20:	93 09       	sbc	r25, r3
     c22:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <speedCurrentRight+0x1>
     c26:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <speedCurrentRight>
		speedCurrentLeft = speed;
     c2a:	30 92 f4 01 	sts	0x01F4, r3	; 0x8001f4 <speedCurrentLeft+0x1>
     c2e:	20 92 f3 01 	sts	0x01F3, r2	; 0x8001f3 <speedCurrentLeft>
     c32:	05 e6       	ldi	r16, 0x65	; 101
     c34:	10 e0       	ldi	r17, 0x00	; 0
		speed = 0;
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     c36:	19 82       	std	Y+1, r1	; 0x01
     c38:	1a 82       	std	Y+2, r1	; 0x02
     c3a:	1b 82       	std	Y+3, r1	; 0x03
     c3c:	1c 82       	std	Y+4, r1	; 0x04
			timerStart = get_ms();
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
     c3e:	9c 01       	movw	r18, r24
     c40:	99 0f       	add	r25, r25
     c42:	44 0b       	sbc	r20, r20
     c44:	55 0b       	sbc	r21, r21
     c46:	29 87       	std	Y+9, r18	; 0x09
     c48:	3a 87       	std	Y+10, r19	; 0x0a
     c4a:	4b 87       	std	Y+11, r20	; 0x0b
     c4c:	5c 87       	std	Y+12, r21	; 0x0c
     c4e:	c1 2c       	mov	r12, r1
     c50:	d1 2c       	mov	r13, r1
     c52:	76 01       	movw	r14, r12
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     c54:	0e 94 52 14 	call	0x28a4	; 0x28a4 <get_ms>
     c58:	7e 87       	std	Y+14, r23	; 0x0e
     c5a:	6d 87       	std	Y+13, r22	; 0x0d
			
			motorRightSpeed = speedCurrent + (speedCurrentRight - (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
     c5c:	60 91 f7 01 	lds	r22, 0x01F7	; 0x8001f7 <speedCurrent>
     c60:	70 91 f8 01 	lds	r23, 0x01F8	; 0x8001f8 <speedCurrent+0x1>
     c64:	07 2e       	mov	r0, r23
     c66:	00 0c       	add	r0, r0
     c68:	88 0b       	sbc	r24, r24
     c6a:	99 0b       	sbc	r25, r25
     c6c:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     c70:	69 83       	std	Y+1, r22	; 0x01
     c72:	7a 83       	std	Y+2, r23	; 0x02
     c74:	8b 83       	std	Y+3, r24	; 0x03
     c76:	9c 83       	std	Y+4, r25	; 0x04
     c78:	2b ed       	ldi	r18, 0xDB	; 219
     c7a:	3f e0       	ldi	r19, 0x0F	; 15
     c7c:	49 ec       	ldi	r20, 0xC9	; 201
     c7e:	50 e4       	ldi	r21, 0x40	; 64
     c80:	c7 01       	movw	r24, r14
     c82:	b6 01       	movw	r22, r12
     c84:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__mulsf3>
     c88:	0e 94 bf 0b 	call	0x177e	; 0x177e <sin>
     c8c:	23 e8       	ldi	r18, 0x83	; 131
     c8e:	39 ef       	ldi	r19, 0xF9	; 249
     c90:	42 e2       	ldi	r20, 0x22	; 34
     c92:	5e e3       	ldi	r21, 0x3E	; 62
     c94:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__mulsf3>
     c98:	a7 01       	movw	r20, r14
     c9a:	96 01       	movw	r18, r12
     c9c:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__addsf3>
     ca0:	4b 01       	movw	r8, r22
     ca2:	5c 01       	movw	r10, r24
     ca4:	69 85       	ldd	r22, Y+9	; 0x09
     ca6:	7a 85       	ldd	r23, Y+10	; 0x0a
     ca8:	8b 85       	ldd	r24, Y+11	; 0x0b
     caa:	9c 85       	ldd	r25, Y+12	; 0x0c
     cac:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     cb0:	9b 01       	movw	r18, r22
     cb2:	ac 01       	movw	r20, r24
     cb4:	c5 01       	movw	r24, r10
     cb6:	b4 01       	movw	r22, r8
     cb8:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__mulsf3>
     cbc:	4b 01       	movw	r8, r22
     cbe:	5c 01       	movw	r10, r24
			
			motorLeftSpeed = speedCurrent + (speedCurrentLeft + (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) ) );
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     cc0:	60 91 f5 01 	lds	r22, 0x01F5	; 0x8001f5 <speedCurrentRight>
     cc4:	70 91 f6 01 	lds	r23, 0x01F6	; 0x8001f6 <speedCurrentRight+0x1>
     cc8:	07 2e       	mov	r0, r23
     cca:	00 0c       	add	r0, r0
     ccc:	88 0b       	sbc	r24, r24
     cce:	99 0b       	sbc	r25, r25
     cd0:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     cd4:	a5 01       	movw	r20, r10
     cd6:	94 01       	movw	r18, r8
     cd8:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__subsf3>
     cdc:	29 81       	ldd	r18, Y+1	; 0x01
     cde:	3a 81       	ldd	r19, Y+2	; 0x02
     ce0:	4b 81       	ldd	r20, Y+3	; 0x03
     ce2:	5c 81       	ldd	r21, Y+4	; 0x04
     ce4:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__addsf3>
     ce8:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__fixsfsi>
     cec:	6d 83       	std	Y+5, r22	; 0x05
     cee:	7e 83       	std	Y+6, r23	; 0x06
     cf0:	8f 83       	std	Y+7, r24	; 0x07
     cf2:	98 87       	std	Y+8, r25	; 0x08
     cf4:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <speedCurrentLeft>
     cf8:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <speedCurrentLeft+0x1>
     cfc:	07 2e       	mov	r0, r23
     cfe:	00 0c       	add	r0, r0
     d00:	88 0b       	sbc	r24, r24
     d02:	99 0b       	sbc	r25, r25
     d04:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     d08:	a5 01       	movw	r20, r10
     d0a:	94 01       	movw	r18, r8
     d0c:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__addsf3>
     d10:	29 81       	ldd	r18, Y+1	; 0x01
     d12:	3a 81       	ldd	r19, Y+2	; 0x02
     d14:	4b 81       	ldd	r20, Y+3	; 0x03
     d16:	5c 81       	ldd	r21, Y+4	; 0x04
     d18:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__addsf3>
     d1c:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__fixsfsi>
     d20:	dc 01       	movw	r26, r24
     d22:	cb 01       	movw	r24, r22
     d24:	6d 81       	ldd	r22, Y+5	; 0x05
     d26:	7e 81       	ldd	r23, Y+6	; 0x06
     d28:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     d2c:	4d 85       	ldd	r20, Y+13	; 0x0d
     d2e:	5e 85       	ldd	r21, Y+14	; 0x0e
     d30:	4a 01       	movw	r8, r20
     d32:	55 0f       	add	r21, r21
     d34:	aa 08       	sbc	r10, r10
     d36:	bb 08       	sbc	r11, r11
     d38:	0e 94 52 14 	call	0x28a4	; 0x28a4 <get_ms>
     d3c:	68 19       	sub	r22, r8
     d3e:	79 09       	sbc	r23, r9
     d40:	8a 09       	sbc	r24, r10
     d42:	9b 09       	sbc	r25, r11
     d44:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__floatunsisf>
     d48:	9b 01       	movw	r18, r22
     d4a:	ac 01       	movw	r20, r24
     d4c:	c3 01       	movw	r24, r6
     d4e:	b2 01       	movw	r22, r4
     d50:	0e 94 4d 0b 	call	0x169a	; 0x169a <__gesf2>
     d54:	18 16       	cp	r1, r24
     d56:	84 f3       	brlt	.-32     	; 0xd38 <__stack+0x439>
		speed = 0;
		
		setSpeedRight = speed + speedCurrentRight;
		setSpeedLeft = speed - speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     d58:	2a e0       	ldi	r18, 0x0A	; 10
     d5a:	37 ed       	ldi	r19, 0xD7	; 215
     d5c:	43 e2       	ldi	r20, 0x23	; 35
     d5e:	5c e3       	ldi	r21, 0x3C	; 60
     d60:	c7 01       	movw	r24, r14
     d62:	b6 01       	movw	r22, r12
     d64:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__addsf3>
     d68:	6b 01       	movw	r12, r22
     d6a:	7c 01       	movw	r14, r24
     d6c:	01 50       	subi	r16, 0x01	; 1
     d6e:	11 09       	sbc	r17, r1
     d70:	09 f0       	breq	.+2      	; 0xd74 <__stack+0x475>
     d72:	70 cf       	rjmp	.-288    	; 0xc54 <__stack+0x355>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = -speed;
     d74:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <speedCurrentRight+0x1>
     d78:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <speedCurrentRight>
		speedCurrentLeft = speed;
     d7c:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <speedCurrentLeft+0x1>
     d80:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <speedCurrentLeft>
		
		break;
     d84:	62 c1       	rjmp	.+708    	; 0x104a <__stack+0x74b>

		case 'L': //This case handles the rotation of the robot 90 degrees to the left. The robot accelerates and decelerates with the same method used with forward and backward movement.
		
		setSpeedRight = speed - speedCurrentRight;
     d86:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <speedCurrentRight>
     d8a:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <speedCurrentRight+0x1>
     d8e:	91 01       	movw	r18, r2
     d90:	28 1b       	sub	r18, r24
     d92:	39 0b       	sbc	r19, r25
		setSpeedLeft = speed + speedCurrentLeft;
     d94:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <speedCurrentLeft>
     d98:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <speedCurrentLeft+0x1>
     d9c:	82 0d       	add	r24, r2
     d9e:	93 1d       	adc	r25, r3
     da0:	65 e6       	ldi	r22, 0x65	; 101
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	7a 8b       	std	Y+18, r23	; 0x12
     da6:	69 8b       	std	Y+17, r22	; 0x11
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     da8:	1d 82       	std	Y+5, r1	; 0x05
     daa:	1e 82       	std	Y+6, r1	; 0x06
     dac:	1f 82       	std	Y+7, r1	; 0x07
     dae:	18 86       	std	Y+8, r1	; 0x08
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
			
			motorLeftSpeed = speedCurrentLeft - (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ));
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     db0:	a9 01       	movw	r20, r18
     db2:	33 0f       	add	r19, r19
     db4:	66 0b       	sbc	r22, r22
     db6:	77 0b       	sbc	r23, r23
     db8:	49 87       	std	Y+9, r20	; 0x09
     dba:	5a 87       	std	Y+10, r21	; 0x0a
     dbc:	6b 87       	std	Y+11, r22	; 0x0b
     dbe:	7c 87       	std	Y+12, r23	; 0x0c
     dc0:	9c 01       	movw	r18, r24
     dc2:	99 0f       	add	r25, r25
     dc4:	44 0b       	sbc	r20, r20
     dc6:	55 0b       	sbc	r21, r21
     dc8:	2d 87       	std	Y+13, r18	; 0x0d
     dca:	3e 87       	std	Y+14, r19	; 0x0e
     dcc:	4f 87       	std	Y+15, r20	; 0x0f
     dce:	58 8b       	std	Y+16, r21	; 0x10
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     dd0:	0e 94 52 14 	call	0x28a4	; 0x28a4 <get_ms>
     dd4:	8b 01       	movw	r16, r22
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
     dd6:	2b ed       	ldi	r18, 0xDB	; 219
     dd8:	3f e0       	ldi	r19, 0x0F	; 15
     dda:	49 ec       	ldi	r20, 0xC9	; 201
     ddc:	50 e4       	ldi	r21, 0x40	; 64
     dde:	6d 81       	ldd	r22, Y+5	; 0x05
     de0:	7e 81       	ldd	r23, Y+6	; 0x06
     de2:	8f 81       	ldd	r24, Y+7	; 0x07
     de4:	98 85       	ldd	r25, Y+8	; 0x08
     de6:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__mulsf3>
     dea:	0e 94 bf 0b 	call	0x177e	; 0x177e <sin>
     dee:	23 e8       	ldi	r18, 0x83	; 131
     df0:	39 ef       	ldi	r19, 0xF9	; 249
     df2:	42 e2       	ldi	r20, 0x22	; 34
     df4:	5e e3       	ldi	r21, 0x3E	; 62
     df6:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__mulsf3>
     dfa:	2d 81       	ldd	r18, Y+5	; 0x05
     dfc:	3e 81       	ldd	r19, Y+6	; 0x06
     dfe:	4f 81       	ldd	r20, Y+7	; 0x07
     e00:	58 85       	ldd	r21, Y+8	; 0x08
     e02:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__addsf3>
     e06:	6b 01       	movw	r12, r22
     e08:	7c 01       	movw	r14, r24
			
			motorLeftSpeed = speedCurrentLeft - (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ));
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     e0a:	60 91 f5 01 	lds	r22, 0x01F5	; 0x8001f5 <speedCurrentRight>
     e0e:	70 91 f6 01 	lds	r23, 0x01F6	; 0x8001f6 <speedCurrentRight+0x1>
     e12:	07 2e       	mov	r0, r23
     e14:	00 0c       	add	r0, r0
     e16:	88 0b       	sbc	r24, r24
     e18:	99 0b       	sbc	r25, r25
     e1a:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     e1e:	4b 01       	movw	r8, r22
     e20:	5c 01       	movw	r10, r24
     e22:	69 85       	ldd	r22, Y+9	; 0x09
     e24:	7a 85       	ldd	r23, Y+10	; 0x0a
     e26:	8b 85       	ldd	r24, Y+11	; 0x0b
     e28:	9c 85       	ldd	r25, Y+12	; 0x0c
     e2a:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     e2e:	a7 01       	movw	r20, r14
     e30:	96 01       	movw	r18, r12
     e32:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__mulsf3>
     e36:	9b 01       	movw	r18, r22
     e38:	ac 01       	movw	r20, r24
     e3a:	c5 01       	movw	r24, r10
     e3c:	b4 01       	movw	r22, r8
     e3e:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__addsf3>
     e42:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__fixsfsi>
     e46:	4b 01       	movw	r8, r22
     e48:	5c 01       	movw	r10, r24
     e4a:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <speedCurrentLeft>
     e4e:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <speedCurrentLeft+0x1>
     e52:	07 2e       	mov	r0, r23
     e54:	00 0c       	add	r0, r0
     e56:	88 0b       	sbc	r24, r24
     e58:	99 0b       	sbc	r25, r25
     e5a:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     e5e:	2b 01       	movw	r4, r22
     e60:	3c 01       	movw	r6, r24
     e62:	6d 85       	ldd	r22, Y+13	; 0x0d
     e64:	7e 85       	ldd	r23, Y+14	; 0x0e
     e66:	8f 85       	ldd	r24, Y+15	; 0x0f
     e68:	98 89       	ldd	r25, Y+16	; 0x10
     e6a:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     e6e:	a7 01       	movw	r20, r14
     e70:	96 01       	movw	r18, r12
     e72:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__mulsf3>
     e76:	9b 01       	movw	r18, r22
     e78:	ac 01       	movw	r20, r24
     e7a:	c3 01       	movw	r24, r6
     e7c:	b2 01       	movw	r22, r4
     e7e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__subsf3>
     e82:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__fixsfsi>
     e86:	dc 01       	movw	r26, r24
     e88:	cb 01       	movw	r24, r22
     e8a:	b4 01       	movw	r22, r8
     e8c:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     e90:	48 01       	movw	r8, r16
     e92:	11 0f       	add	r17, r17
     e94:	aa 08       	sbc	r10, r10
     e96:	bb 08       	sbc	r11, r11
     e98:	0e 94 52 14 	call	0x28a4	; 0x28a4 <get_ms>
     e9c:	2b 01       	movw	r4, r22
     e9e:	3c 01       	movw	r6, r24
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	40 e2       	ldi	r20, 0x20	; 32
     ea6:	51 e4       	ldi	r21, 0x41	; 65
     ea8:	69 81       	ldd	r22, Y+1	; 0x01
     eaa:	7a 81       	ldd	r23, Y+2	; 0x02
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	9c 81       	ldd	r25, Y+4	; 0x04
     eb0:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__mulsf3>
     eb4:	6b 01       	movw	r12, r22
     eb6:	7c 01       	movw	r14, r24
     eb8:	c3 01       	movw	r24, r6
     eba:	b2 01       	movw	r22, r4
     ebc:	68 19       	sub	r22, r8
     ebe:	79 09       	sbc	r23, r9
     ec0:	8a 09       	sbc	r24, r10
     ec2:	9b 09       	sbc	r25, r11
     ec4:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__floatunsisf>
     ec8:	a7 01       	movw	r20, r14
     eca:	96 01       	movw	r18, r12
     ecc:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__cmpsf2>
     ed0:	88 23       	and	r24, r24
     ed2:	14 f3       	brlt	.-60     	; 0xe98 <__stack+0x599>
		case 'L': //This case handles the rotation of the robot 90 degrees to the left. The robot accelerates and decelerates with the same method used with forward and backward movement.
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     ed4:	2a e0       	ldi	r18, 0x0A	; 10
     ed6:	37 ed       	ldi	r19, 0xD7	; 215
     ed8:	43 e2       	ldi	r20, 0x23	; 35
     eda:	5c e3       	ldi	r21, 0x3C	; 60
     edc:	6d 81       	ldd	r22, Y+5	; 0x05
     ede:	7e 81       	ldd	r23, Y+6	; 0x06
     ee0:	8f 81       	ldd	r24, Y+7	; 0x07
     ee2:	98 85       	ldd	r25, Y+8	; 0x08
     ee4:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__addsf3>
     ee8:	6d 83       	std	Y+5, r22	; 0x05
     eea:	7e 83       	std	Y+6, r23	; 0x06
     eec:	8f 83       	std	Y+7, r24	; 0x07
     eee:	98 87       	std	Y+8, r25	; 0x08
     ef0:	a9 89       	ldd	r26, Y+17	; 0x11
     ef2:	ba 89       	ldd	r27, Y+18	; 0x12
     ef4:	11 97       	sbiw	r26, 0x01	; 1
     ef6:	ba 8b       	std	Y+18, r27	; 0x12
     ef8:	a9 8b       	std	Y+17, r26	; 0x11
     efa:	ab 2b       	or	r26, r27
     efc:	09 f0       	breq	.+2      	; 0xf00 <__stack+0x601>
     efe:	68 cf       	rjmp	.-304    	; 0xdd0 <__stack+0x4d1>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = speed;
     f00:	30 92 f6 01 	sts	0x01F6, r3	; 0x8001f6 <speedCurrentRight+0x1>
     f04:	20 92 f5 01 	sts	0x01F5, r2	; 0x8001f5 <speedCurrentRight>
		speedCurrentLeft = -speed;
     f08:	31 94       	neg	r3
     f0a:	21 94       	neg	r2
     f0c:	31 08       	sbc	r3, r1
     f0e:	30 92 f4 01 	sts	0x01F4, r3	; 0x8001f4 <speedCurrentLeft+0x1>
     f12:	20 92 f3 01 	sts	0x01F3, r2	; 0x8001f3 <speedCurrentLeft>
     f16:	25 e6       	ldi	r18, 0x65	; 101
     f18:	30 e0       	ldi	r19, 0x00	; 0
		speed = 0;
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
     f1a:	19 82       	std	Y+1, r1	; 0x01
     f1c:	1a 82       	std	Y+2, r1	; 0x02
     f1e:	1b 82       	std	Y+3, r1	; 0x03
     f20:	1c 82       	std	Y+4, r1	; 0x04
			timerStart = get_ms();
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
     f22:	a1 01       	movw	r20, r2
     f24:	33 0c       	add	r3, r3
     f26:	66 0b       	sbc	r22, r22
     f28:	77 0b       	sbc	r23, r23
     f2a:	4d 83       	std	Y+5, r20	; 0x05
     f2c:	5e 83       	std	Y+6, r21	; 0x06
     f2e:	6f 83       	std	Y+7, r22	; 0x07
     f30:	78 87       	std	Y+8, r23	; 0x08
     f32:	3a 87       	std	Y+10, r19	; 0x0a
     f34:	29 87       	std	Y+9, r18	; 0x09
     f36:	81 2c       	mov	r8, r1
     f38:	91 2c       	mov	r9, r1
     f3a:	54 01       	movw	r10, r8
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
			timerStart = get_ms();
     f3c:	0e 94 52 14 	call	0x28a4	; 0x28a4 <get_ms>
     f40:	8b 01       	movw	r16, r22
			
			motorRightSpeed = speedCurrentRight + (setSpeedRight * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ) );
     f42:	2b ed       	ldi	r18, 0xDB	; 219
     f44:	3f e0       	ldi	r19, 0x0F	; 15
     f46:	49 ec       	ldi	r20, 0xC9	; 201
     f48:	50 e4       	ldi	r21, 0x40	; 64
     f4a:	c5 01       	movw	r24, r10
     f4c:	b4 01       	movw	r22, r8
     f4e:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__mulsf3>
     f52:	0e 94 bf 0b 	call	0x177e	; 0x177e <sin>
     f56:	23 e8       	ldi	r18, 0x83	; 131
     f58:	39 ef       	ldi	r19, 0xF9	; 249
     f5a:	42 e2       	ldi	r20, 0x22	; 34
     f5c:	5e e3       	ldi	r21, 0x3E	; 62
     f5e:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__mulsf3>
     f62:	a5 01       	movw	r20, r10
     f64:	94 01       	movw	r18, r8
     f66:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__addsf3>
     f6a:	2b 01       	movw	r4, r22
     f6c:	3c 01       	movw	r6, r24
     f6e:	6d 81       	ldd	r22, Y+5	; 0x05
     f70:	7e 81       	ldd	r23, Y+6	; 0x06
     f72:	8f 81       	ldd	r24, Y+7	; 0x07
     f74:	98 85       	ldd	r25, Y+8	; 0x08
     f76:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     f7a:	9b 01       	movw	r18, r22
     f7c:	ac 01       	movw	r20, r24
     f7e:	c3 01       	movw	r24, r6
     f80:	b2 01       	movw	r22, r4
     f82:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__mulsf3>
     f86:	2b 01       	movw	r4, r22
     f88:	3c 01       	movw	r6, r24
			
			motorLeftSpeed = speedCurrentLeft - (setSpeedLeft * (accelerationCounter + ( ( 1 / ( 2 * M_PI ) ) * sin ( 2 * M_PI * accelerationCounter ) ) ));
			
			set_motors(motorLeftSpeed, motorRightSpeed);
     f8a:	60 91 f5 01 	lds	r22, 0x01F5	; 0x8001f5 <speedCurrentRight>
     f8e:	70 91 f6 01 	lds	r23, 0x01F6	; 0x8001f6 <speedCurrentRight+0x1>
     f92:	07 2e       	mov	r0, r23
     f94:	00 0c       	add	r0, r0
     f96:	88 0b       	sbc	r24, r24
     f98:	99 0b       	sbc	r25, r25
     f9a:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     f9e:	a3 01       	movw	r20, r6
     fa0:	92 01       	movw	r18, r4
     fa2:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__addsf3>
     fa6:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__fixsfsi>
     faa:	69 83       	std	Y+1, r22	; 0x01
     fac:	7a 83       	std	Y+2, r23	; 0x02
     fae:	8b 83       	std	Y+3, r24	; 0x03
     fb0:	9c 83       	std	Y+4, r25	; 0x04
     fb2:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <speedCurrentLeft>
     fb6:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <speedCurrentLeft+0x1>
     fba:	07 2e       	mov	r0, r23
     fbc:	00 0c       	add	r0, r0
     fbe:	88 0b       	sbc	r24, r24
     fc0:	99 0b       	sbc	r25, r25
     fc2:	0e 94 9d 0a 	call	0x153a	; 0x153a <__floatsisf>
     fc6:	a3 01       	movw	r20, r6
     fc8:	92 01       	movw	r18, r4
     fca:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__subsf3>
     fce:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__fixsfsi>
     fd2:	dc 01       	movw	r26, r24
     fd4:	cb 01       	movw	r24, r22
     fd6:	69 81       	ldd	r22, Y+1	; 0x01
     fd8:	7a 81       	ldd	r23, Y+2	; 0x02
     fda:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <set_motors>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
     fde:	28 01       	movw	r4, r16
     fe0:	11 0f       	add	r17, r17
     fe2:	66 08       	sbc	r6, r6
     fe4:	77 08       	sbc	r7, r7
     fe6:	0e 94 52 14 	call	0x28a4	; 0x28a4 <get_ms>
     fea:	64 19       	sub	r22, r4
     fec:	75 09       	sbc	r23, r5
     fee:	86 09       	sbc	r24, r6
     ff0:	97 09       	sbc	r25, r7
     ff2:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__floatunsisf>
     ff6:	9b 01       	movw	r18, r22
     ff8:	ac 01       	movw	r20, r24
     ffa:	c7 01       	movw	r24, r14
     ffc:	b6 01       	movw	r22, r12
     ffe:	0e 94 4d 0b 	call	0x169a	; 0x169a <__gesf2>
    1002:	18 16       	cp	r1, r24
    1004:	84 f3       	brlt	.-32     	; 0xfe6 <__stack+0x6e7>
		speed = 0;
		
		setSpeedRight = speed - speedCurrentRight;
		setSpeedLeft = speed + speedCurrentLeft;
		
		for (accelerationCounter = 0.0; accelerationCounter < 1.0; accelerationCounter = accelerationCounter + 0.01){
    1006:	2a e0       	ldi	r18, 0x0A	; 10
    1008:	37 ed       	ldi	r19, 0xD7	; 215
    100a:	43 e2       	ldi	r20, 0x23	; 35
    100c:	5c e3       	ldi	r21, 0x3C	; 60
    100e:	c5 01       	movw	r24, r10
    1010:	b4 01       	movw	r22, r8
    1012:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__addsf3>
    1016:	4b 01       	movw	r8, r22
    1018:	5c 01       	movw	r10, r24
    101a:	69 85       	ldd	r22, Y+9	; 0x09
    101c:	7a 85       	ldd	r23, Y+10	; 0x0a
    101e:	61 50       	subi	r22, 0x01	; 1
    1020:	71 09       	sbc	r23, r1
    1022:	7a 87       	std	Y+10, r23	; 0x0a
    1024:	69 87       	std	Y+9, r22	; 0x09
    1026:	67 2b       	or	r22, r23
    1028:	09 f0       	breq	.+2      	; 0x102c <__stack+0x72d>
    102a:	88 cf       	rjmp	.-240    	; 0xf3c <__stack+0x63d>

			while ( (get_ms() - timerStart ) < (aggressionFactor * 10.0) ) {
				//change for optimal acceleration time.
			}
		}
		speedCurrentRight = speed;
    102c:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <speedCurrentRight+0x1>
    1030:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <speedCurrentRight>
		speedCurrentLeft = -speed;
    1034:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <speedCurrentLeft+0x1>
    1038:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <speedCurrentLeft>
		break;
    103c:	06 c0       	rjmp	.+12     	; 0x104a <__stack+0x74b>
		
		default:		//The default case puts the robot into a full stop and is only used in emergency situations. Using this case is not recommended as it applies the brakes instantaneously and therefore creates an extreme jerk in the acceleration curve.
		set_motors(0,0);
    103e:	60 e0       	ldi	r22, 0x00	; 0
    1040:	70 e0       	ldi	r23, 0x00	; 0
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <set_motors>
		break;
	}
}
    104a:	66 96       	adiw	r28, 0x16	; 22
    104c:	0f b6       	in	r0, 0x3f	; 63
    104e:	f8 94       	cli
    1050:	de bf       	out	0x3e, r29	; 62
    1052:	0f be       	out	0x3f, r0	; 63
    1054:	cd bf       	out	0x3d, r28	; 61
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	1f 91       	pop	r17
    105c:	0f 91       	pop	r16
    105e:	ff 90       	pop	r15
    1060:	ef 90       	pop	r14
    1062:	df 90       	pop	r13
    1064:	cf 90       	pop	r12
    1066:	bf 90       	pop	r11
    1068:	af 90       	pop	r10
    106a:	9f 90       	pop	r9
    106c:	8f 90       	pop	r8
    106e:	7f 90       	pop	r7
    1070:	6f 90       	pop	r6
    1072:	5f 90       	pop	r5
    1074:	4f 90       	pop	r4
    1076:	3f 90       	pop	r3
    1078:	2f 90       	pop	r2
    107a:	08 95       	ret

0000107c <initialize>:
#include "motoren.h"

int situations[3]={LOW, LOW, LOW};

void initialize()
{
    107c:	cf 93       	push	r28
    107e:	df 93       	push	r29
	
	unsigned int counter;
	pololu_3pi_init(2000);								//initialize sensor value from 0 to 2000
    1080:	80 ed       	ldi	r24, 0xD0	; 208
    1082:	97 e0       	ldi	r25, 0x07	; 7
    1084:	0e 94 af 14 	call	0x295e	; 0x295e <pololu_3pi_init>
	
	while(!button_is_pressed(BUTTON_B))					//this function is activated until button B is pressed.
    1088:	1b c0       	rjmp	.+54     	; 0x10c0 <initialize+0x44>
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
    108a:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <read_battery_millivolts_3pi>
    108e:	ec 01       	movw	r28, r24
	{
		int bat = read_battery_millivolts();
		clear();
    1090:	0e 94 9c 11 	call	0x2338	; 0x2338 <clear>
		print_long(bat);								//print battery voltage in millivolts on the LCD
    1094:	be 01       	movw	r22, r28
    1096:	dd 0f       	add	r29, r29
    1098:	88 0b       	sbc	r24, r24
    109a:	99 0b       	sbc	r25, r25
    109c:	0e 94 00 12 	call	0x2400	; 0x2400 <print_long>
		print("mV");
    10a0:	85 e5       	ldi	r24, 0x55	; 85
    10a2:	91 e0       	ldi	r25, 0x01	; 1
    10a4:	0e 94 ab 11 	call	0x2356	; 0x2356 <print>
		lcd_goto_xy(0,1);
    10a8:	61 e0       	ldi	r22, 0x01	; 1
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	0e 94 23 12 	call	0x2446	; 0x2446 <lcd_goto_xy>
		print("druk B");								//print instruction to continue
    10b0:	88 e5       	ldi	r24, 0x58	; 88
    10b2:	91 e0       	ldi	r25, 0x01	; 1
    10b4:	0e 94 ab 11 	call	0x2356	; 0x2356 <print>
		delay_ms(100);
    10b8:	84 e6       	ldi	r24, 0x64	; 100
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	0e 94 1a 14 	call	0x2834	; 0x2834 <delay_ms>
{
	
	unsigned int counter;
	pololu_3pi_init(2000);								//initialize sensor value from 0 to 2000
	
	while(!button_is_pressed(BUTTON_B))					//this function is activated until button B is pressed.
    10c0:	80 e1       	ldi	r24, 0x10	; 16
    10c2:	0e 94 1c 13 	call	0x2638	; 0x2638 <button_is_pressed>
    10c6:	88 23       	and	r24, r24
    10c8:	01 f3       	breq	.-64     	; 0x108a <initialize+0xe>
		lcd_goto_xy(0,1);
		print("druk B");								//print instruction to continue
		delay_ms(100);
	}
	
	wait_for_button_release(BUTTON_B);					//button B is pressed
    10ca:	80 e1       	ldi	r24, 0x10	; 16
    10cc:	0e 94 08 13 	call	0x2610	; 0x2610 <wait_for_button_release>
	delay_ms(1000);
    10d0:	88 ee       	ldi	r24, 0xE8	; 232
    10d2:	93 e0       	ldi	r25, 0x03	; 3
    10d4:	0e 94 1a 14 	call	0x2834	; 0x2834 <delay_ms>
    10d8:	cc ee       	ldi	r28, 0xEC	; 236
    10da:	df ef       	ldi	r29, 0xFF	; 255
	
	for(counter=0;counter<80;counter++)					//calibrating line sensors
	{
		if(counter < 20 || counter >= 60)
    10dc:	c8 32       	cpi	r28, 0x28	; 40
    10de:	d1 05       	cpc	r29, r1
    10e0:	38 f0       	brcs	.+14     	; 0x10f0 <initialize+0x74>
		set_motors(40,-40);
    10e2:	68 ed       	ldi	r22, 0xD8	; 216
    10e4:	7f ef       	ldi	r23, 0xFF	; 255
    10e6:	88 e2       	ldi	r24, 0x28	; 40
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <set_motors>
    10ee:	06 c0       	rjmp	.+12     	; 0x10fc <initialize+0x80>
		else
		set_motors(-40,40);
    10f0:	68 e2       	ldi	r22, 0x28	; 40
    10f2:	70 e0       	ldi	r23, 0x00	; 0
    10f4:	88 ed       	ldi	r24, 0xD8	; 216
    10f6:	9f ef       	ldi	r25, 0xFF	; 255
    10f8:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <set_motors>
		calibrate_line_sensors(IR_EMITTERS_ON);
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	0e 94 73 14 	call	0x28e6	; 0x28e6 <calibrate_line_sensors>
		delay_ms(20);
    1102:	84 e1       	ldi	r24, 0x14	; 20
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	0e 94 1a 14 	call	0x2834	; 0x2834 <delay_ms>
    110a:	21 96       	adiw	r28, 0x01	; 1
	}
	
	wait_for_button_release(BUTTON_B);					//button B is pressed
	delay_ms(1000);
	
	for(counter=0;counter<80;counter++)					//calibrating line sensors
    110c:	cc 33       	cpi	r28, 0x3C	; 60
    110e:	d1 05       	cpc	r29, r1
    1110:	29 f7       	brne	.-54     	; 0x10dc <initialize+0x60>
		set_motors(-40,40);
		calibrate_line_sensors(IR_EMITTERS_ON);
		delay_ms(20);
	}
	
	set_motors(0,0);
    1112:	60 e0       	ldi	r22, 0x00	; 0
    1114:	70 e0       	ldi	r23, 0x00	; 0
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <set_motors>
	
	while(!button_is_pressed(BUTTON_B))										//function is activated until button B is pressed
    111e:	15 c0       	rjmp	.+42     	; 0x114a <initialize+0xce>
	{
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);			//reading the sensors to determine the position of the robot
    1120:	61 e0       	ldi	r22, 0x01	; 1
    1122:	80 e6       	ldi	r24, 0x60	; 96
    1124:	92 e0       	ldi	r25, 0x02	; 2
    1126:	0e 94 79 14 	call	0x28f2	; 0x28f2 <read_line>
    112a:	ec 01       	movw	r28, r24
		clear();															//clear LCD
    112c:	0e 94 9c 11 	call	0x2338	; 0x2338 <clear>
		print("  ");
    1130:	8f e5       	ldi	r24, 0x5F	; 95
    1132:	91 e0       	ldi	r25, 0x01	; 1
    1134:	0e 94 ab 11 	call	0x2356	; 0x2356 <print>
		print_long(position);												//print position of the robot compared to the line
    1138:	be 01       	movw	r22, r28
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	0e 94 00 12 	call	0x2400	; 0x2400 <print_long>
		delay_ms(100);
    1142:	84 e6       	ldi	r24, 0x64	; 100
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	0e 94 1a 14 	call	0x2834	; 0x2834 <delay_ms>
		delay_ms(20);
	}
	
	set_motors(0,0);
	
	while(!button_is_pressed(BUTTON_B))										//function is activated until button B is pressed
    114a:	80 e1       	ldi	r24, 0x10	; 16
    114c:	0e 94 1c 13 	call	0x2638	; 0x2638 <button_is_pressed>
    1150:	88 23       	and	r24, r24
    1152:	31 f3       	breq	.-52     	; 0x1120 <initialize+0xa4>
		print("  ");
		print_long(position);												//print position of the robot compared to the line
		delay_ms(100);
	}
	
	wait_for_button_release(BUTTON_B);										//button B is pressed
    1154:	80 e1       	ldi	r24, 0x10	; 16
    1156:	0e 94 08 13 	call	0x2610	; 0x2610 <wait_for_button_release>
	clear();																//clear LCD
    115a:	0e 94 9c 11 	call	0x2338	; 0x2338 <clear>
	print("Go!");
    115e:	82 e6       	ldi	r24, 0x62	; 98
    1160:	91 e0       	ldi	r25, 0x01	; 1
    1162:	0e 94 ab 11 	call	0x2356	; 0x2356 <print>

}
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	08 95       	ret

0000116c <followLine>:


void followLine()
{
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
	
	unsigned int pos = read_line(sensors,IR_EMITTERS_ON);					//write position of the robot to an unsigned int called pos
    1170:	61 e0       	ldi	r22, 0x01	; 1
    1172:	80 e6       	ldi	r24, 0x60	; 96
    1174:	92 e0       	ldi	r25, 0x02	; 2
    1176:	0e 94 79 14 	call	0x28f2	; 0x28f2 <read_line>
    117a:	ec 01       	movw	r28, r24
	read_line_sensors(sensors,IR_EMITTERS_ON);								//read line sensors
    117c:	61 e0       	ldi	r22, 0x01	; 1
    117e:	80 e6       	ldi	r24, 0x60	; 96
    1180:	92 e0       	ldi	r25, 0x02	; 2
    1182:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <read_line_sensors>


	clear();																//clear display
    1186:	0e 94 9c 11 	call	0x2338	; 0x2338 <clear>
	
	if(pos < 1950)
    118a:	ce 39       	cpi	r28, 0x9E	; 158
    118c:	87 e0       	ldi	r24, 0x07	; 7
    118e:	d8 07       	cpc	r29, r24
    1190:	98 f4       	brcc	.+38     	; 0x11b8 <followLine+0x4c>
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
    1192:	5f 9a       	sbi	0x0b, 7	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    1194:	57 9a       	sbi	0x0a, 7	; 10
	{
		
		green_led(1);

		if(pos < 1800)														//We are far to the right of the line: turn left.
    1196:	c8 30       	cpi	r28, 0x08	; 8
    1198:	d7 40       	sbci	r29, 0x07	; 7
    119a:	38 f4       	brcc	.+14     	; 0x11aa <followLine+0x3e>
		{
			set_motors(0,SPEED);
    119c:	6c e3       	ldi	r22, 0x3C	; 60
    119e:	70 e0       	ldi	r23, 0x00	; 0
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <set_motors>
    11a8:	24 c0       	rjmp	.+72     	; 0x11f2 <followLine+0x86>
		}
		else
		{
			set_motors(SLOW,SPEED);											//we are to the right of the line: turn left.
    11aa:	6c e3       	ldi	r22, 0x3C	; 60
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    11ae:	87 e3       	ldi	r24, 0x37	; 55
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <set_motors>
    11b6:	1d c0       	rjmp	.+58     	; 0x11f2 <followLine+0x86>
		}
		
	}
	
	else if (pos > 2050)
    11b8:	c3 30       	cpi	r28, 0x03	; 3
    11ba:	88 e0       	ldi	r24, 0x08	; 8
    11bc:	d8 07       	cpc	r29, r24
    11be:	98 f0       	brcs	.+38     	; 0x11e6 <followLine+0x7a>
static inline void set_digital_output_value(struct IOStruct* ioPin, unsigned char val)
{
	if (val == 0xFF)
		*(ioPin->portRegister) ^= ioPin->bitmask;
	else if (val)
		*(ioPin->portRegister) |= ioPin->bitmask;
    11c0:	59 9a       	sbi	0x0b, 1	; 11
// low-level method for setting the data direction (i.e. input or output) of an pin or set of pins
// described by an IOStruct pointer.
static inline void set_data_direction(struct IOStruct* ioPin, unsigned char val)
{
	if (val)
		*(ioPin->ddrRegister) |= ioPin->bitmask;
    11c2:	51 9a       	sbi	0x0a, 1	; 10
	{
		// We are far to the left of the line: turn right.
		red_led(1);
		
		if(pos > 2200)														//We are far to the left of the line: turn right
    11c4:	c9 39       	cpi	r28, 0x99	; 153
    11c6:	d8 40       	sbci	r29, 0x08	; 8
    11c8:	38 f0       	brcs	.+14     	; 0x11d8 <followLine+0x6c>
		{
			set_motors(SPEED,0);
    11ca:	60 e0       	ldi	r22, 0x00	; 0
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	8c e3       	ldi	r24, 0x3C	; 60
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <set_motors>
    11d6:	0d c0       	rjmp	.+26     	; 0x11f2 <followLine+0x86>
		}
		else
		{
			set_motors(FAST,SLOW);											//We are to the left of the line: turn right
    11d8:	67 e3       	ldi	r22, 0x37	; 55
    11da:	70 e0       	ldi	r23, 0x00	; 0
    11dc:	81 e4       	ldi	r24, 0x41	; 65
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <set_motors>
    11e4:	06 c0       	rjmp	.+12     	; 0x11f2 <followLine+0x86>
		}
	}
	else
	{
		set_motors(SLOW,SLOW);												//we are on the line. move forward
    11e6:	67 e3       	ldi	r22, 0x37	; 55
    11e8:	70 e0       	ldi	r23, 0x00	; 0
    11ea:	87 e3       	ldi	r24, 0x37	; 55
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <set_motors>
		
	}

	
}
    11f2:	df 91       	pop	r29
    11f4:	cf 91       	pop	r28
    11f6:	08 95       	ret

000011f8 <checkAfslag>:

int checkAfslag(){
    11f8:	0f 93       	push	r16
    11fa:	1f 93       	push	r17
    11fc:	cf 93       	push	r28
    11fe:	df 93       	push	r29
	play_from_program_space(PSTR(">g32>>c32"));                            
    1200:	8e ea       	ldi	r24, 0xAE	; 174
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	0e 94 93 10 	call	0x2126	; 0x2126 <play_from_program_space>

	int flag = 0;													        //initialize flag and turn
	situations[0] =LOW;														//sensor left initialize
    1208:	e9 ef       	ldi	r30, 0xF9	; 249
    120a:	f1 e0       	ldi	r31, 0x01	; 1
    120c:	11 82       	std	Z+1, r1	; 0x01
    120e:	10 82       	st	Z, r1
	situations[1] =LOW;														//sensor center initialize
    1210:	13 82       	std	Z+3, r1	; 0x03
    1212:	12 82       	std	Z+2, r1	; 0x02
	situations[2] =LOW;														//sensor right initialize
    1214:	15 82       	std	Z+5, r1	; 0x05
    1216:	14 82       	std	Z+4, r1	; 0x04
	read_line_sensors(sensors,IR_EMITTERS_ON);								//read line sensors
    1218:	61 e0       	ldi	r22, 0x01	; 1
    121a:	80 e6       	ldi	r24, 0x60	; 96
    121c:	92 e0       	ldi	r25, 0x02	; 2
    121e:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <read_line_sensors>
	int rangeHigh = 1500;													//set high range to 1000
	
	if(SENSOR_L > rangeHigh){
    1222:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <sensors>
    1226:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <sensors+0x1>
    122a:	8d 3d       	cpi	r24, 0xDD	; 221
    122c:	95 40       	sbci	r25, 0x05	; 5
    122e:	48 f0       	brcs	.+18     	; 0x1242 <checkAfslag+0x4a>
		situations[0] = HIGH;
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <situations+0x1>
    1238:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <situations>
		flag = 1;															//sensor left is high, flag = 1
    123c:	c1 e0       	ldi	r28, 0x01	; 1
    123e:	d0 e0       	ldi	r29, 0x00	; 0
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <checkAfslag+0x4e>
}

int checkAfslag(){
	play_from_program_space(PSTR(">g32>>c32"));                            

	int flag = 0;													        //initialize flag and turn
    1242:	c0 e0       	ldi	r28, 0x00	; 0
    1244:	d0 e0       	ldi	r29, 0x00	; 0
	
	if(SENSOR_L > rangeHigh){
		situations[0] = HIGH;
		flag = 1;															//sensor left is high, flag = 1
	}
	if(SENSOR_C_C > rangeHigh){
    1246:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <sensors+0x4>
    124a:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <sensors+0x5>
    124e:	8d 3d       	cpi	r24, 0xDD	; 221
    1250:	95 40       	sbci	r25, 0x05	; 5
    1252:	40 f0       	brcs	.+16     	; 0x1264 <checkAfslag+0x6c>
		situations[1] = HIGH;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <situations+0x3>
    125c:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <situations+0x2>
		flag = 2;															//sensor center is high, flag = 2
    1260:	c2 e0       	ldi	r28, 0x02	; 2
    1262:	d0 e0       	ldi	r29, 0x00	; 0
	}
	if(SENSOR_R > rangeHigh){
    1264:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <sensors+0x8>
    1268:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <sensors+0x9>
    126c:	8d 3d       	cpi	r24, 0xDD	; 221
    126e:	95 40       	sbci	r25, 0x05	; 5
    1270:	40 f0       	brcs	.+16     	; 0x1282 <checkAfslag+0x8a>
		situations[2] = HIGH;
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <situations+0x5>
    127a:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <situations+0x4>
		flag = 3;															//sensor right is high, flag = 3
    127e:	c3 e0       	ldi	r28, 0x03	; 3
    1280:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	
	
	print_long(flag);														//print flag to LCD
    1282:	be 01       	movw	r22, r28
    1284:	0d 2e       	mov	r0, r29
    1286:	00 0c       	add	r0, r0
    1288:	88 0b       	sbc	r24, r24
    128a:	99 0b       	sbc	r25, r25
    128c:	0e 94 00 12 	call	0x2400	; 0x2400 <print_long>
	lcd_goto_xy(0,1);
    1290:	61 e0       	ldi	r22, 0x01	; 1
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	0e 94 23 12 	call	0x2446	; 0x2446 <lcd_goto_xy>
	print_long(situations[0]);												//print sensor data (0/1) to LCD
    1298:	09 ef       	ldi	r16, 0xF9	; 249
    129a:	11 e0       	ldi	r17, 0x01	; 1
    129c:	f8 01       	movw	r30, r16
    129e:	60 81       	ld	r22, Z
    12a0:	71 81       	ldd	r23, Z+1	; 0x01
    12a2:	07 2e       	mov	r0, r23
    12a4:	00 0c       	add	r0, r0
    12a6:	88 0b       	sbc	r24, r24
    12a8:	99 0b       	sbc	r25, r25
    12aa:	0e 94 00 12 	call	0x2400	; 0x2400 <print_long>
	print_long(situations[1]);
    12ae:	f8 01       	movw	r30, r16
    12b0:	62 81       	ldd	r22, Z+2	; 0x02
    12b2:	73 81       	ldd	r23, Z+3	; 0x03
    12b4:	07 2e       	mov	r0, r23
    12b6:	00 0c       	add	r0, r0
    12b8:	88 0b       	sbc	r24, r24
    12ba:	99 0b       	sbc	r25, r25
    12bc:	0e 94 00 12 	call	0x2400	; 0x2400 <print_long>
	print_long(situations[2]);
    12c0:	f8 01       	movw	r30, r16
    12c2:	64 81       	ldd	r22, Z+4	; 0x04
    12c4:	75 81       	ldd	r23, Z+5	; 0x05
    12c6:	07 2e       	mov	r0, r23
    12c8:	00 0c       	add	r0, r0
    12ca:	88 0b       	sbc	r24, r24
    12cc:	99 0b       	sbc	r25, r25
    12ce:	0e 94 00 12 	call	0x2400	; 0x2400 <print_long>
	clear();																//clear LCD
    12d2:	0e 94 9c 11 	call	0x2338	; 0x2338 <clear>
	return flag;
}
    12d6:	ce 01       	movw	r24, r28
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	1f 91       	pop	r17
    12de:	0f 91       	pop	r16
    12e0:	08 95       	ret

000012e2 <moveObject>:
}


void moveObject()
{
	while(!button_is_pressed(BUTTON_B))
    12e2:	12 c0       	rjmp	.+36     	; 0x1308 <moveObject+0x26>
	{
		clear();
    12e4:	0e 94 9c 11 	call	0x2338	; 0x2338 <clear>
		print("druk op");													//print instruction to LCD
    12e8:	86 e6       	ldi	r24, 0x66	; 102
    12ea:	91 e0       	ldi	r25, 0x01	; 1
    12ec:	0e 94 ab 11 	call	0x2356	; 0x2356 <print>
		lcd_goto_xy(0,1);
    12f0:	61 e0       	ldi	r22, 0x01	; 1
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	0e 94 23 12 	call	0x2446	; 0x2446 <lcd_goto_xy>
		print("B knop");
    12f8:	8e e6       	ldi	r24, 0x6E	; 110
    12fa:	91 e0       	ldi	r25, 0x01	; 1
    12fc:	0e 94 ab 11 	call	0x2356	; 0x2356 <print>
		delay_ms(100);
    1300:	84 e6       	ldi	r24, 0x64	; 100
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	0e 94 1a 14 	call	0x2834	; 0x2834 <delay_ms>
}


void moveObject()
{
	while(!button_is_pressed(BUTTON_B))
    1308:	80 e1       	ldi	r24, 0x10	; 16
    130a:	0e 94 1c 13 	call	0x2638	; 0x2638 <button_is_pressed>
    130e:	88 23       	and	r24, r24
    1310:	49 f3       	breq	.-46     	; 0x12e4 <moveObject+0x2>
		print("druk op");													//print instruction to LCD
		lcd_goto_xy(0,1);
		print("B knop");
		delay_ms(100);
	}
	wait_for_button_release(BUTTON_B);										//when button is released the robot will continue driving
    1312:	80 e1       	ldi	r24, 0x10	; 16
    1314:	0e 94 08 13 	call	0x2610	; 0x2610 <wait_for_button_release>
    1318:	08 95       	ret

0000131a <checkDistance>:


int checkDistance()
{
	
	sensorDistance = analog_read(ADCH5);									//write sensor data to sensorDistance
    131a:	85 e0       	ldi	r24, 0x05	; 5
    131c:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <analog_read>
    1320:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <sensorDistance+0x1>
    1324:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <sensorDistance>
	sensorDistance2 = analog_read(ADCH7);									//write sensor data to sensorDistance2
    1328:	87 e0       	ldi	r24, 0x07	; 7
    132a:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <analog_read>
    132e:	9c 01       	movw	r18, r24
    1330:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <sensorDistance2+0x1>
    1334:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <sensorDistance2>
	
	distance = (2076/(sensorDistance - 11));								//convert sensor data to distance in cm
    1338:	60 91 03 02 	lds	r22, 0x0203	; 0x800203 <sensorDistance>
    133c:	70 91 04 02 	lds	r23, 0x0204	; 0x800204 <sensorDistance+0x1>
    1340:	6b 50       	subi	r22, 0x0B	; 11
    1342:	71 09       	sbc	r23, r1
    1344:	ec e1       	ldi	r30, 0x1C	; 28
    1346:	f8 e0       	ldi	r31, 0x08	; 8
    1348:	cf 01       	movw	r24, r30
    134a:	0e 94 df 19 	call	0x33be	; 0x33be <__divmodhi4>
    134e:	70 93 07 02 	sts	0x0207, r23	; 0x800207 <distance+0x1>
    1352:	60 93 06 02 	sts	0x0206, r22	; 0x800206 <distance>
	distance2 = (2076/(sensorDistance2 - 11));								//convert sensor data to distance in cm
    1356:	b9 01       	movw	r22, r18
    1358:	6b 50       	subi	r22, 0x0B	; 11
    135a:	71 09       	sbc	r23, r1
    135c:	cf 01       	movw	r24, r30
    135e:	0e 94 df 19 	call	0x33be	; 0x33be <__divmodhi4>
    1362:	70 93 0b 02 	sts	0x020B, r23	; 0x80020b <distance2+0x1>
    1366:	60 93 0a 02 	sts	0x020A, r22	; 0x80020a <distance2>
	
	clear();																//clear LCD
    136a:	0e 94 9c 11 	call	0x2338	; 0x2338 <clear>
	
	if(distance < close && distance > veryClose)						    //compares if distance is less than 20 cm & bigger than 10 cm
    136e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <distance>
    1372:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <distance+0x1>
    1376:	9c 01       	movw	r18, r24
    1378:	2b 50       	subi	r18, 0x0B	; 11
    137a:	31 09       	sbc	r19, r1
    137c:	29 30       	cpi	r18, 0x09	; 9
    137e:	31 05       	cpc	r19, r1
    1380:	78 f4       	brcc	.+30     	; 0x13a0 <checkDistance+0x86>
	{
		clear();
    1382:	0e 94 9c 11 	call	0x2338	; 0x2338 <clear>
		play_from_program_space(PSTR(">g32>>c32"));							//sound warning
    1386:	84 ea       	ldi	r24, 0xA4	; 164
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	0e 94 93 10 	call	0x2126	; 0x2126 <play_from_program_space>
		print("dichtbij");													//warning on LCD
    138e:	85 e7       	ldi	r24, 0x75	; 117
    1390:	91 e0       	ldi	r25, 0x01	; 1
    1392:	0e 94 ab 11 	call	0x2356	; 0x2356 <print>
		delay_ms(200);
    1396:	88 ec       	ldi	r24, 0xC8	; 200
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	0e 94 1a 14 	call	0x2834	; 0x2834 <delay_ms>
    139e:	20 c0       	rjmp	.+64     	; 0x13e0 <checkDistance+0xc6>
	}
	else if(distance < veryClose && distance > 0)						    //compares if distance is less than 10 cm
    13a0:	01 97       	sbiw	r24, 0x01	; 1
    13a2:	09 97       	sbiw	r24, 0x09	; 9
    13a4:	e8 f4       	brcc	.+58     	; 0x13e0 <checkDistance+0xc6>
	{
		clear();
    13a6:	0e 94 9c 11 	call	0x2338	; 0x2338 <clear>
		play_from_program_space(PSTR(">f32>>a32"));							//sound warning
    13aa:	8a e9       	ldi	r24, 0x9A	; 154
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	0e 94 93 10 	call	0x2126	; 0x2126 <play_from_program_space>
		print("heeeel");													//warning on LCD
    13b2:	8e e7       	ldi	r24, 0x7E	; 126
    13b4:	91 e0       	ldi	r25, 0x01	; 1
    13b6:	0e 94 ab 11 	call	0x2356	; 0x2356 <print>
		lcd_goto_xy(0,1);
    13ba:	61 e0       	ldi	r22, 0x01	; 1
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	0e 94 23 12 	call	0x2446	; 0x2446 <lcd_goto_xy>
		print("dichtbij");
    13c2:	85 e7       	ldi	r24, 0x75	; 117
    13c4:	91 e0       	ldi	r25, 0x01	; 1
    13c6:	0e 94 ab 11 	call	0x2356	; 0x2356 <print>
		motorControl(STOP,'F',0.89);										//robot brakes
    13ca:	2a e0       	ldi	r18, 0x0A	; 10
    13cc:	37 ed       	ldi	r19, 0xD7	; 215
    13ce:	43 e6       	ldi	r20, 0x63	; 99
    13d0:	5f e3       	ldi	r21, 0x3F	; 63
    13d2:	66 e4       	ldi	r22, 0x46	; 70
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <motorControl>
		moveObject();														//function that waits until the oject is removed
    13dc:	0e 94 71 09 	call	0x12e2	; 0x12e2 <moveObject>
	}

	return 0;

}
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	08 95       	ret

000013e6 <__subsf3>:
    13e6:	50 58       	subi	r21, 0x80	; 128

000013e8 <__addsf3>:
    13e8:	bb 27       	eor	r27, r27
    13ea:	aa 27       	eor	r26, r26
    13ec:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__addsf3x>
    13f0:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <__fp_round>
    13f4:	0e 94 05 0b 	call	0x160a	; 0x160a <__fp_pscA>
    13f8:	38 f0       	brcs	.+14     	; 0x1408 <__addsf3+0x20>
    13fa:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__fp_pscB>
    13fe:	20 f0       	brcs	.+8      	; 0x1408 <__addsf3+0x20>
    1400:	39 f4       	brne	.+14     	; 0x1410 <__addsf3+0x28>
    1402:	9f 3f       	cpi	r25, 0xFF	; 255
    1404:	19 f4       	brne	.+6      	; 0x140c <__addsf3+0x24>
    1406:	26 f4       	brtc	.+8      	; 0x1410 <__addsf3+0x28>
    1408:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <__fp_nan>
    140c:	0e f4       	brtc	.+2      	; 0x1410 <__addsf3+0x28>
    140e:	e0 95       	com	r30
    1410:	e7 fb       	bst	r30, 7
    1412:	0c 94 fc 0a 	jmp	0x15f8	; 0x15f8 <__fp_inf>

00001416 <__addsf3x>:
    1416:	e9 2f       	mov	r30, r25
    1418:	0e 94 24 0b 	call	0x1648	; 0x1648 <__fp_split3>
    141c:	58 f3       	brcs	.-42     	; 0x13f4 <__addsf3+0xc>
    141e:	ba 17       	cp	r27, r26
    1420:	62 07       	cpc	r22, r18
    1422:	73 07       	cpc	r23, r19
    1424:	84 07       	cpc	r24, r20
    1426:	95 07       	cpc	r25, r21
    1428:	20 f0       	brcs	.+8      	; 0x1432 <__addsf3x+0x1c>
    142a:	79 f4       	brne	.+30     	; 0x144a <__addsf3x+0x34>
    142c:	a6 f5       	brtc	.+104    	; 0x1496 <__addsf3x+0x80>
    142e:	0c 94 46 0b 	jmp	0x168c	; 0x168c <__fp_zero>
    1432:	0e f4       	brtc	.+2      	; 0x1436 <__addsf3x+0x20>
    1434:	e0 95       	com	r30
    1436:	0b 2e       	mov	r0, r27
    1438:	ba 2f       	mov	r27, r26
    143a:	a0 2d       	mov	r26, r0
    143c:	0b 01       	movw	r0, r22
    143e:	b9 01       	movw	r22, r18
    1440:	90 01       	movw	r18, r0
    1442:	0c 01       	movw	r0, r24
    1444:	ca 01       	movw	r24, r20
    1446:	a0 01       	movw	r20, r0
    1448:	11 24       	eor	r1, r1
    144a:	ff 27       	eor	r31, r31
    144c:	59 1b       	sub	r21, r25
    144e:	99 f0       	breq	.+38     	; 0x1476 <__addsf3x+0x60>
    1450:	59 3f       	cpi	r21, 0xF9	; 249
    1452:	50 f4       	brcc	.+20     	; 0x1468 <__addsf3x+0x52>
    1454:	50 3e       	cpi	r21, 0xE0	; 224
    1456:	68 f1       	brcs	.+90     	; 0x14b2 <__addsf3x+0x9c>
    1458:	1a 16       	cp	r1, r26
    145a:	f0 40       	sbci	r31, 0x00	; 0
    145c:	a2 2f       	mov	r26, r18
    145e:	23 2f       	mov	r18, r19
    1460:	34 2f       	mov	r19, r20
    1462:	44 27       	eor	r20, r20
    1464:	58 5f       	subi	r21, 0xF8	; 248
    1466:	f3 cf       	rjmp	.-26     	; 0x144e <__addsf3x+0x38>
    1468:	46 95       	lsr	r20
    146a:	37 95       	ror	r19
    146c:	27 95       	ror	r18
    146e:	a7 95       	ror	r26
    1470:	f0 40       	sbci	r31, 0x00	; 0
    1472:	53 95       	inc	r21
    1474:	c9 f7       	brne	.-14     	; 0x1468 <__addsf3x+0x52>
    1476:	7e f4       	brtc	.+30     	; 0x1496 <__addsf3x+0x80>
    1478:	1f 16       	cp	r1, r31
    147a:	ba 0b       	sbc	r27, r26
    147c:	62 0b       	sbc	r22, r18
    147e:	73 0b       	sbc	r23, r19
    1480:	84 0b       	sbc	r24, r20
    1482:	ba f0       	brmi	.+46     	; 0x14b2 <__addsf3x+0x9c>
    1484:	91 50       	subi	r25, 0x01	; 1
    1486:	a1 f0       	breq	.+40     	; 0x14b0 <__addsf3x+0x9a>
    1488:	ff 0f       	add	r31, r31
    148a:	bb 1f       	adc	r27, r27
    148c:	66 1f       	adc	r22, r22
    148e:	77 1f       	adc	r23, r23
    1490:	88 1f       	adc	r24, r24
    1492:	c2 f7       	brpl	.-16     	; 0x1484 <__addsf3x+0x6e>
    1494:	0e c0       	rjmp	.+28     	; 0x14b2 <__addsf3x+0x9c>
    1496:	ba 0f       	add	r27, r26
    1498:	62 1f       	adc	r22, r18
    149a:	73 1f       	adc	r23, r19
    149c:	84 1f       	adc	r24, r20
    149e:	48 f4       	brcc	.+18     	; 0x14b2 <__addsf3x+0x9c>
    14a0:	87 95       	ror	r24
    14a2:	77 95       	ror	r23
    14a4:	67 95       	ror	r22
    14a6:	b7 95       	ror	r27
    14a8:	f7 95       	ror	r31
    14aa:	9e 3f       	cpi	r25, 0xFE	; 254
    14ac:	08 f0       	brcs	.+2      	; 0x14b0 <__addsf3x+0x9a>
    14ae:	b0 cf       	rjmp	.-160    	; 0x1410 <__addsf3+0x28>
    14b0:	93 95       	inc	r25
    14b2:	88 0f       	add	r24, r24
    14b4:	08 f0       	brcs	.+2      	; 0x14b8 <__addsf3x+0xa2>
    14b6:	99 27       	eor	r25, r25
    14b8:	ee 0f       	add	r30, r30
    14ba:	97 95       	ror	r25
    14bc:	87 95       	ror	r24
    14be:	08 95       	ret

000014c0 <__cmpsf2>:
    14c0:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__fp_cmp>
    14c4:	08 f4       	brcc	.+2      	; 0x14c8 <__cmpsf2+0x8>
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	08 95       	ret

000014ca <__fixsfsi>:
    14ca:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__fixunssfsi>
    14ce:	68 94       	set
    14d0:	b1 11       	cpse	r27, r1
    14d2:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__fp_szero>
    14d6:	08 95       	ret

000014d8 <__fixunssfsi>:
    14d8:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__fp_splitA>
    14dc:	88 f0       	brcs	.+34     	; 0x1500 <__fixunssfsi+0x28>
    14de:	9f 57       	subi	r25, 0x7F	; 127
    14e0:	98 f0       	brcs	.+38     	; 0x1508 <__fixunssfsi+0x30>
    14e2:	b9 2f       	mov	r27, r25
    14e4:	99 27       	eor	r25, r25
    14e6:	b7 51       	subi	r27, 0x17	; 23
    14e8:	b0 f0       	brcs	.+44     	; 0x1516 <__fixunssfsi+0x3e>
    14ea:	e1 f0       	breq	.+56     	; 0x1524 <__fixunssfsi+0x4c>
    14ec:	66 0f       	add	r22, r22
    14ee:	77 1f       	adc	r23, r23
    14f0:	88 1f       	adc	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	1a f0       	brmi	.+6      	; 0x14fc <__fixunssfsi+0x24>
    14f6:	ba 95       	dec	r27
    14f8:	c9 f7       	brne	.-14     	; 0x14ec <__fixunssfsi+0x14>
    14fa:	14 c0       	rjmp	.+40     	; 0x1524 <__fixunssfsi+0x4c>
    14fc:	b1 30       	cpi	r27, 0x01	; 1
    14fe:	91 f0       	breq	.+36     	; 0x1524 <__fixunssfsi+0x4c>
    1500:	0e 94 46 0b 	call	0x168c	; 0x168c <__fp_zero>
    1504:	b1 e0       	ldi	r27, 0x01	; 1
    1506:	08 95       	ret
    1508:	0c 94 46 0b 	jmp	0x168c	; 0x168c <__fp_zero>
    150c:	67 2f       	mov	r22, r23
    150e:	78 2f       	mov	r23, r24
    1510:	88 27       	eor	r24, r24
    1512:	b8 5f       	subi	r27, 0xF8	; 248
    1514:	39 f0       	breq	.+14     	; 0x1524 <__fixunssfsi+0x4c>
    1516:	b9 3f       	cpi	r27, 0xF9	; 249
    1518:	cc f3       	brlt	.-14     	; 0x150c <__fixunssfsi+0x34>
    151a:	86 95       	lsr	r24
    151c:	77 95       	ror	r23
    151e:	67 95       	ror	r22
    1520:	b3 95       	inc	r27
    1522:	d9 f7       	brne	.-10     	; 0x151a <__fixunssfsi+0x42>
    1524:	3e f4       	brtc	.+14     	; 0x1534 <__fixunssfsi+0x5c>
    1526:	90 95       	com	r25
    1528:	80 95       	com	r24
    152a:	70 95       	com	r23
    152c:	61 95       	neg	r22
    152e:	7f 4f       	sbci	r23, 0xFF	; 255
    1530:	8f 4f       	sbci	r24, 0xFF	; 255
    1532:	9f 4f       	sbci	r25, 0xFF	; 255
    1534:	08 95       	ret

00001536 <__floatunsisf>:
    1536:	e8 94       	clt
    1538:	09 c0       	rjmp	.+18     	; 0x154c <__floatsisf+0x12>

0000153a <__floatsisf>:
    153a:	97 fb       	bst	r25, 7
    153c:	3e f4       	brtc	.+14     	; 0x154c <__floatsisf+0x12>
    153e:	90 95       	com	r25
    1540:	80 95       	com	r24
    1542:	70 95       	com	r23
    1544:	61 95       	neg	r22
    1546:	7f 4f       	sbci	r23, 0xFF	; 255
    1548:	8f 4f       	sbci	r24, 0xFF	; 255
    154a:	9f 4f       	sbci	r25, 0xFF	; 255
    154c:	99 23       	and	r25, r25
    154e:	a9 f0       	breq	.+42     	; 0x157a <__floatsisf+0x40>
    1550:	f9 2f       	mov	r31, r25
    1552:	96 e9       	ldi	r25, 0x96	; 150
    1554:	bb 27       	eor	r27, r27
    1556:	93 95       	inc	r25
    1558:	f6 95       	lsr	r31
    155a:	87 95       	ror	r24
    155c:	77 95       	ror	r23
    155e:	67 95       	ror	r22
    1560:	b7 95       	ror	r27
    1562:	f1 11       	cpse	r31, r1
    1564:	f8 cf       	rjmp	.-16     	; 0x1556 <__floatsisf+0x1c>
    1566:	fa f4       	brpl	.+62     	; 0x15a6 <__floatsisf+0x6c>
    1568:	bb 0f       	add	r27, r27
    156a:	11 f4       	brne	.+4      	; 0x1570 <__floatsisf+0x36>
    156c:	60 ff       	sbrs	r22, 0
    156e:	1b c0       	rjmp	.+54     	; 0x15a6 <__floatsisf+0x6c>
    1570:	6f 5f       	subi	r22, 0xFF	; 255
    1572:	7f 4f       	sbci	r23, 0xFF	; 255
    1574:	8f 4f       	sbci	r24, 0xFF	; 255
    1576:	9f 4f       	sbci	r25, 0xFF	; 255
    1578:	16 c0       	rjmp	.+44     	; 0x15a6 <__floatsisf+0x6c>
    157a:	88 23       	and	r24, r24
    157c:	11 f0       	breq	.+4      	; 0x1582 <__floatsisf+0x48>
    157e:	96 e9       	ldi	r25, 0x96	; 150
    1580:	11 c0       	rjmp	.+34     	; 0x15a4 <__floatsisf+0x6a>
    1582:	77 23       	and	r23, r23
    1584:	21 f0       	breq	.+8      	; 0x158e <__floatsisf+0x54>
    1586:	9e e8       	ldi	r25, 0x8E	; 142
    1588:	87 2f       	mov	r24, r23
    158a:	76 2f       	mov	r23, r22
    158c:	05 c0       	rjmp	.+10     	; 0x1598 <__floatsisf+0x5e>
    158e:	66 23       	and	r22, r22
    1590:	71 f0       	breq	.+28     	; 0x15ae <__floatsisf+0x74>
    1592:	96 e8       	ldi	r25, 0x86	; 134
    1594:	86 2f       	mov	r24, r22
    1596:	70 e0       	ldi	r23, 0x00	; 0
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	2a f0       	brmi	.+10     	; 0x15a6 <__floatsisf+0x6c>
    159c:	9a 95       	dec	r25
    159e:	66 0f       	add	r22, r22
    15a0:	77 1f       	adc	r23, r23
    15a2:	88 1f       	adc	r24, r24
    15a4:	da f7       	brpl	.-10     	; 0x159c <__floatsisf+0x62>
    15a6:	88 0f       	add	r24, r24
    15a8:	96 95       	lsr	r25
    15aa:	87 95       	ror	r24
    15ac:	97 f9       	bld	r25, 7
    15ae:	08 95       	ret

000015b0 <__fp_cmp>:
    15b0:	99 0f       	add	r25, r25
    15b2:	00 08       	sbc	r0, r0
    15b4:	55 0f       	add	r21, r21
    15b6:	aa 0b       	sbc	r26, r26
    15b8:	e0 e8       	ldi	r30, 0x80	; 128
    15ba:	fe ef       	ldi	r31, 0xFE	; 254
    15bc:	16 16       	cp	r1, r22
    15be:	17 06       	cpc	r1, r23
    15c0:	e8 07       	cpc	r30, r24
    15c2:	f9 07       	cpc	r31, r25
    15c4:	c0 f0       	brcs	.+48     	; 0x15f6 <__fp_cmp+0x46>
    15c6:	12 16       	cp	r1, r18
    15c8:	13 06       	cpc	r1, r19
    15ca:	e4 07       	cpc	r30, r20
    15cc:	f5 07       	cpc	r31, r21
    15ce:	98 f0       	brcs	.+38     	; 0x15f6 <__fp_cmp+0x46>
    15d0:	62 1b       	sub	r22, r18
    15d2:	73 0b       	sbc	r23, r19
    15d4:	84 0b       	sbc	r24, r20
    15d6:	95 0b       	sbc	r25, r21
    15d8:	39 f4       	brne	.+14     	; 0x15e8 <__fp_cmp+0x38>
    15da:	0a 26       	eor	r0, r26
    15dc:	61 f0       	breq	.+24     	; 0x15f6 <__fp_cmp+0x46>
    15de:	23 2b       	or	r18, r19
    15e0:	24 2b       	or	r18, r20
    15e2:	25 2b       	or	r18, r21
    15e4:	21 f4       	brne	.+8      	; 0x15ee <__fp_cmp+0x3e>
    15e6:	08 95       	ret
    15e8:	0a 26       	eor	r0, r26
    15ea:	09 f4       	brne	.+2      	; 0x15ee <__fp_cmp+0x3e>
    15ec:	a1 40       	sbci	r26, 0x01	; 1
    15ee:	a6 95       	lsr	r26
    15f0:	8f ef       	ldi	r24, 0xFF	; 255
    15f2:	81 1d       	adc	r24, r1
    15f4:	81 1d       	adc	r24, r1
    15f6:	08 95       	ret

000015f8 <__fp_inf>:
    15f8:	97 f9       	bld	r25, 7
    15fa:	9f 67       	ori	r25, 0x7F	; 127
    15fc:	80 e8       	ldi	r24, 0x80	; 128
    15fe:	70 e0       	ldi	r23, 0x00	; 0
    1600:	60 e0       	ldi	r22, 0x00	; 0
    1602:	08 95       	ret

00001604 <__fp_nan>:
    1604:	9f ef       	ldi	r25, 0xFF	; 255
    1606:	80 ec       	ldi	r24, 0xC0	; 192
    1608:	08 95       	ret

0000160a <__fp_pscA>:
    160a:	00 24       	eor	r0, r0
    160c:	0a 94       	dec	r0
    160e:	16 16       	cp	r1, r22
    1610:	17 06       	cpc	r1, r23
    1612:	18 06       	cpc	r1, r24
    1614:	09 06       	cpc	r0, r25
    1616:	08 95       	ret

00001618 <__fp_pscB>:
    1618:	00 24       	eor	r0, r0
    161a:	0a 94       	dec	r0
    161c:	12 16       	cp	r1, r18
    161e:	13 06       	cpc	r1, r19
    1620:	14 06       	cpc	r1, r20
    1622:	05 06       	cpc	r0, r21
    1624:	08 95       	ret

00001626 <__fp_round>:
    1626:	09 2e       	mov	r0, r25
    1628:	03 94       	inc	r0
    162a:	00 0c       	add	r0, r0
    162c:	11 f4       	brne	.+4      	; 0x1632 <__fp_round+0xc>
    162e:	88 23       	and	r24, r24
    1630:	52 f0       	brmi	.+20     	; 0x1646 <__fp_round+0x20>
    1632:	bb 0f       	add	r27, r27
    1634:	40 f4       	brcc	.+16     	; 0x1646 <__fp_round+0x20>
    1636:	bf 2b       	or	r27, r31
    1638:	11 f4       	brne	.+4      	; 0x163e <__fp_round+0x18>
    163a:	60 ff       	sbrs	r22, 0
    163c:	04 c0       	rjmp	.+8      	; 0x1646 <__fp_round+0x20>
    163e:	6f 5f       	subi	r22, 0xFF	; 255
    1640:	7f 4f       	sbci	r23, 0xFF	; 255
    1642:	8f 4f       	sbci	r24, 0xFF	; 255
    1644:	9f 4f       	sbci	r25, 0xFF	; 255
    1646:	08 95       	ret

00001648 <__fp_split3>:
    1648:	57 fd       	sbrc	r21, 7
    164a:	90 58       	subi	r25, 0x80	; 128
    164c:	44 0f       	add	r20, r20
    164e:	55 1f       	adc	r21, r21
    1650:	59 f0       	breq	.+22     	; 0x1668 <__fp_splitA+0x10>
    1652:	5f 3f       	cpi	r21, 0xFF	; 255
    1654:	71 f0       	breq	.+28     	; 0x1672 <__fp_splitA+0x1a>
    1656:	47 95       	ror	r20

00001658 <__fp_splitA>:
    1658:	88 0f       	add	r24, r24
    165a:	97 fb       	bst	r25, 7
    165c:	99 1f       	adc	r25, r25
    165e:	61 f0       	breq	.+24     	; 0x1678 <__fp_splitA+0x20>
    1660:	9f 3f       	cpi	r25, 0xFF	; 255
    1662:	79 f0       	breq	.+30     	; 0x1682 <__fp_splitA+0x2a>
    1664:	87 95       	ror	r24
    1666:	08 95       	ret
    1668:	12 16       	cp	r1, r18
    166a:	13 06       	cpc	r1, r19
    166c:	14 06       	cpc	r1, r20
    166e:	55 1f       	adc	r21, r21
    1670:	f2 cf       	rjmp	.-28     	; 0x1656 <__fp_split3+0xe>
    1672:	46 95       	lsr	r20
    1674:	f1 df       	rcall	.-30     	; 0x1658 <__fp_splitA>
    1676:	08 c0       	rjmp	.+16     	; 0x1688 <__fp_splitA+0x30>
    1678:	16 16       	cp	r1, r22
    167a:	17 06       	cpc	r1, r23
    167c:	18 06       	cpc	r1, r24
    167e:	99 1f       	adc	r25, r25
    1680:	f1 cf       	rjmp	.-30     	; 0x1664 <__fp_splitA+0xc>
    1682:	86 95       	lsr	r24
    1684:	71 05       	cpc	r23, r1
    1686:	61 05       	cpc	r22, r1
    1688:	08 94       	sec
    168a:	08 95       	ret

0000168c <__fp_zero>:
    168c:	e8 94       	clt

0000168e <__fp_szero>:
    168e:	bb 27       	eor	r27, r27
    1690:	66 27       	eor	r22, r22
    1692:	77 27       	eor	r23, r23
    1694:	cb 01       	movw	r24, r22
    1696:	97 f9       	bld	r25, 7
    1698:	08 95       	ret

0000169a <__gesf2>:
    169a:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__fp_cmp>
    169e:	08 f4       	brcc	.+2      	; 0x16a2 <__gesf2+0x8>
    16a0:	8f ef       	ldi	r24, 0xFF	; 255
    16a2:	08 95       	ret

000016a4 <__mulsf3>:
    16a4:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__mulsf3x>
    16a8:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <__fp_round>
    16ac:	0e 94 05 0b 	call	0x160a	; 0x160a <__fp_pscA>
    16b0:	38 f0       	brcs	.+14     	; 0x16c0 <__mulsf3+0x1c>
    16b2:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__fp_pscB>
    16b6:	20 f0       	brcs	.+8      	; 0x16c0 <__mulsf3+0x1c>
    16b8:	95 23       	and	r25, r21
    16ba:	11 f0       	breq	.+4      	; 0x16c0 <__mulsf3+0x1c>
    16bc:	0c 94 fc 0a 	jmp	0x15f8	; 0x15f8 <__fp_inf>
    16c0:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <__fp_nan>
    16c4:	11 24       	eor	r1, r1
    16c6:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__fp_szero>

000016ca <__mulsf3x>:
    16ca:	0e 94 24 0b 	call	0x1648	; 0x1648 <__fp_split3>
    16ce:	70 f3       	brcs	.-36     	; 0x16ac <__mulsf3+0x8>

000016d0 <__mulsf3_pse>:
    16d0:	95 9f       	mul	r25, r21
    16d2:	c1 f3       	breq	.-16     	; 0x16c4 <__mulsf3+0x20>
    16d4:	95 0f       	add	r25, r21
    16d6:	50 e0       	ldi	r21, 0x00	; 0
    16d8:	55 1f       	adc	r21, r21
    16da:	62 9f       	mul	r22, r18
    16dc:	f0 01       	movw	r30, r0
    16de:	72 9f       	mul	r23, r18
    16e0:	bb 27       	eor	r27, r27
    16e2:	f0 0d       	add	r31, r0
    16e4:	b1 1d       	adc	r27, r1
    16e6:	63 9f       	mul	r22, r19
    16e8:	aa 27       	eor	r26, r26
    16ea:	f0 0d       	add	r31, r0
    16ec:	b1 1d       	adc	r27, r1
    16ee:	aa 1f       	adc	r26, r26
    16f0:	64 9f       	mul	r22, r20
    16f2:	66 27       	eor	r22, r22
    16f4:	b0 0d       	add	r27, r0
    16f6:	a1 1d       	adc	r26, r1
    16f8:	66 1f       	adc	r22, r22
    16fa:	82 9f       	mul	r24, r18
    16fc:	22 27       	eor	r18, r18
    16fe:	b0 0d       	add	r27, r0
    1700:	a1 1d       	adc	r26, r1
    1702:	62 1f       	adc	r22, r18
    1704:	73 9f       	mul	r23, r19
    1706:	b0 0d       	add	r27, r0
    1708:	a1 1d       	adc	r26, r1
    170a:	62 1f       	adc	r22, r18
    170c:	83 9f       	mul	r24, r19
    170e:	a0 0d       	add	r26, r0
    1710:	61 1d       	adc	r22, r1
    1712:	22 1f       	adc	r18, r18
    1714:	74 9f       	mul	r23, r20
    1716:	33 27       	eor	r19, r19
    1718:	a0 0d       	add	r26, r0
    171a:	61 1d       	adc	r22, r1
    171c:	23 1f       	adc	r18, r19
    171e:	84 9f       	mul	r24, r20
    1720:	60 0d       	add	r22, r0
    1722:	21 1d       	adc	r18, r1
    1724:	82 2f       	mov	r24, r18
    1726:	76 2f       	mov	r23, r22
    1728:	6a 2f       	mov	r22, r26
    172a:	11 24       	eor	r1, r1
    172c:	9f 57       	subi	r25, 0x7F	; 127
    172e:	50 40       	sbci	r21, 0x00	; 0
    1730:	9a f0       	brmi	.+38     	; 0x1758 <__mulsf3_pse+0x88>
    1732:	f1 f0       	breq	.+60     	; 0x1770 <__mulsf3_pse+0xa0>
    1734:	88 23       	and	r24, r24
    1736:	4a f0       	brmi	.+18     	; 0x174a <__mulsf3_pse+0x7a>
    1738:	ee 0f       	add	r30, r30
    173a:	ff 1f       	adc	r31, r31
    173c:	bb 1f       	adc	r27, r27
    173e:	66 1f       	adc	r22, r22
    1740:	77 1f       	adc	r23, r23
    1742:	88 1f       	adc	r24, r24
    1744:	91 50       	subi	r25, 0x01	; 1
    1746:	50 40       	sbci	r21, 0x00	; 0
    1748:	a9 f7       	brne	.-22     	; 0x1734 <__mulsf3_pse+0x64>
    174a:	9e 3f       	cpi	r25, 0xFE	; 254
    174c:	51 05       	cpc	r21, r1
    174e:	80 f0       	brcs	.+32     	; 0x1770 <__mulsf3_pse+0xa0>
    1750:	0c 94 fc 0a 	jmp	0x15f8	; 0x15f8 <__fp_inf>
    1754:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__fp_szero>
    1758:	5f 3f       	cpi	r21, 0xFF	; 255
    175a:	e4 f3       	brlt	.-8      	; 0x1754 <__mulsf3_pse+0x84>
    175c:	98 3e       	cpi	r25, 0xE8	; 232
    175e:	d4 f3       	brlt	.-12     	; 0x1754 <__mulsf3_pse+0x84>
    1760:	86 95       	lsr	r24
    1762:	77 95       	ror	r23
    1764:	67 95       	ror	r22
    1766:	b7 95       	ror	r27
    1768:	f7 95       	ror	r31
    176a:	e7 95       	ror	r30
    176c:	9f 5f       	subi	r25, 0xFF	; 255
    176e:	c1 f7       	brne	.-16     	; 0x1760 <__mulsf3_pse+0x90>
    1770:	fe 2b       	or	r31, r30
    1772:	88 0f       	add	r24, r24
    1774:	91 1d       	adc	r25, r1
    1776:	96 95       	lsr	r25
    1778:	87 95       	ror	r24
    177a:	97 f9       	bld	r25, 7
    177c:	08 95       	ret

0000177e <sin>:
    177e:	9f 93       	push	r25
    1780:	0e 94 24 0c 	call	0x1848	; 0x1848 <__fp_rempio2>
    1784:	0f 90       	pop	r0
    1786:	07 fc       	sbrc	r0, 7
    1788:	ee 5f       	subi	r30, 0xFE	; 254
    178a:	0c 94 4d 0c 	jmp	0x189a	; 0x189a <__fp_sinus>
    178e:	19 f4       	brne	.+6      	; 0x1796 <sin+0x18>
    1790:	16 f4       	brtc	.+4      	; 0x1796 <sin+0x18>
    1792:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <__fp_nan>
    1796:	0c 94 0d 0c 	jmp	0x181a	; 0x181a <__fp_mpack>

0000179a <sqrt>:
    179a:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__fp_splitA>
    179e:	b8 f3       	brcs	.-18     	; 0x178e <sin+0x10>
    17a0:	99 23       	and	r25, r25
    17a2:	c9 f3       	breq	.-14     	; 0x1796 <sin+0x18>
    17a4:	b6 f3       	brts	.-20     	; 0x1792 <sin+0x14>
    17a6:	9f 57       	subi	r25, 0x7F	; 127
    17a8:	55 0b       	sbc	r21, r21
    17aa:	87 ff       	sbrs	r24, 7
    17ac:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__fp_norm2>
    17b0:	00 24       	eor	r0, r0
    17b2:	a0 e6       	ldi	r26, 0x60	; 96
    17b4:	40 ea       	ldi	r20, 0xA0	; 160
    17b6:	90 01       	movw	r18, r0
    17b8:	80 58       	subi	r24, 0x80	; 128
    17ba:	56 95       	lsr	r21
    17bc:	97 95       	ror	r25
    17be:	28 f4       	brcc	.+10     	; 0x17ca <sqrt+0x30>
    17c0:	80 5c       	subi	r24, 0xC0	; 192
    17c2:	66 0f       	add	r22, r22
    17c4:	77 1f       	adc	r23, r23
    17c6:	88 1f       	adc	r24, r24
    17c8:	20 f0       	brcs	.+8      	; 0x17d2 <sqrt+0x38>
    17ca:	26 17       	cp	r18, r22
    17cc:	37 07       	cpc	r19, r23
    17ce:	48 07       	cpc	r20, r24
    17d0:	30 f4       	brcc	.+12     	; 0x17de <sqrt+0x44>
    17d2:	62 1b       	sub	r22, r18
    17d4:	73 0b       	sbc	r23, r19
    17d6:	84 0b       	sbc	r24, r20
    17d8:	20 29       	or	r18, r0
    17da:	31 29       	or	r19, r1
    17dc:	4a 2b       	or	r20, r26
    17de:	a6 95       	lsr	r26
    17e0:	17 94       	ror	r1
    17e2:	07 94       	ror	r0
    17e4:	20 25       	eor	r18, r0
    17e6:	31 25       	eor	r19, r1
    17e8:	4a 27       	eor	r20, r26
    17ea:	58 f7       	brcc	.-42     	; 0x17c2 <sqrt+0x28>
    17ec:	66 0f       	add	r22, r22
    17ee:	77 1f       	adc	r23, r23
    17f0:	88 1f       	adc	r24, r24
    17f2:	20 f0       	brcs	.+8      	; 0x17fc <sqrt+0x62>
    17f4:	26 17       	cp	r18, r22
    17f6:	37 07       	cpc	r19, r23
    17f8:	48 07       	cpc	r20, r24
    17fa:	30 f4       	brcc	.+12     	; 0x1808 <sqrt+0x6e>
    17fc:	62 0b       	sbc	r22, r18
    17fe:	73 0b       	sbc	r23, r19
    1800:	84 0b       	sbc	r24, r20
    1802:	20 0d       	add	r18, r0
    1804:	31 1d       	adc	r19, r1
    1806:	41 1d       	adc	r20, r1
    1808:	a0 95       	com	r26
    180a:	81 f7       	brne	.-32     	; 0x17ec <sqrt+0x52>
    180c:	b9 01       	movw	r22, r18
    180e:	84 2f       	mov	r24, r20
    1810:	91 58       	subi	r25, 0x81	; 129
    1812:	88 0f       	add	r24, r24
    1814:	96 95       	lsr	r25
    1816:	87 95       	ror	r24
    1818:	08 95       	ret

0000181a <__fp_mpack>:
    181a:	9f 3f       	cpi	r25, 0xFF	; 255
    181c:	31 f0       	breq	.+12     	; 0x182a <__fp_mpack_finite+0xc>

0000181e <__fp_mpack_finite>:
    181e:	91 50       	subi	r25, 0x01	; 1
    1820:	20 f4       	brcc	.+8      	; 0x182a <__fp_mpack_finite+0xc>
    1822:	87 95       	ror	r24
    1824:	77 95       	ror	r23
    1826:	67 95       	ror	r22
    1828:	b7 95       	ror	r27
    182a:	88 0f       	add	r24, r24
    182c:	91 1d       	adc	r25, r1
    182e:	96 95       	lsr	r25
    1830:	87 95       	ror	r24
    1832:	97 f9       	bld	r25, 7
    1834:	08 95       	ret

00001836 <__fp_norm2>:
    1836:	91 50       	subi	r25, 0x01	; 1
    1838:	50 40       	sbci	r21, 0x00	; 0
    183a:	66 0f       	add	r22, r22
    183c:	77 1f       	adc	r23, r23
    183e:	88 1f       	adc	r24, r24
    1840:	d2 f7       	brpl	.-12     	; 0x1836 <__fp_norm2>
    1842:	08 95       	ret
    1844:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <__fp_nan>

00001848 <__fp_rempio2>:
    1848:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__fp_splitA>
    184c:	d8 f3       	brcs	.-10     	; 0x1844 <__fp_norm2+0xe>
    184e:	e8 94       	clt
    1850:	e0 e0       	ldi	r30, 0x00	; 0
    1852:	bb 27       	eor	r27, r27
    1854:	9f 57       	subi	r25, 0x7F	; 127
    1856:	f0 f0       	brcs	.+60     	; 0x1894 <__fp_rempio2+0x4c>
    1858:	2a ed       	ldi	r18, 0xDA	; 218
    185a:	3f e0       	ldi	r19, 0x0F	; 15
    185c:	49 ec       	ldi	r20, 0xC9	; 201
    185e:	06 c0       	rjmp	.+12     	; 0x186c <__fp_rempio2+0x24>
    1860:	ee 0f       	add	r30, r30
    1862:	bb 0f       	add	r27, r27
    1864:	66 1f       	adc	r22, r22
    1866:	77 1f       	adc	r23, r23
    1868:	88 1f       	adc	r24, r24
    186a:	28 f0       	brcs	.+10     	; 0x1876 <__fp_rempio2+0x2e>
    186c:	b2 3a       	cpi	r27, 0xA2	; 162
    186e:	62 07       	cpc	r22, r18
    1870:	73 07       	cpc	r23, r19
    1872:	84 07       	cpc	r24, r20
    1874:	28 f0       	brcs	.+10     	; 0x1880 <__fp_rempio2+0x38>
    1876:	b2 5a       	subi	r27, 0xA2	; 162
    1878:	62 0b       	sbc	r22, r18
    187a:	73 0b       	sbc	r23, r19
    187c:	84 0b       	sbc	r24, r20
    187e:	e3 95       	inc	r30
    1880:	9a 95       	dec	r25
    1882:	72 f7       	brpl	.-36     	; 0x1860 <__fp_rempio2+0x18>
    1884:	80 38       	cpi	r24, 0x80	; 128
    1886:	30 f4       	brcc	.+12     	; 0x1894 <__fp_rempio2+0x4c>
    1888:	9a 95       	dec	r25
    188a:	bb 0f       	add	r27, r27
    188c:	66 1f       	adc	r22, r22
    188e:	77 1f       	adc	r23, r23
    1890:	88 1f       	adc	r24, r24
    1892:	d2 f7       	brpl	.-12     	; 0x1888 <__fp_rempio2+0x40>
    1894:	90 48       	sbci	r25, 0x80	; 128
    1896:	0c 94 0f 0c 	jmp	0x181e	; 0x181e <__fp_mpack_finite>

0000189a <__fp_sinus>:
    189a:	ef 93       	push	r30
    189c:	e0 ff       	sbrs	r30, 0
    189e:	07 c0       	rjmp	.+14     	; 0x18ae <__fp_sinus+0x14>
    18a0:	a2 ea       	ldi	r26, 0xA2	; 162
    18a2:	2a ed       	ldi	r18, 0xDA	; 218
    18a4:	3f e0       	ldi	r19, 0x0F	; 15
    18a6:	49 ec       	ldi	r20, 0xC9	; 201
    18a8:	5f eb       	ldi	r21, 0xBF	; 191
    18aa:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__addsf3x>
    18ae:	0e 94 13 0b 	call	0x1626	; 0x1626 <__fp_round>
    18b2:	0f 90       	pop	r0
    18b4:	03 94       	inc	r0
    18b6:	01 fc       	sbrc	r0, 1
    18b8:	90 58       	subi	r25, 0x80	; 128
    18ba:	e8 e6       	ldi	r30, 0x68	; 104
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	0c 94 61 0c 	jmp	0x18c2	; 0x18c2 <__fp_powsodd>

000018c2 <__fp_powsodd>:
    18c2:	9f 93       	push	r25
    18c4:	8f 93       	push	r24
    18c6:	7f 93       	push	r23
    18c8:	6f 93       	push	r22
    18ca:	ff 93       	push	r31
    18cc:	ef 93       	push	r30
    18ce:	9b 01       	movw	r18, r22
    18d0:	ac 01       	movw	r20, r24
    18d2:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__mulsf3>
    18d6:	ef 91       	pop	r30
    18d8:	ff 91       	pop	r31
    18da:	0e 94 75 0c 	call	0x18ea	; 0x18ea <__fp_powser>
    18de:	2f 91       	pop	r18
    18e0:	3f 91       	pop	r19
    18e2:	4f 91       	pop	r20
    18e4:	5f 91       	pop	r21
    18e6:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__mulsf3>

000018ea <__fp_powser>:
    18ea:	df 93       	push	r29
    18ec:	cf 93       	push	r28
    18ee:	1f 93       	push	r17
    18f0:	0f 93       	push	r16
    18f2:	ff 92       	push	r15
    18f4:	ef 92       	push	r14
    18f6:	df 92       	push	r13
    18f8:	7b 01       	movw	r14, r22
    18fa:	8c 01       	movw	r16, r24
    18fc:	68 94       	set
    18fe:	06 c0       	rjmp	.+12     	; 0x190c <__fp_powser+0x22>
    1900:	da 2e       	mov	r13, r26
    1902:	ef 01       	movw	r28, r30
    1904:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__mulsf3x>
    1908:	fe 01       	movw	r30, r28
    190a:	e8 94       	clt
    190c:	a5 91       	lpm	r26, Z+
    190e:	25 91       	lpm	r18, Z+
    1910:	35 91       	lpm	r19, Z+
    1912:	45 91       	lpm	r20, Z+
    1914:	55 91       	lpm	r21, Z+
    1916:	a6 f3       	brts	.-24     	; 0x1900 <__fp_powser+0x16>
    1918:	ef 01       	movw	r28, r30
    191a:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__addsf3x>
    191e:	fe 01       	movw	r30, r28
    1920:	97 01       	movw	r18, r14
    1922:	a8 01       	movw	r20, r16
    1924:	da 94       	dec	r13
    1926:	69 f7       	brne	.-38     	; 0x1902 <__fp_powser+0x18>
    1928:	df 90       	pop	r13
    192a:	ef 90       	pop	r14
    192c:	ff 90       	pop	r15
    192e:	0f 91       	pop	r16
    1930:	1f 91       	pop	r17
    1932:	cf 91       	pop	r28
    1934:	df 91       	pop	r29
    1936:	08 95       	ret

00001938 <_ZN15OrangutanAnalog7setModeEh.part.0>:
    1938:	ec e7       	ldi	r30, 0x7C	; 124
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	8f 7d       	andi	r24, 0xDF	; 223
    1940:	80 83       	st	Z, r24
    1942:	08 95       	ret

00001944 <_ZN15OrangutanAnalog7setModeEh>:
    1944:	81 11       	cpse	r24, r1
    1946:	03 c0       	rjmp	.+6      	; 0x194e <_ZN15OrangutanAnalog7setModeEh+0xa>
    1948:	0e 94 9c 0c 	call	0x1938	; 0x1938 <_ZN15OrangutanAnalog7setModeEh.part.0>
    194c:	08 95       	ret
    194e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1952:	80 62       	ori	r24, 0x20	; 32
    1954:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1958:	08 95       	ret

0000195a <_ZN15OrangutanAnalog7getModeEv>:
    195a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    195e:	85 fb       	bst	r24, 5
    1960:	88 27       	eor	r24, r24
    1962:	80 f9       	bld	r24, 0
    1964:	08 95       	ret

00001966 <_ZN15OrangutanAnalog16conversionResultEv>:
    1966:	0e 94 ad 0c 	call	0x195a	; 0x195a <_ZN15OrangutanAnalog7getModeEv>
    196a:	88 23       	and	r24, r24
    196c:	21 f0       	breq	.+8      	; 0x1976 <_ZN15OrangutanAnalog16conversionResultEv+0x10>
    196e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	08 95       	ret
    1976:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    197a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    197e:	08 95       	ret

00001980 <_ZN15OrangutanAnalog15startConversionEhh>:
    1980:	80 32       	cpi	r24, 0x20	; 32
    1982:	a0 f4       	brcc	.+40     	; 0x19ac <_ZN15OrangutanAnalog15startConversionEhh+0x2c>
    1984:	97 e8       	ldi	r25, 0x87	; 135
    1986:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    198a:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    198e:	66 23       	and	r22, r22
    1990:	11 f0       	breq	.+4      	; 0x1996 <_ZN15OrangutanAnalog15startConversionEhh+0x16>
    1992:	90 6c       	ori	r25, 0xC0	; 192
    1994:	02 c0       	rjmp	.+4      	; 0x199a <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
    1996:	9f 77       	andi	r25, 0x7F	; 127
    1998:	90 64       	ori	r25, 0x40	; 64
    199a:	90 7e       	andi	r25, 0xE0	; 224
    199c:	98 2b       	or	r25, r24
    199e:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    19a2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    19a6:	80 64       	ori	r24, 0x40	; 64
    19a8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    19ac:	08 95       	ret

000019ae <_ZN15OrangutanAnalog4readEh>:
    19ae:	60 e0       	ldi	r22, 0x00	; 0
    19b0:	0e 94 c0 0c 	call	0x1980	; 0x1980 <_ZN15OrangutanAnalog15startConversionEhh>
    19b4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    19b8:	86 fd       	sbrc	r24, 6
    19ba:	fc cf       	rjmp	.-8      	; 0x19b4 <_ZN15OrangutanAnalog4readEh+0x6>
    19bc:	0e 94 b3 0c 	call	0x1966	; 0x1966 <_ZN15OrangutanAnalog16conversionResultEv>
    19c0:	08 95       	ret

000019c2 <analog_read>:
    19c2:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <_ZN15OrangutanAnalog4readEh>
    19c6:	08 95       	ret

000019c8 <_ZN15OrangutanAnalog11readAverageEhj>:
    19c8:	a0 e0       	ldi	r26, 0x00	; 0
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	ea ee       	ldi	r30, 0xEA	; 234
    19ce:	fc e0       	ldi	r31, 0x0C	; 12
    19d0:	0c 94 60 1a 	jmp	0x34c0	; 0x34c0 <__prologue_saves__+0x14>
    19d4:	eb 01       	movw	r28, r22
    19d6:	60 e0       	ldi	r22, 0x00	; 0
    19d8:	0e 94 c0 0c 	call	0x1980	; 0x1980 <_ZN15OrangutanAnalog15startConversionEhh>
    19dc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    19e0:	86 fd       	sbrc	r24, 6
    19e2:	fc cf       	rjmp	.-8      	; 0x19dc <_ZN15OrangutanAnalog11readAverageEhj+0x14>
    19e4:	8e 01       	movw	r16, r28
    19e6:	c1 2c       	mov	r12, r1
    19e8:	d1 2c       	mov	r13, r1
    19ea:	76 01       	movw	r14, r12
    19ec:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    19f0:	80 64       	ori	r24, 0x40	; 64
    19f2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    19f6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    19fa:	86 fd       	sbrc	r24, 6
    19fc:	fc cf       	rjmp	.-8      	; 0x19f6 <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
    19fe:	0e 94 b3 0c 	call	0x1966	; 0x1966 <_ZN15OrangutanAnalog16conversionResultEv>
    1a02:	c8 0e       	add	r12, r24
    1a04:	d9 1e       	adc	r13, r25
    1a06:	e1 1c       	adc	r14, r1
    1a08:	f1 1c       	adc	r15, r1
    1a0a:	01 50       	subi	r16, 0x01	; 1
    1a0c:	11 09       	sbc	r17, r1
    1a0e:	01 15       	cp	r16, r1
    1a10:	11 05       	cpc	r17, r1
    1a12:	61 f7       	brne	.-40     	; 0x19ec <_ZN15OrangutanAnalog11readAverageEhj+0x24>
    1a14:	ce 01       	movw	r24, r28
    1a16:	96 95       	lsr	r25
    1a18:	87 95       	ror	r24
    1a1a:	c0 34       	cpi	r28, 0x40	; 64
    1a1c:	d1 05       	cpc	r29, r1
    1a1e:	38 f4       	brcc	.+14     	; 0x1a2e <_ZN15OrangutanAnalog11readAverageEhj+0x66>
    1a20:	8c 0d       	add	r24, r12
    1a22:	9d 1d       	adc	r25, r13
    1a24:	be 01       	movw	r22, r28
    1a26:	0e 94 cb 19 	call	0x3396	; 0x3396 <__udivmodhi4>
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	0e c0       	rjmp	.+28     	; 0x1a4a <_ZN15OrangutanAnalog11readAverageEhj+0x82>
    1a2e:	a7 01       	movw	r20, r14
    1a30:	96 01       	movw	r18, r12
    1a32:	28 0f       	add	r18, r24
    1a34:	39 1f       	adc	r19, r25
    1a36:	41 1d       	adc	r20, r1
    1a38:	51 1d       	adc	r21, r1
    1a3a:	ca 01       	movw	r24, r20
    1a3c:	b9 01       	movw	r22, r18
    1a3e:	9e 01       	movw	r18, r28
    1a40:	40 e0       	ldi	r20, 0x00	; 0
    1a42:	50 e0       	ldi	r21, 0x00	; 0
    1a44:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__udivmodsi4>
    1a48:	c9 01       	movw	r24, r18
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    1a4e:	e8 e0       	ldi	r30, 0x08	; 8
    1a50:	0c 94 7c 1a 	jmp	0x34f8	; 0x34f8 <__epilogue_restores__+0x14>

00001a54 <_ZN15OrangutanAnalog12toMillivoltsEj>:
    1a54:	cf 92       	push	r12
    1a56:	df 92       	push	r13
    1a58:	ef 92       	push	r14
    1a5a:	ff 92       	push	r15
    1a5c:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
    1a60:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
    1a64:	9c 01       	movw	r18, r24
    1a66:	0e 94 34 1a 	call	0x3468	; 0x3468 <__umulhisi3>
    1a6a:	6b 01       	movw	r12, r22
    1a6c:	7c 01       	movw	r14, r24
    1a6e:	0e 94 ad 0c 	call	0x195a	; 0x195a <_ZN15OrangutanAnalog7getModeEv>
    1a72:	88 23       	and	r24, r24
    1a74:	59 f0       	breq	.+22     	; 0x1a8c <_ZN15OrangutanAnalog12toMillivoltsEj+0x38>
    1a76:	c7 01       	movw	r24, r14
    1a78:	b6 01       	movw	r22, r12
    1a7a:	61 58       	subi	r22, 0x81	; 129
    1a7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a80:	9f 4f       	sbci	r25, 0xFF	; 255
    1a82:	2f ef       	ldi	r18, 0xFF	; 255
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	40 e0       	ldi	r20, 0x00	; 0
    1a88:	50 e0       	ldi	r21, 0x00	; 0
    1a8a:	0a c0       	rjmp	.+20     	; 0x1aa0 <_ZN15OrangutanAnalog12toMillivoltsEj+0x4c>
    1a8c:	c7 01       	movw	r24, r14
    1a8e:	b6 01       	movw	r22, r12
    1a90:	61 50       	subi	r22, 0x01	; 1
    1a92:	7e 4f       	sbci	r23, 0xFE	; 254
    1a94:	8f 4f       	sbci	r24, 0xFF	; 255
    1a96:	9f 4f       	sbci	r25, 0xFF	; 255
    1a98:	2f ef       	ldi	r18, 0xFF	; 255
    1a9a:	33 e0       	ldi	r19, 0x03	; 3
    1a9c:	40 e0       	ldi	r20, 0x00	; 0
    1a9e:	50 e0       	ldi	r21, 0x00	; 0
    1aa0:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__udivmodsi4>
    1aa4:	c9 01       	movw	r24, r18
    1aa6:	ff 90       	pop	r15
    1aa8:	ef 90       	pop	r14
    1aaa:	df 90       	pop	r13
    1aac:	cf 90       	pop	r12
    1aae:	08 95       	ret

00001ab0 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
    1ab0:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <_ZN15OrangutanAnalog11readAverageEhj>
    1ab4:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <_ZN15OrangutanAnalog12toMillivoltsEj>
    1ab8:	08 95       	ret

00001aba <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
    1aba:	1f 93       	push	r17
    1abc:	cf 93       	push	r28
    1abe:	df 93       	push	r29
    1ac0:	0e 94 ad 0c 	call	0x195a	; 0x195a <_ZN15OrangutanAnalog7getModeEv>
    1ac4:	18 2f       	mov	r17, r24
    1ac6:	0e 94 9c 0c 	call	0x1938	; 0x1938 <_ZN15OrangutanAnalog7setModeEh.part.0>
    1aca:	6a e0       	ldi	r22, 0x0A	; 10
    1acc:	70 e0       	ldi	r23, 0x00	; 0
    1ace:	86 e0       	ldi	r24, 0x06	; 6
    1ad0:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
    1ad4:	ec 01       	movw	r28, r24
    1ad6:	81 2f       	mov	r24, r17
    1ad8:	0e 94 a2 0c 	call	0x1944	; 0x1944 <_ZN15OrangutanAnalog7setModeEh>
    1adc:	ce 01       	movw	r24, r28
    1ade:	88 0f       	add	r24, r24
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	8c 0f       	add	r24, r28
    1ae4:	9d 1f       	adc	r25, r29
    1ae6:	01 96       	adiw	r24, 0x01	; 1
    1ae8:	96 95       	lsr	r25
    1aea:	87 95       	ror	r24
    1aec:	df 91       	pop	r29
    1aee:	cf 91       	pop	r28
    1af0:	1f 91       	pop	r17
    1af2:	08 95       	ret

00001af4 <read_battery_millivolts_3pi>:
    1af4:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
    1af8:	08 95       	ret

00001afa <_ZL16currentCharacterv>:
    1afa:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <_ZL17use_program_space>
    1afe:	e0 91 86 01 	lds	r30, 0x0186	; 0x800186 <__data_end>
    1b02:	f0 91 87 01 	lds	r31, 0x0187	; 0x800187 <__data_end+0x1>
    1b06:	99 23       	and	r25, r25
    1b08:	11 f0       	breq	.+4      	; 0x1b0e <_ZL16currentCharacterv+0x14>
    1b0a:	84 91       	lpm	r24, Z
    1b0c:	01 c0       	rjmp	.+2      	; 0x1b10 <_ZL16currentCharacterv+0x16>
    1b0e:	80 81       	ld	r24, Z
    1b10:	2f eb       	ldi	r18, 0xBF	; 191
    1b12:	28 0f       	add	r18, r24
    1b14:	2a 31       	cpi	r18, 0x1A	; 26
    1b16:	10 f4       	brcc	.+4      	; 0x1b1c <_ZL16currentCharacterv+0x22>
    1b18:	80 5e       	subi	r24, 0xE0	; 224
    1b1a:	08 95       	ret
    1b1c:	80 32       	cpi	r24, 0x20	; 32
    1b1e:	49 f4       	brne	.+18     	; 0x1b32 <_ZL16currentCharacterv+0x38>
    1b20:	9f 01       	movw	r18, r30
    1b22:	2f 5f       	subi	r18, 0xFF	; 255
    1b24:	3f 4f       	sbci	r19, 0xFF	; 255
    1b26:	30 93 87 01 	sts	0x0187, r19	; 0x800187 <__data_end+0x1>
    1b2a:	20 93 86 01 	sts	0x0186, r18	; 0x800186 <__data_end>
    1b2e:	ef 2b       	or	r30, r31
    1b30:	31 f7       	brne	.-52     	; 0x1afe <_ZL16currentCharacterv+0x4>
    1b32:	08 95       	ret

00001b34 <_ZL9getNumberv>:
    1b34:	1f 93       	push	r17
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
    1b3a:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <_ZL16currentCharacterv>
    1b3e:	c0 e0       	ldi	r28, 0x00	; 0
    1b40:	d0 e0       	ldi	r29, 0x00	; 0
    1b42:	1a e0       	ldi	r17, 0x0A	; 10
    1b44:	90 ed       	ldi	r25, 0xD0	; 208
    1b46:	98 0f       	add	r25, r24
    1b48:	9a 30       	cpi	r25, 0x0A	; 10
    1b4a:	b8 f4       	brcc	.+46     	; 0x1b7a <_ZL9getNumberv+0x46>
    1b4c:	9e 01       	movw	r18, r28
    1b4e:	12 9f       	mul	r17, r18
    1b50:	e0 01       	movw	r28, r0
    1b52:	13 9f       	mul	r17, r19
    1b54:	d0 0d       	add	r29, r0
    1b56:	11 24       	eor	r1, r1
    1b58:	c8 0f       	add	r28, r24
    1b5a:	d1 1d       	adc	r29, r1
    1b5c:	87 fd       	sbrc	r24, 7
    1b5e:	da 95       	dec	r29
    1b60:	e0 97       	sbiw	r28, 0x30	; 48
    1b62:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <__data_end>
    1b66:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <__data_end+0x1>
    1b6a:	01 96       	adiw	r24, 0x01	; 1
    1b6c:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <__data_end+0x1>
    1b70:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <__data_end>
    1b74:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <_ZL16currentCharacterv>
    1b78:	e5 cf       	rjmp	.-54     	; 0x1b44 <_ZL9getNumberv+0x10>
    1b7a:	ce 01       	movw	r24, r28
    1b7c:	df 91       	pop	r29
    1b7e:	cf 91       	pop	r28
    1b80:	1f 91       	pop	r17
    1b82:	08 95       	ret

00001b84 <_ZN15OrangutanBuzzer5init2Ev>:
    1b84:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1b88:	83 e2       	ldi	r24, 0x23	; 35
    1b8a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1b8e:	81 e1       	ldi	r24, 0x11	; 17
    1b90:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1b94:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    1b98:	80 e1       	ldi	r24, 0x10	; 16
    1b9a:	97 e2       	ldi	r25, 0x27	; 39
    1b9c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1ba0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1ba4:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1ba8:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1bac:	22 9a       	sbi	0x04, 2	; 4
    1bae:	78 94       	sei
    1bb0:	08 95       	ret

00001bb2 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
    1bb2:	8f 92       	push	r8
    1bb4:	9f 92       	push	r9
    1bb6:	af 92       	push	r10
    1bb8:	bf 92       	push	r11
    1bba:	df 92       	push	r13
    1bbc:	ef 92       	push	r14
    1bbe:	ff 92       	push	r15
    1bc0:	0f 93       	push	r16
    1bc2:	1f 93       	push	r17
    1bc4:	cf 93       	push	r28
    1bc6:	df 93       	push	r29
    1bc8:	5c 01       	movw	r10, r24
    1bca:	8b 01       	movw	r16, r22
    1bcc:	d4 2e       	mov	r13, r20
    1bce:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <buzzerInitialized>
    1bd2:	81 11       	cpse	r24, r1
    1bd4:	05 c0       	rjmp	.+10     	; 0x1be0 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <buzzerInitialized>
    1bdc:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <_ZN15OrangutanBuzzer5init2Ev>
    1be0:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <buzzerFinished>
    1be4:	b7 fe       	sbrs	r11, 7
    1be6:	05 c0       	rjmp	.+10     	; 0x1bf2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
    1be8:	e8 94       	clt
    1bea:	b7 f8       	bld	r11, 7
    1bec:	2a e0       	ldi	r18, 0x0A	; 10
    1bee:	f2 2e       	mov	r15, r18
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
    1bf2:	ff 24       	eor	r15, r15
    1bf4:	f3 94       	inc	r15
    1bf6:	e0 90 81 00 	lds	r14, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1bfa:	2e 2d       	mov	r18, r14
    1bfc:	28 7f       	andi	r18, 0xF8	; 248
    1bfe:	e2 2e       	mov	r14, r18
    1c00:	48 ec       	ldi	r20, 0xC8	; 200
    1c02:	f4 9e       	mul	r15, r20
    1c04:	c0 01       	movw	r24, r0
    1c06:	11 24       	eor	r1, r1
    1c08:	8a 15       	cp	r24, r10
    1c0a:	9b 05       	cpc	r25, r11
    1c0c:	e0 f4       	brcc	.+56     	; 0x1c46 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
    1c0e:	e5 01       	movw	r28, r10
    1c10:	51 e1       	ldi	r21, 0x11	; 17
    1c12:	a5 16       	cp	r10, r21
    1c14:	57 e2       	ldi	r21, 0x27	; 39
    1c16:	b5 06       	cpc	r11, r21
    1c18:	10 f0       	brcs	.+4      	; 0x1c1e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
    1c1a:	c0 e1       	ldi	r28, 0x10	; 16
    1c1c:	d7 e2       	ldi	r29, 0x27	; 39
    1c1e:	be 01       	movw	r22, r28
    1c20:	76 95       	lsr	r23
    1c22:	67 95       	ror	r22
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	60 58       	subi	r22, 0x80	; 128
    1c2a:	79 46       	sbci	r23, 0x69	; 105
    1c2c:	87 46       	sbci	r24, 0x67	; 103
    1c2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c30:	4e 01       	movw	r8, r28
    1c32:	a1 2c       	mov	r10, r1
    1c34:	b1 2c       	mov	r11, r1
    1c36:	a5 01       	movw	r20, r10
    1c38:	94 01       	movw	r18, r8
    1c3a:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__udivmodsi4>
    1c3e:	59 01       	movw	r10, r18
    1c40:	8e 2d       	mov	r24, r14
    1c42:	81 60       	ori	r24, 0x01	; 1
    1c44:	24 c0       	rjmp	.+72     	; 0x1c8e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
    1c46:	c8 e2       	ldi	r28, 0x28	; 40
    1c48:	fc 9e       	mul	r15, r28
    1c4a:	c0 2d       	mov	r28, r0
    1c4c:	11 24       	eor	r1, r1
    1c4e:	d0 e0       	ldi	r29, 0x00	; 0
    1c50:	ca 15       	cp	r28, r10
    1c52:	db 05       	cpc	r29, r11
    1c54:	08 f4       	brcc	.+2      	; 0x1c58 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
    1c56:	e5 01       	movw	r28, r10
    1c58:	be 01       	movw	r22, r28
    1c5a:	76 95       	lsr	r23
    1c5c:	67 95       	ror	r22
    1c5e:	9e 01       	movw	r18, r28
    1c60:	40 e0       	ldi	r20, 0x00	; 0
    1c62:	50 e0       	ldi	r21, 0x00	; 0
    1c64:	8a e0       	ldi	r24, 0x0A	; 10
    1c66:	f8 12       	cpse	r15, r24
    1c68:	07 c0       	rjmp	.+14     	; 0x1c78 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	60 5e       	subi	r22, 0xE0	; 224
    1c70:	73 44       	sbci	r23, 0x43	; 67
    1c72:	81 44       	sbci	r24, 0x41	; 65
    1c74:	9f 4f       	sbci	r25, 0xFF	; 255
    1c76:	06 c0       	rjmp	.+12     	; 0x1c84 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	60 53       	subi	r22, 0x30	; 48
    1c7e:	7d 4e       	sbci	r23, 0xED	; 237
    1c80:	8c 4e       	sbci	r24, 0xEC	; 236
    1c82:	9f 4f       	sbci	r25, 0xFF	; 255
    1c84:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__udivmodsi4>
    1c88:	59 01       	movw	r10, r18
    1c8a:	8e 2d       	mov	r24, r14
    1c8c:	82 60       	ori	r24, 0x02	; 2
    1c8e:	88 2e       	mov	r8, r24
    1c90:	2a e0       	ldi	r18, 0x0A	; 10
    1c92:	f2 12       	cpse	r15, r18
    1c94:	07 c0       	rjmp	.+14     	; 0x1ca4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
    1c96:	ce 01       	movw	r24, r28
    1c98:	05 96       	adiw	r24, 0x05	; 5
    1c9a:	6a e0       	ldi	r22, 0x0A	; 10
    1c9c:	70 e0       	ldi	r23, 0x00	; 0
    1c9e:	0e 94 cb 19 	call	0x3396	; 0x3396 <__udivmodhi4>
    1ca2:	eb 01       	movw	r28, r22
    1ca4:	c8 3e       	cpi	r28, 0xE8	; 232
    1ca6:	43 e0       	ldi	r20, 0x03	; 3
    1ca8:	d4 07       	cpc	r29, r20
    1caa:	59 f0       	breq	.+22     	; 0x1cc2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    1cac:	98 01       	movw	r18, r16
    1cae:	de 01       	movw	r26, r28
    1cb0:	0e 94 34 1a 	call	0x3468	; 0x3468 <__umulhisi3>
    1cb4:	28 ee       	ldi	r18, 0xE8	; 232
    1cb6:	33 e0       	ldi	r19, 0x03	; 3
    1cb8:	40 e0       	ldi	r20, 0x00	; 0
    1cba:	50 e0       	ldi	r21, 0x00	; 0
    1cbc:	0e 94 15 1a 	call	0x342a	; 0x342a <__divmodsi4>
    1cc0:	89 01       	movw	r16, r18
    1cc2:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1cc6:	80 92 81 00 	sts	0x0081, r8	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1cca:	b0 92 89 00 	sts	0x0089, r11	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1cce:	a0 92 88 00 	sts	0x0088, r10	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1cd2:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1cd6:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1cda:	4d 2d       	mov	r20, r13
    1cdc:	40 31       	cpi	r20, 0x10	; 16
    1cde:	08 f0       	brcs	.+2      	; 0x1ce2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    1ce0:	4f e0       	ldi	r20, 0x0F	; 15
    1ce2:	80 e1       	ldi	r24, 0x10	; 16
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	84 1b       	sub	r24, r20
    1ce8:	91 09       	sbc	r25, r1
    1cea:	a9 01       	movw	r20, r18
    1cec:	02 c0       	rjmp	.+4      	; 0x1cf2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    1cee:	56 95       	lsr	r21
    1cf0:	47 95       	ror	r20
    1cf2:	8a 95       	dec	r24
    1cf4:	e2 f7       	brpl	.-8      	; 0x1cee <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    1cf6:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1cfa:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1cfe:	10 93 8e 01 	sts	0x018E, r17	; 0x80018e <_ZL13buzzerTimeout+0x1>
    1d02:	00 93 8d 01 	sts	0x018D, r16	; 0x80018d <_ZL13buzzerTimeout>
    1d06:	86 b3       	in	r24, 0x16	; 22
    1d08:	8f ef       	ldi	r24, 0xFF	; 255
    1d0a:	86 bb       	out	0x16, r24	; 22
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    1d12:	df 91       	pop	r29
    1d14:	cf 91       	pop	r28
    1d16:	1f 91       	pop	r17
    1d18:	0f 91       	pop	r16
    1d1a:	ff 90       	pop	r15
    1d1c:	ef 90       	pop	r14
    1d1e:	df 90       	pop	r13
    1d20:	bf 90       	pop	r11
    1d22:	af 90       	pop	r10
    1d24:	9f 90       	pop	r9
    1d26:	8f 90       	pop	r8
    1d28:	08 95       	ret

00001d2a <_ZN15OrangutanBuzzer8playNoteEhjh>:
    1d2a:	cf 93       	push	r28
    1d2c:	df 93       	push	r29
    1d2e:	eb 01       	movw	r28, r22
    1d30:	8f 3f       	cpi	r24, 0xFF	; 255
    1d32:	11 f0       	breq	.+4      	; 0x1d38 <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
    1d34:	41 11       	cpse	r20, r1
    1d36:	05 c0       	rjmp	.+10     	; 0x1d42 <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
    1d38:	40 e0       	ldi	r20, 0x00	; 0
    1d3a:	be 01       	movw	r22, r28
    1d3c:	88 ee       	ldi	r24, 0xE8	; 232
    1d3e:	93 e0       	ldi	r25, 0x03	; 3
    1d40:	43 c0       	rjmp	.+134    	; 0x1dc8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
    1d42:	81 31       	cpi	r24, 0x11	; 17
    1d44:	30 f0       	brcs	.+12     	; 0x1d52 <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
    1d46:	50 ef       	ldi	r21, 0xF0	; 240
    1d48:	58 0f       	add	r21, r24
    1d4a:	50 36       	cpi	r21, 0x60	; 96
    1d4c:	18 f0       	brcs	.+6      	; 0x1d54 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1d4e:	5f e5       	ldi	r21, 0x5F	; 95
    1d50:	01 c0       	rjmp	.+2      	; 0x1d54 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1d52:	50 e0       	ldi	r21, 0x00	; 0
    1d54:	85 2f       	mov	r24, r21
    1d56:	6c e0       	ldi	r22, 0x0C	; 12
    1d58:	0e 94 bf 19 	call	0x337e	; 0x337e <__udivmodqi4>
    1d5c:	68 2f       	mov	r22, r24
    1d5e:	74 ef       	ldi	r23, 0xF4	; 244
    1d60:	76 03       	mulsu	r23, r22
    1d62:	90 01       	movw	r18, r0
    1d64:	11 24       	eor	r1, r1
    1d66:	25 0f       	add	r18, r21
    1d68:	31 1d       	adc	r19, r1
    1d6a:	2c 30       	cpi	r18, 0x0C	; 12
    1d6c:	31 05       	cpc	r19, r1
    1d6e:	40 f4       	brcc	.+16     	; 0x1d80 <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
    1d70:	f9 01       	movw	r30, r18
    1d72:	ee 0f       	add	r30, r30
    1d74:	ff 1f       	adc	r31, r31
    1d76:	ec 5c       	subi	r30, 0xCC	; 204
    1d78:	fe 4f       	sbci	r31, 0xFE	; 254
    1d7a:	20 81       	ld	r18, Z
    1d7c:	31 81       	ldd	r19, Z+1	; 0x01
    1d7e:	02 c0       	rjmp	.+4      	; 0x1d84 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	87 30       	cpi	r24, 0x07	; 7
    1d86:	81 f0       	breq	.+32     	; 0x1da8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
    1d88:	08 2e       	mov	r0, r24
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
    1d8c:	22 0f       	add	r18, r18
    1d8e:	33 1f       	adc	r19, r19
    1d90:	0a 94       	dec	r0
    1d92:	e2 f7       	brpl	.-8      	; 0x1d8c <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    1d94:	82 30       	cpi	r24, 0x02	; 2
    1d96:	28 f0       	brcs	.+10     	; 0x1da2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
    1d98:	c9 01       	movw	r24, r18
    1d9a:	05 96       	adiw	r24, 0x05	; 5
    1d9c:	6a e0       	ldi	r22, 0x0A	; 10
    1d9e:	70 e0       	ldi	r23, 0x00	; 0
    1da0:	0c c0       	rjmp	.+24     	; 0x1dba <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
    1da2:	c9 01       	movw	r24, r18
    1da4:	90 58       	subi	r25, 0x80	; 128
    1da6:	0c c0       	rjmp	.+24     	; 0x1dc0 <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
    1da8:	c9 01       	movw	r24, r18
    1daa:	36 e0       	ldi	r19, 0x06	; 6
    1dac:	88 0f       	add	r24, r24
    1dae:	99 1f       	adc	r25, r25
    1db0:	3a 95       	dec	r19
    1db2:	e1 f7       	brne	.-8      	; 0x1dac <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
    1db4:	02 96       	adiw	r24, 0x02	; 2
    1db6:	65 e0       	ldi	r22, 0x05	; 5
    1db8:	70 e0       	ldi	r23, 0x00	; 0
    1dba:	0e 94 cb 19 	call	0x3396	; 0x3396 <__udivmodhi4>
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	40 31       	cpi	r20, 0x10	; 16
    1dc2:	08 f0       	brcs	.+2      	; 0x1dc6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    1dc4:	4f e0       	ldi	r20, 0x0F	; 15
    1dc6:	be 01       	movw	r22, r28
    1dc8:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1dcc:	df 91       	pop	r29
    1dce:	cf 91       	pop	r28
    1dd0:	08 95       	ret

00001dd2 <_ZL8nextNotev>:
    1dd2:	a2 e0       	ldi	r26, 0x02	; 2
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	ef ee       	ldi	r30, 0xEF	; 239
    1dd8:	fe e0       	ldi	r31, 0x0E	; 14
    1dda:	0c 94 58 1a 	jmp	0x34b0	; 0x34b0 <__prologue_saves__+0x4>
    1dde:	90 90 0a 01 	lds	r9, 0x010A	; 0x80010a <_ZL6octave>
    1de2:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <_ZL8staccato>
    1de6:	88 23       	and	r24, r24
    1de8:	21 f0       	breq	.+8      	; 0x1df2 <_ZL8nextNotev+0x20>
    1dea:	60 91 89 01 	lds	r22, 0x0189	; 0x800189 <_ZL22staccato_rest_duration>
    1dee:	61 11       	cpse	r22, r1
    1df0:	17 c0       	rjmp	.+46     	; 0x1e20 <_ZL8nextNotev+0x4e>
    1df2:	77 24       	eor	r7, r7
    1df4:	73 94       	inc	r7
    1df6:	b0 ec       	ldi	r27, 0xC0	; 192
    1df8:	ab 2e       	mov	r10, r27
    1dfa:	bd e5       	ldi	r27, 0x5D	; 93
    1dfc:	bb 2e       	mov	r11, r27
    1dfe:	1a e0       	ldi	r17, 0x0A	; 10
    1e00:	61 2e       	mov	r6, r17
    1e02:	04 e0       	ldi	r16, 0x04	; 4
    1e04:	80 2e       	mov	r8, r16
    1e06:	80 ed       	ldi	r24, 0xD0	; 208
    1e08:	c8 2e       	mov	r12, r24
    1e0a:	87 e0       	ldi	r24, 0x07	; 7
    1e0c:	d8 2e       	mov	r13, r24
    1e0e:	94 e0       	ldi	r25, 0x04	; 4
    1e10:	e9 2e       	mov	r14, r25
    1e12:	f1 2c       	mov	r15, r1
    1e14:	04 ef       	ldi	r16, 0xF4	; 244
    1e16:	11 e0       	ldi	r17, 0x01	; 1
    1e18:	2f e0       	ldi	r18, 0x0F	; 15
    1e1a:	42 2e       	mov	r4, r18
    1e1c:	51 2c       	mov	r5, r1
    1e1e:	15 c0       	rjmp	.+42     	; 0x1e4a <_ZL8nextNotev+0x78>
    1e20:	70 e0       	ldi	r23, 0x00	; 0
    1e22:	40 e0       	ldi	r20, 0x00	; 0
    1e24:	88 ee       	ldi	r24, 0xE8	; 232
    1e26:	93 e0       	ldi	r25, 0x03	; 3
    1e28:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1e2c:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <_ZL22staccato_rest_duration>
    1e30:	17 c1       	rjmp	.+558    	; 0x2060 <_ZL8nextNotev+0x28e>
    1e32:	86 36       	cpi	r24, 0x66	; 102
    1e34:	d4 f5       	brge	.+116    	; 0x1eaa <_ZL8nextNotev+0xd8>
    1e36:	81 36       	cpi	r24, 0x61	; 97
    1e38:	09 f4       	brne	.+2      	; 0x1e3c <_ZL8nextNotev+0x6a>
    1e3a:	a9 c0       	rjmp	.+338    	; 0x1f8e <_ZL8nextNotev+0x1bc>
    1e3c:	7c f5       	brge	.+94     	; 0x1e9c <_ZL8nextNotev+0xca>
    1e3e:	8c 33       	cpi	r24, 0x3C	; 60
    1e40:	09 f4       	brne	.+2      	; 0x1e44 <_ZL8nextNotev+0x72>
    1e42:	60 c0       	rjmp	.+192    	; 0x1f04 <_ZL8nextNotev+0x132>
    1e44:	8e 33       	cpi	r24, 0x3E	; 62
    1e46:	81 f4       	brne	.+32     	; 0x1e68 <_ZL8nextNotev+0x96>
    1e48:	93 94       	inc	r9
    1e4a:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <_ZL16currentCharacterv>
    1e4e:	20 91 86 01 	lds	r18, 0x0186	; 0x800186 <__data_end>
    1e52:	30 91 87 01 	lds	r19, 0x0187	; 0x800187 <__data_end+0x1>
    1e56:	2f 5f       	subi	r18, 0xFF	; 255
    1e58:	3f 4f       	sbci	r19, 0xFF	; 255
    1e5a:	30 93 87 01 	sts	0x0187, r19	; 0x800187 <__data_end+0x1>
    1e5e:	20 93 86 01 	sts	0x0186, r18	; 0x800186 <__data_end>
    1e62:	85 36       	cpi	r24, 0x65	; 101
    1e64:	31 f7       	brne	.-52     	; 0x1e32 <_ZL8nextNotev+0x60>
    1e66:	52 c0       	rjmp	.+164    	; 0x1f0c <_ZL8nextNotev+0x13a>
    1e68:	81 32       	cpi	r24, 0x21	; 33
    1e6a:	09 f0       	breq	.+2      	; 0x1e6e <_ZL8nextNotev+0x9c>
    1e6c:	8b c0       	rjmp	.+278    	; 0x1f84 <_ZL8nextNotev+0x1b2>
    1e6e:	80 92 0a 01 	sts	0x010A, r8	; 0x80010a <_ZL6octave>
    1e72:	d0 92 09 01 	sts	0x0109, r13	; 0x800109 <_ZL19whole_note_duration+0x1>
    1e76:	c0 92 08 01 	sts	0x0108, r12	; 0x800108 <_ZL19whole_note_duration>
    1e7a:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <_ZL9note_type+0x1>
    1e7e:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <_ZL9note_type>
    1e82:	10 93 05 01 	sts	0x0105, r17	; 0x800105 <_ZL8duration+0x1>
    1e86:	00 93 04 01 	sts	0x0104, r16	; 0x800104 <_ZL8duration>
    1e8a:	50 92 03 01 	sts	0x0103, r5	; 0x800103 <_ZL6volume+0x1>
    1e8e:	40 92 02 01 	sts	0x0102, r4	; 0x800102 <_ZL6volume>
    1e92:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <_ZL8staccato>
    1e96:	a4 e0       	ldi	r26, 0x04	; 4
    1e98:	9a 2e       	mov	r9, r26
    1e9a:	d7 cf       	rjmp	.-82     	; 0x1e4a <_ZL8nextNotev+0x78>
    1e9c:	83 36       	cpi	r24, 0x63	; 99
    1e9e:	a1 f1       	breq	.+104    	; 0x1f08 <_ZL8nextNotev+0x136>
    1ea0:	0c f4       	brge	.+2      	; 0x1ea4 <_ZL8nextNotev+0xd2>
    1ea2:	78 c0       	rjmp	.+240    	; 0x1f94 <_ZL8nextNotev+0x1c2>
    1ea4:	10 e0       	ldi	r17, 0x00	; 0
    1ea6:	82 e0       	ldi	r24, 0x02	; 2
    1ea8:	77 c0       	rjmp	.+238    	; 0x1f98 <_ZL8nextNotev+0x1c6>
    1eaa:	8d 36       	cpi	r24, 0x6D	; 109
    1eac:	c1 f1       	breq	.+112    	; 0x1f1e <_ZL8nextNotev+0x14c>
    1eae:	94 f4       	brge	.+36     	; 0x1ed4 <_ZL8nextNotev+0x102>
    1eb0:	87 36       	cpi	r24, 0x67	; 103
    1eb2:	91 f1       	breq	.+100    	; 0x1f18 <_ZL8nextNotev+0x146>
    1eb4:	74 f1       	brlt	.+92     	; 0x1f12 <_ZL8nextNotev+0x140>
    1eb6:	8c 36       	cpi	r24, 0x6C	; 108
    1eb8:	09 f0       	breq	.+2      	; 0x1ebc <_ZL8nextNotev+0xea>
    1eba:	64 c0       	rjmp	.+200    	; 0x1f84 <_ZL8nextNotev+0x1b2>
    1ebc:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <_ZL9getNumberv>
    1ec0:	bc 01       	movw	r22, r24
    1ec2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL9note_type+0x1>
    1ec6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL9note_type>
    1eca:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    1ece:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    1ed2:	51 c0       	rjmp	.+162    	; 0x1f76 <_ZL8nextNotev+0x1a4>
    1ed4:	82 37       	cpi	r24, 0x72	; 114
    1ed6:	c9 f1       	breq	.+114    	; 0x1f4a <_ZL8nextNotev+0x178>
    1ed8:	4c f4       	brge	.+18     	; 0x1eec <_ZL8nextNotev+0x11a>
    1eda:	8f 36       	cpi	r24, 0x6F	; 111
    1edc:	09 f0       	breq	.+2      	; 0x1ee0 <_ZL8nextNotev+0x10e>
    1ede:	52 c0       	rjmp	.+164    	; 0x1f84 <_ZL8nextNotev+0x1b2>
    1ee0:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <_ZL9getNumberv>
    1ee4:	98 2e       	mov	r9, r24
    1ee6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZL6octave>
    1eea:	af cf       	rjmp	.-162    	; 0x1e4a <_ZL8nextNotev+0x78>
    1eec:	84 37       	cpi	r24, 0x74	; 116
    1eee:	81 f1       	breq	.+96     	; 0x1f50 <_ZL8nextNotev+0x17e>
    1ef0:	86 37       	cpi	r24, 0x76	; 118
    1ef2:	09 f0       	breq	.+2      	; 0x1ef6 <_ZL8nextNotev+0x124>
    1ef4:	47 c0       	rjmp	.+142    	; 0x1f84 <_ZL8nextNotev+0x1b2>
    1ef6:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <_ZL9getNumberv>
    1efa:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_ZL6volume+0x1>
    1efe:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_ZL6volume>
    1f02:	a3 cf       	rjmp	.-186    	; 0x1e4a <_ZL8nextNotev+0x78>
    1f04:	9a 94       	dec	r9
    1f06:	a1 cf       	rjmp	.-190    	; 0x1e4a <_ZL8nextNotev+0x78>
    1f08:	10 e0       	ldi	r17, 0x00	; 0
    1f0a:	20 c0       	rjmp	.+64     	; 0x1f4c <_ZL8nextNotev+0x17a>
    1f0c:	10 e0       	ldi	r17, 0x00	; 0
    1f0e:	84 e0       	ldi	r24, 0x04	; 4
    1f10:	43 c0       	rjmp	.+134    	; 0x1f98 <_ZL8nextNotev+0x1c6>
    1f12:	10 e0       	ldi	r17, 0x00	; 0
    1f14:	85 e0       	ldi	r24, 0x05	; 5
    1f16:	40 c0       	rjmp	.+128    	; 0x1f98 <_ZL8nextNotev+0x1c6>
    1f18:	10 e0       	ldi	r17, 0x00	; 0
    1f1a:	87 e0       	ldi	r24, 0x07	; 7
    1f1c:	3d c0       	rjmp	.+122    	; 0x1f98 <_ZL8nextNotev+0x1c6>
    1f1e:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <_ZL16currentCharacterv>
    1f22:	8c 36       	cpi	r24, 0x6C	; 108
    1f24:	19 f4       	brne	.+6      	; 0x1f2c <_ZL8nextNotev+0x15a>
    1f26:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <_ZL8staccato>
    1f2a:	04 c0       	rjmp	.+8      	; 0x1f34 <_ZL8nextNotev+0x162>
    1f2c:	70 92 8a 01 	sts	0x018A, r7	; 0x80018a <_ZL8staccato>
    1f30:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <_ZL22staccato_rest_duration>
    1f34:	20 91 86 01 	lds	r18, 0x0186	; 0x800186 <__data_end>
    1f38:	30 91 87 01 	lds	r19, 0x0187	; 0x800187 <__data_end+0x1>
    1f3c:	2f 5f       	subi	r18, 0xFF	; 255
    1f3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f40:	30 93 87 01 	sts	0x0187, r19	; 0x800187 <__data_end+0x1>
    1f44:	20 93 86 01 	sts	0x0186, r18	; 0x800186 <__data_end>
    1f48:	80 cf       	rjmp	.-256    	; 0x1e4a <_ZL8nextNotev+0x78>
    1f4a:	11 e0       	ldi	r17, 0x01	; 1
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	24 c0       	rjmp	.+72     	; 0x1f98 <_ZL8nextNotev+0x1c6>
    1f50:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <_ZL9getNumberv>
    1f54:	bc 01       	movw	r22, r24
    1f56:	c5 01       	movw	r24, r10
    1f58:	0e 94 cb 19 	call	0x3396	; 0x3396 <__udivmodhi4>
    1f5c:	66 9e       	mul	r6, r22
    1f5e:	c0 01       	movw	r24, r0
    1f60:	67 9e       	mul	r6, r23
    1f62:	90 0d       	add	r25, r0
    1f64:	11 24       	eor	r1, r1
    1f66:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZL19whole_note_duration+0x1>
    1f6a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL19whole_note_duration>
    1f6e:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <_ZL9note_type>
    1f72:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <_ZL9note_type+0x1>
    1f76:	0e 94 cb 19 	call	0x3396	; 0x3396 <__udivmodhi4>
    1f7a:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_ZL8duration+0x1>
    1f7e:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_ZL8duration>
    1f82:	63 cf       	rjmp	.-314    	; 0x1e4a <_ZL8nextNotev+0x78>
    1f84:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <__data_end+0x1>
    1f88:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <__data_end>
    1f8c:	69 c0       	rjmp	.+210    	; 0x2060 <_ZL8nextNotev+0x28e>
    1f8e:	10 e0       	ldi	r17, 0x00	; 0
    1f90:	89 e0       	ldi	r24, 0x09	; 9
    1f92:	02 c0       	rjmp	.+4      	; 0x1f98 <_ZL8nextNotev+0x1c6>
    1f94:	10 e0       	ldi	r17, 0x00	; 0
    1f96:	8b e0       	ldi	r24, 0x0B	; 11
    1f98:	08 2f       	mov	r16, r24
    1f9a:	9c e0       	ldi	r25, 0x0C	; 12
    1f9c:	99 9e       	mul	r9, r25
    1f9e:	00 0d       	add	r16, r0
    1fa0:	11 24       	eor	r1, r1
    1fa2:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <_ZL16currentCharacterv>
    1fa6:	98 2f       	mov	r25, r24
    1fa8:	97 7f       	andi	r25, 0xF7	; 247
    1faa:	93 32       	cpi	r25, 0x23	; 35
    1fac:	61 f4       	brne	.+24     	; 0x1fc6 <_ZL8nextNotev+0x1f4>
    1fae:	20 91 86 01 	lds	r18, 0x0186	; 0x800186 <__data_end>
    1fb2:	30 91 87 01 	lds	r19, 0x0187	; 0x800187 <__data_end+0x1>
    1fb6:	2f 5f       	subi	r18, 0xFF	; 255
    1fb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1fba:	30 93 87 01 	sts	0x0187, r19	; 0x800187 <__data_end+0x1>
    1fbe:	20 93 86 01 	sts	0x0186, r18	; 0x800186 <__data_end>
    1fc2:	0f 5f       	subi	r16, 0xFF	; 255
    1fc4:	ee cf       	rjmp	.-36     	; 0x1fa2 <_ZL8nextNotev+0x1d0>
    1fc6:	8d 32       	cpi	r24, 0x2D	; 45
    1fc8:	71 f4       	brne	.+28     	; 0x1fe6 <_ZL8nextNotev+0x214>
    1fca:	20 91 86 01 	lds	r18, 0x0186	; 0x800186 <__data_end>
    1fce:	30 91 87 01 	lds	r19, 0x0187	; 0x800187 <__data_end+0x1>
    1fd2:	2f 5f       	subi	r18, 0xFF	; 255
    1fd4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd6:	30 93 87 01 	sts	0x0187, r19	; 0x800187 <__data_end+0x1>
    1fda:	20 93 86 01 	sts	0x0186, r18	; 0x800186 <__data_end>
    1fde:	01 50       	subi	r16, 0x01	; 1
    1fe0:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <_ZL16currentCharacterv>
    1fe4:	f0 cf       	rjmp	.-32     	; 0x1fc6 <_ZL8nextNotev+0x1f4>
    1fe6:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_ZL8duration>
    1fea:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_ZL8duration+0x1>
    1fee:	81 53       	subi	r24, 0x31	; 49
    1ff0:	88 30       	cpi	r24, 0x08	; 8
    1ff2:	50 f4       	brcc	.+20     	; 0x2008 <_ZL8nextNotev+0x236>
    1ff4:	e0 90 08 01 	lds	r14, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    1ff8:	f0 90 09 01 	lds	r15, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    1ffc:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <_ZL9getNumberv>
    2000:	bc 01       	movw	r22, r24
    2002:	c7 01       	movw	r24, r14
    2004:	0e 94 cb 19 	call	0x3396	; 0x3396 <__udivmodhi4>
    2008:	7b 01       	movw	r14, r22
    200a:	f6 94       	lsr	r15
    200c:	e7 94       	ror	r14
    200e:	69 83       	std	Y+1, r22	; 0x01
    2010:	7a 83       	std	Y+2, r23	; 0x02
    2012:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <_ZL16currentCharacterv>
    2016:	69 81       	ldd	r22, Y+1	; 0x01
    2018:	7a 81       	ldd	r23, Y+2	; 0x02
    201a:	8e 32       	cpi	r24, 0x2E	; 46
    201c:	69 f4       	brne	.+26     	; 0x2038 <_ZL8nextNotev+0x266>
    201e:	20 91 86 01 	lds	r18, 0x0186	; 0x800186 <__data_end>
    2022:	30 91 87 01 	lds	r19, 0x0187	; 0x800187 <__data_end+0x1>
    2026:	2f 5f       	subi	r18, 0xFF	; 255
    2028:	3f 4f       	sbci	r19, 0xFF	; 255
    202a:	30 93 87 01 	sts	0x0187, r19	; 0x800187 <__data_end+0x1>
    202e:	20 93 86 01 	sts	0x0186, r18	; 0x800186 <__data_end>
    2032:	6e 0d       	add	r22, r14
    2034:	7f 1d       	adc	r23, r15
    2036:	e9 cf       	rjmp	.-46     	; 0x200a <_ZL8nextNotev+0x238>
    2038:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <_ZL8staccato>
    203c:	88 23       	and	r24, r24
    203e:	39 f0       	breq	.+14     	; 0x204e <_ZL8nextNotev+0x27c>
    2040:	9b 01       	movw	r18, r22
    2042:	36 95       	lsr	r19
    2044:	27 95       	ror	r18
    2046:	20 93 89 01 	sts	0x0189, r18	; 0x800189 <_ZL22staccato_rest_duration>
    204a:	62 1b       	sub	r22, r18
    204c:	71 09       	sbc	r23, r1
    204e:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <_ZL6volume>
    2052:	11 23       	and	r17, r17
    2054:	11 f0       	breq	.+4      	; 0x205a <_ZL8nextNotev+0x288>
    2056:	8f ef       	ldi	r24, 0xFF	; 255
    2058:	01 c0       	rjmp	.+2      	; 0x205c <_ZL8nextNotev+0x28a>
    205a:	80 2f       	mov	r24, r16
    205c:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <_ZN15OrangutanBuzzer8playNoteEhjh>
    2060:	22 96       	adiw	r28, 0x02	; 2
    2062:	e0 e1       	ldi	r30, 0x10	; 16
    2064:	0c 94 74 1a 	jmp	0x34e8	; 0x34e8 <__epilogue_restores__+0x4>

00002068 <__vector_13>:
    2068:	1f 92       	push	r1
    206a:	0f 92       	push	r0
    206c:	0f b6       	in	r0, 0x3f	; 63
    206e:	0f 92       	push	r0
    2070:	11 24       	eor	r1, r1
    2072:	2f 93       	push	r18
    2074:	3f 93       	push	r19
    2076:	4f 93       	push	r20
    2078:	5f 93       	push	r21
    207a:	6f 93       	push	r22
    207c:	7f 93       	push	r23
    207e:	8f 93       	push	r24
    2080:	9f 93       	push	r25
    2082:	af 93       	push	r26
    2084:	bf 93       	push	r27
    2086:	ef 93       	push	r30
    2088:	ff 93       	push	r31
    208a:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <_ZL13buzzerTimeout>
    208e:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <_ZL13buzzerTimeout+0x1>
    2092:	9c 01       	movw	r18, r24
    2094:	21 50       	subi	r18, 0x01	; 1
    2096:	31 09       	sbc	r19, r1
    2098:	30 93 8e 01 	sts	0x018E, r19	; 0x80018e <_ZL13buzzerTimeout+0x1>
    209c:	20 93 8d 01 	sts	0x018D, r18	; 0x80018d <_ZL13buzzerTimeout>
    20a0:	89 2b       	or	r24, r25
    20a2:	11 f5       	brne	.+68     	; 0x20e8 <__vector_13+0x80>
    20a4:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    20a8:	78 94       	sei
    20aa:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    20ae:	88 7f       	andi	r24, 0xF8	; 248
    20b0:	81 60       	ori	r24, 0x01	; 1
    20b2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    20b6:	80 e1       	ldi	r24, 0x10	; 16
    20b8:	97 e2       	ldi	r25, 0x27	; 39
    20ba:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    20be:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    20c2:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    20c6:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <buzzerFinished>
    20d0:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <__data_end>
    20d4:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <__data_end+0x1>
    20d8:	89 2b       	or	r24, r25
    20da:	31 f0       	breq	.+12     	; 0x20e8 <__vector_13+0x80>
    20dc:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <_ZL17play_mode_setting>
    20e0:	81 11       	cpse	r24, r1
    20e2:	02 c0       	rjmp	.+4      	; 0x20e8 <__vector_13+0x80>
    20e4:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <_ZL8nextNotev>
    20e8:	ff 91       	pop	r31
    20ea:	ef 91       	pop	r30
    20ec:	bf 91       	pop	r27
    20ee:	af 91       	pop	r26
    20f0:	9f 91       	pop	r25
    20f2:	8f 91       	pop	r24
    20f4:	7f 91       	pop	r23
    20f6:	6f 91       	pop	r22
    20f8:	5f 91       	pop	r21
    20fa:	4f 91       	pop	r20
    20fc:	3f 91       	pop	r19
    20fe:	2f 91       	pop	r18
    2100:	0f 90       	pop	r0
    2102:	0f be       	out	0x3f, r0	; 63
    2104:	0f 90       	pop	r0
    2106:	1f 90       	pop	r1
    2108:	18 95       	reti

0000210a <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    210a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    210e:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <__data_end+0x1>
    2112:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <__data_end>
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <_ZL17use_program_space>
    211c:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <_ZL22staccato_rest_duration>
    2120:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <_ZL8nextNotev>
    2124:	08 95       	ret

00002126 <play_from_program_space>:
    2126:	0e 94 85 10 	call	0x210a	; 0x210a <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    212a:	08 95       	ret

0000212c <delay_us.constprop.0>:
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	6f 93       	push	r22
    2132:	64 e0       	ldi	r22, 0x04	; 4
    2134:	6a 95       	dec	r22
    2136:	f1 f7       	brne	.-4      	; 0x2134 <delay_us.constprop.0+0x8>
    2138:	6f 91       	pop	r22
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	c9 f7       	brne	.-14     	; 0x2130 <delay_us.constprop.0+0x4>
    213e:	08 95       	ret

00002140 <_ZN12OrangutanLCD8busyWaitEv>:
    2140:	0f 93       	push	r16
    2142:	1f 93       	push	r17
    2144:	cf 93       	push	r28
    2146:	df 93       	push	r29
    2148:	1a b1       	in	r17, 0x0a	; 10
    214a:	57 98       	cbi	0x0a, 7	; 10
    214c:	5a 98       	cbi	0x0b, 2	; 11
    214e:	28 9a       	sbi	0x05, 0	; 5
    2150:	c0 e0       	ldi	r28, 0x00	; 0
    2152:	d0 e0       	ldi	r29, 0x00	; 0
    2154:	0e 94 96 10 	call	0x212c	; 0x212c <delay_us.constprop.0>
    2158:	5c 9a       	sbi	0x0b, 4	; 11
    215a:	0e 94 96 10 	call	0x212c	; 0x212c <delay_us.constprop.0>
    215e:	09 b1       	in	r16, 0x09	; 9
    2160:	5c 98       	cbi	0x0b, 4	; 11
    2162:	0e 94 96 10 	call	0x212c	; 0x212c <delay_us.constprop.0>
    2166:	5c 9a       	sbi	0x0b, 4	; 11
    2168:	0e 94 96 10 	call	0x212c	; 0x212c <delay_us.constprop.0>
    216c:	5c 98       	cbi	0x0b, 4	; 11
    216e:	24 96       	adiw	r28, 0x04	; 4
    2170:	07 ff       	sbrs	r16, 7
    2172:	10 c0       	rjmp	.+32     	; 0x2194 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    2174:	ae 01       	movw	r20, r28
    2176:	60 e0       	ldi	r22, 0x00	; 0
    2178:	70 e0       	ldi	r23, 0x00	; 0
    217a:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <lcdTimeout>
    217e:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <lcdTimeout+0x1>
    2182:	a0 91 91 01 	lds	r26, 0x0191	; 0x800191 <lcdTimeout+0x2>
    2186:	b0 91 92 01 	lds	r27, 0x0192	; 0x800192 <lcdTimeout+0x3>
    218a:	48 17       	cp	r20, r24
    218c:	59 07       	cpc	r21, r25
    218e:	6a 07       	cpc	r22, r26
    2190:	7b 07       	cpc	r23, r27
    2192:	00 f3       	brcs	.-64     	; 0x2154 <_ZN12OrangutanLCD8busyWaitEv+0x14>
    2194:	1a b9       	out	0x0a, r17	; 10
    2196:	df 91       	pop	r29
    2198:	cf 91       	pop	r28
    219a:	1f 91       	pop	r17
    219c:	0f 91       	pop	r16
    219e:	08 95       	ret

000021a0 <_ZN12OrangutanLCD8sendDataEh>:
    21a0:	95 b1       	in	r25, 0x05	; 5
    21a2:	28 2f       	mov	r18, r24
    21a4:	21 70       	andi	r18, 0x01	; 1
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	22 0f       	add	r18, r18
    21aa:	33 1f       	adc	r19, r19
    21ac:	48 2f       	mov	r20, r24
    21ae:	46 70       	andi	r20, 0x06	; 6
    21b0:	68 e0       	ldi	r22, 0x08	; 8
    21b2:	46 9f       	mul	r20, r22
    21b4:	a0 01       	movw	r20, r0
    21b6:	11 24       	eor	r1, r1
    21b8:	24 2b       	or	r18, r20
    21ba:	9d 7c       	andi	r25, 0xCD	; 205
    21bc:	29 2b       	or	r18, r25
    21be:	25 b9       	out	0x05, r18	; 5
    21c0:	9b b1       	in	r25, 0x0b	; 11
    21c2:	88 70       	andi	r24, 0x08	; 8
    21c4:	82 95       	swap	r24
    21c6:	80 7f       	andi	r24, 0xF0	; 240
    21c8:	9f 77       	andi	r25, 0x7F	; 127
    21ca:	89 2b       	or	r24, r25
    21cc:	8b b9       	out	0x0b, r24	; 11
    21ce:	5c 9a       	sbi	0x0b, 4	; 11
    21d0:	0e 94 96 10 	call	0x212c	; 0x212c <delay_us.constprop.0>
    21d4:	5c 98       	cbi	0x0b, 4	; 11
    21d6:	0e 94 96 10 	call	0x212c	; 0x212c <delay_us.constprop.0>
    21da:	08 95       	ret

000021dc <_ZN12OrangutanLCD4sendEhhh>:
    21dc:	a0 e0       	ldi	r26, 0x00	; 0
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	e4 ef       	ldi	r30, 0xF4	; 244
    21e2:	f0 e1       	ldi	r31, 0x10	; 16
    21e4:	0c 94 61 1a 	jmp	0x34c2	; 0x34c2 <__prologue_saves__+0x16>
    21e8:	c8 2f       	mov	r28, r24
    21ea:	d6 2e       	mov	r13, r22
    21ec:	e4 2e       	mov	r14, r20
    21ee:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <_ZZN12OrangutanLCD4initEvE11initialized>
    21f2:	81 11       	cpse	r24, r1
    21f4:	05 c0       	rjmp	.+10     	; 0x2200 <_ZN12OrangutanLCD4sendEhhh+0x24>
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <_ZZN12OrangutanLCD4initEvE11initialized>
    21fc:	0e 94 34 11 	call	0x2268	; 0x2268 <_ZN12OrangutanLCD5init2Ev>
    2200:	0e 94 a0 10 	call	0x2140	; 0x2140 <_ZN12OrangutanLCD8busyWaitEv>
    2204:	14 b1       	in	r17, 0x04	; 4
    2206:	d5 b1       	in	r29, 0x05	; 5
    2208:	fa b0       	in	r15, 0x0a	; 10
    220a:	0b b1       	in	r16, 0x0b	; 11
    220c:	28 98       	cbi	0x05, 0	; 5
    220e:	dd 20       	and	r13, r13
    2210:	11 f0       	breq	.+4      	; 0x2216 <_ZN12OrangutanLCD4sendEhhh+0x3a>
    2212:	5a 9a       	sbi	0x0b, 2	; 11
    2214:	01 c0       	rjmp	.+2      	; 0x2218 <_ZN12OrangutanLCD4sendEhhh+0x3c>
    2216:	5a 98       	cbi	0x0b, 2	; 11
    2218:	94 b1       	in	r25, 0x04	; 4
    221a:	92 63       	ori	r25, 0x32	; 50
    221c:	94 b9       	out	0x04, r25	; 4
    221e:	57 9a       	sbi	0x0a, 7	; 10
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	e8 16       	cp	r14, r24
    2224:	29 f0       	breq	.+10     	; 0x2230 <_ZN12OrangutanLCD4sendEhhh+0x54>
    2226:	8c 2f       	mov	r24, r28
    2228:	82 95       	swap	r24
    222a:	8f 70       	andi	r24, 0x0F	; 15
    222c:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <_ZN12OrangutanLCD8sendDataEh>
    2230:	8c 2f       	mov	r24, r28
    2232:	8f 70       	andi	r24, 0x0F	; 15
    2234:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <_ZN12OrangutanLCD8sendDataEh>
    2238:	fa b8       	out	0x0a, r15	; 10
    223a:	0b b9       	out	0x0b, r16	; 11
    223c:	14 b9       	out	0x04, r17	; 4
    223e:	d5 b9       	out	0x05, r29	; 5
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
    2244:	e7 e0       	ldi	r30, 0x07	; 7
    2246:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__epilogue_restores__+0x16>

0000224a <_ZN12OrangutanLCD8send_cmdEh>:
    224a:	42 e0       	ldi	r20, 0x02	; 2
    224c:	60 e0       	ldi	r22, 0x00	; 0
    224e:	0e 94 ee 10 	call	0x21dc	; 0x21dc <_ZN12OrangutanLCD4sendEhhh>
    2252:	08 95       	ret

00002254 <_ZN12OrangutanLCD9send_dataEh>:
    2254:	42 e0       	ldi	r20, 0x02	; 2
    2256:	61 e0       	ldi	r22, 0x01	; 1
    2258:	0e 94 ee 10 	call	0x21dc	; 0x21dc <_ZN12OrangutanLCD4sendEhhh>
    225c:	08 95       	ret

0000225e <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    225e:	41 e0       	ldi	r20, 0x01	; 1
    2260:	60 e0       	ldi	r22, 0x00	; 0
    2262:	0e 94 ee 10 	call	0x21dc	; 0x21dc <_ZN12OrangutanLCD4sendEhhh>
    2266:	08 95       	ret

00002268 <_ZN12OrangutanLCD5init2Ev>:
    2268:	80 e1       	ldi	r24, 0x10	; 16
    226a:	97 e2       	ldi	r25, 0x27	; 39
    226c:	a0 e0       	ldi	r26, 0x00	; 0
    226e:	b0 e0       	ldi	r27, 0x00	; 0
    2270:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <lcdTimeout>
    2274:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <lcdTimeout+0x1>
    2278:	a0 93 91 01 	sts	0x0191, r26	; 0x800191 <lcdTimeout+0x2>
    227c:	b0 93 92 01 	sts	0x0192, r27	; 0x800192 <lcdTimeout+0x3>
    2280:	52 9a       	sbi	0x0a, 2	; 10
    2282:	20 9a       	sbi	0x04, 0	; 4
    2284:	54 9a       	sbi	0x0a, 4	; 10
    2286:	8e e1       	ldi	r24, 0x1E	; 30
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	0e 94 1a 14 	call	0x2834	; 0x2834 <delay_ms>
    228e:	83 e0       	ldi	r24, 0x03	; 3
    2290:	0e 94 2f 11 	call	0x225e	; 0x225e <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2294:	86 e0       	ldi	r24, 0x06	; 6
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	0e 94 1a 14 	call	0x2834	; 0x2834 <delay_ms>
    229c:	83 e0       	ldi	r24, 0x03	; 3
    229e:	0e 94 2f 11 	call	0x225e	; 0x225e <_ZN12OrangutanLCD13send_4bit_cmdEh>
    22a2:	82 e0       	ldi	r24, 0x02	; 2
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	0e 94 1a 14 	call	0x2834	; 0x2834 <delay_ms>
    22aa:	83 e0       	ldi	r24, 0x03	; 3
    22ac:	0e 94 2f 11 	call	0x225e	; 0x225e <_ZN12OrangutanLCD13send_4bit_cmdEh>
    22b0:	82 e0       	ldi	r24, 0x02	; 2
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	0e 94 1a 14 	call	0x2834	; 0x2834 <delay_ms>
    22b8:	82 e0       	ldi	r24, 0x02	; 2
    22ba:	0e 94 2f 11 	call	0x225e	; 0x225e <_ZN12OrangutanLCD13send_4bit_cmdEh>
    22be:	82 e0       	ldi	r24, 0x02	; 2
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	0e 94 1a 14 	call	0x2834	; 0x2834 <delay_ms>
    22c6:	88 e2       	ldi	r24, 0x28	; 40
    22c8:	0e 94 25 11 	call	0x224a	; 0x224a <_ZN12OrangutanLCD8send_cmdEh>
    22cc:	88 e0       	ldi	r24, 0x08	; 8
    22ce:	0e 94 25 11 	call	0x224a	; 0x224a <_ZN12OrangutanLCD8send_cmdEh>
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	0e 94 25 11 	call	0x224a	; 0x224a <_ZN12OrangutanLCD8send_cmdEh>
    22d8:	86 e0       	ldi	r24, 0x06	; 6
    22da:	0e 94 25 11 	call	0x224a	; 0x224a <_ZN12OrangutanLCD8send_cmdEh>
    22de:	8c e0       	ldi	r24, 0x0C	; 12
    22e0:	0e 94 25 11 	call	0x224a	; 0x224a <_ZN12OrangutanLCD8send_cmdEh>
    22e4:	08 95       	ret

000022e6 <_ZN12OrangutanLCD5clearEv>:
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	0e 94 25 11 	call	0x224a	; 0x224a <_ZN12OrangutanLCD8send_cmdEh>
    22ec:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <printf_chars>
    22f0:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <printf_chars+0x1>
    22f4:	89 2b       	or	r24, r25
    22f6:	f9 f0       	breq	.+62     	; 0x2336 <_ZN12OrangutanLCD5clearEv+0x50>
    22f8:	60 e0       	ldi	r22, 0x00	; 0
    22fa:	a0 e2       	ldi	r26, 0x20	; 32
    22fc:	26 2f       	mov	r18, r22
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <numLCDCols>
    2304:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <numLCDRows>
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	01 97       	sbiw	r24, 0x01	; 1
    230c:	78 9f       	mul	r23, r24
    230e:	a0 01       	movw	r20, r0
    2310:	79 9f       	mul	r23, r25
    2312:	50 0d       	add	r21, r0
    2314:	11 24       	eor	r1, r1
    2316:	24 17       	cp	r18, r20
    2318:	35 07       	cpc	r19, r21
    231a:	4c f4       	brge	.+18     	; 0x232e <_ZN12OrangutanLCD5clearEv+0x48>
    231c:	e0 91 95 01 	lds	r30, 0x0195	; 0x800195 <printf_chars>
    2320:	f0 91 96 01 	lds	r31, 0x0196	; 0x800196 <printf_chars+0x1>
    2324:	e2 0f       	add	r30, r18
    2326:	f3 1f       	adc	r31, r19
    2328:	a0 83       	st	Z, r26
    232a:	6f 5f       	subi	r22, 0xFF	; 255
    232c:	e7 cf       	rjmp	.-50     	; 0x22fc <_ZN12OrangutanLCD5clearEv+0x16>
    232e:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <col>
    2332:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <row>
    2336:	08 95       	ret

00002338 <clear>:
    2338:	0e 94 73 11 	call	0x22e6	; 0x22e6 <_ZN12OrangutanLCD5clearEv>
    233c:	08 95       	ret

0000233e <_ZN12OrangutanLCD5printEPKc>:
    233e:	cf 93       	push	r28
    2340:	df 93       	push	r29
    2342:	ec 01       	movw	r28, r24
    2344:	89 91       	ld	r24, Y+
    2346:	88 23       	and	r24, r24
    2348:	19 f0       	breq	.+6      	; 0x2350 <_ZN12OrangutanLCD5printEPKc+0x12>
    234a:	0e 94 2a 11 	call	0x2254	; 0x2254 <_ZN12OrangutanLCD9send_dataEh>
    234e:	fa cf       	rjmp	.-12     	; 0x2344 <_ZN12OrangutanLCD5printEPKc+0x6>
    2350:	df 91       	pop	r29
    2352:	cf 91       	pop	r28
    2354:	08 95       	ret

00002356 <print>:
    2356:	0e 94 9f 11 	call	0x233e	; 0x233e <_ZN12OrangutanLCD5printEPKc>
    235a:	08 95       	ret

0000235c <_ZN12OrangutanLCD5printEm>:
    235c:	aa e0       	ldi	r26, 0x0A	; 10
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	e4 eb       	ldi	r30, 0xB4	; 180
    2362:	f1 e1       	ldi	r31, 0x11	; 17
    2364:	0c 94 60 1a 	jmp	0x34c0	; 0x34c0 <__prologue_saves__+0x14>
    2368:	1a e0       	ldi	r17, 0x0A	; 10
    236a:	5a e0       	ldi	r21, 0x0A	; 10
    236c:	c5 2e       	mov	r12, r21
    236e:	d1 2c       	mov	r13, r1
    2370:	e1 2c       	mov	r14, r1
    2372:	f1 2c       	mov	r15, r1
    2374:	06 2f       	mov	r16, r22
    2376:	a7 01       	movw	r20, r14
    2378:	96 01       	movw	r18, r12
    237a:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__udivmodsi4>
    237e:	ca 01       	movw	r24, r20
    2380:	b9 01       	movw	r22, r18
    2382:	11 50       	subi	r17, 0x01	; 1
    2384:	e1 e0       	ldi	r30, 0x01	; 1
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	ec 0f       	add	r30, r28
    238a:	fd 1f       	adc	r31, r29
    238c:	e1 0f       	add	r30, r17
    238e:	f1 1d       	adc	r31, r1
    2390:	00 5d       	subi	r16, 0xD0	; 208
    2392:	2a e0       	ldi	r18, 0x0A	; 10
    2394:	62 9f       	mul	r22, r18
    2396:	00 19       	sub	r16, r0
    2398:	11 24       	eor	r1, r1
    239a:	00 83       	st	Z, r16
    239c:	61 15       	cp	r22, r1
    239e:	71 05       	cpc	r23, r1
    23a0:	81 05       	cpc	r24, r1
    23a2:	91 05       	cpc	r25, r1
    23a4:	39 f7       	brne	.-50     	; 0x2374 <_ZN12OrangutanLCD5printEm+0x18>
    23a6:	1a 30       	cpi	r17, 0x0A	; 10
    23a8:	58 f4       	brcc	.+22     	; 0x23c0 <_ZN12OrangutanLCD5printEm+0x64>
    23aa:	e1 e0       	ldi	r30, 0x01	; 1
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	ec 0f       	add	r30, r28
    23b0:	fd 1f       	adc	r31, r29
    23b2:	e1 0f       	add	r30, r17
    23b4:	f1 1d       	adc	r31, r1
    23b6:	80 81       	ld	r24, Z
    23b8:	0e 94 2a 11 	call	0x2254	; 0x2254 <_ZN12OrangutanLCD9send_dataEh>
    23bc:	1f 5f       	subi	r17, 0xFF	; 255
    23be:	f3 cf       	rjmp	.-26     	; 0x23a6 <_ZN12OrangutanLCD5printEm+0x4a>
    23c0:	2a 96       	adiw	r28, 0x0a	; 10
    23c2:	e8 e0       	ldi	r30, 0x08	; 8
    23c4:	0c 94 7c 1a 	jmp	0x34f8	; 0x34f8 <__epilogue_restores__+0x14>

000023c8 <_ZN12OrangutanLCD5printEl>:
    23c8:	cf 92       	push	r12
    23ca:	df 92       	push	r13
    23cc:	ef 92       	push	r14
    23ce:	ff 92       	push	r15
    23d0:	6b 01       	movw	r12, r22
    23d2:	7c 01       	movw	r14, r24
    23d4:	97 ff       	sbrs	r25, 7
    23d6:	0b c0       	rjmp	.+22     	; 0x23ee <_ZN12OrangutanLCD5printEl+0x26>
    23d8:	f0 94       	com	r15
    23da:	e0 94       	com	r14
    23dc:	d0 94       	com	r13
    23de:	c0 94       	com	r12
    23e0:	c1 1c       	adc	r12, r1
    23e2:	d1 1c       	adc	r13, r1
    23e4:	e1 1c       	adc	r14, r1
    23e6:	f1 1c       	adc	r15, r1
    23e8:	8d e2       	ldi	r24, 0x2D	; 45
    23ea:	0e 94 2a 11 	call	0x2254	; 0x2254 <_ZN12OrangutanLCD9send_dataEh>
    23ee:	c7 01       	movw	r24, r14
    23f0:	b6 01       	movw	r22, r12
    23f2:	0e 94 ae 11 	call	0x235c	; 0x235c <_ZN12OrangutanLCD5printEm>
    23f6:	ff 90       	pop	r15
    23f8:	ef 90       	pop	r14
    23fa:	df 90       	pop	r13
    23fc:	cf 90       	pop	r12
    23fe:	08 95       	ret

00002400 <print_long>:
    2400:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN12OrangutanLCD5printEl>
    2404:	08 95       	ret

00002406 <_ZN12OrangutanLCD6gotoXYEhh>:
    2406:	a5 e0       	ldi	r26, 0x05	; 5
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	e9 e0       	ldi	r30, 0x09	; 9
    240c:	f2 e1       	ldi	r31, 0x12	; 18
    240e:	0c 94 65 1a 	jmp	0x34ca	; 0x34ca <__prologue_saves__+0x1e>
    2412:	18 2f       	mov	r17, r24
    2414:	80 e8       	ldi	r24, 0x80	; 128
    2416:	89 83       	std	Y+1, r24	; 0x01
    2418:	80 ec       	ldi	r24, 0xC0	; 192
    241a:	8a 83       	std	Y+2, r24	; 0x02
    241c:	84 e9       	ldi	r24, 0x94	; 148
    241e:	8b 83       	std	Y+3, r24	; 0x03
    2420:	84 ed       	ldi	r24, 0xD4	; 212
    2422:	8c 83       	std	Y+4, r24	; 0x04
    2424:	fe 01       	movw	r30, r28
    2426:	e6 0f       	add	r30, r22
    2428:	f1 1d       	adc	r31, r1
    242a:	81 81       	ldd	r24, Z+1	; 0x01
    242c:	81 0f       	add	r24, r17
    242e:	6d 83       	std	Y+5, r22	; 0x05
    2430:	0e 94 25 11 	call	0x224a	; 0x224a <_ZN12OrangutanLCD8send_cmdEh>
    2434:	10 93 93 01 	sts	0x0193, r17	; 0x800193 <col>
    2438:	6d 81       	ldd	r22, Y+5	; 0x05
    243a:	60 93 94 01 	sts	0x0194, r22	; 0x800194 <row>
    243e:	25 96       	adiw	r28, 0x05	; 5
    2440:	e3 e0       	ldi	r30, 0x03	; 3
    2442:	0c 94 81 1a 	jmp	0x3502	; 0x3502 <__epilogue_restores__+0x1e>

00002446 <lcd_goto_xy>:
    2446:	0e 94 03 12 	call	0x2406	; 0x2406 <_ZN12OrangutanLCD6gotoXYEhh>
    244a:	08 95       	ret

0000244c <_ZN16OrangutanDigital9setOutputEhh>:
    244c:	88 30       	cpi	r24, 0x08	; 8
    244e:	58 f4       	brcc	.+22     	; 0x2466 <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    2450:	91 e0       	ldi	r25, 0x01	; 1
    2452:	01 c0       	rjmp	.+2      	; 0x2456 <_ZN16OrangutanDigital9setOutputEhh+0xa>
    2454:	99 0f       	add	r25, r25
    2456:	8a 95       	dec	r24
    2458:	ea f7       	brpl	.-6      	; 0x2454 <_ZN16OrangutanDigital9setOutputEhh+0x8>
    245a:	89 2f       	mov	r24, r25
    245c:	aa e2       	ldi	r26, 0x2A	; 42
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	eb e2       	ldi	r30, 0x2B	; 43
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	21 c0       	rjmp	.+66     	; 0x24a8 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    2466:	8e 30       	cpi	r24, 0x0E	; 14
    2468:	60 f4       	brcc	.+24     	; 0x2482 <_ZN16OrangutanDigital9setOutputEhh+0x36>
    246a:	98 ef       	ldi	r25, 0xF8	; 248
    246c:	98 0f       	add	r25, r24
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	01 c0       	rjmp	.+2      	; 0x2474 <_ZN16OrangutanDigital9setOutputEhh+0x28>
    2472:	88 0f       	add	r24, r24
    2474:	9a 95       	dec	r25
    2476:	ea f7       	brpl	.-6      	; 0x2472 <_ZN16OrangutanDigital9setOutputEhh+0x26>
    2478:	a4 e2       	ldi	r26, 0x24	; 36
    247a:	b0 e0       	ldi	r27, 0x00	; 0
    247c:	e5 e2       	ldi	r30, 0x25	; 37
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	13 c0       	rjmp	.+38     	; 0x24a8 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    2482:	85 31       	cpi	r24, 0x15	; 21
    2484:	60 f4       	brcc	.+24     	; 0x249e <_ZN16OrangutanDigital9setOutputEhh+0x52>
    2486:	92 ef       	ldi	r25, 0xF2	; 242
    2488:	98 0f       	add	r25, r24
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	01 c0       	rjmp	.+2      	; 0x2490 <_ZN16OrangutanDigital9setOutputEhh+0x44>
    248e:	88 0f       	add	r24, r24
    2490:	9a 95       	dec	r25
    2492:	ea f7       	brpl	.-6      	; 0x248e <_ZN16OrangutanDigital9setOutputEhh+0x42>
    2494:	a7 e2       	ldi	r26, 0x27	; 39
    2496:	b0 e0       	ldi	r27, 0x00	; 0
    2498:	e8 e2       	ldi	r30, 0x28	; 40
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	05 c0       	rjmp	.+10     	; 0x24a8 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	a0 e0       	ldi	r26, 0x00	; 0
    24a2:	b0 e0       	ldi	r27, 0x00	; 0
    24a4:	e0 e0       	ldi	r30, 0x00	; 0
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	6f 3f       	cpi	r22, 0xFF	; 255
    24aa:	19 f4       	brne	.+6      	; 0x24b2 <_ZN16OrangutanDigital9setOutputEhh+0x66>
    24ac:	90 81       	ld	r25, Z
    24ae:	98 27       	eor	r25, r24
    24b0:	09 c0       	rjmp	.+18     	; 0x24c4 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    24b2:	66 23       	and	r22, r22
    24b4:	19 f0       	breq	.+6      	; 0x24bc <_ZN16OrangutanDigital9setOutputEhh+0x70>
    24b6:	90 81       	ld	r25, Z
    24b8:	98 2b       	or	r25, r24
    24ba:	04 c0       	rjmp	.+8      	; 0x24c4 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    24bc:	20 81       	ld	r18, Z
    24be:	98 2f       	mov	r25, r24
    24c0:	90 95       	com	r25
    24c2:	92 23       	and	r25, r18
    24c4:	90 83       	st	Z, r25
    24c6:	9c 91       	ld	r25, X
    24c8:	98 2b       	or	r25, r24
    24ca:	9c 93       	st	X, r25
    24cc:	08 95       	ret

000024ce <_ZN15OrangutanMotors5init2Ev>:
    24ce:	83 ef       	ldi	r24, 0xF3	; 243
    24d0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    24d4:	84 bd       	out	0x24, r24	; 36
    24d6:	82 e0       	ldi	r24, 0x02	; 2
    24d8:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    24dc:	85 bd       	out	0x25, r24	; 37
    24de:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    24e2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    24e6:	18 bc       	out	0x28, r1	; 40
    24e8:	17 bc       	out	0x27, r1	; 39
    24ea:	60 e0       	ldi	r22, 0x00	; 0
    24ec:	86 e0       	ldi	r24, 0x06	; 6
    24ee:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN16OrangutanDigital9setOutputEhh>
    24f2:	60 e0       	ldi	r22, 0x00	; 0
    24f4:	85 e0       	ldi	r24, 0x05	; 5
    24f6:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN16OrangutanDigital9setOutputEhh>
    24fa:	60 e0       	ldi	r22, 0x00	; 0
    24fc:	8b e0       	ldi	r24, 0x0B	; 11
    24fe:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN16OrangutanDigital9setOutputEhh>
    2502:	60 e0       	ldi	r22, 0x00	; 0
    2504:	83 e0       	ldi	r24, 0x03	; 3
    2506:	0e 94 26 12 	call	0x244c	; 0x244c <_ZN16OrangutanDigital9setOutputEhh>
    250a:	08 95       	ret

0000250c <_ZN15OrangutanMotors4initEv>:
    250c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZZN15OrangutanMotors4initEvE11initialized>
    2510:	81 11       	cpse	r24, r1
    2512:	05 c0       	rjmp	.+10     	; 0x251e <_ZN15OrangutanMotors4initEv+0x12>
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_ZZN15OrangutanMotors4initEvE11initialized>
    251a:	0e 94 67 12 	call	0x24ce	; 0x24ce <_ZN15OrangutanMotors5init2Ev>
    251e:	08 95       	ret

00002520 <_ZN15OrangutanMotors10setM1SpeedEi>:
    2520:	cf 93       	push	r28
    2522:	df 93       	push	r29
    2524:	ec 01       	movw	r28, r24
    2526:	0e 94 86 12 	call	0x250c	; 0x250c <_ZN15OrangutanMotors4initEv>
    252a:	d7 ff       	sbrs	r29, 7
    252c:	05 c0       	rjmp	.+10     	; 0x2538 <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    252e:	d1 95       	neg	r29
    2530:	c1 95       	neg	r28
    2532:	d1 09       	sbc	r29, r1
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	01 c0       	rjmp	.+2      	; 0x253a <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    2538:	80 e0       	ldi	r24, 0x00	; 0
    253a:	cf 3f       	cpi	r28, 0xFF	; 255
    253c:	d1 05       	cpc	r29, r1
    253e:	19 f0       	breq	.+6      	; 0x2546 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    2540:	14 f0       	brlt	.+4      	; 0x2546 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    2542:	cf ef       	ldi	r28, 0xFF	; 255
    2544:	d0 e0       	ldi	r29, 0x00	; 0
    2546:	88 23       	and	r24, r24
    2548:	19 f0       	breq	.+6      	; 0x2550 <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    254a:	18 bc       	out	0x28, r1	; 40
    254c:	c7 bd       	out	0x27, r28	; 39
    254e:	02 c0       	rjmp	.+4      	; 0x2554 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    2550:	c8 bd       	out	0x28, r28	; 40
    2552:	17 bc       	out	0x27, r1	; 39
    2554:	df 91       	pop	r29
    2556:	cf 91       	pop	r28
    2558:	08 95       	ret

0000255a <_ZN15OrangutanMotors10setM2SpeedEi>:
    255a:	cf 93       	push	r28
    255c:	df 93       	push	r29
    255e:	ec 01       	movw	r28, r24
    2560:	0e 94 86 12 	call	0x250c	; 0x250c <_ZN15OrangutanMotors4initEv>
    2564:	d7 ff       	sbrs	r29, 7
    2566:	05 c0       	rjmp	.+10     	; 0x2572 <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    2568:	d1 95       	neg	r29
    256a:	c1 95       	neg	r28
    256c:	d1 09       	sbc	r29, r1
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	01 c0       	rjmp	.+2      	; 0x2574 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    2572:	80 e0       	ldi	r24, 0x00	; 0
    2574:	cf 3f       	cpi	r28, 0xFF	; 255
    2576:	d1 05       	cpc	r29, r1
    2578:	19 f0       	breq	.+6      	; 0x2580 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    257a:	14 f0       	brlt	.+4      	; 0x2580 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    257c:	cf ef       	ldi	r28, 0xFF	; 255
    257e:	d0 e0       	ldi	r29, 0x00	; 0
    2580:	88 23       	and	r24, r24
    2582:	29 f0       	breq	.+10     	; 0x258e <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    2584:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    2588:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    258c:	04 c0       	rjmp	.+8      	; 0x2596 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    258e:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    2592:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    2596:	df 91       	pop	r29
    2598:	cf 91       	pop	r28
    259a:	08 95       	ret

0000259c <_ZN15OrangutanMotors9setSpeedsEii>:
    259c:	cf 93       	push	r28
    259e:	df 93       	push	r29
    25a0:	eb 01       	movw	r28, r22
    25a2:	0e 94 90 12 	call	0x2520	; 0x2520 <_ZN15OrangutanMotors10setM1SpeedEi>
    25a6:	ce 01       	movw	r24, r28
    25a8:	0e 94 ad 12 	call	0x255a	; 0x255a <_ZN15OrangutanMotors10setM2SpeedEi>
    25ac:	df 91       	pop	r29
    25ae:	cf 91       	pop	r28
    25b0:	08 95       	ret

000025b2 <set_motors>:
    25b2:	0e 94 ce 12 	call	0x259c	; 0x259c <_ZN15OrangutanMotors9setSpeedsEii>
    25b6:	08 95       	ret

000025b8 <_ZN20OrangutanPushbuttons5init2Ev>:
    25b8:	84 b1       	in	r24, 0x04	; 4
    25ba:	8d 7c       	andi	r24, 0xCD	; 205
    25bc:	84 b9       	out	0x04, r24	; 4
    25be:	85 b1       	in	r24, 0x05	; 5
    25c0:	82 63       	ori	r24, 0x32	; 50
    25c2:	85 b9       	out	0x05, r24	; 5
    25c4:	85 e0       	ldi	r24, 0x05	; 5
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	6f 93       	push	r22
    25ca:	64 e0       	ldi	r22, 0x04	; 4
    25cc:	6a 95       	dec	r22
    25ce:	f1 f7       	brne	.-4      	; 0x25cc <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    25d0:	6f 91       	pop	r22
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	c9 f7       	brne	.-14     	; 0x25c8 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    25d6:	08 95       	ret

000025d8 <_ZN20OrangutanPushbuttons4initEv>:
    25d8:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    25dc:	81 11       	cpse	r24, r1
    25de:	05 c0       	rjmp	.+10     	; 0x25ea <_ZN20OrangutanPushbuttons4initEv+0x12>
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    25e6:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <_ZN20OrangutanPushbuttons5init2Ev>
    25ea:	08 95       	ret

000025ec <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    25ec:	cf 93       	push	r28
    25ee:	c8 2f       	mov	r28, r24
    25f0:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <_ZN20OrangutanPushbuttons4initEv>
    25f4:	83 b1       	in	r24, 0x03	; 3
    25f6:	8c 23       	and	r24, r28
    25f8:	e9 f3       	breq	.-6      	; 0x25f4 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    25fa:	8a e0       	ldi	r24, 0x0A	; 10
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	0e 94 1a 14 	call	0x2834	; 0x2834 <delay_ms>
    2602:	83 b1       	in	r24, 0x03	; 3
    2604:	8c 23       	and	r24, r28
    2606:	b1 f3       	breq	.-20     	; 0x25f4 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    2608:	83 b1       	in	r24, 0x03	; 3
    260a:	8c 23       	and	r24, r28
    260c:	cf 91       	pop	r28
    260e:	08 95       	ret

00002610 <wait_for_button_release>:
    2610:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    2614:	08 95       	ret

00002616 <_ZN20OrangutanPushbuttons9isPressedEh>:
    2616:	a1 e0       	ldi	r26, 0x01	; 1
    2618:	b0 e0       	ldi	r27, 0x00	; 0
    261a:	e1 e1       	ldi	r30, 0x11	; 17
    261c:	f3 e1       	ldi	r31, 0x13	; 19
    261e:	0c 94 66 1a 	jmp	0x34cc	; 0x34cc <__prologue_saves__+0x20>
    2622:	89 83       	std	Y+1, r24	; 0x01
    2624:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <_ZN20OrangutanPushbuttons4initEv>
    2628:	93 b1       	in	r25, 0x03	; 3
    262a:	90 95       	com	r25
    262c:	89 81       	ldd	r24, Y+1	; 0x01
    262e:	89 23       	and	r24, r25
    2630:	21 96       	adiw	r28, 0x01	; 1
    2632:	e2 e0       	ldi	r30, 0x02	; 2
    2634:	0c 94 82 1a 	jmp	0x3504	; 0x3504 <__epilogue_restores__+0x20>

00002638 <button_is_pressed>:
    2638:	0e 94 0b 13 	call	0x2616	; 0x2616 <_ZN20OrangutanPushbuttons9isPressedEh>
    263c:	08 95       	ret

0000263e <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>:
    263e:	28 2f       	mov	r18, r24
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	9a e0       	ldi	r25, 0x0A	; 10
    2644:	89 9f       	mul	r24, r25
    2646:	f0 01       	movw	r30, r0
    2648:	11 24       	eor	r1, r1
    264a:	e9 56       	subi	r30, 0x69	; 105
    264c:	fe 4f       	sbci	r31, 0xFE	; 254
    264e:	80 85       	ldd	r24, Z+8	; 0x08
    2650:	91 85       	ldd	r25, Z+9	; 0x09
    2652:	00 97       	sbiw	r24, 0x00	; 0
    2654:	21 f0       	breq	.+8      	; 0x265e <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    2656:	52 81       	ldd	r21, Z+2	; 0x02
    2658:	44 81       	ldd	r20, Z+4	; 0x04
    265a:	54 17       	cp	r21, r20
    265c:	80 f0       	brcs	.+32     	; 0x267e <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x40>
    265e:	8a e0       	ldi	r24, 0x0A	; 10
    2660:	82 9f       	mul	r24, r18
    2662:	f0 01       	movw	r30, r0
    2664:	83 9f       	mul	r24, r19
    2666:	f0 0d       	add	r31, r0
    2668:	11 24       	eor	r1, r1
    266a:	e9 56       	subi	r30, 0x69	; 105
    266c:	fe 4f       	sbci	r31, 0xFE	; 254
    266e:	92 81       	ldd	r25, Z+2	; 0x02
    2670:	84 81       	ldd	r24, Z+4	; 0x04
    2672:	98 13       	cpse	r25, r24
    2674:	0e c0       	rjmp	.+28     	; 0x2692 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x54>
    2676:	85 81       	ldd	r24, Z+5	; 0x05
    2678:	81 11       	cpse	r24, r1
    267a:	0a c0       	rjmp	.+20     	; 0x2690 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x52>
    267c:	08 95       	ret
    267e:	42 81       	ldd	r20, Z+2	; 0x02
    2680:	dc 01       	movw	r26, r24
    2682:	a4 0f       	add	r26, r20
    2684:	b1 1d       	adc	r27, r1
    2686:	6c 93       	st	X, r22
    2688:	82 81       	ldd	r24, Z+2	; 0x02
    268a:	8f 5f       	subi	r24, 0xFF	; 255
    268c:	82 83       	std	Z+2, r24	; 0x02
    268e:	e7 cf       	rjmp	.-50     	; 0x265e <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    2690:	12 82       	std	Z+2, r1	; 0x02
    2692:	08 95       	ret

00002694 <__vector_18>:
    2694:	1f 92       	push	r1
    2696:	0f 92       	push	r0
    2698:	0f b6       	in	r0, 0x3f	; 63
    269a:	0f 92       	push	r0
    269c:	11 24       	eor	r1, r1
    269e:	2f 93       	push	r18
    26a0:	3f 93       	push	r19
    26a2:	4f 93       	push	r20
    26a4:	5f 93       	push	r21
    26a6:	6f 93       	push	r22
    26a8:	7f 93       	push	r23
    26aa:	8f 93       	push	r24
    26ac:	9f 93       	push	r25
    26ae:	af 93       	push	r26
    26b0:	bf 93       	push	r27
    26b2:	ef 93       	push	r30
    26b4:	ff 93       	push	r31
    26b6:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	0e 94 1f 13 	call	0x263e	; 0x263e <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>
    26c0:	ff 91       	pop	r31
    26c2:	ef 91       	pop	r30
    26c4:	bf 91       	pop	r27
    26c6:	af 91       	pop	r26
    26c8:	9f 91       	pop	r25
    26ca:	8f 91       	pop	r24
    26cc:	7f 91       	pop	r23
    26ce:	6f 91       	pop	r22
    26d0:	5f 91       	pop	r21
    26d2:	4f 91       	pop	r20
    26d4:	3f 91       	pop	r19
    26d6:	2f 91       	pop	r18
    26d8:	0f 90       	pop	r0
    26da:	0f be       	out	0x3f, r0	; 63
    26dc:	0f 90       	pop	r0
    26de:	1f 90       	pop	r1
    26e0:	18 95       	reti

000026e2 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>:
    26e2:	9a e0       	ldi	r25, 0x0A	; 10
    26e4:	89 9f       	mul	r24, r25
    26e6:	f0 01       	movw	r30, r0
    26e8:	11 24       	eor	r1, r1
    26ea:	e9 56       	subi	r30, 0x69	; 105
    26ec:	fe 4f       	sbci	r31, 0xFE	; 254
    26ee:	86 81       	ldd	r24, Z+6	; 0x06
    26f0:	97 81       	ldd	r25, Z+7	; 0x07
    26f2:	89 2b       	or	r24, r25
    26f4:	59 f0       	breq	.+22     	; 0x270c <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    26f6:	91 81       	ldd	r25, Z+1	; 0x01
    26f8:	83 81       	ldd	r24, Z+3	; 0x03
    26fa:	98 17       	cp	r25, r24
    26fc:	38 f4       	brcc	.+14     	; 0x270c <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    26fe:	80 81       	ld	r24, Z
    2700:	81 11       	cpse	r24, r1
    2702:	04 c0       	rjmp	.+8      	; 0x270c <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    2704:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2708:	80 62       	ori	r24, 0x20	; 32
    270a:	03 c0       	rjmp	.+6      	; 0x2712 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x30>
    270c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2710:	8f 7d       	andi	r24, 0xDF	; 223
    2712:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2716:	08 95       	ret

00002718 <_ZN15OrangutanSerial11uart_tx_isrEh>:
    2718:	9a e0       	ldi	r25, 0x0A	; 10
    271a:	89 9f       	mul	r24, r25
    271c:	f0 01       	movw	r30, r0
    271e:	11 24       	eor	r1, r1
    2720:	e9 56       	subi	r30, 0x69	; 105
    2722:	fe 4f       	sbci	r31, 0xFE	; 254
    2724:	26 81       	ldd	r18, Z+6	; 0x06
    2726:	37 81       	ldd	r19, Z+7	; 0x07
    2728:	21 15       	cp	r18, r1
    272a:	31 05       	cpc	r19, r1
    272c:	41 f0       	breq	.+16     	; 0x273e <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    272e:	41 81       	ldd	r20, Z+1	; 0x01
    2730:	93 81       	ldd	r25, Z+3	; 0x03
    2732:	49 17       	cp	r20, r25
    2734:	20 f4       	brcc	.+8      	; 0x273e <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    2736:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    273a:	95 fd       	sbrc	r25, 5
    273c:	03 c0       	rjmp	.+6      	; 0x2744 <_ZN15OrangutanSerial11uart_tx_isrEh+0x2c>
    273e:	0e 94 71 13 	call	0x26e2	; 0x26e2 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    2742:	08 95       	ret
    2744:	91 81       	ldd	r25, Z+1	; 0x01
    2746:	d9 01       	movw	r26, r18
    2748:	a9 0f       	add	r26, r25
    274a:	b1 1d       	adc	r27, r1
    274c:	9c 91       	ld	r25, X
    274e:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    2752:	91 81       	ldd	r25, Z+1	; 0x01
    2754:	9f 5f       	subi	r25, 0xFF	; 255
    2756:	91 83       	std	Z+1, r25	; 0x01
    2758:	f2 cf       	rjmp	.-28     	; 0x273e <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>

0000275a <__vector_19>:
    275a:	1f 92       	push	r1
    275c:	0f 92       	push	r0
    275e:	0f b6       	in	r0, 0x3f	; 63
    2760:	0f 92       	push	r0
    2762:	11 24       	eor	r1, r1
    2764:	2f 93       	push	r18
    2766:	3f 93       	push	r19
    2768:	4f 93       	push	r20
    276a:	5f 93       	push	r21
    276c:	6f 93       	push	r22
    276e:	7f 93       	push	r23
    2770:	8f 93       	push	r24
    2772:	9f 93       	push	r25
    2774:	af 93       	push	r26
    2776:	bf 93       	push	r27
    2778:	ef 93       	push	r30
    277a:	ff 93       	push	r31
    277c:	80 e0       	ldi	r24, 0x00	; 0
    277e:	0e 94 8c 13 	call	0x2718	; 0x2718 <_ZN15OrangutanSerial11uart_tx_isrEh>
    2782:	ff 91       	pop	r31
    2784:	ef 91       	pop	r30
    2786:	bf 91       	pop	r27
    2788:	af 91       	pop	r26
    278a:	9f 91       	pop	r25
    278c:	8f 91       	pop	r24
    278e:	7f 91       	pop	r23
    2790:	6f 91       	pop	r22
    2792:	5f 91       	pop	r21
    2794:	4f 91       	pop	r20
    2796:	3f 91       	pop	r19
    2798:	2f 91       	pop	r18
    279a:	0f 90       	pop	r0
    279c:	0f be       	out	0x3f, r0	; 63
    279e:	0f 90       	pop	r0
    27a0:	1f 90       	pop	r1
    27a2:	18 95       	reti

000027a4 <__vector_9>:
    27a4:	2f 92       	push	r2
    27a6:	8f 93       	push	r24
    27a8:	9f 93       	push	r25
    27aa:	2f b6       	in	r2, 0x3f	; 63
    27ac:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <tickCount+0x1>
    27b0:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <tickCount+0x2>
    27b4:	01 96       	adiw	r24, 0x01	; 1
    27b6:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <tickCount+0x1>
    27ba:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <tickCount+0x2>
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <tickCount+0x3>
    27c4:	89 1f       	adc	r24, r25
    27c6:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <tickCount+0x3>
    27ca:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <us_over_10+0x1>
    27ce:	9c 5f       	subi	r25, 0xFC	; 252
    27d0:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <us_over_10+0x1>
    27d4:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <us_over_10>
    27d8:	80 51       	subi	r24, 0x10	; 16
    27da:	97 42       	sbci	r25, 0x27	; 39
    27dc:	c0 f0       	brcs	.+48     	; 0x280e <end>
    27de:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <us_over_10+0x1>
    27e2:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <us_over_10>
    27e6:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <msCounter>
    27ea:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <msCounter+0x1>
    27ee:	01 96       	adiw	r24, 0x01	; 1
    27f0:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <msCounter>
    27f4:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <msCounter+0x1>
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <msCounter+0x2>
    27fe:	89 1f       	adc	r24, r25
    2800:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <msCounter+0x2>
    2804:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <msCounter+0x3>
    2808:	89 1f       	adc	r24, r25
    280a:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <msCounter+0x3>

0000280e <end>:
    280e:	2f be       	out	0x3f, r2	; 63
    2810:	9f 91       	pop	r25
    2812:	8f 91       	pop	r24
    2814:	2f 90       	pop	r2
    2816:	18 95       	reti

00002818 <_ZN13OrangutanTime17delayMillisecondsEj>:
    2818:	28 ee       	ldi	r18, 0xE8	; 232
    281a:	33 e0       	ldi	r19, 0x03	; 3
    281c:	01 97       	sbiw	r24, 0x01	; 1
    281e:	48 f0       	brcs	.+18     	; 0x2832 <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    2820:	f9 01       	movw	r30, r18
    2822:	6f 93       	push	r22
    2824:	64 e0       	ldi	r22, 0x04	; 4
    2826:	6a 95       	dec	r22
    2828:	f1 f7       	brne	.-4      	; 0x2826 <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    282a:	6f 91       	pop	r22
    282c:	31 97       	sbiw	r30, 0x01	; 1
    282e:	c9 f7       	brne	.-14     	; 0x2822 <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    2830:	f5 cf       	rjmp	.-22     	; 0x281c <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    2832:	08 95       	ret

00002834 <delay_ms>:
    2834:	0e 94 0c 14 	call	0x2818	; 0x2818 <_ZN13OrangutanTime17delayMillisecondsEj>
    2838:	08 95       	ret

0000283a <_ZN13OrangutanTime5init2Ev>:
    283a:	e0 e7       	ldi	r30, 0x70	; 112
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	80 81       	ld	r24, Z
    2840:	8e 7f       	andi	r24, 0xFE	; 254
    2842:	80 83       	st	Z, r24
    2844:	a0 eb       	ldi	r26, 0xB0	; 176
    2846:	b0 e0       	ldi	r27, 0x00	; 0
    2848:	8c 91       	ld	r24, X
    284a:	83 60       	ori	r24, 0x03	; 3
    284c:	8c 93       	st	X, r24
    284e:	a1 eb       	ldi	r26, 0xB1	; 177
    2850:	b0 e0       	ldi	r27, 0x00	; 0
    2852:	8c 91       	ld	r24, X
    2854:	80 7f       	andi	r24, 0xF0	; 240
    2856:	8c 93       	st	X, r24
    2858:	8c 91       	ld	r24, X
    285a:	82 60       	ori	r24, 0x02	; 2
    285c:	8c 93       	st	X, r24
    285e:	b8 9a       	sbi	0x17, 0	; 23
    2860:	80 81       	ld	r24, Z
    2862:	81 60       	ori	r24, 0x01	; 1
    2864:	80 83       	st	Z, r24
    2866:	78 94       	sei
    2868:	08 95       	ret

0000286a <_ZN13OrangutanTime4initEv>:
    286a:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <_ZZN13OrangutanTime4initEvE11initialized>
    286e:	81 11       	cpse	r24, r1
    2870:	05 c0       	rjmp	.+10     	; 0x287c <_ZN13OrangutanTime4initEv+0x12>
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <_ZZN13OrangutanTime4initEvE11initialized>
    2878:	0e 94 1d 14 	call	0x283a	; 0x283a <_ZN13OrangutanTime5init2Ev>
    287c:	08 95       	ret

0000287e <_ZN13OrangutanTime2msEv>:
    287e:	0e 94 35 14 	call	0x286a	; 0x286a <_ZN13OrangutanTime4initEv>
    2882:	e0 e7       	ldi	r30, 0x70	; 112
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	80 81       	ld	r24, Z
    2888:	8e 7f       	andi	r24, 0xFE	; 254
    288a:	80 83       	st	Z, r24
    288c:	60 91 a3 01 	lds	r22, 0x01A3	; 0x8001a3 <msCounter>
    2890:	70 91 a4 01 	lds	r23, 0x01A4	; 0x8001a4 <msCounter+0x1>
    2894:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <msCounter+0x2>
    2898:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <msCounter+0x3>
    289c:	20 81       	ld	r18, Z
    289e:	21 60       	ori	r18, 0x01	; 1
    28a0:	20 83       	st	Z, r18
    28a2:	08 95       	ret

000028a4 <get_ms>:
    28a4:	0e 94 3f 14 	call	0x287e	; 0x287e <_ZN13OrangutanTime2msEv>
    28a8:	08 95       	ret

000028aa <_ZN13OrangutanTime5resetEv>:
    28aa:	0e 94 35 14 	call	0x286a	; 0x286a <_ZN13OrangutanTime4initEv>
    28ae:	e0 e7       	ldi	r30, 0x70	; 112
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	80 81       	ld	r24, Z
    28b4:	8e 7f       	andi	r24, 0xFE	; 254
    28b6:	80 83       	st	Z, r24
    28b8:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <msCounter>
    28bc:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <msCounter+0x1>
    28c0:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <msCounter+0x2>
    28c4:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <msCounter+0x3>
    28c8:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <us_over_10+0x1>
    28cc:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <us_over_10>
    28d0:	80 81       	ld	r24, Z
    28d2:	81 60       	ori	r24, 0x01	; 1
    28d4:	80 83       	st	Z, r24
    28d6:	08 95       	ret

000028d8 <read_line_sensors>:
    28d8:	46 2f       	mov	r20, r22
    28da:	bc 01       	movw	r22, r24
    28dc:	8b ea       	ldi	r24, 0xAB	; 171
    28de:	91 e0       	ldi	r25, 0x01	; 1
    28e0:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <_ZN16PololuQTRSensors4readEPjh>
    28e4:	08 95       	ret

000028e6 <calibrate_line_sensors>:
    28e6:	68 2f       	mov	r22, r24
    28e8:	8b ea       	ldi	r24, 0xAB	; 171
    28ea:	91 e0       	ldi	r25, 0x01	; 1
    28ec:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <_ZN16PololuQTRSensors9calibrateEh>
    28f0:	08 95       	ret

000028f2 <read_line>:
    28f2:	46 2f       	mov	r20, r22
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	bc 01       	movw	r22, r24
    28f8:	8b ea       	ldi	r24, 0xAB	; 171
    28fa:	91 e0       	ldi	r25, 0x01	; 1
    28fc:	0e 94 2c 19 	call	0x3258	; 0x3258 <_ZN16PololuQTRSensors8readLineEPjhh>
    2900:	08 95       	ret

00002902 <_ZN9Pololu3pi4initEjh>:
    2902:	0f 93       	push	r16
    2904:	cf 93       	push	r28
    2906:	df 93       	push	r29
    2908:	00 d0       	rcall	.+0      	; 0x290a <_ZN9Pololu3pi4initEjh+0x8>
    290a:	00 d0       	rcall	.+0      	; 0x290c <_ZN9Pololu3pi4initEjh+0xa>
    290c:	1f 92       	push	r1
    290e:	cd b7       	in	r28, 0x3d	; 61
    2910:	de b7       	in	r29, 0x3e	; 62
    2912:	9c 01       	movw	r18, r24
    2914:	85 e0       	ldi	r24, 0x05	; 5
    2916:	ec e4       	ldi	r30, 0x4C	; 76
    2918:	f1 e0       	ldi	r31, 0x01	; 1
    291a:	de 01       	movw	r26, r28
    291c:	11 96       	adiw	r26, 0x01	; 1
    291e:	01 90       	ld	r0, Z+
    2920:	0d 92       	st	X+, r0
    2922:	8a 95       	dec	r24
    2924:	e1 f7       	brne	.-8      	; 0x291e <_ZN9Pololu3pi4initEjh+0x1c>
    2926:	66 23       	and	r22, r22
    2928:	11 f0       	breq	.+4      	; 0x292e <_ZN9Pololu3pi4initEjh+0x2c>
    292a:	0f ef       	ldi	r16, 0xFF	; 255
    292c:	01 c0       	rjmp	.+2      	; 0x2930 <_ZN9Pololu3pi4initEjh+0x2e>
    292e:	03 e1       	ldi	r16, 0x13	; 19
    2930:	45 e0       	ldi	r20, 0x05	; 5
    2932:	be 01       	movw	r22, r28
    2934:	6f 5f       	subi	r22, 0xFF	; 255
    2936:	7f 4f       	sbci	r23, 0xFF	; 255
    2938:	8b ea       	ldi	r24, 0xAB	; 171
    293a:	91 e0       	ldi	r25, 0x01	; 1
    293c:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <_ZN18PololuQTRSensorsRC4initEPhhjh>
    2940:	8b ea       	ldi	r24, 0xAB	; 171
    2942:	91 e0       	ldi	r25, 0x01	; 1
    2944:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <_ZN16PololuQTRSensors11emittersOffEv>
    2948:	0e 94 55 14 	call	0x28aa	; 0x28aa <_ZN13OrangutanTime5resetEv>
    294c:	0f 90       	pop	r0
    294e:	0f 90       	pop	r0
    2950:	0f 90       	pop	r0
    2952:	0f 90       	pop	r0
    2954:	0f 90       	pop	r0
    2956:	df 91       	pop	r29
    2958:	cf 91       	pop	r28
    295a:	0f 91       	pop	r16
    295c:	08 95       	ret

0000295e <pololu_3pi_init>:
    295e:	60 e0       	ldi	r22, 0x00	; 0
    2960:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN9Pololu3pi4initEjh>
    2964:	08 95       	ret

00002966 <_GLOBAL__sub_D_pololu_3pi_init>:
    2966:	8b ea       	ldi	r24, 0xAB	; 171
    2968:	91 e0       	ldi	r25, 0x01	; 1
    296a:	0e 94 a1 19 	call	0x3342	; 0x3342 <_ZN16PololuQTRSensorsD1Ev>
    296e:	08 95       	ret

00002970 <delay_us>:
    2970:	6f 93       	push	r22
    2972:	64 e0       	ldi	r22, 0x04	; 4
    2974:	6a 95       	dec	r22
    2976:	f1 f7       	brne	.-4      	; 0x2974 <delay_us+0x4>
    2978:	6f 91       	pop	r22
    297a:	01 97       	sbiw	r24, 0x01	; 1
    297c:	c9 f7       	brne	.-14     	; 0x2970 <delay_us>
    297e:	08 95       	ret

00002980 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    2980:	fc 01       	movw	r30, r24
    2982:	11 82       	std	Z+1, r1	; 0x01
    2984:	10 82       	st	Z, r1
    2986:	13 82       	std	Z+3, r1	; 0x03
    2988:	12 82       	std	Z+2, r1	; 0x02
    298a:	15 82       	std	Z+5, r1	; 0x05
    298c:	14 82       	std	Z+4, r1	; 0x04
    298e:	16 82       	std	Z+6, r1	; 0x06
    2990:	68 30       	cpi	r22, 0x08	; 8
    2992:	68 f4       	brcc	.+26     	; 0x29ae <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    2994:	89 e2       	ldi	r24, 0x29	; 41
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	91 83       	std	Z+1, r25	; 0x01
    299a:	80 83       	st	Z, r24
    299c:	8b e2       	ldi	r24, 0x2B	; 43
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	93 83       	std	Z+3, r25	; 0x03
    29a2:	82 83       	std	Z+2, r24	; 0x02
    29a4:	8a e2       	ldi	r24, 0x2A	; 42
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	95 83       	std	Z+5, r25	; 0x05
    29aa:	84 83       	std	Z+4, r24	; 0x04
    29ac:	1f c0       	rjmp	.+62     	; 0x29ec <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    29ae:	6e 30       	cpi	r22, 0x0E	; 14
    29b0:	70 f4       	brcc	.+28     	; 0x29ce <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    29b2:	83 e2       	ldi	r24, 0x23	; 35
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	91 83       	std	Z+1, r25	; 0x01
    29b8:	80 83       	st	Z, r24
    29ba:	85 e2       	ldi	r24, 0x25	; 37
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	93 83       	std	Z+3, r25	; 0x03
    29c0:	82 83       	std	Z+2, r24	; 0x02
    29c2:	84 e2       	ldi	r24, 0x24	; 36
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	95 83       	std	Z+5, r25	; 0x05
    29c8:	84 83       	std	Z+4, r24	; 0x04
    29ca:	68 50       	subi	r22, 0x08	; 8
    29cc:	0f c0       	rjmp	.+30     	; 0x29ec <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    29ce:	65 31       	cpi	r22, 0x15	; 21
    29d0:	98 f4       	brcc	.+38     	; 0x29f8 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    29d2:	86 e2       	ldi	r24, 0x26	; 38
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	91 83       	std	Z+1, r25	; 0x01
    29d8:	80 83       	st	Z, r24
    29da:	88 e2       	ldi	r24, 0x28	; 40
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	93 83       	std	Z+3, r25	; 0x03
    29e0:	82 83       	std	Z+2, r24	; 0x02
    29e2:	87 e2       	ldi	r24, 0x27	; 39
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	95 83       	std	Z+5, r25	; 0x05
    29e8:	84 83       	std	Z+4, r24	; 0x04
    29ea:	6e 50       	subi	r22, 0x0E	; 14
    29ec:	81 e0       	ldi	r24, 0x01	; 1
    29ee:	01 c0       	rjmp	.+2      	; 0x29f2 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    29f0:	88 0f       	add	r24, r24
    29f2:	6a 95       	dec	r22
    29f4:	ea f7       	brpl	.-6      	; 0x29f0 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    29f6:	86 83       	std	Z+6, r24	; 0x06
    29f8:	08 95       	ret

000029fa <_ZN16PololuQTRSensors4initEhhh>:
    29fa:	a7 e0       	ldi	r26, 0x07	; 7
    29fc:	b0 e0       	ldi	r27, 0x00	; 0
    29fe:	e3 e0       	ldi	r30, 0x03	; 3
    2a00:	f5 e1       	ldi	r31, 0x15	; 21
    2a02:	0c 94 64 1a 	jmp	0x34c8	; 0x34c8 <__prologue_saves__+0x1c>
    2a06:	8c 01       	movw	r16, r24
    2a08:	fc 01       	movw	r30, r24
    2a0a:	11 82       	std	Z+1, r1	; 0x01
    2a0c:	10 82       	st	Z, r1
    2a0e:	13 82       	std	Z+3, r1	; 0x03
    2a10:	12 82       	std	Z+2, r1	; 0x02
    2a12:	15 82       	std	Z+5, r1	; 0x05
    2a14:	14 82       	std	Z+4, r1	; 0x04
    2a16:	17 82       	std	Z+7, r1	; 0x07
    2a18:	16 82       	std	Z+6, r1	; 0x06
    2a1a:	61 31       	cpi	r22, 0x11	; 17
    2a1c:	18 f0       	brcs	.+6      	; 0x2a24 <_ZN16PololuQTRSensors4initEhhh+0x2a>
    2a1e:	80 e1       	ldi	r24, 0x10	; 16
    2a20:	80 87       	std	Z+8, r24	; 0x08
    2a22:	02 c0       	rjmp	.+4      	; 0x2a28 <_ZN16PololuQTRSensors4initEhhh+0x2e>
    2a24:	fc 01       	movw	r30, r24
    2a26:	60 87       	std	Z+8, r22	; 0x08
    2a28:	f8 01       	movw	r30, r16
    2a2a:	20 8b       	std	Z+16, r18	; 0x10
    2a2c:	64 2f       	mov	r22, r20
    2a2e:	ce 01       	movw	r24, r28
    2a30:	01 96       	adiw	r24, 0x01	; 1
    2a32:	0e 94 c0 14 	call	0x2980	; 0x2980 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    2a36:	8f 81       	ldd	r24, Y+7	; 0x07
    2a38:	f8 01       	movw	r30, r16
    2a3a:	81 87       	std	Z+9, r24	; 0x09
    2a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a40:	93 87       	std	Z+11, r25	; 0x0b
    2a42:	82 87       	std	Z+10, r24	; 0x0a
    2a44:	8d 81       	ldd	r24, Y+5	; 0x05
    2a46:	9e 81       	ldd	r25, Y+6	; 0x06
    2a48:	95 87       	std	Z+13, r25	; 0x0d
    2a4a:	84 87       	std	Z+12, r24	; 0x0c
    2a4c:	27 96       	adiw	r28, 0x07	; 7
    2a4e:	e4 e0       	ldi	r30, 0x04	; 4
    2a50:	0c 94 80 1a 	jmp	0x3500	; 0x3500 <__epilogue_restores__+0x1c>

00002a54 <_ZN16PololuQTRSensors11emittersOffEv>:
    2a54:	fc 01       	movw	r30, r24
    2a56:	a4 85       	ldd	r26, Z+12	; 0x0c
    2a58:	b5 85       	ldd	r27, Z+13	; 0x0d
    2a5a:	10 97       	sbiw	r26, 0x00	; 0
    2a5c:	79 f0       	breq	.+30     	; 0x2a7c <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    2a5e:	8c 91       	ld	r24, X
    2a60:	91 85       	ldd	r25, Z+9	; 0x09
    2a62:	89 2b       	or	r24, r25
    2a64:	8c 93       	st	X, r24
    2a66:	a2 85       	ldd	r26, Z+10	; 0x0a
    2a68:	b3 85       	ldd	r27, Z+11	; 0x0b
    2a6a:	9c 91       	ld	r25, X
    2a6c:	81 85       	ldd	r24, Z+9	; 0x09
    2a6e:	80 95       	com	r24
    2a70:	89 23       	and	r24, r25
    2a72:	8c 93       	st	X, r24
    2a74:	88 ec       	ldi	r24, 0xC8	; 200
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	0e 94 b8 14 	call	0x2970	; 0x2970 <delay_us>
    2a7c:	08 95       	ret

00002a7e <_ZN16PololuQTRSensors10emittersOnEv>:
    2a7e:	fc 01       	movw	r30, r24
    2a80:	a4 85       	ldd	r26, Z+12	; 0x0c
    2a82:	b5 85       	ldd	r27, Z+13	; 0x0d
    2a84:	10 97       	sbiw	r26, 0x00	; 0
    2a86:	71 f0       	breq	.+28     	; 0x2aa4 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    2a88:	8c 91       	ld	r24, X
    2a8a:	91 85       	ldd	r25, Z+9	; 0x09
    2a8c:	89 2b       	or	r24, r25
    2a8e:	8c 93       	st	X, r24
    2a90:	a2 85       	ldd	r26, Z+10	; 0x0a
    2a92:	b3 85       	ldd	r27, Z+11	; 0x0b
    2a94:	8c 91       	ld	r24, X
    2a96:	91 85       	ldd	r25, Z+9	; 0x09
    2a98:	89 2b       	or	r24, r25
    2a9a:	8c 93       	st	X, r24
    2a9c:	88 ec       	ldi	r24, 0xC8	; 200
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	0e 94 b8 14 	call	0x2970	; 0x2970 <delay_us>
    2aa4:	08 95       	ret

00002aa6 <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    2aa6:	a7 e0       	ldi	r26, 0x07	; 7
    2aa8:	b0 e0       	ldi	r27, 0x00	; 0
    2aaa:	e9 e5       	ldi	r30, 0x59	; 89
    2aac:	f5 e1       	ldi	r31, 0x15	; 21
    2aae:	0c 94 59 1a 	jmp	0x34b2	; 0x34b2 <__prologue_saves__+0x6>
    2ab2:	7c 01       	movw	r14, r24
    2ab4:	4b 01       	movw	r8, r22
    2ab6:	64 2f       	mov	r22, r20
    2ab8:	39 01       	movw	r6, r18
    2aba:	40 2f       	mov	r20, r16
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	0e 94 fd 14 	call	0x29fa	; 0x29fa <_ZN16PololuQTRSensors4initEhhh>
    2ac2:	87 01       	movw	r16, r14
    2ac4:	0f 5b       	subi	r16, 0xBF	; 191
    2ac6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ac8:	f8 01       	movw	r30, r16
    2aca:	10 82       	st	Z, r1
    2acc:	67 01       	movw	r12, r14
    2ace:	f2 e4       	ldi	r31, 0x42	; 66
    2ad0:	cf 0e       	add	r12, r31
    2ad2:	d1 1c       	adc	r13, r1
    2ad4:	f6 01       	movw	r30, r12
    2ad6:	10 82       	st	Z, r1
    2ad8:	57 01       	movw	r10, r14
    2ada:	f3 e4       	ldi	r31, 0x43	; 67
    2adc:	af 0e       	add	r10, r31
    2ade:	b1 1c       	adc	r11, r1
    2ae0:	f5 01       	movw	r30, r10
    2ae2:	10 82       	st	Z, r1
    2ae4:	f7 01       	movw	r30, r14
    2ae6:	77 86       	std	Z+15, r7	; 0x0f
    2ae8:	66 86       	std	Z+14, r6	; 0x0e
    2aea:	51 2c       	mov	r5, r1
    2aec:	f7 01       	movw	r30, r14
    2aee:	80 85       	ldd	r24, Z+8	; 0x08
    2af0:	58 16       	cp	r5, r24
    2af2:	50 f5       	brcc	.+84     	; 0x2b48 <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    2af4:	65 2c       	mov	r6, r5
    2af6:	71 2c       	mov	r7, r1
    2af8:	f4 01       	movw	r30, r8
    2afa:	e6 0d       	add	r30, r6
    2afc:	f7 1d       	adc	r31, r7
    2afe:	60 81       	ld	r22, Z
    2b00:	ce 01       	movw	r24, r28
    2b02:	01 96       	adiw	r24, 0x01	; 1
    2b04:	0e 94 c0 14 	call	0x2980	; 0x2980 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    2b08:	2f 81       	ldd	r18, Y+7	; 0x07
    2b0a:	f7 01       	movw	r30, r14
    2b0c:	e6 0d       	add	r30, r6
    2b0e:	f7 1d       	adc	r31, r7
    2b10:	21 8b       	std	Z+17, r18	; 0x11
    2b12:	89 81       	ldd	r24, Y+1	; 0x01
    2b14:	9a 81       	ldd	r25, Y+2	; 0x02
    2b16:	f3 01       	movw	r30, r6
    2b18:	ee 0f       	add	r30, r30
    2b1a:	ff 1f       	adc	r31, r31
    2b1c:	ee 0d       	add	r30, r14
    2b1e:	ff 1d       	adc	r31, r15
    2b20:	92 a3       	std	Z+34, r25	; 0x22
    2b22:	81 a3       	std	Z+33, r24	; 0x21
    2b24:	83 32       	cpi	r24, 0x23	; 35
    2b26:	91 05       	cpc	r25, r1
    2b28:	11 f4       	brne	.+4      	; 0x2b2e <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    2b2a:	f8 01       	movw	r30, r16
    2b2c:	08 c0       	rjmp	.+16     	; 0x2b3e <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    2b2e:	86 32       	cpi	r24, 0x26	; 38
    2b30:	91 05       	cpc	r25, r1
    2b32:	11 f4       	brne	.+4      	; 0x2b38 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    2b34:	f6 01       	movw	r30, r12
    2b36:	03 c0       	rjmp	.+6      	; 0x2b3e <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    2b38:	89 97       	sbiw	r24, 0x29	; 41
    2b3a:	21 f4       	brne	.+8      	; 0x2b44 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    2b3c:	f5 01       	movw	r30, r10
    2b3e:	80 81       	ld	r24, Z
    2b40:	82 2b       	or	r24, r18
    2b42:	80 83       	st	Z, r24
    2b44:	53 94       	inc	r5
    2b46:	d2 cf       	rjmp	.-92     	; 0x2aec <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    2b48:	27 96       	adiw	r28, 0x07	; 7
    2b4a:	ef e0       	ldi	r30, 0x0F	; 15
    2b4c:	0c 94 75 1a 	jmp	0x34ea	; 0x34ea <__epilogue_restores__+0x6>

00002b50 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    2b50:	a0 e0       	ldi	r26, 0x00	; 0
    2b52:	b0 e0       	ldi	r27, 0x00	; 0
    2b54:	ee ea       	ldi	r30, 0xAE	; 174
    2b56:	f5 e1       	ldi	r31, 0x15	; 21
    2b58:	0c 94 5b 1a 	jmp	0x34b6	; 0x34b6 <__prologue_saves__+0xa>
    2b5c:	ec 01       	movw	r28, r24
    2b5e:	5b 01       	movw	r10, r22
    2b60:	6c 01       	movw	r12, r24
    2b62:	81 e4       	ldi	r24, 0x41	; 65
    2b64:	c8 0e       	add	r12, r24
    2b66:	d1 1c       	adc	r13, r1
    2b68:	f6 01       	movw	r30, r12
    2b6a:	80 80       	ld	r8, Z
    2b6c:	7e 01       	movw	r14, r28
    2b6e:	f2 e4       	ldi	r31, 0x42	; 66
    2b70:	ef 0e       	add	r14, r31
    2b72:	f1 1c       	adc	r15, r1
    2b74:	f7 01       	movw	r30, r14
    2b76:	70 80       	ld	r7, Z
    2b78:	8e 01       	movw	r16, r28
    2b7a:	0d 5b       	subi	r16, 0xBD	; 189
    2b7c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b7e:	f8 01       	movw	r30, r16
    2b80:	90 80       	ld	r9, Z
    2b82:	80 e0       	ldi	r24, 0x00	; 0
    2b84:	98 85       	ldd	r25, Y+8	; 0x08
    2b86:	89 17       	cp	r24, r25
    2b88:	48 f4       	brcc	.+18     	; 0x2b9c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    2b8a:	f5 01       	movw	r30, r10
    2b8c:	e8 0f       	add	r30, r24
    2b8e:	f1 1d       	adc	r31, r1
    2b90:	e8 0f       	add	r30, r24
    2b92:	f1 1d       	adc	r31, r1
    2b94:	11 82       	std	Z+1, r1	; 0x01
    2b96:	10 82       	st	Z, r1
    2b98:	8f 5f       	subi	r24, 0xFF	; 255
    2b9a:	f4 cf       	rjmp	.-24     	; 0x2b84 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    2b9c:	84 b1       	in	r24, 0x04	; 4
    2b9e:	f6 01       	movw	r30, r12
    2ba0:	90 81       	ld	r25, Z
    2ba2:	89 2b       	or	r24, r25
    2ba4:	84 b9       	out	0x04, r24	; 4
    2ba6:	87 b1       	in	r24, 0x07	; 7
    2ba8:	f7 01       	movw	r30, r14
    2baa:	90 81       	ld	r25, Z
    2bac:	89 2b       	or	r24, r25
    2bae:	87 b9       	out	0x07, r24	; 7
    2bb0:	8a b1       	in	r24, 0x0a	; 10
    2bb2:	f8 01       	movw	r30, r16
    2bb4:	90 81       	ld	r25, Z
    2bb6:	89 2b       	or	r24, r25
    2bb8:	8a b9       	out	0x0a, r24	; 10
    2bba:	85 b1       	in	r24, 0x05	; 5
    2bbc:	f6 01       	movw	r30, r12
    2bbe:	90 81       	ld	r25, Z
    2bc0:	89 2b       	or	r24, r25
    2bc2:	85 b9       	out	0x05, r24	; 5
    2bc4:	88 b1       	in	r24, 0x08	; 8
    2bc6:	f7 01       	movw	r30, r14
    2bc8:	90 81       	ld	r25, Z
    2bca:	89 2b       	or	r24, r25
    2bcc:	88 b9       	out	0x08, r24	; 8
    2bce:	8b b1       	in	r24, 0x0b	; 11
    2bd0:	f8 01       	movw	r30, r16
    2bd2:	90 81       	ld	r25, Z
    2bd4:	89 2b       	or	r24, r25
    2bd6:	8b b9       	out	0x0b, r24	; 11
    2bd8:	8a e0       	ldi	r24, 0x0A	; 10
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	0e 94 b8 14 	call	0x2970	; 0x2970 <delay_us>
    2be0:	94 b1       	in	r25, 0x04	; 4
    2be2:	f6 01       	movw	r30, r12
    2be4:	80 81       	ld	r24, Z
    2be6:	80 95       	com	r24
    2be8:	89 23       	and	r24, r25
    2bea:	84 b9       	out	0x04, r24	; 4
    2bec:	97 b1       	in	r25, 0x07	; 7
    2bee:	f7 01       	movw	r30, r14
    2bf0:	80 81       	ld	r24, Z
    2bf2:	80 95       	com	r24
    2bf4:	89 23       	and	r24, r25
    2bf6:	87 b9       	out	0x07, r24	; 7
    2bf8:	9a b1       	in	r25, 0x0a	; 10
    2bfa:	f8 01       	movw	r30, r16
    2bfc:	80 81       	ld	r24, Z
    2bfe:	80 95       	com	r24
    2c00:	89 23       	and	r24, r25
    2c02:	8a b9       	out	0x0a, r24	; 10
    2c04:	95 b1       	in	r25, 0x05	; 5
    2c06:	f6 01       	movw	r30, r12
    2c08:	80 81       	ld	r24, Z
    2c0a:	80 95       	com	r24
    2c0c:	89 23       	and	r24, r25
    2c0e:	85 b9       	out	0x05, r24	; 5
    2c10:	98 b1       	in	r25, 0x08	; 8
    2c12:	f7 01       	movw	r30, r14
    2c14:	80 81       	ld	r24, Z
    2c16:	80 95       	com	r24
    2c18:	89 23       	and	r24, r25
    2c1a:	88 b9       	out	0x08, r24	; 8
    2c1c:	9b b1       	in	r25, 0x0b	; 11
    2c1e:	f8 01       	movw	r30, r16
    2c20:	80 81       	ld	r24, Z
    2c22:	80 95       	com	r24
    2c24:	89 23       	and	r24, r25
    2c26:	8b b9       	out	0x0b, r24	; 11
    2c28:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2c2c:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2c30:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2c34:	83 60       	ori	r24, 0x03	; 3
    2c36:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2c3a:	82 e0       	ldi	r24, 0x02	; 2
    2c3c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2c40:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    2c44:	80 e0       	ldi	r24, 0x00	; 0
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	2e 85       	ldd	r18, Y+14	; 0x0e
    2c4a:	3f 85       	ldd	r19, Y+15	; 0x0f
    2c4c:	82 17       	cp	r24, r18
    2c4e:	93 07       	cpc	r25, r19
    2c50:	20 f5       	brcc	.+72     	; 0x2c9a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    2c52:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    2c56:	2c 2d       	mov	r18, r12
    2c58:	24 1b       	sub	r18, r20
    2c5a:	82 0f       	add	r24, r18
    2c5c:	91 1d       	adc	r25, r1
    2c5e:	03 b1       	in	r16, 0x03	; 3
    2c60:	08 11       	cpse	r16, r8
    2c62:	32 c0       	rjmp	.+100    	; 0x2cc8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2c64:	f6 b0       	in	r15, 0x06	; 6
    2c66:	f7 10       	cpse	r15, r7
    2c68:	2f c0       	rjmp	.+94     	; 0x2cc8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2c6a:	29 b1       	in	r18, 0x09	; 9
    2c6c:	29 11       	cpse	r18, r9
    2c6e:	2c c0       	rjmp	.+88     	; 0x2cc8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2c70:	10 c0       	rjmp	.+32     	; 0x2c92 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    2c72:	21 2f       	mov	r18, r17
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	a9 01       	movw	r20, r18
    2c78:	44 0f       	add	r20, r20
    2c7a:	55 1f       	adc	r21, r21
    2c7c:	f5 01       	movw	r30, r10
    2c7e:	e4 0f       	add	r30, r20
    2c80:	f5 1f       	adc	r31, r21
    2c82:	60 81       	ld	r22, Z
    2c84:	71 81       	ldd	r23, Z+1	; 0x01
    2c86:	67 2b       	or	r22, r23
    2c88:	21 f1       	breq	.+72     	; 0x2cd2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    2c8a:	1f 5f       	subi	r17, 0xFF	; 255
    2c8c:	28 85       	ldd	r18, Y+8	; 0x08
    2c8e:	12 17       	cp	r17, r18
    2c90:	80 f3       	brcs	.-32     	; 0x2c72 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    2c92:	7f 2c       	mov	r7, r15
    2c94:	80 2e       	mov	r8, r16
    2c96:	4c 2d       	mov	r20, r12
    2c98:	d7 cf       	rjmp	.-82     	; 0x2c48 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    2c9a:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2c9e:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	88 85       	ldd	r24, Y+8	; 0x08
    2ca6:	28 17       	cp	r18, r24
    2ca8:	30 f5       	brcc	.+76     	; 0x2cf6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    2caa:	f5 01       	movw	r30, r10
    2cac:	e2 0f       	add	r30, r18
    2cae:	f1 1d       	adc	r31, r1
    2cb0:	e2 0f       	add	r30, r18
    2cb2:	f1 1d       	adc	r31, r1
    2cb4:	80 81       	ld	r24, Z
    2cb6:	91 81       	ldd	r25, Z+1	; 0x01
    2cb8:	89 2b       	or	r24, r25
    2cba:	21 f4       	brne	.+8      	; 0x2cc4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    2cbc:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cbe:	9f 85       	ldd	r25, Y+15	; 0x0f
    2cc0:	91 83       	std	Z+1, r25	; 0x01
    2cc2:	80 83       	st	Z, r24
    2cc4:	2f 5f       	subi	r18, 0xFF	; 255
    2cc6:	ee cf       	rjmp	.-36     	; 0x2ca4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    2cc8:	03 b1       	in	r16, 0x03	; 3
    2cca:	f6 b0       	in	r15, 0x06	; 6
    2ccc:	99 b0       	in	r9, 0x09	; 9
    2cce:	10 e0       	ldi	r17, 0x00	; 0
    2cd0:	dd cf       	rjmp	.-70     	; 0x2c8c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    2cd2:	de 01       	movw	r26, r28
    2cd4:	a4 0f       	add	r26, r20
    2cd6:	b5 1f       	adc	r27, r21
    2cd8:	91 96       	adiw	r26, 0x21	; 33
    2cda:	0d 90       	ld	r0, X+
    2cdc:	bc 91       	ld	r27, X
    2cde:	a0 2d       	mov	r26, r0
    2ce0:	4c 91       	ld	r20, X
    2ce2:	de 01       	movw	r26, r28
    2ce4:	a2 0f       	add	r26, r18
    2ce6:	b3 1f       	adc	r27, r19
    2ce8:	51 96       	adiw	r26, 0x11	; 17
    2cea:	2c 91       	ld	r18, X
    2cec:	42 23       	and	r20, r18
    2cee:	69 f6       	brne	.-102    	; 0x2c8a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    2cf0:	91 83       	std	Z+1, r25	; 0x01
    2cf2:	80 83       	st	Z, r24
    2cf4:	ca cf       	rjmp	.-108    	; 0x2c8a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    2cf6:	cd b7       	in	r28, 0x3d	; 61
    2cf8:	de b7       	in	r29, 0x3e	; 62
    2cfa:	ed e0       	ldi	r30, 0x0D	; 13
    2cfc:	0c 94 77 1a 	jmp	0x34ee	; 0x34ee <__epilogue_restores__+0xa>

00002d00 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    2d00:	ef 92       	push	r14
    2d02:	ff 92       	push	r15
    2d04:	0f 93       	push	r16
    2d06:	1f 93       	push	r17
    2d08:	cf 93       	push	r28
    2d0a:	df 93       	push	r29
    2d0c:	fc 01       	movw	r30, r24
    2d0e:	9b 01       	movw	r18, r22
    2d10:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2d14:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2d18:	47 b1       	in	r20, 0x07	; 7
    2d1a:	18 b1       	in	r17, 0x08	; 8
    2d1c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2d20:	86 fd       	sbrc	r24, 6
    2d22:	fc cf       	rjmp	.-8      	; 0x2d1c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    2d24:	80 e0       	ldi	r24, 0x00	; 0
    2d26:	90 85       	ldd	r25, Z+8	; 0x08
    2d28:	89 17       	cp	r24, r25
    2d2a:	48 f4       	brcc	.+18     	; 0x2d3e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    2d2c:	d9 01       	movw	r26, r18
    2d2e:	a8 0f       	add	r26, r24
    2d30:	b1 1d       	adc	r27, r1
    2d32:	a8 0f       	add	r26, r24
    2d34:	b1 1d       	adc	r27, r1
    2d36:	1d 92       	st	X+, r1
    2d38:	1c 92       	st	X, r1
    2d3a:	8f 5f       	subi	r24, 0xFF	; 255
    2d3c:	f4 cf       	rjmp	.-24     	; 0x2d26 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    2d3e:	97 b1       	in	r25, 0x07	; 7
    2d40:	82 a1       	ldd	r24, Z+34	; 0x22
    2d42:	80 95       	com	r24
    2d44:	89 23       	and	r24, r25
    2d46:	87 b9       	out	0x07, r24	; 7
    2d48:	98 b1       	in	r25, 0x08	; 8
    2d4a:	82 a1       	ldd	r24, Z+34	; 0x22
    2d4c:	80 95       	com	r24
    2d4e:	89 23       	and	r24, r25
    2d50:	88 b9       	out	0x08, r24	; 8
    2d52:	87 e8       	ldi	r24, 0x87	; 135
    2d54:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2d58:	e1 2c       	mov	r14, r1
    2d5a:	81 a1       	ldd	r24, Z+33	; 0x21
    2d5c:	e8 16       	cp	r14, r24
    2d5e:	10 f0       	brcs	.+4      	; 0x2d64 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    2d60:	e1 2c       	mov	r14, r1
    2d62:	29 c0       	rjmp	.+82     	; 0x2db6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    2d64:	50 e0       	ldi	r21, 0x00	; 0
    2d66:	80 85       	ldd	r24, Z+8	; 0x08
    2d68:	58 17       	cp	r21, r24
    2d6a:	18 f5       	brcc	.+70     	; 0x2db2 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    2d6c:	a5 2f       	mov	r26, r21
    2d6e:	b0 e0       	ldi	r27, 0x00	; 0
    2d70:	ef 01       	movw	r28, r30
    2d72:	ca 0f       	add	r28, r26
    2d74:	db 1f       	adc	r29, r27
    2d76:	89 89       	ldd	r24, Y+17	; 0x11
    2d78:	80 64       	ori	r24, 0x40	; 64
    2d7a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2d7e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2d82:	80 64       	ori	r24, 0x40	; 64
    2d84:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2d88:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2d8c:	86 fd       	sbrc	r24, 6
    2d8e:	fc cf       	rjmp	.-8      	; 0x2d88 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    2d90:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    2d94:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    2d98:	aa 0f       	add	r26, r26
    2d9a:	bb 1f       	adc	r27, r27
    2d9c:	a2 0f       	add	r26, r18
    2d9e:	b3 1f       	adc	r27, r19
    2da0:	8d 91       	ld	r24, X+
    2da2:	9c 91       	ld	r25, X
    2da4:	11 97       	sbiw	r26, 0x01	; 1
    2da6:	86 0f       	add	r24, r22
    2da8:	97 1f       	adc	r25, r23
    2daa:	8d 93       	st	X+, r24
    2dac:	9c 93       	st	X, r25
    2dae:	5f 5f       	subi	r21, 0xFF	; 255
    2db0:	da cf       	rjmp	.-76     	; 0x2d66 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    2db2:	e3 94       	inc	r14
    2db4:	d2 cf       	rjmp	.-92     	; 0x2d5a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    2db6:	80 85       	ldd	r24, Z+8	; 0x08
    2db8:	e8 16       	cp	r14, r24
    2dba:	a0 f4       	brcc	.+40     	; 0x2de4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    2dbc:	e9 01       	movw	r28, r18
    2dbe:	ce 0d       	add	r28, r14
    2dc0:	d1 1d       	adc	r29, r1
    2dc2:	ce 0d       	add	r28, r14
    2dc4:	d1 1d       	adc	r29, r1
    2dc6:	61 a1       	ldd	r22, Z+33	; 0x21
    2dc8:	70 e0       	ldi	r23, 0x00	; 0
    2dca:	cb 01       	movw	r24, r22
    2dcc:	95 95       	asr	r25
    2dce:	87 95       	ror	r24
    2dd0:	a8 81       	ld	r26, Y
    2dd2:	b9 81       	ldd	r27, Y+1	; 0x01
    2dd4:	8a 0f       	add	r24, r26
    2dd6:	9b 1f       	adc	r25, r27
    2dd8:	0e 94 cb 19 	call	0x3396	; 0x3396 <__udivmodhi4>
    2ddc:	79 83       	std	Y+1, r23	; 0x01
    2dde:	68 83       	st	Y, r22
    2de0:	e3 94       	inc	r14
    2de2:	e9 cf       	rjmp	.-46     	; 0x2db6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    2de4:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    2de8:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    2dec:	18 b9       	out	0x08, r17	; 8
    2dee:	47 b9       	out	0x07, r20	; 7
    2df0:	cd b7       	in	r28, 0x3d	; 61
    2df2:	de b7       	in	r29, 0x3e	; 62
    2df4:	e6 e0       	ldi	r30, 0x06	; 6
    2df6:	0c 94 7e 1a 	jmp	0x34fc	; 0x34fc <__epilogue_restores__+0x18>

00002dfa <_ZN16PololuQTRSensors4readEPjh>:
    2dfa:	a0 e2       	ldi	r26, 0x20	; 32
    2dfc:	b0 e0       	ldi	r27, 0x00	; 0
    2dfe:	e3 e0       	ldi	r30, 0x03	; 3
    2e00:	f7 e1       	ldi	r31, 0x17	; 23
    2e02:	0c 94 61 1a 	jmp	0x34c2	; 0x34c2 <__prologue_saves__+0x16>
    2e06:	8c 01       	movw	r16, r24
    2e08:	7b 01       	movw	r14, r22
    2e0a:	d4 2e       	mov	r13, r20
    2e0c:	8f ef       	ldi	r24, 0xFF	; 255
    2e0e:	84 0f       	add	r24, r20
    2e10:	82 30       	cpi	r24, 0x02	; 2
    2e12:	18 f4       	brcc	.+6      	; 0x2e1a <_ZN16PololuQTRSensors4readEPjh+0x20>
    2e14:	c8 01       	movw	r24, r16
    2e16:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <_ZN16PololuQTRSensors10emittersOnEv>
    2e1a:	d8 01       	movw	r26, r16
    2e1c:	50 96       	adiw	r26, 0x10	; 16
    2e1e:	8c 91       	ld	r24, X
    2e20:	b7 01       	movw	r22, r14
    2e22:	81 11       	cpse	r24, r1
    2e24:	10 c0       	rjmp	.+32     	; 0x2e46 <_ZN16PololuQTRSensors4readEPjh+0x4c>
    2e26:	c8 01       	movw	r24, r16
    2e28:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2e2c:	c8 01       	movw	r24, r16
    2e2e:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <_ZN16PololuQTRSensors11emittersOffEv>
    2e32:	b2 e0       	ldi	r27, 0x02	; 2
    2e34:	db 12       	cpse	r13, r27
    2e36:	3a c0       	rjmp	.+116    	; 0x2eac <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2e38:	be 01       	movw	r22, r28
    2e3a:	6f 5f       	subi	r22, 0xFF	; 255
    2e3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e3e:	c8 01       	movw	r24, r16
    2e40:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2e44:	0f c0       	rjmp	.+30     	; 0x2e64 <_ZN16PololuQTRSensors4readEPjh+0x6a>
    2e46:	c8 01       	movw	r24, r16
    2e48:	0e 94 80 16 	call	0x2d00	; 0x2d00 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2e4c:	c8 01       	movw	r24, r16
    2e4e:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <_ZN16PololuQTRSensors11emittersOffEv>
    2e52:	e2 e0       	ldi	r30, 0x02	; 2
    2e54:	de 12       	cpse	r13, r30
    2e56:	2a c0       	rjmp	.+84     	; 0x2eac <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2e58:	be 01       	movw	r22, r28
    2e5a:	6f 5f       	subi	r22, 0xFF	; 255
    2e5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e5e:	c8 01       	movw	r24, r16
    2e60:	0e 94 80 16 	call	0x2d00	; 0x2d00 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2e64:	40 e0       	ldi	r20, 0x00	; 0
    2e66:	f8 01       	movw	r30, r16
    2e68:	80 85       	ldd	r24, Z+8	; 0x08
    2e6a:	48 17       	cp	r20, r24
    2e6c:	f8 f4       	brcc	.+62     	; 0x2eac <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2e6e:	84 2f       	mov	r24, r20
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	88 0f       	add	r24, r24
    2e74:	99 1f       	adc	r25, r25
    2e76:	f7 01       	movw	r30, r14
    2e78:	e8 0f       	add	r30, r24
    2e7a:	f9 1f       	adc	r31, r25
    2e7c:	21 e0       	ldi	r18, 0x01	; 1
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	2c 0f       	add	r18, r28
    2e82:	3d 1f       	adc	r19, r29
    2e84:	82 0f       	add	r24, r18
    2e86:	93 1f       	adc	r25, r19
    2e88:	d8 01       	movw	r26, r16
    2e8a:	1e 96       	adiw	r26, 0x0e	; 14
    2e8c:	2d 91       	ld	r18, X+
    2e8e:	3c 91       	ld	r19, X
    2e90:	1f 97       	sbiw	r26, 0x0f	; 15
    2e92:	dc 01       	movw	r26, r24
    2e94:	8d 91       	ld	r24, X+
    2e96:	9c 91       	ld	r25, X
    2e98:	28 1b       	sub	r18, r24
    2e9a:	39 0b       	sbc	r19, r25
    2e9c:	80 81       	ld	r24, Z
    2e9e:	91 81       	ldd	r25, Z+1	; 0x01
    2ea0:	82 0f       	add	r24, r18
    2ea2:	93 1f       	adc	r25, r19
    2ea4:	91 83       	std	Z+1, r25	; 0x01
    2ea6:	80 83       	st	Z, r24
    2ea8:	4f 5f       	subi	r20, 0xFF	; 255
    2eaa:	dd cf       	rjmp	.-70     	; 0x2e66 <_ZN16PololuQTRSensors4readEPjh+0x6c>
    2eac:	a0 96       	adiw	r28, 0x20	; 32
    2eae:	e7 e0       	ldi	r30, 0x07	; 7
    2eb0:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__epilogue_restores__+0x16>

00002eb4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    2eb4:	2f 92       	push	r2
    2eb6:	3f 92       	push	r3
    2eb8:	5f 92       	push	r5
    2eba:	6f 92       	push	r6
    2ebc:	7f 92       	push	r7
    2ebe:	8f 92       	push	r8
    2ec0:	9f 92       	push	r9
    2ec2:	af 92       	push	r10
    2ec4:	bf 92       	push	r11
    2ec6:	cf 92       	push	r12
    2ec8:	df 92       	push	r13
    2eca:	ef 92       	push	r14
    2ecc:	ff 92       	push	r15
    2ece:	0f 93       	push	r16
    2ed0:	1f 93       	push	r17
    2ed2:	cf 93       	push	r28
    2ed4:	df 93       	push	r29
    2ed6:	cd b7       	in	r28, 0x3d	; 61
    2ed8:	de b7       	in	r29, 0x3e	; 62
    2eda:	c0 56       	subi	r28, 0x60	; 96
    2edc:	d1 09       	sbc	r29, r1
    2ede:	0f b6       	in	r0, 0x3f	; 63
    2ee0:	f8 94       	cli
    2ee2:	de bf       	out	0x3e, r29	; 62
    2ee4:	0f be       	out	0x3f, r0	; 63
    2ee6:	cd bf       	out	0x3d, r28	; 61
    2ee8:	8c 01       	movw	r16, r24
    2eea:	4b 01       	movw	r8, r22
    2eec:	5a 01       	movw	r10, r20
    2eee:	52 2e       	mov	r5, r18
    2ef0:	da 01       	movw	r26, r20
    2ef2:	8d 91       	ld	r24, X+
    2ef4:	9c 91       	ld	r25, X
    2ef6:	89 2b       	or	r24, r25
    2ef8:	31 f0       	breq	.+12     	; 0x2f06 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x52>
    2efa:	f4 01       	movw	r30, r8
    2efc:	80 81       	ld	r24, Z
    2efe:	91 81       	ldd	r25, Z+1	; 0x01
    2f00:	89 2b       	or	r24, r25
    2f02:	f1 f4       	brne	.+60     	; 0x2f40 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    2f04:	24 c0       	rjmp	.+72     	; 0x2f4e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x9a>
    2f06:	d8 01       	movw	r26, r16
    2f08:	18 96       	adiw	r26, 0x08	; 8
    2f0a:	8c 91       	ld	r24, X
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	88 0f       	add	r24, r24
    2f10:	99 1f       	adc	r25, r25
    2f12:	0e 94 93 1a 	call	0x3526	; 0x3526 <malloc>
    2f16:	f5 01       	movw	r30, r10
    2f18:	91 83       	std	Z+1, r25	; 0x01
    2f1a:	80 83       	st	Z, r24
    2f1c:	00 97       	sbiw	r24, 0x00	; 0
    2f1e:	09 f4       	brne	.+2      	; 0x2f22 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x6e>
    2f20:	b1 c0       	rjmp	.+354    	; 0x3084 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    2f22:	fc 01       	movw	r30, r24
    2f24:	20 e0       	ldi	r18, 0x00	; 0
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    2f28:	d8 01       	movw	r26, r16
    2f2a:	18 96       	adiw	r26, 0x08	; 8
    2f2c:	8c 91       	ld	r24, X
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	28 17       	cp	r18, r24
    2f32:	39 07       	cpc	r19, r25
    2f34:	14 f7       	brge	.-60     	; 0x2efa <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x46>
    2f36:	11 92       	st	Z+, r1
    2f38:	11 92       	st	Z+, r1
    2f3a:	2f 5f       	subi	r18, 0xFF	; 255
    2f3c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f3e:	f4 cf       	rjmp	.-24     	; 0x2f28 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x74>
    2f40:	e1 2c       	mov	r14, r1
    2f42:	f1 2c       	mov	r15, r1
    2f44:	6e 01       	movw	r12, r28
    2f46:	b1 e2       	ldi	r27, 0x21	; 33
    2f48:	cb 0e       	add	r12, r27
    2f4a:	d1 1c       	adc	r13, r1
    2f4c:	21 c0       	rjmp	.+66     	; 0x2f90 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    2f4e:	f8 01       	movw	r30, r16
    2f50:	80 85       	ldd	r24, Z+8	; 0x08
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	88 0f       	add	r24, r24
    2f56:	99 1f       	adc	r25, r25
    2f58:	0e 94 93 1a 	call	0x3526	; 0x3526 <malloc>
    2f5c:	d4 01       	movw	r26, r8
    2f5e:	8d 93       	st	X+, r24
    2f60:	9c 93       	st	X, r25
    2f62:	00 97       	sbiw	r24, 0x00	; 0
    2f64:	09 f4       	brne	.+2      	; 0x2f68 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb4>
    2f66:	8e c0       	rjmp	.+284    	; 0x3084 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    2f68:	fc 01       	movw	r30, r24
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	d8 01       	movw	r26, r16
    2f70:	18 96       	adiw	r26, 0x08	; 8
    2f72:	8c 91       	ld	r24, X
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	28 17       	cp	r18, r24
    2f78:	39 07       	cpc	r19, r25
    2f7a:	14 f7       	brge	.-60     	; 0x2f40 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    2f7c:	d8 01       	movw	r26, r16
    2f7e:	1e 96       	adiw	r26, 0x0e	; 14
    2f80:	8d 91       	ld	r24, X+
    2f82:	9c 91       	ld	r25, X
    2f84:	1f 97       	sbiw	r26, 0x0f	; 15
    2f86:	81 93       	st	Z+, r24
    2f88:	91 93       	st	Z+, r25
    2f8a:	2f 5f       	subi	r18, 0xFF	; 255
    2f8c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f8e:	ef cf       	rjmp	.-34     	; 0x2f6e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xba>
    2f90:	45 2d       	mov	r20, r5
    2f92:	be 01       	movw	r22, r28
    2f94:	6f 5b       	subi	r22, 0xBF	; 191
    2f96:	7f 4f       	sbci	r23, 0xFF	; 255
    2f98:	c8 01       	movw	r24, r16
    2f9a:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <_ZN16PololuQTRSensors4readEPjh>
    2f9e:	f8 01       	movw	r30, r16
    2fa0:	60 84       	ldd	r6, Z+8	; 0x08
    2fa2:	71 2c       	mov	r7, r1
    2fa4:	fe 01       	movw	r30, r28
    2fa6:	ef 5b       	subi	r30, 0xBF	; 191
    2fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2faa:	c6 01       	movw	r24, r12
    2fac:	9e 01       	movw	r18, r28
    2fae:	2f 5f       	subi	r18, 0xFF	; 255
    2fb0:	3f 4f       	sbci	r19, 0xFF	; 255
    2fb2:	19 01       	movw	r2, r18
    2fb4:	20 e0       	ldi	r18, 0x00	; 0
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	26 15       	cp	r18, r6
    2fba:	37 05       	cpc	r19, r7
    2fbc:	4c f5       	brge	.+82     	; 0x3010 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x15c>
    2fbe:	e1 14       	cp	r14, r1
    2fc0:	f1 04       	cpc	r15, r1
    2fc2:	89 f0       	breq	.+34     	; 0x2fe6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    2fc4:	dc 01       	movw	r26, r24
    2fc6:	6d 91       	ld	r22, X+
    2fc8:	7c 91       	ld	r23, X
    2fca:	40 81       	ld	r20, Z
    2fcc:	51 81       	ldd	r21, Z+1	; 0x01
    2fce:	64 17       	cp	r22, r20
    2fd0:	75 07       	cpc	r23, r21
    2fd2:	48 f0       	brcs	.+18     	; 0x2fe6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    2fd4:	d1 01       	movw	r26, r2
    2fd6:	6d 91       	ld	r22, X+
    2fd8:	7c 91       	ld	r23, X
    2fda:	40 81       	ld	r20, Z
    2fdc:	51 81       	ldd	r21, Z+1	; 0x01
    2fde:	46 17       	cp	r20, r22
    2fe0:	57 07       	cpc	r21, r23
    2fe2:	48 f0       	brcs	.+18     	; 0x2ff6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x142>
    2fe4:	0d c0       	rjmp	.+26     	; 0x3000 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x14c>
    2fe6:	40 81       	ld	r20, Z
    2fe8:	51 81       	ldd	r21, Z+1	; 0x01
    2fea:	dc 01       	movw	r26, r24
    2fec:	4d 93       	st	X+, r20
    2fee:	5c 93       	st	X, r21
    2ff0:	e1 14       	cp	r14, r1
    2ff2:	f1 04       	cpc	r15, r1
    2ff4:	79 f7       	brne	.-34     	; 0x2fd4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x120>
    2ff6:	40 81       	ld	r20, Z
    2ff8:	51 81       	ldd	r21, Z+1	; 0x01
    2ffa:	d1 01       	movw	r26, r2
    2ffc:	4d 93       	st	X+, r20
    2ffe:	5c 93       	st	X, r21
    3000:	2f 5f       	subi	r18, 0xFF	; 255
    3002:	3f 4f       	sbci	r19, 0xFF	; 255
    3004:	b2 e0       	ldi	r27, 0x02	; 2
    3006:	2b 0e       	add	r2, r27
    3008:	31 1c       	adc	r3, r1
    300a:	32 96       	adiw	r30, 0x02	; 2
    300c:	02 96       	adiw	r24, 0x02	; 2
    300e:	d4 cf       	rjmp	.-88     	; 0x2fb8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x104>
    3010:	ef ef       	ldi	r30, 0xFF	; 255
    3012:	ee 1a       	sub	r14, r30
    3014:	fe 0a       	sbc	r15, r30
    3016:	fa e0       	ldi	r31, 0x0A	; 10
    3018:	ef 16       	cp	r14, r31
    301a:	f1 04       	cpc	r15, r1
    301c:	09 f0       	breq	.+2      	; 0x3020 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x16c>
    301e:	b8 cf       	rjmp	.-144    	; 0x2f90 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    3020:	9e 01       	movw	r18, r28
    3022:	2f 5f       	subi	r18, 0xFF	; 255
    3024:	3f 4f       	sbci	r19, 0xFF	; 255
    3026:	79 01       	movw	r14, r18
    3028:	36 01       	movw	r6, r12
    302a:	80 e0       	ldi	r24, 0x00	; 0
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	f8 01       	movw	r30, r16
    3030:	20 85       	ldd	r18, Z+8	; 0x08
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	82 17       	cp	r24, r18
    3036:	93 07       	cpc	r25, r19
    3038:	2c f5       	brge	.+74     	; 0x3084 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    303a:	d7 01       	movw	r26, r14
    303c:	2d 91       	ld	r18, X+
    303e:	3d 91       	ld	r19, X+
    3040:	7d 01       	movw	r14, r26
    3042:	b3 01       	movw	r22, r6
    3044:	6c 19       	sub	r22, r12
    3046:	7d 09       	sbc	r23, r13
    3048:	d5 01       	movw	r26, r10
    304a:	ed 91       	ld	r30, X+
    304c:	fc 91       	ld	r31, X
    304e:	e6 0f       	add	r30, r22
    3050:	f7 1f       	adc	r31, r23
    3052:	40 81       	ld	r20, Z
    3054:	51 81       	ldd	r21, Z+1	; 0x01
    3056:	42 17       	cp	r20, r18
    3058:	53 07       	cpc	r21, r19
    305a:	10 f4       	brcc	.+4      	; 0x3060 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1ac>
    305c:	31 83       	std	Z+1, r19	; 0x01
    305e:	20 83       	st	Z, r18
    3060:	f3 01       	movw	r30, r6
    3062:	21 91       	ld	r18, Z+
    3064:	31 91       	ld	r19, Z+
    3066:	3f 01       	movw	r6, r30
    3068:	d4 01       	movw	r26, r8
    306a:	ed 91       	ld	r30, X+
    306c:	fc 91       	ld	r31, X
    306e:	e6 0f       	add	r30, r22
    3070:	f7 1f       	adc	r31, r23
    3072:	40 81       	ld	r20, Z
    3074:	51 81       	ldd	r21, Z+1	; 0x01
    3076:	24 17       	cp	r18, r20
    3078:	35 07       	cpc	r19, r21
    307a:	10 f4       	brcc	.+4      	; 0x3080 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1cc>
    307c:	31 83       	std	Z+1, r19	; 0x01
    307e:	20 83       	st	Z, r18
    3080:	01 96       	adiw	r24, 0x01	; 1
    3082:	d5 cf       	rjmp	.-86     	; 0x302e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17a>
    3084:	c0 5a       	subi	r28, 0xA0	; 160
    3086:	df 4f       	sbci	r29, 0xFF	; 255
    3088:	0f b6       	in	r0, 0x3f	; 63
    308a:	f8 94       	cli
    308c:	de bf       	out	0x3e, r29	; 62
    308e:	0f be       	out	0x3f, r0	; 63
    3090:	cd bf       	out	0x3d, r28	; 61
    3092:	df 91       	pop	r29
    3094:	cf 91       	pop	r28
    3096:	1f 91       	pop	r17
    3098:	0f 91       	pop	r16
    309a:	ff 90       	pop	r15
    309c:	ef 90       	pop	r14
    309e:	df 90       	pop	r13
    30a0:	cf 90       	pop	r12
    30a2:	bf 90       	pop	r11
    30a4:	af 90       	pop	r10
    30a6:	9f 90       	pop	r9
    30a8:	8f 90       	pop	r8
    30aa:	7f 90       	pop	r7
    30ac:	6f 90       	pop	r6
    30ae:	5f 90       	pop	r5
    30b0:	3f 90       	pop	r3
    30b2:	2f 90       	pop	r2
    30b4:	08 95       	ret

000030b6 <_ZN16PololuQTRSensors9calibrateEh>:
    30b6:	1f 93       	push	r17
    30b8:	cf 93       	push	r28
    30ba:	df 93       	push	r29
    30bc:	ec 01       	movw	r28, r24
    30be:	16 2f       	mov	r17, r22
    30c0:	8f ef       	ldi	r24, 0xFF	; 255
    30c2:	86 0f       	add	r24, r22
    30c4:	82 30       	cpi	r24, 0x02	; 2
    30c6:	18 f0       	brcs	.+6      	; 0x30ce <_ZN16PololuQTRSensors9calibrateEh+0x18>
    30c8:	66 23       	and	r22, r22
    30ca:	59 f0       	breq	.+22     	; 0x30e2 <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    30cc:	14 c0       	rjmp	.+40     	; 0x30f6 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    30ce:	21 e0       	ldi	r18, 0x01	; 1
    30d0:	ae 01       	movw	r20, r28
    30d2:	4e 5f       	subi	r20, 0xFE	; 254
    30d4:	5f 4f       	sbci	r21, 0xFF	; 255
    30d6:	be 01       	movw	r22, r28
    30d8:	ce 01       	movw	r24, r28
    30da:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    30de:	12 30       	cpi	r17, 0x02	; 2
    30e0:	51 f4       	brne	.+20     	; 0x30f6 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    30e2:	ae 01       	movw	r20, r28
    30e4:	4a 5f       	subi	r20, 0xFA	; 250
    30e6:	5f 4f       	sbci	r21, 0xFF	; 255
    30e8:	be 01       	movw	r22, r28
    30ea:	6c 5f       	subi	r22, 0xFC	; 252
    30ec:	7f 4f       	sbci	r23, 0xFF	; 255
    30ee:	20 e0       	ldi	r18, 0x00	; 0
    30f0:	ce 01       	movw	r24, r28
    30f2:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    30f6:	df 91       	pop	r29
    30f8:	cf 91       	pop	r28
    30fa:	1f 91       	pop	r17
    30fc:	08 95       	ret

000030fe <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    30fe:	a0 e0       	ldi	r26, 0x00	; 0
    3100:	b0 e0       	ldi	r27, 0x00	; 0
    3102:	e5 e8       	ldi	r30, 0x85	; 133
    3104:	f8 e1       	ldi	r31, 0x18	; 24
    3106:	0c 94 5f 1a 	jmp	0x34be	; 0x34be <__prologue_saves__+0x12>
    310a:	ec 01       	movw	r28, r24
    310c:	8b 01       	movw	r16, r22
    310e:	b4 2e       	mov	r11, r20
    3110:	84 2f       	mov	r24, r20
    3112:	8d 7f       	andi	r24, 0xFD	; 253
    3114:	51 f4       	brne	.+20     	; 0x312a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    3116:	8c 81       	ldd	r24, Y+4	; 0x04
    3118:	9d 81       	ldd	r25, Y+5	; 0x05
    311a:	89 2b       	or	r24, r25
    311c:	09 f4       	brne	.+2      	; 0x3120 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x22>
    311e:	97 c0       	rjmp	.+302    	; 0x324e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    3120:	8e 81       	ldd	r24, Y+6	; 0x06
    3122:	9f 81       	ldd	r25, Y+7	; 0x07
    3124:	89 2b       	or	r24, r25
    3126:	09 f4       	brne	.+2      	; 0x312a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    3128:	92 c0       	rjmp	.+292    	; 0x324e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    312a:	8f ef       	ldi	r24, 0xFF	; 255
    312c:	8b 0d       	add	r24, r11
    312e:	82 30       	cpi	r24, 0x02	; 2
    3130:	50 f4       	brcc	.+20     	; 0x3146 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    3132:	88 81       	ld	r24, Y
    3134:	99 81       	ldd	r25, Y+1	; 0x01
    3136:	89 2b       	or	r24, r25
    3138:	09 f4       	brne	.+2      	; 0x313c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3e>
    313a:	89 c0       	rjmp	.+274    	; 0x324e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    313c:	8a 81       	ldd	r24, Y+2	; 0x02
    313e:	9b 81       	ldd	r25, Y+3	; 0x03
    3140:	89 2b       	or	r24, r25
    3142:	09 f4       	brne	.+2      	; 0x3146 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    3144:	84 c0       	rjmp	.+264    	; 0x324e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    3146:	4b 2d       	mov	r20, r11
    3148:	b8 01       	movw	r22, r16
    314a:	ce 01       	movw	r24, r28
    314c:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <_ZN16PololuQTRSensors4readEPjh>
    3150:	78 01       	movw	r14, r16
    3152:	00 e0       	ldi	r16, 0x00	; 0
    3154:	10 e0       	ldi	r17, 0x00	; 0
    3156:	c1 2c       	mov	r12, r1
    3158:	d1 2c       	mov	r13, r1
    315a:	88 85       	ldd	r24, Y+8	; 0x08
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	c8 16       	cp	r12, r24
    3160:	d9 06       	cpc	r13, r25
    3162:	0c f0       	brlt	.+2      	; 0x3166 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x68>
    3164:	74 c0       	rjmp	.+232    	; 0x324e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    3166:	81 e0       	ldi	r24, 0x01	; 1
    3168:	b8 12       	cpse	r11, r24
    316a:	0a c0       	rjmp	.+20     	; 0x3180 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x82>
    316c:	ea 81       	ldd	r30, Y+2	; 0x02
    316e:	fb 81       	ldd	r31, Y+3	; 0x03
    3170:	e0 0f       	add	r30, r16
    3172:	f1 1f       	adc	r31, r17
    3174:	01 90       	ld	r0, Z+
    3176:	f0 81       	ld	r31, Z
    3178:	e0 2d       	mov	r30, r0
    317a:	a8 81       	ld	r26, Y
    317c:	b9 81       	ldd	r27, Y+1	; 0x01
    317e:	0d c0       	rjmp	.+26     	; 0x319a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x9c>
    3180:	8c 81       	ldd	r24, Y+4	; 0x04
    3182:	9d 81       	ldd	r25, Y+5	; 0x05
    3184:	2e 81       	ldd	r18, Y+6	; 0x06
    3186:	3f 81       	ldd	r19, Y+7	; 0x07
    3188:	b1 10       	cpse	r11, r1
    318a:	0c c0       	rjmp	.+24     	; 0x31a4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    318c:	f9 01       	movw	r30, r18
    318e:	e0 0f       	add	r30, r16
    3190:	f1 1f       	adc	r31, r17
    3192:	01 90       	ld	r0, Z+
    3194:	f0 81       	ld	r31, Z
    3196:	e0 2d       	mov	r30, r0
    3198:	dc 01       	movw	r26, r24
    319a:	a0 0f       	add	r26, r16
    319c:	b1 1f       	adc	r27, r17
    319e:	8d 91       	ld	r24, X+
    31a0:	9c 91       	ld	r25, X
    31a2:	28 c0       	rjmp	.+80     	; 0x31f4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    31a4:	fc 01       	movw	r30, r24
    31a6:	e0 0f       	add	r30, r16
    31a8:	f1 1f       	adc	r31, r17
    31aa:	40 81       	ld	r20, Z
    31ac:	51 81       	ldd	r21, Z+1	; 0x01
    31ae:	e8 81       	ld	r30, Y
    31b0:	f9 81       	ldd	r31, Y+1	; 0x01
    31b2:	e0 0f       	add	r30, r16
    31b4:	f1 1f       	adc	r31, r17
    31b6:	80 81       	ld	r24, Z
    31b8:	91 81       	ldd	r25, Z+1	; 0x01
    31ba:	ee 85       	ldd	r30, Y+14	; 0x0e
    31bc:	ff 85       	ldd	r31, Y+15	; 0x0f
    31be:	48 17       	cp	r20, r24
    31c0:	59 07       	cpc	r21, r25
    31c2:	10 f4       	brcc	.+4      	; 0x31c8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xca>
    31c4:	cf 01       	movw	r24, r30
    31c6:	04 c0       	rjmp	.+8      	; 0x31d0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd2>
    31c8:	8e 0f       	add	r24, r30
    31ca:	9f 1f       	adc	r25, r31
    31cc:	84 1b       	sub	r24, r20
    31ce:	95 0b       	sbc	r25, r21
    31d0:	d9 01       	movw	r26, r18
    31d2:	a0 0f       	add	r26, r16
    31d4:	b1 1f       	adc	r27, r17
    31d6:	2d 91       	ld	r18, X+
    31d8:	3c 91       	ld	r19, X
    31da:	aa 81       	ldd	r26, Y+2	; 0x02
    31dc:	bb 81       	ldd	r27, Y+3	; 0x03
    31de:	a0 0f       	add	r26, r16
    31e0:	b1 1f       	adc	r27, r17
    31e2:	4d 91       	ld	r20, X+
    31e4:	5c 91       	ld	r21, X
    31e6:	24 17       	cp	r18, r20
    31e8:	35 07       	cpc	r19, r21
    31ea:	20 f0       	brcs	.+8      	; 0x31f4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    31ec:	e4 0f       	add	r30, r20
    31ee:	f5 1f       	adc	r31, r21
    31f0:	e2 1b       	sub	r30, r18
    31f2:	f3 0b       	sbc	r31, r19
    31f4:	e8 1b       	sub	r30, r24
    31f6:	f9 0b       	sbc	r31, r25
    31f8:	a9 f0       	breq	.+42     	; 0x3224 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x126>
    31fa:	d7 01       	movw	r26, r14
    31fc:	2d 91       	ld	r18, X+
    31fe:	3c 91       	ld	r19, X
    3200:	40 e0       	ldi	r20, 0x00	; 0
    3202:	50 e0       	ldi	r21, 0x00	; 0
    3204:	28 1b       	sub	r18, r24
    3206:	39 0b       	sbc	r19, r25
    3208:	41 09       	sbc	r20, r1
    320a:	51 09       	sbc	r21, r1
    320c:	a8 ee       	ldi	r26, 0xE8	; 232
    320e:	b3 e0       	ldi	r27, 0x03	; 3
    3210:	0e 94 43 1a 	call	0x3486	; 0x3486 <__muluhisi3>
    3214:	9f 01       	movw	r18, r30
    3216:	40 e0       	ldi	r20, 0x00	; 0
    3218:	50 e0       	ldi	r21, 0x00	; 0
    321a:	0e 94 15 1a 	call	0x342a	; 0x342a <__divmodsi4>
    321e:	37 fd       	sbrc	r19, 7
    3220:	0a c0       	rjmp	.+20     	; 0x3236 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x138>
    3222:	02 c0       	rjmp	.+4      	; 0x3228 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x12a>
    3224:	20 e0       	ldi	r18, 0x00	; 0
    3226:	30 e0       	ldi	r19, 0x00	; 0
    3228:	29 3e       	cpi	r18, 0xE9	; 233
    322a:	b3 e0       	ldi	r27, 0x03	; 3
    322c:	3b 07       	cpc	r19, r27
    322e:	2c f0       	brlt	.+10     	; 0x323a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    3230:	28 ee       	ldi	r18, 0xE8	; 232
    3232:	33 e0       	ldi	r19, 0x03	; 3
    3234:	02 c0       	rjmp	.+4      	; 0x323a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    3236:	20 e0       	ldi	r18, 0x00	; 0
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	f7 01       	movw	r30, r14
    323c:	21 93       	st	Z+, r18
    323e:	31 93       	st	Z+, r19
    3240:	7f 01       	movw	r14, r30
    3242:	ff ef       	ldi	r31, 0xFF	; 255
    3244:	cf 1a       	sub	r12, r31
    3246:	df 0a       	sbc	r13, r31
    3248:	0e 5f       	subi	r16, 0xFE	; 254
    324a:	1f 4f       	sbci	r17, 0xFF	; 255
    324c:	86 cf       	rjmp	.-244    	; 0x315a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x5c>
    324e:	cd b7       	in	r28, 0x3d	; 61
    3250:	de b7       	in	r29, 0x3e	; 62
    3252:	e9 e0       	ldi	r30, 0x09	; 9
    3254:	0c 94 7b 1a 	jmp	0x34f6	; 0x34f6 <__epilogue_restores__+0x12>

00003258 <_ZN16PololuQTRSensors8readLineEPjhh>:
    3258:	a0 e0       	ldi	r26, 0x00	; 0
    325a:	b0 e0       	ldi	r27, 0x00	; 0
    325c:	e2 e3       	ldi	r30, 0x32	; 50
    325e:	f9 e1       	ldi	r31, 0x19	; 25
    3260:	0c 94 56 1a 	jmp	0x34ac	; 0x34ac <__prologue_saves__>
    3264:	ec 01       	movw	r28, r24
    3266:	8b 01       	movw	r16, r22
    3268:	82 2e       	mov	r8, r18
    326a:	0e 94 7f 18 	call	0x30fe	; 0x30fe <_ZN16PololuQTRSensors14readCalibratedEPjh>
    326e:	28 84       	ldd	r2, Y+8	; 0x08
    3270:	e8 01       	movw	r28, r16
    3272:	41 2c       	mov	r4, r1
    3274:	51 2c       	mov	r5, r1
    3276:	32 01       	movw	r6, r4
    3278:	00 e0       	ldi	r16, 0x00	; 0
    327a:	10 e0       	ldi	r17, 0x00	; 0
    327c:	c1 2c       	mov	r12, r1
    327e:	d1 2c       	mov	r13, r1
    3280:	76 01       	movw	r14, r12
    3282:	31 2c       	mov	r3, r1
    3284:	91 2c       	mov	r9, r1
    3286:	58 ee       	ldi	r21, 0xE8	; 232
    3288:	a5 2e       	mov	r10, r21
    328a:	53 e0       	ldi	r21, 0x03	; 3
    328c:	b5 2e       	mov	r11, r21
    328e:	92 14       	cp	r9, r2
    3290:	21 f1       	breq	.+72     	; 0x32da <_ZN16PololuQTRSensors8readLineEPjhh+0x82>
    3292:	e9 91       	ld	r30, Y+
    3294:	f9 91       	ld	r31, Y+
    3296:	88 20       	and	r8, r8
    3298:	21 f0       	breq	.+8      	; 0x32a2 <_ZN16PololuQTRSensors8readLineEPjhh+0x4a>
    329a:	c5 01       	movw	r24, r10
    329c:	8e 1b       	sub	r24, r30
    329e:	9f 0b       	sbc	r25, r31
    32a0:	fc 01       	movw	r30, r24
    32a2:	e9 3c       	cpi	r30, 0xC9	; 201
    32a4:	f1 05       	cpc	r31, r1
    32a6:	24 f4       	brge	.+8      	; 0x32b0 <_ZN16PololuQTRSensors8readLineEPjhh+0x58>
    32a8:	e3 33       	cpi	r30, 0x33	; 51
    32aa:	f1 05       	cpc	r31, r1
    32ac:	74 f0       	brlt	.+28     	; 0x32ca <_ZN16PololuQTRSensors8readLineEPjhh+0x72>
    32ae:	02 c0       	rjmp	.+4      	; 0x32b4 <_ZN16PololuQTRSensors8readLineEPjhh+0x5c>
    32b0:	33 24       	eor	r3, r3
    32b2:	33 94       	inc	r3
    32b4:	df 01       	movw	r26, r30
    32b6:	a3 01       	movw	r20, r6
    32b8:	92 01       	movw	r18, r4
    32ba:	0e 94 4e 1a 	call	0x349c	; 0x349c <__mulshisi3>
    32be:	c6 0e       	add	r12, r22
    32c0:	d7 1e       	adc	r13, r23
    32c2:	e8 1e       	adc	r14, r24
    32c4:	f9 1e       	adc	r15, r25
    32c6:	0e 0f       	add	r16, r30
    32c8:	1f 1f       	adc	r17, r31
    32ca:	93 94       	inc	r9
    32cc:	98 ee       	ldi	r25, 0xE8	; 232
    32ce:	49 0e       	add	r4, r25
    32d0:	93 e0       	ldi	r25, 0x03	; 3
    32d2:	59 1e       	adc	r5, r25
    32d4:	61 1c       	adc	r6, r1
    32d6:	71 1c       	adc	r7, r1
    32d8:	da cf       	rjmp	.-76     	; 0x328e <_ZN16PololuQTRSensors8readLineEPjhh+0x36>
    32da:	31 10       	cpse	r3, r1
    32dc:	1e c0       	rjmp	.+60     	; 0x331a <_ZN16PololuQTRSensors8readLineEPjhh+0xc2>
    32de:	49 2d       	mov	r20, r9
    32e0:	50 e0       	ldi	r21, 0x00	; 0
    32e2:	41 50       	subi	r20, 0x01	; 1
    32e4:	51 09       	sbc	r21, r1
    32e6:	24 ef       	ldi	r18, 0xF4	; 244
    32e8:	31 e0       	ldi	r19, 0x01	; 1
    32ea:	42 9f       	mul	r20, r18
    32ec:	c0 01       	movw	r24, r0
    32ee:	43 9f       	mul	r20, r19
    32f0:	90 0d       	add	r25, r0
    32f2:	52 9f       	mul	r21, r18
    32f4:	90 0d       	add	r25, r0
    32f6:	11 24       	eor	r1, r1
    32f8:	20 91 ef 01 	lds	r18, 0x01EF	; 0x8001ef <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    32fc:	30 91 f0 01 	lds	r19, 0x01F0	; 0x8001f0 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    3300:	28 17       	cp	r18, r24
    3302:	39 07       	cpc	r19, r25
    3304:	b4 f0       	brlt	.+44     	; 0x3332 <_ZN16PololuQTRSensors8readLineEPjhh+0xda>
    3306:	88 ee       	ldi	r24, 0xE8	; 232
    3308:	93 e0       	ldi	r25, 0x03	; 3
    330a:	48 9f       	mul	r20, r24
    330c:	90 01       	movw	r18, r0
    330e:	49 9f       	mul	r20, r25
    3310:	30 0d       	add	r19, r0
    3312:	58 9f       	mul	r21, r24
    3314:	30 0d       	add	r19, r0
    3316:	11 24       	eor	r1, r1
    3318:	0e c0       	rjmp	.+28     	; 0x3336 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    331a:	98 01       	movw	r18, r16
    331c:	40 e0       	ldi	r20, 0x00	; 0
    331e:	50 e0       	ldi	r21, 0x00	; 0
    3320:	c7 01       	movw	r24, r14
    3322:	b6 01       	movw	r22, r12
    3324:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__udivmodsi4>
    3328:	30 93 f0 01 	sts	0x01F0, r19	; 0x8001f0 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    332c:	20 93 ef 01 	sts	0x01EF, r18	; 0x8001ef <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    3330:	02 c0       	rjmp	.+4      	; 0x3336 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    3332:	20 e0       	ldi	r18, 0x00	; 0
    3334:	30 e0       	ldi	r19, 0x00	; 0
    3336:	c9 01       	movw	r24, r18
    3338:	cd b7       	in	r28, 0x3d	; 61
    333a:	de b7       	in	r29, 0x3e	; 62
    333c:	e2 e1       	ldi	r30, 0x12	; 18
    333e:	0c 94 72 1a 	jmp	0x34e4	; 0x34e4 <__epilogue_restores__>

00003342 <_ZN16PololuQTRSensorsD1Ev>:
    3342:	cf 93       	push	r28
    3344:	df 93       	push	r29
    3346:	ec 01       	movw	r28, r24
    3348:	8a 81       	ldd	r24, Y+2	; 0x02
    334a:	9b 81       	ldd	r25, Y+3	; 0x03
    334c:	00 97       	sbiw	r24, 0x00	; 0
    334e:	11 f0       	breq	.+4      	; 0x3354 <_ZN16PololuQTRSensorsD1Ev+0x12>
    3350:	0e 94 2b 1b 	call	0x3656	; 0x3656 <free>
    3354:	8e 81       	ldd	r24, Y+6	; 0x06
    3356:	9f 81       	ldd	r25, Y+7	; 0x07
    3358:	00 97       	sbiw	r24, 0x00	; 0
    335a:	11 f0       	breq	.+4      	; 0x3360 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    335c:	0e 94 2b 1b 	call	0x3656	; 0x3656 <free>
    3360:	88 81       	ld	r24, Y
    3362:	99 81       	ldd	r25, Y+1	; 0x01
    3364:	00 97       	sbiw	r24, 0x00	; 0
    3366:	11 f0       	breq	.+4      	; 0x336c <_ZN16PololuQTRSensorsD1Ev+0x2a>
    3368:	0e 94 2b 1b 	call	0x3656	; 0x3656 <free>
    336c:	8c 81       	ldd	r24, Y+4	; 0x04
    336e:	9d 81       	ldd	r25, Y+5	; 0x05
    3370:	00 97       	sbiw	r24, 0x00	; 0
    3372:	11 f0       	breq	.+4      	; 0x3378 <_ZN16PololuQTRSensorsD1Ev+0x36>
    3374:	0e 94 2b 1b 	call	0x3656	; 0x3656 <free>
    3378:	df 91       	pop	r29
    337a:	cf 91       	pop	r28
    337c:	08 95       	ret

0000337e <__udivmodqi4>:
    337e:	99 1b       	sub	r25, r25
    3380:	79 e0       	ldi	r23, 0x09	; 9
    3382:	04 c0       	rjmp	.+8      	; 0x338c <__udivmodqi4_ep>

00003384 <__udivmodqi4_loop>:
    3384:	99 1f       	adc	r25, r25
    3386:	96 17       	cp	r25, r22
    3388:	08 f0       	brcs	.+2      	; 0x338c <__udivmodqi4_ep>
    338a:	96 1b       	sub	r25, r22

0000338c <__udivmodqi4_ep>:
    338c:	88 1f       	adc	r24, r24
    338e:	7a 95       	dec	r23
    3390:	c9 f7       	brne	.-14     	; 0x3384 <__udivmodqi4_loop>
    3392:	80 95       	com	r24
    3394:	08 95       	ret

00003396 <__udivmodhi4>:
    3396:	aa 1b       	sub	r26, r26
    3398:	bb 1b       	sub	r27, r27
    339a:	51 e1       	ldi	r21, 0x11	; 17
    339c:	07 c0       	rjmp	.+14     	; 0x33ac <__udivmodhi4_ep>

0000339e <__udivmodhi4_loop>:
    339e:	aa 1f       	adc	r26, r26
    33a0:	bb 1f       	adc	r27, r27
    33a2:	a6 17       	cp	r26, r22
    33a4:	b7 07       	cpc	r27, r23
    33a6:	10 f0       	brcs	.+4      	; 0x33ac <__udivmodhi4_ep>
    33a8:	a6 1b       	sub	r26, r22
    33aa:	b7 0b       	sbc	r27, r23

000033ac <__udivmodhi4_ep>:
    33ac:	88 1f       	adc	r24, r24
    33ae:	99 1f       	adc	r25, r25
    33b0:	5a 95       	dec	r21
    33b2:	a9 f7       	brne	.-22     	; 0x339e <__udivmodhi4_loop>
    33b4:	80 95       	com	r24
    33b6:	90 95       	com	r25
    33b8:	bc 01       	movw	r22, r24
    33ba:	cd 01       	movw	r24, r26
    33bc:	08 95       	ret

000033be <__divmodhi4>:
    33be:	97 fb       	bst	r25, 7
    33c0:	07 2e       	mov	r0, r23
    33c2:	16 f4       	brtc	.+4      	; 0x33c8 <__divmodhi4+0xa>
    33c4:	00 94       	com	r0
    33c6:	07 d0       	rcall	.+14     	; 0x33d6 <__divmodhi4_neg1>
    33c8:	77 fd       	sbrc	r23, 7
    33ca:	09 d0       	rcall	.+18     	; 0x33de <__divmodhi4_neg2>
    33cc:	0e 94 cb 19 	call	0x3396	; 0x3396 <__udivmodhi4>
    33d0:	07 fc       	sbrc	r0, 7
    33d2:	05 d0       	rcall	.+10     	; 0x33de <__divmodhi4_neg2>
    33d4:	3e f4       	brtc	.+14     	; 0x33e4 <__divmodhi4_exit>

000033d6 <__divmodhi4_neg1>:
    33d6:	90 95       	com	r25
    33d8:	81 95       	neg	r24
    33da:	9f 4f       	sbci	r25, 0xFF	; 255
    33dc:	08 95       	ret

000033de <__divmodhi4_neg2>:
    33de:	70 95       	com	r23
    33e0:	61 95       	neg	r22
    33e2:	7f 4f       	sbci	r23, 0xFF	; 255

000033e4 <__divmodhi4_exit>:
    33e4:	08 95       	ret

000033e6 <__udivmodsi4>:
    33e6:	a1 e2       	ldi	r26, 0x21	; 33
    33e8:	1a 2e       	mov	r1, r26
    33ea:	aa 1b       	sub	r26, r26
    33ec:	bb 1b       	sub	r27, r27
    33ee:	fd 01       	movw	r30, r26
    33f0:	0d c0       	rjmp	.+26     	; 0x340c <__udivmodsi4_ep>

000033f2 <__udivmodsi4_loop>:
    33f2:	aa 1f       	adc	r26, r26
    33f4:	bb 1f       	adc	r27, r27
    33f6:	ee 1f       	adc	r30, r30
    33f8:	ff 1f       	adc	r31, r31
    33fa:	a2 17       	cp	r26, r18
    33fc:	b3 07       	cpc	r27, r19
    33fe:	e4 07       	cpc	r30, r20
    3400:	f5 07       	cpc	r31, r21
    3402:	20 f0       	brcs	.+8      	; 0x340c <__udivmodsi4_ep>
    3404:	a2 1b       	sub	r26, r18
    3406:	b3 0b       	sbc	r27, r19
    3408:	e4 0b       	sbc	r30, r20
    340a:	f5 0b       	sbc	r31, r21

0000340c <__udivmodsi4_ep>:
    340c:	66 1f       	adc	r22, r22
    340e:	77 1f       	adc	r23, r23
    3410:	88 1f       	adc	r24, r24
    3412:	99 1f       	adc	r25, r25
    3414:	1a 94       	dec	r1
    3416:	69 f7       	brne	.-38     	; 0x33f2 <__udivmodsi4_loop>
    3418:	60 95       	com	r22
    341a:	70 95       	com	r23
    341c:	80 95       	com	r24
    341e:	90 95       	com	r25
    3420:	9b 01       	movw	r18, r22
    3422:	ac 01       	movw	r20, r24
    3424:	bd 01       	movw	r22, r26
    3426:	cf 01       	movw	r24, r30
    3428:	08 95       	ret

0000342a <__divmodsi4>:
    342a:	05 2e       	mov	r0, r21
    342c:	97 fb       	bst	r25, 7
    342e:	1e f4       	brtc	.+6      	; 0x3436 <__divmodsi4+0xc>
    3430:	00 94       	com	r0
    3432:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__negsi2>
    3436:	57 fd       	sbrc	r21, 7
    3438:	07 d0       	rcall	.+14     	; 0x3448 <__divmodsi4_neg2>
    343a:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <__udivmodsi4>
    343e:	07 fc       	sbrc	r0, 7
    3440:	03 d0       	rcall	.+6      	; 0x3448 <__divmodsi4_neg2>
    3442:	4e f4       	brtc	.+18     	; 0x3456 <__divmodsi4_exit>
    3444:	0c 94 2c 1a 	jmp	0x3458	; 0x3458 <__negsi2>

00003448 <__divmodsi4_neg2>:
    3448:	50 95       	com	r21
    344a:	40 95       	com	r20
    344c:	30 95       	com	r19
    344e:	21 95       	neg	r18
    3450:	3f 4f       	sbci	r19, 0xFF	; 255
    3452:	4f 4f       	sbci	r20, 0xFF	; 255
    3454:	5f 4f       	sbci	r21, 0xFF	; 255

00003456 <__divmodsi4_exit>:
    3456:	08 95       	ret

00003458 <__negsi2>:
    3458:	90 95       	com	r25
    345a:	80 95       	com	r24
    345c:	70 95       	com	r23
    345e:	61 95       	neg	r22
    3460:	7f 4f       	sbci	r23, 0xFF	; 255
    3462:	8f 4f       	sbci	r24, 0xFF	; 255
    3464:	9f 4f       	sbci	r25, 0xFF	; 255
    3466:	08 95       	ret

00003468 <__umulhisi3>:
    3468:	a2 9f       	mul	r26, r18
    346a:	b0 01       	movw	r22, r0
    346c:	b3 9f       	mul	r27, r19
    346e:	c0 01       	movw	r24, r0
    3470:	a3 9f       	mul	r26, r19
    3472:	70 0d       	add	r23, r0
    3474:	81 1d       	adc	r24, r1
    3476:	11 24       	eor	r1, r1
    3478:	91 1d       	adc	r25, r1
    347a:	b2 9f       	mul	r27, r18
    347c:	70 0d       	add	r23, r0
    347e:	81 1d       	adc	r24, r1
    3480:	11 24       	eor	r1, r1
    3482:	91 1d       	adc	r25, r1
    3484:	08 95       	ret

00003486 <__muluhisi3>:
    3486:	0e 94 34 1a 	call	0x3468	; 0x3468 <__umulhisi3>
    348a:	a5 9f       	mul	r26, r21
    348c:	90 0d       	add	r25, r0
    348e:	b4 9f       	mul	r27, r20
    3490:	90 0d       	add	r25, r0
    3492:	a4 9f       	mul	r26, r20
    3494:	80 0d       	add	r24, r0
    3496:	91 1d       	adc	r25, r1
    3498:	11 24       	eor	r1, r1
    349a:	08 95       	ret

0000349c <__mulshisi3>:
    349c:	b7 ff       	sbrs	r27, 7
    349e:	0c 94 43 1a 	jmp	0x3486	; 0x3486 <__muluhisi3>

000034a2 <__mulohisi3>:
    34a2:	0e 94 43 1a 	call	0x3486	; 0x3486 <__muluhisi3>
    34a6:	82 1b       	sub	r24, r18
    34a8:	93 0b       	sbc	r25, r19
    34aa:	08 95       	ret

000034ac <__prologue_saves__>:
    34ac:	2f 92       	push	r2
    34ae:	3f 92       	push	r3
    34b0:	4f 92       	push	r4
    34b2:	5f 92       	push	r5
    34b4:	6f 92       	push	r6
    34b6:	7f 92       	push	r7
    34b8:	8f 92       	push	r8
    34ba:	9f 92       	push	r9
    34bc:	af 92       	push	r10
    34be:	bf 92       	push	r11
    34c0:	cf 92       	push	r12
    34c2:	df 92       	push	r13
    34c4:	ef 92       	push	r14
    34c6:	ff 92       	push	r15
    34c8:	0f 93       	push	r16
    34ca:	1f 93       	push	r17
    34cc:	cf 93       	push	r28
    34ce:	df 93       	push	r29
    34d0:	cd b7       	in	r28, 0x3d	; 61
    34d2:	de b7       	in	r29, 0x3e	; 62
    34d4:	ca 1b       	sub	r28, r26
    34d6:	db 0b       	sbc	r29, r27
    34d8:	0f b6       	in	r0, 0x3f	; 63
    34da:	f8 94       	cli
    34dc:	de bf       	out	0x3e, r29	; 62
    34de:	0f be       	out	0x3f, r0	; 63
    34e0:	cd bf       	out	0x3d, r28	; 61
    34e2:	09 94       	ijmp

000034e4 <__epilogue_restores__>:
    34e4:	2a 88       	ldd	r2, Y+18	; 0x12
    34e6:	39 88       	ldd	r3, Y+17	; 0x11
    34e8:	48 88       	ldd	r4, Y+16	; 0x10
    34ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    34ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    34ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    34f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    34f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    34f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    34f6:	b9 84       	ldd	r11, Y+9	; 0x09
    34f8:	c8 84       	ldd	r12, Y+8	; 0x08
    34fa:	df 80       	ldd	r13, Y+7	; 0x07
    34fc:	ee 80       	ldd	r14, Y+6	; 0x06
    34fe:	fd 80       	ldd	r15, Y+5	; 0x05
    3500:	0c 81       	ldd	r16, Y+4	; 0x04
    3502:	1b 81       	ldd	r17, Y+3	; 0x03
    3504:	aa 81       	ldd	r26, Y+2	; 0x02
    3506:	b9 81       	ldd	r27, Y+1	; 0x01
    3508:	ce 0f       	add	r28, r30
    350a:	d1 1d       	adc	r29, r1
    350c:	0f b6       	in	r0, 0x3f	; 63
    350e:	f8 94       	cli
    3510:	de bf       	out	0x3e, r29	; 62
    3512:	0f be       	out	0x3f, r0	; 63
    3514:	cd bf       	out	0x3d, r28	; 61
    3516:	ed 01       	movw	r28, r26
    3518:	08 95       	ret

0000351a <__tablejump2__>:
    351a:	ee 0f       	add	r30, r30
    351c:	ff 1f       	adc	r31, r31
    351e:	05 90       	lpm	r0, Z+
    3520:	f4 91       	lpm	r31, Z
    3522:	e0 2d       	mov	r30, r0
    3524:	09 94       	ijmp

00003526 <malloc>:
    3526:	0f 93       	push	r16
    3528:	1f 93       	push	r17
    352a:	cf 93       	push	r28
    352c:	df 93       	push	r29
    352e:	82 30       	cpi	r24, 0x02	; 2
    3530:	91 05       	cpc	r25, r1
    3532:	10 f4       	brcc	.+4      	; 0x3538 <malloc+0x12>
    3534:	82 e0       	ldi	r24, 0x02	; 2
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	e0 91 6c 02 	lds	r30, 0x026C	; 0x80026c <__flp>
    353c:	f0 91 6d 02 	lds	r31, 0x026D	; 0x80026d <__flp+0x1>
    3540:	20 e0       	ldi	r18, 0x00	; 0
    3542:	30 e0       	ldi	r19, 0x00	; 0
    3544:	a0 e0       	ldi	r26, 0x00	; 0
    3546:	b0 e0       	ldi	r27, 0x00	; 0
    3548:	30 97       	sbiw	r30, 0x00	; 0
    354a:	19 f1       	breq	.+70     	; 0x3592 <malloc+0x6c>
    354c:	40 81       	ld	r20, Z
    354e:	51 81       	ldd	r21, Z+1	; 0x01
    3550:	02 81       	ldd	r16, Z+2	; 0x02
    3552:	13 81       	ldd	r17, Z+3	; 0x03
    3554:	48 17       	cp	r20, r24
    3556:	59 07       	cpc	r21, r25
    3558:	c8 f0       	brcs	.+50     	; 0x358c <malloc+0x66>
    355a:	84 17       	cp	r24, r20
    355c:	95 07       	cpc	r25, r21
    355e:	69 f4       	brne	.+26     	; 0x357a <malloc+0x54>
    3560:	10 97       	sbiw	r26, 0x00	; 0
    3562:	31 f0       	breq	.+12     	; 0x3570 <malloc+0x4a>
    3564:	12 96       	adiw	r26, 0x02	; 2
    3566:	0c 93       	st	X, r16
    3568:	12 97       	sbiw	r26, 0x02	; 2
    356a:	13 96       	adiw	r26, 0x03	; 3
    356c:	1c 93       	st	X, r17
    356e:	27 c0       	rjmp	.+78     	; 0x35be <malloc+0x98>
    3570:	00 93 6c 02 	sts	0x026C, r16	; 0x80026c <__flp>
    3574:	10 93 6d 02 	sts	0x026D, r17	; 0x80026d <__flp+0x1>
    3578:	22 c0       	rjmp	.+68     	; 0x35be <malloc+0x98>
    357a:	21 15       	cp	r18, r1
    357c:	31 05       	cpc	r19, r1
    357e:	19 f0       	breq	.+6      	; 0x3586 <malloc+0x60>
    3580:	42 17       	cp	r20, r18
    3582:	53 07       	cpc	r21, r19
    3584:	18 f4       	brcc	.+6      	; 0x358c <malloc+0x66>
    3586:	9a 01       	movw	r18, r20
    3588:	bd 01       	movw	r22, r26
    358a:	ef 01       	movw	r28, r30
    358c:	df 01       	movw	r26, r30
    358e:	f8 01       	movw	r30, r16
    3590:	db cf       	rjmp	.-74     	; 0x3548 <malloc+0x22>
    3592:	21 15       	cp	r18, r1
    3594:	31 05       	cpc	r19, r1
    3596:	f9 f0       	breq	.+62     	; 0x35d6 <malloc+0xb0>
    3598:	28 1b       	sub	r18, r24
    359a:	39 0b       	sbc	r19, r25
    359c:	24 30       	cpi	r18, 0x04	; 4
    359e:	31 05       	cpc	r19, r1
    35a0:	80 f4       	brcc	.+32     	; 0x35c2 <malloc+0x9c>
    35a2:	8a 81       	ldd	r24, Y+2	; 0x02
    35a4:	9b 81       	ldd	r25, Y+3	; 0x03
    35a6:	61 15       	cp	r22, r1
    35a8:	71 05       	cpc	r23, r1
    35aa:	21 f0       	breq	.+8      	; 0x35b4 <malloc+0x8e>
    35ac:	fb 01       	movw	r30, r22
    35ae:	93 83       	std	Z+3, r25	; 0x03
    35b0:	82 83       	std	Z+2, r24	; 0x02
    35b2:	04 c0       	rjmp	.+8      	; 0x35bc <malloc+0x96>
    35b4:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <__flp+0x1>
    35b8:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <__flp>
    35bc:	fe 01       	movw	r30, r28
    35be:	32 96       	adiw	r30, 0x02	; 2
    35c0:	44 c0       	rjmp	.+136    	; 0x364a <malloc+0x124>
    35c2:	fe 01       	movw	r30, r28
    35c4:	e2 0f       	add	r30, r18
    35c6:	f3 1f       	adc	r31, r19
    35c8:	81 93       	st	Z+, r24
    35ca:	91 93       	st	Z+, r25
    35cc:	22 50       	subi	r18, 0x02	; 2
    35ce:	31 09       	sbc	r19, r1
    35d0:	39 83       	std	Y+1, r19	; 0x01
    35d2:	28 83       	st	Y, r18
    35d4:	3a c0       	rjmp	.+116    	; 0x364a <malloc+0x124>
    35d6:	20 91 6a 02 	lds	r18, 0x026A	; 0x80026a <__brkval>
    35da:	30 91 6b 02 	lds	r19, 0x026B	; 0x80026b <__brkval+0x1>
    35de:	23 2b       	or	r18, r19
    35e0:	41 f4       	brne	.+16     	; 0x35f2 <malloc+0xcc>
    35e2:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__malloc_heap_start>
    35e6:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__malloc_heap_start+0x1>
    35ea:	30 93 6b 02 	sts	0x026B, r19	; 0x80026b <__brkval+0x1>
    35ee:	20 93 6a 02 	sts	0x026A, r18	; 0x80026a <__brkval>
    35f2:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__malloc_heap_end>
    35f6:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__malloc_heap_end+0x1>
    35fa:	21 15       	cp	r18, r1
    35fc:	31 05       	cpc	r19, r1
    35fe:	41 f4       	brne	.+16     	; 0x3610 <malloc+0xea>
    3600:	2d b7       	in	r18, 0x3d	; 61
    3602:	3e b7       	in	r19, 0x3e	; 62
    3604:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__malloc_margin>
    3608:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__malloc_margin+0x1>
    360c:	24 1b       	sub	r18, r20
    360e:	35 0b       	sbc	r19, r21
    3610:	e0 91 6a 02 	lds	r30, 0x026A	; 0x80026a <__brkval>
    3614:	f0 91 6b 02 	lds	r31, 0x026B	; 0x80026b <__brkval+0x1>
    3618:	e2 17       	cp	r30, r18
    361a:	f3 07       	cpc	r31, r19
    361c:	a0 f4       	brcc	.+40     	; 0x3646 <malloc+0x120>
    361e:	2e 1b       	sub	r18, r30
    3620:	3f 0b       	sbc	r19, r31
    3622:	28 17       	cp	r18, r24
    3624:	39 07       	cpc	r19, r25
    3626:	78 f0       	brcs	.+30     	; 0x3646 <malloc+0x120>
    3628:	ac 01       	movw	r20, r24
    362a:	4e 5f       	subi	r20, 0xFE	; 254
    362c:	5f 4f       	sbci	r21, 0xFF	; 255
    362e:	24 17       	cp	r18, r20
    3630:	35 07       	cpc	r19, r21
    3632:	48 f0       	brcs	.+18     	; 0x3646 <malloc+0x120>
    3634:	4e 0f       	add	r20, r30
    3636:	5f 1f       	adc	r21, r31
    3638:	50 93 6b 02 	sts	0x026B, r21	; 0x80026b <__brkval+0x1>
    363c:	40 93 6a 02 	sts	0x026A, r20	; 0x80026a <__brkval>
    3640:	81 93       	st	Z+, r24
    3642:	91 93       	st	Z+, r25
    3644:	02 c0       	rjmp	.+4      	; 0x364a <malloc+0x124>
    3646:	e0 e0       	ldi	r30, 0x00	; 0
    3648:	f0 e0       	ldi	r31, 0x00	; 0
    364a:	cf 01       	movw	r24, r30
    364c:	df 91       	pop	r29
    364e:	cf 91       	pop	r28
    3650:	1f 91       	pop	r17
    3652:	0f 91       	pop	r16
    3654:	08 95       	ret

00003656 <free>:
    3656:	cf 93       	push	r28
    3658:	df 93       	push	r29
    365a:	00 97       	sbiw	r24, 0x00	; 0
    365c:	09 f4       	brne	.+2      	; 0x3660 <free+0xa>
    365e:	81 c0       	rjmp	.+258    	; 0x3762 <free+0x10c>
    3660:	fc 01       	movw	r30, r24
    3662:	32 97       	sbiw	r30, 0x02	; 2
    3664:	13 82       	std	Z+3, r1	; 0x03
    3666:	12 82       	std	Z+2, r1	; 0x02
    3668:	a0 91 6c 02 	lds	r26, 0x026C	; 0x80026c <__flp>
    366c:	b0 91 6d 02 	lds	r27, 0x026D	; 0x80026d <__flp+0x1>
    3670:	10 97       	sbiw	r26, 0x00	; 0
    3672:	81 f4       	brne	.+32     	; 0x3694 <free+0x3e>
    3674:	20 81       	ld	r18, Z
    3676:	31 81       	ldd	r19, Z+1	; 0x01
    3678:	82 0f       	add	r24, r18
    367a:	93 1f       	adc	r25, r19
    367c:	20 91 6a 02 	lds	r18, 0x026A	; 0x80026a <__brkval>
    3680:	30 91 6b 02 	lds	r19, 0x026B	; 0x80026b <__brkval+0x1>
    3684:	28 17       	cp	r18, r24
    3686:	39 07       	cpc	r19, r25
    3688:	51 f5       	brne	.+84     	; 0x36de <free+0x88>
    368a:	f0 93 6b 02 	sts	0x026B, r31	; 0x80026b <__brkval+0x1>
    368e:	e0 93 6a 02 	sts	0x026A, r30	; 0x80026a <__brkval>
    3692:	67 c0       	rjmp	.+206    	; 0x3762 <free+0x10c>
    3694:	ed 01       	movw	r28, r26
    3696:	20 e0       	ldi	r18, 0x00	; 0
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	ce 17       	cp	r28, r30
    369c:	df 07       	cpc	r29, r31
    369e:	40 f4       	brcc	.+16     	; 0x36b0 <free+0x5a>
    36a0:	4a 81       	ldd	r20, Y+2	; 0x02
    36a2:	5b 81       	ldd	r21, Y+3	; 0x03
    36a4:	9e 01       	movw	r18, r28
    36a6:	41 15       	cp	r20, r1
    36a8:	51 05       	cpc	r21, r1
    36aa:	f1 f0       	breq	.+60     	; 0x36e8 <free+0x92>
    36ac:	ea 01       	movw	r28, r20
    36ae:	f5 cf       	rjmp	.-22     	; 0x369a <free+0x44>
    36b0:	d3 83       	std	Z+3, r29	; 0x03
    36b2:	c2 83       	std	Z+2, r28	; 0x02
    36b4:	40 81       	ld	r20, Z
    36b6:	51 81       	ldd	r21, Z+1	; 0x01
    36b8:	84 0f       	add	r24, r20
    36ba:	95 1f       	adc	r25, r21
    36bc:	c8 17       	cp	r28, r24
    36be:	d9 07       	cpc	r29, r25
    36c0:	59 f4       	brne	.+22     	; 0x36d8 <free+0x82>
    36c2:	88 81       	ld	r24, Y
    36c4:	99 81       	ldd	r25, Y+1	; 0x01
    36c6:	84 0f       	add	r24, r20
    36c8:	95 1f       	adc	r25, r21
    36ca:	02 96       	adiw	r24, 0x02	; 2
    36cc:	91 83       	std	Z+1, r25	; 0x01
    36ce:	80 83       	st	Z, r24
    36d0:	8a 81       	ldd	r24, Y+2	; 0x02
    36d2:	9b 81       	ldd	r25, Y+3	; 0x03
    36d4:	93 83       	std	Z+3, r25	; 0x03
    36d6:	82 83       	std	Z+2, r24	; 0x02
    36d8:	21 15       	cp	r18, r1
    36da:	31 05       	cpc	r19, r1
    36dc:	29 f4       	brne	.+10     	; 0x36e8 <free+0x92>
    36de:	f0 93 6d 02 	sts	0x026D, r31	; 0x80026d <__flp+0x1>
    36e2:	e0 93 6c 02 	sts	0x026C, r30	; 0x80026c <__flp>
    36e6:	3d c0       	rjmp	.+122    	; 0x3762 <free+0x10c>
    36e8:	e9 01       	movw	r28, r18
    36ea:	fb 83       	std	Y+3, r31	; 0x03
    36ec:	ea 83       	std	Y+2, r30	; 0x02
    36ee:	49 91       	ld	r20, Y+
    36f0:	59 91       	ld	r21, Y+
    36f2:	c4 0f       	add	r28, r20
    36f4:	d5 1f       	adc	r29, r21
    36f6:	ec 17       	cp	r30, r28
    36f8:	fd 07       	cpc	r31, r29
    36fa:	61 f4       	brne	.+24     	; 0x3714 <free+0xbe>
    36fc:	80 81       	ld	r24, Z
    36fe:	91 81       	ldd	r25, Z+1	; 0x01
    3700:	84 0f       	add	r24, r20
    3702:	95 1f       	adc	r25, r21
    3704:	02 96       	adiw	r24, 0x02	; 2
    3706:	e9 01       	movw	r28, r18
    3708:	99 83       	std	Y+1, r25	; 0x01
    370a:	88 83       	st	Y, r24
    370c:	82 81       	ldd	r24, Z+2	; 0x02
    370e:	93 81       	ldd	r25, Z+3	; 0x03
    3710:	9b 83       	std	Y+3, r25	; 0x03
    3712:	8a 83       	std	Y+2, r24	; 0x02
    3714:	e0 e0       	ldi	r30, 0x00	; 0
    3716:	f0 e0       	ldi	r31, 0x00	; 0
    3718:	12 96       	adiw	r26, 0x02	; 2
    371a:	8d 91       	ld	r24, X+
    371c:	9c 91       	ld	r25, X
    371e:	13 97       	sbiw	r26, 0x03	; 3
    3720:	00 97       	sbiw	r24, 0x00	; 0
    3722:	19 f0       	breq	.+6      	; 0x372a <free+0xd4>
    3724:	fd 01       	movw	r30, r26
    3726:	dc 01       	movw	r26, r24
    3728:	f7 cf       	rjmp	.-18     	; 0x3718 <free+0xc2>
    372a:	8d 91       	ld	r24, X+
    372c:	9c 91       	ld	r25, X
    372e:	11 97       	sbiw	r26, 0x01	; 1
    3730:	9d 01       	movw	r18, r26
    3732:	2e 5f       	subi	r18, 0xFE	; 254
    3734:	3f 4f       	sbci	r19, 0xFF	; 255
    3736:	82 0f       	add	r24, r18
    3738:	93 1f       	adc	r25, r19
    373a:	20 91 6a 02 	lds	r18, 0x026A	; 0x80026a <__brkval>
    373e:	30 91 6b 02 	lds	r19, 0x026B	; 0x80026b <__brkval+0x1>
    3742:	28 17       	cp	r18, r24
    3744:	39 07       	cpc	r19, r25
    3746:	69 f4       	brne	.+26     	; 0x3762 <free+0x10c>
    3748:	30 97       	sbiw	r30, 0x00	; 0
    374a:	29 f4       	brne	.+10     	; 0x3756 <free+0x100>
    374c:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <__flp+0x1>
    3750:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <__flp>
    3754:	02 c0       	rjmp	.+4      	; 0x375a <free+0x104>
    3756:	13 82       	std	Z+3, r1	; 0x03
    3758:	12 82       	std	Z+2, r1	; 0x02
    375a:	b0 93 6b 02 	sts	0x026B, r27	; 0x80026b <__brkval+0x1>
    375e:	a0 93 6a 02 	sts	0x026A, r26	; 0x80026a <__brkval>
    3762:	df 91       	pop	r29
    3764:	cf 91       	pop	r28
    3766:	08 95       	ret

00003768 <__do_global_dtors>:
    3768:	10 e0       	ldi	r17, 0x00	; 0
    376a:	cc e5       	ldi	r28, 0x5C	; 92
    376c:	d0 e0       	ldi	r29, 0x00	; 0
    376e:	04 c0       	rjmp	.+8      	; 0x3778 <__do_global_dtors+0x10>
    3770:	fe 01       	movw	r30, r28
    3772:	0e 94 8d 1a 	call	0x351a	; 0x351a <__tablejump2__>
    3776:	21 96       	adiw	r28, 0x01	; 1
    3778:	cd 35       	cpi	r28, 0x5D	; 93
    377a:	d1 07       	cpc	r29, r17
    377c:	c9 f7       	brne	.-14     	; 0x3770 <__do_global_dtors+0x8>
    377e:	f8 94       	cli

00003780 <__stop_program>:
    3780:	ff cf       	rjmp	.-2      	; 0x3780 <__stop_program>
