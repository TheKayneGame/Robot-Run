
RobotRunGrid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000778  000007ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000778  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000082c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000946  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007c3  00000000  00000000  00001202  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032b  00000000  00000000  000019c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  00001cf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fb  00000000  00000000  00001df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000040c  00000000  00000000  000021ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000025fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e7       	ldi	r30, 0x78	; 120
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <main>
  8e:	0c 94 ba 03 	jmp	0x774	; 0x774 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <swapOne>:
	temp = *secondYValue;                                                                               //swap Y-coordinates
	*secondYValue = *firstYValue;
	*firstYValue = temp;
}

void swapOne(float *firstValue, float *secondValue) {
  96:	cf 92       	push	r12
  98:	df 92       	push	r13
  9a:	ef 92       	push	r14
  9c:	ff 92       	push	r15
  9e:	0f 93       	push	r16
  a0:	1f 93       	push	r17
	float temp;

	temp = *secondValue;
  a2:	fb 01       	movw	r30, r22
  a4:	00 81       	ld	r16, Z
  a6:	11 81       	ldd	r17, Z+1	; 0x01
  a8:	22 81       	ldd	r18, Z+2	; 0x02
  aa:	33 81       	ldd	r19, Z+3	; 0x03
	*secondValue = *firstValue;
  ac:	fc 01       	movw	r30, r24
  ae:	c0 80       	ld	r12, Z
  b0:	d1 80       	ldd	r13, Z+1	; 0x01
  b2:	e2 80       	ldd	r14, Z+2	; 0x02
  b4:	f3 80       	ldd	r15, Z+3	; 0x03
  b6:	fb 01       	movw	r30, r22
  b8:	c0 82       	st	Z, r12
  ba:	d1 82       	std	Z+1, r13	; 0x01
  bc:	e2 82       	std	Z+2, r14	; 0x02
  be:	f3 82       	std	Z+3, r15	; 0x03
	*firstValue = temp;
  c0:	fc 01       	movw	r30, r24
  c2:	00 83       	st	Z, r16
  c4:	11 83       	std	Z+1, r17	; 0x01
  c6:	22 83       	std	Z+2, r18	; 0x02
  c8:	33 83       	std	Z+3, r19	; 0x03
}
  ca:	1f 91       	pop	r17
  cc:	0f 91       	pop	r16
  ce:	ff 90       	pop	r15
  d0:	ef 90       	pop	r14
  d2:	df 90       	pop	r13
  d4:	cf 90       	pop	r12
  d6:	08 95       	ret

000000d8 <sortOrder>:

void sortOrder(int X[], int Y[]) {
  d8:	2f 92       	push	r2
  da:	3f 92       	push	r3
  dc:	4f 92       	push	r4
  de:	5f 92       	push	r5
  e0:	6f 92       	push	r6
  e2:	7f 92       	push	r7
  e4:	8f 92       	push	r8
  e6:	9f 92       	push	r9
  e8:	af 92       	push	r10
  ea:	bf 92       	push	r11
  ec:	cf 92       	push	r12
  ee:	df 92       	push	r13
  f0:	ef 92       	push	r14
  f2:	ff 92       	push	r15
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
 100:	a5 97       	sbiw	r28, 0x25	; 37
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	f8 94       	cli
 106:	de bf       	out	0x3e, r29	; 62
 108:	0f be       	out	0x3f, r0	; 63
 10a:	cd bf       	out	0x3d, r28	; 61
 10c:	9b a3       	std	Y+35, r25	; 0x23
 10e:	8a a3       	std	Y+34, r24	; 0x22
 110:	6c a3       	std	Y+36, r22	; 0x24
 112:	7d a3       	std	Y+37, r23	; 0x25
 114:	06 96       	adiw	r24, 0x06	; 6
 116:	98 a3       	std	Y+32, r25	; 0x20
 118:	8f 8f       	std	Y+31, r24	; 0x1f
 11a:	b6 c0       	rjmp	.+364    	; 0x288 <sortOrder+0x1b0>
 11c:	7e 8e       	std	Y+30, r7	; 0x1e
 11e:	6d 8e       	std	Y+29, r6	; 0x1d

	while (check != 1) {
		orderCorrect = 1;

		for (int i = 0; i < (sizeOfOrder - 1); i++) {
			D[i] = sqrt((pow(X[i], 2)) + (pow(Y[i], 2)));      //phytagoras
 120:	f3 01       	movw	r30, r6
 122:	01 90       	ld	r0, Z+
 124:	f0 81       	ld	r31, Z
 126:	e0 2d       	mov	r30, r0
 128:	fa 8f       	std	Y+26, r31	; 0x1a
 12a:	e9 8f       	std	Y+25, r30	; 0x19
 12c:	bf 01       	movw	r22, r30
 12e:	ff 0f       	add	r31, r31
 130:	88 0b       	sbc	r24, r24
 132:	99 0b       	sbc	r25, r25
 134:	0e 94 3d 02 	call	0x47a	; 0x47a <__floatsisf>
 138:	6b 01       	movw	r12, r22
 13a:	7c 01       	movw	r14, r24
 13c:	3c 8e       	std	Y+28, r3	; 0x1c
 13e:	2b 8e       	std	Y+27, r2	; 0x1b
 140:	f1 01       	movw	r30, r2
 142:	00 81       	ld	r16, Z
 144:	11 81       	ldd	r17, Z+1	; 0x01
 146:	b8 01       	movw	r22, r16
 148:	01 2e       	mov	r0, r17
 14a:	00 0c       	add	r0, r0
 14c:	88 0b       	sbc	r24, r24
 14e:	99 0b       	sbc	r25, r25
 150:	0e 94 3d 02 	call	0x47a	; 0x47a <__floatsisf>
 154:	4b 01       	movw	r8, r22
 156:	5c 01       	movw	r10, r24
 158:	9b 01       	movw	r18, r22
 15a:	ac 01       	movw	r20, r24
 15c:	0e 94 ce 02 	call	0x59c	; 0x59c <__mulsf3>
 160:	69 8b       	std	Y+17, r22	; 0x11
 162:	7a 8b       	std	Y+18, r23	; 0x12
 164:	8b 8b       	std	Y+19, r24	; 0x13
 166:	9c 8b       	std	Y+20, r25	; 0x14
 168:	a5 01       	movw	r20, r10
 16a:	94 01       	movw	r18, r8
 16c:	c5 01       	movw	r24, r10
 16e:	b4 01       	movw	r22, r8
 170:	0e 94 ce 02 	call	0x59c	; 0x59c <__mulsf3>
 174:	4b 01       	movw	r8, r22
 176:	5c 01       	movw	r10, r24
 178:	a7 01       	movw	r20, r14
 17a:	96 01       	movw	r18, r12
 17c:	c7 01       	movw	r24, r14
 17e:	b6 01       	movw	r22, r12
 180:	0e 94 ce 02 	call	0x59c	; 0x59c <__mulsf3>
 184:	9b 01       	movw	r18, r22
 186:	ac 01       	movw	r20, r24
 188:	c5 01       	movw	r24, r10
 18a:	b4 01       	movw	r22, r8
 18c:	0e 94 99 01 	call	0x332	; 0x332 <__addsf3>
 190:	0e 94 41 03 	call	0x682	; 0x682 <sqrt>
 194:	6b 01       	movw	r12, r22
 196:	7c 01       	movw	r14, r24
 198:	f2 01       	movw	r30, r4
 19a:	61 93       	st	Z+, r22
 19c:	71 93       	st	Z+, r23
 19e:	81 93       	st	Z+, r24
 1a0:	91 93       	st	Z+, r25
 1a2:	2f 01       	movw	r4, r30
 1a4:	e9 8b       	std	Y+17, r30	; 0x11
 1a6:	59 a2       	std	Y+33, r5	; 0x21
			firstDistanceValue = D[i];
			secondDistanceValue = D[i + 1];
 1a8:	80 80       	ld	r8, Z
 1aa:	91 80       	ldd	r9, Z+1	; 0x01
 1ac:	a2 80       	ldd	r10, Z+2	; 0x02
 1ae:	b3 80       	ldd	r11, Z+3	; 0x03

			if (D[i] > D[i + 1]) {
 1b0:	a5 01       	movw	r20, r10
 1b2:	94 01       	movw	r18, r8
 1b4:	0e 94 c9 02 	call	0x592	; 0x592 <__gesf2>
 1b8:	18 16       	cp	r1, r24
 1ba:	d4 f4       	brge	.+52     	; 0x1f0 <sortOrder+0x118>
				swapOne(&D[i], &D[i + 1]);
 1bc:	b2 01       	movw	r22, r4
 1be:	8d 89       	ldd	r24, Y+21	; 0x15
 1c0:	9e 89       	ldd	r25, Y+22	; 0x16
 1c2:	0e 94 4b 00 	call	0x96	; 0x96 <swapOne>
#include <math.h>

void swapTwo( int *firstXValue, int *secondXValue, int *firstYValue, int *secondYValue){
	int temp;

	temp = *secondXValue;                                                                               //swap X-coordinates
 1c6:	f3 01       	movw	r30, r6
 1c8:	82 81       	ldd	r24, Z+2	; 0x02
 1ca:	93 81       	ldd	r25, Z+3	; 0x03
	*secondXValue = *firstXValue;
 1cc:	20 81       	ld	r18, Z
 1ce:	31 81       	ldd	r19, Z+1	; 0x01
 1d0:	33 83       	std	Z+3, r19	; 0x03
 1d2:	22 83       	std	Z+2, r18	; 0x02
	*firstXValue = temp;
 1d4:	91 83       	std	Z+1, r25	; 0x01
 1d6:	80 83       	st	Z, r24

	temp = *secondYValue;                                                                               //swap Y-coordinates
 1d8:	f1 01       	movw	r30, r2
 1da:	82 81       	ldd	r24, Z+2	; 0x02
 1dc:	93 81       	ldd	r25, Z+3	; 0x03
	*secondYValue = *firstYValue;
 1de:	20 81       	ld	r18, Z
 1e0:	31 81       	ldd	r19, Z+1	; 0x01
 1e2:	33 83       	std	Z+3, r19	; 0x03
 1e4:	22 83       	std	Z+2, r18	; 0x02
	*firstYValue = temp;
 1e6:	91 83       	std	Z+1, r25	; 0x01
 1e8:	80 83       	st	Z, r24
			secondDistanceValue = D[i + 1];

			if (D[i] > D[i + 1]) {
				swapOne(&D[i], &D[i + 1]);
				swapTwo(&X[i], &X[i + 1], &Y[i], &Y[i + 1]);
				orderCorrect = 0;
 1ea:	1f 8a       	std	Y+23, r1	; 0x17
 1ec:	18 8e       	std	Y+24, r1	; 0x18
 1ee:	36 c0       	rjmp	.+108    	; 0x25c <sortOrder+0x184>
				} else if ((firstDistanceValue == secondDistanceValue) && (Y[i] == Y[i + 1])) {
 1f0:	c7 01       	movw	r24, r14
 1f2:	b6 01       	movw	r22, r12
 1f4:	0e 94 05 02 	call	0x40a	; 0x40a <__fixsfsi>
 1f8:	7b 01       	movw	r14, r22
 1fa:	c5 01       	movw	r24, r10
 1fc:	b4 01       	movw	r22, r8
 1fe:	0e 94 05 02 	call	0x40a	; 0x40a <__fixsfsi>
 202:	e6 16       	cp	r14, r22
 204:	f7 06       	cpc	r15, r23
 206:	51 f5       	brne	.+84     	; 0x25c <sortOrder+0x184>
 208:	eb 8d       	ldd	r30, Y+27	; 0x1b
 20a:	fc 8d       	ldd	r31, Y+28	; 0x1c
 20c:	82 81       	ldd	r24, Z+2	; 0x02
 20e:	93 81       	ldd	r25, Z+3	; 0x03
 210:	08 17       	cp	r16, r24
 212:	19 07       	cpc	r17, r25
 214:	19 f5       	brne	.+70     	; 0x25c <sortOrder+0x184>
				if (X[i] < X[i + 1]) {
 216:	ed 8d       	ldd	r30, Y+29	; 0x1d
 218:	fe 8d       	ldd	r31, Y+30	; 0x1e
 21a:	82 81       	ldd	r24, Z+2	; 0x02
 21c:	93 81       	ldd	r25, Z+3	; 0x03
 21e:	29 8d       	ldd	r18, Y+25	; 0x19
 220:	3a 8d       	ldd	r19, Y+26	; 0x1a
 222:	28 17       	cp	r18, r24
 224:	39 07       	cpc	r19, r25
 226:	d4 f4       	brge	.+52     	; 0x25c <sortOrder+0x184>
					swapOne(&D[i], &D[i + 1]);
 228:	69 89       	ldd	r22, Y+17	; 0x11
 22a:	79 a1       	ldd	r23, Y+33	; 0x21
 22c:	8d 89       	ldd	r24, Y+21	; 0x15
 22e:	9e 89       	ldd	r25, Y+22	; 0x16
 230:	0e 94 4b 00 	call	0x96	; 0x96 <swapOne>
#include <math.h>

void swapTwo( int *firstXValue, int *secondXValue, int *firstYValue, int *secondYValue){
	int temp;

	temp = *secondXValue;                                                                               //swap X-coordinates
 234:	ed 8d       	ldd	r30, Y+29	; 0x1d
 236:	fe 8d       	ldd	r31, Y+30	; 0x1e
 238:	82 81       	ldd	r24, Z+2	; 0x02
 23a:	93 81       	ldd	r25, Z+3	; 0x03
	*secondXValue = *firstXValue;
 23c:	20 81       	ld	r18, Z
 23e:	31 81       	ldd	r19, Z+1	; 0x01
 240:	33 83       	std	Z+3, r19	; 0x03
 242:	22 83       	std	Z+2, r18	; 0x02
	*firstXValue = temp;
 244:	91 83       	std	Z+1, r25	; 0x01
 246:	80 83       	st	Z, r24

	temp = *secondYValue;                                                                               //swap Y-coordinates
 248:	eb 8d       	ldd	r30, Y+27	; 0x1b
 24a:	fc 8d       	ldd	r31, Y+28	; 0x1c
 24c:	82 81       	ldd	r24, Z+2	; 0x02
 24e:	93 81       	ldd	r25, Z+3	; 0x03
	*secondYValue = *firstYValue;
 250:	20 81       	ld	r18, Z
 252:	31 81       	ldd	r19, Z+1	; 0x01
 254:	33 83       	std	Z+3, r19	; 0x03
 256:	22 83       	std	Z+2, r18	; 0x02
	*firstYValue = temp;
 258:	91 83       	std	Z+1, r25	; 0x01
 25a:	80 83       	st	Z, r24
 25c:	f2 e0       	ldi	r31, 0x02	; 2
 25e:	6f 0e       	add	r6, r31
 260:	71 1c       	adc	r7, r1
 262:	22 e0       	ldi	r18, 0x02	; 2
 264:	22 0e       	add	r2, r18
 266:	31 1c       	adc	r3, r1
 268:	8d 89       	ldd	r24, Y+21	; 0x15
 26a:	9e 89       	ldd	r25, Y+22	; 0x16
 26c:	04 96       	adiw	r24, 0x04	; 4
 26e:	9e 8b       	std	Y+22, r25	; 0x16
 270:	8d 8b       	std	Y+21, r24	; 0x15
	float D[sizeOfOrder];

	while (check != 1) {
		orderCorrect = 1;

		for (int i = 0; i < (sizeOfOrder - 1); i++) {
 272:	ef 8d       	ldd	r30, Y+31	; 0x1f
 274:	f8 a1       	ldd	r31, Y+32	; 0x20
 276:	6e 16       	cp	r6, r30
 278:	7f 06       	cpc	r7, r31
 27a:	09 f0       	breq	.+2      	; 0x27e <sortOrder+0x1a6>
 27c:	4f cf       	rjmp	.-354    	; 0x11c <sortOrder+0x44>
					swapOne(&D[i], &D[i + 1]);
					swapTwo(&X[i], &X[i + 1], &Y[i], &Y[i + 1]);
				}
			}
		}
		if (orderCorrect == 1) {
 27e:	2f 89       	ldd	r18, Y+23	; 0x17
 280:	38 8d       	ldd	r19, Y+24	; 0x18
 282:	21 30       	cpi	r18, 0x01	; 1
 284:	31 05       	cpc	r19, r1
 286:	69 f0       	breq	.+26     	; 0x2a2 <sortOrder+0x1ca>
 288:	6a a0       	ldd	r6, Y+34	; 0x22
 28a:	7b a0       	ldd	r7, Y+35	; 0x23
 28c:	2c a0       	ldd	r2, Y+36	; 0x24
 28e:	3d a0       	ldd	r3, Y+37	; 0x25
 290:	ce 01       	movw	r24, r28
 292:	01 96       	adiw	r24, 0x01	; 1
 294:	2c 01       	movw	r4, r24
	temp = *secondValue;
	*secondValue = *firstValue;
	*firstValue = temp;
}

void sortOrder(int X[], int Y[]) {
 296:	9e 8b       	std	Y+22, r25	; 0x16
 298:	8d 8b       	std	Y+21, r24	; 0x15
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	9f 8b       	std	Y+23, r25	; 0x17
 29e:	18 8e       	std	Y+24, r1	; 0x18
 2a0:	3d cf       	rjmp	.-390    	; 0x11c <sortOrder+0x44>
		}
		if (orderCorrect == 1) {
			check = 1;
		}
	}
 2a2:	a5 96       	adiw	r28, 0x25	; 37
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	f8 94       	cli
 2a8:	de bf       	out	0x3e, r29	; 62
 2aa:	0f be       	out	0x3f, r0	; 63
 2ac:	cd bf       	out	0x3d, r28	; 61
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	1f 91       	pop	r17
 2b4:	0f 91       	pop	r16
 2b6:	ff 90       	pop	r15
 2b8:	ef 90       	pop	r14
 2ba:	df 90       	pop	r13
 2bc:	cf 90       	pop	r12
 2be:	bf 90       	pop	r11
 2c0:	af 90       	pop	r10
 2c2:	9f 90       	pop	r9
 2c4:	8f 90       	pop	r8
 2c6:	7f 90       	pop	r7
 2c8:	6f 90       	pop	r6
 2ca:	5f 90       	pop	r5
 2cc:	4f 90       	pop	r4
 2ce:	3f 90       	pop	r3
 2d0:	2f 90       	pop	r2
 2d2:	08 95       	ret

000002d4 <main>:
 Y = motor 2
 */

#include "Grid.h"

int main(){
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	cd b7       	in	r28, 0x3d	; 61
 2da:	de b7       	in	r29, 0x3e	; 62
 2dc:	60 97       	sbiw	r28, 0x10	; 16
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	f8 94       	cli
 2e2:	de bf       	out	0x3e, r29	; 62
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	cd bf       	out	0x3d, r28	; 61
	
	int orderX[sizeOfOrder] = { 2, 5, 3, 4};    // replace with user input
 2e8:	88 e0       	ldi	r24, 0x08	; 8
 2ea:	e0 e0       	ldi	r30, 0x00	; 0
 2ec:	f1 e0       	ldi	r31, 0x01	; 1
 2ee:	de 01       	movw	r26, r28
 2f0:	11 96       	adiw	r26, 0x01	; 1
 2f2:	01 90       	ld	r0, Z+
 2f4:	0d 92       	st	X+, r0
 2f6:	8a 95       	dec	r24
 2f8:	e1 f7       	brne	.-8      	; 0x2f2 <main+0x1e>
	int orderY[sizeOfOrder] = { 3, 1, 4, 2};    // replace with user input
 2fa:	88 e0       	ldi	r24, 0x08	; 8
 2fc:	e8 e0       	ldi	r30, 0x08	; 8
 2fe:	f1 e0       	ldi	r31, 0x01	; 1
 300:	de 01       	movw	r26, r28
 302:	19 96       	adiw	r26, 0x09	; 9
 304:	01 90       	ld	r0, Z+
 306:	0d 92       	st	X+, r0
 308:	8a 95       	dec	r24
 30a:	e1 f7       	brne	.-8      	; 0x304 <main+0x30>
	sortOrder(orderX, orderY);
 30c:	be 01       	movw	r22, r28
 30e:	67 5f       	subi	r22, 0xF7	; 247
 310:	7f 4f       	sbci	r23, 0xFF	; 255
 312:	ce 01       	movw	r24, r28
 314:	01 96       	adiw	r24, 0x01	; 1
 316:	0e 94 6c 00 	call	0xd8	; 0xd8 <sortOrder>
				
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	60 96       	adiw	r28, 0x10	; 16
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	f8 94       	cli
 324:	de bf       	out	0x3e, r29	; 62
 326:	0f be       	out	0x3f, r0	; 63
 328:	cd bf       	out	0x3d, r28	; 61
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	08 95       	ret

00000330 <__subsf3>:
 330:	50 58       	subi	r21, 0x80	; 128

00000332 <__addsf3>:
 332:	bb 27       	eor	r27, r27
 334:	aa 27       	eor	r26, r26
 336:	0e 94 b0 01 	call	0x360	; 0x360 <__addsf3x>
 33a:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__fp_round>
 33e:	0e 94 81 02 	call	0x502	; 0x502 <__fp_pscA>
 342:	38 f0       	brcs	.+14     	; 0x352 <__addsf3+0x20>
 344:	0e 94 88 02 	call	0x510	; 0x510 <__fp_pscB>
 348:	20 f0       	brcs	.+8      	; 0x352 <__addsf3+0x20>
 34a:	39 f4       	brne	.+14     	; 0x35a <__addsf3+0x28>
 34c:	9f 3f       	cpi	r25, 0xFF	; 255
 34e:	19 f4       	brne	.+6      	; 0x356 <__addsf3+0x24>
 350:	26 f4       	brtc	.+8      	; 0x35a <__addsf3+0x28>
 352:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__fp_nan>
 356:	0e f4       	brtc	.+2      	; 0x35a <__addsf3+0x28>
 358:	e0 95       	com	r30
 35a:	e7 fb       	bst	r30, 7
 35c:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__fp_inf>

00000360 <__addsf3x>:
 360:	e9 2f       	mov	r30, r25
 362:	0e 94 a0 02 	call	0x540	; 0x540 <__fp_split3>
 366:	58 f3       	brcs	.-42     	; 0x33e <__addsf3+0xc>
 368:	ba 17       	cp	r27, r26
 36a:	62 07       	cpc	r22, r18
 36c:	73 07       	cpc	r23, r19
 36e:	84 07       	cpc	r24, r20
 370:	95 07       	cpc	r25, r21
 372:	20 f0       	brcs	.+8      	; 0x37c <__addsf3x+0x1c>
 374:	79 f4       	brne	.+30     	; 0x394 <__addsf3x+0x34>
 376:	a6 f5       	brtc	.+104    	; 0x3e0 <__addsf3x+0x80>
 378:	0c 94 c2 02 	jmp	0x584	; 0x584 <__fp_zero>
 37c:	0e f4       	brtc	.+2      	; 0x380 <__addsf3x+0x20>
 37e:	e0 95       	com	r30
 380:	0b 2e       	mov	r0, r27
 382:	ba 2f       	mov	r27, r26
 384:	a0 2d       	mov	r26, r0
 386:	0b 01       	movw	r0, r22
 388:	b9 01       	movw	r22, r18
 38a:	90 01       	movw	r18, r0
 38c:	0c 01       	movw	r0, r24
 38e:	ca 01       	movw	r24, r20
 390:	a0 01       	movw	r20, r0
 392:	11 24       	eor	r1, r1
 394:	ff 27       	eor	r31, r31
 396:	59 1b       	sub	r21, r25
 398:	99 f0       	breq	.+38     	; 0x3c0 <__addsf3x+0x60>
 39a:	59 3f       	cpi	r21, 0xF9	; 249
 39c:	50 f4       	brcc	.+20     	; 0x3b2 <__addsf3x+0x52>
 39e:	50 3e       	cpi	r21, 0xE0	; 224
 3a0:	68 f1       	brcs	.+90     	; 0x3fc <__addsf3x+0x9c>
 3a2:	1a 16       	cp	r1, r26
 3a4:	f0 40       	sbci	r31, 0x00	; 0
 3a6:	a2 2f       	mov	r26, r18
 3a8:	23 2f       	mov	r18, r19
 3aa:	34 2f       	mov	r19, r20
 3ac:	44 27       	eor	r20, r20
 3ae:	58 5f       	subi	r21, 0xF8	; 248
 3b0:	f3 cf       	rjmp	.-26     	; 0x398 <__addsf3x+0x38>
 3b2:	46 95       	lsr	r20
 3b4:	37 95       	ror	r19
 3b6:	27 95       	ror	r18
 3b8:	a7 95       	ror	r26
 3ba:	f0 40       	sbci	r31, 0x00	; 0
 3bc:	53 95       	inc	r21
 3be:	c9 f7       	brne	.-14     	; 0x3b2 <__addsf3x+0x52>
 3c0:	7e f4       	brtc	.+30     	; 0x3e0 <__addsf3x+0x80>
 3c2:	1f 16       	cp	r1, r31
 3c4:	ba 0b       	sbc	r27, r26
 3c6:	62 0b       	sbc	r22, r18
 3c8:	73 0b       	sbc	r23, r19
 3ca:	84 0b       	sbc	r24, r20
 3cc:	ba f0       	brmi	.+46     	; 0x3fc <__addsf3x+0x9c>
 3ce:	91 50       	subi	r25, 0x01	; 1
 3d0:	a1 f0       	breq	.+40     	; 0x3fa <__addsf3x+0x9a>
 3d2:	ff 0f       	add	r31, r31
 3d4:	bb 1f       	adc	r27, r27
 3d6:	66 1f       	adc	r22, r22
 3d8:	77 1f       	adc	r23, r23
 3da:	88 1f       	adc	r24, r24
 3dc:	c2 f7       	brpl	.-16     	; 0x3ce <__addsf3x+0x6e>
 3de:	0e c0       	rjmp	.+28     	; 0x3fc <__addsf3x+0x9c>
 3e0:	ba 0f       	add	r27, r26
 3e2:	62 1f       	adc	r22, r18
 3e4:	73 1f       	adc	r23, r19
 3e6:	84 1f       	adc	r24, r20
 3e8:	48 f4       	brcc	.+18     	; 0x3fc <__addsf3x+0x9c>
 3ea:	87 95       	ror	r24
 3ec:	77 95       	ror	r23
 3ee:	67 95       	ror	r22
 3f0:	b7 95       	ror	r27
 3f2:	f7 95       	ror	r31
 3f4:	9e 3f       	cpi	r25, 0xFE	; 254
 3f6:	08 f0       	brcs	.+2      	; 0x3fa <__addsf3x+0x9a>
 3f8:	b0 cf       	rjmp	.-160    	; 0x35a <__addsf3+0x28>
 3fa:	93 95       	inc	r25
 3fc:	88 0f       	add	r24, r24
 3fe:	08 f0       	brcs	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 400:	99 27       	eor	r25, r25
 402:	ee 0f       	add	r30, r30
 404:	97 95       	ror	r25
 406:	87 95       	ror	r24
 408:	08 95       	ret

0000040a <__fixsfsi>:
 40a:	0e 94 0c 02 	call	0x418	; 0x418 <__fixunssfsi>
 40e:	68 94       	set
 410:	b1 11       	cpse	r27, r1
 412:	0c 94 c3 02 	jmp	0x586	; 0x586 <__fp_szero>
 416:	08 95       	ret

00000418 <__fixunssfsi>:
 418:	0e 94 a8 02 	call	0x550	; 0x550 <__fp_splitA>
 41c:	88 f0       	brcs	.+34     	; 0x440 <__fixunssfsi+0x28>
 41e:	9f 57       	subi	r25, 0x7F	; 127
 420:	98 f0       	brcs	.+38     	; 0x448 <__fixunssfsi+0x30>
 422:	b9 2f       	mov	r27, r25
 424:	99 27       	eor	r25, r25
 426:	b7 51       	subi	r27, 0x17	; 23
 428:	b0 f0       	brcs	.+44     	; 0x456 <__fixunssfsi+0x3e>
 42a:	e1 f0       	breq	.+56     	; 0x464 <__fixunssfsi+0x4c>
 42c:	66 0f       	add	r22, r22
 42e:	77 1f       	adc	r23, r23
 430:	88 1f       	adc	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	1a f0       	brmi	.+6      	; 0x43c <__fixunssfsi+0x24>
 436:	ba 95       	dec	r27
 438:	c9 f7       	brne	.-14     	; 0x42c <__fixunssfsi+0x14>
 43a:	14 c0       	rjmp	.+40     	; 0x464 <__fixunssfsi+0x4c>
 43c:	b1 30       	cpi	r27, 0x01	; 1
 43e:	91 f0       	breq	.+36     	; 0x464 <__fixunssfsi+0x4c>
 440:	0e 94 c2 02 	call	0x584	; 0x584 <__fp_zero>
 444:	b1 e0       	ldi	r27, 0x01	; 1
 446:	08 95       	ret
 448:	0c 94 c2 02 	jmp	0x584	; 0x584 <__fp_zero>
 44c:	67 2f       	mov	r22, r23
 44e:	78 2f       	mov	r23, r24
 450:	88 27       	eor	r24, r24
 452:	b8 5f       	subi	r27, 0xF8	; 248
 454:	39 f0       	breq	.+14     	; 0x464 <__fixunssfsi+0x4c>
 456:	b9 3f       	cpi	r27, 0xF9	; 249
 458:	cc f3       	brlt	.-14     	; 0x44c <__fixunssfsi+0x34>
 45a:	86 95       	lsr	r24
 45c:	77 95       	ror	r23
 45e:	67 95       	ror	r22
 460:	b3 95       	inc	r27
 462:	d9 f7       	brne	.-10     	; 0x45a <__fixunssfsi+0x42>
 464:	3e f4       	brtc	.+14     	; 0x474 <__fixunssfsi+0x5c>
 466:	90 95       	com	r25
 468:	80 95       	com	r24
 46a:	70 95       	com	r23
 46c:	61 95       	neg	r22
 46e:	7f 4f       	sbci	r23, 0xFF	; 255
 470:	8f 4f       	sbci	r24, 0xFF	; 255
 472:	9f 4f       	sbci	r25, 0xFF	; 255
 474:	08 95       	ret

00000476 <__floatunsisf>:
 476:	e8 94       	clt
 478:	09 c0       	rjmp	.+18     	; 0x48c <__floatsisf+0x12>

0000047a <__floatsisf>:
 47a:	97 fb       	bst	r25, 7
 47c:	3e f4       	brtc	.+14     	; 0x48c <__floatsisf+0x12>
 47e:	90 95       	com	r25
 480:	80 95       	com	r24
 482:	70 95       	com	r23
 484:	61 95       	neg	r22
 486:	7f 4f       	sbci	r23, 0xFF	; 255
 488:	8f 4f       	sbci	r24, 0xFF	; 255
 48a:	9f 4f       	sbci	r25, 0xFF	; 255
 48c:	99 23       	and	r25, r25
 48e:	a9 f0       	breq	.+42     	; 0x4ba <__floatsisf+0x40>
 490:	f9 2f       	mov	r31, r25
 492:	96 e9       	ldi	r25, 0x96	; 150
 494:	bb 27       	eor	r27, r27
 496:	93 95       	inc	r25
 498:	f6 95       	lsr	r31
 49a:	87 95       	ror	r24
 49c:	77 95       	ror	r23
 49e:	67 95       	ror	r22
 4a0:	b7 95       	ror	r27
 4a2:	f1 11       	cpse	r31, r1
 4a4:	f8 cf       	rjmp	.-16     	; 0x496 <__floatsisf+0x1c>
 4a6:	fa f4       	brpl	.+62     	; 0x4e6 <__floatsisf+0x6c>
 4a8:	bb 0f       	add	r27, r27
 4aa:	11 f4       	brne	.+4      	; 0x4b0 <__floatsisf+0x36>
 4ac:	60 ff       	sbrs	r22, 0
 4ae:	1b c0       	rjmp	.+54     	; 0x4e6 <__floatsisf+0x6c>
 4b0:	6f 5f       	subi	r22, 0xFF	; 255
 4b2:	7f 4f       	sbci	r23, 0xFF	; 255
 4b4:	8f 4f       	sbci	r24, 0xFF	; 255
 4b6:	9f 4f       	sbci	r25, 0xFF	; 255
 4b8:	16 c0       	rjmp	.+44     	; 0x4e6 <__floatsisf+0x6c>
 4ba:	88 23       	and	r24, r24
 4bc:	11 f0       	breq	.+4      	; 0x4c2 <__floatsisf+0x48>
 4be:	96 e9       	ldi	r25, 0x96	; 150
 4c0:	11 c0       	rjmp	.+34     	; 0x4e4 <__floatsisf+0x6a>
 4c2:	77 23       	and	r23, r23
 4c4:	21 f0       	breq	.+8      	; 0x4ce <__floatsisf+0x54>
 4c6:	9e e8       	ldi	r25, 0x8E	; 142
 4c8:	87 2f       	mov	r24, r23
 4ca:	76 2f       	mov	r23, r22
 4cc:	05 c0       	rjmp	.+10     	; 0x4d8 <__floatsisf+0x5e>
 4ce:	66 23       	and	r22, r22
 4d0:	71 f0       	breq	.+28     	; 0x4ee <__floatsisf+0x74>
 4d2:	96 e8       	ldi	r25, 0x86	; 134
 4d4:	86 2f       	mov	r24, r22
 4d6:	70 e0       	ldi	r23, 0x00	; 0
 4d8:	60 e0       	ldi	r22, 0x00	; 0
 4da:	2a f0       	brmi	.+10     	; 0x4e6 <__floatsisf+0x6c>
 4dc:	9a 95       	dec	r25
 4de:	66 0f       	add	r22, r22
 4e0:	77 1f       	adc	r23, r23
 4e2:	88 1f       	adc	r24, r24
 4e4:	da f7       	brpl	.-10     	; 0x4dc <__floatsisf+0x62>
 4e6:	88 0f       	add	r24, r24
 4e8:	96 95       	lsr	r25
 4ea:	87 95       	ror	r24
 4ec:	97 f9       	bld	r25, 7
 4ee:	08 95       	ret

000004f0 <__fp_inf>:
 4f0:	97 f9       	bld	r25, 7
 4f2:	9f 67       	ori	r25, 0x7F	; 127
 4f4:	80 e8       	ldi	r24, 0x80	; 128
 4f6:	70 e0       	ldi	r23, 0x00	; 0
 4f8:	60 e0       	ldi	r22, 0x00	; 0
 4fa:	08 95       	ret

000004fc <__fp_nan>:
 4fc:	9f ef       	ldi	r25, 0xFF	; 255
 4fe:	80 ec       	ldi	r24, 0xC0	; 192
 500:	08 95       	ret

00000502 <__fp_pscA>:
 502:	00 24       	eor	r0, r0
 504:	0a 94       	dec	r0
 506:	16 16       	cp	r1, r22
 508:	17 06       	cpc	r1, r23
 50a:	18 06       	cpc	r1, r24
 50c:	09 06       	cpc	r0, r25
 50e:	08 95       	ret

00000510 <__fp_pscB>:
 510:	00 24       	eor	r0, r0
 512:	0a 94       	dec	r0
 514:	12 16       	cp	r1, r18
 516:	13 06       	cpc	r1, r19
 518:	14 06       	cpc	r1, r20
 51a:	05 06       	cpc	r0, r21
 51c:	08 95       	ret

0000051e <__fp_round>:
 51e:	09 2e       	mov	r0, r25
 520:	03 94       	inc	r0
 522:	00 0c       	add	r0, r0
 524:	11 f4       	brne	.+4      	; 0x52a <__fp_round+0xc>
 526:	88 23       	and	r24, r24
 528:	52 f0       	brmi	.+20     	; 0x53e <__fp_round+0x20>
 52a:	bb 0f       	add	r27, r27
 52c:	40 f4       	brcc	.+16     	; 0x53e <__fp_round+0x20>
 52e:	bf 2b       	or	r27, r31
 530:	11 f4       	brne	.+4      	; 0x536 <__fp_round+0x18>
 532:	60 ff       	sbrs	r22, 0
 534:	04 c0       	rjmp	.+8      	; 0x53e <__fp_round+0x20>
 536:	6f 5f       	subi	r22, 0xFF	; 255
 538:	7f 4f       	sbci	r23, 0xFF	; 255
 53a:	8f 4f       	sbci	r24, 0xFF	; 255
 53c:	9f 4f       	sbci	r25, 0xFF	; 255
 53e:	08 95       	ret

00000540 <__fp_split3>:
 540:	57 fd       	sbrc	r21, 7
 542:	90 58       	subi	r25, 0x80	; 128
 544:	44 0f       	add	r20, r20
 546:	55 1f       	adc	r21, r21
 548:	59 f0       	breq	.+22     	; 0x560 <__fp_splitA+0x10>
 54a:	5f 3f       	cpi	r21, 0xFF	; 255
 54c:	71 f0       	breq	.+28     	; 0x56a <__fp_splitA+0x1a>
 54e:	47 95       	ror	r20

00000550 <__fp_splitA>:
 550:	88 0f       	add	r24, r24
 552:	97 fb       	bst	r25, 7
 554:	99 1f       	adc	r25, r25
 556:	61 f0       	breq	.+24     	; 0x570 <__fp_splitA+0x20>
 558:	9f 3f       	cpi	r25, 0xFF	; 255
 55a:	79 f0       	breq	.+30     	; 0x57a <__fp_splitA+0x2a>
 55c:	87 95       	ror	r24
 55e:	08 95       	ret
 560:	12 16       	cp	r1, r18
 562:	13 06       	cpc	r1, r19
 564:	14 06       	cpc	r1, r20
 566:	55 1f       	adc	r21, r21
 568:	f2 cf       	rjmp	.-28     	; 0x54e <__fp_split3+0xe>
 56a:	46 95       	lsr	r20
 56c:	f1 df       	rcall	.-30     	; 0x550 <__fp_splitA>
 56e:	08 c0       	rjmp	.+16     	; 0x580 <__fp_splitA+0x30>
 570:	16 16       	cp	r1, r22
 572:	17 06       	cpc	r1, r23
 574:	18 06       	cpc	r1, r24
 576:	99 1f       	adc	r25, r25
 578:	f1 cf       	rjmp	.-30     	; 0x55c <__fp_splitA+0xc>
 57a:	86 95       	lsr	r24
 57c:	71 05       	cpc	r23, r1
 57e:	61 05       	cpc	r22, r1
 580:	08 94       	sec
 582:	08 95       	ret

00000584 <__fp_zero>:
 584:	e8 94       	clt

00000586 <__fp_szero>:
 586:	bb 27       	eor	r27, r27
 588:	66 27       	eor	r22, r22
 58a:	77 27       	eor	r23, r23
 58c:	cb 01       	movw	r24, r22
 58e:	97 f9       	bld	r25, 7
 590:	08 95       	ret

00000592 <__gesf2>:
 592:	0e 94 81 03 	call	0x702	; 0x702 <__fp_cmp>
 596:	08 f4       	brcc	.+2      	; 0x59a <__gesf2+0x8>
 598:	8f ef       	ldi	r24, 0xFF	; 255
 59a:	08 95       	ret

0000059c <__mulsf3>:
 59c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__mulsf3x>
 5a0:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__fp_round>
 5a4:	0e 94 81 02 	call	0x502	; 0x502 <__fp_pscA>
 5a8:	38 f0       	brcs	.+14     	; 0x5b8 <__mulsf3+0x1c>
 5aa:	0e 94 88 02 	call	0x510	; 0x510 <__fp_pscB>
 5ae:	20 f0       	brcs	.+8      	; 0x5b8 <__mulsf3+0x1c>
 5b0:	95 23       	and	r25, r21
 5b2:	11 f0       	breq	.+4      	; 0x5b8 <__mulsf3+0x1c>
 5b4:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__fp_inf>
 5b8:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__fp_nan>
 5bc:	11 24       	eor	r1, r1
 5be:	0c 94 c3 02 	jmp	0x586	; 0x586 <__fp_szero>

000005c2 <__mulsf3x>:
 5c2:	0e 94 a0 02 	call	0x540	; 0x540 <__fp_split3>
 5c6:	70 f3       	brcs	.-36     	; 0x5a4 <__mulsf3+0x8>

000005c8 <__mulsf3_pse>:
 5c8:	95 9f       	mul	r25, r21
 5ca:	c1 f3       	breq	.-16     	; 0x5bc <__mulsf3+0x20>
 5cc:	95 0f       	add	r25, r21
 5ce:	50 e0       	ldi	r21, 0x00	; 0
 5d0:	55 1f       	adc	r21, r21
 5d2:	62 9f       	mul	r22, r18
 5d4:	f0 01       	movw	r30, r0
 5d6:	72 9f       	mul	r23, r18
 5d8:	bb 27       	eor	r27, r27
 5da:	f0 0d       	add	r31, r0
 5dc:	b1 1d       	adc	r27, r1
 5de:	63 9f       	mul	r22, r19
 5e0:	aa 27       	eor	r26, r26
 5e2:	f0 0d       	add	r31, r0
 5e4:	b1 1d       	adc	r27, r1
 5e6:	aa 1f       	adc	r26, r26
 5e8:	64 9f       	mul	r22, r20
 5ea:	66 27       	eor	r22, r22
 5ec:	b0 0d       	add	r27, r0
 5ee:	a1 1d       	adc	r26, r1
 5f0:	66 1f       	adc	r22, r22
 5f2:	82 9f       	mul	r24, r18
 5f4:	22 27       	eor	r18, r18
 5f6:	b0 0d       	add	r27, r0
 5f8:	a1 1d       	adc	r26, r1
 5fa:	62 1f       	adc	r22, r18
 5fc:	73 9f       	mul	r23, r19
 5fe:	b0 0d       	add	r27, r0
 600:	a1 1d       	adc	r26, r1
 602:	62 1f       	adc	r22, r18
 604:	83 9f       	mul	r24, r19
 606:	a0 0d       	add	r26, r0
 608:	61 1d       	adc	r22, r1
 60a:	22 1f       	adc	r18, r18
 60c:	74 9f       	mul	r23, r20
 60e:	33 27       	eor	r19, r19
 610:	a0 0d       	add	r26, r0
 612:	61 1d       	adc	r22, r1
 614:	23 1f       	adc	r18, r19
 616:	84 9f       	mul	r24, r20
 618:	60 0d       	add	r22, r0
 61a:	21 1d       	adc	r18, r1
 61c:	82 2f       	mov	r24, r18
 61e:	76 2f       	mov	r23, r22
 620:	6a 2f       	mov	r22, r26
 622:	11 24       	eor	r1, r1
 624:	9f 57       	subi	r25, 0x7F	; 127
 626:	50 40       	sbci	r21, 0x00	; 0
 628:	9a f0       	brmi	.+38     	; 0x650 <__mulsf3_pse+0x88>
 62a:	f1 f0       	breq	.+60     	; 0x668 <__mulsf3_pse+0xa0>
 62c:	88 23       	and	r24, r24
 62e:	4a f0       	brmi	.+18     	; 0x642 <__mulsf3_pse+0x7a>
 630:	ee 0f       	add	r30, r30
 632:	ff 1f       	adc	r31, r31
 634:	bb 1f       	adc	r27, r27
 636:	66 1f       	adc	r22, r22
 638:	77 1f       	adc	r23, r23
 63a:	88 1f       	adc	r24, r24
 63c:	91 50       	subi	r25, 0x01	; 1
 63e:	50 40       	sbci	r21, 0x00	; 0
 640:	a9 f7       	brne	.-22     	; 0x62c <__mulsf3_pse+0x64>
 642:	9e 3f       	cpi	r25, 0xFE	; 254
 644:	51 05       	cpc	r21, r1
 646:	80 f0       	brcs	.+32     	; 0x668 <__mulsf3_pse+0xa0>
 648:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__fp_inf>
 64c:	0c 94 c3 02 	jmp	0x586	; 0x586 <__fp_szero>
 650:	5f 3f       	cpi	r21, 0xFF	; 255
 652:	e4 f3       	brlt	.-8      	; 0x64c <__mulsf3_pse+0x84>
 654:	98 3e       	cpi	r25, 0xE8	; 232
 656:	d4 f3       	brlt	.-12     	; 0x64c <__mulsf3_pse+0x84>
 658:	86 95       	lsr	r24
 65a:	77 95       	ror	r23
 65c:	67 95       	ror	r22
 65e:	b7 95       	ror	r27
 660:	f7 95       	ror	r31
 662:	e7 95       	ror	r30
 664:	9f 5f       	subi	r25, 0xFF	; 255
 666:	c1 f7       	brne	.-16     	; 0x658 <__mulsf3_pse+0x90>
 668:	fe 2b       	or	r31, r30
 66a:	88 0f       	add	r24, r24
 66c:	91 1d       	adc	r25, r1
 66e:	96 95       	lsr	r25
 670:	87 95       	ror	r24
 672:	97 f9       	bld	r25, 7
 674:	08 95       	ret
 676:	19 f4       	brne	.+6      	; 0x67e <__mulsf3_pse+0xb6>
 678:	16 f4       	brtc	.+4      	; 0x67e <__mulsf3_pse+0xb6>
 67a:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__fp_nan>
 67e:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__fp_mpack>

00000682 <sqrt>:
 682:	0e 94 a8 02 	call	0x550	; 0x550 <__fp_splitA>
 686:	b8 f3       	brcs	.-18     	; 0x676 <__mulsf3_pse+0xae>
 688:	99 23       	and	r25, r25
 68a:	c9 f3       	breq	.-14     	; 0x67e <__mulsf3_pse+0xb6>
 68c:	b6 f3       	brts	.-20     	; 0x67a <__mulsf3_pse+0xb2>
 68e:	9f 57       	subi	r25, 0x7F	; 127
 690:	55 0b       	sbc	r21, r21
 692:	87 ff       	sbrs	r24, 7
 694:	0e 94 b3 03 	call	0x766	; 0x766 <__fp_norm2>
 698:	00 24       	eor	r0, r0
 69a:	a0 e6       	ldi	r26, 0x60	; 96
 69c:	40 ea       	ldi	r20, 0xA0	; 160
 69e:	90 01       	movw	r18, r0
 6a0:	80 58       	subi	r24, 0x80	; 128
 6a2:	56 95       	lsr	r21
 6a4:	97 95       	ror	r25
 6a6:	28 f4       	brcc	.+10     	; 0x6b2 <sqrt+0x30>
 6a8:	80 5c       	subi	r24, 0xC0	; 192
 6aa:	66 0f       	add	r22, r22
 6ac:	77 1f       	adc	r23, r23
 6ae:	88 1f       	adc	r24, r24
 6b0:	20 f0       	brcs	.+8      	; 0x6ba <sqrt+0x38>
 6b2:	26 17       	cp	r18, r22
 6b4:	37 07       	cpc	r19, r23
 6b6:	48 07       	cpc	r20, r24
 6b8:	30 f4       	brcc	.+12     	; 0x6c6 <sqrt+0x44>
 6ba:	62 1b       	sub	r22, r18
 6bc:	73 0b       	sbc	r23, r19
 6be:	84 0b       	sbc	r24, r20
 6c0:	20 29       	or	r18, r0
 6c2:	31 29       	or	r19, r1
 6c4:	4a 2b       	or	r20, r26
 6c6:	a6 95       	lsr	r26
 6c8:	17 94       	ror	r1
 6ca:	07 94       	ror	r0
 6cc:	20 25       	eor	r18, r0
 6ce:	31 25       	eor	r19, r1
 6d0:	4a 27       	eor	r20, r26
 6d2:	58 f7       	brcc	.-42     	; 0x6aa <sqrt+0x28>
 6d4:	66 0f       	add	r22, r22
 6d6:	77 1f       	adc	r23, r23
 6d8:	88 1f       	adc	r24, r24
 6da:	20 f0       	brcs	.+8      	; 0x6e4 <sqrt+0x62>
 6dc:	26 17       	cp	r18, r22
 6de:	37 07       	cpc	r19, r23
 6e0:	48 07       	cpc	r20, r24
 6e2:	30 f4       	brcc	.+12     	; 0x6f0 <sqrt+0x6e>
 6e4:	62 0b       	sbc	r22, r18
 6e6:	73 0b       	sbc	r23, r19
 6e8:	84 0b       	sbc	r24, r20
 6ea:	20 0d       	add	r18, r0
 6ec:	31 1d       	adc	r19, r1
 6ee:	41 1d       	adc	r20, r1
 6f0:	a0 95       	com	r26
 6f2:	81 f7       	brne	.-32     	; 0x6d4 <sqrt+0x52>
 6f4:	b9 01       	movw	r22, r18
 6f6:	84 2f       	mov	r24, r20
 6f8:	91 58       	subi	r25, 0x81	; 129
 6fa:	88 0f       	add	r24, r24
 6fc:	96 95       	lsr	r25
 6fe:	87 95       	ror	r24
 700:	08 95       	ret

00000702 <__fp_cmp>:
 702:	99 0f       	add	r25, r25
 704:	00 08       	sbc	r0, r0
 706:	55 0f       	add	r21, r21
 708:	aa 0b       	sbc	r26, r26
 70a:	e0 e8       	ldi	r30, 0x80	; 128
 70c:	fe ef       	ldi	r31, 0xFE	; 254
 70e:	16 16       	cp	r1, r22
 710:	17 06       	cpc	r1, r23
 712:	e8 07       	cpc	r30, r24
 714:	f9 07       	cpc	r31, r25
 716:	c0 f0       	brcs	.+48     	; 0x748 <__fp_cmp+0x46>
 718:	12 16       	cp	r1, r18
 71a:	13 06       	cpc	r1, r19
 71c:	e4 07       	cpc	r30, r20
 71e:	f5 07       	cpc	r31, r21
 720:	98 f0       	brcs	.+38     	; 0x748 <__fp_cmp+0x46>
 722:	62 1b       	sub	r22, r18
 724:	73 0b       	sbc	r23, r19
 726:	84 0b       	sbc	r24, r20
 728:	95 0b       	sbc	r25, r21
 72a:	39 f4       	brne	.+14     	; 0x73a <__fp_cmp+0x38>
 72c:	0a 26       	eor	r0, r26
 72e:	61 f0       	breq	.+24     	; 0x748 <__fp_cmp+0x46>
 730:	23 2b       	or	r18, r19
 732:	24 2b       	or	r18, r20
 734:	25 2b       	or	r18, r21
 736:	21 f4       	brne	.+8      	; 0x740 <__fp_cmp+0x3e>
 738:	08 95       	ret
 73a:	0a 26       	eor	r0, r26
 73c:	09 f4       	brne	.+2      	; 0x740 <__fp_cmp+0x3e>
 73e:	a1 40       	sbci	r26, 0x01	; 1
 740:	a6 95       	lsr	r26
 742:	8f ef       	ldi	r24, 0xFF	; 255
 744:	81 1d       	adc	r24, r1
 746:	81 1d       	adc	r24, r1
 748:	08 95       	ret

0000074a <__fp_mpack>:
 74a:	9f 3f       	cpi	r25, 0xFF	; 255
 74c:	31 f0       	breq	.+12     	; 0x75a <__fp_mpack_finite+0xc>

0000074e <__fp_mpack_finite>:
 74e:	91 50       	subi	r25, 0x01	; 1
 750:	20 f4       	brcc	.+8      	; 0x75a <__fp_mpack_finite+0xc>
 752:	87 95       	ror	r24
 754:	77 95       	ror	r23
 756:	67 95       	ror	r22
 758:	b7 95       	ror	r27
 75a:	88 0f       	add	r24, r24
 75c:	91 1d       	adc	r25, r1
 75e:	96 95       	lsr	r25
 760:	87 95       	ror	r24
 762:	97 f9       	bld	r25, 7
 764:	08 95       	ret

00000766 <__fp_norm2>:
 766:	91 50       	subi	r25, 0x01	; 1
 768:	50 40       	sbci	r21, 0x00	; 0
 76a:	66 0f       	add	r22, r22
 76c:	77 1f       	adc	r23, r23
 76e:	88 1f       	adc	r24, r24
 770:	d2 f7       	brpl	.-12     	; 0x766 <__fp_norm2>
 772:	08 95       	ret

00000774 <_exit>:
 774:	f8 94       	cli

00000776 <__stop_program>:
 776:	ff cf       	rjmp	.-2      	; 0x776 <__stop_program>
